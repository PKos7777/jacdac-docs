{"version":3,"sources":["webpack://jacdac-docs/./src/components/ui/KeyboardKeyInput.tsx"],"names":["useStyles","makeStyles","theme","createStyles","capture","cursor","borderColor","palette","primary","main","action","active","darkKeyboard","backgroundColor","color","background","dark","keyboard","KeyboardKeyInput","props","initialSelector","initialModifiers","selector","modifiers","onChange","uncontrolled","useMemo","undefined","useState","selector_","setSelector_","HidKeyboardModifiers","modifiers_","setModifiters_","useContext","DarkModeContext","darkMode","keyboardRef","useRef","classes","keyboardId","useId","layout","default","display","handleKeyboardKeyPress","code","toLowerCase","replace","newSelector","newModifiers","msel","selectors","mcode","modifierCodes","useEffect","console","warn","value","renderKeyboardKey","current","addButtonTheme","removeButtonTheme","r"],"mappings":"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","file":"2860-bd967f01ee3eeb7f5398.js","sourcesContent":["import React, { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport { HidKeyboardModifiers } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport Keyboard from \"react-simple-keyboard\"\nimport \"react-simple-keyboard/build/css/index.css\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useId } from \"react-use-id-hook\"\nimport {\n    modifierCodes,\n    renderKeyboardKey,\n    selectors,\n} from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        capture: {\n            cursor: \"pointer\",\n            \"&:hover\": {\n                borderColor: theme.palette.primary.main,\n            },\n            \"&:focus\": {\n                borderColor: theme.palette.action.active,\n            },\n        },\n        darkKeyboard: {\n            backgroundColor: \"#333 !important\",\n            borderColor: \"#777 !important\",\n            color: \"white !important\",\n            \"& .hg-button\": {\n                background: \"rgba(0, 0, 0, 0.5) !important\",\n                color: \"white\",\n            },\n            \"& .hg-button.buttonSelected\": {\n                background: `${theme.palette.primary.dark} !important`,\n                color: \"white !important\",\n            },\n        },\n        keyboard: {\n            \"& .buttonSelected\": {\n                background: `${theme.palette.primary.dark} !important`,\n                color: \"white !important\",\n            },\n        },\n    })\n)\n\nexport default function KeyboardKeyInput(props: {\n    initialSelector?: number\n    initialModifiers?: HidKeyboardModifiers\n    selector?: number\n    modifiers?: HidKeyboardModifiers\n    onChange: (newSelector: number, newModifiers: HidKeyboardModifiers) => void\n}) {\n    const { initialSelector, initialModifiers, selector, modifiers, onChange } =\n        props\n    const uncontrolled = useMemo(\n        () => selector === undefined || modifiers === undefined,\n        []\n    )\n    const [selector_, setSelector_] = useState<number>(initialSelector || 0)\n    const [modifiers_, setModifiters_] = useState<HidKeyboardModifiers>(\n        initialModifiers || HidKeyboardModifiers.None\n    )\n    const { darkMode } = useContext(DarkModeContext)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyboardRef = useRef<any>()\n    const classes = useStyles()\n    const theme = `hg-theme-default hg-layout-default ${\n        darkMode === \"dark\" ? classes.darkKeyboard : classes.keyboard\n    }`\n    const keyboardId = useId()\n\n    const layout = {\n        default: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5} {f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6 7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space} {metaright} {altright}\",\n        ],\n    }\n    const display = {\n        \"{escape}\": \"esc ⎋\",\n        \"{tab}\": \"tab ⇥\",\n        \"{backspace}\": \"backspace ⌫\",\n        \"{enter}\": \"enter ↵\",\n        \"{capslock}\": \"caps lock ⇪\",\n        \"{shiftleft}\": \"shift ⇧\",\n        \"{shiftright}\": \"shift ⇧\",\n        \"{controlleft}\": \"ctrl ⌃\",\n        \"{controlright}\": \"ctrl ⌃\",\n        \"{altleft}\": \"alt ⌥\",\n        \"{altright}\": \"alt ⌥\",\n        \"{metaleft}\": \"cmd ⌘\",\n        \"{metaright}\": \"cmd ⌘\",\n    }\n    const handleKeyboardKeyPress = (code: string) => {\n        code = code.toLowerCase().replace(/[{}]/g, \"\")\n        let newSelector = selector_\n        let newModifiers = modifiers_\n        const msel = selectors[code]\n        const mcode = modifierCodes[code]\n        if (msel) {\n            if (msel === selector) newSelector = undefined\n            else newSelector = msel\n        } else {\n            if (mcode) {\n                if (newModifiers & mcode) newModifiers &= ~mcode\n                else newModifiers |= mcode\n            }\n        }\n        setSelector_(newSelector)\n        setModifiters_(newModifiers)\n        onChange(newSelector, newModifiers)\n    }\n\n    // update external values\n    useEffect(() => {\n        if (selector !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled selector`)\n            setSelector_(selector)\n        }\n    }, [selector])\n    useEffect(() => {\n        if (modifiers !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled modifier`)\n            setModifiters_(modifiers)\n        }\n    }, [modifiers])\n\n    const value = renderKeyboardKey(selector_, modifiers_, false)\n    useEffect(() => {\n        keyboardRef.current?.addButtonTheme(value, \"buttonSelected\")\n        return () =>\n            keyboardRef.current?.removeButtonTheme(value, \"buttonSelected\")\n    }, [value])\n\n    return (\n        <Keyboard\n            baseClass={keyboardId}\n            keyboardRef={r => (keyboardRef.current = r)}\n            onKeyPress={handleKeyboardKeyPress}\n            layout={layout}\n            theme={theme}\n            display={display}\n            mergeDisplay={true}\n        />\n    )\n}\n"],"sourceRoot":""}