{"version":3,"file":"component---src-pages-tools-qr-silk-tsx-bc29d1b5064e7321b837.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./src/pages/tools/qr-silk.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import {\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Switch,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, lazy, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport { toMap } from \"../../../jacdac-ts/src/jdom/utils\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nimport { graphql } from \"gatsby\"\nimport { Button } from \"gatsby-theme-material-ui\"\n\nexport const query = graphql`\n    {\n        allQrUrlDeviceMapCsv {\n            nodes {\n                vanityname\n                revision\n                modulename\n                designid\n            }\n        }\n    }\n`\n\nexport default function DeviceQRCodeGenerator(props: {\n    data: {\n        allQrUrlDeviceMapCsv: {\n            nodes: {\n                vanityname: string\n                modulename: string\n                designid: string\n                revision: string\n            }[]\n        }\n    }\n}) {\n    const { data } = props\n    const { nodes } = data.allQrUrlDeviceMapCsv\n    const knowns = toMap(\n        nodes,\n        n => n.vanityname.toUpperCase(),\n        n => n\n    )\n    const [vanity, setVanity] = useState(`AAAAAB`)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const vanity = ev.target.value?.toUpperCase()\n        setVanity(vanity)\n    }\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const s = Number(ev.target.value)\n        if (!isNaN(s)) setSize(s)\n    }\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) => {\n        setMirror(!!ev.target.checked)\n    }\n    const mirrorid = useId()\n    const url = !!vanity && `HTTP://AKA.MS/${vanity}`\n    const known = knowns[vanity]\n    const { modulename, designid, revision } = known || {}\n    const handleVanity = (vanityname: string) => () =>\n        setVanity(vanityname.toUpperCase())\n    const handleNextVanity = () => {\n        const next = Object.values(nodes).find(({ designid }) => !designid)\n        if (next) setVanity(next.vanityname.toUpperCase())\n    }\n    return (\n        <>\n            <h1>Silk QR Code generator</h1>\n            <p>\n                Enter a short URL HTTP://AKA.MS/<strong>vanity name</strong> to\n                be encoded as a silk compatible QR code. If you use a link, make\n                sure to update{\" \"}\n                <a href=\"https://github.com/microsoft/jacdac/blob/main/devices/microsoft/research/qr-url-device-map.csv\">\n                    GitHub\n                </a>\n                .\n            </p>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"vanity name\"\n                        value={vanity}\n                        placeholder=\"AAAAA\"\n                        onChange={handleUrlChange}\n                        helperText={\"HTTP://AKA.MS/...\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (cm)\"\n                        type=\"number\"\n                        value={size}\n                        onChange={handleSizeChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <Switch\n                        checked={mirror}\n                        onChange={handleMirror}\n                        aria-labelby={mirrorid}\n                    />\n                    <label id={mirrorid}>mirror</label>\n                </Grid>\n                <Grid item xs>\n                    <Button variant=\"contained\" onClick={handleNextVanity}>\n                        Pick Unassigned\n                    </Button>\n                </Grid>\n            </Grid>\n            <h2>URL</h2>\n            <pre>\n                <a href={url}>{url}</a>\n            </pre>\n            {known && (\n                <>\n                    <h2>Reserved device entry</h2>\n                    <p>\n                        {designid\n                            ? `${designid}: ${modulename} v${revision}`\n                            : `unassigned`}\n                    </p>\n                </>\n            )}\n            <h2>QR codes</h2>\n            <Suspense>\n                <SilkQRCode url={url} mirror={mirror} size={size} />\n            </Suspense>\n            <h2>Preview</h2>\n            <p>\n                If you see bing.com for aka.ms links, it&quot;s likely to be\n                free.\n            </p>\n            <iframe\n                style={{ width: \"100%\", height: \"14rem\", border: \"none\" }}\n                src={url?.replace(/^http:/i, \"HTTPS:\")}\n                sandbox=\"allow-scripts\"\n            />\n            <h2>Known devices</h2>\n            <List>\n                {nodes\n                    .filter(({ designid }) => !!designid)\n                    .map(({ vanityname, modulename, designid, revision }) => (\n                        <ListItem\n                            button\n                            key={vanityname}\n                            onClick={handleVanity(vanityname)}\n                        >\n                            <ListItemText\n                                primary={`${designid}: ${modulename} v${revision}`}\n                                secondary={`aka.ms/${vanityname}`}\n                            />\n                        </ListItem>\n                    ))}\n            </List>\n        </>\n    )\n}\n"],"names":["Grid","List","ListItem","ListItemText","Switch","TextField","React","lazy","useState","useId","Suspense","toMap","SilkQRCode","Button","query","DeviceQRCodeGenerator","props","data","nodes","allQrUrlDeviceMapCsv","knowns","n","vanityname","toUpperCase","vanity","setVanity","mirror","setMirror","size","setSize","handleUrlChange","ev","target","value","handleSizeChange","s","Number","isNaN","handleMirror","checked","mirrorid","url","known","modulename","designid","revision","handleVanity","handleNextVanity","next","Object","values","find","width","height","border","replace","filter","map"],"sourceRoot":""}