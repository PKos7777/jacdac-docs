{"version":3,"file":"1931-fdb225b86bfa7f95a253.js","mappings":"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","sources":["webpack://jacdac-docs/./src/jacdac/useServiceClient.ts","webpack://jacdac-docs/./jacdac-ts/src/clients/azureiothubhealthclient.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardAzureIoTHubHealth.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<\n    TServiceClient extends JDServiceClient\n>(service: JDService, factory: (service: JDService) => TServiceClient) {\n    const [client, setClient] = useState<TServiceClient>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, factory])\n\n    return client\n}\n","import {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n    CHANGE,\n    EVENT,\n    REPORT_UPDATE,\n    SRV_AZURE_IOT_HUB_HEALTH,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegister from \"../jdom/register\"\nimport JDService from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { assert } from \"../jdom/utils\"\n\nexport class AzureIoTHubHealthClient extends JDServiceClient {\n    private readonly hubNameRegister: JDRegister\n    private readonly hubDeviceIdRegister: JDRegister\n    private readonly connectionStatusRegister: JDRegister\n    private readonly statisticsRegister: JDRegister\n\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_AZURE_IOT_HUB_HEALTH)\n\n        // tell the bus to refresh these register\n        this.hubNameRegister = this.service.register(\n            AzureIotHubHealthReg.HubName\n        )\n        this.hubDeviceIdRegister = this.service.register(\n            AzureIotHubHealthReg.HubDeviceId\n        )\n        this.connectionStatusRegister = this.service.register(\n            AzureIotHubHealthReg.ConnectionStatus\n        )\n        this.statisticsRegister = this.service.register(\n            AzureIotHubHealthReg.Statistics\n        )\n        this.mount(() =>\n            this.hubNameRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE)\n            )\n        )\n        this.mount(() =>\n            this.connectionStatusRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE)\n            )\n        )\n        this.mount(() =>\n            this.statisticsRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE)\n            )\n        )\n        this.mount(() =>\n            this.service\n                .event(AzureIotHubHealthEvent.ConnectionStatusChange)\n                .on(EVENT, () => this.connectionStatusRegister.refresh())\n        )\n    }\n\n    get hubName() {\n        return this.hubNameRegister.stringValue\n    }\n\n    get hubDeviceId() {\n        return this.hubDeviceIdRegister.stringValue\n    }\n\n    get connectionStatus(): AzureIotHubHealthConnectionStatus {\n        const reg = this.connectionStatusRegister\n        return reg.unpackedValue?.[0] as AzureIotHubHealthConnectionStatus\n    }\n\n    get statistics() {\n        const [reading, event, twinReported, twinDesired] =\n            this.statisticsRegister.unpackedValue\n        return {\n            reading,\n            event,\n            twinReported,\n            twinDesired,\n        }\n    }\n\n    /**\n     * Sends a connect command to the hub\n     */\n    async connect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Connect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a disconnect command to the hub\n     */\n    async disconnect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Disconnect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a new connection string to the iot debice\n     * @param connectionString\n     */\n    async setConnectionString(connectionString: string) {\n        const data = jdpack<[string]>(\"s\", [connectionString || \"\"])\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.SetConnectionString,\n            data,\n            true\n        )\n    }\n}\nexport default AzureIoTHubHealthClient\n","import React, { useCallback } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { Grid, Switch, Typography } from \"@material-ui/core\"\nimport useChange, { useChangeAsync } from \"../../jacdac/useChange\"\nimport useServiceClient from \"../../jacdac/useServiceClient\"\nimport AzureIoTHubHealthClient from \"../../../jacdac-ts/src/clients/azureiothubhealthclient\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { AzureIotHubHealthConnectionStatus } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react-use-id-hook\"\nimport Snippet from \"../ui/Snippet\"\n\nexport default function DashboardAzureIoTHubHealth(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const connectId = useId()\n\n    const factory = useCallback(srv => new AzureIoTHubHealthClient(srv), [])\n    const client = useServiceClient(service, factory)\n    const hubName = useChange(client, _ => _?.hubName)\n    const connectionStatus = useChange(client, _ => _?.connectionStatus)\n    const color = \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const connected =\n        connectionStatus === AzureIotHubHealthConnectionStatus.Connected\n\n    return (\n        <Grid\n            container\n            spacing={1}\n            style={{ color: textPrimary, minWidth: \"16rem\" }}\n        >\n            <Grid item xs={12}>\n                <Typography component=\"span\" variant=\"subtitle1\">\n                    hub: {hubName}\n                </Typography>\n                <Switch checked={connected} aria-labelledby={connectId} />\n                <label className=\".no-pointer-events\" id={connectId}>\n                    {AzureIotHubHealthConnectionStatus[connectionStatus]}\n                </label>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["useEffect","useState","useServiceClient","service","factory","client","setClient","undefined","c","unmount","AzureIotHubHealthCmd","AzureIotHubHealthEvent","AzureIotHubHealthReg","CHANGE","EVENT","REPORT_UPDATE","SRV_AZURE_IOT_HUB_HEALTH","jdpack","JDServiceClient","assert","AzureIoTHubHealthClient","serviceClass","hubNameRegister","register","HubName","hubDeviceIdRegister","HubDeviceId","connectionStatusRegister","ConnectionStatus","statisticsRegister","Statistics","mount","subscribe","emit","event","ConnectionStatusChange","on","refresh","connect","sendCmdAsync","Connect","disconnect","Disconnect","setConnectionString","connectionString","data","SetConnectionString","stringValue","reg","unpackedValue","reading","twinReported","twinDesired","React","useCallback","Grid","Switch","Typography","useChange","useWidgetTheme","AzureIotHubHealthConnectionStatus","useId","DashboardAzureIoTHubHealth","props","connectId","srv","hubName","_","connectionStatus","color","textPrimary","connected","Connected","minWidth"],"sourceRoot":""}