{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/utils.ts"],"names":["VMServiceEnvironment","service","_registers","_events","registerRegister","regName","handler","pkt","specification","packets","find","isRegister","name","register","identifier","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","sendCommandAsync","command","values","commandName","p","isCommand","sendCmdAsync","jdpack","packFormat","console","log","shortName","writeRegisterAsync","ev","jdreg","sendSetPackedAsync","lookup","e","root","type","object","fld","undefined","property","unpackedValue","field","fields","f","value","refreshRegistersAsync","k","refresh","JDServiceClient","VMEnvironment","_currentEvent","_envs","_locals","serviceChanged","role","added","unmount","reg","serviceEnv","getService","emit","getRootName","s","JACDAC_ROLE_HAS_NO_SERVICE","Object","roleName","me","local","writeLocal","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","JDExprEvaluator","env","callEval","exprStack","tos","length","pop","eval","visitExpression","ret","push","top","le","val","JDVMError","id","lit","JACDAC_VM_ERROR","JACDAC_ROLE_SERVICE_BOUND","JACDAC_ROLE_SERVICE_UNBOUND","JACDAC_VM_COMMAND_ATTEMPTED","JACDAC_VM_COMMAND_COMPLETED","message","jacdacName","Error","errorPath"],"mappings":"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","file":"b4b5e3de7d195d717097f81a5311f716f303ebf6-fdb69897c1a8f22451eb.js","sourcesContent":["import { isEvent, isRegister, isCommand } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { JACDAC_ROLE_HAS_NO_SERVICE } from \"./utils\"\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(command: jsep.Identifier, values: PackedValues) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n            console.log(this.service?.specification.shortName, command.name, values)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async writeRegisterAsync(regName: string, ev: any) {\n        const jdreg = this._registers[regName]\n        await jdreg?.sendSetPackedAsync(jdreg.specification?.packFormat, [ev], true)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | jsep.Identifier | string): any {\n        let root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        let fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public async refreshRegistersAsync() {\n        for (const k in this._registers) {\n            const register = this._registers[k]\n            await register.refresh()\n        }\n    }\n}\n\nexport class VMEnvironment extends JDEventSource {\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _locals: SMap<string> = {}\n\n    constructor() {\n        super()\n    }\n\n    public serviceChanged(role: string, service: JDService, added: boolean) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (added) {\n            this._envs[role] = new VMServiceEnvironment(service)\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerRegister(reg, () => { this.emit(CHANGE)})\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.emit(CHANGE)\n            })\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        let s = this._envs[root]\n        if (!s) {\n            this.emit(JACDAC_ROLE_HAS_NO_SERVICE, root)\n        }\n        return s\n    }\n\n    public async refreshRegistersAsync() {\n        for(const s of Object.values(this._envs)) {\n            await s?.refreshRegistersAsync()\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(e: jsep.MemberExpression, values: PackedValues) {\n        const serviceEnv = this.getService(e)\n        await serviceEnv?.sendCommandAsync(e.property as jsep.Identifier, values)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            let me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._locals[local]\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) {\n            return undefined\n        }\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.lookup(reg)\n        }\n        return undefined\n    }\n\n    public async writeRegisterAsync(e: jsep.MemberExpression | string, ev: any) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            await serviceEnv.writeRegisterAsync(reg, ev)\n        }\n    }\n\n    public writeLocal(e: jsep.MemberExpression | string, ev: any) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            this._locals[local] = ev\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return false\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        for(const vs of Object.values(this._envs)) {\n            vs.unmount()\n         }\n    }\n}\n","import { JDVMError } from \"./utils\"\n\nexport type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: JDExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class JDExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public eval(e: jsep.Expression) {\n        // special case for Blockly\n        if (e.type === \"Identifier\" && (e as jsep.Identifier).name === \"%%NOCODE%%\")\n            return undefined\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    public visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    let ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                this.visitExpression(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = this.env(e as jsep.MemberExpression)\n                if (val === undefined)\n                    throw new JDVMError(`lookup of ${unparse(e)} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = this.env(id.name)\n                if (val === undefined)\n                    throw new JDVMError(`lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","export const JACDAC_VM_ERROR = \"JacdacVMError\"\nexport const JACDAC_ROLE_SERVICE_BOUND = \"JacdacVMRoleServiceBound\"\nexport const JACDAC_ROLE_SERVICE_UNBOUND = \"JacdacVMRoleServiceUnbound\"\nexport const JACDAC_ROLE_HAS_NO_SERVICE = \"JacdacVMRoleHasNoService\"\nexport const JACDAC_VM_COMMAND_ATTEMPTED = \"JacdacVMCommandAttempted\"\nexport const JACDAC_VM_COMMAND_COMPLETED = \"JacdacVMCommandCompleted\"\n\nexport class JDVMError extends Error {\n    constructor(message: string, readonly jacdacName?: string) {\n        super(message)\n        this.name = JACDAC_VM_ERROR\n    }\n}\n\nexport default function errorPath(e: JDVMError): string {\n    return (e as JDVMError)?.jacdacName\n}"],"sourceRoot":""}