{"componentChunkName":"component---src-templates-service-mdx","path":"/services/control/","result":{"pageContext":{"frontmatter":{},"classIdentifier":0,"source":"# Control\n\n    identifier: 0x00000000\n    tags: C\n\nControl service is always service index `0`.\nIt handles actions common to all services on a device.\n\n## Commands\n\n    flags AnnounceFlags : u8 {\n        SupportsACK = 0x01,\n    }\n    command services @ announce { }\n    report {\n        restart_counter: u8\n        flags: AnnounceFlags\n        packet_count: u8\n        reserved: u8\n    repeats:\n        service_class: u32\n    }\n\nThe `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\n`packet_count` indicates the number of packets sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\n\n    command noop @ 0x80 { }\n\nDo nothing. Always ignored. Can be used to test ACKs.\n\n    command identify? @ 0x81 { }\n\nBlink an LED or otherwise draw user's attention.\n\n    command reset? @ 0x82 { }\n\nReset device. ACK may or may not be sent.\n\n    command flood_ping? @ 0x83 {\n        num_responses: u32\n        start_counter: u32\n        size: u8 B\n    }\n    report {\n        counter: u32\n        dummy_payload: bytes\n    }\n\nThe device will respond `num_responses` times, as fast as it can, setting the `counter` field in the report\nto `start_counter`, then `start_counter + 1`, ..., and finally `start_counter + num_responses - 1`.\nThe `dummy_payload` is `size` bytes long and contains bytes `0, 1, 2, ...`.\n\n## Registers\n\n    rw reset_in? : u32 us @ 0x80\n\nWhen set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.\n\n    const device_description?: string @ 0x180\n\nIdentifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n\n    const firmware_identifier? : u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x181\n\nA numeric code for the string above; used to identify firmware images and devices.\n\n    const bootloader_firmware_identifier?: u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x184\n\nTypically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n\n    const firmware_version?: string @ 0x185\n\nA string describing firmware version; typically semver.\n\n    ro mcu_temperature?: i16 Â°C { preferred_interval=60000, typical_min = -10, typical_max = 150 } @ 0x182\n\nMCU temperature in degrees Celsius (approximate).\n\n    ro uptime?: u64 us { preferred_interval=60000 } @ 0x186\n\nNumber of microseconds since boot.\n\n    const device_url?: string @ 0x187\n\nRequest the information web site for this device\n\n    const firmware_url?: string @ 0x188\n\nURL with machine-readable metadata information about updating device firmware\n\n    rw status_light? @ 0x81 {\n        repetitions: u16\n        repeats:\n            hue: u8\n            saturation: u8\n            value: u8\n            duration8: u8 8ms\n    }\n\nSpecifies a status light animation sequence on a colored or monochrome LED\nusing the [LED animation format](/spec/led-animation/).\nTypically, up to 8 steps (repeats) are supported.\n\nThe status light is also used by Jacdac software stack to indicate various status mode\nand this animation may be overridden when those modes are enabled."}},"staticQueryHashes":["2307937736","2307937736","2744294623","2744294623","413816803","413816803","63159454","63159454"]}