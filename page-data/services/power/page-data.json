{"componentChunkName":"component---src-templates-service-mdx","path":"/services/power/","result":{"pageContext":{"frontmatter":{},"classIdentifier":530893146,"source":"# Power\n\n    identifier: 0x1fa4c95a\n\nA power-provider service.\n\n## Power negotiation protocol\n\nThe purpose of the power negotiation is to ensure that there is no more than ~500mA\ndelivered to the power rail.\nThis is realized by limiting the number of enabled power provider services to one.\n\nNote, that it's also possible to have low-current power providers,\nwhich are limited to 100mA and do not run a power provider service.\nThese are **not** accounted for in the power negotiation protocol.\n\nThe protocol is based on `active` reports, which are always sent \nafter general device announce packets, in the same frame.\nThis makes it simpler for other power services to parse them.\n\nThe `active` reports contain device priority, which is formed from the maximum available current\nand remaining battery capacity.\n\nAfter queuing an announce with `active` report, the service enters a grace period\nuntil the report has been sent on the wire.\nDuring the grace period incoming `active` reports are ignored.\n\n* Upon reset, a power service enables itself, and then only after 0-300ms (random)\n  send the first device announce packet directly followed by `active` report\n* Every enabled power service emits power `active` reports with its announce packets,\n  which are sent every 400-600ms (random; first few announce packets can be even sent more often)\n* If an enabled power service sees a power `active` report from somebody else of higher or equal priority,\n  it disables itself (unless in grace period)\n* If a disabled power service sees no power `active` report for more than ~1200ms, it enables itself\n  (this is when the previous power source is unplugged or otherwise malfunctions)\n* Power services keep track of the current provider\n  (device ID from the most recent `active` report, either incoming or outgoing).\n  If the current provider has not changed for at least 50-60s (random),\n  and its last priority is lower or equal to the current service priority,\n  then just before the next announce period, the service enables itself\n  (thus also resetting the 50-60s timer).\n\n### Rationale for the grace period\n\nConsider the following scenario:\n* device A queues `active` report for sending\n* A receives external `active` packet from B (thus disabling A)\n* the A `active` report is sent from the queue (thus eventually disabling B)\nTo avoid that, we make sure that at the precise instant when `active` report is sent,\nthe device is enabled (and thus will stay enabled until another `active` report arrives).\nThis could be achieved by inspecting the enable bit, aftering acquiring the line\nand before starting UART transmission, however that would require breaking abstraction layers.\nSo instead, we never disable the service, while the `active` packet is queued.\nThis may lead to delays in disabling power services, but these should be limited due to the\nrandom nature of the announce packet spacing.\n\n### Rationale for timings\n\nThe initial 0-300ms delay is set to spread out the announce periods of power services,\nto minimize collisions.\nThe announce periods are randomized 400-600ms, instead of a fixed 500ms used for regular\nservices, for the same reason.\n\nThe 1200ms period is set so that droping two announce packets in a row\nfrom the current provider will not cause power switch, while missing 3 will.\n\nThe 50-60s power switch period is arbitrary, but chosen to limit amount of switching between supplies,\nwhile keeping it short enough for user to notice any problems such switching may cause.\n\n## Registers\n\n    rw enabled = 1: bool @ intensity\n\nTurn the power to the bus on/off.\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ max_power\n\nLimit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.\n\n    ro overload: bool @ 0x181\n\nIndicates whether the power has been shut down due to overdraw.\n\n    ro current_draw?: u16 mA @ reading\n\nPresent current draw from the bus.\n\n    ro battery_voltage?: u16 mV {typical_min = 4500, typical_max = 5500} @ 0x180\n\nVoltage on input.\n\n    ro battery_charge?: u0.16 / @ 0x182\n\nFraction of charge in the battery.\n\n    const battery_capacity?: u32 mWh @ 0x183\n\nEnergy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.\n\n    rw keep_on_pulse_duration = 600: u16 ms @ 0x80\n    rw keep_on_pulse_period = 20000: u16 ms @ 0x81\n\nMany USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.\n\n    rw priority_offset: i32 @ 0x82\n\nThis value is added to `priority` of `active` reports, thus modifying amount of load-sharing\nbetween different supplies.\nThe `priority` is clamped to `u32` range when included in `active` reports.\n\n## Commands\n\n    report active @ 0x80 {\n        priority: u32\n    }\n\nEmitted with announce packets when the service is running.\nThe `priority` should be computed as\n`(((max_power >> 5) << 24) | remaining_capacity) + priority_offset`\nwhere the `remaining_capacity` is `(battery_charge * battery_capacity) >> 16`,\nor one of the special constants\n`0xe00000` when the remaining capacity is unknown,\nor `0xf00000` when the capacity is considered infinite (eg., wall charger).\nThe `priority` is clamped to `u32` range after computation.\nIn cases where battery capacity is unknown but the charge percentage can be estimated,\nit's recommended to assume a fixed (typical) battery capacity for priority purposes,\nrather than using `0xe00000`, as this will have a better load-sharing characteristic,\nespecially if several power providers of the same type are used.\n"}},"staticQueryHashes":["2270080012","2270080012","2461311362","2461311362","2744294623","2744294623","413816803","413816803","63159454","63159454","650773314","650773314"]}