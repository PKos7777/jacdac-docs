{"componentChunkName":"component---src-components-spec-tsx","path":"/reference/service-tests/","result":{"data":{"mdx":{"id":"5c822c55-6c24-5604-9497-ab188232d236","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Service Tests\",\n  \"order\": 5\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"service-tests\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#service-tests\",\n    \"aria-label\": \"service tests permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Service Tests\"), mdx(\"p\", null, \"A service test is a markdown file that contains a number of unit tests for a\\ngiven service. Use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/jacdac-docs/tools/service-test-editor/\"\n  }, \"service test editor\"), \" to\\nview, create and edit tests.\"), mdx(\"p\", null, \"The unit tests can be a mixture of automated and manual tests.\\nA simple domain-specific set of test constructs is made available for easy\\nauthoring of tests for the common cases, with an escape hatch to write TypeScript\\nfor more complex test scenarios.\"), mdx(\"p\", null, \"The markdown file can (optionally) have a header (#) with a descriptive title. Each unit\\ntest must with a subheader (##) with a unique short description. A manual test\\ngenerally starts with a prompt to the user, followed by a sequence of test\\ncommands. \"), mdx(\"h2\", {\n    \"id\": \"test-commands\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#test-commands\",\n    \"aria-label\": \"test commands permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Test commands\"), mdx(\"p\", null, \"A test command is a single line JavaScript function call, indented. We currently\\nsupport the following calls.  Every call can have optional preceding markdown, which\\nshould be separated by a blank line from the call. The following two test functions\\nmake use of this markdown in order to interact with the user for manual testing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"say\"), \"(): prompt the user with the preceding markdown\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ask\"), \"(): ask the user to give a Yes/No answer to the question specified in preceding markdown\")), mdx(\"p\", null, \"The remaining test functions can be checked automatically with a manual fallback\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"check\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \"): check if the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \" evaluates true\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"changes\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \"): check if the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \" changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"increases\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \"): check if \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \" increases in value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"decreases\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \"): check if \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \" descreases in value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"increasesBy\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \"): check if \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \" increases in value by \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"decreasesBy\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\"), \"): check if \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \" descreases in value by \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"expr\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rangesFromUpTo\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"startExpr\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"endExpr\"), \"): check if register increases from startExpr to endExpr (and integer values in between)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rangesFromDownTo\"), \"(\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"register\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"startExpr\"), \",\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"endExpr\"), \"): check if register decreases from startExpr to endExpr (and integer values in between\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"reset\"), \"()\")), mdx(\"h2\", {\n    \"id\": \"test-expressions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#test-expressions\",\n    \"aria-label\": \"test expressions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Test expressions\"), mdx(\"p\", null, \"Most test expressions are just JavaScript expressions where identifiers\\nrefer to elements of the service specification (e.g., registers). A few\\nspecial test functions are provided:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"start\"), \"(expr): the value of expr at the start of the unit test\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Service Tests","fullScreen":null,"hideMainMenu":null,"hideUnderConstruction":null,"hideToc":null}}},"pageContext":{"id":"5c822c55-6c24-5604-9497-ab188232d236"}},"staticQueryHashes":["2461311362","2744294623","413816803","63159454"]}