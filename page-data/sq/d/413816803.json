{"data":{"allPlainText":{"nodes":[{"content":"<mxfile host=\"Electron\" modified=\"2020-08-14T11:30:57.032Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"ZCs2OvjD7ipumh7gICt4\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">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</diagram></mxfile>","parent":{"__typename":"File","name":"jacdac-activity-highlight","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-04T14:19:38.461Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"t0BzEcxsZP97vcOpMLjh\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">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</diagram></mxfile>","parent":{"__typename":"File","name":"jacdac-activity","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T12:24:38.883Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"BygZWyy6CGFYbeDQvKey\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">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</diagram></mxfile>","parent":{"__typename":"File","name":"jacdac-proto-timings","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-09-03T11:08:54.202Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"OLU_kA0hMEPwsn4xHzou\" version=\"12.9.13\" type=\"device\"><diagram id=\"HprpYEN0h96NzXgQkXMR\" name=\"Page-1\">5Vpdb9sgFP01fuwUfyZ9bOy0a7dp3TJp614qYlMbzTERxkmcXz+wIbGNq7ZrIqPMLzEXuMA5cA+YGLa/3N4QsEq+4AimhjWKtoYdGJZlmiOP/XBLWVsmjlMbYoIiUehgmKMdFMaRsBYognmrIMU4pWjVNoY4y2BIWzZACN60iz3htN3qCsRQMcxDkKrWnyiiiRiFNT7YP0IUJ7Jl07usc5ZAFhYjyRMQ4U3DZM8M2ycY0/ptufVhysGTuNT1rp/J3XeMwIy+pgL2Lx9nj19X61vwMPbvrr75we2F8LIGaSEGfJ+UOWLjF52mpUSC4CKLIHc2MuzpJkEUzlcg5Lkbxj2zJXSZspTJXtXOyZYgoXDbMInO3kC8hJSUrIjIdQRuYuKYnkhvDjSYEtukQYGsBwTz8d7zARz2IvB5A1a2gpWPM0qwflBZQ0PlKFDNIVkjhsC7oIpAnlRleeIJpamPU0wqR/Z19TB7zij5Axs5o+rhNRhdDXv9nISBydAEeAoBCvIwi654gGSpMAU5W/QVeIBQ1dzggGFEyl+crw+uTD4084KtILNOlSL1LMisxRjSl2MUjFqRWqWiAbbbg7W0EZgCitbt+N5HgGjhHiPW4z3T5qhN9Z5r6SLHBQmhqNWMx11H7guOamAUR9V82A/736fI+E1TJMMZfGXc0oQo50g8eS85OjFPE30l2hrpptFy26ihSCtgDa7Sprr7O3OZ7nIwuE6b1hkJ9USr+G95RxIA2xxWAEz14KGNAtiedgrgaqsACljDK4B6TjhzBehyMLwCvG0frrcCyFCliQQ41pEkwBkPLAEaHwJcSzcJkI1pKAEKWINLgPXfHQK6HAwuATLin4cE6HUKcCdHkgDPHlYCLHVfa1heytCaLthLzF/uQBiAkBVaFLnMZI3t85VZxVYMbU8YkKI447OJEQ/Z4pvydcV15kpkLFEU8epTAnO0A4vKFZ8yKz7yCgt3argB91VQnNc3escKn8+d6RqTadIzmawjLN3gYvHpx2Ox+14W3zZBuZt9/v3Uc38WwPfHTh785qJuzz3fe28negS6bwWeDDQ13OkIWvdb0dCoqV8BdESte74aGjX1JlJH1LpbktOhxpKHvxzU2nT444Y9+ws=</diagram></mxfile>","parent":{"__typename":"File","name":"jacdac-stack","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T13:01:31.001Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"0ecN-Hfsv3d2yfjBnLzk\" version=\"12.9.13\" type=\"device\"><diagram id=\"acCLaWqGyHlhlVS2UljO\" name=\"Page-1\">7Vpdc9o6EP01POKxJH/xGJK0t206k2l6p82jsAX41liMLALk11/JlrBlE0LAgJmpX7DW0sra3XO0WtNDt7PVZ4bn0+80IkkP2tGqh+56EAJge+JHStaFJHCcQjBhcaQ6lYKn+JUooa2kizgimdGRU5rweG4KQ5qmJOSGDDNGl2a3MU3MWed4QhqCpxAnTemvOOJTtQrol/J/SDyZ6pmBNyiezLDurFaSTXFElxURuu+hW0YpL+5mq1uSSONpuxTjPr3xdPNijKR8nwFfMUZfvvpr8Prt4XHkrUY/b771lZaMr/WCSSTWr5qU8Smd0BQn96V0yOgijYjUaotW2eeB0rkQAiH8j3C+Vs7EC06FaMpniXpKVjH/Xbl/lqosV7XuVkpz3ljrRsrZ+ne1URklm+WwvKXHNa2kl0wXLCQ7TINUtGE2IXxHv6DoJ+1WmUD54DOhMyLeR3RgJME8fjHjCqvwnGz6lR4UN8qJH3AoLPS+4GShZnoSK+DSBoskIz0ZJF4i1jMcMXE3kXcR4QI6wqPbYuEBjwSkDf/hJJ6k4j4UNiVMCF4I47HAzI16MIujqAgVksWveJTrk96Y0zjl+ZLdYc+92+qfXXEqJyKr3hbgq0kMbBnmV6P6tgURUr5dG5r2dpBS/igXU2oGjqG0DwamBjoeZyKQ6g7evOLhPkcNnz/EGSdpnE5yymO5V40oqDs6SQShSo8tpzEnT3OcQ2MpOL3m+mxesOw4XkkKGGac0T8baoS7ENdw3ptOApozlS2Ro9rLCgUr0bTCvlrWOqqcvzT5Dv29S5MAdIon3QZmhmtO8ulDImbvMhk6LZKhA90TcGFNaf9sVOhdEqglOJ+r2HwHqCU2n7W+ywLV6RRQ/e0JTT/CHMvzgdihGgkNWYWESJdCD8/kDpaOsvnGeJ3EtNcipvWZS6MPtoJprUZrRefCdNCIgF845tXk5t+bHz/lGTMPiW6nNqhrqc3gAMYMF+wlJ0xwAcIEvTNlNjpjuTbG1KWTCmDuBDL6oyLByRlzyymwJM3OkuSgRZJEwcBMUqDXDk0Cx7JrVAkCSxeMTk+XOmwr7v+R57QFY14RV7pd40oADyDLY/jxoJOfmVDa7/CjweVHkKWzJ1mibnFls3byieEZ6XPaH8ubJk8W/HlJtkyk+iEO/0zyo8stTUQWJCdH4/z6QFlNlwtbqav5HjAZtaXEEwDLMSt2vjUIzsanTiNE7hnTRTXe+WJaPeME3qVZdNAwaNOGaXQjv95IxCQ4y+LQNF1hqUrk2/l1igpYa4xWsbe7xd5adiRavNqeWXdjweRqUOnJLSUcU9GmrRUVdmkoagt28JCaa0tVVn3/oZPIO/H1dsS2tQPvfVxpvRKbDxV4xetKB7Vv7QhUM8AcO9gZkJ57XH/kwlqcFm/85ttZNnB9GPgudJE/qM0tntoO9AF0fMeDtnMYyDzXs9yg1POhSU4NwGsukcM2a+QIumZFDbZD1cACvl25gG/M0g+E+weV62wpjz4KV1z/KNJNkn9AZDQkYkOWh8nrSnw2x8lLJT66BtCBWttBO1wXam06NFvevBrYdP167WFgVbFY+6K1L+E7QHL65oJ2rQZl75zl1IzfrLTfp1Gv/OvIFfxRRGOs2zVCse3XaoSBBc9H7xet+bdQ0zrdR1Lt4POXsfajIQe2QkOgdkp00HkPd3q6HWW3LV8oLl9525eEruJDBWqQUN/zjucg0Sz/1Fp0L/8ajO7/Bw==</diagram></mxfile>","parent":{"__typename":"File","name":"jacdac-state-diagram","ext":".drawio"}},{"content":"import {\n    Chip,\n    Divider,\n    Grid,\n    InputAdornment,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { useMemo, useState } from \"react\"\nimport ServiceSpecificationList from \"../components/ServiceSpecificationList\"\nimport { useDebounce } from \"use-debounce\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport ChipList from \"../components/ui/ChipList\"\nimport {\n    deviceSpecificationsForService,\n    isSensor,\n    resolveMakecodeServiceFromClassIdentifier,\n    serviceSpecifications,\n} from \"../../jacdac-ts/src/jdom/spec\"\nimport { arrayConcatMany, unique } from \"../../jacdac-ts/src/jdom/utils\"\nimport MakeCodeIcon from \"../components/icons/MakeCodeIcon\"\nimport KindIcon from \"../components/KindIcon\"\nimport { hostDefinitionFromServiceClass } from \"../../jacdac-ts/src/hosts/hosts\"\nimport JacdacIcon from \"../components/icons/JacdacIcon\"\nimport SpeedIcon from \"@material-ui/icons/Speed\"\nimport { VIRTUAL_DEVICE_NODE_NAME } from \"../../jacdac-ts/src/jdom/constants\"\nimport { useId } from \"react-use-id-hook\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\ninterface ServiceFilter {\n    query: string\n    tag?: string\n    sensors?: boolean\n    makeCode?: boolean\n    simulators?: boolean\n    devices?: boolean\n}\n\nfunction FilterChip(props: {\n    label: string\n    value: boolean\n    icon?: JSX.Element\n    onClick: () => void\n}) {\n    const { label, value, icon, onClick } = props\n    const descr = value\n        ? `Disable ${label} filter`\n        : `Filter by ${label} support`\n    return (\n        <Chip\n            label={label}\n            aria-label={descr}\n            title={descr}\n            icon={icon}\n            variant={value ? \"default\" : \"outlined\"}\n            color={value ? \"secondary\" : undefined}\n            onClick={onClick}\n        />\n    )\n}\n\nexport default function ServiceCatalog() {\n    const [filter, setFilter] = useState<ServiceFilter>({\n        query: \"\",\n    })\n    const [deboundedFilter] = useDebounce(filter, 200)\n    const searchId = useId()\n    const { query, tag, makeCode, simulators, devices, sensors } = filter\n    const allTags = useMemo(\n        () =>\n            unique(\n                arrayConcatMany(serviceSpecifications().map(srv => [srv.group, ...srv.tags]))\n                    .filter(t => !!t)\n            ),\n        []\n    )\n    const services = useMemo(() => {\n        const m = query.toLowerCase()\n        let r = serviceSpecifications()\n        if (m) {\n            const filter = (s: string) => s?.toLowerCase().indexOf(m) > -1\n            r = r.filter(srv => filter(srv.name) || filter(srv.notes[\"short\"]))\n        }\n        if (tag) {\n            r = r.filter(srv => srv.group === tag || srv.tags.indexOf(tag) > -1)\n        }\n        if (makeCode)\n            r = r.filter(\n                srv =>\n                    !!resolveMakecodeServiceFromClassIdentifier(\n                        srv.classIdentifier\n                    )\n            )\n        if (simulators)\n            r = r.filter(\n                srv => !!hostDefinitionFromServiceClass(srv.classIdentifier)\n            )\n        if (devices)\n            r = r.filter(\n                srv =>\n                    !!deviceSpecificationsForService(srv.classIdentifier)\n                        ?.length\n            )\n        if (sensors) r = r.filter(srv => isSensor(srv))\n        return r\n    }, [deboundedFilter])\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFilter({\n            ...filter,\n            query: event.target.value,\n        })\n    }\n    const handleTagClick = (t: string) => () => {\n        setFilter({ ...filter, tag: tag === t ? \"\" : t })\n    }\n    const handleMakeCodeClick = () =>\n        setFilter({ ...filter, makeCode: !makeCode })\n    const handleSimulatorClick = () =>\n        setFilter({ ...filter, simulators: !simulators })\n    const handleDevicesClick = () => setFilter({ ...filter, devices: !devices })\n    const handleSensorsClick = () => setFilter({ ...filter, sensors: !sensors })\n\n    return <>\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <TextField\n                    id={searchId}\n                    margin=\"normal\"\n                    type=\"search\"\n                    variant=\"outlined\"\n                    label=\"Search services\"\n                    aria-label=\"Search services\"\n                    fullWidth={true}\n                    value={query}\n                    onChange={handleChange}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <ChipList>\n                    {allTags.map(t => (\n                        <FilterChip\n                            key={t}\n                            label={t}\n                            onClick={handleTagClick(t)}\n                            value={tag === t}\n                        />\n                    ))}\n                    <Divider orientation=\"vertical\" flexItem />\n                    <FilterChip\n                        label=\"Sensors\"\n                        icon={<SpeedIcon />}\n                        value={sensors}\n                        onClick={handleSensorsClick}\n                    />\n                    <FilterChip\n                        label=\"Simulator\"\n                        icon={<KindIcon kind={VIRTUAL_DEVICE_NODE_NAME} />}\n                        value={simulators}\n                        onClick={handleSimulatorClick}\n                    />\n                    <FilterChip\n                        label=\"Devices\"\n                        icon={<JacdacIcon />}\n                        onClick={handleDevicesClick}\n                        value={devices}\n                    />\n                    <FilterChip\n                        label=\"MakeCode\"\n                        icon={<MakeCodeIcon />}\n                        value={makeCode}\n                        onClick={handleMakeCodeClick}\n                    />\n                </ChipList>\n            </Grid>\n            {!services.length && (\n                <Grid item>There are no services matching this request.</Grid>\n            )}\n            <Grid item xs={12}>\n                <ServiceSpecificationList\n                    title=\"Stable\"\n                    status={[\"stable\"]}\n                    infrastructure={false}\n                    services={services}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <ServiceSpecificationList\n                    title=\"Experimental\"\n                    status={[\"experimental\"]}\n                    infrastructure={false}\n                    services={services}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <ServiceSpecificationList\n                    title=\"Jacdac\"\n                    infrastructure={true}\n                    services={services}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <ServiceSpecificationList\n                    title=\"Deprecated\"\n                    status={[\"deprecated\"]}\n                    infrastructure={false}\n                    services={services}\n                />\n            </Grid>\n        </Grid>\n        <h2>See also</h2>\n        <p>\n            Known services are specified in\n<Link href=\"https://github.com/microsoft/jacdac/tree/main/services\">https://github.com/microsoft/jacdac/tree/main/services</Link>.\nUse the <Link href=\"/tools/service-editor/\">Service Specification Editor</Link> and send us a pull request\nto register your own service.\n        </p>\n        <ul>\n            <li><Link to=\"/devices/\">Devices</Link></li>\n            <li><Link to=\"/tools/service-editor/\">Service Specification Editor</Link></li>\n        </ul>\n    </>\n}\n","parent":{"__typename":"File","name":"services","ext":".tsx"}},{"content":"import { Grid, TextField } from \"@material-ui/core\"\nimport React, { ChangeEvent, useMemo } from \"react\"\nimport { clone, uniqueName } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useLocalStorage from \"../../components/useLocalStorage\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\"\nimport ServiceSpecificationSelect from \"../../components/ServiceSpecificationSelect\"\nimport {\n    DTDL_CONTEXT,\n    escapeName,\n    serviceSpecificationToComponent,\n} from \"../../../jacdac-ts/src/azure-iot/dtdl\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport Snippet from \"../../components/ui/Snippet\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport { useId } from \"react-use-id-hook\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\ninterface DigitalTwinComponent {\n    name: string\n    service: jdspec.ServiceSpec\n}\n\ninterface DigitalTwinSpec {\n    displayName: string\n    components: DigitalTwinComponent[]\n}\n\nfunction ComponentRow(props: {\n    twin: DigitalTwinSpec\n    component: DigitalTwinComponent\n    onUpdate: () => void\n}) {\n    const { component, onUpdate, twin } = props\n    const { name, service } = component\n    const { nameError, serviceError } = useMemo(\n        () => validateTwinComponent(twin, component),\n        [twin, component]\n    )\n    const nameId = useId()\n    const handleComponentNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        component.name = escapeName(ev.target.value)\n        onUpdate()\n    }\n    const handleSetService = (serviceClass: number) => {\n        component.service = serviceSpecificationFromClassIdentifier(\n            serviceClass\n        )\n        onUpdate()\n    }\n    const handleComponentDelete = () => {\n        twin.components.splice(twin.components.indexOf(component), 1)\n        onUpdate()\n    }\n    return <>\n        <h1>Azure Device Twin Designer</h1>\n        <p>\n\n            An <Link href=\"https://github.com/Azure/opendigitaltwins-dtdl/\">device twin</Link> is to be used in IoT solutions such as with Azure IoT Hubs,\n            Azure IoT Plug And Play.\n            The repository of <Link to=\"/dtmi/\">Azure IoT Plug And Play models</Link> for services can be used to resolve models.\n        </p>\n        <Grid item xs={12}>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <TextField\n                        id={nameId}\n                        fullWidth={true}\n                        error={!!nameError}\n                        variant=\"outlined\"\n                        label=\"name\"\n                        helperText={nameError}\n                        value={name}\n                        onChange={handleComponentNameChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <ServiceSpecificationSelect\n                        variant=\"outlined\"\n                        label=\"service\"\n                        serviceClass={service.classIdentifier}\n                        setServiceClass={handleSetService}\n                        error={serviceError}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconButtonWithTooltip\n                        title=\"Remove service\"\n                        onClick={handleComponentDelete}\n                    >\n                        <DeleteIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n        </Grid>\n    </>\n}\n\nfunction validateTwinComponent(\n    twin: DigitalTwinSpec,\n    component: DigitalTwinComponent\n) {\n    let serviceError: string = undefined\n    const nameError: string = undefined\n    const count = twin.components.filter(\n        c => c.service.classIdentifier === component.service.classIdentifier\n    ).length\n    if (count > 1) serviceError = `Multiple same service not supported.`\n    return { serviceError, nameError }\n}\n\nexport default function AzureDeviceTwinDesigner() {\n    const variant = \"outlined\"\n    const [twin, setTwin] = useLocalStorage<DigitalTwinSpec>(\n        \"jacdac:digitaltwin;1\",\n        {\n            displayName: \"mydesigner\",\n            components: [],\n        } as DigitalTwinSpec\n    )\n\n    const dtdl = {\n        \"@type\": \"Interface\",\n        \"@id\": `dtmi:jacdac:devices:${escapeName(twin.displayName)},1`,\n        displayName: twin.displayName,\n        contents: twin.components.map(c =>\n            serviceSpecificationToComponent(c.service, c.name)\n        ),\n        \"@context\": DTDL_CONTEXT,\n    }\n    const dtdlSource = JSON.stringify(dtdl, null, 2)\n\n    const update = () => {\n        setTwin(clone(twin))\n    }\n    const handleDisplayNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        twin.displayName = ev.target.value\n        update()\n    }\n    const handleAddService = (service: jdspec.ServiceSpec) => {\n        const names = twin.components.map(c => c.name)\n        twin.components.push({\n            name: uniqueName(names, service.shortId),\n            service,\n        })\n        update()\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                    required\n                    fullWidth={true}\n                    label=\"Display name\"\n                    placeholder=\"My device\"\n                    value={twin.displayName || \"\"}\n                    onChange={handleDisplayNameChange}\n                    variant={variant}\n                />\n            </Grid>\n            {twin.components.map((c, i) => (\n                <ComponentRow\n                    key={i}\n                    twin={twin}\n                    component={c}\n                    onUpdate={update}\n                />\n            ))}\n            <Grid item xs={12}>\n                <AddServiceIconButton onAdd={handleAddService} />\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox>\n                    <Snippet value={dtdlSource} mode=\"json\" download=\"model\" />\n                </PaperBox>\n            </Grid>\n        </Grid>\n    )\n}\n","parent":{"__typename":"File","name":"azure-device-twin-designer","ext":".tsx"}},{"content":"import React, { useState, useContext, useEffect } from 'react';\n// tslint:disable-next-line: no-submodule-imports\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Grid, Button, TextField, InputAdornment, createStyles, Switch, Card, CardActions } from '@material-ui/core';\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport StopIcon from '@material-ui/icons/Stop';\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport SaveIcon from '@material-ui/icons/Save';\nimport useChange from '../../jacdac/useChange';\nimport { JDBus } from '../../../jacdac-ts/src/jdom/bus'\nimport FieldDataSet from '../../components/FieldDataSet';\nimport Trend from '../../components/Trend';\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../../components/ui/Alert\";\nimport EventSelect from '../../components/EventSelect';\nimport { JDEvent } from '../../../jacdac-ts/src/jdom/event';\nimport { EVENT, REPORT_UPDATE, SRV_SENSOR_AGGREGATOR } from '../../../jacdac-ts/src/jdom/constants';\nimport { arrayConcatMany, throttle } from '../../../jacdac-ts/src/jdom/utils';\nimport DataSetGrid from '../../components/DataSetGrid';\nimport { JDRegister } from '../../../jacdac-ts/src/jdom/register';\nimport ReadingFieldGrid from '../../components/ReadingFieldGrid';\nimport DeviceCardHeader from '../../components/DeviceCardHeader';\nimport { SensorAggregatorClient } from '../../../jacdac-ts/src/jdom/sensoraggregatorclient';\nimport { Link } from 'gatsby-theme-material-ui';\nimport { JDService } from '../../../jacdac-ts/src/jdom/service';\nimport ServiceManagerContext from '../../components/ServiceManagerContext';\nimport useChartPalette from '../../components/useChartPalette';\nimport { isSensor } from '../../../jacdac-ts/src/jdom/spec';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        marginBottom: theme.spacing(1)\n    },\n    grow: {\n        flexGrow: 1\n    },\n    field: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(1.5)\n    },\n    segment: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    row: {\n        marginBottom: theme.spacing(0.5)\n    },\n    buttons: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2)\n    },\n    trend: {\n        width: theme.spacing(10)\n    },\n    vmiddle: {\n        verticalAlign: \"middle\"\n    }\n}));\n\nconst LIVE_HORIZON = 24\nfunction createDataSet(bus: JDBus,\n    registers: JDRegister[],\n    name: string,\n    live: boolean,\n    palette: string[]) {\n    const fields = arrayConcatMany(registers.map(reg => reg.fields))\n    const colors = fields.map((f, i) => palette[i % palette.length])\n    const set = new FieldDataSet(bus, name, fields, colors)\n    if (live)\n        set.maxRows = LIVE_HORIZON + 4\n\n    return set;\n}\n\nexport default function Collector() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const classes = useStyles();\n    const { fileStorage } = useContext(ServiceManagerContext)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const [recording, setRecording] = useState(false)\n    const [tables, setTables] = useState<FieldDataSet[]>([])\n    const [, setRecordingLength] = useState(0)\n    const [prefix, setPrefix] = useState(\"data\")\n    const [samplingIntervalDelay, setSamplingIntervalDelay] = useState(\"100\")\n    const [samplingDuration, setSamplingDuration] = useState(\"10\")\n    const [liveDataSet, setLiveDataSet] = useState<FieldDataSet>(undefined)\n    const [, setLiveDataTimestamp] = useState(0)\n    const [triggerEventId, setTriggerEventId] = useState<string>(\"\")\n    const chartPalette = useChartPalette()\n    const readingRegisters = useChange(bus, bus =>\n        bus.devices().map(device => device\n            .services().find(srv => isSensor(srv.specification))\n            ?.readingRegister\n        ).filter(reg => !!reg))\n    const recordingRegisters = readingRegisters\n        .filter(reg => registerIdsChecked.indexOf(reg.id) > -1)\n    const aggregators: JDService[] = useChange(bus, bus => bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR }))\n    const aggregator: JDService = aggregators.find(srv => srv.id == aggregatorId)\n    const samplingIntervalDelayi = parseInt(samplingIntervalDelay)\n    const samplingCount = Math.ceil(parseFloat(samplingDuration) * 1000 / samplingIntervalDelayi)\n    const errorSamplingIntervalDelay = isNaN(samplingIntervalDelayi) || !/\\d+/.test(samplingIntervalDelay)\n    const errorSamplingDuration = isNaN(samplingCount)\n    const error = errorSamplingDuration || errorSamplingIntervalDelay\n    const triggerEvent = bus.node(triggerEventId) as JDEvent;\n    const startEnabled = !!recordingRegisters?.length\n\n    useEffect(() => {\n        //console.log(`trigger event`, triggerEventId, triggerEvent)\n        const un = triggerEvent?.subscribe(EVENT, () => {\n            //console.log(`trigger toggle recoring`, recording)\n            toggleRecording()\n        })\n        //console.log(`mounted`, triggerEvent)\n        return () => {\n            //console.log(`unmount trigger`)\n            if (un) un()\n        }\n    }, [triggerEvent, recording, registerIdsChecked, liveDataSet])\n\n    const createSensorConfig = () => ({\n        samplingInterval: samplingIntervalDelayi,\n        samplesInWindow: 10,\n        inputs: recordingRegisters.map(reg => ({\n            serviceClass: reg.service.serviceClass\n        }))\n    })\n    const saveConfig = () => {\n        const sensorConfig = JSON.stringify(createSensorConfig(), null, 2)\n        fileStorage.saveText(`${prefix || \"jacdac\"}-sensor-config.json`, sensorConfig)\n    }\n    const newDataSet = (registerIds: string[], live: boolean) => registerIds.length\n        ? createDataSet(\n            bus,\n            readingRegisters.filter(reg => registerIds.indexOf(reg.id) > -1),\n            `${prefix || \"data\"}${tables.length}`,\n            live,\n            chartPalette)\n        : undefined\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1)\n            registerIdsChecked.splice(i, 1)\n        else\n            registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n        setLiveDataSet(newDataSet(registerIdsChecked, true))\n    }\n    const stopRecording = () => {\n        if (recording) {\n            //console.log(`stop recording`, liveDataSet)\n            setTables([liveDataSet, ...tables])\n            setLiveDataSet(newDataSet(registerIdsChecked, true))\n            setRecording(false)\n        }\n    }\n    const startRecording = async () => {\n        if (!recording && recordingRegisters.length) {\n            setLiveDataSet(newDataSet(registerIdsChecked, false))\n            setRecording(true)\n            if (aggregator) {\n                const client = new SensorAggregatorClient(aggregator)\n                await client.setInputs(createSensorConfig())\n                client.collect(samplingCount)\n            }\n        }\n    }\n    const startStreamingRegisters = () => {\n        console.log(`start streaming`)\n        const streamers = recordingRegisters?.map(reg => reg.subscribe(REPORT_UPDATE, () => { }))\n        return () => {\n            console.log(`stop streaming`)\n            streamers.map(streamer => streamer())\n        }\n    }\n    const toggleRecording = () => {\n        if (recording)\n            stopRecording()\n        else\n            startRecording()\n    }\n    const handleSamplingIntervalChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSamplingIntervalDelay(event.target.value.trim())\n    }\n    const handleSamplingDurationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSamplingDuration(event.target.value.trim())\n    }\n    const handlePrefixChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPrefix(event.target.value.trim())\n    }\n    const handleTriggerChange = (eventId: string) => setTriggerEventId(eventId)\n    const handleDeleteTable = (table: FieldDataSet) => {\n        const i = tables.indexOf(table)\n        if (i > -1) {\n            tables.splice(i, 1)\n            setTables([...tables])\n        }\n    }\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? '' : srv?.id\n        setAggregatorId(id);\n    }\n    const updateLiveData = () => {\n        setLiveDataSet(liveDataSet);\n        setRecordingLength(liveDataSet.rows.length)\n        setLiveDataTimestamp(bus.timestamp)\n    }\n    const throttleUpdate = throttle(() => updateLiveData(), 30)\n    // data collection\n    // interval add data entry\n    const addRow = (values?: number[]) => {\n        if (!liveDataSet) return;\n        //console.log(values)\n        liveDataSet.addRow(values)\n        if (recording && liveDataSet.length >= samplingCount) {\n            // stop recording\n            updateLiveData()\n            stopRecording()\n        } else {\n            throttleUpdate()\n        }\n    }\n    // setting interval\n    useEffect(() => {\n        if (error) return;\n        console.log(`set interval to ${samplingIntervalDelayi}`)\n        recordingRegisters.forEach(reg => reg.sendSetIntAsync(samplingIntervalDelayi));\n    }, [samplingIntervalDelayi, registerIdsChecked, errorSamplingIntervalDelay])\n    // collecting\n    useEffect(() => {\n        if (error || (aggregator && recording)) return undefined;\n        const interval = setInterval(() => addRow(), samplingIntervalDelayi);\n        const stopStreaming = startStreamingRegisters()\n        return () => {\n            clearInterval(interval);\n            stopStreaming();\n        }\n    }, [recording, samplingIntervalDelayi, samplingCount, registerIdsChecked, aggregator]);\n    useEffect(() => {\n        if (aggregator) {\n            const client = new SensorAggregatorClient(aggregator)\n            return client.subscribeSample(values => addRow(values))\n        }\n        return () => { }\n    }, [recording, liveDataSet, registerIdsChecked, aggregator])\n\n    return <div className={classes.root}>\n        <h1>Data Collector</h1>\n        <p>\n            Use this page to collect streaming data from Jacdac devices into various output formats.\n        </p>\n        {!!aggregators.length && <div key=\"aggregators\">\n            <h3>(Optional) Choose a data aggregator</h3>\n            <p>A <Link to=\"/services/aggregator\">data aggregator</Link> service collects collects sensor data on the bus and returns an aggregated at regular intervals.</p>\n            <Grid container>\n                {aggregators.map(aggregator => <Grid key={'aggregate' + aggregator.id} item xs={4}>\n                    <Card>\n                        <DeviceCardHeader device={aggregator.device} showMedia={true} />\n                        <CardActions>\n                            <Switch checked={aggregatorId == aggregator.id} disabled={recording} onChange={handleAggregatorChecked(aggregator)} />\n                        </CardActions>\n                    </Card>\n                </Grid>)}\n            </Grid>\n        </div>}\n        <div key=\"sensors\">\n            <h3>Choose sensors</h3>\n            {!readingRegisters.length && <Alert className={classes.grow} severity=\"info\">Waiting for sensor...</Alert>}\n            {!!readingRegisters.length && <ReadingFieldGrid\n                readingRegisters={readingRegisters}\n                registerIdsChecked={registerIdsChecked}\n                recording={recording}\n                liveDataSet={liveDataSet}\n                handleRegisterCheck={handleRegisterCheck}\n            />}\n        </div>\n        <div key=\"record\">\n            <h3>Record data</h3>\n            {aggregator && <p>Record the sensor input configuration in order to up your ML model later on.</p>}\n            <div className={classes.buttons}>\n                <Button\n                    size=\"large\"\n                    variant=\"contained\"\n                    color={recording ? \"secondary\" : \"primary\"}\n                    aria-label=\"start/stop recording\"\n                    title=\"start/stop recording\"\n                    onClick={toggleRecording}\n                    startIcon={recording ? <StopIcon /> : <PlayArrowIcon />}\n                    disabled={!startEnabled}\n                >{recording ? \"Stop\" : \"Start\"}</Button>\n                {aggregator && <Button\n                    variant=\"contained\"\n                    title=\"save sensor input configuration\"\n                    onClick={saveConfig}\n                    startIcon={<SaveIcon />}\n                    disabled={recording}>\n                    Save configuration\n                </Button>}\n            </div>\n            <div className={classes.row}>\n                <TextField\n                    className={classes.field}\n                    error={errorSamplingIntervalDelay}\n                    disabled={recording}\n                    label=\"Sampling interval\"\n                    value={samplingIntervalDelay}\n                    variant=\"outlined\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">ms</InputAdornment>,\n                    }}\n                    onChange={handleSamplingIntervalChange} />\n                <TextField\n                    className={classes.field}\n                    error={errorSamplingDuration}\n                    disabled={recording}\n                    label=\"Sampling duration\"\n                    value={samplingDuration}\n                    variant=\"outlined\"\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">s</InputAdornment>,\n                    }}\n                    onChange={handleSamplingDurationChange} />\n                <TextField\n                    className={classes.field}\n                    disabled={recording}\n                    label=\"File name prefix\"\n                    value={prefix}\n                    variant=\"outlined\"\n                    onChange={handlePrefixChange} />\n                <EventSelect className={classes.field} eventId={triggerEventId} onChange={handleTriggerChange} label={\"Start Event\"} />\n            </div>\n        </div>\n        {liveDataSet && <Trend key=\"trends\" height={12} dataSet={liveDataSet} horizon={LIVE_HORIZON} dot={true} gradient={true} />}\n        {\n            !!tables.length && <div key=\"recordings\">\n                <h3>Recordings</h3>\n                <DataSetGrid tables={tables} handleDeleteTable={handleDeleteTable} />\n            </div>\n        }\n    </div >;\n\n    //{liveDataSet && <DataSetTable key=\"datasettable\" className={classes.segment} dataSet={liveDataSet} maxRows={3} minRows={3} />}\n\n}\n","parent":{"__typename":"File","name":"collector","ext":".tsx"}},{"content":"import React, { lazy, useMemo, useState } from 'react';\nimport { Grid, Link } from '@material-ui/core';\nimport useLocalStorage from '../../components/useLocalStorage';\nimport { clone, unique } from '../../../jacdac-ts/src/jdom/utils';\nimport { Box, Chip, Menu, MenuItem, TextField, Typography } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\nimport { deviceSpecifications, serviceSpecificationFromClassIdentifier } from '../../../jacdac-ts/src/jdom/spec';\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport { uniqueFirmwareId } from '../../components/RandomGenerator';\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport AddIcon from '@material-ui/icons/Add';\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport CreateIcon from '@material-ui/icons/Create';\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport { parseRepoUrl } from '../../components/github'\nimport { DEVICE_IMAGE_HEIGHT, DEVICE_IMAGE_WIDTH, escapeDeviceIdentifier, escapeDeviceNameIdentifier, normalizeDeviceSpecification } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ImportImageCanvas from '../../components/ImageImportCanvas';\nimport FirmwareCard from \"../../components/firmware/FirmwareCard\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Autocomplete } from '@material-ui/lab/';\nimport { useFirmwareBlob } from '../../components/firmware/useFirmwareBlobs';\nimport { FirmwareBlob } from '../../../jacdac-ts/src/jdom/flashing';\nimport { useId } from \"react-use-id-hook\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\";\n\nimport Suspense from \"../../components/ui/Suspense\";\nconst GithubPullRequestButton = lazy(() => import('../../components/GithubPullRequestButton'));\n\nfunction CompanySelect(props: { error?: string, value?: string, onValueChange?: (name: string) => void }) {\n    const { onValueChange, value, error } = props;\n    const [company, setCompany] = useState(value)\n    const companies = useMemo(() => unique(deviceSpecifications().map(dev => dev.company)), []);\n    const companyId = useId()\n    const helperText = \"Name of the company manufacturing this device. The company name will be used to generate the module identifier.\"\n\n    const handleChange = (ev: unknown, newValue: string) => {\n        setCompany(newValue);\n        onValueChange?.(newValue);\n    }\n    const renderInputs = (params) => <TextField {...params}\n        error={!!error}\n        label=\"Company\"\n        helperText={error || helperText} variant=\"outlined\" />\n\n    return <Autocomplete\n        id={companyId}\n        freeSolo={true}\n        fullWidth={true}\n        includeInputInList\n        autoComplete\n        options={companies}\n        renderInput={renderInputs}\n        inputValue={company}\n        aria-label={helperText}\n        onInputChange={handleChange} />\n}\n\nexport default function DeviceRegistration() {\n    const [device, setDevice] = useLocalStorage<jdspec.DeviceSpec>('jacdac:devicedesigner;2',\n        {\n            id: \"my-device\",\n            name: \"My device\",\n            services: [],\n            firmwares: [],\n            repo: \"\"\n        } as jdspec.DeviceSpec)\n    const updateDevice = () => {\n        setDevice(clone(device));\n    }\n    const [firmwaresAnchorEl, setFirmwaresAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [imageBase64, setImageBase64] = useState<string>(undefined);\n    const nameId = useId();\n    const firmwareMenuId = useId();\n    const repoId = useId();\n    const identifierId = useId();\n    const homepageId = useId();\n    const handleServiceAdd = (srv: jdspec.ServiceSpec) => {\n        console.log(`add`, srv.classIdentifier)\n        device.services.push(srv.classIdentifier)\n        updateDevice();\n    };\n    const companyRepos = useMemo(() => unique(deviceSpecifications()\n        .filter(d => d.company === device.company)\n        .map(d => d.repo)\n        .filter(repo => !!repo)), [device?.company]);\n    const { firmwareBlobs } = useFirmwareBlob(device.repo)\n    const variant = \"outlined\";\n    const companyError = !device.company\n        ? \"select a company\"\n        : \"\";\n    const nameError = device.name?.length > 32\n        ? \"name too long\"\n        : undefined;\n    const parsedRepo = parseRepoUrl(device.repo);\n    const githubError = parsedRepo\n        ? \"\"\n        : \"invalid GitHub repository\"\n    const linkError = !device.link || /^https:\\/\\//.test(device.link)\n        ? \"\"\n        : \"Must be https://...\"\n    const idError = !device.id\n        ? \"missing identifier\"\n        : deviceSpecifications().find(dev => dev.id == device.id)\n            ? \"identifer already used\"\n            : \"\";\n    const servicesError = device.services?.length\n        ? \"\"\n        : \"Select at least one service\"\n    const imageError = !imageBase64 ? \"missing image\" : \"\"\n    const ok = !nameError && parsedRepo && !linkError && !idError && !servicesError\n        && !imageError && !companyError;\n\n    const route = device.id?.split('-').join('/');\n    const modulePath = ok && `devices/${route}.json`\n    const imagePath = ok && `devices/${route}.jpg`\n\n    const updateDeviceId = () => {\n        const companyid = escapeDeviceIdentifier(device.company);\n        const nameid = escapeDeviceNameIdentifier(device.name);\n        device.id = companyid + '-' + nameid;\n    }\n\n    const handleNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.name = ev.target.value;\n        updateDeviceId();\n        updateDevice();\n    }\n    const handleRepoChange = (ev: unknown, newValue: string) => {\n        device.repo = newValue;\n        updateDevice();\n    }\n    const handleLinkChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.link = ev.target.value;\n        updateDevice();\n    }\n    const handleDescriptionChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.description = ev.target.value;\n        updateDevice();\n    }\n    const handleDeleteService = (i: number) => () => {\n        device.services.splice(i, 1);\n        updateDevice();\n    }\n    const handleDeleteFirmware = (i: number) => () => {\n        device.firmwares.splice(i, 1);\n        updateDevice();\n    }\n    const handleFirmwareAddClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setFirmwaresAnchorEl(event.currentTarget);\n        // device.firmwares.push(parseInt(uniqueFirmwareId(), 16))\n        updateDevice();\n    };\n    const handleFirmwareAddRandomClick = () => {\n        device.firmwares.push(parseInt(uniqueFirmwareId(), 16))\n        updateDevice();\n    };\n    const handleFirmwareAddClose = (blob: FirmwareBlob) => () => {\n        setFirmwaresAnchorEl(null);\n        const id = blob?.firmwareIdentifier\n        if (id !== undefined) {\n            device.firmwares.push(id)\n            device.name = blob.name\n            updateDeviceId();\n            updateDevice();\n        }\n    };\n    const handleImageImported = (cvs: HTMLCanvasElement) => {\n        const url = cvs.toDataURL(\"image/jpeg\", 99)\n        setImageBase64(url.slice(url.indexOf(',')))\n    }\n    const handleCompanyChanged = (value: string) => {\n        device.company = value;\n        updateDeviceId();\n        updateDevice();\n    }\n    const renderRepoInput = (params) => <TextField {...params}\n        error={!!githubError}\n        type=\"url\"\n        label=\"Firmware repository *\"\n        helperText={githubError || \"GitHub Repository hosting the firmware binaries.\"} variant=\"outlined\" />\n\n    return <>\n        <h1>Device Registration</h1>\n        <p>\n            Compose a device from various services, prepare the metadata\n            and register it to the <Link href=\"/devices/\">Devices catalog</Link>.\n</p>\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                    id={nameId}\n                    required\n                    error={!!nameError}\n                    helperText={nameError}\n                    fullWidth={true}\n                    label=\"Name\"\n                    placeholder=\"My module\"\n                    value={device.name || \"\"}\n                    onChange={handleNameChange}\n                    variant={variant}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <CompanySelect value={device?.company} error={companyError} onValueChange={handleCompanyChanged} />\n            </Grid>\n            <Grid item xs={12}>\n                <Autocomplete\n                    id={repoId}\n                    autoComplete\n                    placeholder=\"https://github.com/...\"\n                    inputValue={device.repo || \"\"}\n                    onInputChange={handleRepoChange}\n                    options={companyRepos}\n                    renderInput={renderRepoInput}\n                />\n                {!githubError && <Box mt={1}><FirmwareCard slug={device.repo} /></Box>}\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox elevation={1}>\n                    <Typography>\n                        Firmwares\n            </Typography>\n                    {device.firmwares?.map((id, i) => {\n                        const blob = firmwareBlobs?.find(b => b.firmwareIdentifier == id);\n                        return <Box component=\"span\" ml={0.5} mb={0.5} key={i}>\n                            <Chip\n                                label={blob ? `${blob.name} (0x${id.toString(16)})` : `0x${id.toString(16)}`}\n                                onDelete={handleDeleteFirmware(i)}\n                            />\n                        </Box>;\n                    })}\n                    <IconButtonWithTooltip title=\"Add random firmware identifier\" onClick={handleFirmwareAddRandomClick}>\n                        <CreateIcon />\n                    </IconButtonWithTooltip>\n                    {firmwareBlobs && <IconButtonWithTooltip title=\"Add firmware identifier from repository\" aria-controls={firmwareMenuId}\n                        aria-haspopup=\"true\" onClick={handleFirmwareAddClick}>\n                        <AddIcon />\n                    </IconButtonWithTooltip>}\n                    <Menu\n                        id={firmwareMenuId}\n                        anchorEl={firmwaresAnchorEl}\n                        keepMounted\n                        open={Boolean(firmwaresAnchorEl)}\n                        onClose={handleFirmwareAddClose(undefined)}\n                    >\n                        {firmwareBlobs?.map(blob => <MenuItem key={blob.firmwareIdentifier} value={blob.firmwareIdentifier.toString(16)}\n                            onClick={handleFirmwareAddClose(blob)}>\n                            {blob.name}\n                            <Typography variant=\"caption\" component=\"span\">\n                                {blob.version}\n                            </Typography>\n                        </MenuItem>)}\n                    </Menu>\n                    <Typography variant=\"caption\" component=\"div\">\n                        Firmware identifiers uniquely identify your module on the Jacdac bus.\n                        Each revision of your firmware may have a different identifier.\n                </Typography>\n                </PaperBox>\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox elevation={1}>\n                    <Typography color={servicesError ? \"error\" : \"inherit\"}>\n                        Services *\n            </Typography>\n                    {device.services?.map((id, i) => <Box component=\"span\" m={0.5} key={i}>\n                        <Chip\n                            label={serviceSpecificationFromClassIdentifier(id)?.name || id}\n                            onDelete={handleDeleteService(i)}\n                        />\n                    </Box>)}\n                    <AddServiceIconButton onAdd={handleServiceAdd} />\n                </PaperBox>\n            </Grid>\n            <Grid item xs={12}>\n                <TextField\n                    disabled\n                    error={!!idError}\n                    fullWidth={true}\n                    label=\"Identifier\"\n                    helperText={\"This generated identifer is a URL friendly string created from your company and product name.\"}\n                    variant={variant}\n                    value={device.id || \"\"}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <TextField\n                    id={identifierId}\n                    fullWidth={true}\n                    required\n                    label=\"Description\"\n                    multiline={true}\n                    rows={4}\n                    value={device.description || \"\"}\n                    onChange={handleDescriptionChange}\n                    variant={variant}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <TextField\n                    id={homepageId}\n                    label=\"Home page url\"\n                    error={!!linkError}\n                    helperText={linkError}\n                    fullWidth={true}\n                    placeholder=\"https://...\"\n                    value={device.link || \"\"}\n                    onChange={handleLinkChange}\n                    variant={variant}\n                    type=\"url\"\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox>\n                    <Typography color={imageError ? \"error\" : \"inherit\"}>\n                        Catalog image\n            </Typography>\n                    <ImportImageCanvas width={DEVICE_IMAGE_WIDTH} height={DEVICE_IMAGE_HEIGHT} onImageImported={handleImageImported} />\n                    <Typography variant=\"caption\" color={imageError ? \"error\" : \"inherit\"} component=\"div\">\n                        {`Import a ${DEVICE_IMAGE_WIDTH}x${DEVICE_IMAGE_HEIGHT} image of the device.`}\n                    </Typography>\n                </PaperBox>\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense>\n                    <GithubPullRequestButton\n                        label={\"register device\"}\n                        title={`Device: ${device.name}`}\n                        head={`devices/${device.id}`}\n                        description={`This pull request registers a new device for Jacdac.`}\n                        files={modulePath && {\n                            [modulePath]: JSON.stringify(normalizeDeviceSpecification(device), null, 2),\n                            [imagePath]: {\n                                content: imageBase64,\n                                encoding: \"base64\"\n                            }\n                        }}\n                    />\n                </Suspense>\n            </Grid>\n        </Grid>\n    </>\n}\n","parent":{"__typename":"File","name":"device-registration","ext":".tsx"}},{"content":"import React, { useContext, useEffect, useState } from \"react\"\nimport { Box, Button, Card, CardActions, CardContent, CardHeader, CardMedia, CircularProgress, Grid, Switch, Typography, useTheme } from '@material-ui/core';\nimport { Link } from 'gatsby-theme-material-ui';\nimport useDbValue from \"../../components/useDbValue\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useChange from \"../../jacdac/useChange\";\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\";\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\";\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\";\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\";\nimport Alert from \"../../components/ui/Alert\";\nimport useEffectAsync from \"../../components/useEffectAsync\";\nimport { CHANGE, CONNECT, CONNECTING, CONNECTION_STATE, DISCONNECT, ERROR, PROGRESS, REPORT_RECEIVE, SRV_MODEL_RUNNER, SRV_SENSOR_AGGREGATOR } from \"../../../jacdac-ts/src/jdom/constants\";\nimport FieldDataSet from \"../../components/FieldDataSet\";\nimport { deviceSpecificationFromFirmwareIdentifier, isSensor } from \"../../../jacdac-ts/src/jdom/spec\";\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\";\nimport Trend from \"../../components/Trend\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport ServiceList from \"../../components/ServiceList\";\nimport { ModelActions, ModelContent } from \"../../components/tools/ModelUploader\";\nimport { readBlobToUint8Array } from \"../../../jacdac-ts/src/jdom/utils\";\nimport useDeviceName from \"../../components/useDeviceName\";\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\";\nimport ReadingFieldGrid from \"../../components/ReadingFieldGrid\";\nimport useChartPalette from '../../components/useChartPalette';\nimport { SensorAggregatorClient, SensorAggregatorConfig } from \"../../../jacdac-ts/src/jdom/sensoraggregatorclient\";\nimport { AlertTitle } from \"@material-ui/lab\";\nimport { serviceName } from \"../../../jacdac-ts/src/jdom/pretty\";\nimport ConnectAlert from \"../../components/alert/ConnectAlert\";\nimport ApiKeyAccordion from \"../../components/ApiKeyAccordion\";\n\nconst EDGE_IMPULSE_API_KEY = \"edgeimpulseapikey\"\n\nconst IDLE = \"idle\";\nconst STARTING = \"starting\";\nconst SAMPLING = \"sampling\";\nconst UPLOADING = \"uploading\";\n\nconst SAMPLING_STATE = \"samplingState\";\n\ninterface EdgeImpulseResponse {\n    success: boolean;\n    error?: string;\n    // HTTP status code\n    errorStatus?: number;\n}\n\ninterface EdgeImpulseHello {\n    hello?: boolean;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    err?: any;\n}\n\ninterface EdgeImpulseSensorInfo {\n    \"name\": string,\n    \"maxSampleLengthS\": number,\n    \"frequencies\": number[]\n}\n\ninterface EdgeImpulseRemoteManagementInfo {\n    version: number;\n    apiKey: string;\n    deviceId: string;\n    deviceType: string;\n    connection: string;\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceInfo {\n    id: number;\n    deviceId: string;\n    name: string;\n    created: string;\n    lastSeen: string;\n    deviceType: string;\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceResponse extends EdgeImpulseResponse {\n    device?: EdgeImpulseDeviceInfo;\n}\n\ninterface EdgeImpulseSample extends EdgeImpulseResponse {\n    \"label\": string;\n    \"length\": number;\n    \"path\": string;\n    \"hmacKey\": string;\n    \"interval\": number;\n    \"sensor\": string;\n}\n\ninterface EdgeImpulseSampling extends EdgeImpulseSample {\n    dataSet?: FieldDataSet;\n    startTimestamp?: number;\n    lastProgressTimestamp?: number;\n    generatedFilename?: string;\n    aggregatorConfig?: SensorAggregatorConfig;\n    unsubscribers?: (() => void)[];\n}\n\ninterface EdgeImpulseProjectInfo {\n    id: number;\n    name: string;\n    logo?: string;\n}\n\ninterface EdgeImpulseProject extends EdgeImpulseResponse {\n    project: EdgeImpulseProjectInfo,\n    devices: EdgeImpulseDeviceInfo[],\n    impulse: {\n        created: boolean;\n        configured: boolean;\n        complete: boolean;\n    },\n    dataSummary: {\n        totalLengthMs: number;\n        labels: string[];\n        dataCount: number;\n    },\n    downloads: {\n        name: string;\n        type: string;\n        size: string;\n        link: string;\n    }[];\n}\n\ninterface EdgeImpulseProjects extends EdgeImpulseResponse {\n    projects: EdgeImpulseProjectInfo[];\n}\n\n/*\nA client for the EdgeImpulse remote management\nhttps://docs.edgeimpulse.com/reference#remote-management\n*/\nclass EdgeImpulseClient extends JDClient {\n    private _ws: WebSocket;\n    public connectionState = DISCONNECT;\n    public samplingState = IDLE;\n    private _hello: EdgeImpulseRemoteManagementInfo;\n    private _sample: EdgeImpulseSampling;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _pingInterval: any;\n    private pong: boolean;\n    private aggregatorClient: SensorAggregatorClient;\n\n    constructor(\n        private readonly apiKey: string,\n        private readonly aggregator: JDService,\n        private readonly inputRegisters: JDRegister[],\n        private readonly palette: string[]\n    ) {\n        super()\n\n        this.handleMessage = this.handleMessage.bind(this);\n        this.handleOpen = this.handleOpen.bind(this)\n        this.handleError = this.handleError.bind(this);\n        this.handleReport = this.handleReport.bind(this);\n        this.handlePing = this.handlePing.bind(this);\n\n        this.aggregatorClient = new SensorAggregatorClient(this.aggregator);\n        this.aggregatorClient.subscribeSample(this.handleReport);\n\n        this.mount(() => this.disconnect());\n        this.mount(() => this.aggregatorClient.unmount());\n    }\n\n    get dataSet() {\n        return this._sample?.dataSet;\n    }\n\n    disconnect() {\n        this.clearSampling();\n        if (this._pingInterval) {\n            clearInterval(this._pingInterval)\n            this._pingInterval = undefined;\n        }\n        // stop socket\n        if (this._ws) {\n            const w = this._ws;\n            this._ws = undefined;\n            try {\n                w.close();\n            }\n            catch (e) {\n                console.debug(e)\n            }\n            finally {\n                this.setConnectionState(DISCONNECT);\n            }\n        }\n    }\n\n    private setConnectionState(state: string) {\n        if (this.connectionState !== state) {\n            this.connectionState = state;\n            this.emit(CONNECTION_STATE, this.connectionState);\n            console.log(`ei: connection state changed`, this.connectionState)\n        }\n    }\n\n    private setSamplingState(state: string) {\n        if (this.samplingState !== state) {\n            this.samplingState = state;\n            this.emit(SAMPLING_STATE, this.samplingState)\n            this.emit(CHANGE)\n            console.log(`ei: sampling state changed`, this.samplingState)\n        }\n    }\n\n    private send(msg: unknown) {\n        this._ws?.send(JSON.stringify(msg))\n    }\n\n    private async handleOpen() {\n        console.log(`ws: open`)\n        const service = this.aggregator;\n        const { device } = service;\n\n        // fetch device spec\n        const firmwareIdentifier = await service.device.resolveFirmwareIdentifier();\n        const deviceSpec = deviceSpecificationFromFirmwareIdentifier(firmwareIdentifier);\n\n        this._hello = {\n            \"version\": 2,\n            \"apiKey\": this.apiKey,\n            \"deviceId\": device.deviceId,\n            \"deviceType\": deviceSpec?.name || firmwareIdentifier?.toString(16) || \"Jacdac device\",\n            \"connection\": \"ip\", // direct connection\n            \"sensors\": [{\n                \"name\": this.inputRegisters.map(reg => serviceName(reg.service.serviceClass)).join(','),\n                \"maxSampleLengthS\": 10000,\n                \"frequencies\": [50, 30, 20, 10]\n            }]\n        };\n        this.send({\n            \"hello\": this._hello\n        })\n    }\n\n    private reconnect() {\n        this.disconnect();\n        this.connect();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private handleMessage(msg: any) {\n        // response to ping?\n        if (msg.data === \"pong\") {\n            this.pong = true;\n            return;\n        }\n\n        const data = JSON.parse(msg.data)\n        if (data.hello !== undefined) {\n            const hello = data as EdgeImpulseHello;\n            if (!hello.hello) {\n                this.emit(ERROR, hello.err)\n                this.disconnect();\n            } else {\n                this.setConnectionState(CONNECT);\n            }\n        } else if (data.sample) {\n            const sample = data.sample as EdgeImpulseSample;\n            this.startSampling(sample);\n        }\n    }\n\n    get connected() {\n        return this.connectionState === CONNECT;\n    }\n\n    get sampling() {\n        return this.samplingState !== IDLE;\n    }\n\n    get generatedSampleName() {\n        return this._sample?.generatedFilename;\n    }\n\n    get aggregatorConfig() {\n        return this._sample?.aggregatorConfig;\n    }\n\n    private handleReport(row: number[]) {\n        console.log(`ei: aggregator report`, this.connected, this.sampling)\n        if (!this.connected) return; // ignore\n\n        // partial data? ignore\n        if (row.some(r => r === undefined))\n            return;\n\n        const { bus } = this.aggregator.device\n        const { timestamp } = bus;\n        // first sample, notify we're started\n        if (this.samplingState == STARTING) {\n            this._sample.startTimestamp = this._sample.lastProgressTimestamp = timestamp;\n            this.send({ \"sampleStarted\": true });\n            this.setSamplingState(SAMPLING);\n        }\n        // store sample\n        if (this.samplingState == SAMPLING) {\n            const ds = this.dataSet;\n            ds.addRow(row);\n            this.emit(REPORT_RECEIVE);\n\n            // debounced progress update\n            if (timestamp - this._sample.lastProgressTimestamp > 100) {\n                this._sample.lastProgressTimestamp = timestamp;\n                this.emit(PROGRESS, this.progress)\n            }\n\n            if (timestamp - this._sample.startTimestamp >= this._sample.length) {\n                // first stop the sampling\n                this.stopSampling();\n                // we're done!\n                this.emit(PROGRESS, this.progress)\n                // and upload...\n                this.uploadData();\n            }\n        }\n    }\n\n    private uploadData(): Promise<void> {\n        this.setSamplingState(UPLOADING);\n        const ds = this.dataSet;\n        const payload = {\n            \"protected\": {\n                \"ver\": \"v1\",\n                \"alg\": \"none\",\n                \"iat\": Date.now()\n            },\n            \"signature\": \"\",\n            \"payload\": {\n                \"device_name\": this._hello.deviceId,\n                \"device_type\": this._hello.deviceType,\n                \"interval_ms\": this._sample.interval,\n                \"sensors\": ds.headers.map((h, i) => ({\n                    \"name\": ds.headers[i],\n                    \"units\": ds.units[i] || \"/\"\n                })\n                ),\n                \"values\": ds.data(true)\n            }\n        }\n        console.log(`payload`, payload)\n        // upload dataset\n        // https://docs.edgeimpulse.com/reference#ingestion-api\n        return fetch(`https://ingestion.edgeimpulse.com${this._sample.path}`, {\n            method: \"POST\",\n            headers: {\n                \"x-api-key\": this.apiKey,\n                \"x-label\": this._sample.label,\n                \"x-file-name\": ds.name,\n                \"x-disallow-duplicates\": \"true\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        }).then(async (resp) => {\n            // response contains the filename\n            const filename = await resp.text();\n            this._sample.generatedFilename = filename;\n        }).finally(() => {\n            this.send({\n                \"sampleFinished\": true\n            })\n            this.setSamplingState(IDLE);\n        })\n    }\n\n    private handleError(ev: Event) {\n        this.emit(ERROR, ev)\n        this.reconnect();\n    }\n\n    private async startSampling(sample: EdgeImpulseSample) {\n        this._sample = sample;\n        this._sample.dataSet = FieldDataSet.create(this.aggregator.device.bus, this.inputRegisters, \"sample\", this.palette)\n        this._sample.unsubscribers = [];\n        this.send({ \"sample\": true })\n        this.setSamplingState(STARTING);\n\n        // prepare configuration\n        this._sample.aggregatorConfig = {\n            samplingInterval: this._sample.interval,\n            samplesInWindow: 10,\n            inputs: this.inputRegisters.map(reg => ({\n                serviceClass: reg.service.serviceClass,\n                deviceId: reg.service.device.deviceId,\n                serviceIndex: reg.service.serviceIndex\n            }))\n        }\n\n        console.log(`ei: input`, this._sample.aggregatorConfig)\n        // setup aggregator client\n        await this.aggregatorClient.setInputs(this._sample.aggregatorConfig)\n        // schedule data collection, ask a few more samples\n        await this.aggregatorClient.collect(this._sample.length * 1.1);\n    }\n\n    private stopSampling() {\n        const sample = this._sample;\n        if (sample) {\n            sample.unsubscribers.forEach(unsub => {\n                try {\n                    unsub();\n                }\n                catch (e) {\n                    console.log(e)\n                }\n            })\n            sample.unsubscribers = [];\n        }\n    }\n\n    private clearSampling() {\n        this.stopSampling();\n        if (this._sample) {\n            this._sample = undefined;\n            this._hello = undefined;\n            this.setSamplingState(IDLE);\n        }\n    }\n\n    connect() {\n        if (this._ws) return; // already connected\n\n        console.log(`ei: connect`)\n        this.setConnectionState(CONNECTING)\n        this._ws = new WebSocket(\"wss://remote-mgmt.edgeimpulse.com\")\n        this._ws.onmessage = this.handleMessage;\n        this._ws.onopen = this.handleOpen;\n        this._ws.onerror = this.handleError;\n\n        this.pong = true;\n        this._pingInterval = setInterval(this.handlePing, 3000);\n    }\n\n    private handlePing() {\n        if (!this.connected) return;\n\n        if (!this.pong) {\n            // the socket did not response\n            console.log(`missing pong`)\n            this.reconnect();\n        } else {\n            // send a new ping and wait for pong\n            this.pong = false;\n            this._ws.send(\"ping\");\n        }\n    }\n\n    get progress() {\n        const timestamp = this.aggregator.device.bus.timestamp;\n        return this.samplingState !== IDLE\n            && (timestamp - this._sample.startTimestamp) / this._sample.length;\n    }\n\n    static async currentProjectInfo(apiKey: string): Promise<{\n        valid: boolean,\n        errorStatus?: number,\n        project?: EdgeImpulseProject\n    }> {\n        if (!apiKey) return { valid: false };\n\n        const rsj = await EdgeImpulseClient.apiFetch<EdgeImpulseProjects>(apiKey, \"projects\");\n        if (!rsj.success) {\n            return {\n                valid: false,\n                errorStatus: rsj.errorStatus\n            }\n        }\n\n        // the API returns the current project when using the API key\n        const projectId = rsj.projects?.[0]?.id;\n        if (!rsj?.success || projectId === undefined) {\n            return {\n                valid: true,\n                errorStatus: 402\n            }\n        }\n\n        const project = await EdgeImpulseClient.apiFetch<EdgeImpulseProject>(apiKey, projectId);\n        return {\n            valid: true,\n            errorStatus: project.errorStatus,\n            project\n        }\n    }\n\n    static async apiFetch<T extends EdgeImpulseResponse>(apiKey: string, path: string | number, body?: unknown): Promise<T> {\n        const API_ROOT = \"https://studio.edgeimpulse.com/v1/api/\"\n        const url = `${API_ROOT}${path}`\n        const options: RequestInit = {\n            method: body ? \"POST\" : \"GET\",\n            headers: {\n                \"x-api-key\": apiKey,\n                \"Accept\": \"application/json\"\n            },\n            body: body && JSON.stringify(body)\n        }\n        if (options.method === \"POST\")\n            options.headers[\"Content-Type\"] = \"application/json\"\n\n        const resp = await fetch(url, options)\n        if (resp.status !== 200)\n            return {\n                success: false,\n                errorStatus: resp.status,\n                error: resp.statusText\n            } as T;\n        try {\n            const payload = await resp.json() as T;\n            return payload;\n        } catch (e) {\n            return {\n                success: false,\n                errorStatus: 500,\n                error: e.message\n            } as T;\n        }\n    }\n\n    static async deviceInfo(apiKey: string, projectId: number, deviceId: string): Promise<EdgeImpulseDeviceResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseDeviceResponse>(apiKey, `${projectId}/device/${deviceId}`)\n    }\n\n    static async renameDevice(apiKey: string, projectId: number, deviceId: string, name: string): Promise<EdgeImpulseResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseResponse>(apiKey, `${projectId}/devices/${deviceId}/rename`, { name })\n    }\n}\n\nfunction ApiKeyManager() {\n    const validateKey = async (key: string) => {\n        const r = await EdgeImpulseClient.currentProjectInfo(key)\n        return {\n            statusCode: (r?.valid && 200) || r?.errorStatus || 500\n        }\n    };\n    return <ApiKeyAccordion\n        apiName={EDGE_IMPULSE_API_KEY}\n        validateKey={validateKey}\n        instructions={<p>To get an <b>API key</b>, navigate to &nbsp;\n            <Link to=\"https://studio.edgeimpulse.com/studio/8698/keys\" target=\"_blank\">https://studio.edgeimpulse.com/studio/8698/keys</Link>\n            &nbsp; and generate a new key.</p>}\n    />\n}\n\nfunction useEdgeImpulseProjectInfo(apiKey: string) {\n    const [info, setInfo] = useState<EdgeImpulseProject>(undefined);\n\n    useEffectAsync(async (mounted) => {\n        if (!apiKey) {\n            if (mounted())\n                setInfo(undefined);\n        } else {\n            const r = await EdgeImpulseClient.currentProjectInfo(apiKey)\n            if (mounted())\n                setInfo(r?.project);\n        }\n    }, [apiKey])\n\n    return info;\n}\n\nfunction ProjectInfo(props: { info: EdgeImpulseProject }) {\n    const { info } = props;\n    const disabled = !info?.success;\n\n    return <Card>\n        <CardHeader title={info?.project?.name || \"...\"}\n            subheader={info?.dataSummary && `${info?.dataSummary?.dataCount} samples`}\n        />\n        {info?.project?.logo && <CardMedia image={info?.project?.logo} />}\n        <CardActions>\n            <Button disabled={disabled} target=\"_blank\" href={`https://studio.edgeimpulse.com/studio/${info?.project?.id}/`} variant=\"contained\" color=\"primary\">Open EdgeImpulse</Button>\n        </CardActions>\n    </Card >\n}\n\nfunction ModelDownloadButton(props: { apiKey: string, info: EdgeImpulseProject, setModel: (blob: Uint8Array) => void }) {\n    const { apiKey, info, setModel } = props;\n    const theme = useTheme();\n    const [downloading, setDownloading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const download = info?.downloads.find(download => download.type === \"TensorFlow Lite (float32)\");\n\n    const handleDownload = (url: string) => async () => {\n        try {\n            setDownloading(true)\n            setError(\"\")\n            const resp = await fetch(url, {\n                headers: {\n                    \"x-api-key\": apiKey\n                }\n            })\n            const res = await resp.blob()\n            const bytes = await readBlobToUint8Array(res);\n            setModel(bytes)\n        }\n        catch (e) {\n            console.log(e)\n            setError(\"Oops, download failed.\")\n        }\n        finally {\n            setDownloading(false)\n        }\n    }\n\n    return <Box mb={1}>\n        {error && <Alert severity=\"error\">{error}</Alert>}\n        <Button\n            variant=\"contained\"\n            disabled={!download || downloading}\n            startIcon={downloading ? <CircularProgress size={theme.spacing(2)} /> : <GetAppIcon />}\n            onClick={handleDownload(`https://studio.edgeimpulse.com${download?.link}`)}>DOWNLOAD MODEL</Button>\n    </Box>\n}\n\nfunction AggregatorCard(props: {\n    aggregator: JDService,\n    selected: boolean,\n    onChecked: () => void\n}) {\n    const { aggregator, selected, onChecked } = props;\n    const { device } = aggregator;\n\n    const handleChecked = () => onChecked();\n\n    return <Card>\n        <DeviceCardHeader device={device} showMedia={true} />\n        <CardContent>\n            <Switch checked={selected} onChange={handleChecked} />\n        </CardContent>\n    </Card>\n}\n\nfunction Acquisition(props: {\n    aggregator: JDService,\n    inputs: JDRegister[],\n    apiKey: string,\n    info: EdgeImpulseProjectInfo\n}) {\n    const { aggregator, inputs, apiKey, info } = props;\n\n    const { device } = aggregator;\n    const [client, setClient] = useState<EdgeImpulseClient>(undefined)\n    const [error, setError] = useState(\"\")\n    const [connectionState, setConnectionState] = useState(DISCONNECT)\n    const [samplingState, setSamplingState] = useState(IDLE)\n    const [samplingProgress, setSamplingProgress] = useState(0)\n    const [, setDeviceInfo] = useState<EdgeImpulseDeviceInfo>(undefined);\n    const { deviceId } = device;\n    const deviceName = useDeviceName(device, false);\n    const projectId = info?.id;\n    const palette = useChartPalette()\n\n    const connected = connectionState === CONNECT;\n    const sampling = samplingState !== IDLE\n    const dataSet = client?.dataSet;\n    const generatedSampleName = client?.generatedSampleName;\n    const aggregatorConfig = client?.aggregatorConfig;\n\n    useEffect(() => {\n        if (!apiKey || !aggregator || !inputs?.length) {\n            setClient(undefined);\n            setError(undefined);\n            return undefined;\n        }\n        else {\n            console.log(`ei: start client`)\n            const c = new EdgeImpulseClient(apiKey, aggregator, inputs, palette)\n            c.connect();\n            setClient(c);\n            setError(undefined);\n            return () => c.unmount();\n        }\n    }, [apiKey, aggregator, inputs?.map(ip => ip.id).join(\",\")])\n    // subscribe to client changes\n    useEffect(() => client?.subscribe(CONNECTION_STATE,\n        (v: string) => setConnectionState(v))\n        , [client])\n    // subscribe to client changes\n    useEffect(() => client?.subscribe(SAMPLING_STATE,\n        (v: string) => setSamplingState(v))\n        , [client])\n    // listen to errors\n    useEffect(() => client?.subscribe(ERROR, (e: string) => setError(e))\n        , [client])\n    // progress\n    useEffect(() => client?.subscribe(PROGRESS, (p: number) => setSamplingProgress(p * 100))\n        , [client])\n\n    // name checking\n    useEffectAsync(async () => {\n        if (!apiKey || projectId === undefined) {\n            setDeviceInfo(undefined)\n        } else {\n            const resp = await EdgeImpulseClient.deviceInfo(apiKey, projectId, deviceId);\n            const info = resp.success && resp.device;\n            if (info && info.name !== deviceName) {\n                // no name assigned, use current\n                if (info.name === deviceId) {\n                    console.log(`ei: sync name`)\n                    const rename = await EdgeImpulseClient.renameDevice(apiKey, projectId, deviceId, deviceName)\n                    if (rename.success) {\n                        info.name = deviceName;\n                    }\n                } else {\n                    // name assigned in EI, pull it in\n                    console.log(`ei: pull name`)\n                    device.name = info.name;\n                }\n            }\n            setDeviceInfo(info)\n        }\n    }, [apiKey, projectId, deviceName])\n\n    return <Box>\n        {connected && <Alert severity={\"success\"}>Connected to EdgeImpulse</Alert>}\n        {error && <Alert severity={\"error\"}>{error}</Alert>}\n        {sampling && <Alert severity={\"info\"}>\n            <AlertTitle>Sampling...</AlertTitle>\n            <CircularProgressWithLabel value={samplingProgress} />\n        </Alert>}\n        {!!dataSet && <Trend dataSet={dataSet} />}\n        {generatedSampleName && <Typography variant=\"body2\">sample name: {generatedSampleName}</Typography>}\n        {aggregatorConfig && <pre>{JSON.stringify(aggregatorConfig, null, 2)}</pre>}\n    </Box>\n}\n\nexport default function EdgeImpulse() {\n    const { value: apiKey } = useDbValue(EDGE_IMPULSE_API_KEY, \"\")\n    const { bus } = useContext<JacdacContextProps>(JacdacContext);\n    const [model, setModel] = useState<Uint8Array>(undefined)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const gridBreakPoints = useGridBreakpoints()\n    const info = useEdgeImpulseProjectInfo(apiKey);\n\n    const aggregators: JDService[] = useChange(bus, bus => bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR }))\n    const currentAggregator: JDService = aggregators.find(srv => srv.id == aggregatorId) || aggregators[0]\n    const readingRegisters = useChange(bus, bus =>\n        bus.devices().map(device => device\n            .services().find(srv => isSensor(srv.specification))\n            ?.readingRegister\n        ).filter(reg => !!reg))\n    const inputs = readingRegisters.filter(reg => registerIdsChecked.indexOf(reg.id) > -1)\n\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? '' : srv?.id\n        setAggregatorId(id);\n    }\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1)\n            registerIdsChecked.splice(i, 1)\n        else\n            registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n    }\n\n    return <>\n        <h1>Edge Impulse</h1>\n        <p>\n            Use Jacdac to inject data and download models into <Link href=\"https://studio.edgeimpulse.com\">https://studio.edgeimpulse.com</Link>.\n        </p>\n        <ConnectAlert />\n        <ApiKeyManager />\n        <Box mb={1} />\n        <ProjectInfo info={info} />\n        <h3>Data</h3>\n        <h4>Select Sensors</h4>\n        {!readingRegisters?.length && <Alert severity=\"info\">No sensor found...</Alert>}\n        {!!readingRegisters.length && <ReadingFieldGrid\n            readingRegisters={readingRegisters}\n            registerIdsChecked={registerIdsChecked}\n            handleRegisterCheck={handleRegisterCheck}\n        />}\n        <h4>Select Sensor Aggregator</h4>\n        {!aggregators?.length && <Alert severity=\"info\">No data aggregator found...</Alert>}\n        <Grid container spacing={2}>\n            {aggregators.map(aggregator => <Grid key={aggregator.id} item {...gridBreakPoints}>\n                <AggregatorCard\n                    aggregator={aggregator}\n                    selected={currentAggregator === aggregator}\n                    onChecked={handleAggregatorChecked(aggregator)} />\n            </Grid>)}\n        </Grid>\n        <h4>Acquisition status</h4>\n        {!currentAggregator && <Alert severity=\"info\">No data aggregator selected...</Alert>}\n        {!inputs?.length && <Alert severity=\"info\">Select sensors to collect data from...</Alert>}\n        {currentAggregator && !!inputs?.length && <Acquisition aggregator={currentAggregator} inputs={inputs} apiKey={apiKey} info={info?.project} />}\n        <h3>Deployment</h3>\n        {model && <Box mb={1}><Alert severity=\"success\">Model downloaded!</Alert></Box>}\n        <ModelDownloadButton apiKey={apiKey} info={info} setModel={setModel} />\n        <ServiceList\n            serviceClass={SRV_MODEL_RUNNER}\n            content={service => <ModelContent service={service} />}\n            actions={service => <ModelActions\n                service={service}\n                model={model}\n            />}\n            alertMissing={\"No model runner found...\"}\n        />\n    </>\n}","parent":{"__typename":"File","name":"edge-impulse","ext":".tsx"}},{"content":"A short trace containing annonce packets.\n\n0\t4b900c00ae430744000000000800000001010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n457\t3e580c00ae430744000000000800000002010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n960\ted1f0c00ae430744000000000800000003010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1462\tf5d80c00ae430744000000000800000004010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1960\t269f0c00ae430744000000000800000005010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2463\t53570c00ae430744000000000800000006010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2966\t80100c00ae430744000000000800000007010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3466\t42c90c00ae430744000000000800000008010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3971\t918e0c00ae430744000000000800000009010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4472\te4460c00ae43074400000000080000000a010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4974\t37010c00ae43074400000000080000000b010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5480\t2fc60c00ae43074400000000080000000c010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5981\tfc810c00ae43074400000000080000000d010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6483\t89490c00ae43074400000000080000000e010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6983\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n7486\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n7991\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n","parent":{"__typename":"File","name":"announce","ext":".txt"}},{"content":"Moving 2 sliders back and forth on the same bus.\n\n0\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n71\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n83\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n152\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n195\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n507\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n578\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n589\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n659\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n703\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1013\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1087\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1169\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1207\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1218\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n1520\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1592\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1673\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1715\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2027\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2101\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2109\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2180\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2221\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2534\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2605\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2671\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n2718\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2723\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2739\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2742\tb0320800f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2840\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2941\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3043\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3048\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3117\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3146\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3196\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3207\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3340\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3441\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3542\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3547\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3624\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3645\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3696\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3707\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3843\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3941\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3975\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n3993\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n4004\tff7f0800abe827640e45ab790401041000000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 0ms\n4022\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4034\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4046\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4070\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4100\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4128\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4166\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4201\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4213\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n4224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4244\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4259\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n4327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4342\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4490\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4522\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4543\t5ab60800f1fd2e7a5607122d04010111408e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n4625\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4639\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4706\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4728\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4777\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4821\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4843\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4924\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4962\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5026\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5070\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n5130\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5148\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n5211\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5239\t591e0800f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5258\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5265\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5365\t36330800f1fd2e7a5607122d04010111008b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.543\n5429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5489\td45d0800f1fd2e7a5607122d04010111608a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n5523\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5540\t83ad0800f1fd2e7a5607122d04010111708f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.56\n5569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n5625\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5666\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n5713\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5725\tff1c0800abe827640e45ab790401011140a30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n5748\t3d710800f1fd2e7a5607122d04010111508a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.54\n5770\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5828\tc8070800abe827640e45ab790401011180b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n5850\t42630800f1fd2e7a5607122d04010111a0780000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n5871\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5921\ta79d0800abe827640e45ab790401011140d00000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.813\n5982\t40550800f1fd2e7a5607122d04010111a0640000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.393\n6023\t31420800abe827640e45ab790401011140f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.95\n6042\tce560800f1fd2e7a5607122d04010111904c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n6066\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6127\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6156\t0a3c0800f1fd2e7a5607122d04010111002d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.176\n6214\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6225\tf72c0800abe827640e45ab790401011150ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6273\t17970800f1fd2e7a5607122d0401011130100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.063\n6319\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6331\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6351\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n6422\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6461\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6524\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6556\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6572\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6628\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6652\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6720\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6746\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6752\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6765\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n6824\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6863\t1d4b0800f1fd2e7a5607122d04010111b00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.053\n6927\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n6977\t2f270800f1fd2e7a5607122d04010111702e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.181\n7020\t86300800abe827640e45ab7904010111a0b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n7051\t20560800f1fd2e7a5607122d0401011160580000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.345\n7075\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n7123\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n7162\ta4050800f1fd2e7a5607122d04010111d0820000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.511\n7226\t103c0800abe827640e45ab7904010111e0350000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.21\n7243\t66820800f1fd2e7a5607122d0401011110a40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.641\n7261\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7271\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7322\t6e510800abe827640e45ab7904010111000a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.039\n7338\tf2b10800f1fd2e7a5607122d0401011180c60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.775\n7425\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7476\t94e80800f1fd2e7a5607122d0401011140de0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.868\n7521\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7572\t1b750800f1fd2e7a5607122d04010111a0ea0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.917\n7624\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7637\t36010800f1fd2e7a5607122d0401011180fa0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.979\n7668\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n7724\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7757\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7776\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7780\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7818\t30500800abe827640e45ab790401011190000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7850\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7920\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7946\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8023\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8086\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8127\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8148\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8179\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n8219\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8240\t66dd0800f1fd2e7a5607122d0401011150eb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.919\n8269\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8275\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8326\tc39d0800f1fd2e7a5607122d0401011180c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.787\n8368\t0f240800abe827640e45ab790401011100060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.023\n8418\t92b90800abe827640e45ab790401011150240000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.142\n8443\t62830800f1fd2e7a5607122d04010111d0a20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.636\n8521\td14c0800abe827640e45ab7904010111b05c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.362\n8539\tf14f0800f1fd2e7a5607122d04010111c0740000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n8584\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n8594\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n8625\t3c0e0800f1fd2e7a5607122d0401011140470000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.278\n8682\td5290800abe827640e45ab790401011160990000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.599\n8717\t1f440800abe827640e45ab790401011120be0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.743\n8731\t7e080800f1fd2e7a5607122d04010111b01d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.116\n8769\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8781\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8822\tc6e80800abe827640e45ab790401011140dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.86\n8838\t44e30800f1fd2e7a5607122d0401011130010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n8924\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9025\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9035\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9087\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9119\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9130\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9142\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n9181\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9222\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9273\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9319\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9332\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9422\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9465\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9523\t88510800f1fd2e7a5607122d04010111a0100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n9575\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9596\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9617\ta1420800abe827640e45ab790401011190e60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.901\n9681\tc1270800f1fd2e7a5607122d04010111803a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.229\n9701\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9727\t93990800abe827640e45ab790401011100a60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.648\n9748\t863b0800f1fd2e7a5607122d04010111b0680000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.409\n9775\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9785\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n9817\t15fc0800abe827640e45ab7904010111b0600000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.378\n9878\t1f460800f1fd2e7a5607122d04010111e09d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.617\n9918\t42530800abe827640e45ab7904010111e02a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.167\n9950\t66350800f1fd2e7a5607122d0401011140c70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.778\n10021\t12840800f1fd2e7a5607122d0401011120e50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.895\n10103\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10124\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10168\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10207\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10212\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10217\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10230\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10279\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10290\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10321\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10336\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10423\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10489\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10527\t6c010800f1fd2e7a5607122d04010111d0f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.964\n10607\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10700\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10726\td97c0800abe827640e45ab7904010111a0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10782\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10793\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10796\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10815\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10828\t9c0b0800f1fd2e7a5607122d0401011110220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n10917\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10934\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11019\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11071\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11111\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11126\t96ba0800f1fd2e7a5607122d0401011150010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n11149\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11204\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11223\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11240\t80530800f1fd2e7a5607122d04010111303d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.239\n11288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11299\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11310\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n11321\t09470800f1fd2e7a5607122d04010111908d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n11385\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11423\td19d0800f1fd2e7a5607122d0401011130df0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.872\n11459\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11526\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11617\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11655\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11655\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11709\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11741\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11790\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11801\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11822\t0ce10800abe827640e45ab790401011110380000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.219\n11843\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11914\t6aee0800abe827640e45ab790401011140920000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.571\n11959\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12016\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12040\t48030800abe827640e45ab790401011160d80000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.845\n12119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12142\tb1441400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n12142\tb1441400abe827640e45ab790401011180ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12219\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12277\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12299\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12309\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12320\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12336\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12421\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12442\tff430800abe827640e45ab790401011100ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.922\n12513\te1f70800abe827640e45ab7904010111b0b20000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n12561\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12615\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12636\te2d30800abe827640e45ab7904010111605d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.365\n12718\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12753\tdd7d0800abe827640e45ab790401011160060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.025\n12802\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12813\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n12854\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12854\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12915\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12938\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13018\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13058\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13147\t7e670800abe827640e45ab7904010111b0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.003\n13221\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13242\t7e8f0800abe827640e45ab7904010111a02c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.174\n13271\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n13310\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13321\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13413\t792d0800f1fd2e7a5607122d04010111a0f40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n13452\t3d9b0800abe827640e45ab790401011180850000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.521\n13515\t0cea0800f1fd2e7a5607122d0401011100e60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.898\n13564\tb5470800abe827640e45ab7904010111609b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n13618\tb2de0800f1fd2e7a5607122d0401011130cf0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.809\n13655\t25c20800abe827640e45ab7904010111609c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.611\n13719\t46830800f1fd2e7a5607122d04010111a0af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.686\n13758\tb9ac0800abe827640e45ab7904010111209c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.61\n13851\t05440800f1fd2e7a5607122d04010111c0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.651\n13872\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13912\t99af0800f1fd2e7a5607122d0401011150b40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.704\n13938\t36d90800abe827640e45ab7904010111d0840000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.519\n14013\t0eb10800f1fd2e7a5607122d04010111c0c40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.769\n14069\tabac0800abe827640e45ab7904010111908a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n14115\t7e5e0800f1fd2e7a5607122d0401011120af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.684\n14131\tcb470800abe827640e45ab7904010111409a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.603\n14153\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14217\t9e340800f1fd2e7a5607122d04010111c0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.765\n14242\t01470800abe827640e45ab7904010111c0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.515\n14281\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14310\t25f20800f1fd2e7a5607122d0401011120ce0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.805\n14363\t5e5d0800abe827640e45ab790401011150870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.529\n14384\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14414\t6aec0800f1fd2e7a5607122d0401011180b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.693\n14434\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n14517\t9d190800f1fd2e7a5607122d04010111c0d10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n14608\t8a860800f1fd2e7a5607122d0401011160dd0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.865\n14646\t5ab40800abe827640e45ab790401011180ad0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.678\n14660\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14711\tfdc00800f1fd2e7a5607122d0401011190b00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.69\n14730\t625b0800abe827640e45ab790401011180dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.861\n14763\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14814\tfb160800f1fd2e7a5607122d04010111907b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.483\n14838\tc79e0800abe827640e45ab790401011180ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.924\n14868\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14903\t52550800f1fd2e7a5607122d0401011110720000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.446\n14946\tc4ec0800abe827640e45ab7904010111c0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.694\n15006\t6a690800f1fd2e7a5607122d0401011150a30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n15033\t5ba60800abe827640e45ab7904010111505e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.368\n15107\tc1ab0800f1fd2e7a5607122d0401011180d50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.834\n15135\t808b0800abe827640e45ab790401011160430000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.263\n15152\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15210\t56300800f1fd2e7a5607122d04010111c0b70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.718\n15254\t26ef0800abe827640e45ab7904010111608e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n15295\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15303\t72540800f1fd2e7a5607122d04010111a0790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.475\n15334\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n15367\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15409\t06880800f1fd2e7a5607122d0401011100650000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.395\n15456\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n15491\tc1710800f1fd2e7a5607122d0401011110880000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.531\n15529\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n15585\t01f20800f1fd2e7a5607122d0401011150c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.763\n15630\tfc380800abe827640e45ab7904010111904c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n15657\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15688\tbceb0800f1fd2e7a5607122d0401011160f80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.97\n15712\t2fa00800abe827640e45ab7904010111601f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.123\n15770\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15781\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n15820\t957d0800abe827640e45ab7904010111801c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.111\n15901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n15913\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15984\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16005\taa8c0800abe827640e45ab7904010111c0080000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.034\n16031\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16086\t57740800f1fd2e7a5607122d0401011180f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.963\n16130\td4640800abe827640e45ab7904010111f0250000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.148\n16159\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16189\t85400800f1fd2e7a5607122d0401011120c80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.782\n16217\t05ca0800abe827640e45ab7904010111006a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.414\n16272\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16283\t1fc30800f1fd2e7a5607122d04010111308f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.559\n16330\t63f70800abe827640e45ab7904010111d0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.695\n16379\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16387\t67900800f1fd2e7a5607122d04010111c0570000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.343\n16413\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16418\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16480\td6b80800f1fd2e7a5607122d0401011120360000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.211\n16515\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16526\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16583\td23c0800f1fd2e7a5607122d0401011130220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.134\n16636\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16665\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16686\t263e0800f1fd2e7a5607122d04010111e00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.054\n16720\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16753\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n16794\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16801\t7f960800f1fd2e7a5607122d0401011160010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n16833\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16865\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16885\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n16915\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16927\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16979\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17029\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17080\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17105\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n17132\t991a0800abe827640e45ab7904010111c0f40000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n17174\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17184\t7f130800f1fd2e7a5607122d04010111b0130000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.077\n17226\td7400800abe827640e45ab790401011120ca0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.79\n17287\ta9910800f1fd2e7a5607122d0401011180480000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.283\n17319\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17337\t7c6a0800abe827640e45ab7904010111e0900000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.566\n17359\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17380\t12330800f1fd2e7a5607122d0401011170860000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.525\n17421\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17426\ta00f0800abe827640e45ab7904010111005a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.352\n17483\t672e0800f1fd2e7a5607122d0401011140c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.786\n17524\t097e0800abe827640e45ab790401011100220000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n17585\tf6dd0800f1fd2e7a5607122d0401011180fe0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.994\n17627\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17678\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17706\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17730\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17781\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17801\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17823\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17893\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17926\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17934\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17975\tc0580800f1fd2e7a5607122d0401011190f70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.967\n18026\t497c0800abe827640e45ab790401011170150000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.084\n18077\t4c6d0800f1fd2e7a5607122d04010111a0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.764\n18128\t9ffe0800abe827640e45ab7904010111404e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.306\n18179\t47700800f1fd2e7a5607122d04010111b08d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n18223\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18232\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18283\t46620800f1fd2e7a5607122d04010111607e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.494\n18327\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n18335\tac050800abe827640e45ab7904010111808c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.549\n18366\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18377\t9d460800f1fd2e7a5607122d04010111809e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.619\n18429\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18436\tc3210800abe827640e45ab7904010111c0740000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n18478\t52310800f1fd2e7a5607122d0401011100b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.691\n18529\t76b60800abe827640e45ab7904010111608d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.552\n18584\td5460800f1fd2e7a5607122d0401011160840000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.517\n18622\t13c20800abe827640e45ab7904010111a0870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.53\n18683\t95ac0800f1fd2e7a5607122d04010111009f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.621\n18714\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18725\t26630800abe827640e45ab790401011160610000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.38\n18776\tb3c50800f1fd2e7a5607122d0401011130c10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.755\n18820\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18828\td31e0800abe827640e45ab7904010111a0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.514\n18859\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18880\t931e0800f1fd2e7a5607122d0401011110970000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.59\n18921\tda350800abe827640e45ab7904010111b0d10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n18958\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18976\t7fc90800f1fd2e7a5607122d04010111204e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.305\n19027\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19079\t73f80800f1fd2e7a5607122d04010111f0140000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.082\n19130\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19181\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19211\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19223\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19274\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19315\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19322\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19326\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19368\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19379\t75cf0800f1fd2e7a5607122d04010111300e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.055\n19430\t099f0800abe827640e45ab7904010111c0f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.952\n19460\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19480\t9e0f0800f1fd2e7a5607122d04010111904f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.311\n19521\t6cb40800abe827640e45ab790401011140b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.712\n19583\ta5f60800f1fd2e7a5607122d04010111c0a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.628\n19624\tace40800abe827640e45ab7904010111405d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.364\n19675\t04000800f1fd2e7a5607122d0401011180e70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.904\n19709\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19727\t53130800abe827640e45ab790401011190100000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n19779\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19820\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19829\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19863\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n19923\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19962\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19980\tecb20800f1fd2e7a5607122d0401011160fb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.982\n20021\tded50800abe827640e45ab7904010111b0060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.026\n20072\t1a030800f1fd2e7a5607122d0401011160da0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.853\n20123\t0b480800abe827640e45ab7904010111003e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.242\n20174\ta25f0800f1fd2e7a5607122d04010111d0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.652\n20205\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20226\t99210800abe827640e45ab790401011190780000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n20277\t66630800f1fd2e7a5607122d04010111d0750000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.46\n20318\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20336\t0b9b0800abe827640e45ab7904010111409e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.618\n20370\t03311400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20370\t03311400f1fd2e7a5607122d0401011100600000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.375\n20399\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20422\tc7ac0800abe827640e45ab7904010111009d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.613\n20453\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20475\t71fc0800f1fd2e7a5607122d0401011170790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.474\n20526\tf85d0800abe827640e45ab790401011140890000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.536\n20577\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n20629\t905c0800abe827640e45ab790401011110980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.594\n20669\ta6bf0800f1fd2e7a5607122d04010111d0710000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.445\n20710\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20721\tfa6b0800abe827640e45ab790401011140950000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.583\n20772\t89780800f1fd2e7a5607122d04010111206f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n20823\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20838\t04d10800abe827640e45ab790401011100640000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.391\n20875\t68791400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20875\t68791400f1fd2e7a5607122d0401011140a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.626\n20927\t620d0800abe827640e45ab7904010111106e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.43\n20954\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20971\t0a070800f1fd2e7a5607122d0401011150a10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.63\n21022\t0f9a0800abe827640e45ab790401011180980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.596\n21073\te5fd0800f1fd2e7a5607122d04010111606a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.416\n21125\tc1f60800abe827640e45ab790401011100b90000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.723\n21175\td1110800f1fd2e7a5607122d0401011130300000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.188\n21217\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21229\t19410800abe827640e45ab790401011160d50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.833\n21276\tb1120800f1fd2e7a5607122d04010111f00c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.051\n21320\t9f2d0800abe827640e45ab790401011100ee0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.93\n21352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21372\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21392\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21424\t50370800abe827640e45ab790401011140ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21455\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21467\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n21472\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21528\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21569\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21620\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21671\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21727\tef451400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21727\tef451400abe827640e45ab790401011110f50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.957\n21773\t19a20800f1fd2e7a5607122d0401011160270000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.154\n21825\ta6310800abe827640e45ab790401011110bd0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.739\n21883\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21888\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21918\t96620800abe827640e45ab7904010111007f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.496\n21959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21971\t572b0800f1fd2e7a5607122d04010111c0b90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.726\n21989\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22023\te1cc0800abe827640e45ab7904010111e03e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.246\n22074\te1420800f1fd2e7a5607122d0401011120f20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.946\n22125\t2e3e0800abe827640e45ab7904010111b0030000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.014\n22166\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22227\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22227\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22269\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22320\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22372\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22393\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22424\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22464\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n22469\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22521\t2b240800abe827640e45ab7904010111700b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.045\n22551\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22573\ta4b20800f1fd2e7a5607122d0401011180e10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.881\n22624\t20390800abe827640e45ab790401011160450000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.271\n22665\t01c00800f1fd2e7a5607122d04010111d0b20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n22727\t7b7f1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22727\t7b7f1400abe827640e45ab7904010111506a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.415\n22767\ta8ee0800f1fd2e7a5607122d0401011190850000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.522\n22819\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22850\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22871\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22923\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22963\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22974\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23026\tb3fc0800abe827640e45ab7904010111a06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.432\n23079\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23108\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23119\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23170\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23222\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23272\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23325\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23367\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23373\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23408\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23418\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23470\ta9fc0800f1fd2e7a5607122d0401011140760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23513\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23523\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23564\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23625\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23666\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23673\t0d4f0800f1fd2e7a5607122d0401011180760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n23719\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23754\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23777\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23826\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23862\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23894\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23914\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23925\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23966\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23987\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24018\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24069\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24121\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24144\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n24164\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24224\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n24268\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24317\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24368\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24398\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n24419\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n24425\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24461\t40d00800f1fd2e7a5607122d0401011170760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n24527\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24533\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24565\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462","parent":{"__typename":"File","name":"2-sliders","ext":".txt"}}]}}}