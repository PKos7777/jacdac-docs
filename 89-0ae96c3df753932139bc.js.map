{"version":3,"sources":["webpack:///./src/components/hooks/useMicrophoneSpectrum.ts","webpack:///./src/components/widgets/BytesBarGraphWidget.tsx","webpack:///./src/components/dashboard/DashboardSoundSpectrum.tsx"],"names":["useMicrophoneSpectrum","enabled","options","useMicrophoneAnalyzer","analyser","onClickActivateMicrophone","closeMicrophone","frequencies","useRef","Uint8Array","useEffect","spectrum","a","current","length","frequencyBinCount","getByteFrequencyData","BytesBarGraphWidget","props","register","size","host","useServiceHost","service","color","useWidgetTheme","background","controlBackground","active","pathRef","w","h","m","dy","subscribe","CHANGE","bins","data","dx","dw","d","i","bin","setAttribute","HostMicrophoneButton","enabledRegister","SoundSpectrumReg","Enabled","useRegisterBoolValue","useRegisterUnpackedValue","MinDecibels","minDecibels","MaxDecibels","maxDecibels","FftPow2Size","fftPow2Size","fftSize","SmoothingTimeConstant","smoothingTimeConstant","title","handleClick","sendSetBoolAsync","REFRESH","v","undefined","reading","setValues","DashboardSoundSpectrum","variant","services","frequencyBinsRegister","FrequencyBins"],"mappings":"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","file":"89-0ae96c3df753932139bc.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\";\n\nexport default function useMicrophoneSpectrum(enabled: boolean, options?: AudioAnalyzerOptions) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } = useMicrophoneAnalyzer(options);\n    const frequencies = useRef(new Uint8Array(0));\n\n    useEffect(() => {\n        if (!enabled)\n            closeMicrophone();\n    }, [enabled]);\n\n    return {\n        onClickActivateMicrophone,\n        spectrum: () => {\n            const a = analyser();\n            if (!a) return frequencies.current;\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount);\n            a?.getByteFrequencyData(frequencies.current);\n            return frequencies.current;\n        }\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport SvgWidget from \"./SvgWidget\";\nimport useWidgetTheme from \"./useWidgetTheme\";\n\nexport default function BytesBarGraphWidget(props: { register: JDRegister, size?: string }) {\n    const { register, size } = props;\n    const host = useServiceHost(register.service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const pathRef = useRef<SVGPathElement>();\n\n    const w = 128;\n    const h = w / 1.612;\n    const m = 2;\n    const dy = (h - 2 * m) / 0xff;\n\n    useEffect(() => register.subscribe(CHANGE, () => {\n        // render outside of react loop\n        const { current } = pathRef;\n        const bins = register.data;\n        if (!current || !bins) return;\n\n        const dx = (w - 2 * m) / bins.length;\n        const dw = (w - 2 * m) / (bins.length * 6)\n        let d = `M ${m} ${h - m} `;\n        for (let i = 0; i < bins.length; ++i) {\n            const bin = bins[i];\n            d += ` v ${-dy * bin} h ${dx - dw} v ${dy * bin} h ${dw}`;\n        }\n        d += ' z';\n        current.setAttribute(\"d\", d);\n    }), [register])\n\n    return <SvgWidget width={w} height={h} size={size} background={background}>\n        <path fill={active} stroke={controlBackground} strokeWidth={m / 2} ref={pathRef} />\n    </SvgWidget>\n}\n","import React, { useEffect } from \"react\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterBoolValue, useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport { Grid } from \"@material-ui/core\";\nimport MicIcon from '@material-ui/icons/Mic';\nimport { REFRESH, SoundSpectrumReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport useMicrophoneSpectrum from \"../hooks/useMicrophoneSpectrum\";\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\";\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\";\nimport SensorServiceHost from \"../../../jacdac-ts/src/hosts/sensorservicehost\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport BytesBarGraphWidget from \"../widgets/BytesBarGraphWidget\";\n\nfunction HostMicrophoneButton(props: { service: JDService, host?: SensorServiceHost<[Uint8Array]> }) {\n    const { host, service } = props;\n    const enabledRegister = service.register(SoundSpectrumReg.Enabled);\n    const enabled = useRegisterBoolValue(enabledRegister)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(service.register(SoundSpectrumReg.MinDecibels))\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(service.register(SoundSpectrumReg.MaxDecibels))\n    const [fftPow2Size] = useRegisterUnpackedValue<[number]>(service.register(SoundSpectrumReg.FftPow2Size));\n    const fftSize = 1 << (fftPow2Size || 5);\n    const [smoothingTimeConstant] = useRegisterUnpackedValue<[number]>(service.register(SoundSpectrumReg.SmoothingTimeConstant));\n    const { spectrum, onClickActivateMicrophone } = useMicrophoneSpectrum(enabled && !!host, { fftSize, smoothingTimeConstant, minDecibels, maxDecibels });\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled)\n            await onClickActivateMicrophone();\n        await enabledRegister.sendSetBoolAsync(!enabled, true);\n    }\n\n    // update volume on demand\n    useEffect(() => host?.subscribe(REFRESH, () => {\n        const v = spectrum?.();\n        if (v !== undefined) {\n            host.reading.setValues([v]);\n        }\n    }), [host, spectrum])\n\n    return <IconButtonWithProgress\n        aria-label={title}\n        title={title}\n        indeterminate={enabled}\n        onClick={handleClick}>\n        <MicIcon />\n    </IconButtonWithProgress>\n}\n\nexport default function DashboardSoundSpectrum(props: DashboardServiceProps) {\n    const { service, variant, services } = props;\n    const frequencyBinsRegister = service.register(SoundSpectrumReg.FrequencyBins);\n    const host = useServiceHost<SensorServiceHost<[Uint8Array]>>(service);\n\n    return <Grid container direction=\"column\">\n        <Grid item>\n            <BytesBarGraphWidget register={frequencyBinsRegister} />\n        </Grid>\n        <Grid item>\n            <HostMicrophoneButton service={service} host={host} />\n        </Grid>\n    </Grid>\n}"],"sourceRoot":""}