{"version":3,"file":"5149-d871a51f3cb8610756c2.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardReflectedLight.tsx"],"sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport ReflectedLightServer from \"../../../jacdac-ts/src/servers/reflectedlightserver\"\nimport {\n    ReflectedLightReg,\n    ReflectedLightVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardReflectedLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const brighessRegister = useRegister(service, ReflectedLightReg.Brightness)\n    const variantRegister = useRegister(service, ReflectedLightReg.Variant)\n\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brighessRegister,\n        props\n    )\n    const [sensorVariant] = useRegisterUnpackedValue<[ReflectedLightVariant]>(\n        variantRegister,\n        props\n    )\n\n    const server = useServiceServer<ReflectedLightServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services?.length)\n\n    const maxValue = 1.0\n    const handleDown = () => {\n        server.reading.setValues([brightness > 0 ? 0 : 1.0])\n        brighessRegister.refresh()\n    }\n    const buttonProps = useSvgButtonProps<SVGRectElement>(\n        \"line detector\",\n        server && handleDown\n    )\n\n    const actualBrightness = useThrottledValue(brightness || 0, maxValue << 2)\n\n    const w = 64\n    const h = 64\n    const m = 4\n    const sw = sensorVariant === ReflectedLightVariant.InfraredAnalog ? 32 : 16\n    const dx = w >> 1\n    const x = (w - sw - dx) / 2 + (actualBrightness / maxValue) * dx\n    const sh = 32\n    const dark = \"#000\"\n    const bright = \"#ddd\"\n\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={dark}\n                aria-label=\"dark area\"\n            />\n            <rect\n                x={w >> 1}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={bright}\n                aria-label=\"bright area\"\n            />\n            <g transform={`translate(${x}, ${h - m - sh})`}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={sw}\n                    height={sh}\n                    fill={background}\n                    {...buttonProps}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={sh / 3}\n                    r={sw / 2 - 4}\n                    fill={dark}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={(sh * 2) / 3}\n                    r={sw / 2 - 4}\n                    fill={bright}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n            </g>\n        </SvgWidget>\n    )\n}\n"],"names":["React","useRegisterUnpackedValue","SvgWidget","useWidgetTheme","useServiceServer","useWidgetSize","useThrottledValue","useSvgButtonProps","ReflectedLightReg","ReflectedLightVariant","useRegister","DashboardReflectedLight","props","service","services","variant","brighessRegister","Brightness","variantRegister","Variant","brightness","sensorVariant","server","color","background","controlBackground","widgetSize","length","maxValue","handleDown","reading","setValues","refresh","buttonProps","actualBrightness","w","h","m","sw","InfraredAnalog","dx","x","sh","dark","bright","userSelect","pointerEvents"],"sourceRoot":""}