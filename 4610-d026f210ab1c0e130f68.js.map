{"version":3,"file":"4610-d026f210ab1c0e130f68.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dialogs/StartSimulatorDialog.tsx","webpack://jacdac-docs/./src/components/ui/SelectWithLabel.tsx"],"sourcesContent":["import {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    MenuItem,\n} from \"@material-ui/core\"\nimport AppContext from \"../AppContext\"\nimport React, { useContext, useMemo, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport servers, {\n    addServiceProvider,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport { VIRTUAL_DEVICE_NODE_NAME } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { delay, uniqueMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport KindIcon from \"../KindIcon\"\nimport SelectWithLabel from \"../ui/SelectWithLabel\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\n\nexport default function StartSimulatorDialog(props: {\n    open: boolean\n    onClose: () => void\n}) {\n    const { open, onClose } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { enqueueSnackbar } = useContext(AppContext)\n    const deviceHostDialogId = useId()\n    const deviceHostLabelId = useId()\n\n    const [selected, setSelected] = useState(\"button\")\n    const providerDefinitions = useMemo(() => servers(), [])\n    const { mobile } = useMediaQueries()\n\n    const handleChange = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        setSelected(ev.target.value as string)\n    }\n    const handleCancel = () => {\n        onClose()\n    }\n    const handleStart = () => {\n        const provider = providerDefinitions.find(h => h.name === selected)\n        addServiceProvider(bus, provider)\n        onClose()\n    }\n    const handleAddAll = async () => {\n        const allProviderDefinitions = uniqueMap(\n            providerDefinitions.filter(hd => hd.serviceClasses.length === 1),\n            hd => hd.serviceClasses[0].toString(),\n            h => h\n        )\n        enqueueSnackbar(\n            `starting ${allProviderDefinitions.length} simulators...`,\n            `info`\n        )\n        onClose()\n        for (const provider of allProviderDefinitions) {\n            await delay(100)\n            addServiceProvider(bus, provider)\n        }\n    }\n\n    return (\n        <Dialog\n            id={deviceHostDialogId}\n            aria-labelledby={deviceHostLabelId}\n            open={open}\n            onClose={onClose}\n            fullScreen={mobile}\n        >\n            <DialogTitle id={deviceHostLabelId}>Start a simulator</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <SelectWithLabel\n                            fullWidth={true}\n                            helperText={\n                                \"Select the service that will run on the simulator\"\n                            }\n                            label={\"Simulator\"}\n                            value={selected}\n                            onChange={handleChange}\n                        >\n                            {providerDefinitions.map(host => (\n                                <MenuItem key={host.name} value={host.name}>\n                                    {host.name}\n                                </MenuItem>\n                            ))}\n                        </SelectWithLabel>\n                    </Grid>\n                    <Grid item>\n                        <Grid container spacing={1}>\n                            {mobile && (\n                                <Grid item>\n                                    <Button\n                                        aria-label={`cancel`}\n                                        variant=\"contained\"\n                                        title=\"Cancel\"\n                                        onClick={handleCancel}\n                                    >\n                                        cancel\n                                    </Button>\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <Button\n                                    aria-label={`start ${selected}`}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    title=\"Start new simulator\"\n                                    onClick={handleStart}\n                                    startIcon={\n                                        <KindIcon\n                                            kind={VIRTUAL_DEVICE_NODE_NAME}\n                                        />\n                                    }\n                                >\n                                    start\n                                </Button>\n                            </Grid>\n                            {Flags.diagnostics && (\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={handleAddAll}\n                                    >\n                                        start all simulators\n                                    </Button>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n","import {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, ReactNode } from \"react\"\nimport { useId } from \"react-use-id-hook\"\n\nexport default function SelectWithLabel(props: {\n    required?: boolean\n    label?: string\n    disabled?: boolean\n    error?: string\n    value?: string\n    placeholder?: string\n    type?: string\n    fullWidth?: boolean\n    onChange?: (ev: ChangeEvent<{ name?: string; value: unknown }>) => void\n    onClose?: (ev: ChangeEvent<unknown>) => void\n    helperText?: string\n    children?: ReactNode\n    none?: ReactNode\n}) {\n    const {\n        label,\n        fullWidth,\n        required,\n        disabled,\n        value,\n        error,\n        placeholder,\n        onChange,\n        onClose,\n        children,\n        helperText,\n        type,\n        none,\n    } = props\n    const labelId = useId()\n    const descrId = useId()\n    const id = useId()\n    const hasDescr = !!helperText || !!error\n\n    return (\n        <FormControl fullWidth={fullWidth} variant=\"outlined\">\n            <InputLabel id={labelId} key=\"label\">\n                {required ? `${label} *` : label}\n            </InputLabel>\n            <Select\n                id={id}\n                disabled={disabled}\n                label={label}\n                value={value}\n                error={!!error}\n                fullWidth={true}\n                placeholder={placeholder}\n                type={type}\n                labelId={labelId}\n                aria-describedby={hasDescr ? descrId : undefined}\n                onChange={onChange}\n                onClose={onClose}\n            >\n                {none !== undefined && (\n                    <MenuItem key={\"none\"} value={\"\"}>\n                        {none}\n                    </MenuItem>\n                )}\n                {children}\n            </Select>\n            {hasDescr && (\n                <FormHelperText id={descrId}>\n                    {error || helperText}\n                </FormHelperText>\n            )}\n        </FormControl>\n    )\n}\n"],"names":["Button","Dialog","DialogContent","DialogTitle","Grid","MenuItem","AppContext","React","useContext","useMemo","useState","useId","servers","addServiceProvider","VIRTUAL_DEVICE_NODE_NAME","Flags","delay","uniqueMap","JacdacContext","KindIcon","SelectWithLabel","useMediaQueries","StartSimulatorDialog","props","open","onClose","bus","enqueueSnackbar","deviceHostDialogId","deviceHostLabelId","selected","setSelected","providerDefinitions","mobile","handleChange","ev","target","value","handleCancel","handleStart","provider","find","h","name","handleAddAll","allProviderDefinitions","filter","hd","serviceClasses","length","toString","map","host","diagnostics","FormControl","FormHelperText","InputLabel","Select","label","fullWidth","required","disabled","error","placeholder","onChange","children","helperText","type","none","labelId","descrId","id","hasDescr","undefined"],"sourceRoot":""}