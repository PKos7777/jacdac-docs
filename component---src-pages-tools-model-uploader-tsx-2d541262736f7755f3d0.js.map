{"version":3,"sources":["webpack:///./src/components/ui/CircularProgressWithLabel.tsx","webpack:///./src/components/alert/ConnectAlert.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack:///./src/components/alert/DeviceLostAlert.tsx","webpack:///./src/components/useGridBreakpoints.ts","webpack:///./jacdac-ts/src/jdom/sensoraggregatorclient.ts","webpack:///./jacdac-ts/src/jdom/serviceclient.ts","webpack:///./src/components/ServiceList.tsx","webpack:///./src/components/useDb.ts","webpack:///./jacdac-ts/src/jdom/modelrunner.ts","webpack:///./src/components/SensorAggregatorConfigView.tsx","webpack:///./src/components/useCall.tsx","webpack:///./node_modules/@material-ui/icons/esm/Link.js","webpack:///./src/pages/tools/model-uploader.tsx"],"names":["CircularProgressWithLabel","props","Math","round","value","useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","classes","useContext","JacdacContext","bus","connectionState","serviceClass","devices","useChange","b","spec","serviceSpecificationFromClassIdentifier","webusb","isWebUSBEnabled","isWebUSBSupported","length","BusState","Disconnected","name","ConnectAlert","DeviceLostAlert","device","lost","useEventRaised","LOST","FOUND","dev","useGridBreakpoints","itemCount","AppContext","drawerType","undefined","xs","sm","md","lg","xl","DrawerType","None","SensorAggregatorClient","service","registersUseAcks","setInputs","cfg","error","mapType","tp","SensorAggregatorSampleType","U8","U16","U32","I8","I16","I32","msg","Error","inputs","totalSampleSize","map","input","deviceId","serviceIndex","specification","toString","freeze","readingReg","packets","find","isReading","sampleType","sampleSize","sampleShift","fields","field","abs","storage","shift","bufferConcat","fromHex","Uint8Array","jdpack","JD_SERIAL_MAX_PAYLOAD_SIZE","unshift","samplingInterval","samplesInWindow","register","SensorAggregatorReg","Inputs","sendSetAsync","bufferConcatMany","collect","numSamples","StreamingSamples","sendSetPackedAsync","subscribeSample","handler","reg","CurrentSample","mount","subscribe","REPORT_RECEIVE","bufferToArray","data","NumberFormat","Float32LE","getReg","id","f","refresh","stats","info","NumSamples","r","intValue","SampleSize","Object","keys","JDServiceClient","JDClient","ServiceListItem","content","checked","checkedDisabled","toggleChecked","actions","handleCheck","ServiceList","selected","toggleSelected","alertMissing","services","n","gridBreakpoints","handleSelected","handleChecked","serviceContent","serviceActions","useDbBlob","DbContext","db","useState","_value","_setValue","values","blobs","useEffect","_mounted","DB_VALUE_CHANGE","changed","get","v","console","log","set","useEffectAsync","mounted","blob","setBlob","useDbUint8Array","blobName","model","setModel","readBlobToUint8Array","buf","useDbString","readBlobToText","t","useDbJSON","JSONTryParse","isMLModelSupported","formatRegValue","U","getMLModelFormatName","SRV_MODEL_RUNNER","enums","members","m0","m1","slice","ModelRunnerClient","isModelSupported","ModelRunnerReg","Format","subscribeResults","Outputs","deployModel","onProgress","sendCmdAwaitResponseAsync","Packet","jdpacked","ModelRunnerCmd","SetModel","resp","jdunpack","pipePort","pipe","OutPipe","chunkSize","i","send","close","autoInvoke","everySamples","AutoInvokeEvery","modelStats","ModelSize","AllocatedArenaSize","InputShape","UInt16LE","OutputShape","LastError","SensorAggregatorInputConfigView","serviceName","SensorAggregatorConfigView","config","useCall","setAppError","setError","running","setRunning","progress","setProgress","handleProgress","p","call","e","callAsync","alert","ImportButton","lazy","ModelContent","modelSize","useRegisterIntValue","lastError","useRegisterStringValue","prettySize","ModelActions","sensorAggregatorService","sensorInput","modelDisabled","handleDeployModel","aggregator","runner","ModelUploader","importing","setImporting","sensorConfig","setSensorConfig","ServiceManagerContext","modelStore","handleTfmodelFiles","files","file","handleClearModel","handleSensorConfigFiles","handleClearConfiguration","handleLoadModel","loadFile","handleLoadInputConfiguration","models","_","inputConfigurations","byteLength","path","size","iconfig","SRV_SENSOR_AGGREGATOR"],"mappings":"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","file":"component---src-pages-tools-model-uploader-tsx-2d541262736f7755f3d0.js","sourcesContent":["import React from \"react\"\nimport { CircularProgressProps, Box, CircularProgress, Typography } from \"@material-ui/core\";\n\nexport default function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}","// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\";\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\";\nimport React, { useContext } from \"react\";\nimport { BusState } from \"../../../jacdac-ts/src/jdom/bus\";\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport ConnectButton from \"../../jacdac/ConnectButton\";\nimport { isWebUSBEnabled, isWebUSBSupported } from \"../../../jacdac-ts/src/jdom/usb\"\nimport { NoSsr } from '@material-ui/core';\nimport useChange from \"../../jacdac/useChange\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    button: {\n        marginLeft: theme.spacing(2)\n    }\n}))\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { bus, connectionState } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass } = props\n    const devices = useChange(bus, b => b.devices({ serviceClass }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const webusb = isWebUSBEnabled() && isWebUSBSupported()\n\n    if (!devices?.length &&\n        webusb &&\n        connectionState === BusState.Disconnected)\n        return <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <ConnectButton className={classes.button} full={true} transparent={true} />\n            </Alert>\n        </Box>\n    return null\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return <NoSsr>\n        <NoSsrConnectAlert {...props} />\n    </NoSsr>\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import React from \"react\";\nimport { LOST, FOUND } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\";\nimport useEventRaised from \"../../jacdac/useEventRaised\";\nimport Alert from \"../ui/Alert\";\n\nexport function DeviceLostAlert(props: { device: JDDevice }) {\n    const { device } = props;\n    const lost = useEventRaised([LOST, FOUND], device, dev => !!dev?.lost)\n    return <>\n        {lost && <Alert severity=\"info\">Device lost...</Alert>}\n    </>\n}","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import { SensorAggregatorReg, SensorAggregatorSampleType } from \"../../jacdac-spec/dist/specconstants\"\nimport { bufferToArray, NumberFormat } from \"./buffer\"\nimport { JD_SERIAL_MAX_PAYLOAD_SIZE, REPORT_RECEIVE } from \"./constants\"\nimport { jdpack } from \"./pack\"\nimport { JDRegister } from \"./register\"\nimport { JDService } from \"./service\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { isReading, serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { bufferConcat, bufferConcatMany, fromHex } from \"./utils\"\n\nexport interface SensorAggregatorInputConfig {\n    serviceClass: number;\n    // if specified, also specify serviceIndex\n    deviceId?: string;\n    serviceIndex?: number;\n}\n\nexport interface SensorAggregatorConfig {\n    samplingInterval: number; // ms\n    samplesInWindow: number;\n    inputs: SensorAggregatorInputConfig[];\n}\n\nexport interface SensorAggregatorStats {\n    \"numSamples\": number;\n    \"sampleSize\": number;\n}\n\nexport class SensorAggregatorClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        this.service.registersUseAcks = true\n    }\n\n    async setInputs(cfg: SensorAggregatorConfig) {\n        function error(msg: string) {\n            throw new Error(\"Aggregator inputs: \" + msg)\n        }\n        function mapType(tp: number) {\n            switch (tp) {\n                case 1: return SensorAggregatorSampleType.U8\n                case 2: return SensorAggregatorSampleType.U16\n                case 4: return SensorAggregatorSampleType.U32\n                case -1: return SensorAggregatorSampleType.I8\n                case -2: return SensorAggregatorSampleType.I16\n                case -4: return SensorAggregatorSampleType.I32\n                default:\n                    error(\"unknown storage type\")\n            }\n        }\n\n        if (!cfg || !cfg.inputs)\n            error(\"invalid input format\");\n\n        let totalSampleSize = 0\n        const inputs = cfg.inputs?.map(input => {\n            const { deviceId, serviceIndex, serviceClass } = input\n            if (!!deviceId !== !!serviceIndex)\n                error(`deviceId and serviceIndex must be specified together`)\n            const specification = serviceSpecificationFromClassIdentifier(serviceClass)\n            if (!specification)\n                error(`missing specification from service 0x${serviceClass.toString(16)}`)\n            const freeze = !!deviceId\n            const readingReg = specification.packets.find(isReading)\n            if (!readingReg)\n                error(`service 0x${serviceClass.toString(16)} does not have a reading register`)\n            let sampleType: SensorAggregatorSampleType = undefined\n            let sampleSize = 0\n            let sampleShift = 0\n            for (const field of readingReg.fields) {\n                sampleSize += Math.abs(field.storage)\n                if (sampleType === undefined) {\n                    sampleType = mapType(field.storage)\n                    sampleShift = field.shift || 0\n                }\n                if (sampleType != mapType(field.storage) || sampleShift != (field.shift || 0))\n                    error(\"heterogenous field types\")\n            }\n            totalSampleSize += sampleSize\n            return bufferConcat(\n                freeze ? fromHex(deviceId) : new Uint8Array(8),\n                jdpack(\"u32 u8 u8 u8 i8\", [\n                    serviceClass,\n                    freeze ? serviceIndex : 0,\n                    sampleSize,\n                    sampleType,\n                    sampleShift\n                ])\n            )\n        })\n\n        if (totalSampleSize > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            error(\"samples won't fit in packet\")\n\n        // u32 is x[4]\n        inputs.unshift(jdpack(\"u16 u16 u32\", [cfg.samplingInterval, cfg.samplesInWindow, 0]))\n        await this.service.register(SensorAggregatorReg.Inputs)\n            .sendSetAsync(bufferConcatMany(inputs))\n    }\n\n    async collect(numSamples: number) {\n        await this.service.register(SensorAggregatorReg.StreamingSamples)\n            .sendSetPackedAsync(\"u32\", [numSamples]);\n    }\n\n    subscribeSample(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(SensorAggregatorReg.CurrentSample)\n        return this.mount(reg.subscribe(REPORT_RECEIVE,\n            () => handler(bufferToArray(reg.data, NumberFormat.Float32LE))))\n    }\n\n    private async getReg(id: SensorAggregatorReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async stats(): Promise<SensorAggregatorStats> {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const info: any = {\n            \"numSamples\": this.getReg(SensorAggregatorReg.NumSamples, r => r.intValue),\n            \"sampleSize\": this.getReg(SensorAggregatorReg.SampleSize, r => r.intValue),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\n\n","import { JDService } from \"./service\";\nimport { JDDevice } from \"./device\";\nimport { JDBus } from \"./bus\";\nimport { JDClient } from \"./client\";\n\nexport class JDServiceClient extends JDClient {\n\n    constructor(public readonly service: JDService) {\n        super()\n    }\n\n    protected get device(): JDDevice {\n        return this.service.device\n    }\n\n    protected get bus(): JDBus {\n        return this.device.bus\n    }\n\n    toString(): string {\n        return `client of ${this.service}`\n    }\n}\n","\nimport React, { useContext } from 'react';\nimport { Grid, makeStyles, Theme, createStyles, CardContent, Card, CardActions, Switch, Box } from '@material-ui/core';\nimport ServiceCard from './ServiceCard';\nimport useChange from '../jacdac/useChange';\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport useGridBreakpoints from './useGridBreakpoints';\nimport DeviceCardHeader from './DeviceCardHeader';\nimport { JDService } from '../../jacdac-ts/src/jdom/service';\nimport { DeviceLostAlert } from './alert/DeviceLostAlert';\nimport { JDDevice } from '../../jacdac-ts/src/jdom/device';\nimport Alert from './ui/Alert';\n\n\nfunction ServiceListItem(props: {\n    service: JDService,\n    content?: JSX.Element | JSX.Element[],\n    checked?: boolean,\n    checkedDisabled?: boolean\n    toggleChecked?: () => void,\n    actions?: JSX.Element | JSX.Element[]\n}) {\n    const { service, content, checked, checkedDisabled, toggleChecked, actions } = props;\n    const { device } = service;\n\n    const handleCheck = () => toggleChecked()\n\n    return <Card>\n        <DeviceCardHeader device={device} showMedia={true} />\n        <CardContent>\n            <DeviceLostAlert device={device} />\n            {content}\n        </CardContent>\n        <CardActions>\n            {checked !== undefined && <Switch disabled={checkedDisabled} onChange={handleCheck} checked={checked} />}\n            {actions}\n        </CardActions>\n    </Card>\n}\n\nexport default function ServiceList(props: {\n    serviceClass: number,\n    selected?: (service: JDService) => boolean,\n    toggleSelected?: (service: JDService) => void,\n    content?: (service: JDService) => JSX.Element | JSX.Element[],\n    actions?: (service: JDService) => JSX.Element | JSX.Element[],\n    alertMissing?: string\n}) {\n    const { serviceClass, selected, toggleSelected, content, actions, alertMissing } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, n => n.services({ serviceClass }))\n    const gridBreakpoints = useGridBreakpoints(services?.length)\n\n    const handleSelected = (service: JDService) => selected && selected(service)\n    const handleChecked = (service: JDService) => () => toggleSelected && toggleSelected(service);\n    const serviceContent = (service: JDService) => content && content(service);\n    const serviceActions = (service: JDService) => actions && actions(service);\n\n    if (alertMissing && !services?.length)\n        return <Alert severity=\"info\">{alertMissing}</Alert>\n\n    return (<Box mb={1}>\n        <Grid container spacing={2}>\n            {services?.map(service => <Grid key={service.id} item {...gridBreakpoints}>\n                <ServiceListItem\n                    service={service}\n                    checked={handleSelected(service)}\n                    toggleChecked={handleChecked(service)}\n                    content={serviceContent(service)}\n                    actions={serviceActions(service)}\n                />\n            </Grid>)}\n        </Grid></Box>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { JSONTryParse, readBlobToText, readBlobToUint8Array } from \"../../jacdac-ts/src/jdom/utils\";\nimport DbContext, { DB_VALUE_CHANGE } from \"./DbContext\";\nimport useEffectAsync from \"./useEffectAsync\";\n\nexport function useDbBlob(id: string) {\n    const { db } = useContext(DbContext)\n    const [_value, _setValue] = useState<Blob>(undefined)\n    const values = db?.blobs\n\n    // listen to change\n    useEffect(() => {\n        let _mounted = true;\n        return values?.subscribe(DB_VALUE_CHANGE, async (changed) => {\n            if (changed === id) {\n                try {\n                    const v = await values.get(id)\n                    if (_mounted) {\n                        _setValue(v);\n                    }\n                }\n                catch (e) {\n                    console.log(e)\n                    await values?.set(id, undefined);\n                }\n            }\n            return () => {\n                _mounted = false;\n            }\n        })\n    }, [values])\n\n    // load intial value\n    useEffectAsync(async (mounted) => {\n        try {\n            const v = await values?.get(id);\n            if (mounted())\n                _setValue(v)\n        } catch (e) {\n            console.log(e)\n            // trash data\n            await values?.set(id, undefined);\n        }\n    }, [values])\n\n    return {\n        blob: _value,\n        setBlob: async (blob: Blob) => {\n            await values?.set(id, blob)\n        }\n    }\n}\n\nexport function useDbUint8Array(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n\n    useEffectAsync(async (mounted) => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const buf = await readBlobToUint8Array(blob);\n            if (mounted())\n                setModel(buf);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbString(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<string>(undefined)\n\n    useEffectAsync(async () => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const t = await readBlobToText(blob);\n            setModel(t);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbJSON<T>(blobName: string) {\n    const { data, setBlob } = useDbString(blobName);\n    const value: T = JSONTryParse(data) as T;\n    return {\n        value,\n        setBlob: async (blob: Blob) => {\n            await setBlob(blob)\n        }\n    }\n}\n","import * as U from \"./utils\"\nimport Packet from \"./packet\"\nimport {\n    REPORT_RECEIVE,\n    SRV_MODEL_RUNNER\n} from \"./constants\"\nimport { JDService } from \"./service\"\nimport { ModelRunnerCmd, ModelRunnerReg } from \"./constants\"\nimport { bufferToArray, NumberFormat } from \"./buffer\"\nimport { OutPipe } from \"./pipes\"\nimport { JDRegister } from \"./register\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { jdunpack } from \"./pack\"\n\n/*\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n*/\n\nexport function isMLModelSupported(model: Uint8Array, formatRegValue: number) {\n    return U.read32(model, 0) == formatRegValue || U.read32(model, 4) == formatRegValue\n}\n\nexport function getMLModelFormatName(model: Uint8Array) {\n    const map = serviceSpecificationFromClassIdentifier(SRV_MODEL_RUNNER).enums[\"ModelFormat\"].members\n    const m0 = U.read32(model, 0)\n    const m1 = U.read32(model, 4)\n    for (const v of Object.keys(map)) {\n        if (map[v] == m0 || map[v] == m1)\n            return v\n    }\n    return \"0x\" + U.toHex(model.slice(0, 8))\n}\n\nexport class ModelRunnerClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        this.service.registersUseAcks = true\n    }\n\n    // TODO this should use some caching?\n    async isModelSupported(model: Uint8Array) {\n        const reg = this.service.register(ModelRunnerReg.Format)\n        await reg.refresh()\n        return reg.data == null || isMLModelSupported(model, reg.intValue >>> 0)\n    }\n\n    subscribeResults(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(ModelRunnerReg.Outputs)\n        return reg.subscribe(REPORT_RECEIVE, () => {\n            handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n        })\n    }\n\n    async deployModel(model: Uint8Array, onProgress?: (p: number) => void) {\n        onProgress?.(0)\n        const resp = await this.service.sendCmdAwaitResponseAsync(Packet.jdpacked(ModelRunnerCmd.SetModel, \"u32\", [model.length]), 3000)\n        onProgress?.(0.05)\n        const [pipePort] = jdunpack<[number]>(resp.data, \"u16\")\n        if (!pipePort)\n            throw new Error(\"wrong port \" + pipePort)\n        const pipe = new OutPipe(this.service.device, pipePort)\n        const chunkSize = 224 // has to be divisible by 8\n        for (let i = 0; i < model.length; i += chunkSize) {\n            await pipe.send(model.slice(i, i + chunkSize))\n            onProgress?.(0.05 + (i / model.length) * 0.9)\n        }\n        try {\n            await pipe.close()\n        } catch {\n            // the device may restart before we manage to close\n        }\n        onProgress?.(1)\n    }\n\n    async autoInvoke(everySamples = 1) {\n        await this.service.register(ModelRunnerReg.AutoInvokeEvery).sendSetPackedAsync(\"u16\", [everySamples])\n    }\n\n    private async getReg(id: ModelRunnerReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async modelStats(): Promise<TFModelStats> {\n        const info: any = {\n            \"modelSize\": this.getReg(ModelRunnerReg.ModelSize, r => r.intValue),\n            \"arenaSize\": this.getReg(ModelRunnerReg.AllocatedArenaSize, r => r.intValue),\n            \"inputShape\": this.getReg(ModelRunnerReg.InputShape, r => bufferToArray(r.data, NumberFormat.UInt16LE)),\n            \"outputShape\": this.getReg(ModelRunnerReg.OutputShape, r => bufferToArray(r.data, NumberFormat.UInt16LE)),\n            \"lastError\": this.getReg(ModelRunnerReg.LastError, r => U.uint8ArrayToString(r.data)),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\n\nexport interface TFModelStats {\n    \"modelSize\": number;\n    \"arenaSize\": number;\n    \"inputShape\": number[];\n    \"outputShape\": number[];\n    \"lastError\": string;\n}\n\n/*\nexport async function testAGG(bus: JDBus) {\n    const aggService = bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })[0]\n    if (!aggService) {\n        console.log(\"no agg service\")\n        return\n    }\n    const agg = new SensorAggregatorClient(aggService)\n\n    let acc = bus.services({ serviceClass: SRV_ACCELEROMETER })\n    if (acc.length == 0) {\n        console.log(\"no acc service\")\n        return\n    }\n\n    await agg.setInputs({\n        samplesInWindow: 50,\n        samplingInterval: 20,\n        inputs: acc\n    })\n\n    agg.subscribeSample(sample => {\n        console.log(\"SAMPLE\", sample)\n    })\n\n}\n\nexport async function testTF(bus: JDBus, model: Uint8Array) {\n    const tfService = bus.services({ serviceClass: SRV_MODEL_RUNNER })[0]\n    if (!tfService) {\n        console.log(\"no tflite service\")\n        return\n    }\n    const tf = new TFLiteClient(tfService)\n\n    if (model)\n        await tf.deployModel(model, p => console.log(\"deploy\", p.toFixed(3)))\n\n    const st = await tf.modelStats()\n    console.log(st)\n\n    const classNames = ['noise', 'punch', 'left', 'right'];\n    tf.subscribeResults(outp => {\n        for (let i = 0; i < outp.length; ++i) {\n            if (outp[i] > 0.7) {\n                console.log(outp[i].toFixed(3) + \" \" + classNames[i])\n            }\n        }\n         console.log(\"OUT\", outp)\n    })\n\n    await tf.autoInvoke(8)\n\n    console.log(\"autoinvoked\")\n\n}\n*/\n","import { Paper } from \"@material-ui/core\";\nimport React, { useContext } from \"react\"\nimport { serviceName } from \"../../jacdac-ts/src/jdom/pretty\";\nimport { SensorAggregatorConfig, SensorAggregatorInputConfig } from \"../../jacdac-ts/src/jdom/sensoraggregatorclient\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport DeviceName from \"./DeviceName\";\n\nfunction SensorAggregatorInputConfigView(props: { input: SensorAggregatorInputConfig }) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext);\n    const { input } = props;\n    const { serviceClass, deviceId, serviceIndex } = input;\n\n    const device = deviceId && bus.device(deviceId)\n\n    return <>\n        {serviceName(serviceClass)}\n        {device && <DeviceName device={device} serviceIndex={serviceIndex} />}\n        {!device && deviceId && <span>{deviceId}[{serviceIndex}]</span>}\n        {!deviceId && <span>/ any device</span>}\n    </>\n}\n\nexport default function SensorAggregatorConfigView(props: { config: SensorAggregatorConfig }) {\n    const { config } = props;\n\n    if (!config?.inputs)\n        return <></>\n\n    return <Paper>\n        <ul>\n            <li>samples interval (ms): <code>{config.samplingInterval}</code></li>\n            <li>samples window (# samples): <code>{config.samplesInWindow}</code></li>\n            <li>inputs ({config.inputs.length})\n                <ul>\n                    {config.inputs.map((input, i) => <li key={\"input\" + i}><SensorAggregatorInputConfigView input={input} /></li>)}\n                </ul>\n            </li>\n        </ul>\n    </Paper>\n}","import React, { useContext, useState } from \"react\";\nimport Alert from \"./ui/Alert\";\nimport AppContext from \"./AppContext\";\n\nexport type ProgressHandler = (p: number) => void\n\nexport default function useCall() {\n    const { setError: setAppError } = useContext(AppContext)\n    const [error, setError] = useState<Error>();\n    const [running, setRunning] = useState(false)\n    const [progress, setProgress] = useState(0);\n\n    const handleProgress = (p: number) => setProgress(p);\n\n    const call = (handler: (onProgress?: ProgressHandler) => void) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const callAsync = async (handler: (onProgress?: (p: number) => void) => Promise<void>) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            await handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const alert = error && <Alert severity=\"error\">{error}</Alert>\n\n    return {\n        running,\n        error,\n        progress,\n        alert,\n        call,\n        callAsync\n    }\n} ","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"\n}), 'Link');","import { List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport React, { lazy, useContext, useState } from 'react';\nimport { SRV_SENSOR_AGGREGATOR, SRV_MODEL_RUNNER, ModelRunnerReg } from '../../../jacdac-ts/src/jdom/constants';\nimport { JDService } from '../../../jacdac-ts/src/jdom/service';\nimport ServiceList from '../../components/ServiceList';\nimport ConnectAlert from '../../components/alert/ConnectAlert'\nimport { useDbJSON, useDbUint8Array } from '../../components/useDb'\nimport Alert from \"../../components/ui/Alert\";\nimport { Button } from 'gatsby-theme-material-ui';\nimport { ModelRunnerClient } from '../../../jacdac-ts/src/jdom/modelrunner'\nimport RegisterInput from '../../components/RegisterInput';\nimport CircularProgressWithLabel from '../../components/ui/CircularProgressWithLabel'\nimport { SensorAggregatorClient, SensorAggregatorConfig } from '../../../jacdac-ts/src/jdom/sensoraggregatorclient';\nimport SensorAggregatorConfigView from '../../components/SensorAggregatorConfigView';\nimport ServiceManagerContext from '../../components/ServiceManagerContext'\nimport useChange from '../../jacdac/useChange';\nimport { IFile } from '../../../jacdac-ts/src/embed/protocol';\nimport { prettySize } from '../../../jacdac-ts/src/jdom/pretty';\nimport RegisterTrend from '../../components/RegisterTrend';\nimport { useRegisterIntValue, useRegisterStringValue } from '../../jacdac/useRegisterValue';\nimport useCall from '../../components/useCall';\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from '@material-ui/icons';\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n    const modelSize = useRegisterIntValue(service.register(ModelRunnerReg.ModelSize));\n    const lastError = useRegisterStringValue(service.register(ModelRunnerReg.LastError));\n\n    return <>\n        {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n        <Typography>model size: {modelSize === undefined ? \"...\" : prettySize(modelSize)}</Typography>\n        <RegisterInput register={service.register(ModelRunnerReg.AutoInvokeEvery)} />\n        <RegisterTrend showName register={service.register(ModelRunnerReg.Outputs)} mini={true} />\n    </>\n}\n\nexport function ModelActions(props: {\n    service: JDService,\n    model: Uint8Array,\n    sensorAggregatorService?: JDService,\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall();\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () => await callAsync(async (setProgress) => {\n        if (sensorAggregatorService && sensorInput) {\n            const aggregator = new SensorAggregatorClient(sensorAggregatorService)\n            await aggregator.setInputs(sensorInput)\n        }\n        if (service && model) {\n            const runner = new ModelRunnerClient(service)\n            await runner.deployModel(model, setProgress)\n        }\n    })\n\n    return <>\n        {!running && <Button disabled={modelDisabled} variant=\"contained\" color=\"primary\" onClick={handleDeployModel}>\n            {sensorInput ? \"Deploy model and configuration\" : \"Deploy model\"}\n        </Button>}\n        {running && <CircularProgressWithLabel value={progress * 100} />}\n        {alert}\n    </>\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } = useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setModel(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models());\n    const inputConfigurations = useChange(modelStore, _ => _?.inputConfigurations())\n\n    return <>\n        <h1>Model uploader</h1>\n        <p>\n            Upload Machine Learning Models (like TensorFlow Lite) into your <Link to=\"/services/model-runner/\">ML module runners</Link>.\n        </p>\n        <h3>Load a machine learning model</h3>\n        <p>Machine learning models are typically stored in a <code>.tflite</code> file.</p>\n        {model && <Alert severity={'success'}>Model loaded ({prettySize(model.byteLength)})</Alert>}\n        {model && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import model\"} onFilesUploaded={handleTfmodelFiles} /></Suspense>\n        <Button aria-label=\"clear model\" disabled={importing} onClick={handleClearModel}>clear model</Button>\n        {models?.length && <List>\n            {models.map(model => <ListItem key={model.path} button onClick={handleLoadModel(model)}>\n                <ListItemText primary={model.name} secondary={`${model.path} ${prettySize(model.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Configure sensors</h3>\n        <p>Sensor configuration files are stored in a <code>.jd.json</code> file.</p>\n        {sensorConfig && <Alert severity={'success'}>Sensor configuration loaded</Alert>}\n        {sensorConfig && <SensorAggregatorConfigView config={sensorConfig} />}\n        {sensorConfig && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import configuration\"} onFilesUploaded={handleSensorConfigFiles} /></Suspense>\n        <Button aria-label=\"clear configuration\" disabled={importing} onClick={handleClearConfiguration}>clear configuration</Button>\n        {inputConfigurations?.length && <List>\n            {inputConfigurations.map(iconfig => <ListItem key={iconfig.path} button onClick={handleLoadInputConfiguration(iconfig)}>\n                <ListItemText primary={iconfig.name} secondary={`${iconfig.path} ${prettySize(iconfig.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Deploy model to machine learning services</h3>\n        <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n        <ServiceList\n            serviceClass={SRV_MODEL_RUNNER}\n            content={service => <ModelContent service={service} />}\n            actions={service => <ModelActions\n                service={service}\n                model={model}\n                sensorAggregatorService={service?.device.services({ serviceClass: SRV_SENSOR_AGGREGATOR })?.[0]}\n                sensorInput={sensorConfig}\n            />}\n        />\n    </>\n}"],"sourceRoot":""}