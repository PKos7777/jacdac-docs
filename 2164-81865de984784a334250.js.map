{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/ArrowDownward.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/ArrowUpward.js","webpack://jacdac-docs/./src/components/dashboard/DashboardAzureIoTHub.tsx"],"names":["HORIZON","DashboardAzureIoTHub","props","service","connectId","useId","useState","cdMessages","setCDMessages","hubNameRegister","useRegister","AzureIotHubReg","deviceIdRegister","connectionStatusRegister","useRegisterUnpackedValue","hubName","deviceId","connectionStatus","connectedEvent","useEvent","AzureIotHubEvent","disconnectedEvent","messageEvent","useChange","refresh","useEffect","subscribe","EVENT","data","timestamp","lastDataTimestamp","jdunpack","body","prevMsgs","newMsgs","slice","unshift","connected","server","useServiceServer","color","useWidgetTheme","textPrimary","deviceToCloudMessages","_","handleConnect","sendCmdAsync","AzureIotHubCmd","handleSendCloudMessage","emitMessage","JSON","stringify","device","bus","message","handleSendDeviceMessage","jdpack","minWidth","map","m","join"],"mappings":"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","file":"2164-81865de984784a334250.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n}), 'ArrowDownward');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"\n}), 'ArrowUpward');\n\nexports.default = _default;","import React, { useEffect, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport AzureIoTHubServer, {\n    AzureIoTHubMessage,\n} from \"../../../jacdac-ts/src/servers/azureiothubserver\"\nimport { Grid, Switch, Typography } from \"@material-ui/core\"\nimport useRegister from \"../hooks/useRegister\"\nimport {\n    AzureIotHubCmd,\n    AzureIotHubEvent,\n    AzureIotHubReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { useId } from \"react-use-id-hook\"\nimport useEvent from \"../hooks/useEvent\"\nimport useChange from \"../../jacdac/useChange\"\nimport CmdButton from \"../CmdButton\"\nimport { jdpack, jdunpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\n\nconst HORIZON = 10\n\nexport default function DashboardAzureIoTHub(props: DashboardServiceProps) {\n    const { service } = props\n    const connectId = useId()\n\n    const [cdMessages, setCDMessages] = useState<AzureIoTHubMessage[]>([])\n\n    const hubNameRegister = useRegister(service, AzureIotHubReg.HubName)\n    const deviceIdRegister = useRegister(service, AzureIotHubReg.DeviceId)\n    const connectionStatusRegister = useRegister(\n        service,\n        AzureIotHubReg.ConnectionStatus\n    )\n\n    const [hubName] = useRegisterUnpackedValue<[string]>(hubNameRegister, props)\n    const [deviceId] = useRegisterUnpackedValue<[string]>(\n        deviceIdRegister,\n        props\n    )\n    const [connectionStatus] = useRegisterUnpackedValue<[string]>(\n        connectionStatusRegister,\n        props\n    )\n    const connectedEvent = useEvent(service, AzureIotHubEvent.Connected)\n    const disconnectedEvent = useEvent(service, AzureIotHubEvent.Disconnected)\n    const messageEvent = useEvent(service, AzureIotHubEvent.Message)\n\n    useChange(connectedEvent, () => connectionStatusRegister?.refresh())\n    useChange(disconnectedEvent, () => connectionStatusRegister?.refresh())\n\n    // sniff cloud-to-device events\n    useEffect(\n        () =>\n            messageEvent?.subscribe(EVENT, () => {\n                const { data, lastDataTimestamp: timestamp } = messageEvent\n                if (!data) return\n                const [body] = jdunpack<[string]>(messageEvent.data, \"s\")\n                setCDMessages(prevMsgs => {\n                    const newMsgs = prevMsgs.slice(0, HORIZON - 1)\n                    newMsgs.unshift({ timestamp, body })\n                    return newMsgs\n                })\n            }),\n        [messageEvent]\n    )\n\n    const connected = connectionStatus === \"ok\"\n    const server = useServiceServer<AzureIoTHubServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const deviceToCloudMessages = useChange(\n        server,\n        _ => _?.deviceToCloudMessages\n    )\n\n    const handleConnect = async () => {\n        await service.sendCmdAsync(\n            connected ? AzureIotHubCmd.Disconnect : AzureIotHubCmd.Connect\n        )\n    }\n    const handleSendCloudMessage = async () =>\n        server.emitMessage(\n            JSON.stringify({\n                timestamp: service.device.bus.timestamp,\n                message: \"hello from cloud\",\n            })\n        )\n    const handleSendDeviceMessage = async () => {\n        await service.sendCmdAsync(\n            AzureIotHubCmd.SendMessage,\n            jdpack<[string]>(\"s\", [\n                JSON.stringify({\n                    timestamp: service.device.bus.timestamp,\n                    message: \"hello from device\",\n                }),\n            ])\n        )\n    }\n\n    return (\n        <Grid\n            container\n            spacing={1}\n            style={{ color: textPrimary, minWidth: \"16rem\" }}\n        >\n            <Grid item xs={12}>\n                <Typography component=\"span\" variant=\"subtitle1\">\n                    hub: {hubName}, device: {deviceId}\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Switch\n                    checked={connected}\n                    aria-labelledby={connectId}\n                    onClick={handleConnect}\n                />\n                <label className=\".no-pointer-events\" id={connectId}>\n                    {connected ? \"connected\" : \"disconnected\"}{\" \"}\n                </label>\n                {server && (\n                    <CmdButton\n                        title=\"Send cloud to device message\"\n                        icon={<ArrowDownwardIcon />}\n                        onClick={handleSendCloudMessage}\n                        disabled={!connected}\n                    />\n                )}\n                <CmdButton\n                    title=\"Send device to cloud message\"\n                    icon={<ArrowUpwardIcon />}\n                    onClick={handleSendDeviceMessage}\n                    disabled={!connected}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"caption\">\n                    cloud to device messages\n                </Typography>\n                <pre>{cdMessages?.map(m => m.body).join(\"\\n\")}</pre>\n            </Grid>\n            {deviceToCloudMessages && (\n                <Grid item xs={12}>\n                    <Typography variant=\"caption\">\n                        device to cloud messages\n                    </Typography>\n                    <pre>\n                        {deviceToCloudMessages.map(m => m.body).join(\"\\n\")}\n                    </pre>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}