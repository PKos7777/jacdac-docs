{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardTrafficLight.tsx"],"names":["m","r","ri","w","h","cx","sw","TrafficLight","props","cy","fill","background","label","onDown","buttonProps","useSvgButtonProps","DashboardTrafficLight","service","services","variant","widgetRef","useRef","red","useRegisterBoolValue","register","TrafficLightReg","orange","green","lightRegs","lights","server","useServiceServer","color","useWidgetTheme","controlBackground","widgetSize","useWidgetSize","length","names","colors","navProps","useKeyboardNavigationProps","current","map","v","i","reg","sendSetBoolAsync"],"mappings":"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","file":"8847-b7b385d647b310d314c8.js","sourcesContent":["\nimport React, { useRef } from \"react\";\nimport { TrafficLightReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterBoolValue } from \"../../jacdac/useRegisterValue\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceServer from \"../hooks/useServiceServer\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\";\nimport TrafficLightServer from \"../../../jacdac-ts/src/servers/trafficlightserver\";\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\";\n\nconst m = 2;\nconst r = 8;\nconst ri = 7;\nconst w = 2 * r + 2 * m;\nconst h = 4 * w + 2 * m;\nconst cx = w / 2;\nconst sw = 2;\n\nfunction TrafficLight(props: { cx: number, cy: number, label: string, background: string, fill: string, onDown?: () => void }) {\n    const { cx, cy, fill, background, label, onDown } = props;\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(label, onDown);\n\n    return <>\n        <circle cx={cx} cy={cy} r={r} fill={background} stroke={\"none\"} />\n        <circle cx={cx} cy={cy} r={ri} fill={fill} strokeWidth={sw} {...buttonProps} />\n    </>;\n}\n\nexport default function DashboardTrafficLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const widgetRef = useRef<SVGGElement>();\n    const red = useRegisterBoolValue(service.register(TrafficLightReg.Red), props)\n    const orange = useRegisterBoolValue(service.register(TrafficLightReg.Orange), props)\n    const green = useRegisterBoolValue(service.register(TrafficLightReg.Green), props)\n\n    const lightRegs = [TrafficLightReg.Red, TrafficLightReg.Orange, TrafficLightReg.Green]\n    const lights = [red, orange, green]\n\n    const server = useServiceServer<TrafficLightServer>(service);\n    const color = server ? \"secondary\" : \"primary\";\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    let cy = 0;\n    const names = [\n        \"red\",\n        \"yellow\",\n        \"green\"\n    ]\n    const colors = [\n        \"red\",\n        \"orange\",\n        \"green\"\n    ]\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return <SvgWidget width={w} height={h} size={widgetSize}>\n        <g ref={widgetRef} {...navProps}>\n            <rect x={0} y={0} width={w} height={h} rx={m} fill={background} />\n            {lights.map((v, i) => {\n                cy += m + 2 * r;\n                const fill = v ? colors[i] : controlBackground;\n                const onDown = async () => {\n                    const reg = service.register(lightRegs[i]);\n                    await reg.sendSetBoolAsync(!v, true)\n                }\n                return <TrafficLight\n                    key={i} cx={cx} cy={cy}\n                    background={background}\n                    fill={fill}\n                    onDown={onDown}\n                    label={`${names[i]} ${v ? \"on\" : \"off\"}`} />\n            })}\n        </g>\n    </SvgWidget>;\n}"],"sourceRoot":""}