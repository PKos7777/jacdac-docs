{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/Add.js","webpack://jacdac-docs/./node_modules/core-js/internals/add-to-unscopables.js","webpack://jacdac-docs/./node_modules/core-js/internals/array-species-create.js","webpack://jacdac-docs/./node_modules/core-js/internals/flatten-into-array.js","webpack://jacdac-docs/./node_modules/core-js/internals/function-bind-context.js","webpack://jacdac-docs/./node_modules/core-js/internals/html.js","webpack://jacdac-docs/./node_modules/core-js/internals/is-array.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-create.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-define-properties.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-keys.js","webpack://jacdac-docs/./node_modules/core-js/internals/to-object.js","webpack://jacdac-docs/./node_modules/core-js/modules/es.array.flat-map.js","webpack://jacdac-docs/./node_modules/core-js/modules/es.array.unscopables.flat-map.js","webpack://jacdac-docs/./jacdac-ts/src/azure-iot/dtdl.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./src/components/hooks/toneContext.ts","webpack://jacdac-docs/./src/components/hooks/useServices.ts","webpack://jacdac-docs/./src/components/ui/PaperBox.tsx","webpack://jacdac-docs/./src/components/vm/useToolbox.ts","webpack://jacdac-docs/./src/components/vm/VMBlockEditor.tsx","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts","webpack://jacdac-docs/./src/components/vm/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/azureiothubdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/devicetwindsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/logicdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/shadowdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/loopsdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/DslContext.tsx","webpack://jacdac-docs/./src/components/vm/fields/JDomTreeField.tsx","webpack://jacdac-docs/./src/components/vm/fields/KeyboardKeyField.tsx","webpack://jacdac-docs/./src/components/vm/fields/LEDColorField.tsx","webpack://jacdac-docs/./src/components/vm/fields/ReactImageField.tsx","webpack://jacdac-docs/./src/components/vm/fields/LEDMatrixField.tsx","webpack://jacdac-docs/./src/components/vm/fields/NoServiceAlert.tsx","webpack://jacdac-docs/./src/components/vm/fields/NoteField.tsx","webpack://jacdac-docs/./src/components/vm/fields/PointerBoundary.tsx","webpack://jacdac-docs/./src/components/vm/fields/ReactInlineField.tsx","webpack://jacdac-docs/./src/components/vm/fields/SliderField.tsx","webpack://jacdac-docs/./src/components/vm/fields/ServoAngleField.tsx","webpack://jacdac-docs/./src/components/vm/fields/TwinField.tsx","webpack://jacdac-docs/./src/components/vm/fields/WatchValueField.tsx","webpack://jacdac-docs/./src/components/vm/fields/fields.ts","webpack://jacdac-docs/./src/components/widgets/svg.ts"],"names":["DTDL_REFERENCE_URL","DTDL_NAME","DTDL_CONTEXT","objectSchema","schemas","fields","arraySchema","schema","elementSchema","escapeName","name","trim","replace","test","toLowerCase","slice","escapeDisplayName","DTDLUnits","sort","VMFunctions","id","args","prompt","context","toIdentifier","type","toMemberExpression","root","field","object","property","computed","handlerVisitor","handler","visitITE","visitCommand","commands","forEach","visitBase","base","ite","else","then","compileProgram","prog","newProgram","roles","handlers","map","h","removeIfThenElse","errors","newSequence","labels","labelId","time","end","push","command","callee","arguments","expr","length","assert","pop","cmd","getServiceFromRole","info","role","shortId","find","pair","def","serviceSpecificationFromName","serviceShortId","service","checkProgram","allErrors","goodHandlers","errorFun","e","sourceId","undefined","message","symbolResolver","SpecSymbolResolver","checker","VMChecker","_","errorCount","c","checkCommand","registers","s","split","fld","register","events","event","VOLUME_GAIN","createToneContext","defaultVolume","console","log","ctx","window","AudioContext","webkitAudioContext","buffer","createBuffer","source","createBufferSource","connect","destination","start","volume","createGain","gain","value","setVolume","v","isNaN","playTone","frequency","duration","tone","createOscillator","stop","currentTime","debug","close","state","warn","useServices","options","useContext","JacdacContext","bus","services","useChange","b","JSON","stringify","PaperBox","props","children","padding","elevation","bgcolor","others","theme","useTheme","spacing","Blockly","highlighted","rendered","addSelect","removeSelect","loadBlocks","dsls","blocks","arrayConcatMany","dsl","createBlocks","registerFields","block","jacdacDefinition","init","jsonInit","patchCategoryJSONtoXML","cat","button","contents","unshift","filter","node","kind","exists","Flags","values","blockxml","Object","keys","join","useToolbox","program","liveServices","specification","DslContext","useMemo","dslsCategories","createCategory","l","r","order","toolboxConfiguration","newProjectXml","NEW_PROJET_XML","useToolboxButtons","workspace","useEffect","buttons","btn","registerButtonCallback","callbackKey","useStyles","makeStyles","createStyles","editor","height","fontFamily","typography","fontWeight","VMBlockEditor","className","onXmlChange","onJSONChange","onVMProgramChange","initialXml","serviceClass","runner","roleManager","workspaceRef","classes","DarkModeContext","darkMode","AppContext","setError","useState","setSource","setProgram","DarkTheme","Theme","gridColor","blocklyRef","useRef","useBlocklyWorkspace","ref","workspaceConfiguration","collapse","disable","comments","css","trashcan","sounds","grid","colour","snap","renderer","oneBasedIndex","move","scrollbars","vertical","horizontal","media","withPrefix","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","pinch","onImportXmlError","xml","current","ws","jacdacServices","WorkspaceServices","useBlocklyPlugins","useBlocklyEvents","isDragging","newSource","domToJSON","workspaceJSONToVMProgram","error","toMap","getAllBlocks","setWarningText","observer","ResizeObserver","resize","observe","disconnect","clsx","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","ADD","MULTIPLY","DIVIDE","MINUS","makeVMBase","processErrors","variables","BUILTIN_TYPES","EmptyExpression","Error","blockToExpression","ev","blockIn","blockToExpressionInner","inputs","raw","argument","child","op","operator","prefix","left","right","definition","resolveServiceBlockDefinition","d","dslName","res","compileExpressionToVM","template","makeWait","blockToCommand","WAIT_BLOCK","thenHandler","elseHandler","t","addCommands","exprErrors","ifThenElse","concat","serviceCommand","exprsErrors","a","p","flatMap","nop","top","topEvent","topErrors","compileEventToVM","expression","isBooleanField","isStringField","toBlocklyType","isNumericType","enumInfo","srv","enums","ignoredServices","SRV_CONTROL","SRV_LOGGER","SRV_ROLE_MANAGER","SRV_PROTO_TEST","SRV_SETTINGS","SRV_BOOTLOADER","ignoredEvents","SystemEvent","includedRegisters","SystemReg","customMessages","SRV_JOYSTICK","JoystickReg","get","commandColor","ServicesBlockDomainSpecificLanguage","supportedServices","createServiceColor","sensorColor","palette","success","main","otherColor","serviceColor","isSensor","customShadows","SRV_SERVO","identifier","ServoReg","shadow","ServoAngleField","SRV_BUZZER","BuzzerCmd","NoteField","lookupCustomShadow","cs","classIdentifier","serviceHelp","fieldsSupported","pkt","every","fieldName","reg","fieldToShadow","unit","defaultValue","min","typicalMin","absoluteMin","max","typicalMax","absoluteMax","variableName","humanify","camelName","fieldVariable","variable","variableTypes","defaultType","fieldsToFieldInputs","check","fieldsToValues","fieldsToMessage","i","isEnabledRegister","customMessage","m","allServices","serviceSpecifications","status","indexOf","resolveService","cls","packets","isRegister","lowLevel","isEvent","kv","isCommand","customBlockDefinitions","SRV_HID_KEYBOARD","message0","args0","KeyboardKeyField","inputsInline","previousStatement","CODE_STATEMENT_TYPE","nextStatement","tooltip","helpUrl","SRV_LED","color","LEDColorField","speed","SRV_SEVEN_SEGMENT_DISPLAY","digits","SRV_LED_MATRIX","LEDMatrixField","eventBlocks","registerChangeByEventBlocks","some","splitFilter","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimplesGetBlocks","output","description","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","registerEnumGetBlocks","members","member","registerNumericsGetBlocks","re","f","registerSetBlocks","commandBlocks","_serviceBlocks","_eventFieldBlocks","_runtimeBlocks","CONNECTION_BLOCK","CONNECTED_BLOCK","SET_STATUS_LIGHT_BLOCK","blockServices","usedEvents","Set","eventName","jdBlocks","uniqueMap","toolboxServices","srvid","localeCompare","servicesCategories","serviceBlocks","has","text","commonCategory","toString","eventInfo","servicesDSL","toolsDSL","TWIN_BLOCK","TwinField","INSPECT_BLOCK","JDomTreeField","WATCH_BLOCK","WatchValueField","AzureIoTHubBlockDomainSpecificLanguage","_blocks","PRIMITIVE_TYPES","azureIoTHubDSL","DEVICE_TWIN_SEND_TELEMETRY","DEVICE_TWIN_DEFINITION_BLOCK","DEVICE_TWIN_PROPERTY_BLOCK","DEVICE_TWIN_PROPERTY_TYPE","DEVICE_TWIN_VALUE_TYPE","deviceTwinContentType","deviceTwinCommonOptionType","deviceTwinPropertyOptionType","deviceTwinStatementType","deviceTwinCommonOptionStatementType","deviceTwinPropertyOptionStatementType","DeviceTwinBlockDomainSpecificLanguage","deviceTwinDSL","mathDSL","style","extensions","A","B","NUM","logicDsl","BOOL","variablesDsl","custom","builtins","jacdac_on_off","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","fieldShadows","precision","colourOptions","columns","blockToValue","loopsDsl","REPEAT_EVERY_BLOCK","interval","createContext","displayName","DslProvider","JDomServiceTreeView","lazy","JDomTreeWidget","WorkspaceContext","roleService","flyout","onPointerStopPropagation","stopPropagation","minWidth","cursor","fromJson","renderInlineField","ReactInlineField","KEY","EDITABLE","KeyboardKeyInput","getText_","selector","modifiers","renderKeyboardKey","renderField","handleChange","newSelector","newModifiers","ReactField","LEDWidget","LEDColorFieldWidget","ValueContext","onValueChange","width","initCustomView","size_","fieldGroup_","cx","cy","strokeWidth","stroke","updateView","rgbToHtmlColor","circle","view","setAttribute","SHADOW","toShadowDefinition","ReactImageField","setSize","img","imgUri","renderValue","setAttributeNS","getText","alt","LEDMatrixWidget","on","VALUE_CHANGE","rows","leds","columnspadded","ledsBytes","fromHex","cvs","document","createElement","pw","ph","w","getContext","fillStyle","fillRect","x","y","bitindex","byte","bit","dataUri","toDataURL","onChange","newLeds","toHex","Uint8Array","NoServiceAlert","roleServiceShortId","spec","handleStartSimulator","startServiceProviderFromServiceClass","PianoWidget","UNMOUNT","toneContext","handlePlayTone","newFrequency","PointerBoundary","createContainer","display","fo","container","appendChild","resizeObserver","entries","entry","contentRect","forceRerender","ReactDOM","renderBlock","dispose","bindEvents_","getClickTarget_","FieldWithSlider","nv","newValue","Math","round","SliderField","renderWidget","ServoWidget","ServiceFieldWidget","TwinWidget","WatchValueWidget","lookupWatch","setValue","subscribe","VM_EVENT","code","watchSourceId","VMCode","valueNumber","step","ceil","abs","log10","roundWithPrecision","background","paper","primary","reactFieldShadows","registerType","fieldType","key","fieldTypes","mkTitle","txt","elt","textContent","title","el","hydrate","k","createElementNS","parent"],"mappings":"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","file":"f46badf6a1e485aca95f38418db0645a3911806b-d90bee777300472480f3.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject -- old IE */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar aFunction = require('../internals/a-function');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flatMap` method\n// https://tc39.es/ecma262/#sec-array.prototype.flatmap\n$({ target: 'Array', proto: true }, {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A;\n    aFunction(callbackfn);\n    A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return A;\n  }\n});\n","// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flatMap');\n","/***\n *  DTDL specification: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md.\n */\nexport const DTDL_REFERENCE_URL =\n    \"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\"\nexport const DTDL_NAME = \"Digital Twins Definition Language\"\nexport const DTDL_CONTEXT = \"dtmi:dtdl:context;2\"\n\n// warps fields into an object\nexport function objectSchema(schemas: DTDLSchema[]): DTDLSchema {\n    return {\n        \"@type\": \"Object\",\n        fields: schemas,\n    }\n}\n\n// wraps a schema into an array\nexport function arraySchema(schema: string | DTDLSchema): DTDLSchema {\n    return {\n        \"@type\": \"Array\",\n        elementSchema: schema,\n    }\n}\n\nexport interface DTDLNode {\n    \"@type\"?: string\n    \"@id\"?: string\n    // 1-64 characters\n    // ^[a-zA-Z](?:[a-zA-Z0-9_]*[a-zA-Z0-9])?$\n    name?: string\n    displayName?: string\n    description?: string\n}\n\nexport interface DTDLSchema extends DTDLNode {\n    fields?: DTDLSchema[]\n    schema?: string | DTDLSchema\n    elementSchema?: string | DTDLSchema\n}\n\nexport interface DTDLContent extends DTDLNode {\n    \"@type\": \"Property\" | \"Command\" | \"Component\" | \"Interface\"\n    unit?: string\n    schema?: string | DTDLSchema\n}\n\nexport interface DTDLInterface extends DTDLContent {\n    contents: DTDLContent[]\n    extends?: string | string[]\n    schemas?: (DTDLSchema | DTDLInterface)[]\n    \"@context\"?: string\n}\n\nexport function escapeName(name: string) {\n    name = name.trim().replace(/[^a-zA-Z0-9_]/g, \"_\")\n    if (!/^[a-zA-Z]/.test(name)) name = \"a\" + name\n    name = name[0].toLowerCase() + name.slice(1)\n    return name.slice(0, 64)\n}\n\nexport function escapeDisplayName(name: string) {\n    return name.slice(0, 64)\n}\n\nexport function DTDLUnits() {\n    return [\n        \"metrePerSecondSquared\",\n        \"centimetrePerSecondSquared\",\n        \"gForce\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"radianPerSecondSquared\",\n        \"radianPerSecond\",\n        \"degreePerSecond\",\n        \"revolutionPerSecond\",\n        \"revolutionPerMinute\",\n        \"squareMetre\",\n        \"squareCentimetre\",\n        \"squareMillimetre\",\n        \"squareKilometre\",\n        \"hectare\",\n        \"squareFoot\",\n        \"squareInch\",\n        \"acre\",\n        \"farad\",\n        \"millifarad\",\n        \"microfarad\",\n        \"nanofarad\",\n        \"picofarad\",\n        \"ampere\",\n        \"microampere\",\n        \"milliampere\",\n        \"bitPerSecond\",\n        \"kibibitPerSecond\",\n        \"mebibitPerSecond\",\n        \"gibibitPerSecond\",\n        \"tebibitPerSecond\",\n        \"exbibitPerSecond\",\n        \"zebibitPerSecond\",\n        \"yobibitPerSecond\",\n        \"bytePerSecond\",\n        \"kibibytePerSecond\",\n        \"mebibytePerSecond\",\n        \"gibibytePerSecond\",\n        \"tebibytePerSecond\",\n        \"exbibytePerSecond\",\n        \"zebibytePerSecond\",\n        \"yobibytePerSecond\",\n        \"bit\",\n        \"kibibit\",\n        \"mebibit\",\n        \"gibibit\",\n        \"tebibit\",\n        \"exbibit\",\n        \"zebibit\",\n        \"yobibit\",\n        \"byte\",\n        \"kibibyte\",\n        \"mebibyte\",\n        \"gibibyte\",\n        \"tebibyte\",\n        \"exbibyte\",\n        \"zebibyte\",\n        \"yobibyte\",\n        \"kilogramPerCubicMetre\",\n        \"gramPerCubicMetre\",\n        \"metre\",\n        \"centimetre\",\n        \"millimetre\",\n        \"micrometre\",\n        \"nanometre\",\n        \"kilometre\",\n        \"foot\",\n        \"inch\",\n        \"mile\",\n        \"nauticalMile\",\n        \"astronomicalUnit\",\n        \"coulomb\",\n        \"joule\",\n        \"kilojoule\",\n        \"megajoule\",\n        \"gigajoule\",\n        \"electronvolt\",\n        \"megaelectronvolt\",\n        \"kilowattHour\",\n        \"newton\",\n        \"pound\",\n        \"ounce\",\n        \"ton\",\n        \"hertz\",\n        \"kilohertz\",\n        \"megahertz\",\n        \"gigahertz\",\n        \"kilogramPerCubicMetre\",\n        \"gramPerCubicMetre\",\n        \"lux\",\n        \"footcandle\",\n        \"henry\",\n        \"millihenry\",\n        \"microhenry\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"metre\",\n        \"centimetre\",\n        \"millimetre\",\n        \"micrometre\",\n        \"nanometre\",\n        \"kilometre\",\n        \"foot\",\n        \"inch\",\n        \"mile\",\n        \"nauticalMile\",\n        \"astronomicalUnit\",\n        \"candelaPerSquareMetre\",\n        \"watt\",\n        \"microwatt\",\n        \"milliwatt\",\n        \"kilowatt\",\n        \"megawatt\",\n        \"gigawatt\",\n        \"horsepower\",\n        \"kilowattHourPerYear\",\n        \"lumen\",\n        \"candela\",\n        \"weber\",\n        \"maxwell\",\n        \"tesla\",\n        \"kilogram\",\n        \"gram\",\n        \"milligram\",\n        \"microgram\",\n        \"tonne\",\n        \"slug\",\n        \"gramPerSecond\",\n        \"kilogramPerSecond\",\n        \"gramPerHour\",\n        \"kilogramPerHour\",\n        \"watt\",\n        \"microwatt\",\n        \"milliwatt\",\n        \"kilowatt\",\n        \"megawatt\",\n        \"gigawatt\",\n        \"horsepower\",\n        \"kilowattHourPerYear\",\n        \"pascal\",\n        \"kilopascal\",\n        \"bar\",\n        \"millibar\",\n        \"millimetresOfMercury\",\n        \"poundPerSquareInch\",\n        \"inchesOfMercury\",\n        \"inchesOfWater\",\n        \"unity percent\",\n        \"ohm\",\n        \"milliohm\",\n        \"kiloohm\",\n        \"megaohm\",\n        \"decibel\",\n        \"bel\",\n        \"kelvin\",\n        \"degreeCelsius\",\n        \"degreeFahrenheit\",\n        \"newton\",\n        \"pound\",\n        \"ounce\",\n        \"ton\",\n        \"second\",\n        \"millisecond\",\n        \"microsecond\",\n        \"nanosecond\",\n        \"minute\",\n        \"hour\",\n        \"day\",\n        \"year\",\n        \"newtonMetre\",\n        \"metrePerSecond\",\n        \"centimetrePerSecond\",\n        \"kilometrePerSecond\",\n        \"metrePerHour\",\n        \"kilometrePerHour\",\n        \"milePerHour\",\n        \"milePerSecond\",\n        \"knot\",\n        \"volt\",\n        \"millivolt\",\n        \"microvolt\",\n        \"kilovolt\",\n        \"megavolt\",\n        \"cubicMetre\",\n        \"cubicCentimetre\",\n        \"litre\",\n        \"millilitre\",\n        \"cubicFoot\",\n        \"cubicInch\",\n        \"fluidOunce\",\n        \"gallon\",\n        \"litrePerSecond\",\n        \"millilitrePerSecond\",\n        \"litrePerHour\",\n        \"millilitrePerHour\",\n    ].sort()\n}\n","export interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n}\n\nexport interface VMRole {\n    role: string\n    serviceShortId: string\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"awaitEvent\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitCondition\"\n    | \"wait\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"halt\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"watch\"\n\nexport const VMFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import { serviceSpecificationFromName } from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions\n} from \"./ir\"\nimport {\n    VMChecker,\n    SpecSymbolResolver,\n} from \"../../jacdac-spec/spectool/jdutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram(prog: VMProgram) {\n    const newProgram: VMProgram = { roles: prog.roles.slice(0), handlers: [] }\n    newProgram.handlers = prog.handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    const shortId = info.roles.find(pair => pair.role === role)\n    if (shortId) {\n        // must succeed\n        const def = serviceSpecificationFromName(shortId.serviceShortId)\n        assert(!!def, `service ${shortId.serviceShortId} not resolved`)\n        return def\n    } else {\n        const service = serviceSpecificationFromName(role)\n        return service\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","const VOLUME_GAIN = 0.4\n\nexport interface ToneContext {\n    close: () => void\n    playTone: (frequency: number, duration: number) => void\n    setVolume: (vol: number) => void\n}\n\nexport function createToneContext(defaultVolume?: number): ToneContext {\n    try {\n        console.log(`create tone context`)\n        const ctx = new (window.AudioContext ||\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (window as any).webkitAudioContext)()\n\n        // play silence sound within onlick to unlock it\n        const buffer = ctx.createBuffer(1, 1, 22050)\n        const source = ctx.createBufferSource()\n        source.buffer = buffer\n        source.connect(ctx.destination)\n        source.start()\n\n        // output node with volume\n        const volume = ctx.createGain()\n        volume.connect(ctx.destination)\n        volume.gain.value =\n            (defaultVolume !== undefined ? defaultVolume : 0.2) * VOLUME_GAIN\n\n        const setVolume = (v: number) => {\n            if (volume && !isNaN(v)) {\n                volume.gain.value = v * VOLUME_GAIN\n            }\n        }\n\n        const playTone = (frequency: number, duration: number) => {\n            try {\n                const tone = ctx.createOscillator()\n                tone.type = \"sawtooth\"\n                tone.connect(volume)\n                tone.frequency.value = frequency // update frequency\n                tone.start() // start and stop\n                tone.stop(ctx.currentTime + duration / 1000)\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n\n        const close = () => {\n            try {\n                if (ctx.state === \"running\") ctx.close()\n            } catch (e) {\n                console.warn(e)\n            }\n        }\n\n        console.log(`tone context created`)\n\n        return {\n            setVolume,\n            playTone,\n            close,\n        }\n    } catch (e) {\n        return undefined\n    }\n}\n","import { useContext } from \"react\";\nimport { DeviceFilter, ServiceFilter } from \"../../../jacdac-ts/src/jdom/bus\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useChange from '../../jacdac/useChange';\n\nexport default function useServices(options?: ServiceFilter & DeviceFilter) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, b => b.services(options), [\n        JSON.stringify(options),\n    ])\n    return services\n}","import { Box, BoxProps, Paper, PaperProps, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default function PaperBox(props: { padding?: number; elevation?: number; bgcolor?: string } & BoxProps) {\n    const { children, padding, elevation, bgcolor, ...others } = props;\n    const theme = useTheme();\n\n    return <Box {...others} bgcolor={bgcolor} mb={theme.spacing(0.25)}>\n        <Paper square elevation={elevation}>\n            {padding !== 0 && <Box p={theme.spacing(padding || 0.25)}>\n                {children}\n            </Box>}\n            {padding === 0 && children}\n        </Paper>\n    </Box>\n}","import Blockly from \"blockly\"\nimport { useContext, useEffect, useMemo } from \"react\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../hooks/useServices\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { Theme, useTheme } from \"@material-ui/core\"\nimport { registerFields } from \"./fields/fields\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    NEW_PROJET_XML,\n    ServiceBlockDefinitionFactory,\n    ToolboxConfiguration,\n} from \"./toolbox\"\nimport { WorkspaceJSON } from \"./jsongenerator\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport DslContext from \"./dsl/DslContext\"\nimport BlockDomainSpecificLanguage from \"./dsl/dsl\"\n\n// overrides blockly emboss filter for svg elements\nBlockly.BlockSvg.prototype.setHighlighted = function (highlighted) {\n    if (!this.rendered) {\n        return\n    }\n    if (highlighted) {\n        this.addSelect()\n    } else {\n        this.removeSelect()\n    }\n}\n\ntype CachedBlockDefinitions = {\n    blocks: BlockDefinition[]\n}\n\nfunction loadBlocks(\n    dsls: BlockDomainSpecificLanguage[],\n    theme: Theme\n): CachedBlockDefinitions {\n    const blocks = arrayConcatMany(\n        dsls.map(dsl =>\n            dsl?.createBlocks?.({ theme }).map(b => {\n                b.dsl = dsl.id // ensure DSL is set\n                return b\n            })\n        )\n    )\n    console.log(`blocks`, { blocks })\n\n    // register field editors\n    registerFields()\n    // re-register blocks with blocklys\n    blocks.forEach(\n        block =>\n            (Blockly.Blocks[block.type] = <ServiceBlockDefinitionFactory>{\n                jacdacDefinition: block,\n                init: function () {\n                    this.jsonInit(block)\n                },\n            })\n    )\n\n    return {\n        blocks,\n    }\n}\n\nfunction patchCategoryJSONtoXML(cat: CategoryDefinition): CategoryDefinition {\n    if (cat.button) {\n        if (!cat.contents) cat.contents = []\n        cat.contents.unshift(cat.button)\n    }\n    cat.contents\n        ?.filter(node => node.kind === \"block\")\n        .map(node => <BlockReference>node)\n        .filter(block => {\n            const exists = Blockly.Blocks[block.type]\n            if (!exists && Flags.diagnostics)\n                console.warn(\n                    `block type '${block.type}' not found, consider refreshing page...`\n                )\n            return !!block.values && exists\n        }) // avoid broken blocks\n        .forEach(block => {\n            // yup, this suck but we have to go through it\n            block.blockxml = `<block type=\"${block.type}\">${Object.keys(\n                block.values\n            )\n                .map(name => {\n                    const { type } = block.values[name]\n                    return `<value name=\"${name}\"><shadow type=\"${type}\" /></value>`\n                })\n                .join(\"\\n\")}</block>`\n            delete block.type\n        })\n    return cat\n}\n\nexport default function useToolbox(props: {\n    blockServices?: string[]\n    source?: WorkspaceJSON\n    program?: VMProgram\n}): {\n    toolboxConfiguration: ToolboxConfiguration\n    newProjectXml: string\n} {\n    const { source, program } = props\n    const liveServices = useServices({ specification: true })\n\n    const { dsls } = useContext(DslContext)\n    const theme = useTheme()\n    useMemo(() => loadBlocks(dsls, theme), [theme, dsls])\n\n    const dslsCategories = arrayConcatMany(\n        dsls.map(dsl =>\n            dsl?.createCategory?.({ theme, source, program, liveServices })\n        )\n    )\n        .filter(cat => !!cat)\n        .sort((l, r) => -(l.order - r.order))\n\n    const toolboxConfiguration: ToolboxConfiguration = {\n        kind: \"categoryToolbox\",\n        contents: dslsCategories\n            .filter(cat => !!cat)\n            .map(node =>\n                node.kind === \"category\"\n                    ? patchCategoryJSONtoXML(node as CategoryDefinition)\n                    : node\n            ),\n    }\n\n    return {\n        toolboxConfiguration,\n        newProjectXml: NEW_PROJET_XML,\n    }\n}\n\nexport function useToolboxButtons(\n    workspace: Blockly.WorkspaceSvg,\n    toolboxConfiguration: ToolboxConfiguration\n) {\n    // track workspace changes and update callbacks\n    useEffect(() => {\n        if (!workspace) return\n\n        // collect buttons\n        const buttons: ButtonDefinition[] = toolboxConfiguration?.contents\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(cat => (cat as CategoryDefinition).button)\n            .filter(btn => !!btn)\n        buttons?.forEach(button =>\n            workspace.registerButtonCallback(button.callbackKey, () =>\n                Blockly.Variables.createVariableButtonHandler(\n                    workspace,\n                    null,\n                    button.service.shortId\n                )\n            )\n        )\n    }, [workspace, JSON.stringify(toolboxConfiguration)])\n}\n","import React, {\n    MutableRefObject,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport { useBlocklyWorkspace } from \"react-blockly\"\nimport { WorkspaceSvg } from \"blockly\"\nimport Theme from \"@blockly/theme-modern\"\nimport DarkTheme from \"@blockly/theme-dark\"\nimport useToolbox, { useToolboxButtons } from \"./useToolbox\"\nimport BlocklyModalDialogs from \"./BlocklyModalDialogs\"\nimport { domToJSON, WorkspaceJSON } from \"./jsongenerator\"\nimport DarkModeContext from \"../ui/DarkModeContext\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport AppContext from \"../AppContext\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport clsx from \"clsx\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport useBlocklyEvents from \"./useBlocklyEvents\"\nimport useBlocklyPlugins from \"./useBlocklyPlugins\"\nimport {\n    BlocklyWorkspaceWithServices,\n    WorkspaceServices,\n} from \"./WorkspaceContext\"\nimport RoleManager from \"../../../jacdac-ts/src/servers/rolemanager\"\nimport { arrayConcatMany, toMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { withPrefix } from \"gatsby\"\nimport DslContext from \"./dsl/DslContext\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        editor: {\n            height: \"calc(100vh - 10rem)\",\n            \"& .blocklyTreeLabel\": {\n                fontFamily: theme.typography.fontFamily,\n            },\n            \"& .blocklyText\": {\n                fontWeight: `normal !important`,\n                fontFamily: `${theme.typography.fontFamily} !important`,\n            },\n        },\n    })\n)\n\nexport default function VMBlockEditor(props: {\n    className?: string\n    initialXml?: string\n    onXmlChange?: (xml: string) => void\n    onJSONChange?: (json: WorkspaceJSON) => void\n    onVMProgramChange?: (program: VMProgram) => void\n    runner?: VMProgramRunner\n    roleManager?: RoleManager\n    serviceClass?: number\n    workspaceRef?: MutableRefObject<WorkspaceSvg>\n}) {\n    const {\n        className,\n        onXmlChange,\n        onJSONChange,\n        onVMProgramChange,\n        initialXml,\n        serviceClass,\n        runner,\n        roleManager,\n        workspaceRef,\n    } = props\n    const { dsls } = useContext(DslContext)\n    const classes = useStyles()\n    const { darkMode } = useContext(DarkModeContext)\n    const { setError } = useContext(AppContext)\n    const [source, setSource] = useState<WorkspaceJSON>()\n    const [program, setProgram] = useState<VMProgram>()\n    const { toolboxConfiguration, newProjectXml } = useToolbox({\n        serviceClass,\n        source,\n        program,\n    })\n    const theme = darkMode === \"dark\" ? DarkTheme : Theme\n    const gridColor = darkMode === \"dark\" ? \"#555\" : \"#ccc\"\n\n    // ReactBlockly\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const blocklyRef = useRef(null)\n    const { workspace, xml } = useBlocklyWorkspace({\n        ref: blocklyRef,\n        toolboxConfiguration,\n        workspaceConfiguration: {\n            collapse: false,\n            disable: false,\n            comments: false,\n            css: true,\n            trashcan: false,\n            sounds: false,\n            grid: {\n                spacing: 25,\n                length: 1,\n                colour: gridColor,\n                snap: true,\n            },\n            renderer: \"zelos\",\n            theme,\n            oneBasedIndex: false,\n            move: {\n                scrollbars: {\n                    vertical: true,\n                    horizontal: true,\n                },\n            },\n            media: withPrefix(\"blockly/media/\"),\n            zoom: {\n                controls: true,\n                wheel: true,\n                startScale: 1.0,\n                maxScale: 3,\n                minScale: 0.1,\n                scaleSpeed: 1.2,\n                pinch: true,\n            },\n        },\n        initialXml: initialXml || newProjectXml,\n        onImportXmlError: () => setError(\"Error loading blocks...\"),\n    }) as { workspace: WorkspaceSvg; xml: string }\n\n    // store ref\n    useEffect(() => {\n        if (workspaceRef) {\n            workspaceRef.current = workspace\n            return () => (workspaceRef.current = undefined)\n        }\n    }, [workspace, workspaceRef])\n\n    // surface state to react\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        if (ws) ws.jacdacServices = new WorkspaceServices()\n    }, [workspace])\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        const services = ws?.jacdacServices\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        const services = ws?.jacdacServices\n        if (services) {\n            services.roleManager = roleManager\n        }\n    }, [workspace, roleManager])\n\n    // plugins\n    useBlocklyPlugins(workspace)\n    useBlocklyEvents(workspace)\n    useToolboxButtons(workspace, toolboxConfiguration)\n\n    // blockly did a change\n    useEffect(() => {\n        if (!workspace || workspace.isDragging()) return\n\n        onXmlChange?.(xml)\n\n        // save json\n        if (onJSONChange || onVMProgramChange) {\n            // emit json\n            const newSource = domToJSON(workspace, dsls)\n            if (JSON.stringify(newSource) !== JSON.stringify(source)) {\n                setSource(newSource)\n                onJSONChange?.(newSource)\n                if (onVMProgramChange) {\n                    try {\n                        const newProgram = workspaceJSONToVMProgram(\n                            newSource,\n                            dsls\n                        )\n                        if (\n                            JSON.stringify(newProgram) !==\n                            JSON.stringify(program)\n                        ) {\n                            setProgram(newProgram)\n                            onVMProgramChange(newProgram)\n                        }\n                    } catch (e) {\n                        console.error(e)\n                        onVMProgramChange(undefined)\n                    }\n                }\n            }\n        }\n    }, [dsls, workspace, xml])\n\n    // apply errors\n    useEffect(() => {\n        if (!workspace) return\n        const allErrors = toMap(\n            arrayConcatMany(\n                program?.handlers.map(h => h.errors?.filter(e => !!e.sourceId))\n            ) || [],\n            e => e.sourceId,\n            e => e.message\n        )\n        workspace\n            .getAllBlocks(false)\n            .forEach(b => b.setWarningText(allErrors[b.id] || null))\n    }, [workspace, program])\n\n    // resize blockly\n    useEffect(() => {\n        const observer = new ResizeObserver(() => workspace?.resize())\n        observer.observe(blocklyRef.current)\n        return () => observer.disconnect()\n    }, [workspace, blocklyRef.current])\n\n    return (\n        <>\n            <div className={clsx(classes.editor, className)} ref={blocklyRef} />\n            <BlocklyModalDialogs />\n        </>\n    )\n}\n","import { BlockJSON, WorkspaceJSON } from \"./jsongenerator\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n    VMCommand,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    toMemberExpression,\n    toIdentifier,\n    RoleEvent,\n} from \"../../../jacdac-ts/src/vm/compile\"\n\nimport { assert } from \"../../../jacdac-ts/src/jdom/utils\"\nimport {\n    BUILTIN_TYPES,\n    CommandBlockDefinition,\n    EventFieldDefinition,\n    RegisterBlockDefinition,\n    resolveServiceBlockDefinition,\n    WAIT_BLOCK,\n} from \"./toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage from \"./dsl/dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    console.debug(`compile vm`, { workspace, dsls })\n\n    const roles: VMRole[] = workspace.variables\n        .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n        .map(v => ({ role: v.name, serviceShortId: v.type }))\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            switch (type) {\n                case \"math_single\": // built-in blockly\n                case \"jacdac_math_single\": {\n                    const argument = blockToExpressionInner(ev, inputs[0].child)\n                    const op = inputs[0].fields[\"op\"].value as string\n                    return <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO:?\n                    }\n                }\n                case \"math_arithmetic\": // built-in blockly\n                case \"jacdac_math_arithmetic\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                case \"logic_operation\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.LogicalExpression>{\n                        type: \"LogicalExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                case \"logic_negate\": {\n                    const argument = blockToExpressionInner(ev, inputs[0].child)\n                    return <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO:?\n                    }\n                }\n                case \"logic_compare\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                default: {\n                    const definition = resolveServiceBlockDefinition(type)\n                    if (!definition) {\n                        console.warn(`unknown block ${type}`, {\n                            type,\n                            ev,\n                            block,\n                            d: Blockly.Blocks[type],\n                        })\n                    } else {\n                        // try any DSL\n                        const { dsl: dslName } = definition\n                        const dsl = dsls.find(d => d.id === dslName)\n                        const res = dsl?.compileExpressionToVM({\n                            event: ev,\n                            definition,\n                            block,\n                            blockToExpressionInner,\n                        })\n                        if (res) {\n                            if (res.errors)\n                                res.errors.forEach(e => errors.push(e))\n                            return res.expr\n                        }\n\n                        // try built-in\n                        const { template } = definition\n                        switch (template) {\n                            case \"shadow\": {\n                                const field = inputs[0].fields[\"value\"]\n                                const { value } = field\n                                return <jsep.Literal>{\n                                    type: \"Literal\",\n                                    value: value,\n                                    raw: value + \"\",\n                                }\n                            }\n                            default: {\n                                console.warn(\n                                    `unsupported block template ${template} for ${type}`,\n                                    { ev, block }\n                                )\n                                break\n                            }\n                        }\n                        break\n                    }\n                }\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    type CmdWithErrors = {\n        cmd: VMBase\n        errors: VMError[]\n    }\n\n    const makeWait = (event: RoleEvent, block: BlockJSON) => {\n        const { inputs } = block\n        {\n            const { expr: time, errors } = blockToExpression(\n                event,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [time],\n                    callee: toIdentifier(\"wait\"),\n                }),\n                errors: processErrors(block, errors),\n            }\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case WAIT_BLOCK:\n                return makeWait(event, block)\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const def = resolveServiceBlockDefinition(type)\n                if (def) {\n                    const { template } = def\n                    switch (template) {\n                        case \"register_set\": {\n                            const { register } = def as RegisterBlockDefinition\n                            const { expr, errors } = blockToExpression(\n                                event,\n                                inputs[0].child\n                            )\n                            const { value: role } = inputs[0].fields.role\n                            return {\n                                cmd: makeVMBase(block, {\n                                    type: \"CallExpression\",\n                                    arguments: [\n                                        toMemberExpression(\n                                            role as string,\n                                            register.name\n                                        ),\n                                        expr,\n                                    ],\n                                    callee: toIdentifier(\"writeRegister\"),\n                                }),\n                                errors: processErrors(block, errors),\n                            }\n                        }\n                        case \"command\": {\n                            const { command: serviceCommand } =\n                                def as CommandBlockDefinition\n                            const { value: role } = inputs[0].fields.role\n                            const exprsErrors = inputs.map(a =>\n                                blockToExpression(event, a.child)\n                            )\n                            return {\n                                cmd: makeVMBase(block, {\n                                    type: \"CallExpression\",\n                                    arguments: exprsErrors.map(p => p.expr),\n                                    callee: toMemberExpression(\n                                        role as string,\n                                        serviceCommand.name\n                                    ),\n                                }),\n                                errors: processErrors(\n                                    block,\n                                    exprsErrors.flatMap(p => p.errors)\n                                ),\n                            }\n                        }\n                        default: {\n                            console.warn(\n                                `unsupported block template ${template} for ${type}`,\n                                { block }\n                            )\n                            return {\n                                cmd: undefined,\n                                errors: [],\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks?.forEach(child => {\n            if (child) {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child)\n                    if (cmd) handler.commands.push(cmd)\n                    errors.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    }\n                }\n            }\n        })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            const definition = resolveServiceBlockDefinition(type)\n            assert(!!definition)\n            const { template, dsl: dslName } = definition\n            const dsl = dslName && dsls?.find(d => d.id === dslName)\n\n            try {\n                const { expression, errors, event } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n\n                // if dsl didn't compile anything try again\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            console.warn(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        handlers,\n    }\n}\n","import { Theme } from \"@material-ui/core\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_HID_KEYBOARD,\n    SRV_JOYSTICK,\n    SRV_LED,\n    SRV_LED_MATRIX,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SRV_SETTINGS,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n    SystemEvent,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isCommand,\n    isEvent,\n    isRegister,\n    isSensor,\n    serviceSpecifications,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CONNECTED_BLOCK,\n    CONNECTION_BLOCK,\n    CustomBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveServiceBlockDefinition,\n    SeparatorDefinition,\n    ServiceBlockDefinition,\n    SET_STATUS_LIGHT_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors } from \"../VMgenerator\"\nimport BlockDomainSpecificLanguage, {\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return isBooleanField(field)\n        ? \"Boolean\"\n        : isStringField(field)\n        ? \"String\"\n        : isNumericType(field)\n        ? \"Number\"\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_SETTINGS,\n    SRV_BOOTLOADER,\n]\nconst ignoredEvents = [SystemEvent.StatusCodeChanged]\nconst includedRegisters = [\n    SystemReg.Reading,\n    SystemReg.Value,\n    SystemReg.Intensity,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n    private _serviceBlocks: ServiceBlockDefinition[]\n    private _eventFieldBlocks: EventFieldDefinition[]\n    private _runtimeBlocks: BlockDefinition[]\n\n    private createServiceColor(theme: Theme) {\n        const sensorColor = theme.palette.success.main\n        const otherColor = theme.palette.info.main\n        const serviceColor = (srv: jdspec.ServiceSpec) =>\n            isSensor(srv) ? sensorColor : otherColor\n        return serviceColor\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        const serviceColor = this.createServiceColor(theme)\n        // blocks\n        const customShadows = [\n            {\n                serviceClass: SRV_SERVO,\n                kind: \"rw\",\n                identifier: ServoReg.Angle,\n                field: \"_\",\n                shadow: <BlockDefinition>{\n                    kind: \"block\",\n                    type: ServoAngleField.SHADOW.type,\n                },\n            },\n            {\n                serviceClass: SRV_BUZZER,\n                kind: \"command\",\n                identifier: BuzzerCmd.PlayNote,\n                field: \"frequency\",\n                shadow: <BlockDefinition>{\n                    kind: \"block\",\n                    type: NoteField.SHADOW.type,\n                },\n            },\n        ]\n        const lookupCustomShadow = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) =>\n            customShadows.find(\n                cs =>\n                    cs.serviceClass === service.classIdentifier &&\n                    cs.kind == info.kind &&\n                    cs.identifier === info.identifier &&\n                    cs.field == field.name\n            )?.shadow\n\n        const serviceHelp = (service: jdspec.ServiceSpec) =>\n            withPrefix(`/services/${service.shortId}`)\n        const fieldsSupported = (pkt: jdspec.PacketInfo) =>\n            pkt.fields.every(toBlocklyType)\n        const fieldName = (\n            reg: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) => (field.name === \"_\" ? reg.name : field.name)\n        const fieldToShadow = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ): BlockReference =>\n            lookupCustomShadow(service, info, field) ||\n            (isBooleanField(field)\n                ? { kind: \"block\", type: \"jacdac_on_off\" }\n                : isStringField(field)\n                ? { kind: \"block\", type: \"text\" }\n                : field.unit === \"°\"\n                ? {\n                      kind: \"block\",\n                      type: \"jacdac_angle\",\n                  }\n                : field.unit === \"/\"\n                ? { kind: \"block\", type: \"jacdac_ratio\" }\n                : /^%/.test(field.unit)\n                ? { kind: \"block\", type: \"jacdac_percent\" }\n                : field.type === \"u8\"\n                ? { kind: \"block\", type: \"jacdac_byte\" }\n                : {\n                      kind: \"block\",\n                      type: \"math_number\",\n                      value: field.defaultValue || 0,\n                      min: field.typicalMin || field.absoluteMin,\n                      max: field.typicalMax || field.absoluteMax,\n                  })\n        const variableName = (srv: jdspec.ServiceSpec) =>\n            `${humanify(srv.camelName).toLowerCase()} 1`\n        const fieldVariable = (\n            service: jdspec.ServiceSpec\n        ): VariableInputDefinition => ({\n            type: \"field_variable\",\n            name: \"role\",\n            variable: variableName(service),\n            variableTypes: [service.shortId],\n            defaultType: service.shortId,\n        })\n        const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n            info.fields.map(field => ({\n                type: \"input_value\",\n                name: fieldName(info, field),\n                check: toBlocklyType(field),\n            }))\n        const fieldsToValues = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo\n        ) =>\n            toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n                info.fields,\n                field => fieldName(info, field),\n                field => fieldToShadow(service, info, field)\n            )\n        const fieldsToMessage = (info: jdspec.PacketInfo) =>\n            info.fields\n                .map((field, i) => `${humanify(field.name)} %${2 + i}`)\n                .join(\" \")\n        const isEnabledRegister = (info: jdspec.PacketInfo) =>\n            info.fields.length === 1 &&\n            info.fields[0].type === \"bool\" &&\n            info.name === \"enabled\"\n        const customMessage = (\n            srv: jdspec.ServiceSpec,\n            reg: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) =>\n            customMessages.find(\n                m =>\n                    m.service === srv.classIdentifier &&\n                    m.register === reg.identifier &&\n                    m.field === field.name\n            )\n\n        const allServices = serviceSpecifications()\n        this.supportedServices = allServices\n            .filter(\n                service =>\n                    !/^_/.test(service.shortId) &&\n                    service.status !== \"deprecated\"\n            )\n            .filter(\n                service => ignoredServices.indexOf(service.classIdentifier) < 0\n            )\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n        const registers = arrayConcatMany(\n            this.supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isRegister(pkt) &&\n                            !pkt.lowLevel &&\n                            includedRegisters.indexOf(pkt.identifier) > -1\n                    )\n                    .map(register => ({\n                        service,\n                        register,\n                    }))\n            )\n        )\n        const events = this.supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(\n                    pkt =>\n                        isEvent(pkt) &&\n                        !pkt.lowLevel &&\n                        ignoredEvents.indexOf(pkt.identifier) < 0\n                ),\n            }))\n            .filter(kv => !!kv.events.length)\n        const commands = arrayConcatMany(\n            this.supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        )\n\n        const customBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `send %1 key %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                                shadow: true,\n                            },\n                        },\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `_show_leds`,\n                        message0: `show %1 leds %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"leds\",\n                            },\n                        ],\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display LEDs on the LED matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    fieldVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventBlocks = registers\n            .filter(\n                ({ service }) =>\n                    !service.packets.some(\n                        pkt =>\n                            isEvent(pkt) &&\n                            ignoredEvents.indexOf(pkt.identifier) < 0\n                    )\n            )\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${register.name}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n\n        const [registerSimples, registerComposites] = splitFilter(\n            registers,\n            reg => reg.register.fields.length == 1\n        )\n        const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n            registerSimples,\n            ({ register }) => !!toBlocklyType(register.fields[0])\n        )\n        const registerSimplesGetBlocks =\n            registerSimpleTypes.map<RegisterBlockDefinition>(\n                ({ service, register }) => ({\n                    kind: \"block\",\n                    type: `jacdac_get_simple_${service.shortId}_${register.name}`,\n                    message0:\n                        customMessage(service, register, register.fields[0])\n                            ?.get || `%1 ${humanify(register.name)}`,\n                    args0: [fieldVariable(service)],\n                    inputsInline: true,\n                    output: toBlocklyType(register.fields[0]),\n                    colour: serviceColor(service),\n                    tooltip: register.description,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    register,\n                    field: register.fields[0],\n\n                    template: \"register_get\",\n                })\n            )\n        const registerSimpleEnumTypes = registerSimpleOthers\n            .filter(\n                ({ service, register }) =>\n                    !!enumInfo(service, register.fields[0])\n            )\n            .map(({ service, register }) => ({\n                service,\n                register,\n                field: register.fields[0],\n                einfo: enumInfo(service, register.fields[0]),\n            }))\n        const registerCompositeEnumTypes = arrayConcatMany(\n            registerComposites.map(({ service, register }) =>\n                register.fields\n                    .map(field => ({\n                        service,\n                        register,\n                        field,\n                        einfo: enumInfo(service, field),\n                    }))\n                    .filter(({ einfo }) => !!einfo)\n            )\n        )\n        const registerEnumGetBlocks = [\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ].map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${field.name}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    fieldVariable(service),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n\n        const registerNumericsGetBlocks = registerComposites\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    fieldVariable(service),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n\n        const registerSetBlocks = registers\n            .filter(({ register }) => register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n\n        const commandBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(command),\n                ],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventBlocks,\n            ...registerChangeByEventBlocks,\n            ...registerSimplesGetBlocks,\n            ...registerEnumGetBlocks,\n            ...registerNumericsGetBlocks,\n            ...registerSetBlocks,\n            ...customBlockDefinitions,\n            ...commandBlocks,\n        ]\n\n        // generate accessor blocks for event data with numbers\n        this._eventFieldBlocks = arrayConcatMany(\n            events.map(({ service, events }) =>\n                events\n                    .filter(\n                        event => event.fields.filter(isNumericType).length > 0\n                    )\n                    .map(event => ({ service, event }))\n                    .map(\n                        ({ service, event }) =>\n                            <EventFieldDefinition>{\n                                kind: \"block\",\n                                type: `jacdac_event_field_${service.shortId}_${event.name}`,\n                                message0: `${event.name} %1`,\n                                args0: [\n                                    <InputDefinition>{\n                                        type: \"field_dropdown\",\n                                        name: \"field\",\n                                        options: event.fields.map(field => [\n                                            humanify(field.name),\n                                            field.name,\n                                        ]),\n                                    },\n                                ],\n                                colour: serviceColor(service),\n                                inputsInline: true,\n                                tooltip: `Data fields of the ${event.name} event`,\n                                helpUrl: serviceHelp(service),\n                                service,\n                                event,\n                                output: \"Number\",\n                                template: \"event_field\",\n                            }\n                    )\n            )\n        )\n\n        this._runtimeBlocks = [\n            {\n                kind: \"block\",\n                type: CONNECTION_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"connected\", \"connected\"],\n                            [\"disconnected\", \"disconnected\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"connection\",\n            },\n            {\n                kind: \"block\",\n                type: CONNECTED_BLOCK,\n                message0: \"%1 connected\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"connected\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._runtimeBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const { theme, program, source, liveServices } = options\n        const serviceColor = this.createServiceColor(theme)\n\n        const blockServices =\n            program?.roles.map(r => r.serviceShortId) ||\n            source?.variables.map(v => v.type) ||\n            []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveServiceBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition.template === \"event\")\n                .map(({ block, definition }) => {\n                    const eventName = block.inputs[0].fields[\"event\"]\n                        .value as string\n                    return (definition as EventBlockDefinition).events.find(\n                        ev => ev.name === eventName\n                    )\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(srvid =>\n                              services.find(\n                                  service => service.shortId === srvid\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(srv => srv.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const servicesCategories: CategoryDefinition[] = toolboxServices\n            .map(service => ({\n                service,\n                serviceBlocks: this._serviceBlocks.filter(\n                    block => block.service === service\n                ),\n            }))\n            .map<CategoryDefinition>(({ service, serviceBlocks }) => ({\n                kind: \"category\",\n                name: service.name,\n                colour: serviceColor(service),\n                contents: [\n                    ...serviceBlocks.map<BlockDefinition>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...this._eventFieldBlocks\n                        .filter(\n                            ev =>\n                                ev.service === service &&\n                                usedEvents.has(ev.event)\n                        )\n                        .map<BlockDefinition>(block => ({\n                            kind: \"block\",\n                            type: block.type,\n                            values: block.values,\n                        })),\n                ],\n                button: {\n                    kind: \"button\",\n                    text: `Add ${service.name} role`,\n                    callbackKey: `jacdac_add_role_callback_${service.shortId}`,\n                    service,\n                },\n            }))\n            .filter(cat => !!cat.contents?.length)\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Services\",\n            colour: commandColor,\n            contents: [\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: CONNECTION_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: CONNECTED_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        return [\n            ...servicesCategories,\n            commonCategory,\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n        ]\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(\n                                role.toString(),\n                                eventName.toString()\n                            ),\n                        ],\n                        callee: toIdentifier(\"awaitEvent\"),\n                    },\n                    event: {\n                        role: role.toString(),\n                        event: eventName.toString(),\n                    },\n                }\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default:\n                return undefined\n        }\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockDefinition,\n    InputDefinition,\n    INSPECT_BLOCK,\n    TWIN_BLOCK,\n    VariableInputDefinition,\n    WATCH_BLOCK,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport servicesDSL from \"./servicesdsl\"\n\nconst colour = \"#888\"\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: TWIN_BLOCK,\n            message0: `view %1 %2 %3`,\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"role\",\n                    variable: \"none\",\n                    variableTypes: [\n                        \"client\",\n                        ...servicesDSL.supportedServices.map(\n                            service => service.shortId\n                        ),\n                    ],\n                    defaultType: \"client\",\n                },\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: TwinField.KEY,\n                    name: \"twin\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Twin of the selected service`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: INSPECT_BLOCK,\n            message0: `inspect %1 %2 %3`,\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"role\",\n                    variable: \"none\",\n                    variableTypes: [\n                        \"client\",\n                        ...servicesDSL.supportedServices.map(\n                            service => service.shortId\n                        ),\n                    ],\n                    defaultType: \"client\",\n                },\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: JDomTreeField.KEY,\n                    name: \"twin\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Inspect a service`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: [\"Number\", \"Boolean\", \"String\"],\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: colour,\n            contents: [\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n            }\n        }\n\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import {\n    BlockDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst colour = \"#8a57c2\"\nclass AzureIoTHubBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"azureiothub\"\n    private _blocks: BlockDefinition[]\n    createBlocks() {\n        return (this._blocks = [\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry\",\n                message0: \"on receive cloud-to-device message\",\n                args0: [],\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry_number\",\n                message0: \"received number %1\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                ],\n                output: \"Number\",\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry_string\",\n                message0: \"received string %1\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                ],\n                output: \"String\",\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_send_telemetry\",\n                message0: \"send device-to-cloud message %1 %2\",\n                args0: [\n                    <DummyInputDefinition>{\n                        type: \"input_dummy\",\n                    },\n                    <StatementInputDefinition>{\n                        type: \"input_statement\",\n                        name: \"fields\",\n                    },\n                ],\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_send_telemetry_value\",\n                message0: \"with %1 = %2\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"value\",\n                        check: PRIMITIVE_TYPES,\n                    },\n                ],\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n        ])\n    }\n    createCategory(): CategoryDefinition[] {\n        return [\n            {\n                kind: \"category\",\n                name: \"Azure IoT Hub\",\n                colour,\n                contents: [\n                    ...this._blocks.map(\n                        ({ type }) =>\n                            <BlockDefinition>{\n                                kind: \"block\",\n                                type,\n                            }\n                    ),\n                ],\n            },\n        ]\n    }\n}\n\nconst azureIoTHubDSL: BlockDomainSpecificLanguage =\n    new AzureIoTHubBlockDomainSpecificLanguage()\n\nexport default azureIoTHubDSL\n","import { DTDLUnits } from \"../../../../jacdac-ts/src/azure-iot/dtdl\"\nimport {\n    BlockDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    OptionsInputDefinition,\n    StatementInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nexport const DEVICE_TWIN_SEND_TELEMETRY = \"device_twin_send_telemetry\"\nexport const DEVICE_TWIN_DEFINITION_BLOCK = \"device_twin_definition\"\nexport const DEVICE_TWIN_PROPERTY_BLOCK = \"device_twin_property\"\n\nexport const DEVICE_TWIN_PROPERTY_TYPE = \"DeviceTwinProperty\"\nexport const DEVICE_TWIN_VALUE_TYPE = \"DeviceTwinValue\"\n\nconst colour = \"#843ed0\"\nconst deviceTwinContentType = \"DeviceTwinContent\"\nconst deviceTwinCommonOptionType = \"DeviceTwinCommonOption\"\nconst deviceTwinPropertyOptionType = \"DeviceTwinPropertyOption\"\nconst deviceTwinStatementType = [deviceTwinContentType]\nconst deviceTwinCommonOptionStatementType = [deviceTwinCommonOptionType]\nconst deviceTwinPropertyOptionStatementType = [\n    deviceTwinPropertyOptionType,\n    ...deviceTwinCommonOptionStatementType,\n]\n\nclass DeviceTwinBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"devicetwin\"\n    private _blocks: BlockDefinition[]\n    createBlocks() {\n        return (this._blocks = [\n            {\n                kind: \"block\",\n                type: DEVICE_TWIN_DEFINITION_BLOCK,\n                message0: \"device twin\",\n                args0: [],\n                inputsInline: true,\n                nextStatement: deviceTwinStatementType,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: DEVICE_TWIN_PROPERTY_BLOCK,\n                message0: \"property %1 %2 %3\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"name\",\n                        variable: \"property 1\",\n                        variableTypes: [DEVICE_TWIN_PROPERTY_TYPE],\n                        defaultType: DEVICE_TWIN_PROPERTY_TYPE,\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <StatementInputDefinition>{\n                        type: \"input_statement\",\n                        name: \"options\",\n                        check: deviceTwinPropertyOptionStatementType,\n                    },\n                ],\n                previousStatement: deviceTwinStatementType,\n                nextStatement: deviceTwinStatementType,\n                colour,\n                inputsInline: false,\n            },\n            // options\n            {\n                kind: \"block\",\n                type: \"device_twin_option_property_field\",\n                message0: \"field %1 %2 %3\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"variable\",\n                        variable: \"value 1\",\n                        variableTypes: [DEVICE_TWIN_VALUE_TYPE],\n                        defaultType: DEVICE_TWIN_VALUE_TYPE,\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"unit\",\n                        options: DTDLUnits().map(unit => [unit, unit]),\n                    },\n                    {\n                        type: \"input_value\",\n                        name: \"value\",\n                    },\n                ],\n                previousStatement: deviceTwinCommonOptionStatementType,\n                nextStatement: deviceTwinCommonOptionStatementType,\n                colour,\n                inputsInline: false,\n            },\n            // events\n            {\n                kind: \"block\",\n                type: \"device_twin_property_change\",\n                message0: \"on property %1 change\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"name\",\n                        variable: \"property 1\",\n                        variableTypes: [DEVICE_TWIN_PROPERTY_TYPE],\n                        defaultType: DEVICE_TWIN_PROPERTY_TYPE,\n                    },\n                ],\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n        ])\n    }\n    createCategory(): CategoryDefinition[] {\n        return [\n            {\n                kind: \"category\",\n                name: \"Device Twin\",\n                colour,\n                contents: [\n                    ...this._blocks.map(\n                        ({ type }) =>\n                            <BlockDefinition>{\n                                kind: \"block\",\n                                type,\n                            }\n                    ),\n                ],\n            },\n        ]\n    }\n}\n\nconst deviceTwinDSL: BlockDomainSpecificLanguage =\n    new DeviceTwinBlockDomainSpecificLanguage()\n\nexport default deviceTwinDSL\n","import {\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst mathDSL: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random_range\",\n            message0: \"random from %1 to %2\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"min\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"max\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            inputsInline: true,\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                { kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_random_range\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n}\n\nexport default mathDSL\n","import BlockDomainSpecificLanguage from \"./dsl\"\n\nconst logicDsl: BlockDomainSpecificLanguage = {\n    id: \"logic\",\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Logic\",\n            colour: \"%{BKY_LOGIC_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"dynamic_if\",\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_compare\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_operation\",\n                    values: {\n                        A: { kind: \"block\", type: \"logic_boolean\" },\n                        B: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_negate\",\n                    values: {\n                        BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_boolean\",\n                },\n            ],\n        },\n    ],\n}\nexport default logicDsl\n","import BlockDomainSpecificLanguage from \"./dsl\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n}\nexport default variablesDsl\n","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport { fieldShadows } from \"../fields/fields\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        ...fieldShadows(),\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMCommand } from \"../../../../jacdac-ts/src/vm/ir\"\nimport {\n    BlockDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    InputDefinition,\n    REPEAT_EVERY_BLOCK,\n    SeparatorDefinition,\n    ValueInputDefinition,\n    WAIT_BLOCK,\n} from \"../toolbox\"\nimport { makeVMBase, processErrors } from \"../VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst colour = \"#4fbac9\"\nconst loopsDsl: BlockDomainSpecificLanguage = {\n    id: \"loops\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ],\n\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Commands\",\n            order: 4,\n            colour,\n            contents: [\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: REPEAT_EVERY_BLOCK,\n                    values: {\n                        interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: WAIT_BLOCK,\n                    values: {\n                        time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n            ].filter(b => !!b),\n        },\n    ],\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === REPEAT_EVERY_BLOCK) {\n            const { inputs } = block\n            const { expr: time, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, errors),\n            }\n        }\n        return undefined\n    },\n}\nexport default loopsDsl\n","import React, { createContext, useMemo } from \"react\"\nimport toolsDSL from \"./toolsdsl\"\nimport azureIoTHubDSL from \"./azureiothubdsl\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport deviceTwinDSL from \"./devicetwindsl\"\nimport servicesDSL from \"./servicesdsl\"\nimport mathDSL from \"./mathdsl\"\nimport logicDsl from \"./logicdsl\"\nimport variablesDsl from \"./variablesdsl\"\nimport shadowDsl from \"./shadowdsl\"\nimport loopsDsl from \"./loopsdsl\"\n\nexport interface DslProps {\n    dsls: BlockDomainSpecificLanguage[]\n}\n\nconst DslContext = createContext<DslProps>({\n    dsls: [],\n})\nDslContext.displayName = \"DSL\"\n\nexport default DslContext\n\n// eslint-disable-next-line react/prop-types\nexport const DslProvider = ({ children }) => {\n    const dsls = useMemo(\n        () => [\n            servicesDSL,\n            azureIoTHubDSL,\n            deviceTwinDSL,\n            toolsDSL,\n            loopsDsl,\n            logicDsl,\n            mathDSL,\n            variablesDsl,\n            shadowDsl,\n        ],\n        []\n    )\n    return (\n        <DslContext.Provider value={{ dsls }}>{children}</DslContext.Provider>\n    )\n}\n","import React, { lazy, useContext, PointerEvent } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport Suspense from \"../../ui/Suspense\"\nimport NoServiceAlert from \"./NoServiceAlert\"\n\nconst JDomServiceTreeView = lazy(\n    () => import(\"../../tools/JDomServiceTreeView\")\n)\n\nfunction JDomTreeWidget() {\n    const { roleService, flyout } = useContext(WorkspaceContext)\n    const onPointerStopPropagation = (event: PointerEvent<HTMLDivElement>) => {\n        // make sure blockly does not handle drags when interacting with UI\n        event.stopPropagation()\n    }\n\n    if (flyout) return null\n    if (!roleService) return <NoServiceAlert />\n\n    return (\n        <div\n            style={{ minWidth: \"12rem\", cursor: \"inherit\" }}\n            onPointerDown={onPointerStopPropagation}\n            onPointerUp={onPointerStopPropagation}\n            onPointerMove={onPointerStopPropagation}\n        >\n            {roleService && (\n                <Suspense>\n                    <JDomServiceTreeView\n                        service={roleService}\n                        defaultExpanded={[roleService.id]}\n                    />\n                </Suspense>\n            )}\n        </div>\n    )\n}\n\nexport default class JDomTreeField extends ReactInlineField {\n    static KEY = \"jacdac_jdom_service_tree\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new JDomTreeField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    renderInlineField() {\n        return <JDomTreeWidget />\n    }\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { HidKeyboardModifiers } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport ReactField, { ReactFieldJSON } from \"./ReactField\"\nimport Suspense from \"../../ui/Suspense\"\nimport { renderKeyboardKey } from \"../../../../jacdac-ts/src/servers/hidkeyboardserver\"\nconst KeyboardKeyInput = lazy(() => import(\"../../ui/KeyboardKeyInput\"))\n\nexport interface KeyboardFieldValue {\n    selector: number\n    modifiers: HidKeyboardModifiers\n}\n\nexport default class KeyboardKeyField extends ReactField<KeyboardFieldValue> {\n    static KEY = \"jacdac_field_keyboard_key\"\n\n    static fromJson(options: ReactFieldJSON) {\n        return new KeyboardKeyField(options?.value, undefined, options)\n    }\n\n    get defaultValue() {\n        return { selector: 4, modifiers: 0 }\n    }\n\n    getText_() {\n        const { selector, modifiers } = this.value\n        return renderKeyboardKey(selector, modifiers, true)\n    }\n\n    renderField(): ReactNode {\n        const { selector, modifiers } = this.value\n        const handleChange = (\n            newSelector: number,\n            newModifiers: HidKeyboardModifiers\n        ) => {\n            this.value = { selector: newSelector, modifiers: newModifiers }\n        }\n        return (\n            <Suspense>\n                <KeyboardKeyInput\n                    initialSelector={selector}\n                    initialModifiers={modifiers}\n                    onChange={handleChange}\n                />\n            </Suspense>\n        )\n    }\n}\n","import React, { lazy, ReactNode, useContext } from \"react\"\nimport Suspense from \"../../ui/Suspense\"\nimport ReactField, { ReactFieldJSON, toShadowDefinition } from \"./ReactField\"\nimport { rgbToHtmlColor } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport { child } from \"../../widgets/svg\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nconst LEDWidget = lazy(() => import(\"../../widgets/LEDWidget\"))\n\nfunction LEDColorFieldWidget() {\n    const { value, onValueChange } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    return (\n        <Suspense>\n            <LEDWidget\n                ledColor={value}\n                onLedColorChange={onValueChange}\n                ledCount={3}\n                color=\"secondary\"\n            />\n        </Suspense>\n    )\n}\n\nexport default class LEDColorField extends ReactField<number> {\n    static KEY = \"jacdac_field_led_color\"\n    static SHADOW = toShadowDefinition(LEDColorField)\n\n    static fromJson(options: ReactFieldJSON) {\n        return new LEDColorField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options, { width: 28, height: 28 })\n    }\n\n    protected initCustomView() {\n        const { width } = this.size_\n        const r = width >> 1\n        return child(this.fieldGroup_, \"circle\", {\n            r: width >> 1,\n            cx: r,\n            cy: r,\n            strokeWidth: 2,\n            stroke: \"#777\",\n        }) as SVGCircleElement\n    }\n\n    updateView() {\n        const c = rgbToHtmlColor(this.value)\n        const circle = this.view as SVGCircleElement\n        if (c) {\n            circle?.setAttribute(\"fill\", c)\n        }\n    }\n\n    getText_() {\n        return rgbToHtmlColor(this.value)\n    }\n\n    renderField(): ReactNode {\n        return <LEDColorFieldWidget />\n    }\n}\n","import ReactField from \"./ReactField\"\nimport Blockly from \"blockly\"\nimport { child } from \"../../widgets/svg\"\n\nexport default class ReactImageField<T> extends ReactField<T> {\n    constructor(value: string, width = 32, height = 32) {\n        super(value, undefined, undefined, { width, height })\n    }\n\n    setSize(width: number, height: number) {\n        this.size_ = new Blockly.utils.Size(width, height)\n        const img = this.view as SVGImageElement\n        if (img) {\n            img.setAttribute(\"width\", width + \"\")\n            img.setAttribute(\"height\", height + \"\")\n        }\n    }\n\n    protected updateView() {\n        const imgUri = this.renderValue()\n        const img = this.view as SVGImageElement\n        if (imgUri) {\n            img?.setAttributeNS(\n                \"http://www.w3.org/1999/xlink\",\n                \"xlink:href\",\n                imgUri\n            )\n            img?.setAttribute(\"alt\", this.getText())\n        }\n    }\n\n    /**\n     * Renders the value to a data uri string\n     */\n    protected renderValue(): string {\n        return undefined\n    }\n\n    protected initCustomView() {\n        const { width, height } = this.size_\n        return child(this.fieldGroup_, \"image\", {\n            height,\n            width,\n            alt: this.getText(),\n        }) as SVGImageElement\n    }\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { fromHex, toHex } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport Suspense from \"../../ui/Suspense\"\nimport { ReactFieldJSON, VALUE_CHANGE } from \"./ReactField\"\nimport ReactImageField from \"./ReactImageField\"\nconst LEDMatrixWidget = lazy(() => import(\"../../widgets/LEDMatrixWidget\"))\n\nexport interface LEDMatrixFieldValue {\n    // hex data\n    leds: string\n    rows: number\n    columns: number\n}\n\nexport default class LEDMatrixField extends ReactImageField<LEDMatrixFieldValue> {\n    static KEY = \"jacdac_field_led_matrix\"\n\n    constructor(value: string) {\n        super(value)\n\n        this.events.on(VALUE_CHANGE, () => {\n            const { rows, columns } = this.value\n            this.setSize(32, (32 / columns) * rows)\n        })\n    }\n\n    static fromJson(options: ReactFieldJSON) {\n        return new LEDMatrixField(options?.value)\n    }\n\n    get defaultValue() {\n        return {\n            leds: toHex(new Uint8Array(0)),\n            rows: 5,\n            columns: 5,\n        }\n    }\n\n    getText_() {\n        const { leds, rows, columns } = this.value\n        return `${leds} (${rows}x${columns})`\n    }\n\n    renderValue(): string {\n        const { leds, rows, columns } = this.value\n        // render current state to LEDmatrix field\n        const columnspadded = columns + (8 - (columns % 8))\n        const ledsBytes = fromHex(leds)\n        const cvs = document.createElement(\"canvas\")\n        const b = 3\n        const pw = 8\n        const ph = 8\n        const w = rows * pw + (rows - 1) * b\n        const h = columns * ph + (columns - 1) * b\n        cvs.width = w + 2 * b\n        cvs.height = h + 2 * b\n        const ctx = cvs.getContext(\"2d\")\n        ctx.fillStyle = \"#444\"\n        ctx.fillRect(b, b, w, h)\n        ctx.fillStyle = \"blue\"\n        for (let x = 0; x < columns; ++x) {\n            for (let y = 0; y < rows; ++y) {\n                const bitindex = y * columnspadded + x\n                const byte = ledsBytes[bitindex >> 3]\n                const bit = bitindex % 8\n                const on = 1 === ((byte >> bit) & 1)\n                ctx.fillStyle = on ? \"#ffc400\" : \"#000\"\n                ctx.fillRect(x * (pw + b) + b, y * (ph + b) + b, pw, ph)\n            }\n        }\n        const dataUri = cvs.toDataURL(\"image/png\")\n        return dataUri\n    }\n\n    renderField(): ReactNode {\n        const { leds, rows, columns } = this.value\n        const ledsBytes = fromHex(leds)\n        console.log(`led bytes`, { leds, ledsBytes })\n        const onChange = (newLeds: Uint8Array) =>\n            (this.value = {\n                leds: toHex(newLeds),\n                rows,\n                columns,\n            })\n        return (\n            <Suspense>\n                <LEDMatrixWidget\n                    color=\"secondary\"\n                    brightness={1}\n                    leds={ledsBytes}\n                    rows={rows}\n                    columns={columns}\n                    onChange={onChange}\n                />\n            </Suspense>\n        )\n    }\n}\n","import React, { useContext } from \"react\"\nimport { Button } from \"@material-ui/core\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport { startServiceProviderFromServiceClass } from \"../../../../jacdac-ts/src/servers/servers\"\nimport JacdacContext, { JacdacContextProps } from \"../../../jacdac/Context\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport { serviceSpecificationFromName } from \"../../../../jacdac-ts/src/jdom/spec\"\nimport { Alert } from \"@material-ui/lab\"\n\nexport default function NoServiceAlert() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { roleService, roleServiceShortId, flyout } =\n        useContext(WorkspaceContext)\n    const spec = serviceSpecificationFromName(roleServiceShortId)\n    const handleStartSimulator = () =>\n        startServiceProviderFromServiceClass(bus, spec.classIdentifier)\n\n    // nothing to do here\n    if (roleService || flyout) return null\n\n    // unresolved, unknown service\n    if (!roleService && !roleServiceShortId) return null\n\n    // unknown spec\n    if (!spec) return <Alert severity=\"warning\">Unknown service</Alert>\n\n    return (\n        <Button\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AddIcon />}\n            onClick={handleStartSimulator}\n        >\n            start {spec.name}\n        </Button>\n    )\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { createToneContext, ToneContext } from \"../../hooks/toneContext\"\nimport Suspense from \"../../ui/Suspense\"\nimport ReactField, {\n    ReactFieldJSON,\n    toShadowDefinition,\n    UNMOUNT,\n} from \"./ReactField\"\nconst PianoWidget = lazy(() => import(\"../../widgets/PianoWidget\"))\n\nexport default class NoteField extends ReactField<number> {\n    static KEY = \"jacdac_field_note\"\n    static SHADOW = toShadowDefinition(NoteField)\n    toneContext: ToneContext\n\n    static fromJson(options: ReactFieldJSON) {\n        return new NoteField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options)\n        this.events.on(UNMOUNT, () => {\n            this.toneContext?.close()\n            this.toneContext = undefined\n        })\n    }\n\n    get defaultValue() {\n        return 440\n    }\n\n    getText_() {\n        return (this.value | 0) + \"\"\n    }\n\n    renderField(): ReactNode {\n        const handlePlayTone = async (newFrequency: number) => {\n            this.value = newFrequency\n            if (!this.toneContext) this.toneContext = createToneContext()\n            this.toneContext?.playTone(newFrequency, 400)\n        }\n        return (\n            <Suspense>\n                <PianoWidget playTone={handlePlayTone} />\n            </Suspense>\n        )\n    }\n}\n","import React, { PointerEvent, ReactNode } from \"react\"\n\nexport function PointerBoundary(props: {\n    className?: string\n    children: ReactNode\n}) {\n    const { className, children } = props\n    const onPointerStopPropagation = (event: PointerEvent<HTMLDivElement>) => {\n        // make sure blockly does not handle drags when interacting with UI\n        event.stopPropagation()\n    }\n    return (\n        <div\n            className={className}\n            style={{ cursor: \"inherit\" }}\n            onPointerDown={onPointerStopPropagation}\n            onPointerUp={onPointerStopPropagation}\n            onPointerMove={onPointerStopPropagation}\n        >\n            {children}\n        </div>\n    )\n}\n","import React, { ReactNode } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ReactField from \"./ReactField\"\nimport { child } from \"../../widgets/svg\"\nimport DarkModeProvider from \"../../ui/DarkModeProvider\"\nimport { IdProvider } from \"react-use-id-hook\"\nimport JacdacProvider from \"../../../jacdac/Provider\"\nimport AppTheme from \"../../ui/AppTheme\"\nimport Blockly, { Block } from \"blockly\"\nimport { WorkspaceProvider } from \"../WorkspaceContext\"\n\nexport default class ReactInlineField extends ReactField<unknown> {\n    protected container: HTMLDivElement\n    protected resizeObserver: ResizeObserver\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options, { width: 1, height: 1 })\n    }\n\n    protected createContainer(): HTMLDivElement {\n        const c = document.createElement(\"div\")\n        c.style.display = \"inline-block\"\n        c.style.minWidth = \"14rem\"\n        return c\n    }\n\n    protected initCustomView() {\n        const { width, height } = this.size_\n        const fo = child(this.fieldGroup_, \"foreignObject\", {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        }) as SVGForeignObjectElement\n\n        this.container = this.createContainer()\n        fo.appendChild(this.container)\n\n        this.resizeObserver = new ResizeObserver(\n            (entries: ResizeObserverEntry[]) => {\n                const entry = entries[0]\n                const { contentRect } = entry\n                this.size_.width = contentRect.width\n                this.size_.height = contentRect.height\n                fo.setAttribute(\"width\", this.size_.width + \"\")\n                fo.setAttribute(\"height\", this.size_.height + \"\")\n                this.forceRerender()\n            }\n        )\n        this.resizeObserver.observe(this.container)\n\n        ReactDOM.render(this.renderBlock(), this.container)\n        return fo\n    }\n\n    dispose() {\n        if (this.container) {\n            ReactDOM.unmountComponentAtNode(this.container)\n            this.container = undefined\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect()\n            this.resizeObserver = undefined\n        }\n        super.dispose()\n    }\n\n    renderField(): ReactNode {\n        return <div>not used</div>\n    }\n\n    renderInlineField(): ReactNode {\n        return null\n    }\n\n    renderBlock(): ReactNode {\n        return (\n            <WorkspaceProvider field={this}>\n                <DarkModeProvider fixedDarkMode=\"dark\">\n                    <IdProvider>\n                        <JacdacProvider>\n                            <AppTheme>{this.renderInlineField()}</AppTheme>\n                        </JacdacProvider>\n                    </IdProvider>\n                </DarkModeProvider>\n            </WorkspaceProvider>\n        )\n    }\n\n    getText_() {\n        return \"...\"\n    }\n\n    // don't bind any mouse event\n    bindEvents_() {\n        Blockly.Tooltip.bindMouseEvents(this.getClickTarget_())\n    }\n}\n","import { Grid, Slider } from \"@material-ui/core\"\nimport React, { ReactNode, useContext } from \"react\"\nimport ReactField from \"./ReactField\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nfunction FieldWithSlider(props: { children: ReactNode }) {\n    const { children } = props\n    const { value, onValueChange } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    const handleChange = async (ev: unknown, nv: number | number[]) => {\n        const newValue = nv as number\n        onValueChange(newValue)\n    }\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                {children}\n            </Grid>\n            <Grid item xs={12}>\n                <Slider\n                    color=\"secondary\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={`${Math.round(value)}°`}\n                    min={-90}\n                    max={90}\n                    step={5}\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"angle\"\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default class SliderField extends ReactField<number> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(value: string, options?: any) {\n        super(value, undefined, options)\n    }\n\n    get defaultValue() {\n        return 0\n    }\n\n    getText_() {\n        return this.value + \"\"\n    }\n\n    renderField(): ReactNode {\n        return <FieldWithSlider>{this.renderWidget()}</FieldWithSlider>\n    }\n\n    renderWidget(): ReactNode {\n        return null\n    }\n}\n","import React, { lazy, ReactNode, useContext } from \"react\"\nimport SliderField from \"./SliderField\"\nimport Suspense from \"../../ui/Suspense\"\nimport { ReactFieldJSON, toShadowDefinition } from \"./ReactField\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nconst ServoWidget = lazy(() => import(\"../../widgets/ServoWidget\"))\n\nfunction ServiceFieldWidget() {\n    const { value } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    return (\n        <Suspense>\n            <ServoWidget\n                angle={value}\n                offset={0}\n                color=\"secondary\"\n                enabled={true}\n            />\n        </Suspense>\n    )\n}\n\nexport default class ServoAngleField extends SliderField {\n    static KEY = \"jacdac_field_servo_angle\"\n    static SHADOW = toShadowDefinition(ServoAngleField)\n\n    static fromJson(options: ReactFieldJSON) {\n        return new ServoAngleField(options?.value, options)\n    }\n\n    getText_() {\n        return this.value + \"°\"\n    }\n\n    renderWidget(): ReactNode {\n        return <ServiceFieldWidget />\n    }\n}\n","import React, { useContext } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport { Grid } from \"@material-ui/core\"\nimport DashboardServiceWidget from \"../../dashboard/DashboardServiceWidget\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport NoServiceAlert from \"./NoServiceAlert\"\nimport { PointerBoundary } from \"./PointerBoundary\"\n\nfunction TwinWidget() {\n    const { roleService, flyout } = useContext(WorkspaceContext)\n    if (flyout) return null\n    if (!roleService) return <NoServiceAlert />\n\n    return (\n        <Grid\n            container\n            alignItems=\"center\"\n            alignContent=\"center\"\n            justify=\"center\"\n            spacing={1}\n        >\n            <Grid item>\n                <PointerBoundary>\n                    <DashboardServiceWidget\n                        service={roleService}\n                        visible={true}\n                        variant=\"icon\"\n                    />\n                </PointerBoundary>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default class TwinField extends ReactInlineField {\n    static KEY = \"jacdac_field_twin\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new TwinField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    renderInlineField() {\n        return <TwinWidget />\n    }\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport { Box, Grid, Switch, Typography, useTheme } from \"@material-ui/core\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport { PointerBoundary } from \"./PointerBoundary\"\nimport { WatchValueType } from \"../../../../jacdac-ts/src/vm/runner\"\nimport { VM_EVENT, VMCode } from \"../../../../jacdac-ts/src/vm/events\"\nimport { roundWithPrecision } from \"../../../../jacdac-ts/src/jdom/utils\"\n\nfunction WatchValueWidget() {\n    const { runner, sourceId } = useContext(WorkspaceContext)\n    const theme = useTheme()\n\n    // track changes\n    const [value, setValue] = useState<WatchValueType>(\n        runner?.lookupWatch(sourceId)\n    )\n    useEffect(() => {\n        setValue(undefined)\n        return runner?.subscribe(VM_EVENT, (code: VMCode, watchSourceId?: string) => {\n            if (code === VMCode.WatchChange && watchSourceId === sourceId) {\n                const newValue = runner.lookupWatch(sourceId)\n                setValue(newValue)\n            }\n        })\n    }, [runner, sourceId])\n\n    let valueNumber = typeof value === \"number\" ? (value as number) : undefined\n    if (!isNaN(valueNumber)) {\n        const step = Math.ceil(Math.abs(valueNumber)) / 10\n        const precision = step < 1 ? Math.ceil(-Math.log10(step)) : 0\n        valueNumber = roundWithPrecision(valueNumber, precision)\n    }\n\n    return (\n        <Box\n            bgcolor={theme.palette.background.paper}\n            borderRadius={theme.spacing(1)}\n            color={theme.palette.text.primary}\n        >\n            <Grid\n                container\n                alignItems=\"flex-end\"\n                alignContent=\"center\"\n                justify=\"center\"\n                spacing={1}\n            >\n                <Grid item>\n                    <PointerBoundary>\n                        {!isNaN(valueNumber) ? (\n                            <Typography variant=\"body1\">\n                                {valueNumber}\n                            </Typography>\n                        ) : typeof value === \"boolean\" ? (\n                            <Switch value={!!value} />\n                        ) : (\n                            <Typography variant=\"body1\">\n                                {value === undefined ? \"...\" : value + \"\"}\n                            </Typography>\n                        )}\n                    </PointerBoundary>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default class WatchValueField extends ReactInlineField {\n    static KEY = \"jacdac_watch_value\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new WatchValueField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    protected createContainer(): HTMLDivElement {\n        const c = document.createElement(\"div\")\n        c.style.display = \"inline-block\"\n        c.style.minWidth = \"4rem\"\n        return c\n    }\n\n    renderInlineField() {\n        return <WatchValueWidget />\n    }\n}\n","import Blockly from \"blockly\"\nimport NoteField from \"./NoteField\"\nimport KeyboardKeyField from \"./KeyboardKeyField\"\nimport LEDMatrixField from \"./LEDMatrixField\"\nimport ServoAngleField from \"./ServoAngleField\"\nimport { BlockDefinition } from \"../toolbox\"\nimport { assert } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport LEDColorField from \"./LEDColorField\"\nimport TwinField from \"./TwinField\"\nimport JDomTreeField from \"./JDomTreeField\"\nimport WatchValueField from \"./WatchValueField\"\n\nlet reactFieldShadows: BlockDefinition[]\nexport function registerFields() {\n    if (reactFieldShadows) return\n\n    reactFieldShadows = []\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const registerType = (fieldType: any) => {\n        const key = fieldType.KEY\n        assert(!!key)\n        try {\n            Blockly.fieldRegistry.unregister(key) // hot reload issues\n        } catch (e) {\n            // ignore hot reload issues\n        }\n        Blockly.fieldRegistry.register(key, fieldType)\n        if (fieldType.SHADOW) reactFieldShadows.push(fieldType.SHADOW)\n    }\n    const fieldTypes = [\n        KeyboardKeyField,\n        NoteField,\n        LEDMatrixField,\n        ServoAngleField,\n        LEDColorField,\n        TwinField,\n        JDomTreeField,\n        WatchValueField,\n    ]\n    fieldTypes.forEach(registerType)\n}\n\nexport function fieldShadows() {\n    registerFields()\n    return reactFieldShadows.slice(0)\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction mkTitle(txt: string): SVGTitleElement {\n    const t = <SVGTitleElement>elt(\"title\")\n    t.textContent = txt\n    return t\n}\nexport function title(el: SVGElement, txt: string): SVGTitleElement {\n    const t = mkTitle(txt)\n    el.appendChild(t)\n    return t\n}\n\nexport function hydrate(el: SVGElement, props: any) {\n    for (const k in props) {\n        if (k == \"title\") {\n            title(el, props[k])\n        } else el.setAttributeNS(null, k, props[k])\n    }\n}\n\nexport function elt(name: string, props?: any): SVGElement {\n    const el = document.createElementNS(\"http://www.w3.org/2000/svg\", name)\n    if (props) hydrate(el, props)\n    return el\n}\n\nexport function child(parent: Element, name: string, props?: any): SVGElement {\n    const el = elt(name, props)\n    parent.appendChild(el)\n    return el\n}\n"],"sourceRoot":""}