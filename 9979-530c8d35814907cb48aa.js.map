{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLEDMatrix.tsx","webpack://jacdac-docs/./src/components/hooks/useArrowKeys.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigation.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigationProps.ts"],"names":["DashboardLEDMatrixDisplay","props","service","widgetRef","useRef","ledsRegister","register","LedMatrixReg","useRegisterUnpackedValue","leds","brightness","rows","columns","server","useServiceServer","color","useWidgetTheme","background","controlBackground","active","useChange","navProps","useKeyboardNavigationProps","current","undefined","minOpacity","pw","ph","ps","pr","m","w","h","columnspadded","handleLedClick","bitindex","ev","buttons","newLeds","slice","toggle","sendSetAsync","render","boxEls","ledEls","onFill","onStroke","offFill","offStroke","ledProps","className","role","tabIndex","y","row","x","col","box","push","byte","bit","on","handleClick","fireClick","useFireKey","length","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","onDown","symmetric","handlers","e","charCode","keyCodeFromEvent","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","findIndex","f","document","activeElement","next","focus","vertical","onKeyDown"],"mappings":"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","file":"9979-530c8d35814907cb48aa.js","sourcesContent":["import React, { SVGProps, useRef } from \"react\"\nimport { LedMatrixReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useFireKey from \"../hooks/useFireKey\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport { toggle } from \"../../../jacdac-ts/src/servers/ledmatrixserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useChange from \"../../jacdac/useChange\"\n\nexport default function DashboardLEDMatrixDisplay(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n\n    const widgetRef = useRef<SVGGElement>()\n    const ledsRegister = service.register(LedMatrixReg.Leds)\n    const [leds] = useRegisterUnpackedValue<[Uint8Array]>(ledsRegister, props)\n    const [brightness = 0] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Brightness),\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Rows),\n        props\n    )\n    const [columns] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Columns),\n        props\n    )\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n\n    // render immediately if the server rendered again\n    useChange(server)\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined) return <LoadingProgress />\n\n    // compute size\n    const minOpacity = 0.3\n    const pw = 8\n    const ph = 8\n    const ps = 0.5\n    const pr = 2\n    const m = 2\n    const w = columns * pw + (columns + 1) * m\n    const h = rows * ph + (rows + 1) * m\n\n    const columnspadded = columns + (8 - (columns % 8))\n    const handleLedClick =\n        (bitindex: number) => (ev: React.PointerEvent<SVGRectElement>) => {\n            if (ev && !ev.buttons) return\n            const newLeds = leds.slice(0)\n            toggle(newLeds, bitindex)\n            ledsRegister.sendSetAsync(newLeds, true)\n        }\n\n    // add leds\n    const render = () => {\n        const boxEls: JSX.Element[] = []\n        const ledEls: JSX.Element[] = []\n        const onFill = active\n        const onStroke = undefined\n        const offFill = controlBackground\n        const offStroke = \"transparent\"\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: \"clickeable\",\n            role: \"button\",\n            tabIndex: 0,\n        }\n\n        let y = m\n        for (let row = 0; row < rows; row++) {\n            let x = m\n            for (let col = 0; col < columns; col++) {\n                const box = (\n                    <rect\n                        key={`b${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={controlBackground}\n                    />\n                )\n                boxEls.push(box)\n\n                const bitindex = row * columnspadded + col\n                const byte = leds?.[bitindex >> 3]\n                const bit = bitindex % 8\n                const on = 1 === ((byte >> bit) & 1)\n                const handleClick = handleLedClick(bitindex)\n                const fireClick = useFireKey(handleClick)\n\n                ledEls.push(\n                    <rect\n                        key={`l${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={on ? onFill : offFill}\n                        stroke={on ? onStroke : offStroke}\n                        strokeWidth={ps}\n                        {...ledProps}\n                        aria-label={`led ${row}, ${col} ${on ? \"on\" : \"off\"}`}\n                        onPointerDown={handleClick}\n                        onPointerEnter={handleClick}\n                        onKeyDown={fireClick}\n                    />\n                )\n                x += pw + m\n            }\n            y += ph + m\n        }\n        return { boxEls, ledEls }\n    }\n\n    const { boxEls, ledEls } = render()\n    return (\n        <SvgWidget width={w} height={h}>\n            <rect\n                x={0}\n                y={0}\n                width={w}\n                height={h}\n                rx={2}\n                ry={2}\n                fill={background}\n            />\n            <g ref={widgetRef} {...navProps}>\n                {boxEls}\n                {ledEls.length && (\n                    <g opacity={minOpacity + brightness * (1 - minOpacity)}>\n                        {ledEls}\n                    </g>\n                )}\n            </g>\n        </SvgWidget>\n    )\n}\n","import React, { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\";\n\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void,\n    onRight?: () => void,\n    onUp?: () => void,\n    onDown?: () => void,\n    symmetric?: boolean;\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options;\n\n    if (!onLeft && !onUp && !onRight && !onDown)\n        return undefined;\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft)\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e);\n        const handler = handlers[charCode];\n        if (handler) {\n            e.preventDefault();\n            handler();\n        }\n    }\n}\n","import React from \"react\"\n\nexport default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]';\n    const onMove = (offset: number) => () => {\n        console.log('keyboard move', { offset })\n        const focusable = Array.from<SVGElement>(parentRef?.querySelectorAll(query) || []);\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement);\n            const next = ((me + offset) + focusable.length) % focusable.length;\n            focusable[next].focus();\n        }\n    }\n    return onMove;\n}","import useArrowKeys from \"./useArrowKeys\";\nimport useKeyboardNavigation from \"./useKeyboardNavigation\";\n\nexport default function useKeyboardNavigationProps(parentRef: Element, vertical?: boolean) {\n    const onMove = useKeyboardNavigation(parentRef);\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    });\n\n    return {\n        onKeyDown: parentRef && onKeyDown\n    }\n}"],"sourceRoot":""}