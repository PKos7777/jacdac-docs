{"version":3,"sources":["webpack://jacdac-docs/./src/components/data-science/useDataToolbox.ts","webpack://jacdac-docs/./src/components/data-science/DSBlockEditor.tsx","webpack://jacdac-docs/./src/pages/tools/data-science-editor.tsx"],"names":["loadBlocks","blocks","kind","type","message0","args0","name","check","options","inputsInline","output","style","helpUrl","extensions","forEach","block","Blockly","jacdacDefinition","init","jsonInit","useToolbox","source","table","useMemo","toolboxConfiguration","contents","useStyles","makeStyles","theme","createStyles","editor","height","fontFamily","typography","fontWeight","DSBlockEditor","props","className","onXmlChange","onJSONChange","initialXml","workspaceRef","classes","useContext","DarkModeContext","darkMode","AppContext","setError","useState","setSource","useDataToolbox","DarkTheme","Theme","gridColor","blocklyRef","useRef","useBlocklyWorkspace","ref","workspaceConfiguration","collapse","disable","comments","css","trashcan","sounds","grid","spacing","length","colour","snap","renderer","oneBasedIndex","move","scrollbars","vertical","horizontal","media","withPrefix","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","pinch","onImportXmlError","workspace","xml","useEffect","current","undefined","useBlocklyPlugins","useBlocklyEvents","isDragging","newSource","domToJSON","JSON","stringify","observer","ResizeObserver","resize","observe","disconnect","clsx","Page"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;;AAEA,SAASA,UAAT,GAAsB;AAClB;AACA,MAAMC,MAAyB,GAAG,CAC9B;AACIC,QAAI,EAAE,OADV;AAEIC,QAAI,EAAE,wBAFV;AAGIC,YAAQ,EAAE,UAHd;AAIIC,SAAK,EAAE,CACH;AACIF,UAAI,EAAE,aADV;AAEIG,UAAI,EAAE,GAFV;AAGIC,WAAK,EAAE;AAHX,KADG,EAMH;AACIJ,UAAI,EAAE,gBADV;AAEIG,UAAI,EAAE,IAFV;AAGIE,aAAO,EAAE,CACL,CAAC,6BAAD,EAAgC,KAAhC,CADK,EAEL,CAAC,gCAAD,EAAmC,OAAnC,CAFK,EAGL,CAAC,mCAAD,EAAsC,UAAtC,CAHK,EAIL,CAAC,6BAAD,EAAgC,QAAhC,CAJK;AAHb,KANG,EAgBH;AACIL,UAAI,EAAE,aADV;AAEIG,UAAI,EAAE,GAFV;AAGIC,WAAK,EAAE;AAHX,KAhBG,CAJX;AA0BIE,gBAAY,EAAE,IA1BlB;AA2BIC,UAAM,EAAE,QA3BZ;AA4BIC,SAAK,EAAE,aA5BX;AA6BIC,WAAO,EAAE,gCA7Bb;AA8BIC,cAAU,EAAE,CAAC,iBAAD;AA9BhB,GAD8B,CAAlC,CAFkB,CAqClB;;AACAZ,QAAM,CAACa,OAAP,CACI,UAAAC,KAAK;AAAA,WACAC,0BAAA,CAAeD,KAAK,CAACZ,IAArB,IAA6B;AAC1Bc,sBAAgB,EAAEF,KADQ;AAE1BG,UAAI,EAAE,gBAAY;AACd,aAAKC,QAAL,CAAcJ,KAAd;AACH;AAJyB,KAD7B;AAAA,GADT;AASH;;AAEc,SAASK,UAAT,CAAoBC,MAApB,EAA2C;AACtD,MAAMC,KAAK,GAAG,CACV;AACIhB,QAAI,EAAE;AADV,GADU,EAIV;AACIA,QAAI,EAAE;AADV,GAJU,CAAd;AASAiB,mBAAO,CAAC;AAAA,WAAMvB,UAAU,EAAhB;AAAA,GAAD,EAAqB,CAACsB,KAAD,CAArB,CAAP;AAEA,MAAME,oBAA0C,GAAG;AAC/CtB,QAAI,EAAE,iBADyC;AAE/CuB,YAAQ,EAAE,CACN;AACIvB,UAAI,EAAE,UADV;AAEII,UAAI,EAAE,aAFV;AAGImB,cAAQ,EAAE,CACN;AACIvB,YAAI,EAAE,OADV;AAEIC,YAAI,EAAE;AAFV,OADM,EAKN;AACID,YAAI,EAAE,OADV;AAEIC,YAAI,EAAE;AAFV,OALM;AAHd,KADM,EAeN;AACID,UAAI,EAAE,UADV;AAEII,UAAI,EAAE,KAFV;AAGImB,cAAQ,EAAE,CAAC;AAAEvB,YAAI,EAAE,OAAR;AAAiBC,YAAI,EAAE;AAAvB,OAAD;AAHd,KAfM;AAFqC,GAAnD,CAZsD,CAoCtD;;AACA,SAAO;AACHqB,wBAAoB,EAApBA;AADG,GAAP;AAGH,C;;ACpGD;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAME,SAAS,GAAGC,6BAAU,CAAC,UAACC,KAAD;AAAA,SACzBC,+BAAY,CAAC;AACTC,UAAM,EAAE;AACJC,YAAM,EAAE,qBADJ;AAEJ,6BAAuB;AACnBC,kBAAU,EAAEJ,KAAK,CAACK,UAAN,CAAiBD;AADV,OAFnB;AAKJ,wBAAkB;AACdE,kBAAU,qBADI;AAEdF,kBAAU,EAAKJ,KAAK,CAACK,UAAN,CAAiBD,UAAtB;AAFI;AALd;AADC,GAAD,CADa;AAAA,CAAD,CAA5B;AAee,SAASG,aAAT,CAAuBC,KAAvB,EAMZ;AACC,MAAQC,SAAR,GACID,KADJ,CAAQC,SAAR;AAAA,MAAmBC,WAAnB,GACIF,KADJ,CAAmBE,WAAnB;AAAA,MAAgCC,YAAhC,GACIH,KADJ,CAAgCG,YAAhC;AAAA,MAA8CC,UAA9C,GACIJ,KADJ,CAA8CI,UAA9C;AAAA,MAA0DC,YAA1D,GACIL,KADJ,CAA0DK,YAA1D;AAEA,MAAMC,OAAO,GAAGhB,SAAS,EAAzB;;AACA,oBAAqBiB,oBAAU,CAACC,8BAAD,CAA/B;AAAA,MAAQC,QAAR,eAAQA,QAAR;;AACA,qBAAqBF,oBAAU,CAACG,0BAAD,CAA/B;AAAA,MAAQC,QAAR,gBAAQA,QAAR;;AACA,kBAA4BC,kBAAQ,EAApC;AAAA,MAAO3B,MAAP;AAAA,MAAe4B,SAAf;;AACA,wBAAiCC,UAAc,CAAC7B,MAAD,CAA/C;AAAA,MAAQG,oBAAR,mBAAQA,oBAAR;;AACA,MAAMI,KAAK,GAAGiB,QAAQ,KAAK,MAAb,GAAsBM,6BAAtB,GAAkCC,kBAAhD;AACA,MAAMC,SAAS,GAAGR,QAAQ,KAAK,MAAb,GAAsB,MAAtB,GAA+B,MAAjD,CATD,CAWC;AACA;;AACA,MAAMS,UAAU,GAAGC,gBAAM,CAAC,IAAD,CAAzB;;AACA,aAA2BC,oCAAmB,CAAC;AAC3CC,OAAG,EAAEH,UADsC;AAE3C9B,wBAAoB,EAApBA,oBAF2C;AAG3CkC,0BAAsB,EAAE;AACpBC,cAAQ,EAAE,KADU;AAEpBC,aAAO,EAAE,KAFW;AAGpBC,cAAQ,EAAE,KAHU;AAIpBC,SAAG,EAAE,IAJe;AAKpBC,cAAQ,EAAE,KALU;AAMpBC,YAAM,EAAE,KANY;AAOpBC,UAAI,EAAE;AACFC,eAAO,EAAE,EADP;AAEFC,cAAM,EAAE,CAFN;AAGFC,cAAM,EAAEf,SAHN;AAIFgB,YAAI,EAAE;AAJJ,OAPc;AAapBC,cAAQ,EAAE,OAbU;AAcpB1C,WAAK,EAALA,KAdoB;AAepB2C,mBAAa,EAAE,KAfK;AAgBpBC,UAAI,EAAE;AACFC,kBAAU,EAAE;AACRC,kBAAQ,EAAE,IADF;AAERC,oBAAU,EAAE;AAFJ;AADV,OAhBc;AAsBpBC,WAAK,EAAEC,mCAAU,CAAC,gBAAD,CAtBG;AAuBpBC,UAAI,EAAE;AACFC,gBAAQ,EAAE,IADR;AAEFC,aAAK,EAAE,IAFL;AAGFC,kBAAU,EAAE,GAHV;AAIFC,gBAAQ,EAAE,CAJR;AAKFC,gBAAQ,EAAE,GALR;AAMFC,kBAAU,EAAE,GANV;AAOFC,aAAK,EAAE;AAPL;AAvBc,KAHmB;AAoC3C7C,cAAU,EAAEA,UApC+B;AAqC3C8C,oBAAgB,EAAE;AAAA,aAAMvC,QAAQ,CAAC,yBAAD,CAAd;AAAA;AArCyB,GAAD,CAA9C;AAAA,MAAQwC,SAAR,QAAQA,SAAR;AAAA,MAAmBC,GAAnB,QAAmBA,GAAnB,CAdD,CAsDC;;;AACAC,qBAAS,CAAC,YAAM;AACZ,QAAIhD,YAAJ,EAAkB;AACdA,kBAAY,CAACiD,OAAb,GAAuBH,SAAvB;AACA,aAAO;AAAA,eAAO9C,YAAY,CAACiD,OAAb,GAAuBC,SAA9B;AAAA,OAAP;AACH;AACJ,GALQ,EAKN,CAACJ,SAAD,EAAY9C,YAAZ,CALM,CAAT,CAvDD,CA8DC;;AACAmD,sCAAiB,CAACL,SAAD,CAAjB;AACAM,qCAAgB,CAACN,SAAD,CAAhB,CAhED,CAkEC;;AACAE,qBAAS,CAAC,YAAM;AACZ,QAAI,CAACF,SAAD,IAAcA,SAAS,CAACO,UAAV,EAAlB,EAA0C;AAE1CxD,eAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAGkD,GAAH,CAAX,CAHY,CAKZ;;AACA,QAAIjD,YAAJ,EAAkB;AACd;AACA,UAAMwD,SAAS,GAAGC,mCAAS,CAACT,SAAD,CAA3B;;AACA,UAAIU,IAAI,CAACC,SAAL,CAAeH,SAAf,MAA8BE,IAAI,CAACC,SAAL,CAAe7E,MAAf,CAAlC,EAA0D;AACtD4B,iBAAS,CAAC8C,SAAD,CAAT;AACAxD,oBAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGwD,SAAH,CAAZ;AACH;AACJ;AACJ,GAdQ,EAcN,CAACR,SAAD,EAAYC,GAAZ,CAdM,CAAT,CAnED,CAmFC;;AACAC,qBAAS,CAAC,YAAM;AACZ,QAAMU,QAAQ,GAAG,IAAIC,cAAJ,CAAmB;AAAA,aAAMb,SAAN,aAAMA,SAAN,uBAAMA,SAAS,CAAEc,MAAX,EAAN;AAAA,KAAnB,CAAjB;AACAF,YAAQ,CAACG,OAAT,CAAiBhD,UAAU,CAACoC,OAA5B;AACA,WAAO;AAAA,aAAMS,QAAQ,CAACI,UAAT,EAAN;AAAA,KAAP;AACH,GAJQ,EAIN,CAAChB,SAAD,EAAYjC,UAAU,CAACoC,OAAvB,CAJM,CAAT;AAMA,sBACI,uDACI;AAAK,aAAS,EAAEc,yBAAI,CAAC9D,OAAO,CAACZ,MAAT,EAAiBO,SAAjB,CAApB;AAAiD,OAAG,EAAEiB;AAAtD,IADJ,eAEI,oBAAC,kCAAD,OAFJ,CADJ;AAMH,C;;AC3ID;AACA;AAEe,SAASmD,IAAT,GAAgB;AAC3B,sBAAO,oBAAC,aAAD,OAAP;AACH,C","file":"component---src-pages-tools-data-science-editor-tsx-e3c257a11aff9ebb5cc9.js","sourcesContent":["import { useMemo } from \"react\"\nimport { WorkspaceJSON } from \"../vm/jsongenerator\"\nimport {\n    BlockDefinition,\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ServiceBlockDefinitionFactory,\n    ToolboxConfiguration,\n} from \"../vm/toolbox\"\nimport Blockly from \"blockly\"\n\nfunction loadBlocks() {\n    // declare all block types here\n    const blocks: BlockDefinition[] = [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                {\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                {\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                } as OptionsInputDefinition,\n                {\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        } as BlockDefinition,\n    ]\n\n    // re-register blocks with blocklys\n    blocks.forEach(\n        block =>\n            (Blockly.Blocks[block.type] = {\n                jacdacDefinition: block,\n                init: function () {\n                    this.jsonInit(block)\n                },\n            } as ServiceBlockDefinitionFactory)\n    )\n}\n\nexport default function useToolbox(source: WorkspaceJSON) {\n    const table = [\n        {\n            name: \"x\",\n        },\n        {\n            name: \"y\",\n        },\n    ]\n\n    useMemo(() => loadBlocks(), [table])\n\n    const toolboxConfiguration: ToolboxConfiguration = {\n        kind: \"categoryToolbox\",\n        contents: [\n            {\n                kind: \"category\",\n                name: \"Mathsdfasfs\",\n                contents: [\n                    {\n                        kind: \"block\",\n                        type: \"jacdac_math_arithmetic\",\n                    } as BlockDefinition,\n                    {\n                        kind: \"block\",\n                        type: \"jacdac_math_arithmetic\",\n                    } as BlockDefinition,\n                ],\n            } as CategoryDefinition,\n            {\n                kind: \"category\",\n                name: \"Yay\",\n                contents: [{ kind: \"block\", type: \"math_arithmetic\" }],\n            },\n        ],\n    }\n    // todo\n    return {\n        toolboxConfiguration,\n    }\n}\n","import React, {\n    MutableRefObject,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport { useBlocklyWorkspace } from \"react-blockly\"\nimport { WorkspaceSvg } from \"blockly\"\nimport Theme from \"@blockly/theme-modern\"\nimport DarkTheme from \"@blockly/theme-dark\"\nimport BlocklyModalDialogs from \"../vm/BlocklyModalDialogs\"\nimport { domToJSON, WorkspaceJSON } from \"../vm/jsongenerator\"\nimport DarkModeContext from \"../ui/DarkModeContext\"\nimport AppContext from \"../AppContext\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport clsx from \"clsx\"\nimport useBlocklyEvents from \"../vm/useBlocklyEvents\"\nimport useBlocklyPlugins from \"../vm/useBlocklyPlugins\"\nimport { withPrefix } from \"gatsby\"\nimport useDataToolbox from \"./useDataToolbox\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        editor: {\n            height: \"calc(100vh - 10rem)\",\n            \"& .blocklyTreeLabel\": {\n                fontFamily: theme.typography.fontFamily,\n            },\n            \"& .blocklyText\": {\n                fontWeight: `normal !important`,\n                fontFamily: `${theme.typography.fontFamily} !important`,\n            },\n        },\n    })\n)\n\nexport default function DSBlockEditor(props: {\n    className?: string\n    initialXml?: string\n    onXmlChange?: (xml: string) => void\n    onJSONChange?: (json: WorkspaceJSON) => void\n    workspaceRef?: MutableRefObject<WorkspaceSvg>\n}) {\n    const { className, onXmlChange, onJSONChange, initialXml, workspaceRef } =\n        props\n    const classes = useStyles()\n    const { darkMode } = useContext(DarkModeContext)\n    const { setError } = useContext(AppContext)\n    const [source, setSource] = useState<WorkspaceJSON>()\n    const { toolboxConfiguration } = useDataToolbox(source)\n    const theme = darkMode === \"dark\" ? DarkTheme : Theme\n    const gridColor = darkMode === \"dark\" ? \"#555\" : \"#ccc\"\n\n    // ReactBlockly\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const blocklyRef = useRef(null)\n    const { workspace, xml } = useBlocklyWorkspace({\n        ref: blocklyRef,\n        toolboxConfiguration,\n        workspaceConfiguration: {\n            collapse: false,\n            disable: false,\n            comments: false,\n            css: true,\n            trashcan: false,\n            sounds: false,\n            grid: {\n                spacing: 25,\n                length: 1,\n                colour: gridColor,\n                snap: true,\n            },\n            renderer: \"zelos\",\n            theme,\n            oneBasedIndex: false,\n            move: {\n                scrollbars: {\n                    vertical: true,\n                    horizontal: true,\n                },\n            },\n            media: withPrefix(\"blockly/media/\"),\n            zoom: {\n                controls: true,\n                wheel: true,\n                startScale: 1.0,\n                maxScale: 3,\n                minScale: 0.1,\n                scaleSpeed: 1.2,\n                pinch: true,\n            },\n        },\n        initialXml: initialXml,\n        onImportXmlError: () => setError(\"Error loading blocks...\"),\n    }) as { workspace: WorkspaceSvg; xml: string }\n\n    // store ref\n    useEffect(() => {\n        if (workspaceRef) {\n            workspaceRef.current = workspace\n            return () => (workspaceRef.current = undefined)\n        }\n    }, [workspace, workspaceRef])\n\n    // plugins\n    useBlocklyPlugins(workspace)\n    useBlocklyEvents(workspace)\n\n    // blockly did a change\n    useEffect(() => {\n        if (!workspace || workspace.isDragging()) return\n\n        onXmlChange?.(xml)\n\n        // save json\n        if (onJSONChange) {\n            // emit json\n            const newSource = domToJSON(workspace)\n            if (JSON.stringify(newSource) !== JSON.stringify(source)) {\n                setSource(newSource)\n                onJSONChange?.(newSource)\n            }\n        }\n    }, [workspace, xml])\n\n    // resize blockly\n    useEffect(() => {\n        const observer = new ResizeObserver(() => workspace?.resize())\n        observer.observe(blocklyRef.current)\n        return () => observer.disconnect()\n    }, [workspace, blocklyRef.current])\n\n    return (\n        <>\n            <div className={clsx(classes.editor, className)} ref={blocklyRef} />\n            <BlocklyModalDialogs />\n        </>\n    )\n}\n","import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n"],"sourceRoot":""}