{"version":3,"file":"component---src-pages-editors-data-embed-tsx-aa1ba72bfb9f2413c7e3.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/workspacejson.ts","webpack://jacdac-docs/./src/components/hooks/useWindowEvent.ts","webpack://jacdac-docs/./src/pages/editors/data-embed.tsx"],"sourcesContent":["import { tidyHeaders } from \"../fields/tidy\"\nimport { BlockDataSet } from \"../toolbox\"\n\nexport interface VariableJSON {\n    // Boolean, Number, String, or service short id\n    type: string\n    id: string\n    name: string\n}\n\nexport type FieldJSON = {\n    id?: string\n    value?: number | string | boolean\n    // Boolean, Number, String, or service short id\n    variabletype?: string\n    // and extra fields, subclass\n}\n\nexport interface InputJSON {\n    type: number\n    name: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields: Record<string, FieldJSON>\n    child?: BlockJSON\n}\n\nexport interface BlockJSON {\n    type: string\n    id: string\n    children?: BlockJSON[]\n    value?: string | number | boolean\n    inputs?: InputJSON[]\n    next?: BlockJSON\n    warning?: string\n}\n\nexport function getField(block: BlockJSON, name: string): FieldJSON {\n    const inputs = block.inputs\n    for (let i = 0; i < inputs.length; ++i) {\n        const field = inputs[i].fields[name]\n        if (field) return field\n    }\n    return undefined\n}\n\nexport function getFieldValue(block: BlockJSON, name: string) {\n    const field = getField(block, name)\n    return field?.value\n}\n\nexport function resolveFieldColumn(\n    data: BlockDataSet,\n    b: BlockJSON,\n    fieldName: string,\n    options?: {\n        type?: \"string\" | \"number\" | \"boolean\"\n        required?: boolean\n    }\n): { column: string; warning?: string } {\n    const name = getFieldValue(b, fieldName) as string\n    const { type, required } = options || {}\n    const column = resolveHeader(data, name, type)\n    let warning: string\n    if (!column) {\n        if (required && !name) warning = \"missing column\"\n        else if (name) warning = `${name} not found in dataset`\n    }\n    return { column, warning }\n}\n\nexport function resolveHeader(\n    data: BlockDataSet,\n    name: string,\n    type?: \"string\" | \"number\" | \"boolean\"\n) {\n    if (!data || !name) return undefined\n\n    const { headers } = tidyHeaders(data, type)\n    return headers.indexOf(name) > -1 ? name : undefined\n}\n\nexport interface WorkspaceJSON {\n    variables: VariableJSON[]\n    blocks: BlockJSON[]\n}\n\nexport interface WorkspaceFile {\n    editor: string\n    xml: string\n    json: WorkspaceJSON\n}\n","import { DependencyList, useEffect } from \"react\"\n\nexport default function useWindowEvent<K extends keyof WindowEventMap>(type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    passive = false,\n    deps: DependencyList) {\n    useEffect(() => {\n        if (typeof window === \"undefined\")\n            return undefined; // SSR\n\n        // initiate the event handler\n        window.addEventListener<K>(type, listener, passive)\n\n        // this will clean up the event every time the component is re-rendered\n        return () => {\n            window.removeEventListener<K>(type, listener)\n        }\n    }, [type, listener, passive].concat(deps || []))\n}","import React, { useRef } from \"react\"\nimport {\n    BlockJSON,\n    getFieldValue,\n    resolveFieldColumn,\n} from \"../../components/blockly/dsl/workspacejson\"\nimport DataColumnChooserField from \"../../components/blockly/fields/DataColumnChooserField\"\nimport {\n    BlockDataSet,\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    ContentDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    OptionsInputDefinition,\n} from \"../../components/blockly/toolbox\"\nimport useWindowEvent from \"../../components/hooks/useWindowEvent\"\nimport { tidy, arrange, desc } from \"@tidyjs/tidy\"\nimport {\n    DslBlocksResponse,\n    DslMessage,\n    DslTransformMessage,\n} from \"../../components/blockly/dsl/iframedsl\"\nimport { Button } from \"gatsby-material-ui-components\"\n\nexport default function Page() {\n    const frame = useRef<HTMLIFrameElement>()\n    const dslidRef = useRef<string>(undefined)\n    const colour = \"#f01010\"\n    const blocks: BlockDefinition[] = [\n        {\n            kind: \"block\",\n            type: \"iframe_random\",\n            message0: \"iframe random\",\n            colour,\n            args0: [],\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: \"iframe_sort\",\n            message0: \"iframe arrange %1 %2\",\n            colour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                } as OptionsInputDefinition,\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            template: \"meta\",\n        },\n    ]\n    const category: ContentDefinition[] = [\n        {\n            kind: \"category\",\n            name: \"Custom\",\n            colour,\n            contents: blocks.map(\n                block => ({ kind: \"block\", type: block.type } as BlockReference)\n            ),\n        } as CategoryDefinition,\n    ]\n    const transforms: Record<\n        string,\n        (\n            b: BlockJSON,\n            dataset: BlockDataSet\n        ) => Promise<{ dataset: BlockDataSet; warning?: string }>\n    > = {\n        iframe_random: async () => {\n            console.debug(`hostdsl: random`)\n            const dataset = Array(10)\n                .fill(0)\n                .map((_, i) => ({ x: i, y: Math.random() }))\n            return { dataset }\n        },\n        iframe_sort: async (b, dataset) => {\n            console.debug(`hostdsl: sort`)\n            const { column, warning } = resolveFieldColumn(dataset, b, \"column\")\n            const order = getFieldValue(b, \"order\")\n            const descending = order === \"descending\"\n\n            console.debug(`hostdsl: sort`, {\n                b,\n                dataset,\n                column,\n                order,\n                descending,\n                warning,\n            })\n\n            if (!column) return Promise.resolve({ dataset, warning })\n            const res = tidy(\n                dataset,\n                arrange(descending ? desc(column) : column)\n            )\n            return { dataset: res, warning }\n        },\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const post = (payload: object) => {\n        frame.current.contentWindow.postMessage(payload, \"*\")\n    }\n\n    const handleBlocks = async (data: DslMessage) => {\n        console.debug(`hostdsl: sending blocks`)\n        post({ ...data, blocks, category } as DslBlocksResponse)\n    }\n\n    const handleTransform = async (data: DslTransformMessage) => {\n        console.log(`hostdsl: transform`)\n        const { blockId, workspace, dataset, ...rest } = data\n        const block = workspace.blocks.find(b => b.id === blockId)\n        const transformer = transforms[block.type]\n        const res = await transformer?.(block, dataset)\n        post({ ...rest, ...(res || {}) })\n    }\n\n    useWindowEvent(\n        \"message\",\n        (msg: MessageEvent<DslMessage>) => {\n            const { data } = msg\n            if (data.type !== \"dsl\") return\n            const { action, dslid } = data\n            switch (action) {\n                case \"mount\":\n                    dslidRef.current = dslid\n                    break\n                case \"unmount\":\n                    dslidRef.current = dslid\n                    break\n                case \"blocks\": {\n                    handleBlocks(data)\n                    break\n                }\n                case \"transform\": {\n                    handleTransform(data as DslTransformMessage)\n                    break\n                }\n            }\n        },\n        false,\n        []\n    )\n\n    const handleRefresh = () => {\n        post({ type: \"dsl\", action: \"change\", dslid: dslidRef.current })\n    }\n\n    return (\n        <>\n            <h1>Data Editor + hosted blocks</h1>\n            <p>\n                The data editor below is an example of hosted editor with\n                additional blocks injected by host (Custom category).\n            </p>\n            <p>\n                <Button\n                    title=\"Click this button to trigger a refresh\"\n                    onClick={handleRefresh}\n                >\n                    Refresh\n                </Button>\n            </p>\n            <iframe\n                ref={frame}\n                title=\"data editor\"\n                src=\"./data?embed=1\"\n                style={{\n                    border: \"none\",\n                    left: 0,\n                    top: 0,\n                    width: \"100vh\",\n                    height: \"80vh\",\n                }}\n            ></iframe>\n        </>\n    )\n}\n"],"names":["tidyHeaders","getField","block","name","inputs","i","length","field","fields","undefined","getFieldValue","value","resolveFieldColumn","data","b","fieldName","options","type","required","column","resolveHeader","warning","headers","indexOf","useEffect","useWindowEvent","listener","passive","deps","window","addEventListener","removeEventListener","concat","React","useRef","DataColumnChooserField","DATA_SCIENCE_STATEMENT_TYPE","tidy","arrange","desc","Button","Page","frame","dslidRef","colour","blocks","kind","message0","args0","nextStatement","dataPreviewField","template","KEY","previousStatement","category","contents","map","transforms","iframe_random","console","debug","dataset","Array","fill","_","x","y","Math","random","iframe_sort","order","descending","Promise","resolve","res","post","payload","current","contentWindow","postMessage","handleBlocks","handleTransform","log","blockId","workspace","rest","find","id","transformer","msg","action","dslid","handleRefresh","border","left","top","width","height"],"sourceRoot":""}