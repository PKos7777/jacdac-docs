{"version":3,"sources":["webpack://jacdac-docs/../src/components/lazy-hydrate.tsx"],"names":["lazyHydrate","root","hydrated","forceHydrate","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","current","render","hydrate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;SAgBgBA,C,CAAAA,C,EAedC,C,EACAC,C,EACAC,C,EAAAA;AAAAA,MAfEC,WAeFD;AAAAA,MAdEE,aAcFF;AAAAA,MAbEG,eAaFH;AAAAA,MAZEI,cAYFJ;AAAAA,MAXEK,oBAWFL;AAAAA,MAVEM,SAUFN;AAAAA,MATEO,kBASFP;AAAAA,MATEO,MACAC,QAQFR;AAAAA,MAREQ,mBAAW,EAAXA,GAAW,CAQbR;AAAAA,MAPES,oBAOFT;AAAAA,MANEU,qBAMFV;AAAAA,MANEU,MACAC,SAKFX;AAAAA,MALEW,8BAKFX;AAAAA,MAJKY,0NAILZ;AAAAA,MAGEa,IAMEZ,EANFY,KAHFb;AAAAA,MAIEc,IAKEb,EALFa,MAJFd;AAAAA,MAKEe,IAIEd,EAJFc,MALFf;AAAAA,MAMEgB,IAGEf,EAHFe,MANFhB;AAAAA,MAOEiB,IAEEhB,EAFFgB,WAPFjB;AAAAA,MAQmBkB,IACfjB,EADFS,eARFV;AAAAA,MAWMmB,IAAWC,KAAKC,SAALD,CAAeJ,CAAfI,CAXjBpB;AAaAQ;AACEG,gBADFH;AAEEC,qBAFFD;AAGEE;AAHFF,KAIKA,CAJLA;;AAOA,MAAMc,iBACJC,iDAACC,yDAADD,EAACC;AAAcT,YAAQA,CAAtBS;AAA8BX,WAAOA,CAArCW;AAA4CV,YAAQA;AAApDU,GAADD,eACEA,iDAACE,yDAADF,EAACE,kBACKC,8DACFT,CADES,EAEFtB,CAFEsB,EAGFX,CAHEW,EAIFb,CAJEa,EAKFZ,CALEY,EAMFR,CANEQ,EAOFf,CAPEe,EAQFjB,CAREiB,CADLD,CAADF,CADFA,eAcEA,iDAACI,yDAADJ,EAACI,kBACMf,CADNe,EACMf;AACLC,WAAOA,CADFD;AAELE,YAAQA,CAFHF;AAGLgB,eAAWrB;AAHNK,GADNe,EAKKE,8DACF1B,CADE0B,EAEFzB,CAFEyB,EAGFb,CAHEa,EAIF3B,CAJE2B,EAKFxB,CALEwB,EAMFV,CANEU,EAOFvB,CAPEuB,EAQFrB,CAREqB,CALLF,CAADJ,CAdFA,CADF;;AAyCA,SAPIzB,EAAKgC,OAALhC,KAAKgC,CAEU/B,EAAS+B,OAAT/B,IAAoBC,EAAa8B,OAAjC/B,GAA2CgC,6CAA3ChC,GAAoDiC,8CAF9DF,EAGER,CAHFQ,EAGahC,EAAKgC,OAHlBA,GAIP/B,EAAS+B,OAAT/B,GAAS+B,CAAU,CAJjBhC,GAIiB;AAIfA,MAAKgC,OAALhC,IACFiC,kDAAQ,IAARA,EAA0CjC,EAAKgC,OAA/CC,CADEjC;AAC6CgC,GAFnD;AAEmDA","file":"8368-795ed9806bb3ca140f9b.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    const doRender = hydrated.current || forceHydrate.current ? render : hydrate\n    doRender(component, root.current)\n    hydrated.current = true\n  }\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}