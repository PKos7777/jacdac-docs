{"version":3,"file":"2860-742ce8f7904bbd648bde.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/ui/KeyboardKeyInput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport { HidKeyboardModifiers } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport Keyboard from \"react-simple-keyboard\"\nimport \"react-simple-keyboard/build/css/index.css\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useId } from \"react-use-id-hook\"\nimport {\n    modifierCodes,\n    renderKeyboardKey,\n    selectors,\n} from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        capture: {\n            cursor: \"pointer\",\n            \"&:hover\": {\n                borderColor: theme.palette.primary.main,\n            },\n            \"&:focus\": {\n                borderColor: theme.palette.action.active,\n            },\n        },\n        darkKeyboard: {\n            backgroundColor: \"#333 !important\",\n            borderColor: \"#777 !important\",\n            color: \"white !important\",\n            \"& .hg-button\": {\n                background: \"rgba(0, 0, 0, 0.5) !important\",\n                color: \"white\",\n            },\n            \"& .hg-button.buttonSelected\": {\n                background: `${theme.palette.primary.dark} !important`,\n                color: \"white !important\",\n            },\n        },\n        keyboard: {\n            \"& .buttonSelected\": {\n                background: `${theme.palette.primary.dark} !important`,\n                color: \"white !important\",\n            },\n        },\n    })\n)\n\nexport default function KeyboardKeyInput(props: {\n    initialSelector?: number\n    initialModifiers?: HidKeyboardModifiers\n    selector?: number\n    modifiers?: HidKeyboardModifiers\n    onChange: (newSelector: number, newModifiers: HidKeyboardModifiers) => void\n}) {\n    const { initialSelector, initialModifiers, selector, modifiers, onChange } =\n        props\n    const uncontrolled = useMemo(\n        () => selector === undefined || modifiers === undefined,\n        []\n    )\n    const [selector_, setSelector_] = useState<number>(initialSelector || 0)\n    const [modifiers_, setModifiters_] = useState<HidKeyboardModifiers>(\n        initialModifiers || HidKeyboardModifiers.None\n    )\n    const { darkMode } = useContext(DarkModeContext)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyboardRef = useRef<any>()\n    const classes = useStyles()\n    const theme = `hg-theme-default hg-layout-default ${\n        darkMode === \"dark\" ? classes.darkKeyboard : classes.keyboard\n    }`\n    const keyboardId = useId()\n\n    const layout = {\n        default: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5} {f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6 7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space} {metaright} {altright}\",\n        ],\n    }\n    const display = {\n        \"{escape}\": \"esc ⎋\",\n        \"{tab}\": \"tab ⇥\",\n        \"{backspace}\": \"backspace ⌫\",\n        \"{enter}\": \"enter ↵\",\n        \"{capslock}\": \"caps lock ⇪\",\n        \"{shiftleft}\": \"shift ⇧\",\n        \"{shiftright}\": \"shift ⇧\",\n        \"{controlleft}\": \"ctrl ⌃\",\n        \"{controlright}\": \"ctrl ⌃\",\n        \"{altleft}\": \"alt ⌥\",\n        \"{altright}\": \"alt ⌥\",\n        \"{metaleft}\": \"cmd ⌘\",\n        \"{metaright}\": \"cmd ⌘\",\n    }\n    const handleKeyboardKeyPress = (code: string) => {\n        code = code.toLowerCase().replace(/[{}]/g, \"\")\n        let newSelector = selector_\n        let newModifiers = modifiers_\n        const msel = selectors[code]\n        const mcode = modifierCodes[code]\n        if (msel) {\n            if (msel === selector) newSelector = undefined\n            else newSelector = msel\n        } else {\n            if (mcode) {\n                if (newModifiers & mcode) newModifiers &= ~mcode\n                else newModifiers |= mcode\n            }\n        }\n        setSelector_(newSelector)\n        setModifiters_(newModifiers)\n        onChange(newSelector, newModifiers)\n    }\n\n    // update external values\n    useEffect(() => {\n        if (selector !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled selector`)\n            setSelector_(selector)\n        }\n    }, [selector])\n    useEffect(() => {\n        if (modifiers !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled modifier`)\n            setModifiters_(modifiers)\n        }\n    }, [modifiers])\n\n    const value = renderKeyboardKey(selector_, modifiers_, false)\n    useEffect(() => {\n        keyboardRef.current?.addButtonTheme(value, \"buttonSelected\")\n        return () =>\n            keyboardRef.current?.removeButtonTheme(value, \"buttonSelected\")\n    }, [value])\n\n    return (\n        <Keyboard\n            baseClass={keyboardId}\n            keyboardRef={r => (keyboardRef.current = r)}\n            onKeyPress={handleKeyboardKeyPress}\n            layout={layout}\n            theme={theme}\n            display={display}\n            mergeDisplay={true}\n        />\n    )\n}\n"],"names":["React","useContext","useEffect","useMemo","useRef","useState","createStyles","makeStyles","HidKeyboardModifiers","Keyboard","DarkModeContext","useId","modifierCodes","renderKeyboardKey","selectors","useStyles","theme","capture","cursor","borderColor","palette","primary","main","action","active","darkKeyboard","backgroundColor","color","background","dark","keyboard","KeyboardKeyInput","props","initialSelector","initialModifiers","selector","modifiers","onChange","uncontrolled","undefined","selector_","setSelector_","modifiers_","setModifiters_","None","darkMode","keyboardRef","classes","keyboardId","layout","default","display","handleKeyboardKeyPress","code","toLowerCase","replace","newSelector","newModifiers","msel","mcode","console","warn","value","current","addButtonTheme","removeButtonTheme","r"],"sourceRoot":""}