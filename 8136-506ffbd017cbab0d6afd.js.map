{"version":3,"sources":["webpack://jacdac-docs/./src/components/useFetch.ts","webpack://jacdac-docs/./src/components/github.ts","webpack://jacdac-docs/./src/components/semver.ts"],"names":["useFetch","url","options","useState","undefined","response","setResponse","error","setError","status","setStatus","loading","setLoading","useEffectAsync","mounted","fetch","res","json","ROOT","GITHUB_API_KEY","contentToFirmwareRelease","content","version","type","exec","name","sha","size","html_url","download_url","contentsToFirmwareReleases","contents","map","filter","r","sort","l","semverCmp","normalizeSlug","slug","replace","parseRepoUrl","m","owner","fetchLatestRelease","uri","resp","releases","ignoreThrottled","Error","fetchReleaseBinary","downloadUrl","headers","Accept","req","blob","firmware","fetchText","tag","path","mimeType","text","src","useFetchApi","console","log","useRepository","useLatestRelease","useLatestReleases","cmp","a","b","d","major","minor","patch","pre","length","i","aa","bb","test","parseInt","strcmp","tryParse","v","Number","MAX_SAFE_INTEGER","build","slice","split"],"mappings":"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","file":"8136-506ffbd017cbab0d6afd.js","sourcesContent":["import { useState } from \"react\"\nimport useEffectAsync from \"./useEffectAsync\"\n\nexport default function useFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const [response, setResponse] = useState<T>(undefined)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [error, setError] = useState<any>(undefined)\n    const [status, setStatus] = useState<number>(undefined)\n    const [loading, setLoading] = useState(true) // start in loading mode\n\n    useEffectAsync(\n        async mounted => {\n            setLoading(true)\n            try {\n                const res = await fetch(url, options)\n                if (!mounted()) return\n                const status = res.status\n                setStatus(status)\n                if (status >= 200 && status <= 204) {\n                    const json = await res.json()\n                    if (!mounted()) return\n                    setResponse(json)\n                }\n            } catch (error) {\n                if (!mounted()) return\n                setError(error)\n            } finally {\n                if (mounted()) setLoading(false)\n            }\n        },\n        [url]\n    )\n\n    return {\n        response,\n        error,\n        status,\n        loading,\n    }\n}\n","import { useMemo } from \"react\"\nimport { semverCmp } from \"./semver\"\nimport useFetch from \"./useFetch\"\n\nconst ROOT = \"https://api.github.com/\"\nexport const GITHUB_API_KEY = \"githubtoken\"\n\ninterface GithubContent {\n    name: string\n    sha: string\n    size: number\n    html_url: string\n    download_url: string\n    type: \"file\" | \"dir\" | \"symlink\"\n}\n\nexport interface GithubFirmwareRelease {\n    version: string\n    sha: string\n    size: number\n    html_url: string\n    download_url: string\n}\n\nexport interface GithubUser {\n    login: string\n    avatar_url: string\n    html_url: string\n}\n\nexport interface GithubRepository {\n    name: string\n    full_name: string\n    private: boolean\n    owner: GithubUser\n    description: string\n    fork: boolean\n    homepage: string\n    default_branch: string\n    organization: GithubUser\n    html_url: string\n}\n\nfunction contentToFirmwareRelease(\n    content: GithubContent\n): GithubFirmwareRelease {\n    // filter out non-file, non-uf2\n    const version =\n        content?.type === \"file\" &&\n        /^fw-(\\d+\\.\\d+.\\d+)\\.uf2$/.exec(content.name)?.[1]\n    if (!version) return undefined\n\n    return {\n        version,\n        sha: content.sha,\n        size: content.size,\n        html_url: content.html_url,\n        download_url: content.download_url,\n    }\n}\n\nfunction contentsToFirmwareReleases(contents: GithubContent[]) {\n    return contents\n        ?.map(contentToFirmwareRelease)\n        .filter(r => !!r)\n        .sort((l, r) => -semverCmp(l.version, r.version))\n}\n\nexport function normalizeSlug(slug: string): string {\n    return slug.replace(/^https:\\/\\/github.com\\//, \"\")\n}\n\nexport interface GitHubApiOptions {\n    ignoreThrottled?: boolean\n}\n\nexport function parseRepoUrl(url: string): { owner: string; name: string } {\n    const m = /^https:\\/\\/github\\.com\\/([^/ \\t]+)\\/([^/ \\t]+)\\/?$/.exec(\n        url || \"\"\n    )\n    if (m) return { owner: m[1], name: m[2] }\n    return undefined\n}\n\nexport async function fetchLatestRelease(\n    slug: string,\n    options?: GitHubApiOptions\n): Promise<GithubFirmwareRelease> {\n    // https://api.github.com/repos/microsoft/jacdac-msr-modules/contents/dist\n    const uri = `${ROOT}repos/${normalizeSlug(slug)}/contents/dist`\n    const resp = await fetch(uri)\n    //    console.log(resp)\n    switch (resp.status) {\n        case 200:\n        case 204: {\n            const contents: GithubContent[] = await resp.json()\n            const releases = contentsToFirmwareReleases(contents)\n            return releases[0]\n        }\n        case 404:\n            // unknow repo or no access\n            return undefined\n        case 403:\n            // throttled\n            if (options?.ignoreThrottled) return undefined\n            throw new Error(\"Too many calls to GitHub, try again later\")\n    }\n    throw new Error(`unknown status code ${resp.status}`)\n}\n\nexport async function fetchReleaseBinary(\n    slug: string,\n    version: string\n): Promise<Blob> {\n    // we are not using the release api because of CORS.\n    const downloadUrl = `https://raw.githubusercontent.com/${normalizeSlug(\n        slug\n    )}/main/dist/fw-${version}.uf2`\n    const req = await fetch(downloadUrl, {\n        headers: { Accept: \"application/octet-stream\" },\n    })\n    if (req.status == 200) {\n        const firmware = await req.blob()\n        return firmware\n    }\n    return undefined\n}\n\nexport async function fetchText(\n    slug: string,\n    tag: string,\n    path: string,\n    mimeType: string\n) {\n    const downloadUrl = `https://raw.githubusercontent.com/${normalizeSlug(\n        slug\n    )}/${tag}/${path}`\n    const req = await fetch(downloadUrl, {\n        headers: { Accept: mimeType },\n    })\n    if (req.status == 200) {\n        const src = await req.text()\n        return src\n    }\n    return undefined\n}\n\nfunction useFetchApi<T>(path: string, options?: GitHubApiOptions) {\n    const res = useFetch<T>(`${ROOT}${path}`)\n    if (res.status !== undefined)\n        switch (res.status) {\n            case 200:\n            case 201:\n            case 202:\n            case 203:\n            case 204:\n                break\n            case 404:\n                // unknow repo or no access\n                res.response = undefined\n                break\n            case 403:\n                // throttled\n                if (options?.ignoreThrottled) {\n                    res.response = undefined\n                    return res\n                } else\n                    throw new Error(\"Too many calls to GitHub, try again later\")\n\n            default:\n                console.log(`unknown status`, res)\n                throw new Error(`Unknown response from GitHub ${res.status}`)\n        }\n    return res\n}\n\nexport function useRepository(slug: string) {\n    const path = `repos/${normalizeSlug(slug)}`\n    const res = useFetchApi<GithubRepository>(path, { ignoreThrottled: true })\n    return res\n}\n\nexport function useLatestRelease(slug: string, options?: GitHubApiOptions) {\n    const resp = useLatestReleases(slug, options)\n    return {\n        ...resp,\n        response: resp.response?.[0],\n    }\n}\n\nexport function useLatestReleases(slug: string, options?: GitHubApiOptions) {\n    if (!slug)\n        return {\n            response: undefined,\n            loading: false,\n            error: undefined,\n            status: undefined,\n        }\n    const uri = `repos/${normalizeSlug(slug)}/contents/dist`\n    const res = useFetchApi<GithubContent[]>(uri, {\n        ...(options || {}),\n        ignoreThrottled: true,\n    })\n    return {\n        ...res,\n        response: contentsToFirmwareReleases(res.response),\n    }\n}\n","interface Version {\n    major: number\n    minor: number\n    patch: number\n    pre: string[]\n    build: string[]\n}\n\nfunction cmp(a: Version, b: Version) {\n    if (!a)\n        if (!b) return 0\n        else return 1\n    else if (!b) return -1\n    else {\n        let d = a.major - b.major || a.minor - b.minor || a.patch - b.patch\n        if (d) return d\n        if (a.pre.length == 0 && b.pre.length > 0) return 1\n        if (a.pre.length > 0 && b.pre.length == 0) return -1\n        for (let i = 0; i < a.pre.length + 1; ++i) {\n            const aa = a.pre[i]\n            const bb = b.pre[i]\n            if (!aa)\n                if (!bb) return 0\n                else return -1\n            else if (!bb) return 1\n            else if (/^\\d+$/.test(aa))\n                if (/^\\d+$/.test(bb)) {\n                    d = parseInt(aa) - parseInt(bb)\n                    if (d) return d\n                } else return -1\n            else if (/^\\d+$/.test(bb)) return 1\n            else {\n                d = strcmp(aa, bb)\n                if (d) return d\n            }\n        }\n        return 0\n    }\n}\n\nfunction tryParse(v: string): Version {\n    if (!v) return null\n    if (\"*\" === v) {\n        return {\n            major: Number.MAX_SAFE_INTEGER,\n            minor: Number.MAX_SAFE_INTEGER,\n            patch: Number.MAX_SAFE_INTEGER,\n            pre: [],\n            build: [],\n        }\n    }\n    if (/^v\\d/i.test(v)) v = v.slice(1)\n    const m = /^(\\d+)\\.(\\d+)\\.(\\d+)(-([0-9a-zA-Z\\-\\.]+))?(\\+([0-9a-zA-Z\\-\\.]+))?$/.exec(\n        v\n    )\n    if (m)\n        return {\n            major: parseInt(m[1]),\n            minor: parseInt(m[2]),\n            patch: parseInt(m[3]),\n            pre: m[5] ? m[5].split(\".\") : [],\n            build: m[7] ? m[7].split(\".\") : [],\n        }\n    return null\n}\n\nfunction strcmp(a: string, b: string) {\n    if (a === b) return 0\n    if (a < b) return -1\n    else return 1\n}\n\nexport function semverCmp(a: string, b: string) {\n    const aa = tryParse(a)\n    const bb = tryParse(b)\n    if (!aa && !bb) return strcmp(a, b)\n    else return cmp(aa, bb)\n}\n"],"sourceRoot":""}