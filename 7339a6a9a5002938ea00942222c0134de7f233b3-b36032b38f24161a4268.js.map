{"version":3,"file":"7339a6a9a5002938ea00942222c0134de7f233b3-b36032b38f24161a4268.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/symutils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./src/components/blockly/dsl/servicesbase.ts","webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts"],"sourcesContent":["import jsep from \"jsep\"\n\nexport interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n    // this handler support the editing experience but\n    // should not be compiled down or debugged\n    meta?: boolean\n}\n\nexport interface VMRole {\n    role: string\n    serviceClass: number\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    serverRoles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"start\"\n    | \"halt\"\n    | \"nop\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"wait\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"watch\"\n    | \"log\"\n    | \"roleBound\"\n    | \"roleBoundExpression\"\n    | \"onRoleConnected\"\n    | \"onRoleDisconnected\"\n    | \"raiseEvent\"\n\ntype Context = \"command\" | \"expression\" | \"either\"\n\nexport interface VMFunctionDescription {\n    id: string\n    args: (string | [string, any])[]\n    prompt: string\n    context: Context\n}\n\nexport const VMFunctions: VMFunctionDescription[] = [\n    {\n        id: \"start\",\n        args: [],\n        prompt: `start block`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"log\",\n        args: [\"number\"],\n        prompt: `not used`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBound\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role {1} {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBoundExpression\",\n        args: [\"Identifier\"],\n        prompt: `is role {1} bound?`,\n        context: \"expression\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import jsep from \"jsep\"\nimport { VMFunctionDescription } from \"./ir\"\nimport { parseIntFloat } from \"../../jacdac-spec/spectool/jdutils\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function exprVisitor(\n    parent: any,\n    current: any,\n    structVisit: (par: jsep.Expression, curr: jsep.Expression) => void\n) {\n    if (Array.isArray(current)) {\n        ;(current as any[]).forEach(c => exprVisitor(current, c, structVisit))\n    } else if (typeof current === \"object\") {\n        if (parent && current) structVisit(parent, current)\n        Object.keys(current).forEach((key: string) => {\n            exprVisitor(current, current[key], structVisit)\n        })\n    }\n}\n\ninterface Resolve {\n    role: string\n    client: boolean\n    spec: jdspec.ServiceSpec\n    rest: jsep.Expression\n}\n\nexport class SpecSymbolResolver {\n    registers: string[]\n    events: string[]\n    roles: string[]\n\n    constructor(\n        private readonly spec: jdspec.ServiceSpec,\n        private readonly role2spec: (role: string) => {\n            spec: jdspec.ServiceSpec\n            client: boolean\n        },\n        private readonly error: (m: string) => void\n    ) {\n        this.reset()\n    }\n\n    reset() {\n        this.registers = []\n        this.events = []\n        this.roles = []\n    }\n\n    public check(e: jsep.Expression, type: string) {\n        if (!e) {\n            this.error(`expression is undefined`)\n            return false\n        } else if (e.type !== type) {\n            this.error(`expected ${type}; got ${e.type}`)\n            return false\n        }\n        return true\n    }\n\n    public specResolve(e: jsep.Expression): Resolve {\n        let ret: Resolve = undefined\n        if (this.spec) {\n            ret = {\n                role: this.spec.shortName,\n                spec: this.spec,\n                client: true,\n                rest: e,\n            }\n        } else if (e.type === \"Identifier\") {\n            return undefined\n        } else if (\n            this.check(e, \"MemberExpression\") &&\n            this.check((e as jsep.MemberExpression).object, \"Identifier\") &&\n            this.role2spec\n        ) {\n            const obj = (e as jsep.MemberExpression).object as jsep.Identifier\n            if (obj.name.startsWith(\"$\")) return undefined\n            if (!this.role2spec(obj.name)) {\n                this.error(`no specification found for ${obj.name}`)\n            }\n            const { spec, client } = this.role2spec(obj.name)\n            ret = {\n                role: obj.name,\n                spec,\n                client,\n                rest: (e as jsep.MemberExpression).property,\n            }\n        }\n        if (ret && this.roles.indexOf(ret.role) < 0) this.roles.push(ret.role)\n        return ret\n    }\n\n    public destructAccessPath(e: jsep.Expression, expectIdentifier = false) {\n        if (e.type === \"Identifier\") {\n            return [(e as jsep.Identifier).name, \"\"]\n        } else if (!expectIdentifier && e.type === \"MemberExpression\") {\n            const object = (e as jsep.MemberExpression)\n                .object as jsep.Identifier\n            const property = (e as jsep.MemberExpression)\n                .property as jsep.Identifier\n            if (\n                this.check(object, \"Identifier\") &&\n                this.check(property, \"Identifier\")\n            )\n                return [object.name, property.name]\n            return undefined\n        } else {\n            if (!expectIdentifier)\n                this.error(\n                    `expected Identifier or MemberExpression; got ${e.type}`\n                )\n            else this.error(`expected Identifier; got ${e.type}`)\n            return undefined\n        }\n    }\n\n    public lookupEvent(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [id, _] = this.destructAccessPath(rest, true)\n        const events = spec.packets?.filter(pkt => pkt.kind === \"event\")\n        const pkt = events.find(p => p.name === id)\n        if (!pkt) {\n            this.error(`no event ${id} in specification`)\n            return undefined\n        } else {\n            const ev = `${role}.${id}`\n            if (this.events.indexOf(ev) < 0) this.events.push(ev)\n            return pkt\n        }\n    }\n\n    public lookupRegister(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        this.lookupRegisterRaw(spec, root, fld)\n        const reg = `${role}.${root}`\n        if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n    }\n\n    private lookupRegisterRaw(\n        spec: jdspec.ServiceSpec,\n        root: string,\n        fld: string\n    ) {\n        const reg = getRegister(spec, root, fld)\n        if (\n            reg.pkt &&\n            ((!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat)) ||\n                (reg.fld &&\n                    reg.fld.type &&\n                    !isBoolOrNumericFormat(reg.fld.type)))\n        )\n            this.error(\"only bool/numeric registers allowed\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n    }\n\n    public lookupReplace(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        if (Array.isArray(parent)) {\n            const replace = this.lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child) parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (\n                parent?.type === \"CallExpression\" &&\n                child === (<jsep.CallExpression>parent).callee\n            )\n                return\n            const replace = this.lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n    }\n\n    private lookup(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        const resolve = this.specResolve(child)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        try {\n            try {\n                const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                const lit: jsep.Literal = {\n                    type: \"Literal\",\n                    value: val,\n                    raw: val.toString(),\n                }\n                return lit\n            } catch (e) {\n                this.lookupRegisterRaw(spec, root, fld)\n                const reg = `${role}.${root}`\n                if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n            }\n        } catch (e) {\n            let pkt: jdspec.PacketInfo = undefined\n            if (events.length) pkt = events.find(pkt => pkt.name === root)\n            else {\n                // we need a fully qualified name\n                pkt = spec.packets?.find(\n                    p => p.kind === \"event\" && p.name === root\n                )\n            }\n            if (!pkt) this.error(`event ${root} not bound correctly`)\n            else if (!fld && pkt.fields.length > 0)\n                this.error(`event ${root} has fields, but no field specified`)\n            else if (fld && !pkt.fields.find(f => f.name === fld))\n                this.error(\n                    `Field ${fld} of event ${root} not found in specification`\n                )\n        }\n    }\n}\n\nexport class VMChecker {\n    constructor(\n        private readonly resolver: SpecSymbolResolver,\n        private readonly supportedExpression: (\n            type: jsep.ExpressionType\n        ) => boolean,\n        private readonly error: (m: string) => void\n    ) {}\n\n    checkCommand(\n        root: jsep.CallExpression,\n        funs: VMFunctionDescription[]\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (!root || !root.type || root.type != \"CallExpression\") {\n            this.error(\n                `a command must be a call expression in JavaScript syntax`\n            )\n            return\n        }\n        // check for unsupported expression types\n        exprVisitor(null, root, (p, c) => {\n            if (!this.supportedExpression(c.type as jsep.ExpressionType))\n                this.error(\n                    `Expression of type ${c.type} not currently supported`\n                )\n        })\n        // first lookup in known functions\n        const callee = (root.callee as jsep.Identifier)?.name\n        const cmdIndex = funs.findIndex(r => callee === r.id)\n        let theCommand: jdspec.PacketInfo = undefined\n        if (cmdIndex < 0) {\n            if (root.callee.type === \"MemberExpression\") {\n                const { role, spec, rest, client } = this.resolver.specResolve(\n                    root.callee as jsep.MemberExpression\n                )\n                const [command, _] = this.resolver.destructAccessPath(rest)\n                if (!role) {\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                    return undefined\n                } else {\n                    // we have a spec, now look for command\n                    const commands = spec.packets?.filter(\n                        pkt =>\n                            (client && pkt.kind === \"command\") ||\n                            (!client && pkt.kind === \"event\")\n                    )\n                    theCommand = commands.find(c => c?.name === command)\n                    if (!theCommand) {\n                        this.error(\n                            `cannot find command named ${command} in spec ${spec.shortName}`\n                        )\n                    } else\n                        return this.processSpecCommandFunction(root, theCommand)\n                }\n            } else {\n                if (callee)\n                    this.error(`${callee} is not a registered function.`)\n                else\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                return undefined\n            }\n        } else return this.processTestFunction(funs, root, cmdIndex)\n        return undefined\n    }\n\n    private processSpecCommandFunction(\n        root: jsep.CallExpression,\n        command: jdspec.PacketInfo\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (root.arguments.length !== command?.fields?.length) {\n            this.error(\n                `Command ${command.name} expects ${command.fields.length} arguments: got ${root.arguments.length}`\n            )\n        } else {\n            const args = root.arguments\n            args.forEach(arg => {\n                this.visitReplace(root, arg, [])\n            })\n        }\n        return [undefined, root]\n    }\n\n    private processTestFunction(\n        funs: VMFunctionDescription[],\n        root: jsep.CallExpression,\n        cmdIndex: number\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        const callee = (root.callee as jsep.Identifier)?.name\n        // check arguments\n        const command = funs[cmdIndex]\n        const minArgs = argsRequiredOptional(command.args).length\n        const maxArgs = command.args.length\n        if (root.arguments.length < minArgs) {\n            this.error(\n                `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        } else if (root.arguments.length > maxArgs) {\n            this.error(\n                `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        }\n        // deal with optional arguments\n        const newExpressions: jsep.Expression[] = []\n        for (let i = root.arguments.length; i < command.args.length; i++) {\n            const [name, def] = command.args[i] as [string, any]\n            const lit: jsep.Literal = {\n                type: \"Literal\",\n                value: def,\n                raw: def.toString(),\n            }\n            newExpressions.push(lit)\n        }\n        root.arguments = root.arguments.concat(newExpressions)\n        // type checking of arguments.\n        this.processTestArguments(command, root)\n        return [command, root]\n        function argsRequiredOptional(args: any[], optional = false) {\n            return args.filter(\n                a =>\n                    (!optional && typeof a === \"string\") ||\n                    (optional && typeof a === \"object\")\n            )\n        }\n    }\n\n    private processTestArguments(\n        command: VMFunctionDescription,\n        root: jsep.CallExpression\n    ) {\n        const args = root.arguments\n        const eventSymTable: jdspec.PacketInfo[] = []\n        args.forEach((arg, a) => {\n            let argType = command.args[a]\n\n            if (typeof argType === \"object\") argType = command.args[a][0]\n\n            if (\n                argType === \"register\" ||\n                argType === \"event\" ||\n                argType === \"Identifier\"\n            ) {\n                if (argType === \"Identifier\") {\n                    this.resolver.check(arg, \"Identifier\")\n                } else if (argType === \"event\" && a === 0) {\n                    const pkt = this.resolver.lookupEvent(arg)\n                    if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                } else if (argType === \"register\") {\n                    try {\n                        this.resolver.lookupRegister(arg)\n                    } catch (e) {\n                        this.error(e.message)\n                    }\n                }\n            } else if (argType === \"events\") {\n                if (arg.type != \"ArrayExpression\")\n                    this.error(\n                        `events function expects a list of service events`\n                    )\n                else {\n                    (arg as jsep.ArrayExpression).elements.forEach(e =>\n                        this.resolver.lookupEvent(e)\n                    )\n                }\n            } else if (argType === \"number\" || argType === \"boolean\") {\n                this.visitReplace(root, arg, eventSymTable)\n            } else {\n                this.error(`unexpected argument type (${argType})`)\n            }\n        })\n    }\n\n    private visitReplace(\n        root: jsep.CallExpression,\n        arg: jsep.Expression,\n        eventSymTable: jdspec.PacketInfo[] = []\n    ) {\n        exprVisitor(root, arg, (p, c) => {\n            if (p.type !== \"MemberExpression\" && c.type === \"Identifier\") {\n                this.resolver.lookupReplace(\n                    eventSymTable,\n                    p,\n                    c as jsep.Identifier\n                )\n            } else if (c.type === \"ArrayExpression\") {\n                this.error(`array expression not allowed in this context`)\n            } else if (\n                p.type !== \"MemberExpression\" &&\n                c.type === \"MemberExpression\"\n            ) {\n                const member = c as jsep.MemberExpression\n                // A member expression must be of form <Identifier>.<memberExpression|Identifier>\n                if (member.object.type !== \"Identifier\" || member.computed) {\n                    this.error(\"property access must be of form id.property\")\n                } else {\n                    this.resolver.lookupReplace(\n                        eventSymTable,\n                        p,\n                        c as jsep.MemberExpression\n                    )\n                }\n            }\n        })\n    }\n}\n\n// private stuff\n\nfunction isBoolOrNumericFormat(fmt: string) {\n    return fmt === \"bool\" || /^[ui]\\d+/i.test(fmt)\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\n\nfunction lookupRegister(\n    spec: jdspec.ServiceSpec,\n    id: string\n): jdspec.PacketInfo {\n    return spec.packets.find(pkt => isRegister(pkt) && pkt.name === id)\n}\n\nfunction lookupField(\n    pkt: jdspec.PacketInfo,\n    field: string\n): jdspec.PacketMember {\n    return pkt.fields.find(member => member.name === field)\n}\n\ninterface RegField {\n    pkt: jdspec.PacketInfo\n    fld: jdspec.PacketMember\n}\n\nfunction getRegister(\n    spec: jdspec.ServiceSpec,\n    root: string,\n    fld = \"\"\n): RegField {\n    const ret: RegField = { pkt: undefined, fld: undefined }\n    ret.pkt = lookupRegister(spec, root)\n    if (!ret.pkt) {\n        throw new Error(\n            `no register ${root} found in service ${spec.shortName}`\n        )\n    } else if (fld) {\n        ret.fld = lookupField(ret.pkt, fld)\n        if (!ret.fld)\n            throw new Error(\n                `no field ${fld} found in register ${root} of service ${spec.shortName}`\n            )\n    }\n    return ret\n}\n","import jsep from \"jsep\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecificationFromName,\n} from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions,\n} from \"./ir\"\nimport {\n    VMChecker,\n    SpecSymbolResolver,\n} from \"./symutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram({ roles, serverRoles, handlers }: VMProgram) {\n    const newProgram: VMProgram = { roles, serverRoles, handlers: [] }\n    // process start blocks\n    handlers.forEach(startBlock)\n    // remove if-then-else\n    newProgram.handlers = handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction checkCall(cmd: VMBase, id: string) {\n    if (cmd.type === \"cmd\") {\n        const callee = (cmd as VMCommand).command.callee\n        if (callee.type === \"Identifier\") {\n            const cid = (callee as jsep.Identifier).name\n            return id === cid\n        }\n    }\n    return undefined\n}\n\nfunction startBlock(handler: VMHandler) {\n    if (handler.commands.length && checkCall(handler.commands[0], \"start\")) {\n        handler.commands.shift()\n        handler.commands.push({\n            type: \"cmd\",\n            command: {\n                type: \"CallExpression\",\n                callee: toIdentifier(\"halt\"),\n                arguments: [],\n            },\n        } as VMCommand)\n    }\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    let roleFound = info.roles.find(pair => pair.role === role)\n    let client = true\n    if (!roleFound) {\n        roleFound = info.serverRoles.find(pair => pair.role === role)\n        client = false\n    }\n    if (roleFound) {\n        // must succeed\n        const spec = serviceSpecificationFromClassIdentifier(\n            roleFound.serviceClass\n        )\n        assert(!!spec, `service class ${roleFound.serviceClass} not resolved`)\n        return { spec, client }\n    } else {\n        const spec = serviceSpecificationFromName(role)\n        return { spec, client: true }\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","import jsep from \"jsep\"\nimport { Theme } from \"@material-ui/core\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_JOYSTICK,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isHighLevelEvent,\n    isHighLevelRegister,\n    isCommand,\n    isSensor,\n    serviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    JSON_TYPE,\n    NUMBER_TYPE,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n    STRING_TYPE,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport {\n    CompileCommandToVMOptions,\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { Variables } from \"blockly\"\nimport { paletteColorByIndex } from \"./palette\"\nimport { VariableJSON } from \"../../../../jacdac-ts/src/dsl/workspacejson\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\n\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\n\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return field.encoding === \"JSON\"\n        ? JSON_TYPE\n        : isBooleanField(field)\n        ? BOOLEAN_TYPE\n        : isStringField(field)\n        ? STRING_TYPE\n        : isNumericType(field)\n        ? NUMBER_TYPE\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_BOOTLOADER,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\n// internal helper functions\nconst customShadows = [\n    {\n        serviceClass: SRV_SERVO,\n        kind: \"rw\",\n        identifier: ServoReg.Angle,\n        field: \"_\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: ServoAngleField.SHADOW.type,\n        },\n    },\n    {\n        serviceClass: SRV_BUZZER,\n        kind: \"command\",\n        identifier: BuzzerCmd.PlayNote,\n        field: \"frequency\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: NoteField.SHADOW.type,\n        },\n    },\n]\n\nconst lookupCustomShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customShadows.find(\n        cs =>\n            cs.serviceClass === service.classIdentifier &&\n            cs.kind == info.kind &&\n            cs.identifier === info.identifier &&\n            cs.field == field.name\n    )?.shadow\n\nconst fieldsSupported = (pkt: jdspec.PacketInfo) =>\n    pkt.fields.every(toBlocklyType)\n\nconst fieldName = (reg: jdspec.PacketInfo, field: jdspec.PacketMember) =>\n    field.name === \"_\" ? reg.name : field.name\n\nconst fieldToShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n): BlockReference =>\n    lookupCustomShadow(service, info, field) ||\n    (isBooleanField(field)\n        ? { kind: \"block\", type: \"jacdac_on_off\" }\n        : isStringField(field)\n        ? { kind: \"block\", type: \"text\" }\n        : field.unit === \"°\"\n        ? {\n              kind: \"block\",\n              type: \"jacdac_angle\",\n          }\n        : field.unit === \"/\"\n        ? { kind: \"block\", type: \"jacdac_ratio\" }\n        : /^%/.test(field.unit)\n        ? { kind: \"block\", type: \"jacdac_percent\" }\n        : field.type === \"u8\"\n        ? { kind: \"block\", type: \"jacdac_byte\" }\n        : {\n              kind: \"block\",\n              type: \"math_number\",\n              value: field.defaultValue || 0,\n              min: field.typicalMin || field.absoluteMin,\n              max: field.typicalMax || field.absoluteMax,\n          })\n\nconst variableName = (srv: jdspec.ServiceSpec, client: boolean) =>\n    `${humanify(srv.camelName).toLowerCase()}${client ? \"\" : \" server\"} 1`\n\nconst isEnabledRegister = (info: jdspec.PacketInfo) =>\n    info.fields.length === 1 &&\n    info.fields[0].type === \"bool\" &&\n    info.name === \"enabled\"\n\nconst customMessage = (\n    srv: jdspec.ServiceSpec,\n    reg: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customMessages.find(\n        m =>\n            m.service === srv.classIdentifier &&\n            m.register === reg.identifier &&\n            m.field === field.name\n    )\n\nconst eventFieldGroups = [\n    {\n        output: NUMBER_TYPE,\n        filter: isNumericType,\n    },\n    {\n        output: BOOLEAN_TYPE,\n        filter: isBooleanField,\n    },\n    {\n        output: STRING_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding !== \"JSON\",\n    },\n    {\n        output: JSON_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding === \"JSON\",\n    },\n]\n\ntype ServicePackets = {\n    service: jdspec.ServiceSpec\n    packets: jdspec.PacketInfo[]\n}\n\n// exports\n\nexport function toRoleType(service: jdspec.ServiceSpec, client = true) {\n    return `${service.classIdentifier}:${client ? \"client\" : \"server\"}`\n}\n\nexport function parseRoleType(v: VariableJSON) {\n    const split = v.type.split(\":\")\n    return {\n        role: v.name,\n        serviceClass: parseInt(split[0]),\n        client: split.length === 2 ? split[1] === \"client\" : true,\n    }\n}\n\nexport const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n    info.fields.map(field => ({\n        type: \"input_value\",\n        name: fieldName(info, field),\n        check: toBlocklyType(field),\n    }))\n\nexport const fieldsToValues = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo\n) =>\n    toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n        info.fields,\n        field => fieldName(info, field),\n        field => fieldToShadow(service, info, field)\n    )\n\nexport const fieldsToMessage = (info: jdspec.PacketInfo) =>\n    info.fields.map((field, i) => `${humanify(field.name)} %${2 + i}`).join(\" \")\n\nexport interface ServiceRegister {\n    service: jdspec.ServiceSpec\n    register: jdspec.PacketInfo\n}\n\ninterface ServiceRegisterField extends ServiceRegister {\n    field: jdspec.PacketMember\n    einfo: jdspec.EnumInfo\n}\n\nexport const serviceHelp = (service: jdspec.ServiceSpec) => {\n    return withPrefix(`/services/${service.shortId}`)\n}\n\nconst sensorColor = paletteColorByIndex(1)\nconst otherColor = paletteColorByIndex(3)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const createServiceColor = (theme: Theme) => {\n    const serviceColor = (srv: jdspec.ServiceSpec) =>\n        isSensor(srv) ? sensorColor : otherColor\n    return serviceColor\n}\n\nexport const roleVariable = (\n    service: jdspec.ServiceSpec,\n    client = true\n): VariableInputDefinition => {\n    return {\n        type: \"field_variable\",\n        name: \"role\",\n        variable: variableName(service, client),\n        variableTypes: [toRoleType(service, client)],\n        defaultType: toRoleType(service, client),\n    }\n}\n\nexport const getServiceInfo = () => {\n    const allServices = serviceSpecifications()\n    const supportedServices = allServices\n        .filter(\n            service =>\n                !/^_/.test(service.shortId) && service.status !== \"deprecated\"\n        )\n        .filter(service => ignoredServices.indexOf(service.classIdentifier) < 0)\n    const registers = arrayConcatMany(\n        supportedServices.map(service =>\n            service.packets.filter(isHighLevelRegister).map(register => ({\n                service,\n                register,\n            }))\n        )\n    )\n    const [registerSimples, registerComposites] = splitFilter(\n        registers,\n        reg => reg.register.fields.length == 1\n    )\n    const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n        registerSimples,\n        ({ register }) => !!toBlocklyType(register.fields[0])\n    )\n    const registerSimpleEnumTypes = registerSimpleOthers\n        .filter(\n            ({ service, register }) => !!enumInfo(service, register.fields[0])\n        )\n        .map(({ service, register }) => ({\n            service,\n            register,\n            field: register.fields[0],\n            einfo: enumInfo(service, register.fields[0]),\n        }))\n    const registerCompositeEnumTypes = arrayConcatMany(\n        registerComposites.map(({ service, register }) =>\n            register.fields\n                .map(field => ({\n                    service,\n                    register,\n                    field,\n                    einfo: enumInfo(service, field),\n                }))\n                .filter(({ einfo }) => !!einfo)\n        )\n    )\n\n    return {\n        allServices,\n        supportedServices,\n        registers,\n        registerSimpleTypes,\n        registerComposites,\n        registerSimpleEnumTypes,\n        registerCompositeEnumTypes,\n        events: supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(isHighLevelEvent),\n            }))\n            .filter(kv => !!kv.events.length),\n\n        commands: arrayConcatMany(\n            supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        ),\n    }\n}\n\nexport class ServicesBaseDSL {\n    // only state required across methods of class\n    protected _serviceBlocks: ServiceBlockDefinition[]\n    protected _eventFieldBlocks: EventFieldDefinition[]\n    protected serviceColor: (srv: jdspec.ServiceSpec) => string\n\n    protected makeRegisterSimpleGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_simple_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0:\n                    customMessage(service, register, register.fields[0])?.get ||\n                    `%1 ${humanify(register.name)}`,\n                args0: [roleVariable(service, client)],\n                inputsInline: true,\n                output: toBlocklyType(register.fields[0]),\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field: register.fields[0],\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    protected makeRegisterSetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ register }) => !client || register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n    }\n\n    protected makeRegisterChangeByEventBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ service }) => !service.packets.some(isHighLevelEvent))\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${\n                    register.name\n                }${client ? \"\" : \"_server\"}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: this.serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n    }\n\n    protected makeRegisterNumericsGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    roleVariable(service, client),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n    }\n\n    protected makeRegisterEnumGetBlocks(\n        registers: ServiceRegisterField[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${\n                    field.name\n                }${client ? \"\" : \"_server\"}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    roleVariable(service, client),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    // generate accessor blocks for event/command data with numbers\n    protected makeFieldBlocks(sps: ServicePackets[], client = true) {\n        const worker = (\n            sp: ServicePackets,\n            output: string,\n            filter: (field: jdspec.PacketMember) => boolean\n        ) => {\n            const { service, packets } = sp\n            return packets\n                .filter(pkt => pkt.fields.filter(filter).length > 0)\n                .map(pkt => ({ service, pkt }))\n                .map(\n                    ({ service, pkt }) =>\n                        <EventFieldDefinition>{\n                            kind: \"block\",\n                            type: `jacdac_event_field_${output.toLowerCase()}_${\n                                service.shortId\n                            }_${pkt.name}${client ? \"\" : \"_server\"}`,\n                            message0: `${pkt.name} %1`,\n                            args0: [\n                                <InputDefinition>{\n                                    type: \"field_dropdown\",\n                                    name: \"field\",\n                                    options: pkt.fields.map(field => [\n                                        humanify(field.name),\n                                        field.name,\n                                    ]),\n                                },\n                            ],\n                            colour: this.serviceColor(service),\n                            inputsInline: true,\n                            tooltip: `Data fields of the ${pkt.name} ${\n                                client ? \"event\" : \"command\"\n                            }`,\n                            helpUrl: serviceHelp(service),\n                            service,\n                            event: pkt,\n                            output,\n                            template: \"event_field\",\n                        }\n                )\n        }\n\n        return arrayConcatMany(\n            arrayConcatMany(\n                eventFieldGroups.map(({ output, filter }) =>\n                    sps.map(sp => worker(sp, output, filter))\n                )\n            )\n        )\n    }\n\n    protected createCategoryHelper(options: CreateCategoryOptions) {\n        const { theme, source, liveServices } = options\n        this.serviceColor = createServiceColor(theme)\n\n        const blockServices: { serviceClass: number }[] =\n            source?.variables\n                .map(parseRoleType)\n                .filter(\n                    vt =>\n                        !!serviceSpecificationFromClassIdentifier(\n                            vt.serviceClass\n                        )\n                ) || []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition?.template === \"event\")\n                .map(({ block, definition }) => {\n                    const { events } = definition as EventBlockDefinition\n                    if (events.length === 1) return events[0]\n                    else {\n                        const eventName = block.inputs[0].fields[\"event\"]\n                            .value as string\n                        return events.find(ev => ev.name === eventName)\n                    }\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(pair =>\n                              services.find(\n                                  service =>\n                                      service.classIdentifier ===\n                                      pair.serviceClass\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(s => s.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const getFieldBlocks = (\n            service: jdspec.ServiceSpec,\n            fieldBlocks: EventFieldDefinition[]\n        ) =>\n            fieldBlocks\n                .filter(\n                    ev => ev.service === service && usedEvents.has(ev.event)\n                )\n                .map<BlockReference>(block => ({\n                    kind: \"block\",\n                    type: block.type,\n                    values: block.values,\n                }))\n\n        const makeCategory = (\n            service: jdspec.ServiceSpec,\n            isClient: boolean,\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBLocks: EventFieldDefinition[]\n        ) => {\n            return {\n                kind: \"category\",\n                name: service.name + (isClient ? \"\" : \" Server\"),\n                colour: this.serviceColor(service),\n                contents: [\n                    <ButtonDefinition>{\n                        kind: \"button\",\n                        text: `Add ${service.name} ${\n                            isClient ? \"role\" : \"server\"\n                        }`,\n                        callbackKey: `jacdac_add_role_callback_${toRoleType(\n                            service,\n                            isClient\n                        )}`,\n                        callback: workspace =>\n                            Variables.createVariableButtonHandler(\n                                workspace,\n                                null,\n                                toRoleType(service, isClient)\n                            ),\n                    },\n                    ...serviceBlocks.map<BlockReference>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...getFieldBlocks(service, eventFieldBLocks),\n                ],\n            }\n        }\n\n        return (\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBlocks: EventFieldDefinition[],\n            client = true\n        ) =>\n            toolboxServices\n                .map(serviceClient => ({\n                    serviceClient,\n                    serviceBlocks: serviceBlocks.filter(\n                        block => block.service === serviceClient\n                    ),\n                }))\n                .map<CategoryDefinition>(\n                    sc =>\n                        makeCategory(\n                            sc.serviceClient,\n                            client,\n                            sc.serviceBlocks,\n                            eventFieldBlocks\n                        ) as CategoryDefinition\n                )\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const makeAwaitEvent = (\n            cmd: string,\n            role: string,\n            eventName: string\n        ) => {\n            return <CompileEventToVMResult>{\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments:\n                        cmd == \"awaitEvent\"\n                            ? [\n                                  toMemberExpression(\n                                      role.toString(),\n                                      eventName.toString()\n                                  ),\n                              ]\n                            : [\n                                  toIdentifier(role.toString()),\n                                  toIdentifier(eventName.toString()),\n                              ],\n                    callee: toIdentifier(cmd),\n                },\n                event: {\n                    role: role.toString(),\n                    event: eventName.toString(),\n                },\n            }\n        }\n\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return makeAwaitEvent(\n                    \"awaitEvent\",\n                    role.toString(),\n                    eventName.toString()\n                )\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case ROLE_BOUND_EVENT_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        const { value: eventName } = inputs[0].fields[\"event\"]\n                        return makeAwaitEvent(\n                            \"roleBound\",\n                            role.toString(),\n                            eventName.toString()\n                        )\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                const errors: VMError[] = []\n                switch (type) {\n                    case ROLE_BOUND_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        return {\n                            expr: {\n                                type: \"CallExpression\",\n                                arguments: [toIdentifier(role.toString())],\n                                callee: toMemberExpression(\n                                    \"$fun\",\n                                    \"roleBoundExpression\"\n                                ),\n                            } as jsep.Expression,\n                            errors,\n                        }\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileCommandToVM(options: CompileCommandToVMOptions) {\n        const { event, block, definition, blockToExpression } = options\n        const { template } = definition\n        const { inputs } = block\n        switch (template) {\n            case \"register_set\": {\n                // TODO: need to handle the case of writing a register with fields\n                const { register } = definition as RegisterBlockDefinition\n                const exprsErrors = inputs.map(a => {\n                    return blockToExpression(event, a.child)\n                })\n                const { value: role } = inputs[0].fields.role\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role as string, register.name),\n                            ...exprsErrors.map(p => p.expr),\n                        ],\n                        callee: toIdentifier(\"writeRegister\"),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"raiseNo\":\n            case \"raiseArgs\":\n            case \"command\": {\n                const { command: serviceCommand } =\n                    definition as CommandBlockDefinition\n                const { value: role } = inputs[0].fields.role\n                const eventName =\n                    template === \"raiseNo\"\n                        ? inputs[0].fields[\"event\"].value.toString()\n                        : \"\"\n                const exprsErrors =\n                    template === \"raiseNo\"\n                        ? []\n                        : inputs.map(a => {\n                              return blockToExpression(event, a.child)\n                          })\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: exprsErrors.map(p => p.expr),\n                        callee: toMemberExpression(\n                            role as string,\n                            eventName ? eventName : serviceCommand.name\n                        ),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"server\": {\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"nop\"),\n                    }),\n                    errors: [],\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case SET_STATUS_LIGHT_BLOCK: {\n                        console.log(\"SET_STATUS\")\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n}\n","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import jsep from \"jsep\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { makeVMBase } from \"../../vm/VMgenerator\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    types: [\"variables_get\", \"variables_set\", \"math_change\"],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n    compileExpressionToVM: ({ block /*definition*/ }) => {\n        const { type, inputs } = block\n        if (type === \"variables_get\") {\n            const { value: variable } = inputs[0].fields.var\n            const ret = {\n                expr: toMemberExpression(\"$var\", variable.toString()),\n                errors: [],\n            }\n            return ret\n        }\n        return undefined\n    },\n    compileCommandToVM: ({\n        event,\n        block,\n        /*definition,*/ blockToExpression,\n    }) => {\n        const { type, inputs } = block\n        if (type === \"math_change\" || type === \"variables_set\") {\n            const { expr, errors } = blockToExpression(event, inputs[0].child)\n            const { value: variable } = inputs[0].fields.var\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [\n                        toMemberExpression(\"$var\", variable.toString()),\n                        type === \"variables_set\"\n                            ? expr\n                            : ({\n                                  type: \"BinaryExpression\",\n                                  operator: \"+\",\n                                  left: toMemberExpression(\n                                      \"$var\",\n                                      variable.toString()\n                                  ),\n                                  right: expr,\n                              } as jsep.BinaryExpression),\n                    ],\n                    callee: toIdentifier(\"writeLocal\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n}\nexport default variablesDsl\n","import jsep from \"jsep\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport { toIdentifier, RoleEvent } from \"../../../jacdac-ts/src/vm/compile\"\nimport {\n    BUILTIN_TYPES,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n} from \"../blockly/toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage, { resolveDsl } from \"../blockly/dsl/dsl\"\nimport { parseRoleType } from \"../blockly/dsl/servicesbase\"\nimport { splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockJSON, WorkspaceJSON } from \"../../../jacdac-ts/src/dsl/workspacejson\"\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport interface CmdWithErrors {\n    cmd: VMBase\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    console.debug(`compile vm`, { workspace, dsls })\n\n    if (!workspace) return undefined\n\n    const [roles, serverRoles]: [VMRole[], VMRole[]] = splitFilter(\n        workspace.variables\n            .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n            .map(parseRoleType),\n        r => r.client\n    )\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            const dsl = resolveDsl(dsls, type)\n            if (!dsl) {\n                console.warn(`unknown block ${type}`, {\n                    type,\n                    ev,\n                    block,\n                    d: Blockly.Blocks[type],\n                })\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n            } else {\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const res = dsl.compileExpressionToVM?.({\n                    event: ev,\n                    definition,\n                    block,\n                    blockToExpressionInner,\n                })\n                if (res) {\n                    if (res.errors) res.errors.forEach(e => errors.push(e))\n                    return res.expr\n                }\n\n                const { template } = definition\n                if (template === \"shadow\") {\n                    const field = inputs[0].fields[\"value\"]\n                    const v = field.value\n                    return <jsep.Literal>{\n                        type: \"Literal\",\n                        value: v,\n                        raw: v + \"\",\n                    }\n                }\n\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n                console.warn(`unsupported expression block ${type}`, {\n                    ev,\n                    block,\n                    definition,\n                })\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        console.debug(`block2c`, { event, type, block, inputs })\n        switch (type) {\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n\n                console.log(\"dynamic if\")\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const dsl = resolveDsl(dsls, type)\n                if (dsl) {\n                    const definition =\n                        resolveBlockDefinition<ServiceBlockDefinition>(type)\n                    const template = definition?.template\n                    if (template === \"meta\") return undefined\n                    const dslRes = dsl.compileCommandToVM?.({\n                        event,\n                        block,\n                        definition,\n                        blockToExpression,\n                    })\n                    if (dslRes) {\n                        dslRes.errors = processErrors(block, dslRes.errors)\n                        return dslRes\n                    }\n                }\n                console.warn(`unsupported command block ${type}`, { block })\n                return {\n                    cmd: undefined,\n                    errors: [\n                        {\n                            sourceId: block.id,\n                            message: `unsupported command block ${type}`,\n                        },\n                    ],\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks\n            ?.filter(child => !!child)\n            .forEach(child => {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child) || {}\n                    if (cmd) handler.commands.push(cmd)\n                    errors?.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    } else {\n                        console.debug(e)\n                    }\n                }\n            })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            let topMeta = false\n\n            try {\n                const dsl = resolveDsl(dsls, type)\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const { expression, errors, event, meta } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n                topMeta = meta\n\n                // if dsl didn't compile anything try again\n                const { template } = definition || {}\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            topErrors = [\n                                {\n                                    sourceId: top.id,\n                                    message: `unsupported handler block ${type}`,\n                                },\n                            ]\n                            console.debug(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n                meta: !!topMeta,\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        serverRoles,\n        handlers,\n    }\n}\n"],"names":["VMFunctions","id","args","prompt","context","parseIntFloat","exprVisitor","parent","current","structVisit","Array","isArray","forEach","c","Object","keys","key","SpecSymbolResolver","spec","role2spec","error","reset","registers","events","roles","check","e","type","specResolve","ret","undefined","role","shortName","client","rest","object","obj","name","startsWith","property","indexOf","push","destructAccessPath","expectIdentifier","lookupEvent","resolve","_","packets","filter","pkt","kind","find","p","ev","lookupRegister","root","fld","lookupRegisterRaw","reg","getRegister","isBoolOrNumericFormat","packFormat","lookupReplace","child","replace","lookup","i","callee","k","val","lit","value","raw","toString","length","fields","f","VMChecker","resolver","supportedExpression","checkCommand","funs","cmdIndex","findIndex","r","theCommand","command","commands","processSpecCommandFunction","processTestFunction","arguments","arg","visitReplace","minArgs","argsRequiredOptional","maxArgs","newExpressions","def","concat","processTestArguments","optional","a","eventSymTable","argType","message","elements","member","computed","fmt","test","isRegister","lookupField","field","Error","serviceSpecificationFromClassIdentifier","serviceSpecificationFromName","assert","toIdentifier","toMemberExpression","handlerVisitor","handler","visitITE","visitCommand","visitBase","base","ite","else","then","compileProgram","serverRoles","handlers","newProgram","startBlock","map","h","removeIfThenElse","errors","checkCall","cmd","cid","shift","newSequence","labels","labelId","time","end","expr","pop","getServiceFromRole","info","roleFound","pair","serviceClass","checkProgram","prog","allErrors","goodHandlers","errorFun","sourceId","symbolResolver","checker","errorCount","s","split","register","event","withPrefix","humanify","isNumericType","BuzzerCmd","JoystickReg","ServoReg","SRV_BOOTLOADER","SRV_BUZZER","SRV_CONTROL","SRV_JOYSTICK","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SERVO","SystemReg","Flags","isHighLevelEvent","isHighLevelRegister","isCommand","isSensor","serviceSpecifications","arrayConcatMany","splitFilter","toMap","uniqueMap","NoteField","ServoAngleField","BOOLEAN_TYPE","CODE_STATEMENT_TYPE","JSON_TYPE","NUMBER_TYPE","resolveBlockDefinition","STRING_TYPE","makeVMBase","Variables","paletteColorByIndex","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","isBooleanField","isStringField","toBlocklyType","encoding","enumInfo","srv","enums","ignoredServices","customMessages","service","Direction","get","customShadows","identifier","Angle","shadow","SHADOW","PlayNote","lookupCustomShadow","cs","classIdentifier","fieldsSupported","every","fieldName","fieldToShadow","unit","defaultValue","min","typicalMin","absoluteMin","max","typicalMax","absoluteMax","variableName","camelName","toLowerCase","isEnabledRegister","customMessage","m","eventFieldGroups","output","toRoleType","parseRoleType","v","parseInt","fieldsToFieldInputs","fieldsToValues","fieldsToMessage","join","serviceHelp","shortId","sensorColor","otherColor","createServiceColor","theme","serviceColor","roleVariable","variable","variableTypes","defaultType","getServiceInfo","allServices","supportedServices","status","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","kv","lowLevel","ServicesBaseDSL","makeRegisterSimpleGetBlocks","message0","args0","inputsInline","colour","tooltip","description","helpUrl","template","makeRegisterSetBlocks","values","previousStatement","nextStatement","makeRegisterChangeByEventBlocks","some","Intensity","makeRegisterNumericsGetBlocks","re","options","makeRegisterEnumGetBlocks","members","makeFieldBlocks","sps","worker","sp","createCategoryHelper","source","liveServices","blockServices","variables","vt","usedEvents","Set","blocks","block","definition","eventName","inputs","jdBlocks","_serviceBlocks","services","toolboxServices","diagnostics","specification","sort","l","localeCompare","getFieldBlocks","fieldBlocks","has","makeCategory","isClient","serviceBlocks","eventFieldBLocks","contents","text","callbackKey","callback","workspace","createVariableButtonHandler","eventFieldBlocks","serviceClient","sc","compileEventToVM","makeAwaitEvent","expression","blockToExpression","compileExpressionToVM","eventInfo","compileCommandToVM","exprsErrors","flatMap","serviceCommand","console","log","builtins","jacdac_on_off","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","createBlocks","style","precision","colourOptions","columns","blockToValue","variablesDsl","types","createCategory","custom","var","operator","left","right","BUILTIN_TYPES","Blockly","resolveDsl","processErrors","workspaceJSONToVMProgram","dsls","debug","EmptyExpression","blockIn","blockToExpressionInner","dsl","warn","d","Blocks","res","blockToCommand","thenHandler","elseHandler","t","addCommands","children","exprErrors","ifThenElse","dslRes","nop","top","topEvent","topErrors","topMeta","meta"],"sourceRoot":""}