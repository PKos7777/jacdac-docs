{"version":3,"sources":["webpack:///./src/components/hooks/useMicrophoneVolume.ts","webpack:///./src/components/widgets/TrendWidget.tsx","webpack:///./src/components/dashboard/DashboardSoundLevel.tsx"],"names":["useMicrophoneVolume","enabled","options","useMicrophoneAnalyzer","analyser","onClickActivateMicrophone","closeMicrophone","frequencies","useRef","Uint8Array","useEffect","volume","a","current","length","frequencyBinCount","getByteFrequencyData","max","bins","n","i","Math","TrendWidget","props","register","min","horizon","size","host","useServiceHost","service","color","useWidgetTheme","background","controlBackground","active","dataRef","undefined","pathRef","dx","m","w","h","dy","subscribe","CHANGE","unpackedValue","v","data","unshift","pop","useAnimationFrame","d","x","y","setAttribute","HostMicrophoneButton","enabledRegister","SoundLevelReg","Enabled","useRegisterBoolValue","useRegisterUnpackedValue","MinDecibels","minDecibels","MaxDecibels","maxDecibels","fftSize","smoothingTimeConstant","title","handleClick","sendSetBoolAsync","REFRESH","reading","setValues","DashboardSoundLevel","variant","services","soundLevelRegister","SoundLevel","soundLevel","onChange","event","newValue","svalue","sendGetAsync"],"mappings":"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","file":"87-4c00ee689e989cd33c13.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\";\n\nexport default function useMicrophoneVolume(enabled: boolean, options?: AudioAnalyzerOptions) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } = useMicrophoneAnalyzer(options);\n    const frequencies = useRef(new Uint8Array(0));\n\n    useEffect(() => {\n        if (!enabled) closeMicrophone();\n    }, [enabled]);\n\n    return {\n        onClickActivateMicrophone,\n        volume: () => {\n            const a = analyser();\n            if (!a) return 0;\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount);\n            a.getByteFrequencyData(frequencies.current);\n            let max = 0;\n            const bins = frequencies.current;\n            const n = bins.length;\n            for (let i = 0; i < n; ++i)\n                max = Math.max(max, bins[i]);\n            return max / 0xff;\n        }\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\";\nimport useAnimationFrame from \"../hooks/useAnimationFrame\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport SvgWidget from \"./SvgWidget\";\nimport useWidgetTheme from \"./useWidgetTheme\";\n\nexport default function TrendWidget(props: { register: JDRegister, min: number, max: number, horizon: number, size?: string }) {\n    const { register, min, max, horizon, size } = props;\n    const host = useServiceHost(register.service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const dataRef = useRef<number[]>(undefined);\n    const pathRef = useRef<SVGPathElement>();\n\n    const dx = 4;\n    const m = 2;\n    const w = horizon * dx + 2 * m;\n    const h = w / 1.612;\n    const dy = (h - 2 * m) / (max - min);\n\n    useEffect(() => {\n        dataRef.current = register ? [] : undefined; // reset data\n        return register?.subscribe(CHANGE, () => {\n            // register new value\n            const [v] = register.unpackedValue as [number];\n            const data = dataRef.current;\n            data.unshift(v);\n            while (data.length > horizon)\n                data.pop();\n\n        })\n    }, [register, horizon, min, max])\n\n    useAnimationFrame(() => {\n        // update dom\n        const data = dataRef.current;\n        if (!data)\n            return false; // nothing to render\n\n        if (pathRef.current) {\n            let d = `M ${w} ${h} `\n            let x = w - m;\n            for (let i = 0; i < data.length; ++i) {\n                const v = data[i];\n                const y = h - m - (v - min) * dy;\n                d += `L ${x} ${y}`\n                x -= dx;\n            }\n            d += ` V ${h} z`\n            pathRef.current.setAttribute(\"d\", d);\n        }\n        return true;\n    }, [dataRef.current])\n\n    return <SvgWidget width={w} height={h} size={size} background={background}>\n        <path fill={active} stroke={controlBackground} strokeWidth={m / 2} ref={pathRef} />\n    </SvgWidget>\n}\n","import React, { useEffect, useState } from \"react\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterBoolValue, useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport { Grid, Slider } from \"@material-ui/core\";\nimport RegisterTrend from \"../RegisterTrend\";\nimport MicIcon from '@material-ui/icons/Mic';\nimport { REFRESH, SoundLevelReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport AnalogSensorServiceHost from \"../../../jacdac-ts/src/hosts/analogsensorservicehost\";\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\";\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\";\nimport useMicrophoneVolume from \"../hooks/useMicrophoneVolume\"\nimport TrendWidget from \"../widgets/TrendWidget\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport LoadingProgress from \"../ui/LoadingProgress\";\n\nfunction HostMicrophoneButton(props: { service: JDService, host?: AnalogSensorServiceHost }) {\n    const { host, service } = props;\n    const enabledRegister = service.register(SoundLevelReg.Enabled);\n    const enabled = useRegisterBoolValue(enabledRegister)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(service.register(SoundLevelReg.MinDecibels))\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(service.register(SoundLevelReg.MaxDecibels))\n    const { volume, onClickActivateMicrophone } = useMicrophoneVolume(enabled && !!host, { fftSize: 64, smoothingTimeConstant: 0, minDecibels, maxDecibels });\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled)\n            await onClickActivateMicrophone();\n        await enabledRegister.sendSetBoolAsync(!enabled, true);\n    }\n\n    // update volume on demand\n    useEffect(() => host?.subscribe(REFRESH, () => {\n        const v = volume?.();\n        if (v !== undefined) {\n            host.reading.setValues([v]);\n        }\n    }), [host, volume])\n\n    return <IconButtonWithProgress\n        aria-label={title}\n        title={title}\n        indeterminate={enabled}\n        onClick={handleClick}>\n        <MicIcon />\n    </IconButtonWithProgress>\n}\n\nexport default function DashboardSoundLevel(props: DashboardServiceProps) {\n    const { variant, services, service } = props;\n    const soundLevelRegister = service.register(SoundLevelReg.SoundLevel);\n    const [soundLevel] = useRegisterUnpackedValue<[number]>(soundLevelRegister);\n    const host = useServiceHost<AnalogSensorServiceHost>(service);\n    const color = host ? \"secondary\" : \"primary\";\n\n    const onChange = (event: unknown, newValue: number | number[]): void => {\n        const svalue = newValue as number;\n        host?.reading.setValues([svalue]);\n        soundLevelRegister.sendGetAsync(); // refresh\n    }\n\n    if (soundLevel === undefined)\n        return <LoadingProgress />;\n\n    return <Grid container direction=\"column\">\n        <Grid item>\n            <TrendWidget register={soundLevelRegister} min={0} max={1} horizon={64} />\n        </Grid>\n        <Grid item>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                    <HostMicrophoneButton service={service} host={host} />\n                </Grid>\n                <Grid item xs>\n                    <Slider\n                        disabled={!host}\n                        valueLabelDisplay=\"off\"\n                        min={0} max={1} step={0.1}\n                        value={soundLevel}\n                        onChange={onChange}\n                        color={color}\n                    />\n                </Grid>\n            </Grid>\n        </Grid>\n    </Grid>\n}"],"sourceRoot":""}