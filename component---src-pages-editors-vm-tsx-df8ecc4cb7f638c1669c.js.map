{"version":3,"file":"component---src-pages-editors-vm-tsx-df8ecc4cb7f638c1669c.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/BugReport.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Cancel.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Pause.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayForWork.js","webpack://jacdac-docs/./jacdac-ts/src/vm/client.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/server.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/utils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/runner.ts","webpack://jacdac-docs/./src/components/vm/useVMRunner.ts","webpack://jacdac-docs/./src/components/vm/VMDiagnostics.tsx","webpack://jacdac-docs/./src/components/blockly/RoleChip.tsx","webpack://jacdac-docs/./src/components/blockly/BlockRoles.tsx","webpack://jacdac-docs/./src/components/vm/VMRunnerButtons.tsx","webpack://jacdac-docs/./src/components/vm/VMStartSimulatorButton.tsx","webpack://jacdac-docs/./src/components/vm/VMToolbar.tsx","webpack://jacdac-docs/./src/components/blockly/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/serverservicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/loopsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/logicdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/jsondsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/widgetdsl.ts","webpack://jacdac-docs/./src/components/vm/vmdsls.ts","webpack://jacdac-docs/./src/components/vm/VMEditor.tsx","webpack://jacdac-docs/./src/pages/editors/vm.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\"\n}), 'BugReport');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'Pause');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport JDService from \"../jdom/service\"\nimport JDRegister from \"../jdom/register\"\nimport JDEvent from \"../jdom/event\"\nimport { CHANGE, EVENT, REPORT_UPDATE, SystemReg } from \"../jdom/constants\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\n\nexport class VMServiceClient extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _reportUpdate: SMap<boolean> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(commandName: string, values: PackedValues) {\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, values: atomic[]) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], values)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, values: atomic[]) {\n        await jdreg?.sendSetPackedAsync(\n            jdreg.specification?.packFormat,\n            values,\n            true\n        )\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, [true])\n        }\n    }\n\n    public async lookupRegisterAsync(\n        root: string,\n        fld: string,\n        reportUpdate = false\n    ) {\n        if (root in this._registers) {\n            const register = this._registers[root]\n            if (reportUpdate && !this._reportUpdate[root]) {\n                this._reportUpdate[root] = true\n                this.mount(register.subscribe(REPORT_UPDATE, () => {}))\n            }\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(f => f.name === fld)\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n","export type GetValue = (\n    e: jsep.MemberExpression | string,\n    reportUpdate: boolean\n) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n    private reportUpdate = false\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression, reportUpdate = false) {\n        this.exprStack = []\n        this.reportUpdate = reportUpdate\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                await this.visitExpressionAsync(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(\n                    e as jsep.MemberExpression,\n                    this.reportUpdate\n                )\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name, this.reportUpdate)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import {\n    isHighLevelRegister,\n    isHighLevelEvent,\n    isCommand,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\nimport { CHANGE } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport { DecodedPacket } from \"../jdom/pretty\"\nimport JDRegisterServer from \"../jdom/registerserver\"\nimport { ExternalRequest } from \"./environment\"\nimport SensorServer from \"../servers/sensorserver\"\n\nexport const VM_EXTERNAL_REQUEST = \"vmExternalRequest\"\n\nclass VMRegisterServer extends JDRegisterServer<PackedValues> {\n    constructor(\n        private serviceServer: VMServiceServer,\n        private reg: jdspec.PacketInfo,\n        defaultValue?: PackedValues\n    ) {\n        super(serviceServer, reg.identifier, defaultValue)\n    }\n\n    async sendGetAsync() {\n        this.serviceServer.raiseGetRegisterEvent(this.reg.name)\n    }\n\n    async theRealSendGetAsync() {\n        await super.sendGetAsync()\n    }\n}\n\n// TODO: need to take specification into account and\n// TOOD: implement the proper base class (SensorServer)\nexport class VMServiceServer extends SensorServer<any[]> {\n    private eventNameToId: SMap<number> = {}\n    private regNameToId: SMap<number> = {}\n    private regFieldToId: SMap<number> = {}\n    private commandPackets: SMap<DecodedPacket> = {}\n    private cmdFieldToId: SMap<number> = {}\n\n    constructor(public role: string, private spec: jdspec.ServiceSpec) {\n        super(spec.classIdentifier, {\n            readingValues: [false],\n            streamingInterval: 50,\n        })\n        spec.packets.filter(isHighLevelRegister).map(reg => {\n            const regServer = this.addExistingRegister(\n                new VMRegisterServer(this, reg)\n            )\n            this.regNameToId[reg.name] = reg.identifier\n            reg.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${reg.name}:${pkt.name}`] = index\n            })\n            regServer.subscribe(CHANGE, () => {\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"set\",\n                    role: this.role,\n                    tgt: reg.name,\n                })\n            })\n        })\n\n        spec.packets.filter(isCommand).map(cmd => {\n            this.addCommand(cmd.identifier, (pkt: Packet) => {\n                this.commandPackets[cmd.identifier] = pkt.decoded\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"cmd\",\n                    role: this.role,\n                    tgt: cmd.name,\n                })\n            })\n            cmd.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${cmd.name}:${pkt.name}`] = index\n            })\n        })\n\n        spec.packets.filter(isHighLevelEvent).forEach(pkt => {\n            this.eventNameToId[pkt.name] = pkt.identifier\n        })\n    }\n\n    raiseGetRegisterEvent(regName: string) {\n        this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n            kind: \"get\",\n            role: this.role,\n            tgt: regName,\n        })\n    }\n\n    async respondToGetRegisterEvent(regName: string) {\n        const reg = this.register(this.regNameToId[regName]) as VMRegisterServer\n        await reg.theRealSendGetAsync()\n    }\n\n    async sendEventNameAsync(eventName: string, values?: PackedValues) {\n        const pkt = this.spec.packets.find(\n            p => isHighLevelEvent(p) && p.name === eventName\n        )\n        if (pkt) {\n            await this.sendEvent(\n                this.eventNameToId[eventName],\n                jdpack(pkt.packFormat, values)\n            )\n        }\n    }\n\n    lookupRegister(root: string, fld: string) {\n        if (this.regNameToId[root]) {\n            const reg = this.register(this.regNameToId[root])\n            if (!fld) return reg.values()?.[0]\n            else {\n                return reg.values()?.[this.regFieldToId[`${root}:${fld}`]]\n            }\n        } else if (this.commandPackets[root]) {\n            const cmd = this.commandPackets[root]\n            return cmd.decoded?.[this.cmdFieldToId[`${root}:${fld}`]]?.value\n        }\n        return undefined\n    }\n\n    public writeRegister(root: string, ev: atomic[]) {\n        const reg = this.register(this.regNameToId[root])\n        reg.setValues(ev)\n    }\n}\n","import { assert, SMap } from \"../jdom/utils\"\nimport JDService from \"../jdom/service\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport { PackedValues } from \"../jdom/pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface } from \"./runner\"\nimport { VMRole } from \"./ir\"\nimport { VMServiceServer, VM_EXTERNAL_REQUEST } from \"./server\"\nimport { VMServiceClient } from \"./client\"\nimport { atomic } from \"./utils\"\n\nexport const GLOBAL_CHANGE = \"vmEnvGlobalChange\"\nexport const REGISTER_CHANGE = \"vmEnvRegisterChange\"\nexport const EXTERNAL_REQUEST = \"vmEnvEventChange\"\n\nexport interface ExternalRequest {\n    kind: \"event\" | \"get\" | \"set\" | \"cmd\"\n    role: string\n    tgt: string\n}\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\",\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentRequest: ExternalRequest = undefined\n    private _clientEnvs: SMap<VMServiceClient> = {}\n    private _serverEnvs: SMap<VMServiceServer> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[],\n        private serverRoles: VMRole[]\n    ) {\n        super()\n        this.setupServers()\n    }\n\n    private setupServers() {\n        this.serverRoles.forEach(p => {\n            // get the service\n            const service = serviceSpecificationFromClassIdentifier(\n                p.serviceClass\n            )\n            if (service) {\n                // spin up JDServiceServer\n                const serviceServer = new VMServiceServer(p.role, service)\n                this._serverEnvs[p.role] = serviceServer\n                serviceServer.subscribe(\n                    VM_EXTERNAL_REQUEST,\n                    (p: ExternalRequest) => {\n                        this._currentRequest = p\n                        this.emit(EXTERNAL_REQUEST, p)\n                    }\n                )\n            }\n        })\n    }\n\n    public globals() {\n        return this._globals\n    }\n\n    public servers() {\n        return Object.keys(this._serverEnvs).map(k => {\n            return {\n                role: k,\n                serviceClass: this._serverEnvs[k].serviceClass,\n                server: this._serverEnvs[k],\n            }\n        })\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._clientEnvs[role]) {\n            this._clientEnvs[role].unmount()\n            this._clientEnvs[role] = undefined\n        }\n        if (!service) this._rolesUnbound.push(role)\n        else {\n            this._rolesBound.push(role)\n            this._clientEnvs[role] = new VMServiceClient(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public roleBound(role: string) {\n        return !!this._clientEnvs[role]\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerRegister(reg, () => {\n            this.emit(REGISTER_CHANGE, reg)\n        })\n    }\n\n    public registerEvent(role: string, tgt: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerEvent(tgt, () => {\n            this._currentRequest = { kind: \"event\", role, tgt }\n            this.emit(EXTERNAL_REQUEST, this._currentRequest)\n        })\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._clientEnvs[root]\n        return s\n    }\n\n    private getServer(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._serverEnvs[root]\n        return s\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            await serviceEnv?.sendCommandAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        } else {\n            const server = this.getServer(e)\n            await server?.sendEventNameAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        }\n    }\n\n    public async lookupAsync(\n        e: jsep.MemberExpression | string,\n        reportUpdate = false\n    ) {\n        const roleName = this.getRootName(e)\n        if (roleName.startsWith(\"$var\")) {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const ep = (e as jsep.MemberExpression).property as\n            | jsep.Identifier\n            | jsep.MemberExpression\n        const root =\n            typeof ep === \"string\"\n                ? ep\n                : ep.type === \"Identifier\"\n                ? ep.name\n                : (ep.object as jsep.Identifier).name\n        const fld =\n            typeof ep === \"string\"\n                ? undefined\n                : ep.type === \"Identifier\"\n                ? undefined\n                : (ep.property as jsep.Identifier).name\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            return await serviceEnv.lookupRegisterAsync(root, fld, reportUpdate)\n        } else {\n            const server = this.getServer(e)\n            return server.lookupRegister(root, fld)\n        }\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        values: atomic[]\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            if (serviceEnv) await serviceEnv.writeRegisterAsync(reg, values)\n            else {\n                const server = this.getServer(e)\n                return server.writeRegister(reg, values)\n            }\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || !roleName.startsWith(\"$var\")) return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public clearExternalStimulii() {\n        this._currentRequest = undefined\n        this.rolesReset()\n    }\n\n    public hasRequest(e: jsep.MemberExpression | string): ExternalRequest {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const op = (me.property as jsep.Identifier).name\n            if (\n                this._currentRequest?.role === roleName &&\n                this._currentRequest?.tgt === op\n            )\n                return this._currentRequest\n        }\n        return undefined\n    }\n\n    public async completeRequest(request: ExternalRequest) {\n        assert(request.kind === \"get\")\n        const server = this.getServer(request.role)\n        await server.respondToGetRegisterEvent(request.tgt)\n    }\n\n    // role events\n    private _rolesBound: string[] = []\n    private _rolesUnbound: string[] = []\n    private rolesReset() {\n        this._rolesBound = []\n        this._rolesUnbound = []\n    }\n    public initRoles() {\n        this._rolesBound = Object.keys(this._clientEnvs).slice(0)\n    }\n    public roleTransition(role: string, event: string): boolean {\n        if (event === \"bound\") {\n            return !!this._rolesBound.find(r => role === \"any\" || r === role)\n        } else {\n            return !!this._rolesUnbound.find(r => role === \"any\" || r === role)\n        }\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._clientEnvs)) {\n            vs.unmount()\n        }\n    }\n}\n","export type atomic = string | boolean | number\n\nexport class Mutex {\n    private promises: (() => Promise<any>)[] = []\n    private shift() {\n        this.promises.shift()\n        if (this.promises[0]) this.promises[0]()\n    }\n    acquire<T>(f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            this.promises.push(() =>\n                f().then(\n                    v => {\n                        this.shift()\n                        resolve(v)\n                    },\n                    e => {\n                        this.shift()\n                        reject(e)\n                    }\n                )\n            )\n            if (this.promises.length == 1) this.promises[0]()\n        })\n    }\n}\n","import { VMProgram, VMHandler, VMCommand, VMRole } from \"./ir\"\nimport RoleManager from \"../jdom/rolemanager\"\nimport {\n    VMEnvironment,\n    VMException,\n    VMExceptionCode,\n    GLOBAL_CHANGE,\n    REGISTER_CHANGE,\n    EXTERNAL_REQUEST,\n    ExternalRequest,\n} from \"./environment\"\nimport { VMExprEvaluator, unparse, CallEvaluator } from \"./expr\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport {\n    CHANGE,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    SERVICE_PROVIDER_REMOVED,\n    TRACE,\n} from \"../jdom/constants\"\nimport { checkProgram, compileProgram } from \"./compile\"\nimport {\n    VM_GLOBAL_CHANGE,\n    VM_COMMAND_FAILED,\n    VM_WATCH_CHANGE,\n    VM_BREAKPOINT,\n    VM_INTERNAL_ERROR,\n    VM_LOG_ENTRY,\n    VM_ROLE_MISSING,\n} from \"./events\"\nimport { Mutex, atomic } from \"./utils\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport { JDClient } from \"../jdom/client\"\nimport JDServiceProvider from \"../jdom/serviceprovider\"\nimport JDDevice from \"../jdom/device\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type VMTraceContext = any\n\nenum VMInternalStatus {\n    Ready = \"ready\", // the pc is at this instruction, but pre-condition not met\n    Enabled = \"enabled\", // the instruction pre-conditions are met (is this needed?)\n    Running = \"running\", // the instruction has started running (may need retries)\n    Sleeping = \"sleep\", // waiting to be woken by timer\n    Completed = \"completed\", // the instruction completed successfully\n    Stopped = \"stopped\", // halt instruction encountered, handler stopped\n}\n\nconst VM_WAKE_SLEEPER = \"vmWakeSleeper\"\n\nexport interface VMEnvironmentInterface {\n    writeRegisterAsync: (\n        e: jsep.MemberExpression | string,\n        v: atomic[]\n    ) => Promise<void>\n    sendCommandAsync: (\n        command: jsep.MemberExpression,\n        values: atomic[]\n    ) => Promise<void>\n    lookupAsync: (\n        e: jsep.MemberExpression | string,\n        reportUpdate: boolean\n    ) => Promise<atomic>\n    writeGlobal: (e: jsep.MemberExpression | string, v: atomic) => boolean\n    hasRequest: (e: jsep.MemberExpression | string) => ExternalRequest\n    roleTransition: (role: string, direction: string) => boolean\n    roleBound: (role: string) => boolean\n}\n\nclass VMJumpException extends Error {\n    constructor(public label: string) {\n        super()\n    }\n}\n\nclass VMTimerException extends Error {\n    constructor(public ms: number) {\n        super()\n    }\n}\n\nclass VMRequestException extends Error {\n    constructor(public request: ExternalRequest) {\n        super()\n    }\n}\n\nclass VMCommandEvaluator {\n    private _regSaved: number = undefined\n    private _changeSaved: number = undefined\n    private _started = false\n    constructor(\n        public parent: VMCommandRunner,\n        private readonly env: VMEnvironmentInterface,\n        private readonly cmd: VMCommand\n    ) {}\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { command: this.cmd.command.type, ...context })\n    }\n\n    private get inst() {\n        return (this.cmd.command.callee as jsep.Identifier)?.name\n    }\n\n    private callEval(): CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => {\n            const callee = <jsep.MemberExpression>caller.callee\n            const namespace = (callee.object as jsep.Identifier).name\n            const funName = (callee.property as jsep.Identifier).name\n            const args = caller.arguments\n            if (namespace === \"$fun\") {\n                switch (funName) {\n                    case \"roleBoundExpression\": {\n                        const role = (args[0] as jsep.Identifier).name\n                        return this.env.roleBound(role)\n                    }\n                    default: // ERROR\n                }\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown function ${namespace}.${funName}`\n                )\n            } else\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown namespace ${namespace}`\n                )\n        }\n    }\n\n    private newEval() {\n        return new VMExprEvaluator(\n            async (e, reportUpdate) =>\n                await this.env.lookupAsync(e, reportUpdate),\n            this.callEval()\n        )\n    }\n\n    private async evalExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        const expr = this.newEval()\n        return await expr.evalAsync(e, reportUpdate)\n    }\n\n    private async checkExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        return (await this.evalExpressionAsync(e, reportUpdate)) ? true : false\n    }\n\n    private async startAsync() {\n        if (\n            this.cmd.command.callee.type !== \"MemberExpression\" &&\n            (this.inst === \"awaitRegister\" || this.inst === \"awaitChange\")\n        ) {\n            // need to capture register value for awaitChange/awaitRegister\n            const args = this.cmd.command.arguments\n            this._regSaved = await this.evalExpressionAsync(args[0], true)\n            if (this.inst === \"awaitChange\")\n                this._changeSaved = await this.evalExpressionAsync(args[1])\n            return true\n        }\n        return false\n    }\n\n    public async evaluate(): Promise<VMInternalStatus> {\n        if (!this._started) {\n            const neededStart = await this.startAsync()\n            this._started = true\n            if (neededStart) return VMInternalStatus.Running\n        }\n        const args = this.cmd.command.arguments\n        if (this.cmd.command.callee.type === \"MemberExpression\") {\n            // interpret as a service command (role.comand)\n            const expr = this.newEval()\n            const values: atomic[] = []\n            for (const a of this.cmd.command.arguments) {\n                values.push(await expr.evalAsync(a))\n            }\n            await this.env.sendCommandAsync(\n                this.cmd.command.callee as jsep.MemberExpression,\n                values\n            )\n            return VMInternalStatus.Completed\n        }\n        switch (this.inst) {\n            case \"branchOnCondition\": {\n                const expr = await this.checkExpressionAsync(args[0])\n                if (expr) {\n                    throw new VMJumpException((args[1] as jsep.Identifier).name)\n                }\n                return VMInternalStatus.Completed\n            }\n            case \"jump\": {\n                throw new VMJumpException((args[0] as jsep.Identifier).name)\n            }\n            case \"label\": {\n                return VMInternalStatus.Completed\n            }\n            case \"awaitEvent\": {\n                const event = args[0] as jsep.MemberExpression\n                const request = this.env.hasRequest(event)\n                if (request) {\n                    if (await this.checkExpressionAsync(args[1])) {\n                        throw new VMRequestException(request)\n                    }\n                }\n                return VMInternalStatus.Running\n            }\n            case \"roleBound\": {\n                const role = (args[0] as jsep.Identifier).name\n                const event = (args[1] as jsep.Identifier).name\n                return this.env.roleTransition(role, event)\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitCondition\": {\n                return (await this.checkExpressionAsync(args[0]))\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitChange\":\n            case \"awaitRegister\": {\n                const regValue = await this.evalExpressionAsync(args[0])\n                if (\n                    (this.inst === \"awaitRegister\" &&\n                        regValue !== this._regSaved) ||\n                    (this.inst === \"awaitChange\" &&\n                        Math.abs(regValue - this._regSaved) >=\n                            Math.abs(this._changeSaved))\n                ) {\n                    return VMInternalStatus.Completed\n                }\n                return VMInternalStatus.Running\n            }\n            case \"writeRegister\":\n            case \"writeLocal\": {\n                const expr = this.newEval()\n                const values: atomic[] = []\n                for (const a of this.cmd.command.arguments.slice(1)) {\n                    values.push(await expr.evalAsync(a))\n                }\n                this.trace(\"eval-end\", { expr: unparse(args[1]) })\n                const reg = args[0] as jsep.MemberExpression\n                if (this.inst === \"writeRegister\") {\n                    await this.env.writeRegisterAsync(reg, values)\n                    this.trace(\"write-after-wait\", {\n                        reg: unparse(reg),\n                        expr: values[0],\n                    })\n                } else this.env.writeGlobal(reg, values[0])\n                return VMInternalStatus.Completed\n            }\n            case \"watch\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                this.parent.watch(this.cmd?.sourceId, ev)\n                return VMInternalStatus.Completed\n            }\n            case \"log\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                const evString = ev + \"\"\n                this.parent.writeLog(this.cmd?.sourceId, evString)\n                return VMInternalStatus.Completed\n            }\n            case \"halt\": {\n                return VMInternalStatus.Stopped\n            }\n            case \"nop\": {\n                return VMInternalStatus.Completed\n            }\n            case \"wait\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                throw new VMTimerException(ev * 1000)\n            }\n            default:\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `Unknown instruction ${this.inst}`\n                )\n        }\n    }\n}\n\nclass VMCommandRunner {\n    private _eval: VMCommandEvaluator\n    private _status: VMInternalStatus = VMInternalStatus.Running\n    constructor(\n        public readonly parent: VMHandlerRunner,\n        private handlerId: number,\n        env: VMEnvironment,\n        public cmd: VMCommand\n    ) {\n        this._eval = new VMCommandEvaluator(this, env, cmd)\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { handler: this.handlerId, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: VMInternalStatus) {\n        this._status = s\n    }\n\n    async stepAsync() {\n        if (this.status === VMInternalStatus.Running) {\n            this.trace(unparse(this.cmd.command))\n            this.status = await this._eval.evaluate()\n        }\n    }\n}\n\nclass VMHandlerRunner extends JDEventSource {\n    private _commandIndex: number = undefined\n    private _currentCommand: VMCommandRunner = undefined\n    private stopped = false\n    private _labelToIndex: SMap<number> = {}\n\n    constructor(\n        public readonly parent: VMProgramRunner,\n        public readonly id: number,\n        public readonly env: VMEnvironment,\n        public readonly handler: VMHandler\n    ) {\n        super()\n        // find the label commands (targets of jumps)\n        this.handler.commands.forEach((c, index) => {\n            const cmd = c as VMCommand\n            const id = cmd.command?.callee as jsep.Identifier\n            if (id?.name === \"label\") {\n                const label = cmd.command.arguments[0] as jsep.Identifier\n                this._labelToIndex[label.name] = index\n            }\n        })\n        this.reset()\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { id: this.id, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this.stopped\n            ? VMInternalStatus.Stopped\n            : this._commandIndex === undefined\n            ? VMInternalStatus.Ready\n            : this._currentCommand.status === VMInternalStatus.Completed &&\n              this._commandIndex < this.handler.commands.length - 1\n            ? VMInternalStatus.Running\n            : this._currentCommand.status\n    }\n\n    get command() {\n        return this._currentCommand\n    }\n\n    get atTop() {\n        return (\n            this.status === VMInternalStatus.Running && this._commandIndex === 0\n        )\n    }\n\n    gotoTop() {\n        if (\n            this.status === VMInternalStatus.Ready &&\n            this.handler.commands.length\n        )\n            this.commandIndex = 0\n    }\n\n    reset() {\n        this.commandIndex = undefined\n        this.stopped = false\n    }\n\n    wake() {\n        if (this._currentCommand) {\n            this._currentCommand.status = VMInternalStatus.Completed\n            this.next()\n        }\n    }\n\n    // run-to-completion semantics\n    // returns command if breakpoint encountered when not single stepping\n    async runToCompletionAsync(singleStep = false) {\n        if (this.stopped || !this.handler.commands.length) return undefined\n        if (this.commandIndex === undefined) {\n            this.commandIndex = 0\n        }\n        if ((await this.singleStepCheckBreakAsync(singleStep)) && !singleStep)\n            return this._currentCommand\n        while (this.next()) {\n            if (singleStep || (await this.singleStepCheckBreakAsync()))\n                return this._currentCommand\n        }\n        return undefined\n    }\n\n    private next() {\n        if (\n            this._currentCommand.status === VMInternalStatus.Completed &&\n            this.commandIndex < this.handler.commands.length - 1\n        ) {\n            this.commandIndex++\n            return true\n        }\n        return false\n    }\n\n    private getCommand() {\n        const cmd = this.handler.commands[this._commandIndex]\n        if (cmd.type === \"ite\") {\n            throw new VMException(\n                VMExceptionCode.InternalError,\n                \"ite not compiled away\"\n            )\n        }\n        return cmd as VMCommand\n    }\n\n    private async singleStepCheckBreakAsync(singleStep = false) {\n        this.trace(\"step begin\")\n        const sid = this._currentCommand.cmd?.sourceId\n        if (!singleStep && (await this.parent.breakpointOnAsync(sid))) {\n            return true\n        }\n        await this.singleStepAsync()\n        this.trace(\"step end\")\n        return false\n    }\n\n    private async singleStepAsync() {\n        try {\n            await this._currentCommand.stepAsync()\n        } catch (e) {\n            if (e instanceof VMJumpException) {\n                const { label } = e as VMJumpException\n                const index = this._labelToIndex[label]\n                this.commandIndex = index\n                this._currentCommand.status = VMInternalStatus.Completed\n            } else if (e instanceof VMTimerException) {\n                const { ms } = e as VMTimerException\n                this._currentCommand.status = VMInternalStatus.Sleeping\n                await this.parent.sleepAsync(this, ms)\n            } else if (e instanceof VMRequestException) {\n                const { request } = e as VMRequestException\n                this._currentCommand.status = VMInternalStatus.Completed\n                this.parent.handlerWokeOnRequest(this, request)\n            } else {\n                this.emit(VM_COMMAND_FAILED, this._currentCommand.cmd.sourceId)\n                throw e\n            }\n        }\n        if (this._currentCommand.status === VMInternalStatus.Stopped)\n            this.stopped = true\n    }\n\n    private set commandIndex(index: number) {\n        if (index === undefined) {\n            this._commandIndex = undefined\n            this._currentCommand = undefined\n        } else if (index !== this._commandIndex) {\n            this._commandIndex = index\n            this._currentCommand = new VMCommandRunner(\n                this,\n                this.id,\n                this.env,\n                this.getCommand()\n            )\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n}\n\nexport type WatchValueType = boolean | string | number\n\ninterface SleepingHandler {\n    ms: number\n    handlerRunner: VMHandlerRunner\n    handler?: VMHandler\n    id: NodeJS.Timeout\n}\n\nfunction isEveryHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"wait\"\n    }\n    return false\n}\n\nfunction isRegisterChangeHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"awaitChange\" || cmd.name === \"awaitRegister\"\n    }\n    return false\n}\n\nexport enum VMStatus {\n    Stopped = \"stopped\",\n    Running = \"running\",\n    Paused = \"paused\",\n}\n\nconst MAX_LOG = 100\n\nexport class VMProgramRunner extends JDClient {\n    // program, environment\n    private _handlerRunners: VMHandlerRunner[] = []\n    private _env: VMEnvironment\n    private _roles: VMRole[] = []\n    private _serverRoles: VMRole[] = []\n    // running\n    private _status: VMStatus\n    private _waitQueue: VMHandlerRunner[] = []\n    private _everyQueue: VMHandlerRunner[] = []\n    private _runQueue: VMHandlerRunner[] = []\n    private _waitRunMutex: Mutex\n    private _sleepQueue: SleepingHandler[] = []\n    private _sleepMutex: Mutex\n    // debugging\n    private _watch: SMap<any> = {}\n    private _log: { text: string; count: number }[] = []\n    private _breaks: SMap<boolean> = {}\n    private _breaksMutex: Mutex\n    // providing new services\n    private _provider: JDServiceProvider\n    private _device: JDDevice\n    private _onCompletionOfExternalRequest: {\n        handler: VMHandlerRunner\n        request: ExternalRequest\n    }[] = []\n\n    constructor(\n        readonly roleManager: RoleManager,\n        readonly program: VMProgram\n    ) {\n        super()\n\n        const compiled = compileProgram(program)\n        const { registers, events, errors } = checkProgram(compiled)\n        this._roles = compiled.roles\n        this._serverRoles = compiled.serverRoles\n        if (errors?.length) console.debug(\"ERRORS\", errors)\n\n        // data structures for running program\n        this._status = VMStatus.Stopped\n        this._env = new VMEnvironment(registers, events, compiled.serverRoles)\n        this._handlerRunners = compiled.handlers.map(\n            (h, index) => new VMHandlerRunner(this, index, this._env, h)\n        )\n\n        // TODO: can't add multiple handlers until we have deduplicate CHANGE on Event\n        /*\n        const len = this._handlerRunners.length\n        compiled.handlers.forEach((h, index) =>\n            this._handlerRunners.push(\n                new VMHandlerRunner(this, len + index, this._env, h)\n            )\n        )*/\n\n        this._waitRunMutex = new Mutex()\n        this._breaksMutex = new Mutex()\n        this._sleepMutex = new Mutex()\n        // TODO: only try to wake handlers that are waiting on change to reg or event\n        this.mount(\n            this._env.subscribe(REGISTER_CHANGE, (reg: string) => {\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.bus.subscribe(\n                SERVICE_PROVIDER_REMOVED,\n                (provider: JDServiceProvider) => {\n                    if (provider === this._provider) {\n                        this._provider = undefined\n                    }\n                }\n            )\n        )\n        // control requests (client:{event}, server:{set, get, cmd})\n        this.mount(\n            this._env.subscribe(\n                EXTERNAL_REQUEST,\n                (request: ExternalRequest) => {\n                    switch (request.kind) {\n                        case \"get\": {\n                            // TODO: in this case, if there is a handler\n                            // waiting on this Request then the function\n                            // handlerWokeOnRequest will be invoked. If\n                            // it is not then we should just return the\n                            // current value of register\n                            break\n                        }\n                        // these handler invocations are \"fire and forget\"\n                        case \"set\":\n                        case \"cmd\":\n                        case \"event\":\n                            break\n                    }\n                    this.waitingToRunning()\n                }\n            )\n        )\n        this.mount(\n            this._env.subscribe(GLOBAL_CHANGE, name => {\n                this.emit(VM_GLOBAL_CHANGE, name)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.subscribe(\n                VM_WAKE_SLEEPER,\n                async (h: VMHandlerRunner | VMHandler) => {\n                    await this.wakeSleeper(h)\n                }\n            )\n        )\n        this.initializeRoleManagement()\n    }\n\n    public handlerWokeOnRequest(\n        handler: VMHandlerRunner,\n        request: ExternalRequest\n    ) {\n        if (request.kind === \"get\") {\n            this._onCompletionOfExternalRequest.push({ handler, request })\n        }\n    }\n\n    // control of VM\n    get status() {\n        return this._status\n    }\n\n    get logData() {\n        return this._log.slice(0)\n    }\n\n    globals(): { name: string; value: atomic }[] {\n        const g = this._env.globals()\n        return Object.keys(g).map(k => {\n            return { name: k, value: g[k].value }\n        })\n    }\n\n    private setStatus(s: VMStatus) {\n        if (s !== this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    // debugging\n    trace(message: string, context: VMTraceContext = {}) {\n        this.emit(TRACE, { message, context })\n    }\n\n    watch(sourceId: string, value: WatchValueType) {\n        this._watch[sourceId] = value\n        this.emit(VM_WATCH_CHANGE, sourceId)\n    }\n\n    writeLog(sourceId: string, value: WatchValueType) {\n        const s = value + \"\"\n        const last = this._log[this._log.length - 1]\n        if (last?.text === s) last.count++\n        else this._log.push({ text: value + \"\", count: 1 })\n        while (this._log.length > MAX_LOG) this._log.shift()\n        this.emit(VM_LOG_ENTRY, sourceId)\n    }\n\n    lookupWatch(sourceId: string) {\n        return this._watch[sourceId]\n    }\n\n    async setBreakpointsAsync(breaks: string[]) {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n            breaks.forEach(b => {\n                this._breaks[b] = true\n            })\n        })\n    }\n\n    async clearBreakpointsAsync() {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n        })\n    }\n\n    async breakpointOnAsync(id: string) {\n        let ret = false\n        await this._breaksMutex.acquire(async () => {\n            ret = !!this._breaks?.[id]\n        })\n        return ret\n    }\n\n    // utility called by handlerRunner\n    async sleepAsync(\n        h: VMHandlerRunner,\n        ms: number,\n        handler: VMHandler = undefined\n    ) {\n        assert(h.status === VMInternalStatus.Sleeping)\n        await this._sleepMutex.acquire(async () => {\n            const id = setTimeout(() => {\n                this.emit(VM_WAKE_SLEEPER, h ? h : handler)\n            }, ms)\n            this._sleepQueue.push({ ms, handlerRunner: h, id, handler })\n        })\n    }\n\n    async startAsync() {\n        if (this.status !== VMStatus.Stopped) return // already running\n        this.trace(\"start\")\n        try {\n            await this._waitRunMutex.acquire(async () => {\n                await this.device()\n                this._waitQueue = this._handlerRunners.slice(0)\n                this._waitQueue.forEach(h => h.reset())\n                this._runQueue = []\n                this._everyQueue = []\n                this._onCompletionOfExternalRequest = []\n                this._env.clearExternalStimulii()\n                this._env.initRoles()\n                this.stopSleepers()\n                // make sure to have another handler for every\n                /*\n                for (const h of this._waitQueue) {\n                    if (isEveryHandler(h.handler)) {\n                        const dup = new VMHandlerRunner(\n                            this,\n                            undefined,\n                            this._env,\n                            h.handler\n                        )\n                        dup.reset()\n                        this._everyQueue.push(dup)\n                    }\n                }*/\n            })\n            await this.clearBreakpointsAsync()\n            this.setStatus(VMStatus.Running)\n            await this.waitingToRunning()\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    async device() {\n        if (!this._provider) {\n            await this.startProvider()\n        }\n        return this._device\n    }\n\n    cancel() {\n        if (this.status === VMStatus.Stopped) return // nothing to cancel\n        this.setStatus(VMStatus.Stopped)\n        this.trace(\"cancelled\")\n    }\n\n    async resumeAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"resume\")\n        this.setStatus(VMStatus.Running)\n        await this.runAsync()\n    }\n\n    private async getCurrentRunner() {\n        return await this._waitRunMutex.acquire(async () => {\n            if (this._runQueue.length) return this._runQueue[0]\n            return undefined\n        })\n    }\n\n    async stepAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"step\")\n        const h = await this.getCurrentRunner()\n        if (h) {\n            await this.runHandlerAsync(h, true)\n            await this.postProcessHandler(h)\n            const newHead = await this.getCurrentRunner()\n            if (newHead && newHead !== h) {\n                this.emitBreakpoint(newHead)\n            }\n        }\n    }\n\n    private _in_run = false\n    private async runAsync() {\n        if (this.status === VMStatus.Stopped) return\n        if (this._in_run) return\n        this.trace(\"run\")\n        this._in_run = true\n        try {\n            let h: VMHandlerRunner = undefined\n            while (\n                this.status === VMStatus.Running &&\n                (h = await this.getCurrentRunner())\n            ) {\n                assert(!h.atTop)\n                await this.runHandlerAsync(h)\n                await this.postProcessHandler(h)\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n        this._in_run = false\n        this.trace(\"run end\")\n    }\n\n    private emitBreakpoint(h: VMHandlerRunner) {\n        this.emit(\n            VM_BREAKPOINT,\n            h,\n            h.status === VMInternalStatus.Completed\n                ? \"\"\n                : h.command.cmd?.sourceId\n        )\n    }\n\n    private async runHandlerAsync(h: VMHandlerRunner, oneStep = false) {\n        try {\n            const brkCommand = await h.runToCompletionAsync(oneStep)\n            if ((brkCommand && !oneStep) || this.status === VMStatus.Paused) {\n                this.setStatus(VMStatus.Paused)\n                this.emitBreakpoint(h)\n            }\n            if (h.status === VMInternalStatus.Completed) {\n                h.reset()\n            }\n        } catch (e) {\n            if (e instanceof VMException) {\n                const ex = e as VMException\n                if (ex.code === VMExceptionCode.RoleNoService)\n                    this.emit(VM_ROLE_MISSING, (e as VMException).data)\n            } else {\n                console.debug(e)\n                this.emit(VM_INTERNAL_ERROR, e)\n            }\n            // on handler error, reset the handler\n            h.reset()\n        }\n    }\n\n    private async postProcessHandler(h: VMHandlerRunner) {\n        if (\n            h.status === VMInternalStatus.Ready ||\n            h.status === VMInternalStatus.Sleeping ||\n            h.status === VMInternalStatus.Stopped\n        ) {\n            let done: VMHandlerRunner = undefined\n            await this._waitRunMutex.acquire(async () => {\n                assert(!!this._runQueue.length)\n                assert(h === this._runQueue[0])\n                done = this._runQueue.shift()\n                const moveToWait = h.status === VMInternalStatus.Ready\n                if (moveToWait && !isEveryHandler(h.handler)) {\n                    this._waitQueue.push(done)\n                    done = undefined\n                }\n            })\n            if (\n                (done &&\n                    h.status === VMInternalStatus.Ready &&\n                    isEveryHandler(h.handler)) ||\n                isRegisterChangeHandler(h.handler)\n            ) {\n                if (this.status === VMStatus.Running)\n                    await this.runHandlerAsync(h)\n                else if (this.status === VMStatus.Paused) {\n                    await this._waitRunMutex.acquire(async () => {\n                        this._runQueue.unshift(h)\n                        // this.emitBreakpoint(h)\n                    })\n                }\n            }\n        } else if (h.status === VMInternalStatus.Completed) {\n            const q = this._onCompletionOfExternalRequest\n            const index = q.findIndex(p => p.handler === h)\n            if (index > -1) {\n                const [del] = q.splice(index, 1)\n                await this._env.completeRequest(del.request)\n            }\n        }\n    }\n\n    // call this whenever some event/change arises\n    private async waitingToRunning() {\n        if (this.status !== VMStatus.Stopped) {\n            this.trace(\"waiting to running - try\")\n            await this._waitRunMutex.acquire(async () => {\n                if (this.status === VMStatus.Paused && this._runQueue.length)\n                    return\n                this.trace(\"waiting to running - start\")\n                const handlersStarted: VMHandler[] = []\n                const newRunners: VMHandlerRunner[] = []\n                const sleepingRunners: VMHandlerRunner[] = []\n                for (const h of this._waitQueue) {\n                    await this.runHandlerAsync(h, true)\n                    if (h.status === VMInternalStatus.Sleeping) {\n                        sleepingRunners.push(h)\n                    } else if (\n                        !h.atTop &&\n                        handlersStarted.findIndex(hs => hs === h.handler) === -1\n                    ) {\n                        newRunners.push(h)\n                        handlersStarted.push(h.handler)\n                    }\n                }\n                newRunners.forEach(h => {\n                    this._runQueue.push(h)\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n                sleepingRunners.forEach(h => {\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n            })\n            await this.runAsync()\n            this._env.clearExternalStimulii()\n        }\n    }\n\n    private async stopSleepers() {\n        await this._sleepMutex.acquire(async () => {\n            for (const s of this._sleepQueue) {\n                clearTimeout(s.id)\n            }\n            this._sleepQueue = []\n        })\n    }\n\n    private async wakeSleeper(h: VMHandlerRunner | VMHandler) {\n        try {\n            // let handlerMs: number = undefined\n            let handlerRunner: VMHandlerRunner = undefined\n            // let handler: VMHandler = undefined\n            await this._sleepMutex.acquire(async () => {\n                const index = this._sleepQueue.findIndex(\n                    p => p?.handlerRunner === h // || p?.handler === h\n                )\n                assert(index >= 0)\n                if (index >= 0) {\n                    const p = this._sleepQueue[index]\n                    //  handlerMs = p.ms\n                    handlerRunner = p.handlerRunner\n                    // handler = p?.handler\n                    this._sleepQueue.splice(index, 1)\n                    // clearTimeout(p.id)\n                }\n            })\n            if (this.status === VMStatus.Stopped) return\n            // this logic is to deal with starting a handler rather than a runner\n            await this._waitRunMutex.acquire(async () => {\n                /*\n                if (!handlerRunner && isEveryHandler(handler)) {\n                    const index = this._everyQueue.findIndex(\n                        h => h.handler === handler\n                    )\n                    if (index >= 0) {\n                        handlerRunner = this._everyQueue[index]\n                        this._everyQueue.splice(index, 1)\n                        handlerRunner.gotoTop()\n                    }\n                }*/\n                if (handlerRunner) {\n                    // transition to the run queue\n                    handlerRunner.wake()\n                    this._runQueue.push(handlerRunner)\n                }\n            })\n            /*\n            const theHandler = handlerRunner?.handler || handler\n            if (isEveryHandler(theHandler)) {\n                // setup next\n                this.sleepAsync(undefined, handlerMs, theHandler)\n            }*/\n            if (handlerRunner) {\n                if (this.status === VMStatus.Running) {\n                    this.trace(\"wake sleeper run\")\n                    this.runAsync()\n                } else if (this.status === VMStatus.Paused) {\n                    this.emitBreakpoint(await this.getCurrentRunner())\n                }\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    private initializeRoleManagement() {\n        // adding a (role,service) binding\n        const addRoleService = (role: string) => {\n            const service = this.roleManager.service(role)\n            if (service) {\n                this._env.serviceChanged(role, service)\n            }\n        }\n        // initialize client\n        this._roles.forEach(r => {\n            addRoleService(r.role)\n        })\n        this.mount(\n            this.roleManager.subscribe(ROLE_BOUND, async (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                addRoleService(role)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.subscribe(ROLE_UNBOUND, (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                this._env.serviceChanged(role, undefined)\n                this.waitingToRunning()\n            })\n        )\n    }\n\n    // spin up provider\n    private async startProvider() {\n        const servers = this._env.servers()\n        if (servers.length) {\n            this._provider = new JDServiceProvider(\n                servers.map(s => s.server)\n                // if we create a deviceId, then trouble ensues\n                // as a second device gets spun up later\n                //{\n                //    deviceId: \"VMServiceProvider\",\n                //}\n            )\n            this._device = this.roleManager.bus.addServiceProvider(\n                this._provider\n            )\n            servers.forEach((s, index) => {\n                this.roleManager.updateRole(\n                    this._serverRoles[index].role,\n                    s.serviceClass,\n                    this._device.deviceId\n                )\n            })\n            // make sure it gets known (HACK)\n            for (const s of servers) {\n                await s.server.statusCode.sendGetAsync()\n            }\n        }\n    }\n\n    public unmount() {\n        console.log(\"VMProgram (unmount)\")\n        super.unmount()\n        if (this._provider) {\n            this.roleManager.bus.removeServiceProvider(this._provider)\n        }\n    }\n}\n","import { useContext, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    VMProgramRunner,\n    VMTraceContext,\n} from \"../../../jacdac-ts/src/vm/runner\"\nimport AppContext from \"../AppContext\"\nimport { ERROR, TRACE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport RoleManager from \"../../../jacdac-ts/src/jdom/rolemanager\"\n\nexport default function useVMRunner(\n    roleManager: RoleManager,\n    program: VMProgram,\n    autoRun: boolean\n) {\n    const { setError } = useContext(AppContext)\n    const [runner, setRunner] = useState<VMProgramRunner>()\n    const [_autoStart, _setAutoStart] = useState<boolean>(!!autoRun)\n\n    const run = async () => {\n        _setAutoStart(!!autoRun)\n        await runner.startAsync()\n    }\n    const cancel = async () => {\n        _setAutoStart(false)\n        runner.cancel()\n    }\n\n    // auto start\n    useEffect(() => {\n        if (_autoStart && runner) runner.startAsync()\n        return () => runner?.cancel()\n    }, [runner, _autoStart])\n\n    // create runner\n    useEffect(() => {\n        try {\n            const newTestRunner =\n                program && new VMProgramRunner(roleManager, program)\n            setRunner(newTestRunner)\n\n            return () => newTestRunner?.unmount()\n        } catch (e) {\n            console.debug(e)\n            setRunner(undefined)\n        }\n    }, [roleManager, program])\n\n    // errors\n    useEffect(() => runner?.subscribe(ERROR, e => setError(e)), [runner])\n    // traces\n    const handleTrace = (value: {\n        message: string\n        context: VMTraceContext\n    }) => {\n        const { message, context } = value\n        if (Flags.diagnostics) console.debug(`vm> ${message}`, context)\n    }\n    useEffect(\n        () =>\n            runner?.subscribe<{ message: string; context: VMTraceContext }>(\n                TRACE,\n                handleTrace\n            ),\n        [runner]\n    )\n\n    return { runner, run, cancel }\n}\n","import { Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport CodeBlock from \"../CodeBlock\"\n\nexport default function VMDiagnostics(props: { program: VMProgram }) {\n    const { program } = props\n    return (\n        <Grid item xs={12}>\n            <Typography variant=\"subtitle1\">VM</Typography>\n            <CodeBlock\n                className=\"json\"\n                downloadName={\"test.json.vm\"}\n                downloadText={JSON.stringify(program, null, 2)}\n            >\n                {JSON.stringify(program, null, 2)}\n            </CodeBlock>\n        </Grid>\n    )\n}\n","import React, { useContext } from \"react\"\nimport BlockContext from \"./BlockContext\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport DeviceAvatar from \"../devices/DeviceAvatar\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\n\nimport { BlockSvg, FieldVariable } from \"blockly\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport CancelIcon from \"@material-ui/icons/Cancel\"\nimport { Chip, Tooltip } from \"@material-ui/core\"\nimport { TWIN_BLOCK } from \"./toolbox\"\n\nexport default function RoleChip(props: {\n    role: string\n    serviceClass: number\n    service: JDService\n    preferredDeviceId: string\n}) {\n    const { workspace } = useContext(BlockContext)\n    const { role, service, serviceClass, preferredDeviceId } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const serviceServer = useServiceServer(service)\n    const handleRoleClick = () => {\n        // spin off simulator\n        if (!service && !preferredDeviceId ) {\n            const specification =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            if (specification) {\n                addServiceProvider(\n                    bus,\n                    serviceProviderDefinitionFromServiceClass(\n                        specification.classIdentifier\n                    )\n                )\n            }\n        }\n        // add twin block\n        if (workspace) {\n            // try to find existing twin block\n            let twinBlock = workspace\n                .getTopBlocks(false)\n                .find(\n                    b =>\n                        b.type === TWIN_BLOCK &&\n                        (\n                            b.inputList[0].fieldRow.find(\n                                f => f.name === \"role\"\n                            ) as FieldVariable\n                        )?.getVariable()?.name === role\n                ) as BlockSvg\n            if (!twinBlock) {\n                twinBlock = workspace.newBlock(TWIN_BLOCK) as BlockSvg\n                let variable = workspace.getVariable(\n                    role,\n                    `${serviceClass}:client`\n                )\n                if (!variable)\n                    variable = workspace.getVariable(\n                        role,\n                        `${serviceClass}:server`\n                )\n                console.log(`new twin`, { twinBlock, variable })\n                const field = twinBlock.inputList[0].fieldRow.find(\n                    f => f.name === \"role\"\n                ) as FieldVariable\n                field.setValue(variable.getId())\n                const m = workspace.getMetrics()\n                twinBlock.moveBy(m.viewWidth / 2, m.viewHeight / 3)\n                twinBlock.initSvg()\n                twinBlock.render(false)\n            }\n            workspace.centerOnBlock(twinBlock.id)\n        }\n    }\n\n    const handleDelete = () => bus.removeServiceProvider(serviceServer.device)\n    return (\n        <Chip\n            label={role}\n            variant={service ? \"default\" : \"outlined\"}\n            avatar={service && <DeviceAvatar device={service.device} />}\n            onClick={handleRoleClick}\n            onDelete={serviceServer ? handleDelete : undefined}\n            deleteIcon={\n                <Tooltip title=\"stop simulator\">\n                    <CancelIcon />\n                </Tooltip>\n            }\n        />\n    )\n}\n","import React, { useContext } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport BlockContext from \"./BlockContext\"\nimport { Grid } from \"@material-ui/core\"\nimport RoleChip from \"./RoleChip\"\n\nexport default function BlockClientRoles() {\n    const { roleManager } = useContext(BlockContext)\n    const roles = useChange(roleManager, _ => _?.roles())\n\n    return (\n        <>\n            {roles?.map(({ role, service, serviceClass, preferredDeviceId }) => (\n                <Grid item key={role}>\n                    <RoleChip\n                        role={role}\n                        service={service}\n                        serviceClass={serviceClass}\n                        preferredDeviceId={preferredDeviceId}\n                    />\n                </Grid>\n            ))}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgramRunner, VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\nimport StopIcon from \"@material-ui/icons/Stop\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Chip, Grid } from \"@material-ui/core\"\nimport PauseIcon from \"@material-ui/icons/Pause\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { VM_BREAKPOINT } from \"../../../jacdac-ts/src/vm/events\"\nimport { VMHandler, VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport PlayForWorkIcon from \"@material-ui/icons/PlayForWork\"\nimport useMounted from \"../hooks/useMounted\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport BugReportIcon from \"@material-ui/icons/BugReport\"\nimport BlockContext from \"../blockly/BlockContext\"\n\nfunction useWorkspaceBreakpoints(program: VMProgram) {\n    const { workspace } = useContext(BlockContext)\n    const breakpoints = useMemo(\n        () =>\n            arrayConcatMany(\n                program?.handlers\n                    ?.filter(h => !h.meta) // don't debug watch statements\n                    .map(h => h.commands.map(cmd => cmd.sourceId))\n            )?.filter(id => !!id) || [],\n        [program]\n    )\n    const setBreakpointHighlight = (sourceId: string) => {\n        workspace?.highlightBlock(sourceId)\n    }\n\n    return {\n        breakpoints,\n        setBreakpointHighlight,\n    }\n}\n\nexport default function VMRunnerButtons(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    const status = useChange(runner, t => t?.status)\n    const stopped = !status || status === VMStatus.Stopped\n    const program = runner?.program\n    const [indeterminate, setIndeterminate] = useState(false)\n    const [breakpoint, setBreakpoint] = useState<string>(undefined)\n    const pausing = breakpoint === \"\"\n    const paused = !!breakpoint?.length\n    const mounted = useMounted()\n    const disabled = indeterminate || !runner\n    const { breakpoints, setBreakpointHighlight } =\n        useWorkspaceBreakpoints(program)\n\n    //console.log(\"runner status\", status)\n\n    const handleRun = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await run()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleCancel = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.clearBreakpointsAsync()\n            setBreakpoint(undefined)\n            await cancel()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleResume = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await runner.clearBreakpointsAsync()\n            await runner.resumeAsync()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handlePause = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.setBreakpointsAsync(breakpoints)\n            await runner.resumeAsync()\n            setBreakpoint(\"\")\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleStep = () => runner.stepAsync()\n\n    // register breakpoint handler\n    useEffect(\n        () =>\n            runner?.subscribe(\n                VM_BREAKPOINT,\n                (_: VMHandler, sourceId?: string) => {\n                    if (mounted()) setBreakpoint(sourceId)\n                }\n            ),\n        [runner]\n    )\n\n    // setting blockly breakpoint\n    useEffect(() => {\n        setBreakpointHighlight(breakpoint)\n        return () => setBreakpointHighlight(undefined)\n    }, [breakpoint])\n\n    // reset breakpoint in ui when runner, paused mode changes\n    useEffect(() => setBreakpoint(undefined), [runner])\n\n    return (\n        <>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title={paused ? \"resume\" : stopped ? \"start\" : \"stop\"}\n                    disabled={disabled}\n                    color={stopped ? \"primary\" : \"default\"}\n                    onClick={\n                        paused\n                            ? handleResume\n                            : stopped\n                            ? handleRun\n                            : handleCancel\n                    }\n                >\n                    {paused || stopped ? <PlayArrowIcon /> : <StopIcon />}\n                </IconButtonWithTooltip>{\" \"}\n            </Grid>\n            <Grid item>\n                <IconButtonWithProgress\n                    title={pausing ? \"cancel pause\" : paused ? \"step\" : \"pause\"}\n                    disabled={disabled}\n                    indeterminate={pausing}\n                    onClick={\n                        pausing\n                            ? handleResume\n                            : paused\n                            ? handleStep\n                            : handlePause\n                    }\n                >\n                    {paused ? <PlayForWorkIcon /> : <PauseIcon />}\n                </IconButtonWithProgress>\n            </Grid>\n            {(pausing || paused) && (\n                <Grid item>\n                    <Chip\n                        icon={<BugReportIcon />}\n                        label={pausing ? \"pausing\" : \"paused\"}\n                        color={\"secondary\"}\n                    />\n                </Grid>\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport { useContext } from \"react\"\nimport AppContext from \"../AppContext\"\n\nexport default function VMStartSimulatorButton() {\n    const { toggleShowDeviceHostsDialog } = useContext(AppContext)\n    return (\n        <IconButtonWithTooltip\n            title=\"start simulator\"\n            onClick={toggleShowDeviceHostsDialog}\n        >\n            <AddIcon />\n        </IconButtonWithTooltip>\n    )\n}\n","import { Grid } from \"@material-ui/core\"\nimport React from \"react\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport BlockClientRoles from \"../blockly/BlockRoles\"\nimport VMRunnerButtons from \"./VMRunnerButtons\"\nimport VMStartSimulatorButton from \"./VMStartSimulatorButton\"\n\nexport default function VMToolbar(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            spacing={1}\n            alignItems=\"center\"\n            alignContent=\"center\"\n        >\n            <VMRunnerButtons runner={runner} run={run} cancel={cancel} />\n            <Grid item>\n                <VMStartSimulatorButton />\n            </Grid>\n            <BlockClientRoles />\n        </Grid>\n    )\n}\n","import {\n    SRV_HID_KEYBOARD,\n    SRV_LED,\n    SRV_LED_MATRIX,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport type { DataRecordWindowRequest } from \"../../../workers/data/dist/node_modules/data.worker\"\n\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CustomBlockDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    EventBlockDefinition,\n    identityTransformData,\n    InputDefinition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    toolsColour,\n    TWIN_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServicesBaseDSL,\n    toRoleType,\n} from \"./servicesbase\"\nimport { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport { Block } from \"blockly\"\nimport postTransformData from \"./workers/data.proxy\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\nconst RECORD_WINDOW_BLOCK = \"jacdac_record_window\"\nconst INSPECT_BLOCK = \"jacdac_tools_inspect\"\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    // generic role blocks\n    private _roleBlocks: BlockDefinition[]\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            allServices,\n            supportedServices,\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n\n        const customClientBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `%1 %2 key %3`,\n                        args0: [\n                            roleVariable(service),\n                            <OptionsInputDefinition>{\n                                type: \"field_dropdown\",\n                                name: \"action\",\n                                options: [\n                                    [\"press\", \"press\"],\n                                    [\"down\", \"down\"],\n                                    [\"up\", \"up\"],\n                                ],\n                            },\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers, action)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `show_leds`,\n                        message0: `show %1 leds %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"leds\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display LEDs on the LED matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventClientBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    roleVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventClientBlocks =\n            this.makeRegisterChangeByEventBlocks(registers)\n        const registerSimpleGetClientBlocks =\n            this.makeRegisterSimpleGetBlocks(registerSimpleTypes)\n        const registerEnumGetClientBlocks = this.makeRegisterEnumGetBlocks([\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ])\n        const registerNumericsGetClientBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites)\n        const registerSetClientBlocks = this.makeRegisterSetBlocks(registers)\n\n        const commandClientBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [roleVariable(service), ...fieldsToFieldInputs(command)],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventClientBlocks,\n            ...registerSimpleGetClientBlocks,\n            ...registerEnumGetClientBlocks,\n            ...registerNumericsGetClientBlocks,\n            ...registerSetClientBlocks,\n            ...commandClientBlocks,\n            ...customClientBlockDefinitions,\n            ...registerChangeByEventClientBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            events.map(p => ({ service: p.service, packets: p.events }))\n        )\n\n        // client only\n        this._roleBlocks = [\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_EVENT_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"bound\", \"bound\"],\n                            [\"unbound\", \"unbound\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_binding_event\",\n            },\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_BLOCK,\n                message0: \"%1 bound\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_bound\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        const toolsBlocks: BlockDefinition[] = [\n            {\n                kind: \"block\",\n                type: TWIN_BLOCK,\n                message0: `view %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                            ...supportedServices.map(srv =>\n                                toRoleType(srv, false)\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: TwinField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Twin of the selected service`,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                helpUrl: \"\",\n                template: \"meta\",\n                transformData: identityTransformData,\n            },\n            {\n                kind: \"block\",\n                type: INSPECT_BLOCK,\n                message0: `inspect %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: JDomTreeField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Inspect a service`,\n                helpUrl: \"\",\n                template: \"meta\",\n            },\n            <BlockDefinition>{\n                kind: \"block\",\n                type: RECORD_WINDOW_BLOCK,\n                message0: \"record last %1 s\",\n                args0: [\n                    <NumberInputDefinition>{\n                        type: \"field_number\",\n                        name: \"horizon\",\n                        value: 10,\n                    },\n                ],\n                inputsInline: false,\n                previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                colour: toolsColour,\n                template: \"meta\",\n                dataPreviewField: true,\n                transformData: async (\n                    block: Block,\n                    data: { time: number }[],\n                    previousData: { time: number }[]\n                ) => {\n                    const horizon = block.getFieldValue(\"horizon\") || 10\n                    return postTransformData(<DataRecordWindowRequest>{\n                        type: \"record_window\",\n                        data,\n                        previousData,\n                        horizon,\n                    })\n                },\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._roleBlocks,\n            ...toolsBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const clientServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks\n        )\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Roles\",\n            colour: commandColor,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_EVENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        const toolsCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: toolsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: RECORD_WINDOW_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        }\n\n        return [...clientServicesCategories, commonCategory, toolsCategory]\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    ContentDefinition,\n    EventBlockDefinition,\n    InputDefinition,\n    LabelDefinition,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServiceRegister,\n    ServicesBaseDSL,\n} from \"./servicesbase\"\n\nexport class ServerServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServerServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n\n    makeRegisterGetSetRequestBlocks(\n        registers: ServiceRegister[],\n        isGet: boolean\n    ) {\n        return registers\n            .filter(\n                r =>\n                    (isGet &&\n                        (r.register.kind === \"ro\" ||\n                            r.register.kind === \"rw\")) ||\n                    (!isGet && r.register.kind == \"rw\")\n            )\n            .map<EventBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_register_${isGet ? \"get\" : \"set\"}_request_${\n                    service.shortId\n                }_${register.name}`,\n                message0: `on register ${isGet ? \"get\" : \"set\"} %1 ${humanify(\n                    register.name\n                )}`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [register],\n                template: \"event\",\n            }))\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const eventServerBlocks = events.flatMap<CommandBlockDefinition>(\n            ({ service, events }) => {\n                const eventsNoArgs = events.filter(ev => ev.fields.length === 0)\n                const retNoArgs: CommandBlockDefinition = {\n                    kind: \"block\",\n                    type: `jacdac_raise_event_${service.shortId}`,\n                    message0: `raise %1 %2`,\n                    args0: [\n                        roleVariable(service, false),\n                        <InputDefinition>{\n                            type: \"field_dropdown\",\n                            name: \"event\",\n                            options: eventsNoArgs.map(event => [\n                                humanify(event.name),\n                                event.name,\n                            ]),\n                        },\n                    ],\n                    inputsInline: true,\n                    colour: this.serviceColor(service),\n                    tooltip: `Events for the ${service.name} service`,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    command: undefined,\n                    previousStatement: CODE_STATEMENT_TYPE,\n                    nextStatement: CODE_STATEMENT_TYPE,\n\n                    template: \"raiseNo\",\n                }\n                const eventsArgs = events.filter(ev => ev.fields.length)\n                const retArgs = eventsArgs.map<CommandBlockDefinition>(ev => {\n                    return {\n                        kind: \"block\",\n                        type: `jacdac_raise_event_${service.shortId}_${ev.name}`,\n                        message0: !ev.fields.length\n                            ? `raise %1 ${humanify(ev.name)}`\n                            : `raise %1 ${humanify(\n                                  ev.name\n                              )} with ${fieldsToMessage(ev)}`,\n                        args0: [\n                            roleVariable(service, false),\n                            ...fieldsToFieldInputs(ev),\n                        ],\n                        values: fieldsToValues(service, ev),\n                        inputsInline: true,\n                        colour: this.serviceColor(service),\n                        tooltip: ev.description,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        command: ev,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n\n                        template: \"raiseArgs\",\n                    }\n                })\n                return [retNoArgs, ...retArgs]\n            }\n        )\n\n        const registerSimpleGetServerBlocks = this.makeRegisterSimpleGetBlocks(\n            registerSimpleTypes,\n            false\n        )\n        const registerEnumGetServerBlocks = this.makeRegisterEnumGetBlocks(\n            [...registerSimpleEnumTypes, ...registerCompositeEnumTypes],\n            false\n        )\n        const registerNumericsGetServerBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites, false)\n        const registerSetServerBlocks = this.makeRegisterSetBlocks(\n            registers,\n            false\n        )\n        const registerSetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            false\n        )\n        const registerGetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            true\n        )\n\n        const commandServerBlocks = commands.map<EventBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_server_${service.shortId}_${command.name}`,\n                message0: `on ${humanify(command.name)} %1`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [command],\n                template: \"event\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventServerBlocks,\n            ...registerSimpleGetServerBlocks,\n            ...registerEnumGetServerBlocks,\n            ...registerNumericsGetServerBlocks,\n            ...registerSetServerBlocks,\n            ...commandServerBlocks,\n            ...registerSetRequestBlocks,\n            ...registerGetRequestBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            commands.map(p => ({ service: p.service, packets: [p.command] })),\n            false\n        )\n\n        return [...this._serviceBlocks, ...this._eventFieldBlocks]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const serverServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks,\n            false\n        )\n\n        if (!serverServicesCategories?.length) return []\n\n        return [\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n            {\n                kind: \"category\",\n                name: \"Servers\",\n                contents: serverServicesCategories,\n            } as CategoryDefinition,\n        ]\n    }\n}\nconst serverServicesDSL = new ServerServicesBlockDomainSpecificLanguage()\nexport default serverServicesDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { CmdWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport LogViewField from \"../fields/LogViewField\"\nimport VariablesField from \"../fields/VariablesFields\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockReference,\n    CODE_STATEMENT_TYPE,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    InputDefinition,\n    LabelDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst WATCH_BLOCK = \"tools_watch\"\nconst LOG_BLOCK = \"tools_log\"\nconst VIEW_LOG_BLOCK = \"tools_log_view\"\nconst VARIABLES_BLOCK = \"tools_variables_view\"\n\nconst colour = toolsColour\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: VARIABLES_BLOCK,\n            message0: `variables %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                {\n                    type: VariablesField.KEY,\n                    name: \"variables\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Watch variables values`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: LOG_BLOCK,\n            message0: `log %1`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            tooltip: `Log an entry to the console`,\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: VIEW_LOG_BLOCK,\n            message0: `console %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: LogViewField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `View console content`,\n            template: \"meta\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Debugger\",\n            colour: colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Variables\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: VARIABLES_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Logging\",\n                },\n                {\n                    kind: \"block\",\n                    type: LOG_BLOCK,\n                    values: {\n                        value: { kind: \"block\", type: \"text\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: VIEW_LOG_BLOCK,\n                },\n            ],\n        },\n        {\n            kind: \"sep\",\n        },\n    ],\n\n    compileCommandToVM: ({ block, blockToExpression }): CmdWithErrors => {\n        const { type } = block\n        if (type === LOG_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"log\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n                meta: true,\n            }\n        }\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMCommand } from \"../../../../jacdac-ts/src/vm/ir\"\nimport {\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    InputDefinition,\n    SeparatorDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport { makeVMBase, processErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst WAIT_BLOCK = \"jacdac_wait\"\nconst ON_START_BLOCK = \"jacdac_start\"\nconst REPEAT_EVERY_BLOCK = \"jacdac_repeat_every\"\n\nconst colour = paletteColorByIndex(0)\nconst loopsDsl: BlockDomainSpecificLanguage = {\n    id: \"loops\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: ON_START_BLOCK,\n            message0: `on start`,\n            args0: [],\n            colour,\n            inputsInline: true,\n            tooltip: `Runs code when the device starts`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ],\n\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Events\",\n            colour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: REPEAT_EVERY_BLOCK,\n                    values: {\n                        interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ON_START_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WAIT_BLOCK,\n                    values: {\n                        time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n            ].filter(b => !!b),\n        },\n    ],\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === ON_START_BLOCK) {\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"start\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, []),\n            }\n        } else if (type === REPEAT_EVERY_BLOCK) {\n            const { inputs } = block\n            const { expr: time, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, errors),\n            }\n        }\n        return undefined\n    },\n    compileCommandToVM: ({ event, block, blockToExpression }) => {\n        const { type } = block\n        if (type === WAIT_BLOCK) {\n            const { inputs } = block\n            {\n                const { expr: time, errors } = blockToExpression(\n                    event,\n                    inputs[0].child\n                )\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }),\n                    errors: processErrors(block, errors),\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default loopsDsl\n","import { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n}\n\nconst logicDsl: BlockDomainSpecificLanguage = {\n    id: \"logic\",\n    types: [\n        \"variable_if\",\n        \"logic_compare\",\n        \"logic_operation\",\n        \"logic_negate\",\n        \"logic_boolean\",\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Logic\",\n            colour: \"%{BKY_LOGIC_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"dynamic_if\",\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_compare\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_operation\",\n                    values: {\n                        A: { kind: \"block\", type: \"logic_boolean\" },\n                        B: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_negate\",\n                    values: {\n                        BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_boolean\",\n                },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"logic_operation\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.LogicalExpression>{\n                        type: \"LogicalExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_negate\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO:?\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_compare\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default logicDsl\n","import { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nconst mathDsl: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function () {\n                return Math.random()\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function (\n                value: number,\n                minInclusive: number,\n                maxInclusive: number\n            ) {\n                return value < minInclusive\n                    ? minInclusive\n                    : value > maxInclusive\n                    ? maxInclusive\n                    : value\n            },\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <BlockReference>{ kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"math_single\": // built-in blockly\n            case \"jacdac_math_single\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                const op = inputs[0].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO:?\n                    },\n                    errors: [],\n                }\n            }\n            case \"math_arithmetic\": // built-in blockly\n            case \"jacdac_math_arithmetic\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\n\nexport default mathDsl\n","import {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    DummyInputDefinition,\n    JSON_TYPE,\n    LabelDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CompileExpressionToVMOptions,\n} from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst colour = paletteColorByIndex(-2)\nconst JSON_FIELD_TYPE = \"JSONField\"\nconst JSON_OBJECT_BLOCK = \"json_object\"\nconst JSON_FIELD_SET_BLOCK = \"json_field_set\"\nconst JSON_FIELD_GET_TEMPLATE = \"jsonFieldGet\"\nconst JSON_FIELD_VALUE_TYPE = [...PRIMITIVE_TYPES, JSON_TYPE]\nconst JSON_FIELD_HAS_BLOCK = \"json_field_has\"\n\nconst jsonDSL: BlockDomainSpecificLanguage = {\n    id: \"json\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_OBJECT_BLOCK,\n            message0: \"{ %1 %2 }\",\n            args0: [\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                <StatementInputDefinition>{\n                    type: \"input_statement\",\n                    name: \"fields\",\n                    check: JSON_FIELD_TYPE,\n                },\n            ],\n            output: JSON_TYPE,\n            colour,\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_FIELD_SET_BLOCK,\n            message0: \"%1: %2\",\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_FIELD_VALUE_TYPE,\n                },\n            ],\n            previousStatement: JSON_FIELD_TYPE,\n            nextStatement: JSON_FIELD_TYPE,\n            colour,\n        },\n        ...PRIMITIVE_TYPES.map(\n            output =>\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    message0: `%1 [ %2 ] as ${output.toLowerCase()}`,\n                    args0: [\n                        <ValueInputDefinition>{\n                            type: \"input_value\",\n                            name: \"value\",\n                            check: JSON_TYPE,\n                        },\n                        <TextInputDefinition>{\n                            type: \"field_input\",\n                            name: \"name\",\n                            spellcheck: false,\n                        },\n                    ],\n                    output,\n                    colour,\n                    template: JSON_FIELD_GET_TEMPLATE,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    vm: (value: any, name: string) => value?.[name],\n                }\n        ),\n        {\n            kind: \"block\",\n            type: JSON_FIELD_HAS_BLOCK,\n            message0: `has %1 [ %2 ]`,\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_TYPE,\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n            ],\n            output: BOOLEAN_TYPE,\n            colour,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            vm: (value: any, name: string) => !!value?.[name],\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"JSON\",\n            colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Create\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_OBJECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_FIELD_SET_BLOCK,\n                    values: {\n                        value: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Read\",\n                },\n                ...PRIMITIVE_TYPES.map(output => ({\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    values: {\n                        value: <BlockReference>{\n                            kind: \"block\",\n                            type: \"variables_get\",\n                            check: JSON_TYPE,\n                        },\n                    },\n                })),\n                {\n                    kind: \"block\",\n                    type: JSON_FIELD_HAS_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileExpressionToVM(options: CompileExpressionToVMOptions) {\n        const { event, block, definition, blockToExpressionInner } = options\n        const { type } = block\n        const { template } = definition\n        if (type === JSON_OBJECT_BLOCK) {\n            // TODO\n        } else if (type === JSON_FIELD_SET_BLOCK) {\n            // TODO\n        } else if (template === JSON_FIELD_GET_TEMPLATE) {\n            // TODO: genearte JSON\n            console.log(\"json expr\", {\n                event,\n                block,\n                definition,\n                blockToExpressionInner,\n            })\n            return undefined\n        }\n        // don't know\n        return undefined\n    },\n}\n\nexport default jsonDSL\n","import {\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    identityTransformData,\n    NumberInputDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport GaugeWidgetField from \"../fields/GaugeWidgetField\"\n\nconst DASHBOARD_GAUGE_BLOCK = \"jacdac_widget_gauge\"\n\nconst colour = toolsColour\nconst widgetDSL: BlockDomainSpecificLanguage = {\n    id: \"widget\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DASHBOARD_GAUGE_BLOCK,\n            message0: \"gauge min %1 max %2 %3 %4 %5\",\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"min\",\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"max\",\n                    value: 100,\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"field\",\n                    dataType: \"number\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: GaugeWidgetField.KEY,\n                    name: \"widget\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour,\n            template: \"meta\",\n            inputsInline: false,\n            transformData: identityTransformData,\n        },\n    ],\n\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Widgets\",\n            contents: [\n                <BlockReference>{ kind: \"block\", type: DASHBOARD_GAUGE_BLOCK },\n            ],\n            colour,\n        },\n    ],\n}\n\nexport default widgetDSL\n","import servicesDSL from \"../blockly/dsl/servicesdsl\"\nimport serverServicesDSL from \"../blockly/dsl/serverservicesdsl\"\nimport toolsDsl from \"../blockly/dsl/toolsdsl\"\nimport loopsDsl from \"../blockly/dsl/loopsdsl\"\nimport logicDsl from \"../blockly/dsl/logicdsl\"\nimport mathDsl from \"../blockly/dsl/mathdsl\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport jsonDsl from \"../blockly/dsl/jsondsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport widgetDSL from \"../blockly/dsl/widgetdsl\"\n\nconst vmDsls = [\n    servicesDSL,\n    serverServicesDSL,\n    loopsDsl,\n    logicDsl,\n    mathDsl,\n    jsonDsl,\n    variablesDsl,\n    toolsDsl,\n    widgetDSL,\n    dataDsl,\n    chartDsl,\n    shadowDsl,\n    fieldsDsl,\n]\nexport default vmDsls\n","import { Grid, NoSsr } from \"@material-ui/core\"\nimport React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport useVMRunner from \"./useVMRunner\"\nimport VMDiagnostics from \"./VMDiagnostics\"\nimport VMToolbar from \"./VMToolbar\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport vmDsls from \"./vmdsls\"\nimport { VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport { VM_WARNINGS_CATEGORY, WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../../../jacdac-ts/src/dsl/workspacejson\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { resolveWorkspaceServices } from \"../blockly/WorkspaceContext\"\n\nconst VM_EDITOR_ID = \"vm\"\nconst VM_SOURCE_STORAGE_KEY = \"tools:vmeditor\"\nconst VM_NEW_FILE_CONTENT = JSON.stringify({\n    editor: VM_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction VMEditorWithContext() {\n    const {\n        dsls,\n        workspace,\n        workspaceJSON,\n        roleManager,\n        setWarnings,\n        dragging,\n    } = useContext(BlockContext)\n    const { fileSystem } = useContext(FileSystemContext)\n    const [program, setProgram] = useState<VMProgram>()\n    const autoStart = true\n    const { runner, run, cancel } = useVMRunner(roleManager, program, autoStart)\n\n    // don't run the VM while dragging as it glitches the Ui\n    useEffect(() => {\n        if (runner?.status === VMStatus.Running) cancel()\n    }, [runner, dragging])\n    useEffect(() => {\n        try {\n            const newProgram = workspaceJSONToVMProgram(workspaceJSON, dsls)\n            if (JSON.stringify(newProgram) !== JSON.stringify(program))\n                setProgram(newProgram)\n        } catch (e) {\n            console.error(e)\n            setProgram(undefined)\n        }\n    }, [dsls, workspaceJSON])\n    useEffect(\n        () =>\n            program &&\n            roleManager?.updateRoles([\n                ...program.roles,\n                ...program.serverRoles.map(r => ({\n                    role: r.role,\n                    serviceClass: r.serviceClass,\n                    preferredDeviceId: \"TBD\",\n                })),\n            ]),\n        [roleManager, program]\n    )\n    useEffect(\n        () =>\n            setWarnings(\n                VM_WARNINGS_CATEGORY,\n                arrayConcatMany(program?.handlers.map(h => h.errors))\n            ),\n        [program]\n    )\n\n    useEffect(() => {\n        const services = resolveWorkspaceServices(workspace)\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={VM_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <VMToolbar runner={runner} run={run} cancel={cancel} />\n            </Grid>\n            <Grid item xs={12}>\n                <BlockEditor editorId={VM_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && (\n                <>\n                    <VMDiagnostics program={program} />\n                    <BlockDiagnostics />\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function VMEditor() {\n    const dsls = useMemo(() => {\n        return vmDsls\n    }, [])\n    const handleOnBeforeSaveWorkspaceFile = useCallback(\n        (file: WorkspaceFile) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const f = file as any\n            f.vm = workspaceJSONToVMProgram(file.json, dsls)\n        },\n        []\n    )\n\n    return (\n        <NoSsr>\n            <BlockProvider\n                storageKey={VM_SOURCE_STORAGE_KEY}\n                dsls={dsls}\n                onBeforeSaveWorkspaceFile={\n                    Flags.diagnostics\n                        ? handleOnBeforeSaveWorkspaceFile\n                        : undefined\n                }\n            >\n                <VMEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport VMEditor from \"../../components/vm/VMEditor\"\n\nexport default function Page() {\n    return <VMEditor />\n}\n"],"names":["isEvent","isRegister","isCommand","isIntensity","JDServiceClient","CHANGE","EVENT","REPORT_UPDATE","SystemReg","jdpack","VMServiceClient","service","_registers","_reportUpdate","_events","registerRegister","regName","handler","pkt","specification","packets","find","name","register","identifier","mount","subscribe","registerEvent","eventName","event","sendCommandAsync","commandName","values","p","sendCmdAsync","packFormat","writeRegisterAsync","code","Value","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","fields","type","Intensity","lookupRegisterAsync","root","fld","reportUpdate","refresh","unpackedValue","field","f","value","undefined","unparse","e","ae","elements","map","join","caller","callee","arguments","computed","object","property","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","evalAsync","visitExpressionAsync","ret","push","top","Math","abs","le","val","id","lit","isHighLevelRegister","isHighLevelEvent","JDRegisterServer","SensorServer","VM_EXTERNAL_REQUEST","VMRegisterServer","serviceServer","reg","defaultValue","sendGetAsync","raiseGetRegisterEvent","theRealSendGetAsync","VMServiceServer","role","spec","classIdentifier","readingValues","streamingInterval","eventNameToId","regNameToId","regFieldToId","commandPackets","cmdFieldToId","filter","regServer","addExistingRegister","forEach","index","emit","kind","tgt","cmd","addCommand","decoded","respondToGetRegisterEvent","sendEventNameAsync","sendEvent","lookupRegister","writeRegister","ev","setValues","assert","JDEventSource","serviceSpecificationFromClassIdentifier","GLOBAL_CHANGE","REGISTER_CHANGE","EXTERNAL_REQUEST","VMExceptionCode","VMException","data","Error","VMEnvironment","registers","events","serverRoles","_currentRequest","_clientEnvs","_serverEnvs","_globals","_rolesBound","_rolesUnbound","setupServers","serviceClass","globals","servers","Object","keys","k","server","serviceChanged","unmount","r","roleBound","serviceEnv","getService","getRootName","s","getServer","lookupAsync","roleName","startsWith","me","local","ep","writeGlobal","firstType","TypeMismatch","toString","clearExternalStimulii","rolesReset","hasRequest","op","completeRequest","request","initRoles","slice","roleTransition","unsubscribe","vs","Mutex","promises","shift","acquire","Promise","resolve","reject","then","v","ROLE_BOUND","ROLE_UNBOUND","SERVICE_PROVIDER_REMOVED","TRACE","checkProgram","compileProgram","VM_GLOBAL_CHANGE","VM_COMMAND_FAILED","VM_WATCH_CHANGE","VM_BREAKPOINT","VM_INTERNAL_ERROR","VM_LOG_ENTRY","VM_ROLE_MISSING","JDClient","JDServiceProvider","VMInternalStatus","VM_WAKE_SLEEPER","VMJumpException","label","VMTimerException","ms","VMRequestException","VMCommandEvaluator","parent","_regSaved","_changeSaved","_started","trace","msg","context","command","ee","namespace","funName","args","InternalError","newEval","evalExpressionAsync","expr","checkExpressionAsync","startAsync","inst","evaluate","neededStart","Running","a","Completed","regValue","watch","sourceId","evString","writeLog","Stopped","VMCommandRunner","handlerId","_status","_eval","stepAsync","status","VMHandlerRunner","_commandIndex","_currentCommand","stopped","_labelToIndex","commands","c","reset","gotoTop","Ready","commandIndex","wake","next","runToCompletionAsync","singleStep","singleStepCheckBreakAsync","getCommand","sid","breakpointOnAsync","singleStepAsync","Sleeping","sleepAsync","handlerWokeOnRequest","isEveryHandler","h","isRegisterChangeHandler","VMStatus","MAX_LOG","VMProgramRunner","roleManager","program","_handlerRunners","_roles","_serverRoles","_waitQueue","_everyQueue","_runQueue","_sleepQueue","_watch","_log","_breaks","_onCompletionOfExternalRequest","_in_run","compiled","errors","roles","console","debug","_env","handlers","_waitRunMutex","_breaksMutex","_sleepMutex","waitingToRunning","bus","provider","_provider","wakeSleeper","initializeRoleManagement","g","setStatus","message","last","text","count","lookupWatch","setBreakpointsAsync","breaks","b","clearBreakpointsAsync","setTimeout","handlerRunner","device","stopSleepers","startProvider","_device","cancel","resumeAsync","Paused","runAsync","getCurrentRunner","runHandlerAsync","postProcessHandler","newHead","emitBreakpoint","atTop","oneStep","brkCommand","ex","RoleNoService","done","moveToWait","unshift","q","findIndex","del","splice","handlersStarted","newRunners","sleepingRunners","hs","indexOf","clearTimeout","addRoleService","addServiceProvider","updateRole","deviceId","statusCode","log","removeServiceProvider","useContext","useEffect","useState","AppContext","ERROR","Flags","useVMRunner","autoRun","setError","runner","setRunner","_autoStart","_setAutoStart","run","newTestRunner","handleTrace","diagnostics","Grid","Typography","React","CodeBlock","VMDiagnostics","props","JSON","stringify","BlockContext","JacdacContext","DeviceAvatar","serviceProviderDefinitionFromServiceClass","useServiceServer","CancelIcon","Chip","Tooltip","TWIN_BLOCK","RoleChip","workspace","preferredDeviceId","handleRoleClick","twinBlock","getTopBlocks","inputList","fieldRow","getVariable","newBlock","variable","setValue","getId","m","getMetrics","moveBy","viewWidth","viewHeight","initSvg","render","centerOnBlock","handleDelete","useChange","BlockClientRoles","_","useMemo","PlayArrowIcon","StopIcon","IconButtonWithTooltip","PauseIcon","arrayConcatMany","PlayForWorkIcon","useMounted","IconButtonWithProgress","BugReportIcon","useWorkspaceBreakpoints","breakpoints","meta","setBreakpointHighlight","highlightBlock","VMRunnerButtons","t","indeterminate","setIndeterminate","breakpoint","setBreakpoint","pausing","paused","mounted","disabled","handleRun","handleCancel","handleResume","handlePause","handleStep","AddIcon","VMStartSimulatorButton","toggleShowDeviceHostsDialog","VMToolbar","SRV_HID_KEYBOARD","SRV_LED","SRV_LED_MATRIX","SRV_SEVEN_SEGMENT_DISPLAY","KeyboardKeyField","LEDColorField","LEDMatrixField","CODE_STATEMENT_TYPE","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","toolsColour","JDomTreeField","TwinField","createServiceColor","fieldsToFieldInputs","fieldsToMessage","fieldsToValues","getServiceInfo","roleVariable","serviceHelp","ServicesBaseDSL","toRoleType","humanify","postTransformData","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","RECORD_WINDOW_BLOCK","INSPECT_BLOCK","commandColor","ServicesBlockDomainSpecificLanguage","createBlocks","options","theme","serviceColor","allServices","supportedServices","registerSimpleTypes","registerComposites","registerSimpleEnumTypes","registerCompositeEnumTypes","resolveService","cls","srv","customClientBlockDefinitions","message0","args0","KEY","colour","inputsInline","previousStatement","nextStatement","tooltip","helpUrl","expression","template","check","color","SHADOW","speed","digits","def","shortId","toLowerCase","eventClientBlocks","registerChangeByEventClientBlocks","makeRegisterChangeByEventBlocks","registerSimpleGetClientBlocks","makeRegisterSimpleGetBlocks","registerEnumGetClientBlocks","makeRegisterEnumGetBlocks","registerNumericsGetClientBlocks","makeRegisterNumericsGetBlocks","registerSetClientBlocks","makeRegisterSetBlocks","commandClientBlocks","description","_serviceBlocks","_eventFieldBlocks","makeFieldBlocks","_roleBlocks","variableTypes","defaultType","output","toolsBlocks","transformData","dataPreviewField","block","previousData","horizon","getFieldValue","createCategory","makeServicesCategories","createCategoryHelper","clientServicesCategories","commonCategory","contents","toolsCategory","servicesDSL","ServerServicesBlockDomainSpecificLanguage","makeRegisterGetSetRequestBlocks","isGet","eventServerBlocks","flatMap","eventsNoArgs","retNoArgs","eventsArgs","retArgs","registerSimpleGetServerBlocks","registerEnumGetServerBlocks","registerNumericsGetServerBlocks","registerSetServerBlocks","registerSetRequestBlocks","registerGetRequestBlocks","commandServerBlocks","serverServicesCategories","serverServicesDSL","toIdentifier","makeVMBase","LogViewField","VariablesField","WatchValueField","WATCH_BLOCK","LOG_BLOCK","VIEW_LOG_BLOCK","VARIABLES_BLOCK","toolsDSL","compileCommandToVM","blockToExpression","inputs","child","compileEventToVM","processErrors","paletteColorByIndex","WAIT_BLOCK","ON_START_BLOCK","REPEAT_EVERY_BLOCK","loopsDsl","interval","time","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","logicDsl","types","A","B","BOOL","compileExpressionToVM","blockToExpressionInner","prefix","ADD","MULTIPLY","DIVIDE","MINUS","mathDsl","style","extensions","vm","random","minInclusive","maxInclusive","NUM","BOOLEAN_TYPE","JSON_TYPE","PRIMITIVE_TYPES","JSON_FIELD_TYPE","JSON_OBJECT_BLOCK","JSON_FIELD_SET_BLOCK","JSON_FIELD_GET_TEMPLATE","JSON_FIELD_VALUE_TYPE","JSON_FIELD_HAS_BLOCK","jsonDSL","spellcheck","definition","DataColumnChooserField","GaugeWidgetField","DASHBOARD_GAUGE_BLOCK","widgetDSL","dataType","toolsDsl","variablesDsl","shadowDsl","fieldsDsl","jsonDsl","chartDsl","dataDsl","vmDsls","NoSsr","useCallback","BlockProvider","BlockDiagnostics","workspaceJSONToVMProgram","BlockEditor","VM_WARNINGS_CATEGORY","WORKSPACE_FILENAME","FileTabs","FileSystemContext","resolveWorkspaceServices","VM_EDITOR_ID","VM_SOURCE_STORAGE_KEY","VM_NEW_FILE_CONTENT","editor","xml","VMEditorWithContext","dsls","workspaceJSON","setWarnings","dragging","fileSystem","setProgram","autoStart","newProgram","error","updateRoles","services","VMEditor","handleOnBeforeSaveWorkspaceFile","file","json","Page"],"sourceRoot":""}