{"version":3,"file":"2184-41a2d4b99551500ed9eb.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/components/ui/JSONSchemaForm.tsx"],"sourcesContent":["import {\n    Box,\n    Chip,\n    createStyles,\n    Grid,\n    makeStyles,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        hr: {\n            background: theme.palette.text.disabled,\n            marginBottom: \"unset\",\n        },\n        start: {\n            width: theme.spacing(2),\n        },\n    })\n)\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n    const classes = useStyles()\n    return (\n        <Grid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport React from \"react\"\nimport type { JSONSchema4 } from \"json-schema\"\nimport { Grid, TextField } from \"@material-ui/core\"\nimport SwitchWithLabel from \"./SwitchWithLabel\"\nimport { useId } from \"react-use-id-hook\"\nimport GridHeader from \"./GridHeader\"\n\nfunction SchemaForm(props: {\n    schema: JSONSchema4\n    required?: boolean\n    value: object\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setValue: (newValue: any) => void\n}) {\n    const { schema, required, value, setValue } = props\n    const { type, title, description } = schema\n    const id = useId()\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value || \"\")\n    }\n\n    const handleNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const v = parseFloat(event.target.value)\n        if (!isNaN(v)) setValue(v)\n    }\n    const handleIntegerChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setValue(v)\n    }\n    const handleCheckedChange = (\n        event: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean\n    ) => {\n        setValue(checked)\n    }\n\n    switch (type) {\n        case \"number\":\n            return (\n                <Grid item xs={12}>\n                    <TextField\n                        id={id}\n                        label={title}\n                        required={required}\n                        helperText={description}\n                        variant=\"outlined\"\n                        type=\"number\"\n                        value={value}\n                        fullWidth={true}\n                        onChange={handleNumberChange}\n                    />\n                </Grid>\n            )\n        case \"integer\":\n            return (\n                <Grid item xs={12}>\n                    <TextField\n                        id={id}\n                        label={title}\n                        required={required}\n                        helperText={description}\n                        variant=\"outlined\"\n                        type=\"number\"\n                        value={value}\n                        fullWidth={true}\n                        onChange={handleIntegerChange}\n                    />\n                </Grid>\n            )\n        case \"string\":\n            return (\n                <Grid item xs={12}>\n                    <TextField\n                        id={id}\n                        label={title}\n                        required={required}\n                        helperText={description}\n                        variant=\"outlined\"\n                        type=\"text\"\n                        value={value}\n                        fullWidth={true}\n                        onChange={handleChange}\n                    />\n                </Grid>\n            )\n        case \"boolean\":\n            return (\n                <Grid item xs={12}>\n                    <SwitchWithLabel\n                        id={id}\n                        required={required}\n                        label={title}\n                        title={description}\n                        checked={!!value}\n                        onChange={handleCheckedChange}\n                    />\n                </Grid>\n            )\n        case \"object\": {\n            const { properties, required } = schema\n            return (\n                <>\n                    {title && <GridHeader title={title} />}\n                    <PropertiesForm\n                        properties={properties}\n                        required={required}\n                        value={value}\n                        setValue={setValue}\n                    />\n                </>\n            )\n        }\n    }\n\n    return null\n}\n\nfunction PropertiesForm(props: {\n    properties: { [index: string]: JSONSchema4 }\n    required: false | string[]\n    value: object\n    setValue: (newValue: object) => void\n}) {\n    const { properties, required, value, setValue } = props\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleSetValue = (key: string, v: any) => (newValue: any) => {\n        setValue({ ...(v || {}), [key]: newValue })\n    }\n\n    return (\n        <>\n            {Object.entries(properties).map(([key, schema]) => (\n                <SchemaForm\n                    key={key}\n                    schema={schema}\n                    required={required && required.indexOf(key) > -1}\n                    value={value?.[key]}\n                    setValue={handleSetValue(key, value)}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default function JSONSchemaForm(props: {\n    schema: JSONSchema4\n    value: object\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setValue: (newValue: any) => void\n    className?: string\n}) {\n    const { schema, value, setValue, className } = props\n\n    return (\n        <Grid container spacing={1} className={className}>\n            <SchemaForm schema={schema} value={value} setValue={setValue} />\n        </Grid>\n    )\n}\n"],"names":["Box","Chip","createStyles","Grid","makeStyles","Typography","React","clsx","useStyles","theme","hr","background","palette","text","disabled","marginBottom","start","width","spacing","GridHeader","props","title","count","variant","action","classes","undefined","TextField","SwitchWithLabel","useId","SchemaForm","schema","required","value","setValue","type","description","id","handleChange","event","target","handleNumberChange","v","parseFloat","isNaN","handleIntegerChange","parseInt","handleCheckedChange","checked","properties","PropertiesForm","handleSetValue","key","newValue","Object","entries","map","indexOf","JSONSchemaForm","className"],"sourceRoot":""}