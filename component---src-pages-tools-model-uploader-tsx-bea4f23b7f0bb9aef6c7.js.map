{"version":3,"sources":["webpack:///./src/components/ui/CircularProgressWithLabel.tsx","webpack:///./src/components/alert/ConnectAlert.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack:///./src/components/alert/DeviceLostAlert.tsx","webpack:///./src/components/ServiceList.tsx","webpack:///./src/components/useDb.ts","webpack:///./jacdac-ts/src/jdom/modelrunner.ts","webpack:///./src/components/SensorAggregatorConfigView.tsx","webpack:///./src/components/useCall.tsx","webpack:///./node_modules/@material-ui/icons/esm/Link.js","webpack:///./src/pages/tools/model-uploader.tsx"],"names":["CircularProgressWithLabel","props","Math","round","value","useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","classes","useContext","JacdacContext","bus","connectionState","serviceClass","devices","useChange","b","spec","serviceSpecificationFromClassIdentifier","webusb","isWebUSBEnabled","isWebUSBSupported","length","BusState","Disconnected","name","ConnectAlert","DeviceLostAlert","device","lost","useEventRaised","LOST","FOUND","dev","ServiceListItem","service","content","checked","checkedDisabled","toggleChecked","actions","handleCheck","undefined","ServiceList","selected","toggleSelected","alertMissing","services","n","gridBreakpoints","useGridBreakpoints","handleSelected","handleChecked","serviceContent","serviceActions","map","id","useDbBlob","DbContext","db","useState","_value","_setValue","values","blobs","useEffect","_mounted","subscribe","DB_VALUE_CHANGE","changed","get","v","console","log","set","useEffectAsync","mounted","blob","setBlob","useDbUint8Array","blobName","model","setModel","readBlobToUint8Array","buf","data","useDbString","readBlobToText","t","useDbJSON","JSONTryParse","isMLModelSupported","formatRegValue","U","getMLModelFormatName","SRV_MODEL_RUNNER","enums","members","m0","m1","Object","keys","slice","ModelRunnerClient","registersUseAcks","isModelSupported","reg","register","ModelRunnerReg","Format","refresh","intValue","subscribeResults","handler","Outputs","REPORT_RECEIVE","bufferToArray","NumberFormat","Float32LE","deployModel","onProgress","sendCmdAwaitResponseAsync","Packet","jdpacked","ModelRunnerCmd","SetModel","resp","jdunpack","pipePort","Error","pipe","OutPipe","chunkSize","i","send","close","autoInvoke","everySamples","AutoInvokeEvery","sendSetPackedAsync","getReg","f","modelStats","info","ModelSize","r","AllocatedArenaSize","InputShape","UInt16LE","OutputShape","LastError","JDServiceClient","SensorAggregatorInputConfigView","input","deviceId","serviceIndex","serviceName","SensorAggregatorConfigView","config","inputs","samplingInterval","samplesInWindow","useCall","AppContext","setAppError","setError","error","running","setRunning","progress","setProgress","handleProgress","p","call","e","callAsync","alert","ImportButton","lazy","ModelContent","modelSize","useRegisterIntValue","lastError","useRegisterStringValue","prettySize","ModelActions","sensorAggregatorService","sensorInput","modelDisabled","handleDeployModel","aggregator","SensorAggregatorClient","setInputs","runner","ModelUploader","importing","setImporting","sensorConfig","setSensorConfig","ServiceManagerContext","modelStore","handleTfmodelFiles","files","file","handleClearModel","handleSensorConfigFiles","handleClearConfiguration","handleLoadModel","loadFile","handleLoadInputConfiguration","models","_","inputConfigurations","byteLength","path","size","iconfig","SRV_SENSOR_AGGREGATOR"],"mappings":"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","file":"component---src-pages-tools-model-uploader-tsx-bea4f23b7f0bb9aef6c7.js","sourcesContent":["import React from \"react\"\nimport { CircularProgressProps, Box, CircularProgress, Typography } from \"@material-ui/core\";\n\nexport default function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}","// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\";\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\";\nimport React, { useContext } from \"react\";\nimport { BusState } from \"../../../jacdac-ts/src/jdom/bus\";\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport ConnectButton from \"../../jacdac/ConnectButton\";\nimport { isWebUSBEnabled, isWebUSBSupported } from \"../../../jacdac-ts/src/jdom/usb\"\nimport { NoSsr } from '@material-ui/core';\nimport useChange from \"../../jacdac/useChange\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    button: {\n        marginLeft: theme.spacing(2)\n    }\n}))\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { bus, connectionState } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass } = props\n    const devices = useChange(bus, b => b.devices({ serviceClass }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const webusb = isWebUSBEnabled() && isWebUSBSupported()\n\n    if (!devices?.length &&\n        webusb &&\n        connectionState === BusState.Disconnected)\n        return <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <ConnectButton className={classes.button} full={true} transparent={true} />\n            </Alert>\n        </Box>\n    return null\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return <NoSsr>\n        <NoSsrConnectAlert {...props} />\n    </NoSsr>\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import React from \"react\";\nimport { LOST, FOUND } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\";\nimport useEventRaised from \"../../jacdac/useEventRaised\";\nimport Alert from \"../ui/Alert\";\n\nexport function DeviceLostAlert(props: { device: JDDevice }) {\n    const { device } = props;\n    const lost = useEventRaised([LOST, FOUND], device, dev => !!dev?.lost)\n    return <>\n        {lost && <Alert severity=\"info\">Device lost...</Alert>}\n    </>\n}","\nimport React, { useContext } from 'react';\nimport { Grid, CardContent, Card, CardActions, Switch, Box } from '@material-ui/core';\nimport useChange from '../jacdac/useChange';\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport useGridBreakpoints from './useGridBreakpoints';\nimport DeviceCardHeader from './DeviceCardHeader';\nimport { JDService } from '../../jacdac-ts/src/jdom/service';\nimport { DeviceLostAlert } from './alert/DeviceLostAlert';\nimport Alert from './ui/Alert';\n\n\nfunction ServiceListItem(props: {\n    service: JDService,\n    content?: JSX.Element | JSX.Element[],\n    checked?: boolean,\n    checkedDisabled?: boolean\n    toggleChecked?: () => void,\n    actions?: JSX.Element | JSX.Element[]\n}) {\n    const { service, content, checked, checkedDisabled, toggleChecked, actions } = props;\n    const { device } = service;\n\n    const handleCheck = () => toggleChecked()\n\n    return <Card>\n        <DeviceCardHeader device={device} showMedia={true} />\n        <CardContent>\n            <DeviceLostAlert device={device} />\n            {content}\n        </CardContent>\n        <CardActions>\n            {checked !== undefined && <Switch disabled={checkedDisabled} onChange={handleCheck} checked={checked} />}\n            {actions}\n        </CardActions>\n    </Card>\n}\n\nexport default function ServiceList(props: {\n    serviceClass: number,\n    selected?: (service: JDService) => boolean,\n    toggleSelected?: (service: JDService) => void,\n    content?: (service: JDService) => JSX.Element | JSX.Element[],\n    actions?: (service: JDService) => JSX.Element | JSX.Element[],\n    alertMissing?: string\n}) {\n    const { serviceClass, selected, toggleSelected, content, actions, alertMissing } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, n => n.services({ serviceClass }))\n    const gridBreakpoints = useGridBreakpoints(services?.length)\n\n    const handleSelected = (service: JDService) => selected && selected(service)\n    const handleChecked = (service: JDService) => () => toggleSelected && toggleSelected(service);\n    const serviceContent = (service: JDService) => content && content(service);\n    const serviceActions = (service: JDService) => actions && actions(service);\n\n    if (alertMissing && !services?.length)\n        return <Alert severity=\"info\">{alertMissing}</Alert>\n\n    return (<Box mb={1}>\n        <Grid container spacing={2}>\n            {services?.map(service => <Grid key={service.id} item {...gridBreakpoints}>\n                <ServiceListItem\n                    service={service}\n                    checked={handleSelected(service)}\n                    toggleChecked={handleChecked(service)}\n                    content={serviceContent(service)}\n                    actions={serviceActions(service)}\n                />\n            </Grid>)}\n        </Grid></Box>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { JSONTryParse, readBlobToText, readBlobToUint8Array } from \"../../jacdac-ts/src/jdom/utils\";\nimport DbContext, { DB_VALUE_CHANGE } from \"./DbContext\";\nimport useEffectAsync from \"./useEffectAsync\";\n\nexport function useDbBlob(id: string) {\n    const { db } = useContext(DbContext)\n    const [_value, _setValue] = useState<Blob>(undefined)\n    const values = db?.blobs\n\n    // listen to change\n    useEffect(() => {\n        let _mounted = true;\n        return values?.subscribe(DB_VALUE_CHANGE, async (changed) => {\n            if (changed === id) {\n                try {\n                    const v = await values.get(id)\n                    if (_mounted) {\n                        _setValue(v);\n                    }\n                }\n                catch (e) {\n                    console.log(e)\n                    await values?.set(id, undefined);\n                }\n            }\n            return () => {\n                _mounted = false;\n            }\n        })\n    }, [values])\n\n    // load intial value\n    useEffectAsync(async (mounted) => {\n        try {\n            const v = await values?.get(id);\n            if (mounted())\n                _setValue(v)\n        } catch (e) {\n            console.log(e)\n            // trash data\n            await values?.set(id, undefined);\n        }\n    }, [values])\n\n    return {\n        blob: _value,\n        setBlob: async (blob: Blob) => {\n            await values?.set(id, blob)\n        }\n    }\n}\n\nexport function useDbUint8Array(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n\n    useEffectAsync(async (mounted) => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const buf = await readBlobToUint8Array(blob);\n            if (mounted())\n                setModel(buf);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbString(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<string>(undefined)\n\n    useEffectAsync(async () => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const t = await readBlobToText(blob);\n            setModel(t);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbJSON<T>(blobName: string) {\n    const { data, setBlob } = useDbString(blobName);\n    const value: T = JSONTryParse(data) as T;\n    return {\n        value,\n        setBlob: async (blob: Blob) => {\n            await setBlob(blob)\n        }\n    }\n}\n","import * as U from \"./utils\"\nimport Packet from \"./packet\"\nimport {\n    REPORT_RECEIVE,\n    SRV_MODEL_RUNNER\n} from \"./constants\"\nimport { JDService } from \"./service\"\nimport { ModelRunnerCmd, ModelRunnerReg } from \"./constants\"\nimport { bufferToArray, NumberFormat } from \"./buffer\"\nimport { OutPipe } from \"./pipes\"\nimport { JDRegister } from \"./register\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { jdunpack } from \"./pack\"\n\n/*\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n*/\n\nexport function isMLModelSupported(model: Uint8Array, formatRegValue: number) {\n    return U.read32(model, 0) == formatRegValue || U.read32(model, 4) == formatRegValue\n}\n\nexport function getMLModelFormatName(model: Uint8Array) {\n    const map = serviceSpecificationFromClassIdentifier(SRV_MODEL_RUNNER).enums[\"ModelFormat\"].members\n    const m0 = U.read32(model, 0)\n    const m1 = U.read32(model, 4)\n    for (const v of Object.keys(map)) {\n        if (map[v] == m0 || map[v] == m1)\n            return v\n    }\n    return \"0x\" + U.toHex(model.slice(0, 8))\n}\n\nexport class ModelRunnerClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        this.service.registersUseAcks = true\n    }\n\n    // TODO this should use some caching?\n    async isModelSupported(model: Uint8Array) {\n        const reg = this.service.register(ModelRunnerReg.Format)\n        await reg.refresh()\n        return reg.data == null || isMLModelSupported(model, reg.intValue >>> 0)\n    }\n\n    subscribeResults(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(ModelRunnerReg.Outputs)\n        return reg.subscribe(REPORT_RECEIVE, () => {\n            handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n        })\n    }\n\n    async deployModel(model: Uint8Array, onProgress?: (p: number) => void) {\n        onProgress?.(0)\n        const resp = await this.service.sendCmdAwaitResponseAsync(Packet.jdpacked(ModelRunnerCmd.SetModel, \"u32\", [model.length]), 3000)\n        onProgress?.(0.05)\n        const [pipePort] = jdunpack<[number]>(resp.data, \"u16\")\n        if (!pipePort)\n            throw new Error(\"wrong port \" + pipePort)\n        const pipe = new OutPipe(this.service.device, pipePort)\n        const chunkSize = 224 // has to be divisible by 8\n        for (let i = 0; i < model.length; i += chunkSize) {\n            await pipe.send(model.slice(i, i + chunkSize))\n            onProgress?.(0.05 + (i / model.length) * 0.9)\n        }\n        try {\n            await pipe.close()\n        } catch {\n            // the device may restart before we manage to close\n        }\n        onProgress?.(1)\n    }\n\n    async autoInvoke(everySamples = 1) {\n        await this.service.register(ModelRunnerReg.AutoInvokeEvery).sendSetPackedAsync(\"u16\", [everySamples])\n    }\n\n    private async getReg(id: ModelRunnerReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async modelStats(): Promise<TFModelStats> {\n        const info: any = {\n            \"modelSize\": this.getReg(ModelRunnerReg.ModelSize, r => r.intValue),\n            \"arenaSize\": this.getReg(ModelRunnerReg.AllocatedArenaSize, r => r.intValue),\n            \"inputShape\": this.getReg(ModelRunnerReg.InputShape, r => bufferToArray(r.data, NumberFormat.UInt16LE)),\n            \"outputShape\": this.getReg(ModelRunnerReg.OutputShape, r => bufferToArray(r.data, NumberFormat.UInt16LE)),\n            \"lastError\": this.getReg(ModelRunnerReg.LastError, r => U.uint8ArrayToString(r.data)),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\n\nexport interface TFModelStats {\n    \"modelSize\": number;\n    \"arenaSize\": number;\n    \"inputShape\": number[];\n    \"outputShape\": number[];\n    \"lastError\": string;\n}\n\n/*\nexport async function testAGG(bus: JDBus) {\n    const aggService = bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })[0]\n    if (!aggService) {\n        console.log(\"no agg service\")\n        return\n    }\n    const agg = new SensorAggregatorClient(aggService)\n\n    let acc = bus.services({ serviceClass: SRV_ACCELEROMETER })\n    if (acc.length == 0) {\n        console.log(\"no acc service\")\n        return\n    }\n\n    await agg.setInputs({\n        samplesInWindow: 50,\n        samplingInterval: 20,\n        inputs: acc\n    })\n\n    agg.subscribeSample(sample => {\n        console.log(\"SAMPLE\", sample)\n    })\n\n}\n\nexport async function testTF(bus: JDBus, model: Uint8Array) {\n    const tfService = bus.services({ serviceClass: SRV_MODEL_RUNNER })[0]\n    if (!tfService) {\n        console.log(\"no tflite service\")\n        return\n    }\n    const tf = new TFLiteClient(tfService)\n\n    if (model)\n        await tf.deployModel(model, p => console.log(\"deploy\", p.toFixed(3)))\n\n    const st = await tf.modelStats()\n    console.log(st)\n\n    const classNames = ['noise', 'punch', 'left', 'right'];\n    tf.subscribeResults(outp => {\n        for (let i = 0; i < outp.length; ++i) {\n            if (outp[i] > 0.7) {\n                console.log(outp[i].toFixed(3) + \" \" + classNames[i])\n            }\n        }\n         console.log(\"OUT\", outp)\n    })\n\n    await tf.autoInvoke(8)\n\n    console.log(\"autoinvoked\")\n\n}\n*/\n","import { Paper } from \"@material-ui/core\";\nimport React, { useContext } from \"react\"\nimport { serviceName } from \"../../jacdac-ts/src/jdom/pretty\";\nimport { SensorAggregatorConfig, SensorAggregatorInputConfig } from \"../../jacdac-ts/src/jdom/sensoraggregatorclient\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport DeviceName from \"./DeviceName\";\n\nfunction SensorAggregatorInputConfigView(props: { input: SensorAggregatorInputConfig }) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext);\n    const { input } = props;\n    const { serviceClass, deviceId, serviceIndex } = input;\n\n    const device = deviceId && bus.device(deviceId)\n\n    return <>\n        {serviceName(serviceClass)}\n        {device && <DeviceName device={device} serviceIndex={serviceIndex} />}\n        {!device && deviceId && <span>{deviceId}[{serviceIndex}]</span>}\n        {!deviceId && <span>/ any device</span>}\n    </>\n}\n\nexport default function SensorAggregatorConfigView(props: { config: SensorAggregatorConfig }) {\n    const { config } = props;\n\n    if (!config?.inputs)\n        return <></>\n\n    return <Paper>\n        <ul>\n            <li>samples interval (ms): <code>{config.samplingInterval}</code></li>\n            <li>samples window (# samples): <code>{config.samplesInWindow}</code></li>\n            <li>inputs ({config.inputs.length})\n                <ul>\n                    {config.inputs.map((input, i) => <li key={\"input\" + i}><SensorAggregatorInputConfigView input={input} /></li>)}\n                </ul>\n            </li>\n        </ul>\n    </Paper>\n}","import React, { useContext, useState } from \"react\";\nimport Alert from \"./ui/Alert\";\nimport AppContext from \"./AppContext\";\n\nexport type ProgressHandler = (p: number) => void\n\nexport default function useCall() {\n    const { setError: setAppError } = useContext(AppContext)\n    const [error, setError] = useState<Error>();\n    const [running, setRunning] = useState(false)\n    const [progress, setProgress] = useState(0);\n\n    const handleProgress = (p: number) => setProgress(p);\n\n    const call = (handler: (onProgress?: ProgressHandler) => void) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const callAsync = async (handler: (onProgress?: (p: number) => void) => Promise<void>) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            await handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const alert = error && <Alert severity=\"error\">{error}</Alert>\n\n    return {\n        running,\n        error,\n        progress,\n        alert,\n        call,\n        callAsync\n    }\n} ","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"\n}), 'Link');","import { List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport React, { lazy, useContext, useState } from 'react';\nimport { SRV_SENSOR_AGGREGATOR, SRV_MODEL_RUNNER, ModelRunnerReg } from '../../../jacdac-ts/src/jdom/constants';\nimport { JDService } from '../../../jacdac-ts/src/jdom/service';\nimport ServiceList from '../../components/ServiceList';\nimport ConnectAlert from '../../components/alert/ConnectAlert'\nimport { useDbJSON, useDbUint8Array } from '../../components/useDb'\nimport Alert from \"../../components/ui/Alert\";\nimport { Button } from 'gatsby-theme-material-ui';\nimport { ModelRunnerClient } from '../../../jacdac-ts/src/jdom/modelrunner'\nimport RegisterInput from '../../components/RegisterInput';\nimport CircularProgressWithLabel from '../../components/ui/CircularProgressWithLabel'\nimport { SensorAggregatorClient, SensorAggregatorConfig } from '../../../jacdac-ts/src/jdom/sensoraggregatorclient';\nimport SensorAggregatorConfigView from '../../components/SensorAggregatorConfigView';\nimport ServiceManagerContext from '../../components/ServiceManagerContext'\nimport useChange from '../../jacdac/useChange';\nimport { IFile } from '../../../jacdac-ts/src/embed/protocol';\nimport { prettySize } from '../../../jacdac-ts/src/jdom/pretty';\nimport RegisterTrend from '../../components/RegisterTrend';\nimport { useRegisterIntValue, useRegisterStringValue } from '../../jacdac/useRegisterValue';\nimport useCall from '../../components/useCall';\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from '@material-ui/icons';\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n    const modelSize = useRegisterIntValue(service.register(ModelRunnerReg.ModelSize));\n    const lastError = useRegisterStringValue(service.register(ModelRunnerReg.LastError));\n\n    return <>\n        {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n        <Typography>model size: {modelSize === undefined ? \"...\" : prettySize(modelSize)}</Typography>\n        <RegisterInput register={service.register(ModelRunnerReg.AutoInvokeEvery)} />\n        <RegisterTrend showName register={service.register(ModelRunnerReg.Outputs)} mini={true} />\n    </>\n}\n\nexport function ModelActions(props: {\n    service: JDService,\n    model: Uint8Array,\n    sensorAggregatorService?: JDService,\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall();\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () => await callAsync(async (setProgress) => {\n        if (sensorAggregatorService && sensorInput) {\n            const aggregator = new SensorAggregatorClient(sensorAggregatorService)\n            await aggregator.setInputs(sensorInput)\n        }\n        if (service && model) {\n            const runner = new ModelRunnerClient(service)\n            await runner.deployModel(model, setProgress)\n        }\n    })\n\n    return <>\n        {!running && <Button disabled={modelDisabled} variant=\"contained\" color=\"primary\" onClick={handleDeployModel}>\n            {sensorInput ? \"Deploy model and configuration\" : \"Deploy model\"}\n        </Button>}\n        {running && <CircularProgressWithLabel value={progress * 100} />}\n        {alert}\n    </>\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } = useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setModel(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models());\n    const inputConfigurations = useChange(modelStore, _ => _?.inputConfigurations())\n\n    return <>\n        <h1>Model uploader</h1>\n        <p>\n            Upload Machine Learning Models (like TensorFlow Lite) into your <Link to=\"/services/model-runner/\">ML module runners</Link>.\n        </p>\n        <h3>Load a machine learning model</h3>\n        <p>Machine learning models are typically stored in a <code>.tflite</code> file.</p>\n        {model && <Alert severity={'success'}>Model loaded ({prettySize(model.byteLength)})</Alert>}\n        {model && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import model\"} onFilesUploaded={handleTfmodelFiles} /></Suspense>\n        <Button aria-label=\"clear model\" disabled={importing} onClick={handleClearModel}>clear model</Button>\n        {models?.length && <List>\n            {models.map(model => <ListItem key={model.path} button onClick={handleLoadModel(model)}>\n                <ListItemText primary={model.name} secondary={`${model.path} ${prettySize(model.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Configure sensors</h3>\n        <p>Sensor configuration files are stored in a <code>.jd.json</code> file.</p>\n        {sensorConfig && <Alert severity={'success'}>Sensor configuration loaded</Alert>}\n        {sensorConfig && <SensorAggregatorConfigView config={sensorConfig} />}\n        {sensorConfig && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import configuration\"} onFilesUploaded={handleSensorConfigFiles} /></Suspense>\n        <Button aria-label=\"clear configuration\" disabled={importing} onClick={handleClearConfiguration}>clear configuration</Button>\n        {inputConfigurations?.length && <List>\n            {inputConfigurations.map(iconfig => <ListItem key={iconfig.path} button onClick={handleLoadInputConfiguration(iconfig)}>\n                <ListItemText primary={iconfig.name} secondary={`${iconfig.path} ${prettySize(iconfig.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Deploy model to machine learning services</h3>\n        <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n        <ServiceList\n            serviceClass={SRV_MODEL_RUNNER}\n            content={service => <ModelContent service={service} />}\n            actions={service => <ModelActions\n                service={service}\n                model={model}\n                sensorAggregatorService={service?.device.services({ serviceClass: SRV_SENSOR_AGGREGATOR })?.[0]}\n                sensorInput={sensorConfig}\n            />}\n        />\n    </>\n}"],"sourceRoot":""}