{"version":3,"sources":["webpack://jacdac-docs/./src/components/widgets/JoystickWidget.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardJoystick.tsx"],"names":["decay","value","rate","precision","nv","Math","abs","JoystickWidget","props","color","x","y","buttons","onUpdate","hostValues","useWidgetTheme","active","background","controlBackground","dragSurfaceRef","useRef","useState","grabbing","setGrabbing","w","w2","cx","cy","rp","rc","rj","pw","ph","jx","jy","jw","updateJoystickDrag","bounds","current","getBoundingClientRect","dx","left","width","dy","top","height","angle","atan2","distance","min","sqrt","pow","newx","cos","newy","sin","handlePointerDown","ev","preventDefault","clientX","clientY","handlePointerUp","handlePointerMove","useAnimationFrame","ax","ay","nx","ny","handleStyle","cursor","Thumb","service","register","JoystickReg","useRegisterUnpackedValue","server","useServiceServer","values","reading","setValues","refresh","buttonLabels","JoystickButtons","ArcadeButton","ro","pressure","ri","button","onRefresh","textProps","checked","title","label","handleDown","down","handleUp","up","buttonProps","useSvgButtonProps","Gamepad","buttonsAvailable","directionRegister","h","cw","ch","sro","sri","scy","pos","useMemo","id","small","filter","p","handleRefresh","abx","aby","abr","abw","map","DashboardJoystick","variant","undefined","JOYSTICK_GAMEPAD_EXTRA_BUTTONS","JoystickVariant"],"mappings":"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","file":"7675-32b4d04af4da4a047f83.js","sourcesContent":["import React, { useRef, useState, CSSProperties } from \"react\"\nimport { JoystickButtons } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport useAnimationFrame from \"../hooks/useAnimationFrame\"\nimport SvgWidget from \"./SvgWidget\"\nimport useWidgetTheme from \"./useWidgetTheme\"\n\nfunction decay(value: number, rate: number, precision: number) {\n    let nv = value * rate\n    if (Math.abs(nv) < precision) nv = 0\n    return nv\n}\n\nexport default function JoystickWidget(props: {\n    x: number\n    y: number\n    buttons: JoystickButtons\n    color: \"secondary\" | \"primary\"\n    onUpdate?: (newbuttons: JoystickButtons, newx: number, newy: number) => void\n    hostValues?: () => [JoystickButtons, number, number]\n}) {\n    const { color, x, y, buttons, onUpdate, hostValues } = props\n    const { active, background, controlBackground } = useWidgetTheme(color)\n    const dragSurfaceRef = useRef<SVGCircleElement>()\n    const [grabbing, setGrabbing] = useState(false)\n\n    const w = 40\n    const w2 = w >> 1\n    const cx = w2\n    const cy = w2\n    const rp = 2\n    const rc = 6\n    const rj = 10\n    const pw = 12\n    const ph = 8\n\n    const jx = cx + (x || 0) * rj\n    const jy = cy + (y || 0) * rj\n    const jw = 1\n\n    const updateJoystickDrag = (x: number, y: number) => {\n        const bounds = dragSurfaceRef.current.getBoundingClientRect()\n\n        const dx = (x - bounds.left) * (w / bounds.width) - w2\n        const dy = (y - bounds.top) * (w / bounds.height) - w2\n\n        const angle = Math.atan2(dy, dx)\n        const distance =\n            Math.min(Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)), rj) / rj\n\n        const newx = distance * Math.cos(angle)\n        const newy = distance * Math.sin(angle)\n        const [buttons] = hostValues()\n\n        onUpdate(buttons, newx, newy)\n    }\n\n    const handlePointerDown = async (\n        ev: React.PointerEvent<SVGCircleElement>\n    ) => {\n        ev.preventDefault()\n        setGrabbing(true)\n        updateJoystickDrag(ev.clientX, ev.clientY)\n    }\n    const handlePointerUp = (ev: React.PointerEvent<SVGCircleElement>) => {\n        ev.preventDefault()\n        setGrabbing(false)\n    }\n    const handlePointerMove = async (\n        ev: React.PointerEvent<SVGCircleElement>\n    ) => {\n        ev.preventDefault()\n        if (grabbing) updateJoystickDrag(ev.clientX, ev.clientY)\n    }\n\n    useAnimationFrame(() => {\n        if (!hostValues || grabbing) return false // let use do its thing\n        const [buttons, ax, ay] = hostValues()\n        const nx = decay(ax, 0.9, 16)\n        const ny = decay(ay, 0.9, 16)\n\n        // async\n        onUpdate(buttons, nx, ny)\n\n        return nx !== 0 || ny !== 0\n    }, [hostValues, grabbing])\n\n    const handleStyle: CSSProperties = {\n        cursor: grabbing ? \"grabbing\" : \"grab\",\n    }\n\n    return (\n        <SvgWidget width={w} height={w}>\n            <circle\n                ref={dragSurfaceRef}\n                className=\"joystick-background\"\n                cx={cx}\n                cy={cy}\n                r=\"16\"\n                fill={background}\n            ></circle>\n            <rect\n                className=\"dpad-up\"\n                x={\"16\"}\n                y=\"6\"\n                width={ph}\n                height={pw}\n                rx={rp}\n                fill={controlBackground}\n            ></rect>\n            <rect\n                className=\"dpad-down\"\n                x=\"16\"\n                y=\"22\"\n                width={ph}\n                height={pw}\n                rx={rp}\n                fill={controlBackground}\n            ></rect>\n            <rect\n                className=\"dpad-right\"\n                x=\"22\"\n                y=\"16\"\n                width={pw}\n                height={ph}\n                ry={rp}\n                fill={controlBackground}\n            ></rect>\n            <rect\n                className=\"dpad-left\"\n                x=\"6\"\n                y=\"16\"\n                width={pw}\n                height={ph}\n                ry={rp}\n                fill={controlBackground}\n            ></rect>\n            <circle\n                className=\"dpad-center\"\n                cx={cx}\n                cy={cy}\n                r={rc}\n                fill={controlBackground}\n            ></circle>\n            {hostValues ? (\n                <circle\n                    className=\"joystick-handle\"\n                    cx={jx}\n                    cy={jy}\n                    r={rc}\n                    fill={background}\n                    stroke={active}\n                    strokeWidth={jw}\n                    tabIndex={0}\n                    role=\"button\"\n                    aria-label=\"joystick handle\"\n                    arial-live=\"polite\"\n                    onPointerMove={handlePointerMove}\n                    onPointerDown={handlePointerDown}\n                    onPointerUp={handlePointerUp}\n                    onPointerLeave={handlePointerUp}\n                    style={handleStyle}\n                />\n            ) : (\n                <circle\n                    className=\"joystick-handle\"\n                    cx={jx}\n                    cy={jy}\n                    r={rc}\n                    fill={background}\n                    stroke={active}\n                    strokeWidth={jw}\n                    aria-label=\"joystick handle\"\n                />\n            )}\n        </SvgWidget>\n    )\n}\n","import React, { useMemo } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport JoystickServer, {\n    JOYSTICK_GAMEPAD_EXTRA_BUTTONS,\n} from \"../../../jacdac-ts/src/servers/joystickserver\"\nimport JoystickWidget from \"../widgets/JoystickWidget\"\nimport {\n    JoystickButtons,\n    JoystickReg,\n    JoystickVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nfunction Thumb(props: DashboardServiceProps) {\n    const { service } = props\n    const register = service.register(JoystickReg.Direction)\n    const [buttons, x, y] = useRegisterUnpackedValue<\n        [JoystickButtons, number, number]\n    >(register, props)\n    const server = useServiceServer<JoystickServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n\n    const values = () => server.reading.values()\n    const onUpdate = (buttons: JoystickButtons, newx: number, newy: number) => {\n        server.reading.setValues([buttons, newx, newy])\n        register.refresh()\n    }\n\n    return (\n        <JoystickWidget\n            x={x}\n            y={y}\n            buttons={buttons}\n            color={color}\n            onUpdate={onUpdate}\n            hostValues={server && values}\n        />\n    )\n}\n\nconst buttonLabels = {\n    [JoystickButtons.Left]: \"\\u25C4\",\n    [JoystickButtons.Up]: \"\\u25B2\",\n    [JoystickButtons.Down]: \"\\u25BC\",\n    [JoystickButtons.Right]: \"\\u25BA\",\n}\n\nfunction ArcadeButton(props: {\n    cx: number\n    cy: number\n    ro: number\n    ri: number\n    pressure: number\n    button: JoystickButtons\n    server: JoystickServer\n    onRefresh: () => void\n    color?: \"primary\" | \"secondary\"\n}) {\n    const { cx, cy, ro, color, pressure, ri, button, server, onRefresh } = props\n    const { textProps, active, background, controlBackground } = useWidgetTheme(\n        color\n    )\n    const checked = (pressure || 0) > 0\n    const title = JoystickButtons[button]\n    const label = buttonLabels[button] || title[0]\n\n    const handleDown = () => {\n        server?.down(button) //, 0.7)\n        onRefresh()\n    }\n    const handleUp = () => {\n        server?.up(button)\n        onRefresh()\n    }\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(\n        title,\n        handleDown,\n        handleUp\n    )\n\n    return (\n        <g\n            transform={`translate(${cx},${cy})`}\n            aria-label={`button ${title} ${checked ? \"down\" : \"up\"}`}\n        >\n            <circle cx={0} cy={0} r={ro} fill={background} />\n            <circle\n                cx={0}\n                cy={0}\n                r={ri}\n                fill={checked ? active : controlBackground}\n                {...buttonProps}\n            >\n                <title>{title}</title>\n            </circle>\n            <text cx={0} cy={0} fontSize={ri} {...textProps}>\n                {label}\n            </text>\n        </g>\n    )\n}\n\nfunction Gamepad(props: DashboardServiceProps) {\n    const { service } = props\n    const [buttonsAvailable] = useRegisterUnpackedValue<[JoystickButtons]>(\n        service.register(JoystickReg.ButtonsAvailable),\n        props\n    )\n    const directionRegister = service.register(JoystickReg.Direction)\n    const [buttons, x, y] = useRegisterUnpackedValue<\n        [JoystickButtons, number, number]\n    >(directionRegister, props)\n    const server = useServiceServer<JoystickServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background } = useWidgetTheme(color)\n\n    // buttonsAvailable should be defined by now\n\n    const w = 256\n    const h = 128\n\n    const cw = w / 12\n    const ch = h / 4\n\n    const ro = cw - 2\n    const ri = ro - 4\n\n    const sro = ro - 10\n    const sri = sro - 2\n    const scy = sro\n\n    const pos = useMemo(\n        () =>\n            [\n                {\n                    id: JoystickButtons.Left,\n                    cx: cw * 1.5,\n                    cy: 2 * ch,\n                    small: false,\n                },\n                { id: JoystickButtons.Up, cx: cw * 3, cy: ch, small: false },\n                {\n                    id: JoystickButtons.Right,\n                    cx: cw * 4.5,\n                    cy: 2 * ch,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.Down,\n                    cx: cw * 3,\n                    cy: 3 * ch,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.A,\n                    cx: cw * 10.5,\n                    cy: ch * 1.25,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.B,\n                    cx: cw * 9.5,\n                    cy: ch * 2.75,\n                    small: false,\n                },\n                { id: JoystickButtons.Menu, cx: cw * 7, cy: scy, small: true },\n                {\n                    id: JoystickButtons.Select,\n                    cx: cw * 6,\n                    cy: scy,\n                    small: true,\n                },\n\n                { id: JoystickButtons.Exit, cx: cw * 8, cy: scy, small: true },\n                { id: JoystickButtons.Reset, cx: cw * 9, cy: scy, small: true },\n            ].filter(p => !!(p.id & buttonsAvailable)),\n        [buttonsAvailable]\n    )\n\n    const handleRefresh = async () => await directionRegister.refresh()\n\n    const abx = cw * 8 + 1\n    const aby = ch * 3 + 4\n    const abr = cw / 2\n    const abw = cw * 5 - 6\n    return (\n        <SvgWidget width={w} height={h}>\n            <circle\n                cx={cw * 3}\n                cy={2 * ch}\n                r={2.6 * cw}\n                fill=\"none\"\n                stroke={background}\n                strokeWidth={4}\n            />\n            <rect\n                transform={`rotate(-66, ${abx}, ${aby})`}\n                x={abx}\n                y={aby}\n                rx={abr}\n                ry={abr}\n                width={abw}\n                height={cw * 2.2}\n                fill=\"none\"\n                stroke={background}\n                strokeWidth={4}\n            />\n            {pos.map(({ id, cx, cy, small }) => (\n                <ArcadeButton\n                    key={id}\n                    cx={cx}\n                    cy={cy}\n                    ro={small ? sro : ro}\n                    ri={small ? sri : ri}\n                    button={id}\n                    server={server}\n                    onRefresh={handleRefresh}\n                    pressure={buttons & id ? 1 : 0}\n                    color={color}\n                />\n            ))}\n        </SvgWidget>\n    )\n}\n\nexport default function DashboardJoystick(props: DashboardServiceProps) {\n    const { service } = props\n    let [variant] = useRegisterUnpackedValue<[JoystickVariant]>(\n        service.register(JoystickReg.Variant),\n        props\n    )\n    const [buttonsAvailable] = useRegisterUnpackedValue<[JoystickButtons]>(\n        service.register(JoystickReg.ButtonsAvailable),\n        props\n    )\n\n    // need button info\n    if (buttonsAvailable === undefined) return <LoadingProgress />\n\n    // if variant is not specific, infer from buttons\n    if (variant === undefined) {\n        if (buttonsAvailable & JOYSTICK_GAMEPAD_EXTRA_BUTTONS)\n            variant = JoystickVariant.Gamepad\n        else if (!buttonsAvailable || buttonsAvailable === JoystickButtons.A)\n            variant = JoystickVariant.Thumb\n    }\n\n    // render in 2 modes\n    return variant == JoystickVariant.Thumb ? (\n        <Thumb {...props} />\n    ) : (\n        <Gamepad {...props} />\n    )\n}\n"],"sourceRoot":""}