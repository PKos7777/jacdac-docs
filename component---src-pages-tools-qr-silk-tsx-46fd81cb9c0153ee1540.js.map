{"version":3,"file":"component---src-pages-tools-qr-silk-tsx-46fd81cb9c0153ee1540.js","mappings":"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","sources":["webpack://jacdac-docs/./src/pages/tools/qr-silk.tsx"],"sourcesContent":["import {\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Switch,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, lazy, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport { toMap } from \"../../../jacdac-ts/src/jdom/utils\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nimport { graphql } from \"gatsby\"\nimport { Button } from \"gatsby-theme-material-ui\"\n\nexport const query = graphql`\n    {\n        allQrUrlDeviceMapCsv {\n            nodes {\n                vanityname\n                revision\n                modulename\n                designid\n            }\n        }\n    }\n`\n\nexport default function DeviceQRCodeGenerator(props: {\n    data: {\n        allQrUrlDeviceMapCsv: {\n            nodes: {\n                vanityname: string\n                modulename: string\n                designid: string\n                revision: string\n            }[]\n        }\n    }\n}) {\n    const { data } = props\n    const { nodes } = data.allQrUrlDeviceMapCsv\n    const knowns = toMap(\n        nodes,\n        n => n.vanityname.toUpperCase(),\n        n => n\n    )\n    const [vanity, setVanity] = useState(`AAAAAB`)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const vanity = ev.target.value?.toUpperCase()\n        setVanity(vanity)\n    }\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const s = Number(ev.target.value)\n        if (!isNaN(s)) setSize(s)\n    }\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) => {\n        setMirror(!!ev.target.checked)\n    }\n    const mirrorid = useId()\n    const switchid = useId()\n    const url = !!vanity && `HTTP://AKA.MS/${vanity}`\n    const known = knowns[vanity]\n    const { modulename, designid, revision } = known || {}\n    const handleVanity = (vanityname: string) => () =>\n        setVanity(vanityname.toUpperCase())\n    const handleNextVanity = () => {\n        const next = Object.values(nodes).find(({ designid }) => !designid)\n        if (next) setVanity(next.vanityname.toUpperCase())\n    }\n    return (\n        <>\n            <h1>Silk QR Code generator</h1>\n            <p>\n                Enter a short URL HTTP://AKA.MS/<strong>vanity name</strong> to\n                be encoded as a silk compatible QR code. If you use a link, make\n                sure to update{\" \"}\n                <a href=\"https://github.com/microsoft/jacdac/blob/main/devices/microsoft/research/qr-url-device-map.csv\">\n                    GitHub\n                </a>\n                .\n            </p>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"vanity name\"\n                        value={vanity}\n                        placeholder=\"AAAAA\"\n                        onChange={handleUrlChange}\n                        helperText={\"HTTP://AKA.MS/...\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (cm)\"\n                        type=\"number\"\n                        value={size}\n                        onChange={handleSizeChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <Switch checked={mirror} onChange={handleMirror} />\n                    <label id={mirrorid} htmlFor={switchid}>\n                        mirror\n                    </label>\n                </Grid>\n                <Grid item xs>\n                    <Button variant=\"contained\" onClick={handleNextVanity}>\n                        Pick Unassigned\n                    </Button>\n                </Grid>\n            </Grid>\n            <h2>URL</h2>\n            <pre>\n                <a href={url}>{url}</a>\n            </pre>\n            {known && (\n                <>\n                    <h2>Reserved device entry</h2>\n                    <p>\n                        {designid\n                            ? `${designid}: ${modulename} v${revision}`\n                            : `unassigned`}\n                    </p>\n                </>\n            )}\n            <h2>QR codes</h2>\n            <Suspense>\n                <SilkQRCode url={url} mirror={mirror} size={size} />\n            </Suspense>\n            <h2>Preview</h2>\n            <p>\n                If you see bing.com for aka.ms links, it&quot;s likely to be\n                free.\n            </p>\n            <iframe\n                title=\"Link preview\"\n                style={{ width: \"100%\", height: \"14rem\", border: \"none\" }}\n                src={url?.replace(/^http:/i, \"HTTPS:\")}\n                sandbox=\"allow-scripts\"\n            />\n            <h2>Known devices</h2>\n            <List>\n                {nodes\n                    .filter(({ designid }) => !!designid)\n                    .map(({ vanityname, modulename, designid, revision }) => (\n                        <ListItem\n                            button\n                            key={vanityname}\n                            onClick={handleVanity(vanityname)}\n                        >\n                            <ListItemText\n                                primary={`${designid}: ${modulename} v${revision}`}\n                                secondary={`aka.ms/${vanityname}`}\n                            />\n                        </ListItem>\n                    ))}\n            </List>\n        </>\n    )\n}\n"],"names":["Grid","List","ListItem","ListItemText","Switch","TextField","React","lazy","useState","useId","Suspense","toMap","SilkQRCode","Button","query","DeviceQRCodeGenerator","props","data","nodes","allQrUrlDeviceMapCsv","knowns","n","vanityname","toUpperCase","vanity","setVanity","mirror","setMirror","size","setSize","handleUrlChange","ev","target","value","handleSizeChange","s","Number","isNaN","handleMirror","checked","mirrorid","switchid","url","known","modulename","designid","revision","handleVanity","handleNextVanity","next","Object","values","find","width","height","border","replace","filter","map"],"sourceRoot":""}