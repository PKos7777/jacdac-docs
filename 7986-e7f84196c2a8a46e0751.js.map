{"version":3,"sources":["webpack://jacdac-docs/../src/components/lazy-hydrate.tsx"],"names":["lazyHydrate","root","hydrated","forceHydrate","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","current","render","hydrate"],"mappings":";;;;;;;;;;;;;;;;QAgBgBA,E,CAAAA,C,CAedC,C,CACAC,C,CACAC,C,CAAAA,IAfEC,UAeFD,CAdEE,WAcFF,CAbEG,aAaFH,CAZEI,YAYFJ,CAXEK,kBAWFL,CAVEM,OAUFN,CATEO,gBASFP,CATEO,IACAC,QAQFR,CAREQ,aAAW,EAAXA,CAAW,CAQbR,CAPES,kBAOFT,CANEU,mBAMFV,CANEU,IACAC,SAKFX,CALEW,sBAKFX,CAJKY,6MAILZ,CAGEa,EAMEZ,EANFY,KAHFb,CAIEc,EAKEb,EALFa,MAJFd,CAKEe,EAIEd,EAJFc,MALFf,CAMEgB,EAGEf,EAHFe,MANFhB,CAOEiB,EAEEhB,EAFFgB,WAPFjB,CAQmBkB,EACfjB,EADFS,eARFV,CAWMmB,EAAWC,KAAKC,SAALD,CAAeJ,CAAfI,CAXjBpB,CAaAQ,iEACEG,WADFH,CAEEC,gBAFFD,CAGEE,iBAHFF,EAIKA,CAJLA,EAOA,GAAMc,gBACJC,iDAACC,yDAADD,CAACC,CAAcT,OAAQA,CAAtBS,CAA8BX,MAAOA,CAArCW,CAA4CV,OAAQA,CAApDU,CAADD,cACEA,iDAACE,yDAADF,CAACE,iBACKC,8DACFT,CADES,CAEFtB,CAFEsB,CAGFX,CAHEW,CAIFb,CAJEa,CAKFZ,CALEY,CAMFR,CANEQ,CADLD,CAADF,CADFA,cAYEA,iDAACI,yDAADJ,CAACI,iBACMf,CADNe,CACMf,CACLC,MAAOA,CADFD,CAELE,OAAQA,CAFHF,CAGLgB,UAAWrB,CAHNK,CADNe,CAKKE,8DACF1B,CADE0B,CAEFzB,CAFEyB,CAGFb,CAHEa,CAIF3B,CAJE2B,CAKFxB,CALEwB,CAMFV,CANEU,CAOFvB,CAPEuB,CAQFrB,CAREqB,CALLF,CAADJ,CAZFA,CADF,CAqCA,OAJiBxB,EAAS+B,OAAT/B,EAAoBC,EAAa8B,OAAjC/B,CAA2CgC,6CAA3ChC,CAAoDiC,8CAIrE,EAHSV,CAGT,CAHoBxB,EAAKgC,OAGzB,EAFA/B,EAAS+B,OAAT/B,CAAS+B,CAAU,CAEnB,CAFmB,WAGbhC,EAAKgC,OAALhC,EACFiC,kDAAQ,IAARA,CAA0CjC,EAAKgC,OAA/CC,CADEjC,CAC6CgC,CAFnD,CAEmDA,C","file":"7986-e7f84196c2a8a46e0751.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n  const doRender = hydrated.current || forceHydrate.current ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}