{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"names":["DashboardLED","props","service","useContext","AppContext","setError","server","useServiceServer","color","useState","speed","setSpeed","waveLengthRegister","useRegister","LedReg","useRegisterUnpackedValue","waveLength","busColorRegister","busColor","serverColor","useChange","_","values","ledCountRegister","ledCount","r","g","b","rgb","undefined","handleSetColor","col","sendCmdAsync","LedCmd","jdpack","delay","sendGetAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASA,YAAT,CAAsBC,KAAtB,EAAoD;AAAA,MACvDC,OADuD,GAC3CD,KAD2C,CACvDC,OADuD;;AAAA,oBAE1CC,iDAAU,CAACC,0DAAD,CAFgC;AAAA,MAEvDC,QAFuD,eAEvDA,QAFuD;;AAG/D,MAAMC,MAAM,GAAGC,yEAAgB,CAAYL,OAAZ,CAA/B;AACA,MAAMM,KAAK,GAAGF,MAAM,GAAG,WAAH,GAAiB,SAArC;;AAJ+D,kBAKrCG,+CAAQ,CAAC,EAAD,CAL6B;AAAA,MAKxDC,KALwD;AAAA,MAKjDC,QALiD;;AAO/D,MAAMC,kBAAkB,GAAGC,qEAAW,CAACX,OAAD,EAAUY,kGAAV,CAAtC;;AAP+D,8BAQ1CC,4FAAwB,CACzCH,kBADyC,EAEzCX,KAFyC,CARkB;AAAA,MAQxDe,UARwD;;AAY/D,MAAMC,gBAAgB,GAAGJ,qEAAW,CAACX,OAAD,EAAUY,wFAAV,CAApC;AACA,MAAMI,QAAQ,GAAGH,4FAAwB,CACrCE,gBADqC,EAErChB,KAFqC,CAAzC;AAIA,MAAMkB,WAAW,GAAGC,mEAAS,CAACd,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,KAAT,EAAgB,UAAAa,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,MAAH,EAAJ;AAAA,GAAjB,CAA7B;AAEA,MAAMC,gBAAgB,GAAGV,qEAAW,CAACX,OAAD,EAAUY,8FAAV,CAApC;;AAnB+D,+BAoB5CC,4FAAwB,CACvCQ,gBADuC,EAEvCtB,KAFuC,CApBoB;AAAA,MAoBxDuB,QApBwD;;AAAA,aAyB7CL,WAAW,IAAID,QAzB8B;AAAA,MAyBxDO,CAzBwD;AAAA,MAyBrDC,CAzBqD;AAAA,MAyBlDC,CAzBkD;;AA0B/D,MAAMC,GAAG,GAAIH,CAAC,IAAI,EAAN,GAAaC,CAAC,IAAI,CAAlB,GAAuBC,CAAnC,CA1B+D,CA4B/D;;AACA,MAAIF,CAAC,KAAKI,SAAV,EAAqB,oBAAO,iDAAC,iEAAD,OAAP,CA7B0C,CA+B/D;;AACA,MAAMC,cAAc;AAAA,oMAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAET7B,OAAO,CAAC8B,YAAR,CACFC,4FADE,EAEFC,0EAAM,CAAmC,aAAnC,EAAkD,CACnDH,GAAG,IAAI,EAAR,GAAc,IADsC,EAEnDA,GAAG,IAAI,CAAR,GAAa,IAFuC,EAGpDA,GAAG,GAAG,IAH8C,EAIpDrB,KAJoD,CAAlD,CAFJ,CAFS;;AAAA;AAAA;AAAA,qBAWTyB,0EAAK,CAAC,GAAD,CAXI;;AAAA;AAAA;AAAA,qBAYTlB,gBAAgB,CAACmB,YAAjB,EAZS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcf/B,sBAAQ,aAAR;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdyB,cAAc;AAAA;AAAA;AAAA,KAApB;;AAkBA,sBACI,iDAAC,wDAAD;AACI,SAAK,EAAEtB,KADX;AAEI,YAAQ,EAAEoB,GAFd;AAGI,cAAU,EAAEZ,UAHhB;AAII,YAAQ,EAAEQ,QAJd;AAKI,oBAAgB,EAAEM,cALtB;AAMI,SAAK,EAAEpB,KANX;AAOI,iBAAa,EAAEC;AAPnB,IADJ;AAWH,C","file":"8282-72c187d81e003b39894f.js","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport LEDServer from \"../../../jacdac-ts/src/servers/ledserver\"\nimport { LedCmd, LedReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport AppContext from \"../AppContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport LEDWidget from \"../widgets/LEDWidget\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service } = props\n    const { setError } = useContext(AppContext)\n    const server = useServiceServer<LEDServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const [speed, setSpeed] = useState(32)\n\n    const waveLengthRegister = useRegister(service, LedReg.WaveLength)\n    const [waveLength] = useRegisterUnpackedValue<[number]>(\n        waveLengthRegister,\n        props\n    )\n    const busColorRegister = useRegister(service, LedReg.Color)\n    const busColor = useRegisterUnpackedValue<[number, number, number]>(\n        busColorRegister,\n        props\n    )\n    const serverColor = useChange(server?.color, _ => _?.values())\n\n    const ledCountRegister = useRegister(service, LedReg.LedCount)\n    const [ledCount] = useRegisterUnpackedValue<[number]>(\n        ledCountRegister,\n        props\n    )\n\n    const [r, g, b] = serverColor || busColor\n    const rgb = (r << 16) | (g << 8) | b\n\n    // nothing to see\n    if (r === undefined) return <LoadingProgress />\n\n    // send animate command\n    const handleSetColor = async (col: number) => {\n        try {\n            await service.sendCmdAsync(\n                LedCmd.Animate,\n                jdpack<[number, number, number, number]>(\"u8 u8 u8 u8\", [\n                    (col >> 16) & 0xff,\n                    (col >> 8) & 0xff,\n                    col & 0xff,\n                    speed,\n                ])\n            )\n            await delay(500)\n            await busColorRegister.sendGetAsync()\n        } catch (e) {\n            setError(e)\n        }\n    }\n\n    return (\n        <LEDWidget\n            color={color}\n            ledColor={rgb}\n            waveLength={waveLength}\n            ledCount={ledCount}\n            onLedColorChange={handleSetColor}\n            speed={speed}\n            onSpeedChange={setSpeed}\n        />\n    )\n}\n"],"sourceRoot":""}