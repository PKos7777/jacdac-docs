{"version":3,"file":"1931-edcfcb404caf20ecbe00.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","webpack://jacdac-docs/./src/jacdac/useServiceClient.ts","webpack://jacdac-docs/./jacdac-ts/src/clients/azureiothubhealthclient.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardAzureIoTHubHealth.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import { useEffect, useState } from \"react\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<\n    TServiceClient extends JDServiceClient\n>(service: JDService, factory: (service: JDService) => TServiceClient) {\n    const [client, setClient] = useState<TServiceClient>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, factory])\n\n    return client\n}\n","import {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n    CHANGE,\n    EVENT,\n    REPORT_UPDATE,\n    SRV_AZURE_IOT_HUB_HEALTH,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegister from \"../jdom/register\"\nimport JDService from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { assert } from \"../jdom/utils\"\n\nexport class AzureIoTHubHealthClient extends JDServiceClient {\n    private readonly hubNameRegister: JDRegister\n    private readonly hubDeviceIdRegister: JDRegister\n    private readonly connectionStatusRegister: JDRegister\n\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_AZURE_IOT_HUB_HEALTH)\n\n        // tell the bus to refresh these register\n        this.hubNameRegister = this.service.register(\n            AzureIotHubHealthReg.HubName\n        )\n        this.hubDeviceIdRegister = this.service.register(\n            AzureIotHubHealthReg.HubDeviceId\n        )\n        this.connectionStatusRegister = this.service.register(\n            AzureIotHubHealthReg.ConnectionStatus\n        )\n        this.mount(() =>\n            this.hubNameRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE)\n            )\n        )\n        this.mount(() =>\n            this.connectionStatusRegister.subscribe(REPORT_UPDATE, () => {\n                console.debug(`azure iot hub: connection status changed`)\n                this.emit(CHANGE)\n            })\n        )\n        this.mount(() =>\n            this.service\n                .event(AzureIotHubHealthEvent.ConnectionStatusChange)\n                .on(EVENT, () => {\n                    console.debug(`azure iot hub: connection status event`)\n                    this.connectionStatusRegister.refresh()\n                })\n        )\n    }\n\n    get hubName() {\n        return this.hubNameRegister.stringValue\n    }\n\n    get hubDeviceId() {\n        return this.hubDeviceIdRegister.stringValue\n    }\n\n    get connectionStatus(): AzureIotHubHealthConnectionStatus {\n        const reg = this.connectionStatusRegister\n        const status = reg\n            .unpackedValue?.[0] as AzureIotHubHealthConnectionStatus\n        if (status === undefined) reg.refresh()\n        return status\n    }\n\n    /**\n     * Sends a connect command to the hub\n     */\n    async connect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Connect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a disconnect command to the hub\n     */\n    async disconnect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Disconnect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a new connection string to the iot debice\n     * @param connectionString\n     */\n    async setConnectionString(connectionString: string) {\n        const data = jdpack<[string]>(\"s\", [connectionString || \"\"])\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.SetConnectionString,\n            data,\n            true\n        )\n    }\n}\nexport default AzureIoTHubHealthClient\n","import React, { ChangeEvent, useCallback, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Grid,\n    Switch,\n    TextField,\n    Typography,\n} from \"@material-ui/core\"\nimport useServiceClient from \"../../jacdac/useServiceClient\"\nimport AzureIoTHubHealthClient from \"../../../jacdac-ts/src/clients/azureiothubhealthclient\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport {\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react-use-id-hook\"\nimport SettingsIcon from \"@material-ui/icons/Settings\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Button } from \"gatsby-material-ui-components\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\n\nfunction ConnectionStringDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    client: AzureIoTHubHealthClient\n}) {\n    const { client, open, setOpen } = props\n    const [value, setValue] = useState(\"\")\n    const connectionStringId = useId()\n    const handleCancel = () => {\n        setValue(\"\")\n        setOpen(false)\n    }\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n    const handleOk = async () => {\n        await client.setConnectionString(value || \"\")\n        setValue(\"\")\n        setOpen(false)\n    }\n    return (\n        <Dialog open={open} fullWidth={true} maxWidth={\"lg\"}>\n            <DialogContent>\n                <DialogContentText>\n                    Enter device connection string\n                    <Typography component=\"p\" variant=\"caption\">\n                        Open your IoT Hub in the Azure portal, select IoT\n                        Devices, select or create a device, copy the primary or\n                        secondary connection string.\n                    </Typography>\n                </DialogContentText>\n                <TextField\n                    id={connectionStringId}\n                    value={value}\n                    label=\"Value\"\n                    fullWidth={true}\n                    onChange={handleValueChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n                <CmdButton\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!client}\n                    onClick={handleOk}\n                >\n                    Save\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function DashboardAzureIoTHubHealth(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n    const connectId = useId()\n\n    const hubNameRegister = service.register(AzureIotHubHealthReg.HubName)\n    const [hubName] = useRegisterUnpackedValue<[string]>(hubNameRegister, props)\n    const hubDeviceIdRegister = service.register(\n        AzureIotHubHealthReg.HubDeviceId\n    )\n    const [hubDeviceId] = useRegisterUnpackedValue<[string]>(\n        hubDeviceIdRegister,\n        props\n    )\n    const connectionStatusRegister = service.register(\n        AzureIotHubHealthReg.ConnectionStatus\n    )\n    const [connectionStatus] = useRegisterUnpackedValue<\n        [AzureIotHubHealthConnectionStatus]\n    >(connectionStatusRegister, props)\n    const factory = useCallback(srv => new AzureIoTHubHealthClient(srv), [])\n    const client = useServiceClient(service, factory)\n    const color = \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const connected =\n        connectionStatus === AzureIotHubHealthConnectionStatus.Connected\n    const handleSetConnectionString = () => setOpen(true)\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                style={{ color: textPrimary, minWidth: \"16rem\" }}\n            >\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        Azure IoT Hub:&nbsp;\n                    </Typography>\n                    <Typography component=\"span\" variant=\"subtitle1\">\n                        {hubName}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        Device id:&nbsp;\n                    </Typography>\n                    <Typography component=\"span\" variant=\"subtitle1\">\n                        {hubDeviceId}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Switch checked={connected} aria-labelledby={connectId} />\n                    <label className=\".no-pointer-events\" id={connectId}>\n                        {AzureIotHubHealthConnectionStatus[connectionStatus] ||\n                            \"Waiting...\"}\n                    </label>\n                    <IconButtonWithTooltip\n                        title=\"Set connection string\"\n                        onClick={handleSetConnectionString}\n                    >\n                        <SettingsIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n            <ConnectionStringDialog\n                client={client}\n                open={open}\n                setOpen={setOpen}\n            />\n        </>\n    )\n}\n"],"names":["useEffect","useState","useServiceClient","service","factory","client","setClient","undefined","c","unmount","AzureIotHubHealthCmd","AzureIotHubHealthEvent","AzureIotHubHealthReg","CHANGE","EVENT","REPORT_UPDATE","SRV_AZURE_IOT_HUB_HEALTH","jdpack","JDServiceClient","assert","AzureIoTHubHealthClient","serviceClass","hubNameRegister","register","HubName","hubDeviceIdRegister","HubDeviceId","connectionStatusRegister","ConnectionStatus","mount","subscribe","emit","console","debug","event","ConnectionStatusChange","on","refresh","connect","sendCmdAsync","Connect","disconnect","Disconnect","setConnectionString","connectionString","data","SetConnectionString","stringValue","reg","status","unpackedValue","React","useCallback","Dialog","DialogActions","DialogContent","DialogContentText","Grid","Switch","TextField","Typography","useWidgetTheme","AzureIotHubHealthConnectionStatus","useId","SettingsIcon","IconButtonWithTooltip","Button","CmdButton","useRegisterUnpackedValue","ConnectionStringDialog","props","open","setOpen","value","setValue","connectionStringId","handleCancel","handleValueChange","target","handleOk","DashboardAzureIoTHubHealth","connectId","hubName","hubDeviceId","connectionStatus","srv","color","textPrimary","connected","Connected","handleSetConnectionString","minWidth"],"sourceRoot":""}