{"version":3,"sources":["webpack:///./jacdac-ts/jacdac-spec/spectool/jdutils.ts","webpack:///./jacdac-ts/jacdac-spec/spectool/jdspec.ts"],"names":["isRegister","pkt","kind","packetsToRegisters","packets","filter","derived","lookupRegister","spec","id","find","name","lookupField","field","fields","member","getRegister","root","fld","ret","Error","shortName","parseIntFloat","w","allowFloat","test","v","parseInt","replace","isNaN","parseFloat","ww","split","length","en","enums","members","hasOwnProperty","exprVisitor","parent","current","structVisit","Array","isArray","forEach","c","Object","keys","key","DEVICE_IMAGE_WIDTH","DEVICE_IMAGE_HEIGHT","unitDescription","m","kg","s","A","K","cd","mol","Hz","rad","sr","N","Pa","J","W","C","V","F","Ohm","S","Wb","T","H","lm","lx","Bq","Gy","Sv","kat","m2","m3","bit","lat","lon","pH","dB","dBW","count","EL","B","VA","VAs","var","vars","hsv","rgb","rpm","uv","lux","bpm","mcd","px","secondaryUnitConverters","ms","unit","scale","offset","min","h","MHz","kW","kVA","kvar","Ah","Wh","kWh","varh","kvarh","kVAh","KiB","GB","mV","mA","dBm","ppm","ppb","hPa","mm","cm","km","nm","nT","frac","us","mWh","g","resolveUnit","su","undefined","units","r","k","push","description","scd","sort","l","localeCompare","identifierRanges","rw","ro","const","command","report","event","parseServiceSpecificationMarkdownToJSON","filecontent","includes","filename","info","status","shortId","camelName","extends","notes","classIdentifier","tags","backticksType","enumInfo","packetInfo","pipePacket","errors","lineNo","noteId","lastCmd","packetsToDescribe","nextModifier","systemInfo","usedIds","values","prev","processInclude","line","processLine","e","error","message","normalizeMD","camelize","f","toUpperCase","packFormat","trim","exec","interpret","slice","hd","cont","newNoteId","toLowerCase","iface","expanded","words","pop","cmd","startEnum","startPacket","finishPacket","packetField","enumMember","metadataMember","packed","hasNaturalAlignment","warn","repeats","hadzero","p","startRepeats","storage","type","pid","identifier","ranges","some","range","toString","map","join","indexOf","identifierName","regid","reading","md","checkBraces","forceSection","sectionId","kindSt","shift","w2","internal","isReport","unshift","normalizeName","secondary","hasReport","optional","pipeType","atat","isSet","systemPacket","isUser","isSystem","isHigh","toHex","highCommands","splice","last","rangeCheck","tp","normalizeStorageType","typeShift","Math","floor","bits","max","abs","parseVal","eq","val","parseIntCheck","defaultValue","isOptional","op","isFloat","tok","normalizeUnit","isSimpleType","canonicalType","multiSegmented","segmented","typicalMin","typicalMax","absoluteMin","absoluteMax","maxBytes","isFlags","looksRandom","n","i","hh","genRandom","random","gen","group","capitalize","concat","inner","innerEnums","clone","ie","innerPackets","ipkt","JSON","parse","stringify","msg","file","tp2","a","b","len","sz","byteOffset","memberSize","pad","o","fail","toUpper","x","toLower","cStorage","unitPref","prettyUnit","u","toH","hdDef","pref","enPref","cmt","addComment","wrapComment","comment","isMetaPipe","needsStruct","tname","unaligned","def","cst","_","upperCamel","snakify","dashify","humanify","typeInfo","f0","desc","wrapSnippet","code","TYPESCRIPT_STATIC_NAMESPACE","packFormatForField","isStatic","useBooleans","szSuff","tsType","fmt","sinfo","ff","packInfo","vartp","reptp","varname","console","log","buffers","names","types","toTypescript","staticTypeScript","indent","indent2","enumkw","toLocaleUpperCase","tsEnums","pack","text","meta","normalizeDeviceSpecification","dev","escapeDeviceIdentifier","company","escapeDeviceNameIdentifier","repo","link","services","firmwares","escaped","converters","json","j","ts","sts","isNumericType"],"mappings":"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","file":"74493c31a6571423b4de02ce9ddf127887738210-73b26d8c9d02215bfff2.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"jdspec.d.ts\" />\n\nexport function isRegister(pkt: jdspec.PacketInfo): boolean {\n    return pkt && (pkt.kind == \"const\" || pkt.kind == \"ro\" || pkt.kind == \"rw\")\n}\n\nexport function packetsToRegisters(packets: jdspec.PacketInfo[]) {\n    return packets.filter(pkt => !pkt.derived && isRegister(pkt))\n}\nexport function lookupRegister(\n    spec: jdspec.ServiceSpec,\n    id: string\n): jdspec.PacketInfo {\n    return spec.packets.find(pkt => isRegister(pkt) && pkt.name === id)\n}\n\nexport function lookupField(\n    pkt: jdspec.PacketInfo,\n    field: string\n): jdspec.PacketMember {\n    return pkt.fields.find(member => member.name === field)\n}\n\nexport interface RegField {\n    pkt: jdspec.PacketInfo\n    fld?: jdspec.PacketMember\n}\n\nexport function getRegister(spec: jdspec.ServiceSpec, root: string, fld: string = \"\"): RegField {\n    const ret: RegField = { pkt: null }\n    ret.pkt = lookupRegister(spec, root)\n    if (!ret.pkt) {\n        throw new Error(\n            `no register ${root} found in service ${spec.shortName}`\n        )\n    } else if (fld){\n        ret.fld = lookupField(ret.pkt, fld)\n        if (!ret.fld)\n            throw new Error(\n                `no field ${fld} found in register ${root} of service ${spec.shortName}`\n            )\n    }\n    return ret\n}\n\nexport function parseIntFloat(\n    spec: jdspec.ServiceSpec,\n    w: string,\n    allowFloat = false\n): number {\n    if (/^-?0x[a-f\\d_]+$/i.test(w) || /^-?[\\d_]+$/.test(w)) {\n        const v = parseInt(w.replace(/_/g, \"\")) // allow for 0x3fff_ffff syntax\n        if (isNaN(v)) throw new Error(\"can't parse int: \" + w)\n        return v\n    }\n\n    if (allowFloat && /^-?\\d*(\\.\\d*)?(e(-?)\\d+)?$/.test(w)) {\n        const v = parseFloat(w)\n        if (isNaN(v)) throw new Error(\"can't parse float: \" + w)\n        return v\n    }\n\n    const ww = w.split(/\\./)\n    if (ww.length != 2) {\n        throw new Error(`expecting int or enum member here`)\n    }\n    const en = spec.enums[ww[0]]\n    if (!en) {\n        throw new Error(`${ww[0]} is not an enum type`)\n    }\n    // eslint-disable-next-line no-prototype-builtins\n    if (!en.members.hasOwnProperty(ww[1]))\n        throw new Error(`${ww[1]} is not a member of ${ww[0]}`)\n    return en.members[ww[1]] || 0\n}\n\nexport function exprVisitor(parent: any, current: any, structVisit: (par:jsep.Expression, curr:jsep.Expression) => void) {\n    if (Array.isArray(current)) {\n        (current as any[]).forEach(c => exprVisitor(current, c, structVisit))\n    } else if (typeof current === \"object\") {\n        if (parent && current)\n            structVisit(parent, current)\n        Object.keys(current).forEach((key: string) => {\n            exprVisitor(current, current[key], structVisit)\n        })\n    }\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"jdspec.d.ts\" />\nimport { parseIntFloat } from \"./jdutils\"\n\nexport const DEVICE_IMAGE_WIDTH = 600\nexport const DEVICE_IMAGE_HEIGHT = 450\n\n// modified subset of SenML\nexport const unitDescription: jdspec.SMap<string> = {\n    \"°\": \"angle\",\n    \"°/s\": \"rotation rate\",\n    \"°/s2\": \"rotation acceleration\",\n    m: \"meter\",\n    kg: \"kilogram\",\n    s: \"second\",\n    A: \"ampere\",\n    K: \"kelvin\",\n    cd: \"candela\",\n    mol: \"mole\",\n    Hz: \"hertz\",\n    rad: \"radian\",\n    sr: \"steradian\",\n    N: \"newton\",\n    Pa: \"pascal\",\n    J: \"joule\",\n    W: \"watt\",\n    C: \"coulomb\",\n    V: \"volt\",\n    F: \"farad\",\n    Ohm: \"ohm\",\n    S: \"siemens\",\n    Wb: \"weber\",\n    T: \"tesla\",\n    H: \"henry\",\n    \"°C\": \"degrees Celsius\",\n    lm: \"lumen\",\n    lx: \"lux\",\n    Bq: \"becquerel\",\n    Gy: \"gray\",\n    Sv: \"sievert\",\n    kat: \"katal\",\n    m2: \"square meter (area)\",\n    m3: \"cubic meter (volume)\",\n    \"m/s\": \"meter per second (velocity)\",\n    \"m/s2\": \"meter per square second (acceleration)\",\n    \"m3/s\": \"cubic meter per second (flow rate)\",\n    \"W/m2\": \"watt per square meter (irradiance)\",\n    \"cd/m2\": \"candela per square meter (luminance)\",\n    bit: \"bit (information content)\",\n    \"bit/s\": \"bit per second (data rate)\",\n    lat: \"degrees latitude\",\n    lon: \"degrees longitude\",\n    pH: \"pH value (acidity; logarithmic quantity)\",\n    dB: \"decibel (logarithmic quantity)\",\n    dBW: \"decibel relative to 1 W (power level)\",\n    count: \"1 (counter value)\",\n    \"/\": \"1 (ratio e.g., value of a switch)\",\n    \"%RH\": \"Percentage (Relative Humidity)\",\n    \"%EL\": \"Percentage (remaining battery energy level)\",\n    EL: \"seconds (remaining battery energy level)\",\n    \"1/s\": \"1 per second (event rate)\",\n    \"S/m\": \"Siemens per meter (conductivity)\",\n    B: \"Byte (information content)\",\n    VA: \"volt-ampere (Apparent Power)\",\n    VAs: \"volt-ampere second (Apparent Energy)\",\n    var: \"volt-ampere reactive (Reactive Power)\",\n    vars: \"volt-ampere-reactive second (Reactive Energy)\",\n    \"J/m\": \"joule per meter (Energy per distance)\",\n    \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n    \"s/60°\": \"servo speed (time to travel 60°)\",\n    \"kg/cm\": \"torque\",\n    hsv: \"bit HSV color\",\n    rgb: \"RGB color\",\n    rpm: \"revolutions per minute\",\n    uv: \"UV index\",\n    lux: \"illuminance\",\n    bpm: \"beats per minute\",\n    mcd: \"micro candella\",\n    px: \"pixel\",\n}\n\nexport const secondaryUnitConverters: jdspec.SMap<{\n    name: string\n    unit: senml.Unit | \"#\"\n    scale: number\n    offset: number\n}> = {\n    ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1000, offset: 0 },\n    min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n    h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n    MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1000000, offset: 0 },\n    kW: { name: \"kilowatt\", unit: \"W\", scale: 1000, offset: 0 },\n    kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1000, offset: 0 },\n    kvar: { name: \"kilovar\", unit: \"var\", scale: 1000, offset: 0 },\n    Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n    Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n    kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 3600000, offset: 0 },\n    varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n    kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 3600000, offset: 0 },\n    kVAh: {\n        name: \"kilovolt-ampere-hour\",\n        unit: \"VAs\",\n        scale: 3600000,\n        offset: 0,\n    },\n    \"Wh/km\": {\n        name: \"watt-hour per kilometer\",\n        unit: \"J/m\",\n        scale: 3.6,\n        offset: 0,\n    },\n    KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n    GB: { name: \"gigabyte\", unit: \"B\", scale: 1.0e9, offset: 0 },\n    \"Mbit/s\": {\n        name: \"megabit per second\",\n        unit: \"bit/s\",\n        scale: 1000000,\n        offset: 0,\n    },\n    \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n    \"MB/s\": {\n        name: \"megabyte per second\",\n        unit: \"bit/s\",\n        scale: 8000000,\n        offset: 0,\n    },\n    mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1000, offset: 0 },\n    mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1000, offset: 0 },\n    dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n    \"ug/m3\": {\n        name: \"microgram per cubic meter\",\n        unit: \"kg/m3\",\n        scale: 1.0e-9,\n        offset: 0,\n    },\n    \"mm/h\": {\n        name: \"millimeter per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3600000,\n        offset: 0,\n    },\n    \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n    \"cm/s\": {\n        name: \"centimeter per seconds\",\n        unit: \"m/s\",\n        scale: 1 / 100,\n        offset: 0,\n    },\n    ppm: { name: \"parts per million\", unit: \"/\", scale: 1.0e-6, offset: 0 },\n    ppb: { name: \"parts per billion\", unit: \"/\", scale: 1.0e-9, offset: 0 },\n    \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1000, offset: 0 },\n    hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n    mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1000, offset: 0 },\n    cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n    km: { name: \"kilometer\", unit: \"m\", scale: 1000, offset: 0 },\n    \"km/h\": {\n        name: \"kilometer per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3.6,\n        offset: 0,\n    },\n    \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1000, offset: 0 },\n    nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n    nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n\n    // compat with previous Jacdac versions\n    frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n    us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n    mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 3.6e-3, offset: 0 },\n    g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n    \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 },\n}\n\nexport function resolveUnit(unit: string) {\n    if (unit === \"\") return { name: \"\", unit: \"\", scale: 1, offset: 1 } // indentifier\n\n    // seconary unit?\n    const su = secondaryUnitConverters[unit]\n    if (su) return su\n\n    const name = unitDescription[unit]\n    if (name) return { name, unit, scale: 1, offset: 0 }\n\n    return undefined\n}\n\nexport function units(): { name: string; description: string }[] {\n    const r: { name: string; description: string }[] = []\n    Object.keys(unitDescription).forEach(k => {\n        r.push({ name: k, description: unitDescription[k] })\n        Object.keys(secondaryUnitConverters)\n            .filter(scd => secondaryUnitConverters[scd].unit === k)\n            .forEach(scd =>\n                r.push({\n                    name: scd,\n                    description: secondaryUnitConverters[scd].name,\n                })\n            )\n    })\n    r.sort((l, r) => l.name.localeCompare(r.name))\n    return r\n}\n\n/* check ranges, see system.md\nRegisters `0x001-0x07f` - r/w common to all services\nRegisters `0x080-0x0ff` - r/w defined per-service\nRegisters `0x100-0x17f` - r/o common to all services\nRegisters `0x180-0x1ff` - r/o defined per-service\nRegisters `0x200-0xeff` - custom, defined per-service\nRegisters `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n*/\nconst identifierRanges: { [index: string]: [number, number][] } = {\n    rw: [\n        [0x001, 0x07f],\n        [0x080, 0x0ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    ro: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    const: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    command: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    report: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    event: [\n        [0x00, 0x7f], // system\n        [0x80, 0xff],\n    ],\n}\n\nexport function parseServiceSpecificationMarkdownToJSON(\n    filecontent: string,\n    includes?: jdspec.SMap<jdspec.ServiceSpec>,\n    filename = \"\"\n): jdspec.ServiceSpec {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdspec.ServiceSpec = {\n        name: \"\",\n        status: \"experimental\",\n        shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n        camelName: \"\",\n        shortName: \"\",\n        extends: [],\n        notes: {},\n        classIdentifier: 0,\n        enums: {},\n        packets: [],\n        tags: [],\n    }\n\n    let backticksType = \"\"\n    let enumInfo: jdspec.EnumInfo = null\n    let packetInfo: jdspec.PacketInfo = null\n    let pipePacket: jdspec.PacketInfo = null\n    let errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let noteId = \"short\"\n    let lastCmd: jdspec.PacketInfo\n    let packetsToDescribe: jdspec.PacketInfo[]\n    let nextModifier: \"\" | \"segmented\" | \"multi-segmented\" | \"repeats\" = \"\"\n\n    const systemInfo = includes?.[\"_system\"]\n    const usedIds: jdspec.SMap<string> = {}\n    for (const prev of values(includes || {})) {\n        if (prev.classIdentifier) usedIds[prev.classIdentifier + \"\"] = prev.name\n    }\n\n    try {\n        if (includes[\"_system\"] && includes[\"_base\"]) processInclude(\"_base\")\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (errors.length) info.errors = errors\n\n    for (const k of Object.keys(info.notes))\n        info.notes[k] = normalizeMD(info.notes[k])\n    for (const v of info.packets) v.description = normalizeMD(v.description)\n\n    if (!info.camelName)\n        info.camelName = camelize(\n            info.name\n                .replace(/\\s+/g, \" \")\n                .replace(/[ -](.)/g, (f, l) => l.toUpperCase())\n                .replace(/[^\\w]+/g, \"_\")\n        )\n    if (!info.shortName) info.shortName = info.camelName\n\n    if (info.camelName == \"system\") info.classIdentifier = 0x1fff_fff1\n    else if (info.camelName == \"base\") info.classIdentifier = 0x1fff_fff3\n    else if (info.camelName == \"sensor\") info.classIdentifier = 0x1fff_fff2\n\n    if (info.shortName != \"control\" && !info.classIdentifier)\n        error(\"identifier: not specified\")\n\n    info.packets.forEach(pkt => (pkt.packFormat = packFormat(info, pkt)))\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || line.slice(0, 4) == \"    \"\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                const [, hd, cont] = m\n                packetsToDescribe = null\n                const newNoteId = cont.trim().toLowerCase()\n                if (hd == \"#\" && !info.name) {\n                    info.name = cont.trim()\n                    line = \"\"\n                } else if (\n                    newNoteId == \"registers\" ||\n                    newNoteId == \"commands\" ||\n                    newNoteId == \"events\" ||\n                    newNoteId == \"examples\"\n                ) {\n                    noteId = newNoteId\n                    line = \"\"\n                } else {\n                    if (noteId == \"short\") noteId = \"long\"\n                    // keep line\n                }\n            }\n\n            if (packetsToDescribe) {\n                for (const iface of packetsToDescribe)\n                    iface.description += line + \"\\n\"\n            } else {\n                if (line || info.notes[noteId]) {\n                    if (!info.notes[noteId]) info.notes[noteId] = \"\"\n                    info.notes[noteId] += line + \"\\n\"\n                }\n            }\n        } else {\n            if (packetsToDescribe && packetsToDescribe[0].description)\n                packetsToDescribe = null\n            const expanded = line\n                .replace(/\\/\\/.*/, \"\")\n                .replace(/[?@:=,{};]/g, s => \" \" + s + \" \")\n                .trim()\n            if (!expanded) return\n            const words = expanded.split(/\\s+/)\n            if (/^[;,]/.test(words[words.length - 1])) words.pop()\n            let cmd = words[0]\n            // allow for `command = Foo.Bar` etc (ie. command is not a keyword there)\n            if (words[1] == \":\" || words[1] == \"=\") cmd = \":\"\n            switch (cmd) {\n                case \"enum\":\n                case \"flags\":\n                    startEnum(words)\n                    break\n                case \"meta\":\n                case \"pipe\":\n                case \"report\":\n                case \"command\":\n                case \"const\":\n                case \"ro\":\n                case \"rw\":\n                case \"event\":\n                    startPacket(words)\n                    break\n                case \"}\":\n                    if (packetInfo) {\n                        finishPacket()\n                    } else if (enumInfo) {\n                        enumInfo = null\n                    } else {\n                        error(\"nothing to end here\")\n                    }\n                    break\n                default:\n                    if (packetInfo) packetField(words)\n                    else if (enumInfo) enumMember(words)\n                    else metadataMember(words)\n            }\n        }\n    }\n\n    function finishPacket() {\n        packetInfo.packed = hasNaturalAlignment(packetInfo) ? undefined : true\n        if (packetInfo.packed)\n            warn(`you may want to use explicit padding in ${packetInfo.name}`)\n\n        let repeats = false\n        let hadzero = false\n        for (const p of packetInfo.fields) {\n            if (hadzero) {\n                error(\n                    `field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`\n                )\n                break\n            }\n            if (p.startRepeats) {\n                if (repeats)\n                    error(\n                        `repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`\n                    )\n                repeats = true\n            }\n            if (p.storage == 0 && p.type != \"string0\") {\n                if (repeats) {\n                    error(\n                        `variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`\n                    )\n                    break\n                }\n                hadzero = true\n            }\n        }\n\n        const pid = packetInfo.identifier\n        const ranges = identifierRanges[packetInfo.kind]\n        if (\n            packetInfo.name != \"set_register\" &&\n            packetInfo.name != \"get_register\" &&\n            ranges &&\n            !ranges.some(range => range[0] <= pid && pid <= range[1])\n        )\n            error(\n                `${packetInfo.name} identifier 0x${pid.toString(\n                    16\n                )} out of range, expected in ${ranges\n                    .map(\n                        range =>\n                            `[${range\n                                .map(r => `0x${r.toString(16)}`)\n                                .join(\", \")}]`\n                    )\n                    .join(\", \")}`\n            )\n\n\n        // additional checks for specific packets\n        if ([\"reading_error\", \"min_reading\", \"max_reading\", \"reading_resolution\"].indexOf(packetInfo.identifierName) > -1) {\n            const regid = packetInfo.identifierName\n            if (packetInfo.fields.length > 1)\n                error(`${regid} must be a number`)\n            const reading = info.packets.find(pkt => pkt.kind === \"ro\" && pkt.identifierName === \"reading\");\n            if (!reading)\n                error(`${regid} register without a reading register`)\n            else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n                error(`${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`)\n        }\n\n        packetInfo = null\n    }\n\n    function normalizeMD(md: string) {\n        return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n    }\n\n    function checkBraces(words: string[]) {\n        if (enumInfo || packetInfo) error(\"already in braces\")\n        if (words) {\n            if (words[2] != \"{\") error(`expecting: ${words[0]} NAME {`)\n        }\n\n        enumInfo = null\n        packetInfo = null\n    }\n\n    function forceSection(sectionId: string) {\n        if (noteId != sectionId) {\n            error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`)\n        }\n    }\n\n    function startPacket(words: string[]) {\n        checkBraces(null)\n        const kindSt = words.shift()\n        let kind: jdspec.PacketKind = \"command\"\n        if (kindSt == \"meta\") {\n            forceSection(\"commands\")\n            let w2 = words.shift()\n            if (w2 == \"pipe\") w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"meta_pipe_\" + w2) as any\n            else error(\"invalid token after meta\")\n        } else if (kindSt == \"pipe\") {\n            forceSection(\"commands\")\n            const w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\") kind = (\"pipe_\" + w2) as any\n            else error(\"invalid token after pipe\")\n        } else {\n            kind = kindSt as any\n        }\n\n        let internal: boolean = undefined\n        if (words[0] === \"internal\") {\n            internal = true\n            words.shift()\n        }\n\n        let name = words.shift()\n        const isReport = kind == \"report\"\n        if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n            words.unshift(name)\n            name = lastCmd.name\n        }\n        packetInfo = {\n            kind,\n            name: normalizeName(name),\n            identifier: undefined,\n            description: \"\",\n            fields: [],\n            internal,\n        }\n        if (isReport && lastCmd && name == lastCmd.name) {\n            packetInfo.secondary = true\n            lastCmd.hasReport = true\n        }\n        if (!packetsToDescribe) packetsToDescribe = []\n        packetsToDescribe.push(packetInfo)\n        if (words[0] == \"?\") {\n            words.shift()\n            packetInfo.optional = true\n        }\n\n        const prev = info.packets.filter(p => p.name == packetInfo.name)\n        if (prev.length == 0) {\n            // OK\n        } else if (\n            prev.length == 1 &&\n            prev[0].kind == \"command\" &&\n            packetInfo.kind == \"report\"\n        ) {\n            // OK\n        } else {\n            error(`packet redefinition ${prev.map(p => p.name).join(\", \")} `)\n        }\n\n        if (/pipe/.test(kind)) {\n            if (!pipePacket)\n                error(\n                    \"pipe definitions can only occur after the pipe-open packet\"\n                )\n            else packetInfo.pipeType = pipePacket.pipeType\n        }\n\n        const atat = words.indexOf(\"@\")\n        if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n            // no identifier\n            packetInfo.identifier = 0\n        } else if (atat >= 0) {\n            const w = words[atat + 1]\n            let v = parseInt(w)\n            let isSet = true\n            if (isNaN(v)) {\n                v = 0\n                isSet = false\n                if (systemInfo) {\n                    const systemPacket = systemInfo.packets.find(\n                        p => p.name == w\n                    )\n                    if (systemPacket) {\n                        v = systemPacket.identifier\n                        packetInfo.identifierName = w\n                        if (systemPacket.kind != kind)\n                            error(\n                                `kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`\n                            )\n                        else isSet = true\n                    } else error(`${w} not found in _system`)\n                } else {\n                    error(`${w} cannot be resolved, since _system is missing`)\n                }\n            }\n\n            let isUser = false\n            let isSystem = false\n            let isHigh = 0x200 <= v && v <= 0xeff\n            switch (kind) {\n                case \"const\":\n                case \"ro\":\n                    forceSection(\"registers\")\n                    isSystem = 0x100 <= v && v <= 0x17f\n                    isUser = 0x180 <= v && v <= 0x1ff\n                    break\n                case \"rw\":\n                    forceSection(\"registers\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n                case \"report\":\n                case \"command\":\n                    forceSection(\"commands\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    isHigh = 0x100 <= v && v <= 0xeff\n                    break\n                case \"event\":\n                    forceSection(\"events\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n            }\n\n            if (isUser) {\n                // ok\n            } else if (isSystem) {\n                if (!packetInfo.identifierName)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} should be expressed with a name from _system.md`\n                    )\n            } else if (isHigh) {\n                if (!info.highCommands)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} is from the extended range but 'high: 1' missing`\n                    )\n            }\n\n            packetInfo.identifier = v\n            words.splice(atat, 2)\n        } else {\n            if (isReport && lastCmd) packetInfo.identifier = lastCmd.identifier\n            else error(`@ not found at ${packetInfo.name}`)\n        }\n\n        if (\n            info.packets.some(\n                p =>\n                    p.kind == packetInfo.kind &&\n                    (!/pipe/.test(p.kind) ||\n                        p.pipeType == packetInfo.pipeType) &&\n                    p.identifier == packetInfo.identifier\n            )\n        ) {\n            error(\"packet identifier already used\")\n        }\n\n        info.packets.push(packetInfo)\n\n        if (kind == \"command\") lastCmd = packetInfo\n        else lastCmd = null\n\n        if (words[0] == \"=\" || words[0] == \":\") {\n            words.unshift(\"_\")\n            packetField(words)\n            finishPacket()\n        } else {\n            const last = words.shift()\n            if (last == \"{\") {\n                if (words[0] == \"...\") words.shift()\n                if (words[0] == \"}\") {\n                    words.shift()\n                    finishPacket()\n                }\n                if (words.length) error(`excessive tokens: ${words[0]}...`)\n            } else {\n                if (last === undefined && kind == \"event\") {\n                    finishPacket()\n                } else {\n                    error(\"expecting '{'\")\n                }\n            }\n        }\n    }\n\n    function rangeCheck(tp: string, v: number) {\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n\n        if (isNaN(v)) return v // error already reported\n\n        if (storage == 0) {\n            error(`numeric values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (v < 0 && storage > 0) {\n            error(`negative values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (Math.floor(v) != v && typeShift == 0) {\n            error(`only integer values allowed for ${tp}; got ${v}`)\n            return v\n        }\n\n        let bits = storage < 0 ? -storage * 8 - 1 : storage * 8\n        bits -= typeShift || 0\n        // don't use bitshift to allow for more than 32 bits\n        let max = 1\n        while (bits--) max *= 2\n        if (-v == max) {\n            // OK - min_int\n        } else if (max == 1 && v == 1) {\n            // we make an exception for u0.8 being set to 1\n        } else {\n            if (Math.abs(v) >= max) {\n                error(`value ${v} is out of range for ${tp}`)\n                return v\n            }\n        }\n\n        return v\n    }\n\n    function parseVal(words: string[]) {\n        const eq = words.shift()\n        if (eq != \"=\" && eq != \":\") error(\"expecting '='\")\n        const val = words.shift()\n        return parseIntCheck(val, true)\n    }\n\n    function packetField(words: string[]) {\n        if (\n            words.length == 2 &&\n            (words[0] == \"repeats\" ||\n                words[0] == \"segmented\" ||\n                words[0] == \"multi-segmented\")\n        ) {\n            nextModifier = words[0]\n            return\n        }\n        const name = normalizeName(words.shift())\n        let defaultValue: number = undefined\n        let isOptional: boolean = undefined\n        let op = words.shift()\n        if (op == \"?\") {\n            isOptional = true\n            op = words.shift()\n        }\n        if (op == \"=\") {\n            defaultValue = parseIntCheck(words.shift(), true)\n            op = words.shift()\n        }\n\n        if (op != \":\") error(\"expecting ':'\")\n\n        const tp = words.shift()\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n        const isFloat = typeShift === null || undefined\n\n        let tok = words.shift()\n        let unit: jdspec.Unit = \"\"\n        if (tok != \"{\") {\n            unit = normalizeUnit(tok)\n            tok = words.shift()\n        }\n\n        if (defaultValue !== undefined) rangeCheck(tp, defaultValue)\n\n        let shift = typeShift || undefined\n        if (unit == \"/\") {\n            // / units should be used with ui0. data\n            if (!/^(u0|i1)\\.\\d+$/.test(tp))\n                error(\n                    `fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`\n                )\n\n            shift = Math.abs(storage) * 8\n            if (storage < 0) shift -= 1\n        }\n\n        const field: jdspec.PacketMember = {\n            name,\n            unit,\n            shift,\n            isFloat,\n            type,\n            storage,\n            isSimpleType: canonicalType(storage) == type || undefined,\n            defaultValue,\n            isOptional,\n            multiSegmented: nextModifier == \"multi-segmented\" || undefined,\n            segmented:\n                nextModifier == \"segmented\" ||\n                nextModifier == \"multi-segmented\" ||\n                undefined,\n            startRepeats: nextModifier == \"repeats\" || undefined,\n        }\n\n        if (tok == \"{\") {\n            while (words.length) {\n                tok = words.shift()\n                if (tok == \"}\") break\n                tok = camelize(tok)\n                switch (tok) {\n                    case \"maxBytes\":\n                        ;(field as any)[tok] = rangeCheck(\"u8\", parseVal(words))\n                        break\n                    case \"typicalMin\":\n                    case \"typicalMax\":\n                    case \"absoluteMin\":\n                    case \"absoluteMax\":\n                        ;(field as any)[tok] = rangeCheck(tp, parseVal(words))\n                        break\n                    case \"preferredInterval\":\n                        if ((packetInfo as any)[tok] !== undefined)\n                            error(`field ${tok} already set`)\n                        ;(packetInfo as any)[tok] = rangeCheck(\n                            \"u32\",\n                            parseVal(words)\n                        )\n                        break\n                    default:\n                        error(\"unknown constraint: \" + tok)\n                        break\n                }\n                if (words[0] == \",\") words.shift()\n            }\n            if (tok == \"}\") tok = null\n        }\n\n        if (tok) error(`excessive tokens at the end of member: ${tok}...`)\n\n        if (\n            field.typicalMin === undefined &&\n            field.typicalMax !== undefined &&\n            storage > 0\n        )\n            field.typicalMin = 0\n\n        if (\n            field.absoluteMin === undefined &&\n            field.absoluteMax !== undefined &&\n            storage > 0\n        )\n            field.absoluteMin = 0\n\n        if (!field.storage && field.maxBytes) field.storage = field.maxBytes\n\n        if (/pipe/.test(type)) {\n            packetInfo.pipeType = packetInfo.name\n            if (\n                pipePacket &&\n                pipePacket.name == packetInfo.name &&\n                packetInfo.kind == \"report\"\n            ) {\n                // keep old pipePacket\n            } else {\n                pipePacket = packetInfo\n            }\n        }\n\n        if (\n            !field.isOptional &&\n            packetInfo.fields[packetInfo.fields.length - 1]?.isOptional\n        ) {\n            error(`all fields after an optional field have to optional`)\n        }\n\n        packetInfo.fields.push(field)\n        nextModifier = undefined\n    }\n\n    function startEnum(words: string[]) {\n        checkBraces(null)\n        if (words[2] != \":\" || words[4] != \"{\")\n            error(\"expecting: enum NAME : TYPE {\")\n        enumInfo = {\n            name: normalizeName(words[1]),\n            storage: normalizeStorageType(words[3])[0],\n            isFlags: words[0] == \"flags\" || undefined,\n            members: {},\n        }\n        if (info.enums[enumInfo.name]) error(\"enum redefinition\")\n        info.enums[enumInfo.name] = enumInfo\n    }\n\n    function enumMember(words: string[]) {\n        if (words[1] != \"=\" || words.length != 3)\n            error(`expecting: FIELD_NAME = INTEGER`)\n        enumInfo.members[normalizeName(words[0])] = rangeCheck(\n            canonicalType(enumInfo.storage),\n            parseIntCheck(words[2])\n        )\n    }\n\n    function parseIntCheck(w: string, allowFloat = false) {\n        try {\n            return parseIntFloat(info, w, allowFloat)\n        } catch (e) {\n            error(e.message)\n            return 0\n        }\n    }\n\n    function looksRandom(n: number) {\n        const s = n.toString(16)\n        const h = \"0123456789abcdef\"\n        for (let i = 0; i < h.length; ++i) {\n            const hh = h[i]\n            if (s.indexOf(hh + hh + hh) >= 0) return false\n        }\n        if (/f00d|dead|deaf|beef/.test(s)) return false\n        return true\n    }\n\n    function genRandom() {\n        for (;;) {\n            const m = (Math.random() * 0xfff_ffff) | 0x1000_0000\n            if (looksRandom(m)) return m\n        }\n    }\n\n    function metadataMember(words: string[]) {\n        if (\n            !(\n                (words[1] == \"=\" || words[1] == \":\") &&\n                (words[0] == \"tags\" || words.length == 3)\n            )\n        )\n            error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`)\n        switch (words[0]) {\n            case \"extends\":\n                processInclude(words[2])\n                break\n            case \"class\":\n            case \"identifier\": {\n                info.classIdentifier = parseIntCheck(words[2])\n                if (info.name != \"Control\" && info.classIdentifier == 0)\n                    info.classIdentifier = 1\n                const gen = `how about ${toHex(genRandom())}`\n                if (\n                    !(\n                        info.classIdentifier == 0 ||\n                        (0x1000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x1fff_ff00)\n                    )\n                )\n                    error(`class identifier out of range; ${gen}`)\n                if (!looksRandom(info.classIdentifier))\n                    error(`class identifier doesn't look random; ${gen}`)\n                if (usedIds[info.classIdentifier + \"\"])\n                    error(\n                        `class identifier ${toHex(\n                            info.classIdentifier\n                        )} already used in ${\n                            usedIds[info.classIdentifier + \"\"]\n                        }; ${gen}`\n                    )\n                break\n            }\n            case \"camel\":\n                info.camelName = words[2]\n                break\n            case \"short\":\n                info.shortName = words[2]\n                break\n            case \"high\":\n                info.highCommands = !!parseIntCheck(words[2])\n                break\n            case \"status\":\n                if (\n                    [\"stable\", \"experimental\", \"deprecated\"].indexOf(words[2]) >\n                    -1\n                )\n                    info.status = <any>words[2]\n                else error(\"unknown status\")\n                break\n            case \"group\":\n                info.group = capitalize(words.slice(2).join(\" \"))\n                break\n            case \"tags\": {\n                const tags = words.slice(2).filter(w => w != \",\" && w != \";\")\n                info.tags = info.tags.concat(tags)\n                break\n            }\n            default:\n                error(\"unknown metadata field: \" + words[0])\n                break\n        }\n    }\n\n    function processInclude(name: string) {\n        if (name == \"_system\") return\n        const inner = includes[name]\n        if (!inner) return error(\"include file not found: \" + name)\n        if (\n            info.packets.some(pkt => !pkt.derived) ||\n            values(info.enums).some(e => !e.derived)\n        )\n            error(\"extends: only allowed on top of the .md file\")\n        if (inner.errors) errors = errors.concat(inner.errors)\n        const innerEnums = clone(inner.enums)\n        Object.keys(innerEnums)\n            .filter(k => !info.enums[k])\n            .forEach(k => {\n                const ie = innerEnums[k]\n                ie.derived = name\n                info.enums[k] = ie\n            })\n        const innerPackets = clone(\n            inner.packets.filter(\n                pkt =>\n                    !info.packets.find(\n                        ipkt =>\n                            ipkt.kind === pkt.kind &&\n                            ipkt.identifier === pkt.identifier\n                    )\n            )\n        )\n        innerPackets.forEach(pkt => (pkt.derived = name))\n        info.packets = [...info.packets, ...innerPackets]\n        if (inner.highCommands) info.highCommands = true\n        info.extends = inner.extends.concat([name])\n    }\n\n    function clone<T>(v: T): T {\n        return JSON.parse(JSON.stringify(v))\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function warn(msg: string) {\n        if (info.camelName == \"system\") return // no warnings in _system\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function normalizeName(n: string) {\n        if (!/^\\w+$/.test(n)) error(\"expecting name here\")\n        if (n.length > 31) error(`name '${n}' too long`)\n        return n\n    }\n\n    function normalizeStorageType(\n        tp: string\n    ): [jdspec.StorageType, string, number] {\n        if (info.enums[tp]) return [info.enums[tp].storage, tp, 0]\n        if (!tp) error(\"expecting type here\")\n        const tp2 = tp.replace(/_t$/, \"\").toLowerCase()\n        const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2)\n        if (m) {\n            const a = parseIntCheck(m[2])\n            const b = parseIntCheck(m[3])\n            const len = a + b\n            if (!(len == 8 || len == 16 || len == 32 || len == 64))\n                error(`fixed point ${tp} can't be ${len} bits`)\n            if (a == 0 && m[1] == \"i\")\n                error(\n                    `fixed point ${tp} can't be i0.X; has to be at least i1.X`\n                )\n            return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b]\n        }\n\n        switch (tp2) {\n            case \"bool\":\n                return [1, tp2, 0]\n            case \"i8\":\n            case \"u8\":\n            case \"i16\":\n            case \"u16\":\n            case \"i32\":\n            case \"u32\":\n            case \"i64\":\n            case \"u64\": {\n                let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3\n                if (tp2[0] == \"i\") sz = -sz\n                return [sz, tp2, 0]\n            }\n            case \"f16\":\n                return [2, tp2, null]\n            case \"f32\":\n                return [4, tp2, null]\n            case \"f64\":\n                return [8, tp2, null]\n            case \"pipe\":\n                return [12, tp2, 0]\n            case \"pipe_port\":\n                return [2, tp2, 0]\n            case \"devid\":\n                return [8, tp2, 0]\n            case \"bytes\":\n            case \"string\":\n            case \"string0\":\n                return [0, tp2, 0]\n            default: {\n                const m = /^u8\\[(\\d+)\\]$/.exec(tp2)\n                if (m) return [parseIntCheck(m[1]), tp2, 0]\n                error(\"unknown type: \" + tp + \" \" + tp2)\n                return [4, tp2, 0]\n            }\n        }\n    }\n\n    function normalizeUnit(unit: string): jdspec.Unit {\n        if (unit === undefined || unit === null) return \"\"\n\n        if (unitDescription[unit] || secondaryUnitConverters[unit])\n            return unit as jdspec.Unit\n        error(`expecting unit, got '${unit}'`)\n        return \"\"\n    }\n\n    function hasNaturalAlignment(iface: jdspec.PacketInfo) {\n        let byteOffset = 0\n\n        for (const m of iface.fields) {\n            const sz = memberSize(m)\n            if (sz == 0) continue\n            const pad = sz > 4 ? 4 : sz\n            if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0) return false\n            byteOffset += sz\n        }\n\n        return true\n    }\n}\n\nfunction values<T>(o: jdspec.SMap<T>): T[] {\n    const r: T[] = []\n    for (const k of Object.keys(o)) r.push(o[k])\n    return r\n}\n\nfunction fail(msg: string) {\n    throw new Error(msg)\n}\n\nfunction toUpper(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toUpperCase()\n}\n\nfunction toLower(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toLowerCase()\n}\n\nfunction packed(iface: jdspec.PacketInfo) {\n    if (!iface.packed) return \"\"\n    else return \" __attribute__((packed))\"\n}\n\nfunction cStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    if (tp < 0) return `int${-tp * 8}_t`\n    else return `uint${tp * 8}_t`\n}\n\nfunction canonicalType(tp: jdspec.StorageType): string {\n    if (tp == 0) return \"bytes\"\n    if (tp < 0) return `i${-tp * 8}`\n    else return `u${tp * 8}`\n}\n\nfunction isRegister(k: jdspec.PacketKind) {\n    return k == \"ro\" || k == \"rw\" || k == \"const\"\n}\n\nfunction toHex(n: number): string {\n    if (n === undefined) return \"\"\n    if (n < 0) return \"-\" + toHex(n)\n    return \"0x\" + n.toString(16)\n}\n\nfunction unitPref(f: jdspec.PacketMember) {\n    if (!f.unit) return \"\"\n    else return prettyUnit(f.unit) + \" \"\n}\n\nfunction prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n            return \"°C\"\n        case \"/\":\n            return \"ratio\"\n        default:\n            return u\n    }\n}\n\nfunction toH(info: jdspec.ServiceSpec) {\n    let r = \"// Autogenerated C header file for \" + info.name + \"\\n\"\n    const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`\n    r += `#ifndef ${hdDef}\\n`\n    r += `#define ${hdDef} 1\\n`\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r += `\\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex(\n            info.classIdentifier\n        )}\\n`\n\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        r += `\\n// enum ${en.name} (${cStorage(en.storage)})\\n`\n        for (const k of Object.keys(en.members))\n            r +=\n                \"#define \" +\n                enPref +\n                \"_\" +\n                toUpper(k) +\n                \" \" +\n                toHex(en.members[k]) +\n                \"\\n\"\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        r += wrapComment(cmt.comment)\n\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName)\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r += `#define ${name} ${val}\\n`\n        }\n\n        const isMetaPipe =\n            pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\"\n\n        if (cmt.needsStruct || isMetaPipe) {\n            let tname =\n                \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name)\n            if (pkt.kind == \"report\") tname += \"_report\"\n            r += `typedef struct ${tname} {\\n`\n            if (isMetaPipe) {\n                r += `    uint32_t identifier; // ${toHex(pkt.identifier)}\\n`\n            }\n            let unaligned = \"\"\n            for (let i = 0; i < pkt.fields.length; ++i) {\n                const f = pkt.fields[i]\n                let def = \"\"\n                const cst = cStorage(f.storage)\n                const sz = memberSize(f)\n                if (f.type == \"string\" || f.type == \"string0\")\n                    def = `char ${f.name}[${sz}]`\n                else if (cst == \"bytes\") def = `uint8_t ${f.name}[${sz}]`\n                else def = `${cst} ${f.name}`\n                // if it's the last field and it start repeats, treat it as an array\n                if (f.startRepeats && i == pkt.fields.length - 1) def += \"[0]\"\n                def += \";\"\n                if (!f.isSimpleType && f.type != \"devid\")\n                    def += \"  // \" + unitPref(f) + f.type\n                else if (f.unit) def += \" // \" + prettyUnit(f.unit)\n                r += \"    \" + unaligned + def + \"\\n\"\n                if (f.type == \"string0\") unaligned = \"// \"\n            }\n            r += `}${packed(pkt)} ${tname}_t;\\n\\n`\n        }\n    }\n    r += \"\\n#endif\\n\"\n    return r\n}\n\nexport function camelize(name: string) {\n    if (!name) return name\n    return (\n        name[0].toLowerCase() +\n        name.slice(1).replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase())\n    )\n}\n\nexport function capitalize(name: string) {\n    if (!name) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nfunction upperCamel(name: string) {\n    name = camelize(name)\n    if (!name?.length) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nexport function snakify(name: string) {\n    return name?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b)\n}\n\nexport function dashify(name: string) {\n    if (!name) return name\n    return snakify(name.replace(/^_+/, \"\")).replace(/_/g, \"-\").toLowerCase()\n}\n\nexport function humanify(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b)\n        .replace(/(-|_)/g, \" \")\n}\n\nfunction addComment(pkt: jdspec.PacketInfo) {\n    let comment = \"\"\n\n    let typeInfo = \"\"\n    let needsStruct = false\n    if (pkt.fields.length == 0) {\n        if (pkt.kind != \"event\") typeInfo = \"No args\"\n    } else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n        const f0 = pkt.fields[0]\n        typeInfo = cStorage(f0.storage)\n        if (!f0.isSimpleType) typeInfo = f0.type + \" (\" + typeInfo + \")\"\n        typeInfo = unitPref(f0) + typeInfo\n        if (f0.name != \"_\") typeInfo = f0.name + \" \" + typeInfo\n    } else {\n        needsStruct = true\n    }\n\n    if (pkt.fields.length == 1) {\n        if (isRegister(pkt.kind)) {\n            let info = \"\"\n            if (pkt.kind == \"ro\") info = \"Read-only\"\n            else if (pkt.kind == \"const\") info = \"Constant\"\n            else info = \"Read-write\"\n            if (typeInfo) typeInfo = info + \" \" + typeInfo\n            else typeInfo = info\n        } else if (typeInfo) {\n            typeInfo = \"Argument: \" + typeInfo\n        }\n    }\n\n    if (pkt.kind == \"report\" && pkt.secondary) {\n        comment += \"Report: \" + typeInfo + \"\\n\"\n    } else {\n        if (pkt.description) {\n            let desc = pkt.description.replace(/\\n\\n[^]*/, \"\")\n            if (typeInfo) desc = typeInfo + \". \" + desc\n            comment = desc + \"\\n\" + comment\n        }\n    }\n\n    return {\n        comment,\n        needsStruct,\n    }\n}\n\nfunction wrapComment(comment: string) {\n    return (\n        \"\\n/**\\n * \" +\n        comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") +\n        \"\\n */\\n\"\n    )\n}\n\nfunction wrapSnippet(code: string) {\n    if (!code) return code\n    return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`\n}\n\nexport const TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\"\nfunction packFormatForField(\n    info: jdspec.ServiceSpec,\n    fld: jdspec.PacketMember,\n    isStatic?: boolean,\n    useBooleans?: boolean\n) {\n    const sz = memberSize(fld)\n    const szSuff = sz ? `[${sz}]` : ``\n    let tsType = \"number\"\n    let fmt = \"\"\n    if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n        fmt = fld.type\n    } else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n        fmt = \"b\" + szSuff\n    } else if (info.enums[fld.type]) {\n        fmt = canonicalType(info.enums[fld.type].storage)\n        tsType = upperCamel(info.camelName) + upperCamel(fld.type)\n        if (isStatic) tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType\n    } else {\n        switch (fld.type) {\n            case \"string\":\n                fmt = \"s\" + szSuff\n                tsType = \"string\"\n                break\n            case \"bytes\":\n                fmt = \"b\" + szSuff\n                break\n            case \"string0\":\n                fmt = \"z\"\n                tsType = \"string\"\n                break\n            case \"devid\":\n                fmt = \"b[8]\"\n                break\n            case \"pipe_port\":\n                fmt = \"u16\"\n                break\n            case \"pipe\":\n                fmt = \"b[12]\"\n                break\n            case \"bool\":\n                // TODO native bool support\n                fmt = \"u8\"\n                if (useBooleans) tsType = \"boolean\"\n                break\n            default:\n                return null\n        }\n    }\n\n    if (tsType == \"number\" && fmt && fmt[0] == \"b\") tsType = \"Buffer\"\n    return { fmt, tsType }\n}\n\n/**\n * Generates the format to pack/unpack a data payload for this packet\n * @param pkt\n * TODO fix this\n */\nexport function packFormat(\n    sinfo: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    useBooleans?: boolean\n): string {\n    if (pkt.packed || !pkt.fields?.length) return undefined\n\n    const fmt: string[] = []\n    for (const fld of pkt.fields) {\n        if (fld.startRepeats) fmt.push(\"r:\")\n        const ff = packFormatForField(sinfo, fld, false, useBooleans)\n        if (!ff) return undefined\n        fmt.push(ff.fmt)\n    }\n\n    return fmt.join(\" \")\n}\n\nexport function packInfo(\n    info: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    isStatic: boolean,\n    useBooleans?: boolean\n) {\n    const vars: string[] = []\n    const vartp: string[] = []\n    let fmt = \"\"\n    let repeats: string[]\n    let reptp: string[]\n\n    for (let i = 0; i < pkt.fields.length; ++i) {\n        const fld = pkt.fields[i]\n        let isArray = \"\"\n        if (fld.startRepeats) {\n            if (i == pkt.fields.length - 1) {\n                isArray = \"[]\"\n            } else {\n                fmt += \"r: \"\n                repeats = []\n                reptp = []\n                vars.push(\"rest\")\n            }\n        }\n        const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name)\n        const f0 = packFormatForField(info, fld, isStatic, useBooleans)\n        if (!f0 || /(reserved|padding)/.test(fld.name)) {\n            if (!f0)\n                console.log(\n                    `${pkt.name}/${fld.name} - can't get format for '${fld.type}'`\n                )\n            fmt += `x[${memberSize(fld)}] `\n        } else {\n            fmt += f0.fmt + isArray + \" \"\n            let tp = f0.tsType\n            if (tp == \"Buffer\" && !isStatic) tp = \"Uint8Array\"\n            tp += isArray\n            if (repeats) {\n                repeats.push(varname)\n                reptp.push(tp)\n            } else {\n                vars.push(varname)\n                vartp.push(tp)\n            }\n        }\n    }\n\n    fmt = fmt.replace(/ *$/, \"\")\n\n    if (reptp) vartp.push(\"([\" + reptp.join(\", \") + \"])[]\")\n\n    let buffers = \"\"\n    buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\n        \", \"\n    )}]>(buf, \"${fmt}\")\\n`\n    if (repeats) buffers += `const [${repeats.join(\", \")}] = rest[0]\\n`\n\n    buffers = buffers.replace(/\\n*$/, \"\")\n\n    return {\n        buffers,\n        names: vars,\n        types: vartp,\n    }\n}\n\nfunction memberSize(fld: jdspec.PacketMember) {\n    return Math.abs(fld.storage)\n}\n\nfunction toTypescript(info: jdspec.ServiceSpec, staticTypeScript: boolean) {\n    const indent = staticTypeScript ? \"    \" : \"\"\n    const indent2 = indent + \"    \"\n    const enumkw = staticTypeScript\n        ? indent + \"export const enum\"\n        : \"export enum\"\n    let r = staticTypeScript\n        ? `namespace ${TYPESCRIPT_STATIC_NAMESPACE} {\\n`\n        : \"\"\n    r += indent + \"// Service: \" + info.name + \"\\n\"\n    if (info.shortId[0] != \"_\") {\n        r +=\n            indent +\n            `export const SRV_${snakify(\n                info.camelName\n            ).toLocaleUpperCase()} = ${toHex(info.classIdentifier)}\\n`\n    }\n    const pref = upperCamel(info.camelName)\n    for (const en of values(info.enums)) {\n        const enPref = pref + upperCamel(en.name)\n        r += `\\n${enumkw} ${enPref} { // ${cStorage(en.storage)}\\n`\n        for (const k of Object.keys(en.members))\n            r += indent2 + k + \" = \" + toHex(en.members[k]) + \",\\n\"\n        r += indent + \"}\\n\\n\"\n    }\n    const tsEnums: jdspec.SMap<string> = {}\n\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        const pack = pkt.fields.length\n            ? packInfo(info, pkt, staticTypeScript).buffers\n            : \"\"\n\n        let inner = \"Cmd\"\n        if (isRegister(pkt.kind)) inner = \"Reg\"\n        else if (pkt.kind == \"event\") inner = \"Event\"\n        else if (\n            pkt.kind == \"meta_pipe_command\" ||\n            pkt.kind == \"meta_pipe_report\"\n        )\n            inner = \"PipeCmd\"\n        else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n            inner = \"info\"\n\n        let text = \"\"\n        let meta = \"\"\n        if (pkt.secondary || inner == \"info\") {\n            if (pack)\n                text = wrapComment(\n                    `${pkt.kind} ${upperCamel(pkt.name)}${wrapSnippet(pack)}`\n                )\n        } else {\n            const val = toHex(pkt.identifier)\n            if (staticTypeScript && pkt.kind === \"event\") {\n                meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\\n`\n            }\n            text = `${\n                wrapComment(cmt.comment + wrapSnippet(pack)) + meta\n            }${upperCamel(pkt.name)} = ${val},\\n`\n        }\n\n        if (text) tsEnums[inner] = (tsEnums[inner] || \"\") + text\n\n        // don't line const strings in makecode,\n        // they don't get dropped efficiently\n    }\n\n    for (const k of Object.keys(tsEnums)) {\n        if (k == \"info\") r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\"\n        else {\n            const inner = tsEnums[k]\n                .replace(/^\\n+/, \"\")\n                .replace(/\\n$/, \"\")\n                .replace(/\\n/g, \"\\n    \" + indent)\n            r += `${enumkw} ${pref}${k} {\\n    ${indent}${inner}\\n${indent}}\\n\\n`\n        }\n    }\n\n    if (staticTypeScript) r += \"}\\n\"\n\n    return r.replace(/ *$/gm, \"\")\n}\n\nexport function normalizeDeviceSpecification(dev: jdspec.DeviceSpec) {\n    // reorder fields\n    const clone: jdspec.DeviceSpec = {\n        id: (dev.id =\n            escapeDeviceIdentifier(dev.company) +\n            \"-\" +\n            escapeDeviceNameIdentifier(dev.name)),\n        name: dev.name,\n        company: dev.company,\n        description: dev.description,\n        repo: dev.repo,\n        link: dev.link,\n        services: dev.services || [],\n        firmwares: dev.firmwares || [],\n    }\n    return clone\n}\n\nexport function escapeDeviceIdentifier(text: string) {\n    if (!text) text = \"\"\n    const escaped = text\n        .trim()\n        .toLowerCase()\n        .replace(/([^a-z0-9\\_-])+/gi, \"-\")\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\")\n    const id = snakify(escaped)\n    return id\n}\n\nexport function escapeDeviceNameIdentifier(text: string) {\n    return escapeDeviceIdentifier(text).replace(/-/g, \"\")\n}\n\nexport function converters(): jdspec.SMap<(s: jdspec.ServiceSpec) => string> {\n    return {\n        json: (j: jdspec.ServiceSpec) => JSON.stringify(j, null, 2),\n        c: toH,\n        ts: j => toTypescript(j, false),\n        sts: j => toTypescript(j, true),\n        /*\n        \"cpp\": toHPP,\n        */\n    }\n}\n\nexport function isNumericType(field: jdspec.PacketMember) {\n    const tp = field.type\n    return (\n        !field.startRepeats &&\n        /^[uif]\\d+(\\.\\d+)?$/.test(tp) &&\n        tp != \"pipe_port\" &&\n        tp != \"bool\"\n    )\n}\n"],"sourceRoot":""}