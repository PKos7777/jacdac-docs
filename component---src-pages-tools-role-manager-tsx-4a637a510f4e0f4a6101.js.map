{"version":3,"sources":["webpack:///./src/components/alert/ConnectAlert.tsx","webpack:///./jacdac-ts/src/jdom/serviceclient.ts","webpack:///./jacdac-ts/src/jdom/rolemanagerclient.ts","webpack:///./src/components/RoleManagerService.tsx","webpack:///./src/components/hooks/useServices.ts","webpack:///./src/components/tools/RoleManager.tsx","webpack:///./src/pages/tools/role-manager.tsx","webpack:///./src/components/useServiceClient.ts"],"names":["useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","props","classes","useContext","JacdacContext","bus","connectionState","serviceClass","devices","useChange","b","spec","serviceSpecificationFromClassIdentifier","webusb","isWebUSBEnabled","isWebUSBSupported","length","BusState","Disconnected","name","ConnectAlert","JDServiceClient","service","toString","device","JDClient","SCAN_DEBOUNCE","RequestedRole","parent","candidates","computeCandidates","services","indexOf","bound","undefined","select","setRole","info","map","c","join","parts","split","slice","RoleManagerClient","scanning","requestedRoles","console","log","dscan","debounceAsync","scan","bind","mount","subscribe","DEVICE_CHANGE","recomputeCandidates","changeEvent","event","RoleManagerEvent","Change","EVENT","connected","addRequested","devs","role","r","find","d","push","inp","InPipeReader","sendPacketAsync","openCommand","RoleManagerCmd","ListRequiredRoles","localDevs","ordevs","rdevs","buf","jdunpack","devidbuf","serviceIdx","devid","toHex","srv","deviceId","readData","sort","a","strcmp","some","dev","i","emit","CHANGE","ERROR","forEach","rdev","clearRoles","sendCmdAsync","ClearAllRoles","serviceIndex","data","jdpack","fromHex","Packet","from","SetRole","rdp","startSimulators","todos","groupBy","filter","hostDefinition","hostDefinitionFromServiceClass","todo","parentName","Object","keys","t","addHost","arrayConcatMany","START_SIMULATOR","NO_CANDIDATES","RequestedRoleView","requestedRole","client","useState","working","setWorking","handleStartClick","handleChange","ev","value","target","id","identify","noCandidates","disabled","error","candidate","nodeId","serviceName","RoleManagerService","useServiceClient","handleClearRoles","handleStartSimulators","useServices","options","JSON","stringify","RoleManager","SRV_ROLE_MANAGER","Page","factory","deps","setClient","useEffect","unmount"],"mappings":"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","file":"component---src-pages-tools-role-manager-tsx-4a637a510f4e0f4a6101.js","sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\";\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\";\nimport React, { useContext } from \"react\";\nimport { BusState } from \"../../../jacdac-ts/src/jdom/bus\";\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport ConnectButton from \"../../jacdac/ConnectButton\";\nimport { isWebUSBEnabled, isWebUSBSupported } from \"../../../jacdac-ts/src/jdom/usb\"\nimport { NoSsr } from '@material-ui/core';\nimport useChange from \"../../jacdac/useChange\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    button: {\n        marginLeft: theme.spacing(2)\n    }\n}))\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { bus, connectionState } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass } = props\n    const devices = useChange(bus, b => b.devices({ serviceClass }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const webusb = isWebUSBEnabled() && isWebUSBSupported()\n\n    if (!devices?.length &&\n        webusb &&\n        connectionState === BusState.Disconnected)\n        return <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <ConnectButton className={classes.button} full={true} transparent={true} />\n            </Alert>\n        </Box>\n    return null\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return <NoSsr>\n        <NoSsrConnectAlert {...props} />\n    </NoSsr>\n}","import { JDService } from \"./service\";\nimport { JDDevice } from \"./device\";\nimport { JDBus } from \"./bus\";\nimport { JDClient } from \"./client\";\n\nexport class JDServiceClient extends JDClient {\n\n    constructor(public readonly service: JDService) {\n        super()\n    }\n\n    protected get device(): JDDevice {\n        return this.service.device\n    }\n\n    protected get bus(): JDBus {\n        return this.device.bus\n    }\n\n    toString(): string {\n        return `client of ${this.service}`\n    }\n}\n","import { InPipeReader } from \"./pipes\";\nimport { JDService } from \"./service\";\nimport { JDServiceClient } from \"./serviceclient\";\nimport { RoleManagerCmd, CHANGE, ERROR, EVENT, DEVICE_CHANGE, RoleManagerEvent } from \"./constants\";\nimport { toHex, strcmp, fromHex, debounceAsync, groupBy, arrayConcatMany } from \"./utils\";\nimport Packet from \"./packet\";\nimport { jdpack, jdunpack } from \"./pack\";\nimport { addHost, hostDefinitionFromServiceClass } from \"../hosts/hosts\";\n\nconst SCAN_DEBOUNCE = 2000\n\nexport class RequestedRole {\n    bound: JDService;\n    candidates: JDService[] = [];\n\n    constructor(\n        readonly parent: RoleManagerClient,\n        readonly name: string,\n        readonly serviceClass: number\n    ) { }\n\n    computeCandidates() {\n        const { bus } = this.parent.service.device;\n        this.candidates = bus.services({ serviceClass: this.serviceClass });\n        // check that bound service is stil update to date\n        if (this.candidates.indexOf(this.bound) < 0)\n            this.bound = undefined;\n    }\n\n    async select(service: JDService) {\n        if (service === this.bound)\n            return // already set\n        if (this.bound)\n            await this.parent.setRole(this.bound, \"\")\n        await this.parent.setRole(service, this.name)\n        this.bound = service;\n    }\n\n    get parentName(): string {\n        const parts = this.name.split(/\\//g);\n        return parts.length > 1 ? parts.slice(0, parts.length - 1).join(\"/\") : undefined;\n    }\n\n    toString() {\n        let info = `${this.name}:${this.serviceClass.toString(16)}`\n        if (this.bound)\n            info += ` -> ${this.bound}`;\n        info += \", \" + this.candidates.map(c => c.toString()).join();\n        return info;\n    }\n}\n\nexport class RoleManagerClient extends JDServiceClient {\n    private scanning = false;\n    public requestedRoles: RequestedRole[] = undefined;\n\n    constructor(service: JDService) {\n        super(service)\n        console.log(`rdp: new`)\n\n        const dscan = debounceAsync(this.scan.bind(this), SCAN_DEBOUNCE);\n        this.mount(this.bus.subscribe(DEVICE_CHANGE, debounceAsync(async () => {\n            this.recomputeCandidates();\n        }, SCAN_DEBOUNCE)));\n        const changeEvent = this.service.event(RoleManagerEvent.Change);\n        this.mount(changeEvent.subscribe(EVENT, dscan));\n        dscan();\n    }\n\n    async scan() {\n        if (this.scanning\n            || !this.service.device.connected)\n            return;\n\n        const addRequested = (devs: RequestedRole[], role: string, serviceClass: number) => {\n            let r = devs.find(d => d.name == role)\n            if (!r) devs.push(r = new RequestedRole(this, role, serviceClass))\n            return r\n        }\n\n        try {\n            console.log(`rdp start`)\n            this.scanning = true;\n            const inp = new InPipeReader(this.bus)\n            await this.service.sendPacketAsync(\n                inp.openCommand(RoleManagerCmd.ListRequiredRoles),\n                true)\n\n            const localDevs = this.bus.devices();\n            const ordevs = this.requestedRoles?.slice(0) || [];\n            const rdevs: RequestedRole[] = []\n\n            for (const buf of await inp.readData()) {\n                const [devidbuf, serviceClass, serviceIdx, role]\n                    = jdunpack<[Uint8Array, number, number, string]>(buf, \"b[8] u32 u8 s\")\n                const devid = toHex(devidbuf);\n                console.log({ devidbuf, role, serviceClass })\n                const r = addRequested(rdevs, role, serviceClass)\n                const srv = localDevs\n                    .find(d => d.deviceId == devid)\n                    ?.service(serviceIdx);\n                if (srv && srv.serviceClass === serviceClass)\n                    r.bound = srv;\n            }\n\n            rdevs.sort((a, b) => strcmp(a.name, b.name))\n\n            if (rdevs.length !== ordevs.length\n                || rdevs.some(\n                    (dev, i) => (dev.name !== ordevs[i].name) || (dev.bound !== ordevs[i].bound)\n                )\n            ) {\n                this.requestedRoles = rdevs;\n                this.recomputeCandidates();\n                console.log(`rdp changed`, this.requestedRoles)\n                this.emit(CHANGE, this.requestedRoles)\n            }\n\n            console.log(`rdp done`)\n        }\n        catch (e) {\n            this.emit(ERROR, e);\n        }\n        finally {\n            this.scanning = false;\n        }\n    }\n\n    private recomputeCandidates() {\n        this.requestedRoles?.forEach(rdev => rdev.computeCandidates());\n    }\n\n    async clearRoles() {\n        await this.service.sendCmdAsync(RoleManagerCmd.ClearAllRoles)\n    }\n\n    async setRole(service: JDService, role: string) {\n        const { device, serviceIndex } = service;\n        this.log(`set role ${device}:${serviceIndex} to ${role}`)\n        const data = jdpack<[Uint8Array, number, string]>(\"b[8] u8 s\", [fromHex(device.deviceId), serviceIndex, role || \"\"]);\n        await this.service.sendPacketAsync(Packet.from(RoleManagerCmd.SetRole, data), true)\n    }\n\n    toString() {\n        return (this.requestedRoles || []).map(rdp => rdp.toString()).join('\\n')\n    }\n\n    get missingRoles() {\n        return (this.requestedRoles || []).filter(role => !role.bound).length > 0\n    }\n\n    startSimulators() {\n        if (!this.requestedRoles) return;\n\n        // collect roles that need to be bound\n        const todos = groupBy(this.requestedRoles.filter(role => !role.bound)\n            .map(role => ({\n                role, hostDefinition: hostDefinitionFromServiceClass(role.serviceClass)\n            }))\n            .filter(todo => !!todo.hostDefinition),\n            todo => todo.role.parentName || \"\");\n\n        // spawn devices with group of devices\n        Object.keys(todos).forEach(parentName => {\n            const todo = todos[parentName];\n            // no parent, spawn individual services\n            if (!parentName) {\n                todo.forEach(t => addHost(this.bus, t.hostDefinition.services(), t.hostDefinition.name));\n            } else { // spawn all services into 1\n                addHost(this.bus, arrayConcatMany(todo.map(t => t.hostDefinition.services())), parentName)\n            }\n        })\n    }\n}\n","import React, { useContext, useState } from \"react\"\nimport { Card, CardActions, CardContent, CircularProgress, Grid, MenuItem } from \"@material-ui/core\"\nimport useChange from \"../jacdac/useChange\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { RequestedRole, RoleManagerClient } from \"../../jacdac-ts/src/jdom/rolemanagerclient\"\nimport CmdButton from \"./CmdButton\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport useServiceClient from \"./useServiceClient\"\nimport SelectWithLabel from \"./ui/SelectWithLabel\"\nimport DeviceName from \"./DeviceName\"\nimport { serviceName } from \"../../jacdac-ts/src/jdom/pretty\"\nimport { addHost, hostDefinitionFromServiceClass } from \"../../jacdac-ts/src/hosts/hosts\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport LoadingProgress from \"./ui/LoadingProgress\"\n\nconst START_SIMULATOR = \"__start_simulator\"\nconst NO_CANDIDATES = \"__no_candidates\"\n\nfunction RequestedRoleView(props: {\n    requestedRole: RequestedRole,\n    client: RoleManagerClient\n}) {\n    const { requestedRole, client } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [working, setWorking] = useState(false)\n    const { name: role, serviceClass } = requestedRole;\n\n    const handleStartClick = () => {\n        addHost(bus, hostDefinition.services(), hostDefinition.name)\n    }\n    const handleChange = async (ev: React.ChangeEvent<{ value: unknown }>) => {\n        const value: string = ev.target.value as string;\n        if (value === START_SIMULATOR) {\n            handleStartClick();\n        } else if (value === NO_CANDIDATES) {\n            // do nothing\n        }\n        else {\n            const srv = requestedRole.candidates.find(c => c.id == value)\n            if (srv && client) {\n                try {\n                    setWorking(true)\n                    await client.setRole(srv, role)\n                    await srv.device.identify()\n                }\n                finally {\n                    setWorking(false)\n                }\n            }\n        }\n    }\n\n    const noCandidates = !requestedRole.candidates?.length;\n    const disabled = working;\n    const value = requestedRole.bound?.id || \"\"\n    const error = !value && \"select a device\"\n    const hostDefinition = hostDefinitionFromServiceClass(serviceClass)\n\n    return <Grid item xs={12} sm={6} md={4} xl={3}>\n        <SelectWithLabel\n            fullWidth={true}\n            disabled={disabled}\n            label={role}\n            value={value}\n            onChange={handleChange}\n            error={error}>\n            {requestedRole.candidates?.map(candidate => <MenuItem key={candidate.nodeId} value={candidate.id}>\n                <DeviceName device={candidate.device} />[{candidate.serviceIndex}]\n            </MenuItem>)}\n            {noCandidates && !hostDefinition && <MenuItem value={NO_CANDIDATES}>Please connect a device with a <b>{serviceName(requestedRole.serviceClass)}</b> service</MenuItem>}\n            {hostDefinition && <MenuItem value={START_SIMULATOR}>start simulator</MenuItem>}\n        </SelectWithLabel>\n    </Grid>\n}\n\n\nexport default function RoleManagerService(props: {\n    service: JDService,\n    clearRoles?: boolean\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { service, clearRoles } = props\n    const client = useServiceClient(service, srv => new RoleManagerClient(srv));\n    const requestedRoles = useChange(client, c => c?.requestedRoles);\n\n    const handleClearRoles = async () => await client?.clearRoles()\n    const handleStartSimulators = async () => client.startSimulators();\n\n    return <Card>\n        <DeviceCardHeader device={service.device} showMedia={true} />\n        <CardContent>\n            {!requestedRoles?.length && <LoadingProgress />}\n            <Grid container spacing={1}>\n                {requestedRoles?.map(rdev => <RequestedRoleView\n                    key={rdev.name} requestedRole={rdev} client={client} />)}\n            </Grid>\n        </CardContent>\n        <CardActions>\n            {clearRoles && client && <CmdButton variant=\"outlined\" trackName=\"rolemgr.clearroles\" size=\"small\"\n                onClick={handleClearRoles}>\n                Clear roles\n            </CmdButton>}\n            <CmdButton variant=\"outlined\" trackName=\"rolemgr.startsims\" disabled={!requestedRoles} size=\"small\" onClick={handleStartSimulators}>\n                Start simulators\n            </CmdButton>\n        </CardActions>\n    </Card >\n}","import { useContext } from \"react\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useChange from '../../jacdac/useChange';\n\nexport default function useServices(options: {\n    serviceName?: string;\n    serviceClass?: number;\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, b => b.services(options)\n        , [JSON.stringify(options)])\n    return services;\n}","import React from \"react\"\nimport { Grid } from \"@material-ui/core\"\nimport { SRV_ROLE_MANAGER } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ConnectAlert from \"../alert/ConnectAlert\"\nimport Alert from \"../ui/Alert\"\nimport RoleManagerService from \"../RoleManagerService\"\nimport useServices from \"../hooks/useServices\"\n\nexport default function RoleManager(props: { clearRoles?: boolean }) {\n    const { clearRoles } = props;\n    const services = useServices({ serviceClass: SRV_ROLE_MANAGER });\n\n    return <>\n        {<ConnectAlert serviceClass={SRV_ROLE_MANAGER} />}\n        {!services.length && <Alert severity=\"info\">We could not find any device with the role manager service on the bus!</Alert>}\n        <Grid container spacing={2}>\n            {services.map(service => <Grid key={service.id} item xs={12}>\n                <RoleManagerService service={service} clearRoles={clearRoles} />\n            </Grid>)}\n        </Grid>\n    </>\n}","import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport RoleManager from \"../../components/tools/RoleManager\"\n\nexport default function Page() {\n    return <>\n        <h1>Role Manager</h1>\n        <p>\n            Use this page to configure the roles of devices using the\n        <Link to=\"/services/rolemanager/\">role manager service</Link>.\n    </p>\n        <RoleManager clearRoles={true} />\n    </>\n}\n","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(service: JDService, factory: (service: JDService) => T, deps: React.DependencyList = []) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client;\n}"],"sourceRoot":""}