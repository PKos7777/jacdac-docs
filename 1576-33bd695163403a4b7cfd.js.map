{"version":3,"file":"1576-33bd695163403a4b7cfd.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardPower.tsx"],"sourcesContent":["import React from \"react\"\nimport {\n    PowerPowerStatus,\n    PowerReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport ReflectedLightServer from \"../../../jacdac-ts/src/servers/reflectedlightserver\"\nimport PowerButton from \"../widgets/PowerButton\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useRegister from \"../hooks/useRegister\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { humanify } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\n\nexport default function DashboardPower(props: DashboardServiceProps) {\n    const { service } = props\n\n    const allowedRegister = useRegister(service, PowerReg.Allowed)\n    const powerStatusRegister = useRegister(service, PowerReg.PowerStatus)\n    const batteryChargeRegister = useRegister(service, PowerReg.BatteryCharge)\n\n    const allowed = useRegisterBoolValue(allowedRegister, props)\n    const [powerStatus] = useRegisterUnpackedValue<[PowerPowerStatus]>(\n        powerStatusRegister,\n        props\n    )\n    const [batteryCharge] = useRegisterUnpackedValue<[number]>(\n        batteryChargeRegister,\n        props\n    )\n\n    const server = useServiceServer<ReflectedLightServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, active, textProps } = useWidgetTheme(color)\n\n    if (powerStatus === undefined) return <LoadingProgress />\n\n    const w = 64\n    const h = w + 16\n    const r = (w - 4) >> 1\n    const ro = r - 4\n    const ri = ro - 8\n    const off = powerStatus === PowerPowerStatus.Disallowed\n    const label = off\n        ? \"off\"\n        : humanify(PowerPowerStatus[powerStatus]?.toLowerCase())\n\n    const mw = 2\n    const bw = 12\n    const hw = 4\n    const rw = mw / 2\n\n    const toggleEnabled = () => allowedRegister.sendSetBoolAsync(!allowed, true)\n    const widgetSize = `clamp(3rem, 10vw, 10vh)`\n\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <g>\n                <PowerButton\n                    cx={w / 2}\n                    cy={w / 2}\n                    r={ro}\n                    ri={ri}\n                    off={off}\n                    color={color}\n                    label={label}\n                    borderStroke={\n                        (powerStatus === PowerPowerStatus.Overload ||\n                            powerStatus === PowerPowerStatus.Overprovision) &&\n                        \"red\"\n                    }\n                    onClick={toggleEnabled}\n                />\n                {batteryCharge !== undefined && (\n                    <g>\n                        <title>{`battery charge ${Math.floor(\n                            batteryCharge * 100\n                        )}%`}</title>\n                        <rect\n                            x={w - bw - mw}\n                            y={mw}\n                            width={bw * batteryCharge}\n                            height={hw}\n                            rx={rw}\n                            ry={rw}\n                            fill={active}\n                        />\n                        <rect\n                            x={w - bw - mw}\n                            y={mw}\n                            width={bw}\n                            height={hw}\n                            rx={rw}\n                            ry={rw}\n                            fill={\"none\"}\n                            stroke={background}\n                            strokeWidth={1}\n                        />\n                        <text\n                            x={w - 2 * mw}\n                            y={mw + hw / 2}\n                            {...textProps}\n                            textAnchor=\"end\"\n                            fontSize={hw * 0.6}\n                        >\n                            {Math.floor(batteryCharge * 100)}%\n                        </text>\n                    </g>\n                )}\n            </g>\n        </SvgWidget>\n    )\n}\n"],"names":["React","PowerPowerStatus","PowerReg","useRegisterBoolValue","useRegisterUnpackedValue","SvgWidget","useServiceServer","PowerButton","useWidgetTheme","useRegister","LoadingProgress","humanify","DashboardPower","props","service","allowedRegister","Allowed","powerStatusRegister","PowerStatus","batteryChargeRegister","BatteryCharge","allowed","powerStatus","batteryCharge","server","color","background","active","textProps","undefined","w","h","r","ro","ri","off","Disallowed","label","toLowerCase","mw","bw","hw","rw","toggleEnabled","sendSetBoolAsync","widgetSize","Overload","Overprovision","Math","floor"],"sourceRoot":""}