{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardAccelerometer.tsx"],"names":["CanvasWidget","lazy","valueDisplay","v","roundWithPrecision","Sliders","props","host","register","forces","useRegisterUnpackedValue","handleChangeX","useCallback","event","newValue","reading","values","y","n","nz","Math","sqrt","setValues","sendGetAsync","handleChangeY","x","length","min","max","step","marks","value","lerp","v0","v1","t","DashboardAccelerometer","service","AccelerometerReg","Forces","useServiceHost","color","useWidgetTheme","active","rotator","delta","rotation","unpackedValue","undefined","z","roll","atan2","pitch","atan","height","width"],"mappings":"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","file":"63-5b24522530c17962dc3b.js","sourcesContent":["import React, { lazy, Suspense, useCallback } from \"react\";\nimport { AccelerometerReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport SensorServiceHost from \"../../../jacdac-ts/src/hosts/sensorservicehost\";\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\";\nimport { Grid, Slider, Mark, CircularProgress, NoSsr } from \"@material-ui/core\";\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\";\nimport { Vector } from \"../widgets/threeutils\";\n\nconst CanvasWidget = lazy(() => import(\"../widgets/CanvasWidget\"));\n\nconst valueDisplay = (v: number) => roundWithPrecision(v, 1)\nfunction Sliders(props: { host: SensorServiceHost<[number, number, number]>, register: JDRegister }) {\n    const { host, register } = props;\n    const forces = useRegisterUnpackedValue<[number, number, number]>(register);\n    const handleChangeX = useCallback((event: unknown, newValue: number | number[]) => {\n        const [, y] = host.reading.values();\n        const n = newValue as any as number;\n        const nz = -Math.sqrt(1 - (n * n + y * y));\n        host.reading.setValues([n, y, nz]);\n        register.sendGetAsync()\n    }, [host, register])\n    const handleChangeY = useCallback((event: unknown, newValue: number | number[]) => {\n        const [x,] = host.reading.values();\n        const n = newValue as any as number;\n        const nz = -Math.sqrt(1 - (x * x + n * n));\n        host.reading.setValues([x, n, nz]);\n        register.sendGetAsync()\n    }, [host, register])\n\n    if (!forces?.length)\n        return null;\n    const [x, y] = forces;\n    const min = -2\n    const max = 2\n    const step = 0.1\n    const marks: Mark[] = [\n        {\n            value: 0,\n        },\n        {\n            value: -1,\n        },\n        {\n            value: 1,\n        }\n    ]\n    return <>\n        <Grid item>\n            <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={valueDisplay}\n                aria-label=\"x\" orientation=\"vertical\" min={min} max={max} step={step}\n                value={x}\n                onChange={handleChangeX}\n                marks={marks}\n            />\n        </Grid>\n        <Grid item>\n            <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={valueDisplay}\n                aria-label=\"y\" orientation=\"vertical\" min={min} max={max} step={step}\n                value={y}\n                onChange={handleChangeY}\n                marks={marks}\n            />\n        </Grid>\n    </>\n}\n\nfunction lerp(v0: number, v1: number, t: number) {\n    return v0 * (1 - t) + v1 * t\n}\n\nexport default function DashboardAccelerometer(props: DashboardServiceProps) {\n    const { service } = props;\n    const register = service.register(AccelerometerReg.Forces);\n    const host = useServiceHost<SensorServiceHost<[number, number, number]>>(service);\n    const color = host ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback((delta: number, rotation: Vector) => {\n        const forces = register.unpackedValue;\n        if (!forces) return undefined;\n        const [x, y, z] = forces;\n        const roll = Math.atan2(-y, z);\n        const pitch = Math.atan(x / (y * y + z * z));\n\n        return {\n            x: lerp(rotation.x, roll, 0.1),\n            y: 0,\n            z: lerp(rotation.z, pitch, 0.1)\n        }\n    }, [register])\n\n    return <Grid container direction=\"row\">\n        <Grid item style={({ height: \"20vh\", width: \"20vw\" })}>\n            <NoSsr><Suspense fallback={<CircularProgress disableShrink variant=\"indeterminate\" size=\"1rem\" />}>\n                <CanvasWidget showAxes={true} color={active} rotator={rotator} />\n            </Suspense></NoSsr>\n        </Grid>\n        {host && <Sliders host={host} register={register} />}\n    </Grid>\n}"],"sourceRoot":""}