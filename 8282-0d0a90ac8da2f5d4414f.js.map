{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"names":["DashboardLED","props","service","useContext","AppContext","setError","server","useServiceServer","color","useRegisterUnpackedValue","register","LedReg","waveLength","busColor","serverColor","useChange","_","values","r","g","b","rgb","ledCount","undefined","handleSetColor","col","sendCmdAsync","LedCmd","jdpack","delay","sendGetAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASA,YAAT,CAAsBC,KAAtB,EAAoD;AAAA,MACvDC,OADuD,GAC3CD,KAD2C,CACvDC,OADuD;;AAAA,oBAE1CC,iDAAU,CAACC,0DAAD,CAFgC;AAAA,MAEvDC,QAFuD,eAEvDA,QAFuD;;AAG/D,MAAMC,MAAM,GAAGC,yEAAgB,CAAYL,OAAZ,CAA/B;AACA,MAAMM,KAAK,GAAGF,MAAM,GAAG,WAAH,GAAiB,SAArC;;AAJ+D,8BAK1CG,4FAAwB,CACzCP,OAAO,CAACQ,QAAR,CAAiBC,kGAAjB,CADyC,EAEzCV,KAFyC,CALkB;AAAA,MAKxDW,UALwD;;AAS/D,MAAMC,QAAQ,GAAGJ,4FAAwB,CACrCP,OAAO,CAACQ,QAAR,CAAiBC,wFAAjB,CADqC,EAErCV,KAFqC,CAAzC;AAIA,MAAMa,WAAW,GAAGC,mEAAS,CAACT,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,KAAT,EAAgB,UAAAQ,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,MAAH,EAAJ;AAAA,GAAjB,CAA7B;;AAb+D,aAc7CH,WAAW,IAAID,QAd8B;AAAA,MAcxDK,CAdwD;AAAA,MAcrDC,CAdqD;AAAA,MAclDC,CAdkD;;AAe/D,MAAMC,GAAG,GAAIH,CAAC,IAAI,EAAN,GAAaC,CAAC,IAAI,CAAlB,GAAuBC,CAAnC;;AAf+D,+BAgB5CX,4FAAwB,CACvCP,OAAO,CAACQ,QAAR,CAAiBC,8FAAjB,CADuC,EAEvCV,KAFuC,CAhBoB;AAAA,MAgBxDqB,QAhBwD,8BAqB/D;;;AACA,MAAIJ,CAAC,KAAKK,SAAV,EAAqB,oBAAO,iDAAC,iEAAD,OAAP,CAtB0C,CAwB/D;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,4MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE1BvB,OAAO,CAACwB,YAAR,CACFC,4FADE,EAEFC,0EAAM,CAAmC,aAAnC,EAAkD,CACnDH,GAAG,IAAI,EAAR,GAAc,IADsC,EAEnDA,GAAG,IAAI,CAAR,GAAa,IAFuC,EAGpDA,GAAG,GAAG,IAH8C,EAIpD,EAJoD,CAAlD,CAFJ,CAF0B;;AAAA;AAAA;AAAA,qBAW1BI,0EAAK,CAAC,GAAD,CAXqB;;AAAA;AAAA;AAAA,qBAY1B3B,OAAO,CAACQ,QAAR,CAAiBC,wFAAjB,EAA+BmB,YAA/B,EAZ0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAchCzB,sBAAQ,aAAR;;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;AAAA,GAAvB;;AAkBA,sBACI,iDAAC,wDAAD;AACI,SAAK,EAAEG,KADX;AAEI,SAAK,EAAEa,GAFX;AAGI,cAAU,EAAET,UAHhB;AAII,YAAQ,EAAEU,QAJd;AAKI,YAAQ,EAAEE;AALd,IADJ;AASH,C","file":"8282-0d0a90ac8da2f5d4414f.js","sourcesContent":["import React, { useContext } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport LEDServer from \"../../../jacdac-ts/src/servers/ledserver\"\nimport { LedCmd, LedReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport AppContext from \"../AppContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport LEDWidget from \"../widgets/LEDWidget\"\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service } = props\n    const { setError } = useContext(AppContext)\n    const server = useServiceServer<LEDServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const [waveLength] = useRegisterUnpackedValue<[number]>(\n        service.register(LedReg.WaveLength),\n        props\n    )\n    const busColor = useRegisterUnpackedValue<[number, number, number]>(\n        service.register(LedReg.Color),\n        props\n    )\n    const serverColor = useChange(server?.color, _ => _?.values())\n    const [r, g, b] = serverColor || busColor\n    const rgb = (r << 16) | (g << 8) | b\n    const [ledCount] = useRegisterUnpackedValue<[number]>(\n        service.register(LedReg.LedCount),\n        props\n    )\n\n    // nothing to see\n    if (r === undefined) return <LoadingProgress />\n\n    // send animate command\n    const handleSetColor = (col: number) => async () => {\n        try {\n            await service.sendCmdAsync(\n                LedCmd.Animate,\n                jdpack<[number, number, number, number]>(\"u8 u8 u8 u8\", [\n                    (col >> 16) & 0xff,\n                    (col >> 8) & 0xff,\n                    col & 0xff,\n                    32,\n                ])\n            )\n            await delay(500)\n            await service.register(LedReg.Color).sendGetAsync()\n        } catch (e) {\n            setError(e)\n        }\n    }\n\n    return (\n        <LEDWidget\n            color={color}\n            value={rgb}\n            waveLength={waveLength}\n            ledCount={ledCount}\n            onChange={handleSetColor}\n        />\n    )\n}\n"],"sourceRoot":""}