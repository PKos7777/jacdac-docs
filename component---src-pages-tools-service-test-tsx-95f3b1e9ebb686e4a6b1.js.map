{"version":3,"sources":["webpack:///./src/components/alert/ConnectAlert.tsx","webpack:///./src/pages/tools/service-test.tsx"],"names":["useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","props","classes","useContext","JacdacContext","bus","connectionState","serviceClass","devices","useChange","b","spec","serviceSpecificationFromClassIdentifier","webusb","isWebUSBEnabled","isWebUSBSupported","length","BusState","Disconnected","name","ConnectAlert","DeviceItem","device","serviceUnderTest","onServiceUnderTestSelected","services","d","specification","gridBreakpoints","useGridBreakpoints","handleServiceSelected","service","map","id","undefined","Page","useDevices","announced","useState","setServiceUnderTest"],"mappings":"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","file":"component---src-pages-tools-service-test-tsx-95f3b1e9ebb686e4a6b1.js","sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\";\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\";\nimport React, { useContext } from \"react\";\nimport { BusState } from \"../../../jacdac-ts/src/jdom/bus\";\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport ConnectButton from \"../../jacdac/ConnectButton\";\nimport { isWebUSBEnabled, isWebUSBSupported } from \"../../../jacdac-ts/src/jdom/usb\"\nimport { NoSsr } from '@material-ui/core';\nimport useChange from \"../../jacdac/useChange\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n    button: {\n        marginLeft: theme.spacing(2)\n    }\n}))\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { bus, connectionState } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass } = props\n    const devices = useChange(bus, b => b.devices({ serviceClass }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const webusb = isWebUSBEnabled() && isWebUSBSupported()\n\n    if (!devices?.length &&\n        webusb &&\n        connectionState === BusState.Disconnected)\n        return <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <ConnectButton className={classes.button} full={true} transparent={true} />\n            </Alert>\n        </Box>\n    return null\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return <NoSsr>\n        <NoSsrConnectAlert {...props} />\n    </NoSsr>\n}","import React, { useState } from \"react\"\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    Grid,\n    Typography,\n} from \"@material-ui/core\"\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport useChange from \"../../jacdac/useChange\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport ServiceTestRunner from \"../../components/test/ServiceTestRunner\"\n\nfunction DeviceItem(props: {\n    device: JDDevice\n    serviceUnderTest: JDService\n    onServiceUnderTestSelected: (service: JDService) => void\n}) {\n    const { device, serviceUnderTest, onServiceUnderTestSelected } = props\n    const services = useChange(device, d => d.services({ specification: true }))\n    const gridBreakpoints = useGridBreakpoints()\n    const handleServiceSelected = (service: JDService) => () =>\n        onServiceUnderTestSelected(service)\n    return (\n        <Grid item {...gridBreakpoints}>\n            <Card>\n                <DeviceCardHeader device={device} showAvatar={true} />\n                <CardContent>\n                    <Typography variant=\"caption\">\n                        Select a service to test.\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Grid container spacing={1}>\n                        {services?.map(service => (\n                            <Grid item key={service.id}>\n                                <Button\n                                    variant={\n                                        serviceUnderTest === service\n                                            ? \"contained\"\n                                            : \"outlined\"\n                                    }\n                                    color={\n                                        serviceUnderTest === service\n                                            ? \"primary\"\n                                            : undefined\n                                    }\n                                    onClick={handleServiceSelected(service)}\n                                >\n                                    {service.name}\n                                </Button>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </CardActions>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({ announced: true })\n    const [serviceUnderTest, setServiceUnderTest] = useState<JDService>(\n        undefined\n    )\n    return (\n        <>\n            <h1>Service Tests</h1>\n            <p>Connect devices to test its services.</p>\n            <ConnectAlert />\n            <Grid container spacing={2}>\n                {devices?.map(device => (\n                    <DeviceItem\n                        key={device.id}\n                        device={device}\n                        serviceUnderTest={serviceUnderTest}\n                        onServiceUnderTestSelected={setServiceUnderTest}\n                    />\n                ))}\n            </Grid>\n            {serviceUnderTest && <Grid item xs={12}>\n                <ServiceTestRunner service={serviceUnderTest} />\n            </Grid>}\n        </>\n    )\n}\n"],"sourceRoot":""}