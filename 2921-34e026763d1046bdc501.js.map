{"version":3,"file":"2921-34e026763d1046bdc501.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/hooks/useMicrophoneVolume.ts","webpack://jacdac-docs/./src/components/widgets/TrendWidget.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardSoundLevel.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\";\n\nexport default function useMicrophoneVolume(enabled: boolean, options?: AudioAnalyzerOptions) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } = useMicrophoneAnalyzer(options);\n    const frequencies = useRef(new Uint8Array(0));\n\n    useEffect(() => {\n        if (!enabled) closeMicrophone();\n    }, [enabled]);\n\n    return {\n        onClickActivateMicrophone,\n        volume: () => {\n            const a = analyser();\n            if (!a) return 0;\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount);\n            a.getByteFrequencyData(frequencies.current);\n            let max = 0;\n            const bins = frequencies.current;\n            const n = bins.length;\n            for (let i = 0; i < n; ++i)\n                max = Math.max(max, bins[i]);\n            return max / 0xff;\n        }\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\";\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\";\nimport useAnimationFrame from \"../hooks/useAnimationFrame\";\nimport useServiceServer from \"../hooks/useServiceServer\";\nimport SvgWidget from \"./SvgWidget\";\nimport useWidgetTheme from \"./useWidgetTheme\";\n\nexport default function TrendWidget(props: { register: JDRegister, min: number, max: number, horizon: number, size?: string }) {\n    const { register, min, max, horizon, size } = props;\n    const server = useServiceServer(register.service);\n    const color = server ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const dataRef = useRef<number[]>(undefined);\n    const pathRef = useRef<SVGPathElement>();\n\n    const dx = 4;\n    const m = 2;\n    const w = horizon * dx + 2 * m;\n    const h = w / 1.612;\n    const dy = (h - 2 * m) / (max - min);\n\n    useEffect(() => {\n        dataRef.current = register ? [] : undefined; // reset data\n        return register?.subscribe(CHANGE, () => {\n            // register new value\n            const [v] = register.unpackedValue as [number];\n            const data = dataRef.current;\n            data.unshift(v);\n            while (data.length > horizon)\n                data.pop();\n\n        })\n    }, [register, horizon, min, max])\n\n    useAnimationFrame(() => {\n        // update dom\n        const data = dataRef.current;\n        if (!data)\n            return false; // nothing to render\n\n        if (pathRef.current) {\n            let d = `M ${w} ${h} `\n            let x = w - m;\n            for (let i = 0; i < data.length; ++i) {\n                const v = data[i];\n                const y = h - m - (v - min) * dy;\n                d += `L ${x} ${y}`\n                x -= dx;\n            }\n            d += ` V ${h} z`\n            pathRef.current.setAttribute(\"d\", d);\n        }\n        return true;\n    }, [dataRef.current])\n\n    return <SvgWidget width={w} height={h} size={size} background={background}>\n        <path fill={active} stroke={controlBackground} strokeWidth={m / 2} ref={pathRef} />\n    </SvgWidget>\n}\n","import React, { useEffect } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid } from \"@material-ui/core\"\nimport MicIcon from \"@material-ui/icons/Mic\"\nimport { REFRESH, SoundLevelReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport AnalogSensorServer from \"../../../jacdac-ts/src/servers/analogsensorserver\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useMicrophoneVolume from \"../hooks/useMicrophoneVolume\"\nimport TrendWidget from \"../widgets/TrendWidget\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\n\nfunction HostMicrophoneButton(props: {\n    service: JDService\n    server?: AnalogSensorServer\n    visible: boolean\n}) {\n    const { server, service, visible } = props\n\n    const enabledRegister = useRegister(service, SoundLevelReg.Enabled)\n    const minDecibelsRegister = useRegister(service, SoundLevelReg.MinDecibels)\n    const maxDecibelsRegister = useRegister(service, SoundLevelReg.MaxDecibels)\n\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(\n        minDecibelsRegister,\n        props\n    )\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(\n        maxDecibelsRegister,\n        props\n    )\n    const { volume, onClickActivateMicrophone } = useMicrophoneVolume(\n        enabled && !!server,\n        { fftSize: 64, smoothingTimeConstant: 0, minDecibels, maxDecibels }\n    )\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled && server) await onClickActivateMicrophone()\n        await enabledRegister.sendSetBoolAsync(!enabled, true)\n    }\n\n    // update volume on demand\n    useEffect(\n        () =>\n            visible &&\n            server?.subscribe(REFRESH, () => {\n                const v = volume?.()\n                if (v !== undefined) {\n                    server.reading.setValues([v])\n                }\n            }),\n        [server, volume, visible]\n    )\n\n    return (\n        <IconButtonWithProgress\n            title={title}\n            indeterminate={enabled}\n            onClick={handleClick}\n        >\n            <MicIcon />\n        </IconButtonWithProgress>\n    )\n}\n\nexport default function DashboardSoundLevel(props: DashboardServiceProps) {\n    const { visible, service } = props\n    const soundLevelRegister = useRegister(service, SoundLevelReg.SoundLevel)\n    const [soundLevel] = useRegisterUnpackedValue<[number]>(\n        soundLevelRegister,\n        props\n    )\n    const server = useServiceServer<AnalogSensorServer>(service)\n\n    if (soundLevel === undefined) return <LoadingProgress />\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <TrendWidget\n                    register={soundLevelRegister}\n                    min={0}\n                    max={1}\n                    horizon={64}\n                />\n            </Grid>\n            <Grid item>\n                <HostMicrophoneButton\n                    service={service}\n                    server={server}\n                    visible={visible}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["useEffect","useRef","useMicrophoneAnalyzer","useMicrophoneVolume","enabled","options","analyser","onClickActivateMicrophone","closeMicrophone","frequencies","Uint8Array","volume","a","current","length","frequencyBinCount","getByteFrequencyData","max","bins","n","i","Math","React","CHANGE","useAnimationFrame","useServiceServer","SvgWidget","useWidgetTheme","TrendWidget","props","register","min","horizon","size","server","service","color","background","controlBackground","active","dataRef","undefined","pathRef","dx","m","w","h","dy","subscribe","v","unpackedValue","data","unshift","pop","d","x","y","setAttribute","useRegisterBoolValue","useRegisterUnpackedValue","Grid","MicIcon","REFRESH","SoundLevelReg","IconButtonWithProgress","LoadingProgress","useRegister","HostMicrophoneButton","visible","enabledRegister","Enabled","minDecibelsRegister","MinDecibels","maxDecibelsRegister","MaxDecibels","minDecibels","maxDecibels","fftSize","smoothingTimeConstant","title","handleClick","sendSetBoolAsync","reading","setValues","DashboardSoundLevel","soundLevelRegister","SoundLevel","soundLevel"],"sourceRoot":""}