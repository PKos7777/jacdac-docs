{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardTrafficLight.tsx","webpack:///./src/components/hooks/useArrowKeys.ts","webpack:///./src/components/hooks/useKeyboardNavigation.ts","webpack:///./src/components/hooks/useKeyboardNavigationProps.ts"],"names":["m","r","ri","w","h","cx","sw","TrafficLight","props","cy","fill","background","label","onDown","buttonProps","useSvgButtonProps","DashboardTrafficLight","service","services","variant","widgetRef","useRef","useRegisterUnpackedValue","register","TrafficLightReg","Red","red","Orange","orange","Green","green","lightRegs","lights","host","useServiceHost","color","useWidgetTheme","controlBackground","widgetSize","useWidgetSize","length","names","colors","navProps","useKeyboardNavigationProps","current","map","v","i","reg","sendSetBoolAsync","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","symmetric","undefined","handlers","e","charCode","keyCodeFromEvent","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","findIndex","f","document","activeElement","next","focus","vertical","onKeyDown"],"mappings":"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","file":"106-f056052c13b19ea09c07.js","sourcesContent":["\nimport React, { useRef } from \"react\";\nimport { TrafficLightReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\";\nimport TrafficLightServiceHost from \"../../../jacdac-ts/src/hosts/trafficlightservicehost\";\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\";\n\nconst m = 2;\nconst r = 8;\nconst ri = 7;\nconst w = 2 * r + 2 * m;\nconst h = 4 * w + 2 * m;\nconst cx = w / 2;\nconst sw = 2;\n\nfunction TrafficLight(props: { cx: number, cy: number, label: string, background: string, fill: string, onDown?: () => void }) {\n    const { cx, cy, fill, background, label, onDown } = props;\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(label, onDown);\n\n    return <>\n        <circle cx={cx} cy={cy} r={r} fill={background} stroke={\"none\"} />\n        <circle cx={cx} cy={cy} r={ri} fill={fill} strokeWidth={sw} {...buttonProps} />\n    </>;\n}\n\nexport default function DashboardTrafficLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const widgetRef = useRef<SVGGElement>();\n    const [red] = useRegisterUnpackedValue<[boolean]>(service.register(TrafficLightReg.Red))\n    const [orange] = useRegisterUnpackedValue<[boolean]>(service.register(TrafficLightReg.Orange))\n    const [green] = useRegisterUnpackedValue<[boolean]>(service.register(TrafficLightReg.Green))\n\n    const lightRegs = [TrafficLightReg.Red, TrafficLightReg.Orange, TrafficLightReg.Green]\n    const lights = [red, orange, green]\n\n    const host = useServiceHost<TrafficLightServiceHost>(service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    let cy = 0;\n    const names = [\n        \"red\",\n        \"yellow\",\n        \"green\"\n    ]\n    const colors = [\n        \"red\",\n        \"orange\",\n        \"green\"\n    ]\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return <SvgWidget width={w} height={h} size={widgetSize}>\n        <g ref={widgetRef} {...navProps}>\n            <rect x={0} y={0} width={w} height={h} rx={m} fill={background} />\n            {lights.map((v, i) => {\n                cy += m + 2 * r;\n                const fill = v ? colors[i] : controlBackground;\n                const onDown = async () => {\n                    const reg = service.register(lightRegs[i]);\n                    await reg.sendSetBoolAsync(!v, true)\n                }\n                return <TrafficLight\n                    key={i} cx={cx} cy={cy}\n                    background={background}\n                    fill={fill}\n                    onDown={onDown}\n                    label={`${names[i]} ${v ? \"on\" : \"off\"}`} />\n            })}\n        </g>\n    </SvgWidget>;\n}","import React, { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\";\n\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void,\n    onRight?: () => void,\n    onUp?: () => void,\n    onDown?: () => void,\n    symmetric?: boolean;\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options;\n\n    if (!onLeft && !onUp && !onRight && !onDown)\n        return undefined;\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft)\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e);\n        const handler = handlers[charCode];\n        if (handler) {\n            e.preventDefault();\n            handler();\n        }\n    }\n}\n","import React from \"react\"\n\nexport default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]';\n    const onMove = (offset: number) => () => {\n        console.log('keyboard move', { offset })\n        const focusable = Array.from<SVGElement>(parentRef?.querySelectorAll(query) || []);\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement);\n            const next = ((me + offset) + focusable.length) % focusable.length;\n            focusable[next].focus();\n        }\n    }\n    return onMove;\n}","import useArrowKeys from \"./useArrowKeys\";\nimport useKeyboardNavigation from \"./useKeyboardNavigation\";\n\nexport default function useKeyboardNavigationProps(parentRef: Element, vertical?: boolean) {\n    const onMove = useKeyboardNavigation(parentRef);\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    });\n\n    return {\n        onKeyDown: parentRef && onKeyDown\n    }\n}"],"sourceRoot":""}