{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","webpack:///./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack:///./jacdac-ts/src/test/testrunner.ts","webpack:///./src/components/test/ServiceTestRunner.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack:///./src/components/useGridBreakpoints.ts","webpack:///./node_modules/@material-ui/icons/PlayCircleFilled.js","webpack:///./jacdac-ts/jacdac-spec/spectool/jdtestfuns.ts","webpack:///./node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","webpack:///./jacdac-ts/src/test/testspec.ts","webpack:///./node_modules/@material-ui/icons/HourglassEmpty.js","webpack:///./src/components/useServiceClient.ts"],"names":["JDTestCommandStatus","JDTestStatus","commandStatusToTestStatus","status","Active","Passed","Failed","NotReady","RequiresUserInput","cmdToTestFunction","cmd","id","call","callee","name","testCommandFunctions","find","t","unparse","e","type","ae","elements","map","join","caller","arguments","be","left","operator","right","ue","argument","raw","JDExprEvaluator","env","start","exprStack","tos","length","eval","visitExpression","pop","push","r","v","le","lit","value","JDCommandEvaluator","testRunner","command","_prompt","_progress","_status","_startExpressions","_rangeComplete","undefined","_eventsComplete","_eventsQueue","testFun","args","startExprs","getExpressionsOfType","filter","ce","eventList","serviceTestRunner","environment","forEach","child","findIndex","exprEval","createPrompt","replaceId","a","i","replaceVal","aStart","toString","prompt","slice","p","replace","setEvent","ev","evaluate","expr","reg","regSaved","regValue","amt","amtSaved","beginSaved","end","endSaved","shift","jdreg","registers","sendSetIntAsync","JDTestCommandRunner","_output","message","progress","_timeOut","_timeLeft","_commmandEvaluator","reset","output","envChange","finish","newOutput","eventChange","event","cancel","s","finishCommand","emit","CHANGE","JDEventSource","JDTestRunner","testSpec","commands","testCommands","c","_commandIndex","commandIndex","refreshEnvironment","next","newStatus","currentCommand","description","index","refresh_env","k","register","refresh","unpackedValue","intValue","JDServiceTestRunner","service","_testIndex","_registers","_environment","events","tests","serviceSpec","serviceSpecificationFromClassIdentifier","serviceClass","eventName","pkt","packets","isEvent","identifier","mount","subscribe","EVENT","currentTest","regName","isRegister","stats","total","success","failed","indeterminate","test","testIndex","ct","indexOf","JDServiceClient","TestStatusIcon","props","useChange","TestListItem","onSelectTest","selected","handleSelectTest","TestList","CommandStatusIcon","CommandListItem","handleAnswer","ActiveTest","handleRestart","handleNext","useEffect","ServiceTestRunner","serviceTest","serviceTestFromServiceClass","factory","useCallback","useServiceClient","specification","device","useGridBreakpoints","itemCount","useContext","AppContext","drawerType","xs","sm","md","lg","xl","DrawerType","None","testExpressionFunctions","_serviceTests","serviceTestData","serviceClassIdentifier","deps","useState","client","setClient","unmount"],"mappings":"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","file":"859a83de993caea7524bf57c2975f3be6812c8c3-fc931eb741076d326351.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import {\n    Commands,\n    testCommandFunctions,\n} from \"../../jacdac-spec/spectool/jdtestfuns\"\nimport { getExpressionsOfType } from \"../../jacdac-spec/spectool/jdutils\"\n\nimport { CHANGE, EVENT } from \"../jdom/constants\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { JDService } from \"../jdom/service\"\nimport { JDRegister } from \"../jdom/register\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { isEvent, isRegister, serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\n\nexport enum JDTestCommandStatus {\n    NotReady,\n    Active,\n    RequiresUserInput,\n    Passed,\n    Failed,\n}\n\nexport enum JDTestStatus {\n    NotReady,\n    Active,\n    Passed,\n    Failed,\n}\n\nfunction commandStatusToTestStatus(status: JDTestCommandStatus) {\n    switch (status) {\n        case JDTestCommandStatus.Active:\n            return JDTestStatus.Active\n        case JDTestCommandStatus.Passed:\n            return JDTestStatus.Passed\n        case JDTestCommandStatus.Failed:\n            return JDTestStatus.Failed\n        case JDTestCommandStatus.NotReady:\n            return JDTestStatus.NotReady\n        case JDTestCommandStatus.RequiresUserInput:\n            return JDTestStatus.Active\n    }\n}\n\nfunction cmdToTestFunction(cmd: jdtest.TestCommandSpec) {\n    const id = (<jsep.Identifier>cmd.call.callee).name\n    return testCommandFunctions.find(t => t.id == id)\n}\n\nfunction unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements\n                .map(unparse)\n                .join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\ntype SMap<T> = { [v: string]: T }\ntype StartMap = { e: jsep.Expression; v: any }[]\n\nclass JDExprEvaluator {\n    private exprStack: any[] = []\n\n    constructor(private env: SMap<any>, private start: StartMap) {}\n\n    private tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public eval(e: jsep.Expression) {\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    private visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                const caller = <jsep.CallExpression>e\n                const callee = <jsep.Identifier>caller.callee\n                switch (callee.name) {\n                    case \"start\":\n                        this.exprStack.push(\n                            this.start.find(r => r.e === caller).v\n                        )\n                        return\n                    default: // ERROR\n                }\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\":\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        break\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        break\n                    default:\n                }\n                break\n            }\n\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                this.exprStack.push(this.env[id.name])\n                break\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                break\n            }\n            default:\n        }\n    }\n}\n\nclass JDCommandEvaluator {\n    private _prompt = \"\"\n    private _progress = \"\"\n    private _status = JDTestCommandStatus.Active\n    private _startExpressions: StartMap = []\n    private _rangeComplete: number = undefined\n    private _eventsComplete: string[] = undefined\n    private _eventsQueue: string[] = undefined\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n\n    }\n\n    public get prompt() {\n        return this._prompt\n    }\n    public get status() {\n        return this._status\n    }\n    public get progress() {\n        return this._progress\n    }\n\n    public start() {\n        this._startExpressions = []\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        let startExprs: jsep.Expression[] = []\n        switch (testFun.id as Commands) {\n            case \"check\": {\n                startExprs = (<jsep.CallExpression[]>getExpressionsOfType(args,'CallExpression'))\n                    .filter(ce => (<jsep.Identifier>ce.callee).name === \"start\")\n                    .map(ce => ce.arguments[0])\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                startExprs.push(args[0])\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": \n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                startExprs.push(args[0])\n                startExprs.push(args[1])\n                break\n            }\n            case \"assign\": {\n                startExprs.push(args[1])\n                break\n            }\n            case \"events\": {\n                const eventList = this.command.call.arguments[0] as jsep.ArrayExpression\n                this._eventsComplete = (eventList.elements as jsep.Identifier[]).map(id => id.name)\n                this._eventsQueue = []\n                break\n            }\n        }\n        // evaluate the start expressions and store the results\n        const env = this.testRunner.serviceTestRunner.environment;\n        startExprs.forEach(child => {\n            if (this._startExpressions.findIndex(r => r.e === child) < 0) {\n                const exprEval = new JDExprEvaluator(env, [])\n                this._startExpressions.push({\n                    e: child,\n                    v: exprEval.eval(child),\n                })\n            }\n        })\n        this.createPrompt()\n    }\n\n    private createPrompt() {\n        const testFun = cmdToTestFunction(this.command)\n        const replaceId = this.command.call.arguments.map((a, i) => {\n            return [`{${i + 1}}`, unparse(a) ]\n        })\n        const replaceVal = this.command.call.arguments.map((a, i) => {\n            const aStart = this._startExpressions.find(r => r.e === a)\n            return [`{${i + 1}:val}`, aStart && aStart.v ? aStart.v.toString() : \"NA\" ]\n        })\n        this._prompt =\n            testFun.id === \"ask\" || testFun.id === \"say\"\n                ? this.command.prompt.slice(0)\n                : testFun.prompt.slice(0)\n        replaceId.forEach(p => (this._prompt = this._prompt.replace(p[0], p[1])))\n        replaceVal.forEach(p => (this._prompt = this._prompt.replace(p[0], p[1])))\n    }\n\n    public setEvent(ev: string) {\n        this._eventsQueue.push(ev)\n    }\n\n    public evaluate() {\n        const env = this.testRunner.serviceTestRunner.environment;\n        const testFun = cmdToTestFunction(this.command)\n        this._status = JDTestCommandStatus.Active\n        this._progress = \"\"\n        switch (testFun.id as Commands) {\n            case \"ask\": {\n                this._status = JDTestCommandStatus.RequiresUserInput\n                break\n            }\n            case \"check\": {\n                const expr = new JDExprEvaluator(\n                    env,\n                    this._startExpressions\n                )\n                const ev = expr.eval(this.command.call.arguments[0])\n                this._status = ev\n                    ? JDTestCommandStatus.Passed\n                    : JDTestCommandStatus.Active\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                const reg = this.command.call.arguments[0]\n                const regSaved = this._startExpressions.find(r => r.e === reg)\n                const regValue = env[unparse(reg)]\n                const status =\n                    (testFun.id === \"changes\" && regValue !== regSaved.v) ||\n                    (testFun.id === \"increases\" && regValue > regSaved.v) ||\n                    (testFun.id === \"decreases\" && regValue < regSaved.v)\n                        ? JDTestCommandStatus.Passed\n                        : JDTestCommandStatus.Active\n                this._status = status\n                regSaved.v = regValue\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": {\n                const reg = this.command.call.arguments[0]\n                const regSaved = this._startExpressions.find(r => r.e === reg)\n                const amt = this.command.call.arguments[1]\n                const amtSaved = this._startExpressions.find(r => r.e === amt)\n                const regValue = env[unparse(reg)]\n                if (testFun.id === \"increasesBy\") {\n                    if (regValue >= regSaved.v + amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    } else if (\n                        regValue >= regSaved.v &&\n                        regValue < regSaved.v + amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${regValue}, goal: ${regSaved.v + amtSaved.v}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                } else {\n                    if (regValue <= regSaved.v - amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                        this._progress = \"completed\"\n                    } else if (\n                        regValue <= regSaved.v &&\n                        regValue > regSaved.v - amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${regValue} goal: ${regSaved.v - amtSaved.v}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                }\n                break\n            }\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                this._status = JDTestCommandStatus.Active\n                const reg = this.command.call.arguments[0]\n                const regValue = env[unparse(reg)]\n                const beginSaved = this._startExpressions.find(r => r.e === reg)\n                const end = this.command.call.arguments[1]\n                const endSaved = this._startExpressions.find(r => r.e === end)\n                if (this._rangeComplete === undefined) {\n                    this._rangeComplete = regValue\n                } else {\n                    if (regValue === this._rangeComplete + (testFun.id == 'stepsUpTo' ? 1 : -1))\n                        this._rangeComplete = regValue\n                    if (this._rangeComplete === endSaved.v) {\n                        this._status =  JDTestCommandStatus.Passed\n                    }\n                }\n                if (this._rangeComplete != undefined) {\n                    this._progress = \n                        testFun.id == 'stepsUpTo' \n                            ? `from ${(beginSaved.v)} up to ${this._rangeComplete}`\n                            : `from ${(beginSaved.v)} down to ${this._rangeComplete}`\n                }\n                break\n            }\n            case \"events\": {\n                if (this._eventsQueue?.length > 0 && this._eventsComplete?.length > 0) {\n                    const ev = this._eventsQueue.pop()\n                    if (ev === this._eventsComplete[0]) {\n                        this._eventsComplete.shift()\n                        if (this._eventsComplete.length === 0)\n                            this._status = JDTestCommandStatus.Passed\n                    } else {\n                        this._status = JDTestCommandStatus.Failed\n                    }\n                    this._progress = `got event ${ev}; remaining = [${this._eventsComplete}]`\n                } else {\n                    this._progress = `no events received; remaining = [${this._eventsComplete}]`\n                }\n                break\n            }\n            case \"assign\": {\n                const reg = this.command.call.arguments[0] as jsep.Identifier\n                const jdreg = this.testRunner.serviceTestRunner.registers[reg.name]\n                const expr = new JDExprEvaluator(\n                    env,\n                    this._startExpressions\n                )\n                const ev = expr.eval(this.command.call.arguments[1])\n                // TODO: generalize\n                jdreg.sendSetIntAsync(ev)\n                this._status = JDTestCommandStatus.Passed\n            }\n        }\n    }\n}\n\nexport interface JDCommandOutput {\n    message: string\n    progress: string\n}\n\nexport class JDTestCommandRunner extends JDEventSource {\n    private _status = JDTestCommandStatus.NotReady\n    private _output: JDCommandOutput = { message: \"\", progress: \"\" }\n    private readonly _timeOut = 5000 // timeout\n    private _timeLeft = 5000\n    private _commmandEvaluator: JDCommandEvaluator = null\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n        super()\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestCommandStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestCommandStatus.Failed &&\n            this.status !== JDTestCommandStatus.Passed\n        )\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: JDCommandOutput) {\n        if (\n            !this._output ||\n            this._output.message !== value.message ||\n            this._output.progress !== value.progress\n        ) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.output = { message: \"\", progress: \"\" }\n        this.status = JDTestCommandStatus.NotReady\n        this._commmandEvaluator = null\n    }\n\n    start() {\n        this.status = JDTestCommandStatus.Active\n        this._commmandEvaluator = new JDCommandEvaluator(this.testRunner, this.command)\n        this._commmandEvaluator.start()\n        this.envChange(false)\n        this.envChange(true)\n    }\n\n    envChange(finish = true) {\n        if (this._commmandEvaluator) {\n            this._commmandEvaluator.evaluate()\n            const newOutput: JDCommandOutput = {\n                message: this._commmandEvaluator.prompt,\n                progress: this._commmandEvaluator.progress,\n            }\n            this.output = newOutput\n            if (this._commmandEvaluator.status === JDTestCommandStatus.RequiresUserInput)\n                this.status= JDTestCommandStatus.RequiresUserInput\n            else if (finish) \n                this.finish(this._commmandEvaluator.status)\n        }\n    }\n\n    eventChange(event: string) {\n        this._commmandEvaluator.setEvent(event)\n        this.envChange()\n    }\n\n    cancel() {\n        this.finish(JDTestCommandStatus.Failed)\n    }\n\n    finish(s: JDTestCommandStatus) {\n        if (\n            (s === JDTestCommandStatus.Failed || s === JDTestCommandStatus.Passed) &&\n            (this.status === JDTestCommandStatus.Active ||\n                this.status === JDTestCommandStatus.RequiresUserInput)\n        ) {\n            this.status = s\n            this.testRunner.finishCommand()\n        }\n    }\n}\n\nexport class JDTestRunner extends JDEventSource {\n    private _status = JDTestStatus.NotReady\n    private _commandIndex: number\n    public readonly commands: JDTestCommandRunner[]\n\n    constructor(\n        public readonly serviceTestRunner: JDServiceTestRunner,\n        private readonly testSpec: jdtest.TestSpec\n    ) {\n        super()\n        this.commands = testSpec.testCommands.map(\n            c => new JDTestCommandRunner(this, c)\n        )\n    }\n\n    reset() {\n        if (this.status !== JDTestStatus.NotReady) {\n            this._status = JDTestStatus.NotReady\n            this._commandIndex = undefined\n            this.commands.forEach(t => t.reset())\n            this.emit(CHANGE)\n        }\n    }\n\n    start() {\n        this.reset()\n        this.status = JDTestStatus.Active\n        this.commandIndex = 0\n        this.serviceTestRunner.refreshEnvironment()\n    }\n\n    next() {\n        this.serviceTestRunner.next()\n    }\n\n    cancel() {\n        this.finish(JDTestStatus.Failed)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestStatus.Failed &&\n            this.status !== JDTestStatus.Passed\n        )\n    }\n\n    get description() {\n        return this.testSpec.description\n    }\n\n    get prompt() {\n        return this.testSpec.prompt\n    }\n\n    finish(newStatus: JDTestStatus) {\n        if (this.status === JDTestStatus.Active) {\n            this.status = newStatus\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n\n    private set commandIndex(index: number) {\n        if (this._commandIndex !== index) {\n            this._commandIndex = index\n            this.currentCommand?.start()\n            this.emit(CHANGE)\n        }\n    }\n\n    public envChange() {\n        this.currentCommand?.envChange()\n    }\n\n    public eventChange(event: string) {\n        this.currentCommand?.eventChange(event)\n    }\n\n    public finishCommand() {\n        if (this.commandIndex === this.commands.length - 1)\n            this.finish(commandStatusToTestStatus(this.currentCommand.status))\n        // (this.commandIndex < this.commands.length)\n        else this.commandIndex++\n    }\n\n    get currentCommand() {\n        return this.commands[this._commandIndex]\n    }\n}\n\nasync function refresh_env(registers: SMap<JDRegister>, environment: SMap<any>)\n{\n    for(const k in environment) {\n        const register = registers[k]\n        await register.refresh()\n        environment[k] = register.unpackedValue ? register.unpackedValue[0] : register.intValue\n    }\n}\n\nexport class JDServiceTestRunner extends JDServiceClient {\n    private _testIndex = -1\n    private _registers: SMap<JDRegister> = {}\n    private _environment: SMap<any> = {}\n    private events: SMap<JDEvent> = {}\n    public readonly tests: JDTestRunner[]\n\n    constructor(\n        public readonly testSpec: jdtest.ServiceTestSpec,\n        service: JDService\n    ) {\n        super(service)\n        this.tests = this.testSpec.tests.map(\n            t => new JDTestRunner(this, t)\n        )\n        const serviceSpec = serviceSpecificationFromClassIdentifier(\n            service.serviceClass\n        )\n        this.testSpec.tests.forEach(t => {\n            t.events.forEach(eventName => {\n                if (!this.events[eventName]) {\n                    const pkt = serviceSpec.packets.find(\n                        pkt => isEvent(pkt) && pkt.name === eventName\n                    )\n                    const event = service.event(pkt.identifier)\n                    this.events[eventName] = event\n                    this.mount(\n                        event.subscribe(EVENT, () => {\n                            this.currentTest?.eventChange(eventName)\n                        })\n                    )\n                }\n            })\n            t.registers.forEach(regName => {\n                if (!this._registers[regName]) {\n                    const pkt = serviceSpec.packets.find(\n                        pkt => isRegister(pkt) && pkt.name === regName\n                    )\n                    const register = service.register(pkt.identifier)\n                    this._registers[regName] = register\n                    this._environment[regName] = register.unpackedValue ? register.unpackedValue[0] : register.intValue\n                    this.mount(\n                        register.subscribe(CHANGE, () => {\n                            this._environment[regName] = register.unpackedValue ? register.unpackedValue[0] : register.intValue\n                            this.currentTest?.envChange()\n                        })\n                    )\n                }\n            })\n        })\n        this.start()\n    }\n\n    public refreshEnvironment() {\n        refresh_env(this.registers, this.environment)\n    }\n\n    public get environment() {\n        return this._environment\n    }\n\n    public get registers() {\n        return this._registers\n    }\n\n    private get testIndex() {\n        return this._testIndex\n    }\n\n    private set testIndex(index: number) {\n        if (this._testIndex !== index) {\n            // stop previous test if needed\n            const ct = this.currentTest\n            if (ct) {\n                if (ct.status === JDTestStatus.Active) {\n                    ct.cancel()\n                }\n            }\n\n            // update test\n            this._testIndex = index\n            this.emit(CHANGE)\n        }\n    }\n\n    public stats() {\n        const r = {\n            total: this.tests.length,\n            success: 0,\n            failed: 0,\n            indeterminate: 0,\n        }\n        for (const test of this.tests) {\n            switch (test.status) {\n                case JDTestStatus.Failed:\n                    r.failed++\n                    break\n                case JDTestStatus.Passed:\n                    r.success++\n                    break\n                default:\n                    r.indeterminate++\n            }\n        }\n        return r\n    }\n\n    public start() {\n        this.tests.forEach(t => t.reset())\n        this.testIndex = 0\n    }\n\n    public next() {\n        this.testIndex++\n    }\n\n    get currentTest() {\n        return this.tests[this._testIndex]\n    }\n\n    set currentTest(test: JDTestRunner) {\n        const index = this.tests.indexOf(test)\n        if (index > -1) this.testIndex = index\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport useServiceClient from \"../useServiceClient\"\nimport {\n    Grid,\n    Button,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Typography,\n    Card,\n    CardContent,\n    CardActions,\n    Box,\n    ListSubheader,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    JDServiceTestRunner,\n    JDTestRunner,\n    JDTestStatus,\n    JDTestCommandRunner,\n    JDTestCommandStatus,\n} from \"../../../jacdac-ts/src/test/testrunner\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\n\nfunction TestStatusIcon(props: { test: JDTestRunner }) {\n    const { test } = props\n    const status = useChange(test, t => t.status)\n\n    switch (status) {\n        case JDTestStatus.Active:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction TestListItem(props: {\n    test: JDTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { test, currentTest, onSelectTest } = props\n    const description = useChange(test, t => t.description)\n    const selected = test === currentTest\n    const handleSelectTest = () => onSelectTest(test)\n\n    return (\n        <ListItem selected={selected} button onClick={handleSelectTest}>\n            <ListItemIcon>\n                <TestStatusIcon test={test} />\n            </ListItemIcon>\n            <ListItemText primary={description} />\n        </ListItem>\n    )\n}\n\nfunction TestList(props: {\n    testRunner: JDServiceTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { testRunner, currentTest, onSelectTest } = props\n    const { tests } = testRunner\n    const stats = useChange(testRunner, r => r.stats())\n\n    return (\n        <Card>\n            <CardContent>\n                <List\n                    dense={true}\n                    subheader={\n                        <ListSubheader>\n                            {`${stats.total} tests, ${stats.success} success, ${stats.failed} failed`}\n                        </ListSubheader>\n                    }\n                >\n                    {tests?.map((test, i) => (\n                        <TestListItem\n                            key={i}\n                            test={test}\n                            currentTest={currentTest}\n                            onSelectTest={onSelectTest}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction CommandStatusIcon(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const status = useChange(command, c => c.status)\n\n    switch (status) {\n        case JDTestCommandStatus.Active:\n        case JDTestCommandStatus.RequiresUserInput:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestCommandStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestCommandStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction CommandListItem(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const { message, progress } = useChange(command, c => c.output)\n    const status = useChange(command, c => c.status)\n    const handleAnswer = (status: JDTestCommandStatus) => () =>\n        command.finish(status)\n    return (\n        <ListItem selected={status === JDTestCommandStatus.Active}>\n            <ListItemIcon>\n                <CommandStatusIcon command={command} />\n            </ListItemIcon>\n            <ListItemText\n                primary={message}\n                secondary={progress}\n            />\n            {status === JDTestCommandStatus.RequiresUserInput && (\n                <ListItemSecondaryAction>\n                    <Button\n                        variant=\"outlined\"\n                        onClick={handleAnswer(JDTestCommandStatus.Passed)}\n                    >\n                        Yes\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        onClick={handleAnswer(JDTestCommandStatus.Failed)}\n                    >\n                        No\n                    </Button>\n                </ListItemSecondaryAction>\n            )}\n        </ListItem>\n    )\n}\n\nfunction ActiveTest(props: { test: JDTestRunner }) {\n    const { test } = props\n    const { commands } = test\n    const status = useChange(test, t => t.status)\n    const handleRestart = () => test.start()\n    const handleNext = () => test.next()\n    // auto start\n    useEffect(() => test.start(), [test])\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h5\">DO</Typography>\n                <Box m={2}>\n                    <Typography variant=\"body1\">{test.prompt}</Typography>\n                </Box>\n                <Typography variant=\"h5\">TEST</Typography>\n                <List dense={false}>\n                    {commands.map((cmd, i) => (\n                        <CommandListItem key={i} command={cmd} />\n                    ))}\n                </List>\n                {status === JDTestStatus.Passed && (\n                    <Alert severity=\"success\">Test passed</Alert>\n                )}\n                {status === JDTestStatus.Failed && (\n                    <Alert severity=\"error\">Test failed</Alert>\n                )}\n            </CardContent>\n            <CardActions>\n                <Button\n                    variant={\n                        status === JDTestStatus.Active\n                            ? \"outlined\"\n                            : \"contained\"\n                    }\n                    color={\n                        status === JDTestStatus.Passed ? \"primary\" : undefined\n                    }\n                    onClick={handleNext}\n                >\n                    Next\n                </Button>\n                <Button variant=\"outlined\" onClick={handleRestart}>\n                    Restart\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceTestRunner(props: {\n    service: JDService\n    serviceTest?: jdtest.ServiceTestSpec\n}) {\n    const {\n        service,\n        serviceTest = serviceTestFromServiceClass(service.serviceClass),\n    } = props\n    const factory = useCallback(\n        service => serviceTest && new JDServiceTestRunner(serviceTest, service),\n        [service, serviceTest]\n    )\n    const testRunner = useServiceClient(service, factory)\n    const currentTest = useChange(testRunner, t => t?.currentTest)\n    const handleSelectTest = (test: JDTestRunner) => {\n        testRunner.currentTest = test\n    }\n\n    if (!serviceTest)\n        return (\n            <Alert severity=\"warning\">\n                Sorry, there are no tests available for service{\" \"}\n                {service.specification.name}.\n            </Alert>\n        )\n\n    if (!testRunner) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs>\n                <TestList\n                    testRunner={testRunner}\n                    currentTest={currentTest}\n                    onSelectTest={handleSelectTest}\n                />\n            </Grid>\n            {currentTest && (\n                <Grid item xs>\n                    <ActiveTest test={currentTest} />\n                </Grid>\n            )}\n            {service && (\n                <Grid item xs>\n                    <DashboardDevice\n                        showAvatar={true}\n                        showHeader={true}\n                        device={service.device}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"\n}), 'PlayCircleFilled');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdtest.d.ts\" />\n\nexport type Commands =\n    | \"changes\"\n    | \"ask\"\n    | \"check\"\n    | \"increases\"\n    | \"decreases\"\n    | \"increasesBy\"\n    | \"decreasesBy\"\n    | \"stepsUpTo\"\n    | \"stepsDownTo\"\n    | \"events\"\n    | \"assign\"\n\nexport const testCommandFunctions: jdtest.TestFunctionDescription[] = [\n    { id: \"changes\", args: [\"register\"], prompt: `did the value of {1} change?` },\n    { id: \"ask\", args: [], prompt: undefined },\n    { id: \"events\", args: [\"array\"], prompt: `was the event trace {1} observed?` },\n    { id: \"assign\", args: [\"register\", \"number\"], prompt: `write value {2:val} to {1}` },\n    { id: \"check\", args: [\"boolean\"], prompt: `does the condition {1} hold?` },\n    {\n        id: \"increases\",\n        args: [\"register\"],\n        prompt: `did the value of {1} increase?`,\n    },\n    {\n        id: \"decreases\",\n        args: [\"register\"],\n        prompt: `did the value of {1} decrease?`,\n    },\n    {\n        id: \"increasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `did the value of {1} (initially {1:val}) increase by {2:val}?`,\n    },\n    {\n        id: \"decreasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `did the value of {1} (initially {1:val}) decrease by {2:val}?`,\n    },\n    {\n        id: \"stepsUpTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step up (by ones) from {1:val} to {2:val}`,\n    },\n    {\n        id: \"stepsDownTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step down (by ones) from {1:val} to {2:val}`,\n    },\n]\n\nexport const testExpressionFunctions: jdtest.TestFunctionDescription[] = [\n    { id: \"start\", args: [\"any\"], prompt: undefined },\n]\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../jacdac-spec/spectool/jdspec.d.ts\" />\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../jacdac-spec/spectool/jdtest.d.ts\" />\n\nimport serviceTestData from \"../../jacdac-spec/dist/services-tests.json\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _serviceTests: jdtest.ServiceTestSpec[] = serviceTestData as any\n\n/**\n * Given a service specification, see if it has a test\n * @param spec\n */\nexport function serviceTestFromServiceClass(\n    serviceClass: number\n): jdtest.ServiceTestSpec {\n    return (\n        serviceClass !== undefined &&\n        _serviceTests.find(test => test.serviceClassIdentifier === serviceClass)\n    )\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n}), 'HourglassEmpty');\n\nexports.default = _default;","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(service: JDService, factory: (service: JDService) => T, deps: React.DependencyList = []) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client;\n}"],"sourceRoot":""}