{"version":3,"sources":["webpack:///./src/components/EnumSpecification.tsx","webpack:///./src/components/hooks/useDeviceHostFromServiceClass.ts","webpack:///./src/components/ServiceSpecification.tsx","webpack:///./src/components/tools/ServiceSpecificationEditor.tsx","webpack:///./src/pages/tools/service-editor.tsx","webpack:///./src/components/ui/HighlightTextField.tsx"],"names":["EnumSpecification","props","serviceClass","spec","serviceSpecificationFromClassIdentifier","enums","Object","values","filter","en","derived","length","map","e","name","isFlags","keys","members","toString","useDeviceHostFromServiceClass","useContext","JacdacContext","bus","useEffect","devices","def","hostDefinitionFromServiceClass","host","addHost","services","removeDeviceHost","DashboardServiceDevices","useChange","b","device","id","ServiceSpecification","node","service","showSource","showDevices","showDerived","shortId","classIdentifier","packets","pkt","registers","isRegister","events","isEvent","commands","isCommand","reports","r","secondary","pipeReports","isPipeReport","others","indexOf","reportOf","find","rep","isReportOf","pipeReportOf","isPipeReportOf","notes","short","extends","extend","i","serviceSpecificationFromName","long","note","group","sort","l","SERVICE_SPECIFICATION_STORAGE_KEY","ServiceSpecificationEditor","useLocalStorage","source","setSource","json","useMemo","parseServiceSpecificationMarkdownToJSON","serviceMap","servicePath","camelName","toLowerCase","errors","Page","GithubPullRequestButton","lazy","AnnotationTooltip","withStyles","theme","arrow","color","palette","error","main","tooltip","backgroundColor","common","white","boxShadow","shadows","fontSize","typography","body2","Tooltip","HighlightTextField","code","onChange","language","annotations","pullRequestTitle","pullRequestPath","pullRequestDescription","DarkModeContext","darkMode","DARK_THEME","LIGHT_THEME","editorRef","useRef","useEditable","disabled","indentation","defaultProps","className","style","tokens","getTokenProps","minHeight","whiteSpace","line","annotation","a","title","message","el","borderBottom","token","empty","key"],"mappings":"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","file":"component---src-pages-tools-service-editor-tsx-4c6c9a0d84b5043d34a0.js","sourcesContent":["import React, { Fragment } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport { Chip } from \"@material-ui/core\"\n\nexport default function EnumSpecification(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const enums = Object.values(spec?.enums || {}).filter(en => !en.derived)\n    if (!enums.length)\n        return <></>\n\n    return <Fragment>\n        <h2>Enums</h2>\n        {enums.map(e => <Fragment key={e.name}>\n            <h3>{e.name} {e.isFlags && <Chip label=\"flags\" size=\"small\" />}</h3>\n            <ul>\n                {Object.keys(e.members).map(en => <li key={en}>{en}: <code>0x{e.members[en].toString(16)}</code></li>)}\n            </ul>\n        </Fragment>)}\n    </Fragment>\n}\n","import { useContext, useEffect } from \"react\";\nimport { addHost, hostDefinitionFromServiceClass } from \"../../../jacdac-ts/src/hosts/hosts\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\n\nexport default function useDeviceHostFromServiceClass(serviceClass: number): void {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext);\n\n    // run once\n    useEffect(() => {\n        const devices = bus.devices({ serviceClass });\n        const def = !devices.length && hostDefinitionFromServiceClass(serviceClass);\n        const host = def && addHost(bus, def.services());\n        return () => bus.removeDeviceHost(host);\n    }, [serviceClass]);\n}","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromName, isRegister, isEvent, isCommand, isPipeReport, isReportOf, isPipeReportOf, deviceSpecificationsForService } from \"../../jacdac-ts/src/jdom/spec\"\nimport PacketSpecification from \"../components/PacketSpecification\"\nimport IDChip from \"./IDChip\";\nimport ServiceSpecificationSource from \"./ServiceSpecificationSource\"\nimport Markdown from \"./ui/Markdown\";\nimport EnumSpecification from \"./EnumSpecification\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport ServiceSpecificationStatusAlert from \"./ServiceSpecificationStatusAlert\"\nimport DeviceSpecificationList from \"./DeviceSpecificationList\"\nimport useDeviceHostFromServiceClass from \"./hooks/useDeviceHostFromServiceClass\";\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport useChange from \"../jacdac/useChange\";\nimport DashbardDeviceItem from \"./dashboard/DashboardDeviceItem\"\n\nfunction DashboardServiceDevices(props: { serviceClass: number }) {\n    const { serviceClass } = props;\n    const { bus } = useContext<JacdacContextProps>(JacdacContext);\n    const devices = useChange(bus, b => b.devices({ serviceClass }));\n    return <Grid container spacing={2}>\n        {devices.map(device => <DashbardDeviceItem\n            key={device.id}\n            device={device}\n            showAvatar={true}\n            showHeader={true}\n        />)}\n    </Grid >\n}\n\nexport default function ServiceSpecification(props: {\n    service: jdspec.ServiceSpec,\n    showSource?: boolean,\n    showDevices?: boolean,\n    showDerived?: boolean\n}) {\n    const { service: node, showSource, showDevices, showDerived } = props;\n    const { shortId, name, classIdentifier } = node;\n    const packets = node.packets.filter(pkt => showDerived || !pkt.derived);\n    const registers = packets.filter(isRegister)\n    const events = packets.filter(isEvent)\n    const commands = packets.filter(isCommand)\n    const reports = packets.filter(r => r.secondary)\n    const pipeReports = packets.filter(isPipeReport)\n    const others = packets.filter(r => registers.indexOf(r) < 0\n        && events.indexOf(r) < 0\n        && commands.indexOf(r) < 0\n        && reports.indexOf(r) < 0\n        && pipeReports.indexOf(r) < 0\n    )\n    // spin up host on demand\n    useDeviceHostFromServiceClass(node.classIdentifier);\n\n    const reportOf = (pkt: jdspec.PacketInfo) => reports.find(rep => isReportOf(pkt, rep))\n    const pipeReportOf = (pkt: jdspec.PacketInfo) => pipeReports.find(rep => isPipeReportOf(pkt, rep))\n\n    return (<Fragment key={`servicespec${shortId}`}>\n        <h1 key=\"title\">{name}\n            <Box ml={1} component=\"span\">\n                <IDChip id={node.classIdentifier} filter={`srv:${shortId}`} />\n            </Box>\n        </h1>\n        <ServiceSpecificationStatusAlert specification={node} />\n        <Markdown key=\"notesshort\" source={node.notes.short} />\n        {!!node.extends?.length &&\n            <p key=\"extends\">\n                <span>Extends </span>\n                {node.extends.map((extend, i) => <Fragment key={`extend${extend}`}>\n                    {i > 0 && <span>, </span>}\n                    <Link key={`extend${extend}`} to={`/services/${extend}/`}>{serviceSpecificationFromName(extend).name}</Link>\n                </Fragment>)}\n    .</p>}\n        <Markdown key=\"noteslong\" source={node.notes.long || \"\"} />\n        <DashboardServiceDevices serviceClass={classIdentifier} />\n        <EnumSpecification key=\"enums\" serviceClass={classIdentifier} />\n        {[\n            { name: \"Registers\", packets: registers, note: node.notes[\"registers\"] },\n            { name: \"Events\", packets: events, note: node.notes[\"events\"] },\n            { name: \"Commands\", packets: commands, note: node.notes[\"commands\"] },\n            { name: \"Others\", packets: others, note: node.notes[\"others\"] }\n        ].filter(group => group.packets.length)\n            .map(group => <Fragment key={`group${group.name}`}>\n                <h2>{group.name}</h2>\n                {group.note && <Markdown key={`node${group.name}`} source={group.note} />}\n                {group.packets\n                    .sort((l, r) => (l.derived ? 1 : -1) - (r.derived ? 1 : -1))\n                    .map((pkt, i) => <PacketSpecification\n                        key={`pkt${pkt.name}`}\n                        serviceClass={node.classIdentifier}\n                        packetInfo={pkt}\n                        reportInfo={reportOf(pkt)}\n                        pipeReportInfo={pipeReportOf(pkt)}\n                        showDevices={true}\n                    />)}\n            </Fragment>)\n        }\n    </Fragment>\n    )\n}","import React, { useMemo } from \"react\"\nimport { Grid } from \"@material-ui/core\"\nimport { parseServiceSpecificationMarkdownToJSON } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport { serviceMap } from \"../../../jacdac-ts/src/jdom/spec\"\nimport RandomGenerator from \"../RandomGenerator\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport ServiceSpecification from \"../ServiceSpecification\"\n\nconst SERVICE_SPECIFICATION_STORAGE_KEY =\n    \"jacdac:servicespecificationeditorsource\"\n\nexport default function ServiceSpecificationEditor() {\n    const [source, setSource] = useLocalStorage(\n        SERVICE_SPECIFICATION_STORAGE_KEY,\n        \"\"\n    )\n    const json = useMemo(\n        () => parseServiceSpecificationMarkdownToJSON(source, serviceMap()),\n        [source]\n    )\n    const servicePath =\n        json &&\n        `services/${(\n            json.camelName ||\n            json.shortId ||\n            `0x${json.classIdentifier.toString(16)}`\n        ).toLowerCase()}`\n    return (\n        <Grid spacing={1} container>\n            <Grid item xs={12}>\n                <HighlightTextField\n                    code={source}\n                    language={\"markdown\"}\n                    onChange={setSource}\n                    annotations={json?.errors}\n                    pullRequestTitle={json && `Service: ${json.name}`}\n                    pullRequestPath={servicePath}\n                    pullRequestDescription={`This pull request defines a new service.`}\n                />\n            </Grid>\n            <Grid item>\n                <RandomGenerator device={false} />\n                {json && <ServiceSpecification service={json} />}\n            </Grid>\n        </Grid>\n    )\n}\n","import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceSpecificationEditor from '../../components/tools/ServiceSpecificationEditor'\n\nexport default function Page() {\n    return <>\n        <h1>Service Specification Editor</h1>\n        <p>\n\n            Read the <Link to=\"/reference/service-specification\">service specifiation</Link> documentation.\nUse the packet console to monitor packets from your devices.\n        </p>\n        <ServiceSpecificationEditor />\n    </>\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react/jsx-key */\nimport React, { useContext, useRef, lazy } from \"react\"\nimport Highlight, {\n    defaultProps,\n    Language,\n    PrismTheme,\n} from \"prism-react-renderer\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport LIGHT_THEME from \"prism-react-renderer/themes/github\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DARK_THEME from \"prism-react-renderer/themes/vsDark\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useEditable } from \"use-editable\"\nimport { Alert } from \"@material-ui/lab\"\nimport { Grid, Tooltip, withStyles } from \"@material-ui/core\"\nimport Suspense from \"../ui/Suspense\";\nconst GithubPullRequestButton = lazy(() => import('../GithubPullRequestButton'));\n\nconst AnnotationTooltip = withStyles(theme => ({\n    arrow: {\n        color: theme.palette.error.main,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.common.white,\n        boxShadow: theme.shadows[1],\n        fontSize: theme.typography.body2.fontSize,\n    },\n}))(Tooltip)\n\nexport default function HighlightTextField(props: {\n    language: string\n    code: string\n    onChange: (newValue: string) => void\n    annotations?: jdspec.Diagnostic[]\n    pullRequestTitle?: string\n    pullRequestPath?: string\n    pullRequestDescription?: string\n}) {\n    const {\n        code,\n        onChange,\n        language,\n        annotations,\n        pullRequestTitle,\n        pullRequestPath,\n        pullRequestDescription,\n    } = props\n    const { darkMode } = useContext(DarkModeContext)\n    const theme = (darkMode === \"dark\" ? DARK_THEME : LIGHT_THEME) as PrismTheme\n    const editorRef = useRef(null)\n\n    useEditable(editorRef, onChange, {\n        disabled: false,\n        indentation: 4,\n    })\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs={12}>\n                <Highlight\n                    {...defaultProps}\n                    code={code}\n                    language={language as Language}\n                    theme={theme}\n                >\n                    {({ className, style, tokens, getTokenProps }) => (\n                        <pre\n                            ref={editorRef}\n                            className={className}\n                            spellCheck={false}\n                            style={{\n                                ...style,\n                                ...{\n                                    minHeight: \"12rem\",\n                                    whiteSpace: \"pre-wrap\",\n                                },\n                            }}\n                        >\n                            {tokens.map((line, i) => {\n                                const annotation = annotations?.find(\n                                    a => a.line === i + 1\n                                )\n                                const title = annotation?.message\n                                const el = (\n                                    <span\n                                        key={i}\n                                        style={\n                                            annotation && {\n                                                borderBottom: \"dashed 1px red\",\n                                            }\n                                        }\n                                    >\n                                        {line\n                                            .filter(token => !token.empty)\n                                            .map((token, key) => (\n                                                <span\n                                                    {...getTokenProps({\n                                                        token,\n                                                        key,\n                                                    })}\n                                                />\n                                            ))}\n                                        {i < tokens.length - 1 ? \"\\n\" : null}\n                                    </span>\n                                )\n                                return title ? (\n                                    <AnnotationTooltip\n                                        title={title}\n                                        arrow\n                                        key={i}\n                                    >\n                                        {el}\n                                    </AnnotationTooltip>\n                                ) : (\n                                    el\n                                )\n                            })}\n                        </pre>\n                    )}\n                </Highlight>\n            </Grid>\n            {!!annotations?.length && (\n                <Grid item xs={12}>\n                    <Alert severity=\"error\">\n                        <ul>\n                            {annotations.map((a, i) => (\n                                <li key={i}>\n                                    line {a.line}: {a.message}\n                                </li>\n                            ))}\n                        </ul>\n                    </Alert>\n                </Grid>\n            )}\n            {pullRequestTitle && pullRequestPath && (\n                <Grid item>\n                    <Suspense>\n                        <GithubPullRequestButton\n                            title={pullRequestTitle}\n                            head={pullRequestPath}\n                            description={pullRequestDescription}\n                            files={{\n                                [pullRequestPath + \".md\"]: code,\n                            }}\n                        />\n                    </Suspense>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}