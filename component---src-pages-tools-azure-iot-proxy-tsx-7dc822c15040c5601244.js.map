{"version":3,"file":"component---src-pages-tools-azure-iot-proxy-tsx-7dc822c15040c5601244.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/useFetch.ts","webpack://jacdac-docs/./src/components/hooks/useClient.ts","webpack://jacdac-docs/./jacdac-ts/src/azure-iot/dtdlproxy.ts","webpack://jacdac-docs/./src/pages/tools/azure-iot-proxy.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport useEffectAsync from \"./useEffectAsync\"\n\nexport default function useFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const [response, setResponse] = useState<T>(undefined)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [error, setError] = useState<any>(undefined)\n    const [status, setStatus] = useState<number>(undefined)\n    const [loading, setLoading] = useState(true) // start in loading mode\n\n    useEffectAsync(\n        async mounted => {\n            setLoading(true)\n            try {\n                if (!url) {\n                    setStatus(404)\n                    setResponse(undefined)\n                } else {\n                    const res = await fetch(url, options)\n                    if (!mounted()) return\n                    const status = res.status\n                    setStatus(status)\n                    if (status >= 200 && status <= 204) {\n                        const json = await res.json()\n                        if (!mounted()) return\n                        setResponse(json)\n                    }\n                }\n            } catch (error) {\n                if (!mounted()) return\n                setError(error)\n            } finally {\n                if (mounted()) setLoading(false)\n            }\n        },\n        [url]\n    )\n\n    return {\n        response,\n        error,\n        status,\n        loading,\n    }\n}\n","import { useEffect, useMemo } from \"react\"\nimport JDClient from \"../../../jacdac-ts/src/jdom/client\"\n\nexport default function useClient<TClient extends JDClient>(\n    factory: () => TClient\n) {\n    const client = useMemo(factory, [])\n    useEffect(() => () => client?.unmount(), [])\n    return client\n}\n","import { deviceClassToDTDL } from \"./dtdlspec\"\nimport { DTDLInterface } from \"./dtdl\"\nimport JDBus from \"../jdom/bus\"\nimport JDClient from \"../jdom/client\"\nimport { CHANGE, DEVICE_CHANGE } from \"../jdom/constants\"\nimport { isInfrastructure } from \"../jdom/spec\"\n\nexport const DTDL_DEVICE_MODELS_REPOSITORY =\n    \"https://jacdac-device-models.azurewebsites.net/\"\n\n/**\n * Tracks the devices on the bus and automatically generate DTDL information\n * @internal\n */\nexport default class DTDLProxy extends JDClient {\n    private _dtdl: DTDLInterface\n\n    constructor(readonly bus: JDBus) {\n        super()\n\n        this.bus.on(DEVICE_CHANGE, this.updateDTDL.bind(this))\n        this.updateDTDL()\n    }\n\n    get dtdl() {\n        return this._dtdl\n    }\n\n    private updateDTDL() {\n        const newServices = this.bus\n            .services({ specification: true, ignoreSelf: true })\n            .filter(srv => !isInfrastructure(srv.specification))\n            .sort((l, r) => l.compareTo(r))\n        const device: jdspec.DeviceClassSpec = {\n            name: \"Azure IoT Jacdac Device\",\n            services: newServices.map(srv => srv.serviceClass),\n        }\n        const newDTDL = deviceClassToDTDL(device)\n        if (JSON.stringify(newDTDL) !== JSON.stringify(this._dtdl)) {\n            this._dtdl = newDTDL\n            console.log(`new DTDL`, { newDTDL })\n            this.emit(CHANGE)\n        }\n    }\n}\n","import React, { useContext } from \"react\"\nimport useClient from \"../../components/hooks/useClient\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport DTDLProxy, {\n    DTDL_DEVICE_MODELS_REPOSITORY,\n} from \"../../../jacdac-ts/src/azure-iot/dtdlproxy\"\nimport useChange from \"../../jacdac/useChange\"\nimport { DTDLSnippet } from \"../../components/azure/DTDLSnippet\"\nimport { DTMIToRoute } from \"../../../jacdac-ts/src/azure-iot/dtdlspec\"\nimport useFetch from \"../../components/useFetch\"\nimport { DTDLInterface } from \"../../../jacdac-ts/src/azure-iot/dtdl\"\nimport Alert from \"../../components/ui/Alert\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nexport default function Page() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const proxy = useClient(() => new DTDLProxy(bus))\n    const dtdl = useChange(proxy, _ => _?.dtdl)\n    const route = dtdl && DTMIToRoute(dtdl[\"@id\"])\n    const dtdlFetch = useFetch<DTDLInterface | DTDLInterface[]>(route)\n\n    return (\n        <>\n            <h1>Azure IoT Proxy</h1>\n            <h3>DTDL (generated)</h3>\n            <DTDLSnippet node={dtdl} name={`proxy-generated`} />\n            <h3>\n                DTDL (from{\" \"}\n                <Link target=\"_blank\" href={route}>\n                    {DTDL_DEVICE_MODELS_REPOSITORY}\n                </Link>\n                )\n            </h3>\n            <DTDLSnippet node={dtdlFetch?.response} name={`proxy-cloud`} />\n            {dtdlFetch?.error && (\n                <Alert severity=\"error\">{dtdlFetch.error}</Alert>\n            )}\n        </>\n    )\n}\n"],"names":["useState","useEffectAsync","useFetch","url","options","response","setResponse","undefined","error","setError","status","setStatus","loading","setLoading","mounted","res","fetch","json","useEffect","useMemo","useClient","factory","client","unmount","deviceClassToDTDL","JDClient","CHANGE","DEVICE_CHANGE","isInfrastructure","DTDL_DEVICE_MODELS_REPOSITORY","DTDLProxy","bus","on","updateDTDL","bind","newServices","services","specification","ignoreSelf","filter","srv","sort","l","r","compareTo","device","name","map","serviceClass","newDTDL","JSON","stringify","_dtdl","console","log","emit","React","useContext","JacdacContext","useChange","DTDLSnippet","DTMIToRoute","Alert","Link","Page","proxy","dtdl","_","route","dtdlFetch"],"sourceRoot":""}