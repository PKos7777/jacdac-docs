{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/markdown.ts","webpack://jacdac-docs/./src/components/tools/VMEditorRunner.tsx","webpack://jacdac-docs/./src/pages/tools/vm-editor-runner.tsx"],"names":["IT4Functions","id","args","prompt","context","supportedExpressions","parseITTTMarkdownToJSON","filecontent","filename","replace","info","description","roles","registers","events","handlers","backticksType","errors","lineNo","currentHandler","handlerHeading","symbolResolver","SpecSymbolResolver","undefined","role","shortId","find","pair","serviceSpecificationFromName","serviceShortName","service","error","e","parser","SpecAwareMarkDownParser","jsep","split","line","processLine","message","finishHandler","length","trim","m","exec","interpret","slice","hd","cont","expanded","processCommand","commands","ret","command","root","arguments","name","push","guard","sym","forEach","r","indexOf","reset","msg","some","file","VM_MARKDOWN_SOURCE_STORAGE_KEY","VMEditorRunner","useLocalStorage","source","setSource","json","useMemo","Page"],"mappings":"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","file":"component---src-pages-tools-vm-editor-runner-tsx-b903c798d3261747a0ae.js","sourcesContent":["export interface IT4GuardedCommand {\n    guard?: jsep.Expression\n    command: jsep.CallExpression\n}\n\nexport interface IT4Handler {\n    description: string\n    commands: IT4GuardedCommand[]\n}\n\nexport interface IT4Role {\n    role: string\n    serviceShortName: string\n}\n\n\nexport interface IT4Program {\n    description: string\n    roles: IT4Role[]\n    registers: string[]\n    events: string[]\n    handlers: IT4Handler[]\n    errors?: jdspec.Diagnostic[]\n}\n\nexport type JDIT4Functions =\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"halt\"\n    | \"role\"\n\nexport const IT4Functions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"role\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role variable {1} of service type {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n]\n","import jsep from \"jsep\"\n\nimport { SpecAwareMarkDownParser, SpecSymbolResolver } from \"../../jacdac-spec/spectool/jdutils\"\nimport { IT4Program, IT4Handler, IT4Functions } from \"./ir\"\nimport { serviceSpecificationFromName } from \"../jdom/spec\"\nimport { SystemReg } from \"../jdom/constants\"\nimport { intOfBuffer } from \"../jdom/buffer\"\n\nconst supportedExpressions: jsep.ExpressionType[] = [\n    \"MemberExpression\",\n    \"ArrayExpression\",\n    \"BinaryExpression\",\n    \"Identifier\",\n    \"Literal\",\n    \"UnaryExpression\",\n    \"LogicalExpression\",\n]\n\nexport function parseITTTMarkdownToJSON(\n    filecontent: string,\n    filename = \"\"\n): IT4Program {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: IT4Program = {\n        description: \"\",\n        roles: [],\n        registers: [],\n        events: [],\n        handlers: [],\n    }\n\n    let backticksType = \"\"\n    const errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let currentHandler: IT4Handler = null\n    let handlerHeading = \"\"\n\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        (role: string) => {\n            // lookup in roles first\n            let shortId = info.roles.find(pair => pair.role === role)\n            if (shortId) {\n                // must succeed\n                return serviceSpecificationFromName(shortId.serviceShortName)\n            } else {\n                let service = serviceSpecificationFromName(role)\n                if (!service) {\n                    error(`can't find service with shortId=${role}`)\n                    return undefined\n                }\n                return service\n            }\n        },\n        e => error(e)\n    )\n\n    const parser = new SpecAwareMarkDownParser(\n        symbolResolver,\n        supportedExpressions,\n        jsep,\n        e => error(e)\n    )\n\n    try {\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (currentHandler) finishHandler(symbolResolver)\n\n    if (errors.length) info.errors = errors\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" ||\n            line.slice(0, 4) == \"    \" ||\n            /^\\t/.exec(line)\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                handlerHeading = \"\"\n                const [, hd, cont] = m\n                if (hd == \"#\") {\n                    if (!info.description) info.description = cont.trim()\n                    else error(\"use ## to start a handler, not #\")\n                } else if (hd == \"##\") {\n                    if (currentHandler) finishHandler(symbolResolver)\n                    handlerHeading = cont.trim()\n                }\n            }\n        } else {\n            const expanded = line.replace(/\\/\\/.*/, \"\").trim()\n            if (!expanded) return\n            processCommand(expanded)\n        }\n    }\n\n    function processCommand(expanded: string) {\n        if (!currentHandler) {\n            if (!handlerHeading)\n                error(`every handler must have a description (via ##)`)\n            currentHandler = {\n                description: handlerHeading,\n                commands: [],\n            }\n            handlerHeading = \"\"\n        }\n\n        const ret = parser.processLine(expanded, IT4Functions)\n\n        if (ret) {\n            const [command, root] = ret\n\n            if (currentHandler.commands.length === 0) {\n                if (command?.id === \"role\") {\n                    // TODO: check\n                    let role = (root.arguments[0] as jsep.Identifier).name\n                    let serviceShortName = (root\n                        .arguments[1] as jsep.Identifier).name\n                    let service = serviceSpecificationFromName(serviceShortName)\n                    if (!service)\n                        error(\n                            `can't find service with shortId=${serviceShortName}`\n                        )\n                    else if (info.roles.find(pair => pair.role === role))\n                        error(`role with name ${role} already declared`)\n                    else\n                        info.roles.push({\n                            role: role,\n                            serviceShortName: serviceShortName,\n                        })\n                    return\n                } else if (\n                    !command ||\n                    command.id !== \"awaitEvent\" &&\n                    command.id !== \"awaitCondition\"\n                ) {\n                    error(\n                        `An ITTT handler must begin with call to an await function (awaitEvent | awaitCondition)`\n                    )\n                    return\n                }\n            } else {\n                if (command?.id === \"role\") {\n                    error(`roles must be declared at beginning of handler`)\n                }\n            }\n\n            currentHandler.commands.push({ guard: undefined, command: root })\n        }\n    }\n\n    function finishHandler(sym: SpecSymbolResolver) {\n        if (currentHandler.commands.length > 0)\n            info.handlers.push(currentHandler)\n        sym.registers.forEach(r => { if (info.registers.indexOf(r) < 0) info.registers.push(r) })\n        sym.events.forEach(e => { if (info.events.indexOf(e) < 0) info.events.push(e) })\n        sym.reset();\n        currentHandler = null\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n}\n","import React, { useMemo } from \"react\"\nimport { parseITTTMarkdownToJSON } from \"../../../jacdac-ts/src/vm/markdown\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport { Grid } from \"@material-ui/core\"\nimport GridHeader from \"../ui/GridHeader\"\nimport VMRunner from \"../vm/VMRunner\"\nimport DashBoard from \"../dashboard/Dashboard\"\n\nconst VM_MARKDOWN_SOURCE_STORAGE_KEY = \"jacdac:vmeditorsource:markdown\"\n\nexport default function VMEditorRunner() {\n    const [source, setSource] = useLocalStorage(\n        VM_MARKDOWN_SOURCE_STORAGE_KEY,\n        `# VM Handler program\\n\\n`\n    )\n    const json = useMemo(() => parseITTTMarkdownToJSON(source), [source])\n    return (\n        <Grid spacing={2} container>\n            <Grid item xs={12}>\n                <HighlightTextField\n                    code={source}\n                    language={\"markdown\"}\n                    onChange={setSource}\n                    annotations={json?.errors}\n                />\n            </Grid>\n            <GridHeader title=\"Preview\" />\n            {json && (\n                <Grid item xs={12}>\n                    <VMRunner program={json} />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <DashBoard />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport VMEditorRunner from \"../../components/tools/VMEditorRunner\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>VM Editor/Runner</h1>\n            <VMEditorRunner />\n        </>\n    )\n}\n"],"sourceRoot":""}