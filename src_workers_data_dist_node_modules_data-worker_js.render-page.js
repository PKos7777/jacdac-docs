/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!***********************************************************!*\
  !*** ./src/workers/data/dist/node_modules/data-worker.js ***!
  \***********************************************************/
__webpack_require__.r(__webpack_exports__);
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function tidy(items, ...fns) {
  if (typeof items === "function") {
    throw new Error("You must supply the data as the first argument to tidy()");
  }

  let result = items;

  for (const fn of fns) {
    if (fn) {
      result = fn(result);
    }
  }

  return result;
}

function singleOrArray(d) {
  return d == null ? [] : Array.isArray(d) ? d : [d];
}

function ascending (a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function arrange(comparators) {
  const _arrange = items => {
    const comparatorFns = singleOrArray(comparators).map(comp => typeof comp === "function" ? comp : asc(comp));
    return items.slice().sort((a, b) => {
      for (const comparator of comparatorFns) {
        const result = comparator(a, b);
        if (result) return result;
      }

      return 0;
    });
  };

  return _arrange;
}

function asc(key) {
  const keyFn = typeof key === "function" ? key : d => d[key];
  return function _asc(a, b) {
    return emptyAwareComparator(keyFn(a), keyFn(b), false);
  };
}

function desc(key) {
  const keyFn = typeof key === "function" ? key : d => d[key];
  return function _desc(a, b) {
    return emptyAwareComparator(keyFn(a), keyFn(b), true);
  };
}

function emptyAwareComparator(aInput, bInput, desc2) {
  let a = desc2 ? bInput : aInput;
  let b = desc2 ? aInput : bInput;

  if (isEmpty(a) && isEmpty(b)) {
    const rankA = a !== a ? 0 : a === null ? 1 : 2;
    const rankB = b !== b ? 0 : b === null ? 1 : 2;
    const order = rankA - rankB;
    return desc2 ? -order : order;
  }

  if (isEmpty(a)) {
    return desc2 ? -1 : 1;
  }

  if (isEmpty(b)) {
    return desc2 ? 1 : -1;
  }

  return ascending(a, b);
}

function isEmpty(value) {
  return value == null || value !== value;
}

function keysFromItems(items) {
  if (items.length < 1) return [];
  const keys = Object.keys(items[0]);
  return keys;
}

function everything() {
  return items => {
    const keys = keysFromItems(items);
    return keys;
  };
}

function processSelectors(items, selectKeys) {
  let processedSelectKeys = [];

  for (const keyInput of singleOrArray(selectKeys)) {
    if (typeof keyInput === "function") {
      processedSelectKeys.push(...keyInput(items));
    } else {
      processedSelectKeys.push(keyInput);
    }
  }

  if (processedSelectKeys.length && processedSelectKeys[0][0] === "-") {
    processedSelectKeys = [...everything()(items), ...processedSelectKeys];
  }

  const negationMap = {};
  const keysWithoutNegations = [];

  for (let k = processedSelectKeys.length - 1; k >= 0; k--) {
    const key = processedSelectKeys[k];

    if (key[0] === "-") {
      negationMap[key.substring(1)] = true;
      continue;
    }

    if (negationMap[key]) {
      negationMap[key] = false;
      continue;
    }

    keysWithoutNegations.unshift(key);
  }

  processedSelectKeys = Array.from(new Set(keysWithoutNegations));
  return processedSelectKeys;
}

function select(selectKeys) {
  const _select = items => {
    let processedSelectKeys = processSelectors(items, selectKeys);
    if (!processedSelectKeys.length) return items;
    return items.map(d => {
      const mapped = {};

      for (const key of processedSelectKeys) {
        mapped[key] = d[key];
      }

      return mapped;
    });
  };

  return _select;
}

const _excluded = ["worker", "data"];

const handlers = {
  arrange: props => {
    const {
      column,
      descending,
      data
    } = props;
    return tidy(data, arrange(descending ? desc(column) : column));
  },
  drop: props => {
    const {
      column,
      data
    } = props;
    if (!column) return data;else return tidy(data, select([`-${column}`]));
  }
};

function transformData(message) {
  try {
    const handler = handlers[message.type];
    return handler == null ? void 0 : handler(message);
  } catch (e) {
    console.debug(e);
    return undefined;
  }
}

async function handleMessage(event) {
  const message = event.data; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  const {
    worker
  } = message,
        rest = _objectWithoutPropertiesLoose(message, _excluded);

  if (worker !== "data") return;
  console.debug("Jacdac data in:", {
    message
  });
  const newData = await transformData(message);
  console.debug("Jacdac data out:", {
    message
  });

  const resp = _extends({
    worker
  }, rest, {
    data: newData
  });

  self.postMessage(resp);
}

self.addEventListener("message", handleMessage);
console.debug(`jacdac data: worker registered`);
//# sourceMappingURL=data-worker.js.map

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=src_workers_data_dist_node_modules_data-worker_js.render-page.js.map