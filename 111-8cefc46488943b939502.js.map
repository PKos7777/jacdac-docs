{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardCharacterScreen.tsx"],"names":["useStyles","makeStyles","createStyles","text","fontFamily","fontWeight","box","DashboardCharacterScreen","props","service","services","variant","classes","useRegisterUnpackedValue","register","CharacterScreenReg","Message","message","Rows","rows","Columns","columns","TextDirection","textDirection","useWidgetTheme","textPrimary","background","controlBackground","undefined","cw","ch","m","mo","fs","rtl","CharacterScreenTextDirection","RightToLeft","w","h","lines","split","els","y","row","x","line","column","char","push"],"mappings":"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","file":"111-8cefc46488943b939502.js","sourcesContent":["import React from \"react\";\nimport { CharacterScreenReg, CharacterScreenTextDirection } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport { createStyles, makeStyles } from \"@material-ui/core\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport LoadingProgress from \"../ui/LoadingProgress\";\n\nconst useStyles = makeStyles(() => createStyles({\n    text: {\n        fontFamily: \"monospace\",\n        fontWeight: 100,\n    },\n    box: {\n    }\n}));\n\nexport default function DashboardCharacterScreen(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n    const classes = useStyles();\n    const [message] = useRegisterUnpackedValue<[string]>(service.register(CharacterScreenReg.Message));\n    const [rows] = useRegisterUnpackedValue<[number]>(service.register(CharacterScreenReg.Rows));\n    const [columns] = useRegisterUnpackedValue<[number]>(service.register(CharacterScreenReg.Columns));\n    const [textDirection] = useRegisterUnpackedValue<[number]>(service.register(CharacterScreenReg.TextDirection))\n    const { textPrimary, background, controlBackground } = useWidgetTheme(\"primary\");\n\n    if (rows === undefined || columns === undefined)\n        return <LoadingProgress />; // size unknown\n\n    const cw = 8\n    const ch = 10;\n    const m = 1;\n    const mo = 2;\n    const fs = 8;\n\n    const rtl = textDirection === CharacterScreenTextDirection.RightToLeft;\n    const w = columns * (cw + m) - m + 2 * mo;\n    const h = rows * (ch + m) - m + 2 * mo;\n\n    const lines = (message || \"\").split(/\\n/g);\n    const els: JSX.Element[] = [];\n\n    let y = mo;\n    for (let row = 0; row < rows; ++row) {\n        let x = mo;\n        const line = lines[row];\n        for (let column = 0; column < columns; ++column) {\n            const char = line?.[rtl ? (columns - 1 - column) : column];\n            els.push(<g key={`${row}-${column}`}>\n                <rect x={x} y={y} width={cw} height={ch} className={classes.box}\n                    fill={controlBackground} />\n                {char && <text x={x + cw / 2} y={y + ch - fs / 3} textAnchor=\"middle\" fontSize={fs}\n                    className={classes.text} fill={textPrimary}\n                    aria-label={char}\n                >{char}</text>}\n            </g>)\n            x += cw + m;\n        }\n\n        y += ch + m;\n    }\n    return <SvgWidget tabIndex={0} title={`character screen displaying \"${message}\"`} width={w} height={h}>\n        <>\n            <rect x={0} y={0} width={w} height={h} r={m / 2} fill={background} />\n            {els}\n        </>\n    </SvgWidget>\n}"],"sourceRoot":""}