{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/HourglassEmpty.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayCircleFilled.js","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtestfuns.ts","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack://jacdac-docs/./jacdac-ts/src/test/testrunner.ts","webpack://jacdac-docs/./src/components/test/ServiceTestRunner.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useServiceClient.ts"],"names":["getTestCommandFunctions","testFunctions","filter","f","context","getTestExpressionFunctions","id","args","prompt","undefined","JDTestStatus","JDTestCommandStatus","commandStatusToTestStatus","status","Active","Passed","Failed","NotReady","RequiresUserInput","cmdToTestFunction","cmd","call","callee","name","find","t","JDCommandEvaluator","testRunner","command","_prompt","_progress","_status","_startExpressions","_rangeComplete","_eventsComplete","callEval","start","caller","ee","getStartVal","e","r","v","arguments","goal","error","visitExpression","ev","pop","testFun","startExprs","exprVisitor","p","ce","type","push","eventList","elements","map","forEach","child","findIndex","exprEval","VMExprEvaluator","env","eval","createPrompt","replaceId","a","i","unparse","replaceVal","aStart","roundWithPrecision","toString","slice","replace","setEvent","checkExpression","expr","getStart","evaluateAsync","pretify","Math","abs","regSaved","regValue","amtSaved","beginSaved","endSaved","hasEvent","consumeEvent","shift","length","event","reg","serviceTestRunner","writeRegisterAsync","lookup","JDTestCommandRunner","_output","message","progress","_commandEvaluator","reset","output","startAsync","envChangeAsync","isActive","newOutput","finishAsync","cancelAsync","s","finishCommandAsync","emit","CHANGE","value","JDEventSource","JDTestRunner","testSpec","commands","testCommands","c","_commandIndex","_currentEvent","refreshEnvironmentAsync","next","cancel","finish","newStatus","getCommandIndex","setCommandIndex","index","currentCommand","eventChangeAsync","ret","description","JDServiceTestRunner","service","_testIndex","_env","VMServiceEnvironment","tests","events","eventName","substr","indexOf","registerEvent","currentTest","registers","regName","registerRegister","refreshRegistersAsync","val","stats","total","success","failed","indeterminate","test","testIndex","ct","JDServiceClient","TestStatusIcon","props","useChange","TestListItem","onSelectTest","selected","handleSelectTest","TestList","CommandStatusIcon","CommandListItem","handleAnswer","ActiveTest","handleRestart","handleNext","useEffect","ServiceTestRunner","serviceTest","serviceTestFromServiceClass","serviceClass","factory","useCallback","useServiceClient","specification","device","useGridBreakpoints","itemCount","useContext","AppContext","drawerType","xs","sm","md","lg","xl","DrawerType","deps","useState","client","setClient","unmount"],"mappings":"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","file":"859a83de993caea7524bf57c2975f3be6812c8c3-8703c5dd78da2c4e3e88.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n}), 'HourglassEmpty');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"\n}), 'PlayCircleFilled');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdtest.d.ts\" />\n\nexport type JDTestFunctions =\n    | \"changes\"\n    | \"ask\"\n    | \"check\"\n    | \"increases\"\n    | \"decreases\"\n    | \"increasesBy\"\n    | \"decreasesBy\"\n    | \"stepsUpTo\"\n    | \"stepsDownTo\"\n    | \"events\"\n    | \"awaitEvent\"\n    | \"nextEvent\"\n    | \"assign\"\n    | \"closeTo\"\n\nexport function getTestCommandFunctions() {\n    return testFunctions.filter(f => f.context === \"command\" || f.context === \"either\")\n}\n\nexport function getTestExpressionFunctions() {\n    return testFunctions.filter(f => f.context === \"expression\" || f.context === \"either\")\n}\n\nconst testFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"changes\",\n        args: [\"register\"],\n        prompt: `check that {1} changes`,\n        context: \"command\",\n    },\n    {\n        id: \"ask\",\n        args: [],\n        prompt: undefined,\n        context: \"command\",\n    },\n    {\n        id: \"events\",\n        args: [\"events\"],\n        prompt: `check that events {1} are observed`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true] ],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"nextEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `next event must be {1}, then check {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"assign\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"check\",\n        args: [\"boolean\"],\n        prompt: `check that {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"increases\",\n        args: [\"register\"],\n        prompt: `check that {1} increases`,\n        context: \"command\",\n    },\n    {\n        id: \"decreases\",\n        args: [\"register\"],\n        prompt: `check that {1} decreases`,\n        context: \"command\",\n    },\n    {\n        id: \"increasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that  {1} (initially {1:val}) increases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"decreasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that {1} (initially {1:val}) decreases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsUpTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step up (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsDownTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step down (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"start\",\n        args: [\"any\"],\n        prompt: undefined,\n        context: \"expression\",\n    },\n    {\n        id: \"closeTo\",\n        args: [\"number\", \"number\", \"number\"],\n        prompt: `evaluate {1} until it is close to {2:val}, as given by error {3:val}`,\n        context: \"either\",\n    },\n]\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import {\n    getTestCommandFunctions,\n    JDTestFunctions,\n} from \"../../jacdac-spec/spectool/jdtestfuns\"\nimport { exprVisitor } from \"../../jacdac-spec/spectool/jdutils\"\n\nimport { CHANGE } from \"../jdom/constants\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { JDService } from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { roundWithPrecision } from \"../jdom/utils\"\nimport { unparse, VMExprEvaluator, CallEvaluator, StartMap } from \"../vm/VMexpr\"\nimport { VMServiceEnvironment } from \"../vm/VMenvironment\"\n\nexport enum JDTestStatus {\n    NotReady,\n    Active,\n    Passed,\n    Failed,\n}\n\nexport enum JDTestCommandStatus {\n    NotReady,\n    Active,\n    RequiresUserInput,\n    Passed,\n    Failed\n}\n\nfunction commandStatusToTestStatus(status: JDTestCommandStatus) {\n    switch (status) {\n        case JDTestCommandStatus.Active:\n            return JDTestStatus.Active\n        case JDTestCommandStatus.Passed:\n            return JDTestStatus.Passed\n        case JDTestCommandStatus.Failed:\n            return JDTestStatus.Failed\n        case JDTestCommandStatus.NotReady:\n            return JDTestStatus.NotReady\n        case JDTestCommandStatus.RequiresUserInput:\n            return JDTestStatus.Active\n    }\n}\n\nfunction cmdToTestFunction(cmd: jdtest.TestCommandSpec) {\n    const id = (<jsep.Identifier>cmd.call.callee).name\n    return getTestCommandFunctions().find(t => t.id == id)\n}\n\nclass JDCommandEvaluator {\n    private _prompt = \"\"\n    private _progress = \"\"\n    private _status = JDTestCommandStatus.Active\n    private _startExpressions: StartMap = []\n    private _rangeComplete: number = undefined\n    private _eventsComplete: string[] = undefined\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {}\n\n    public get prompt() {\n        return this._prompt\n    }\n    public get status() {\n        return this._status\n    }\n    public get progress() {\n        return this._progress\n    }\n\n    private get env() {\n        return (e: jsep.MemberExpression | string) => {\n            return this.testRunner.serviceTestRunner.lookup(e)\n        }\n    }\n\n    private callEval(start: StartMap) : CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => { \n            function getStartVal(e: jsep.Expression) {\n                return start.find(r => r.e === e).v\n            }\n            const callee = <jsep.Identifier>caller.callee\n            switch (callee.name) {\n                case \"start\": \n                    return getStartVal(caller.arguments[0]);\n                case \"closeTo\": {\n                    const args = caller.arguments\n                    const goal = getStartVal(args[1])\n                    const error = getStartVal(args[2])\n                    ee.visitExpression(args[0])\n                    const ev = ee.pop()\n                    return  ev >= goal - error && ev <= goal + error\n                }\n                default: // ERROR\n            }\n            return null;\n        }\n    }\n\n    // TODO: define an interface between test runner and command evaluator\n    // TODO: so this all can be done modularly\n    public start() {\n        this._startExpressions = []\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        const startExprs: jsep.Expression[] = []\n        switch (testFun.id as JDTestFunctions) {\n            case \"check\":\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                exprVisitor(null, args, (p, ce: jsep.CallExpression) => {\n                    if (ce.type !== \"CallExpression\") return\n                    if ((<jsep.Identifier>ce.callee).name === \"start\")\n                        startExprs.push(ce.arguments[0])\n                    else if ((<jsep.Identifier>ce.callee).name === \"closeTo\") {\n                        startExprs.push(ce.arguments[1])\n                        startExprs.push(ce.arguments[2])\n                    }\n                })\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                startExprs.push(args[0])\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\":\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                startExprs.push(args[0])\n                startExprs.push(args[1])\n                break\n            }\n            case \"closeTo\": {\n                startExprs.push(args[1])\n                startExprs.push(args[2])\n                break\n            }\n            case \"assign\": {\n                startExprs.push(args[1])\n                break\n            }\n            case \"events\": {\n                const eventList = this.command.call\n                    .arguments[0] as jsep.ArrayExpression\n                this._eventsComplete = (eventList.elements as jsep.Identifier[]).map(\n                    id => id.name\n                )\n                break\n            }\n        }\n        // evaluate the start expressions and store the results\n        startExprs.forEach(child => {\n            if (this._startExpressions.findIndex(r => r.e === child) < 0) {\n                const exprEval = new VMExprEvaluator(this.env, this.callEval([]))\n                this._startExpressions.push({\n                    e: child,\n                    v: exprEval.eval(child),\n                })\n            }\n        })\n        this.createPrompt()\n    }\n\n    private createPrompt() {\n        const testFun = cmdToTestFunction(this.command)\n        const replaceId = this.command.call.arguments.map((a, i) => {\n            return [`{${i + 1}}`, unparse(a)]\n        })\n        const replaceVal = this.command.call.arguments.map((a, i) => {\n            const aStart = this._startExpressions.find(r => r.e === a)\n            return [\n                `{${i + 1}:val}`,\n                aStart && aStart.v\n                    ? roundWithPrecision(aStart.v, 3).toString()\n                    : unparse(a),\n            ]\n        })\n        this._prompt =\n            testFun.id === \"ask\" || testFun.id === \"say\"\n                ? this.command.prompt.slice(0)\n                : testFun.prompt.slice(0)\n        replaceId.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n        replaceVal.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n    }\n\n    public setEvent(ev: string) {}\n\n    private checkExpression(e: jsep.Expression) {\n        const expr = new VMExprEvaluator(this.env, this.callEval(this._startExpressions))\n        return expr.eval(e)\n            ? JDTestCommandStatus.Passed\n            : JDTestCommandStatus.Active\n    }\n\n    private getStart(e: jsep.Expression) {\n        return this._startExpressions.find(r => r.e === e)\n    }\n\n    public async evaluateAsync() {\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        this._status = JDTestCommandStatus.Active\n        this._progress = \"\"\n        switch (testFun.id as JDTestFunctions) {\n            case \"ask\": {\n                this._status = JDTestCommandStatus.RequiresUserInput\n                break\n            }\n            case \"check\": {\n                this._status = this.checkExpression(args[0])\n                break\n            }\n            case \"closeTo\": {\n                const goal = this.getStart(args[1])\n                const error = this.getStart(args[2])\n                const expr = new VMExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[0]) as number\n                if (Math.abs(ev - goal.v) <= error.v)\n                    this._status = JDTestCommandStatus.Passed\n                this._progress = `current: ${pretify(ev)}; goal: ${pretify(\n                    goal.v\n                )}; error: ${pretify(error.v)}`\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                const regSaved = this._startExpressions.find(\n                    r => r.e === args[0]\n                )\n                const regValue = this.env(unparse(args[0]))\n                const status =\n                    regValue &&\n                    regSaved.v &&\n                    ((testFun.id === \"changes\" && regValue !== regSaved.v) ||\n                        (testFun.id === \"increases\" && regValue > regSaved.v) ||\n                        (testFun.id === \"decreases\" && regValue < regSaved.v))\n                        ? JDTestCommandStatus.Passed\n                        : JDTestCommandStatus.Active\n                this._status = status\n                regSaved.v = regValue\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": {\n                const regSaved = this.getStart(args[0])\n                const amtSaved = this.getStart(args[1])\n                const regValue = this.env(unparse(args[0]))\n                if (testFun.id === \"increasesBy\") {\n                    if (regValue >= regSaved.v + amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    } else if (\n                        regValue >= regSaved.v &&\n                        regValue < regSaved.v + amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )}, goal: ${pretify(regSaved.v + amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                } else {\n                    if (regValue <= regSaved.v - amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                        this._progress = \"completed\"\n                    } else if (\n                        regValue <= regSaved.v &&\n                        regValue > regSaved.v - amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )} goal: ${pretify(regSaved.v - amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                }\n                break\n            }\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                this._status = JDTestCommandStatus.Active\n                const regValue = this.env(unparse(args[0]))\n                const beginSaved = this.getStart(args[0])\n                const endSaved = this.getStart(args[1])\n                if (this._rangeComplete === undefined) {\n                    this._rangeComplete = regValue\n                } else {\n                    if (\n                        regValue ===\n                        this._rangeComplete +\n                            (testFun.id == \"stepsUpTo\" ? 1 : -1)\n                    )\n                        this._rangeComplete = regValue\n                    if (this._rangeComplete === endSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    }\n                }\n                if (this._rangeComplete != undefined) {\n                    this._progress =\n                        testFun.id == \"stepsUpTo\"\n                            ? `from ${pretify(beginSaved.v)} up to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                            : `from ${pretify(beginSaved.v)} down to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                }\n                break\n            }\n            case \"events\": {\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev === this._eventsComplete[0]) {\n                        this._eventsComplete.shift()\n                        if (this._eventsComplete.length === 0)\n                            this._status = JDTestCommandStatus.Passed\n                    } else {\n                        this._status = JDTestCommandStatus.Failed\n                    }\n                    this._progress = `got event ${ev}; remaining = [${this._eventsComplete}]`\n                } else {\n                    this._progress = `no events received; remaining = [${this._eventsComplete}]`\n                }\n                break\n            }\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                const event = args[0] as jsep.Identifier\n                this._progress = `waiting for event ${event.name}`\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev !== event.name) {\n                        if (testFun.id === \"nextEvent\")\n                            this._status = JDTestCommandStatus.Failed\n                    } else {\n                        // this._status = JDTestCommandStatus.Passed\n                        this._status = this.checkExpression(\n                            this.command.call.arguments[1]\n                        )\n                    }\n                } else {\n                    this._progress = `no events received; ${this._progress}`\n                }\n                break\n            }\n            case \"assign\": {\n                const expr = new VMExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[1])\n                const reg = args[0] as jsep.Identifier\n                await this.testRunner.serviceTestRunner.writeRegisterAsync(reg.name, ev)\n                this._status = JDTestCommandStatus.Passed\n                this._progress = `wrote ${ev} to register ${reg.name}`\n            }\n        }\n\n        function pretify(v: number) {\n            return roundWithPrecision(v, 3)\n        }\n    }\n}\n\nexport interface JDCommandOutput {\n    message: string\n    progress: string\n}\n\nexport class JDTestCommandRunner extends JDEventSource {\n    private _status = JDTestCommandStatus.NotReady\n    private _output: JDCommandOutput = { message: \"\", progress: \"\" }\n    private _commandEvaluator: JDCommandEvaluator = null\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n        super()\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestCommandStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestCommandStatus.Failed &&\n            this.status !== JDTestCommandStatus.Passed\n        )\n    }\n\n    get isActive(): boolean {\n        return (\n            this.status === JDTestCommandStatus.Active ||\n            this.status === JDTestCommandStatus.RequiresUserInput\n        )\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: JDCommandOutput) {\n        if (\n            !this._output ||\n            this._output.message !== value.message ||\n            this._output.progress !== value.progress\n        ) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.status = JDTestCommandStatus.NotReady\n        this.output = { message: \"\", progress: \"\" }\n        this._commandEvaluator = null\n    }\n\n    async startAsync() {\n        this.status = JDTestCommandStatus.Active\n        this._commandEvaluator = undefined\n        await this.envChangeAsync()\n    }\n\n    async envChangeAsync() {\n        if (this.isActive) {\n            if (!this._commandEvaluator) {\n                this._commandEvaluator = new JDCommandEvaluator(\n                    this.testRunner,\n                    this.command\n                )\n                try {\n                    this._commandEvaluator.start()\n                } catch (e) {\n                    // we will try again on next environment change\n                    this._commandEvaluator = undefined\n                }\n            } \n            if (this._commandEvaluator) {\n                try {\n                    await this._commandEvaluator.evaluateAsync()\n                    const newOutput: JDCommandOutput = {\n                        message: this._commandEvaluator.prompt,\n                        progress: this._commandEvaluator.progress,\n                    }\n                    this.output = newOutput\n                    if (\n                        this._commandEvaluator.status ===\n                        JDTestCommandStatus.RequiresUserInput\n                    )\n                        this.status = JDTestCommandStatus.RequiresUserInput\n                    else \n                        await this.finishAsync(this._commandEvaluator.status)\n                } catch (e) {\n                    // show still be in the active state\n                }\n            }\n        }\n    }\n\n    async cancelAsync() {\n        await this.finishAsync(JDTestCommandStatus.Failed)\n    }\n\n    async finishAsync(s: JDTestCommandStatus) {\n        if (\n            this.isActive &&\n            (s === JDTestCommandStatus.Failed ||\n                s === JDTestCommandStatus.Passed)\n        ) {\n            this.status = s\n            await this.testRunner.finishCommandAsync()\n        }\n    }\n}\n\nexport class JDTestRunner extends JDEventSource {\n    private _status = JDTestStatus.NotReady\n    private _commandIndex: number\n    private _currentEvent: string\n    public readonly commands: JDTestCommandRunner[]\n\n    constructor(\n        public readonly serviceTestRunner: JDServiceTestRunner,\n        private readonly testSpec: jdtest.TestSpec\n    ) {\n        super()\n        this.commands = testSpec.testCommands.map(\n            c => new JDTestCommandRunner(this, c)\n        )\n    }\n\n    reset() {\n        if (this.status !== JDTestStatus.NotReady) {\n            this._status = JDTestStatus.NotReady\n            this._commandIndex = undefined\n            this._currentEvent = undefined\n            this.commands.forEach(t => t.reset())\n            this.emit(CHANGE)\n        }\n    }\n\n    async startAsync() {\n        this.reset()\n        this.status = JDTestStatus.Active\n        this._commandIndex = 0\n        await this.serviceTestRunner.refreshEnvironmentAsync()\n    }\n\n    next() {\n        this.serviceTestRunner.next()\n    }\n\n    cancel() {\n        this.finish(JDTestStatus.Failed)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestStatus.Failed &&\n            this.status !== JDTestStatus.Passed\n        )\n    }\n\n    get description() {\n        return this.testSpec.description\n    }\n\n    get prompt() {\n        return this.testSpec.prompt\n    }\n\n    finish(newStatus: JDTestStatus) {\n        if (this.status === JDTestStatus.Active) {\n            this.status = newStatus\n        }\n    }\n\n    private getCommandIndex() {\n        return this._commandIndex\n    }\n\n    private async setCommandIndex(index: number) {\n        if (this._commandIndex !== index) {\n            this._commandIndex = index\n            await this.currentCommand?.startAsync()\n            this.emit(CHANGE)\n        }\n    }\n\n    public async envChangeAsync() {\n        if (this.status === JDTestStatus.Active) {\n            await this.currentCommand?.envChangeAsync()\n        }\n    }\n\n    public async eventChangeAsync(event: string) {\n        if (this.status === JDTestStatus.Active) {\n            this._currentEvent = event\n            await this.envChangeAsync()\n        }\n    }\n\n    public get hasEvent() {\n        return this._currentEvent != undefined\n    }\n\n    public consumeEvent() {\n        const ret = this._currentEvent\n        this._currentEvent = undefined\n        return ret\n    }\n\n    public async finishCommandAsync() {\n        if (this.getCommandIndex() === this.commands.length - 1)\n            this.finish(commandStatusToTestStatus(this.currentCommand.status))\n        else \n            await this.setCommandIndex(this.getCommandIndex()+1)\n    }\n\n    get currentCommand() {\n        return this.commands[this._commandIndex]\n    }\n}\n\nexport class JDServiceTestRunner extends JDServiceClient {\n    private _testIndex = -1\n    private _env: VMServiceEnvironment;\n    public readonly tests: JDTestRunner[]\n\n    constructor(\n        public readonly testSpec: jdtest.ServiceTestSpec,\n        service: JDService\n    ) {\n        super(service)\n        this._env = new VMServiceEnvironment(service)\n        this.tests = this.testSpec.tests.map(t => new JDTestRunner(this, t))\n        this.testSpec.tests.forEach(t => {\n            t.events.forEach(s => {\n                let eventName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerEvent(eventName, async () => { \n                    try {\n                        await this.currentTest?.eventChangeAsync(eventName) \n                    } catch (e)\n                    {\n\n                    }\n                })\n            })\n            t.registers.forEach(s => {\n                let regName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerRegister(regName, async () => { \n                    try {\n                        await this.currentTest?.envChangeAsync() \n                    } catch(e){\n\n                    }\n                })\n            })\n        })\n        this.start()\n    }\n\n    public async refreshEnvironmentAsync() {\n        await this._env.refreshRegistersAsync();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        return this._env.lookup(e)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async writeRegisterAsync(regName: string, val: any) {\n        await this._env.writeRegisterAsync(regName, val)\n    }\n\n    private get testIndex() {\n        return this._testIndex\n    }\n\n    private set testIndex(index: number) {\n        if (this._testIndex !== index) {\n            // stop previous test if needed\n            const ct = this.currentTest\n            if (ct) {\n                if (ct.status === JDTestStatus.Active) {\n                    ct.cancel()\n                }\n            }\n            // update test\n            this._testIndex = index\n            this.emit(CHANGE)\n        }\n    }\n\n    public stats() {\n        const r = {\n            total: this.tests.length,\n            success: 0,\n            failed: 0,\n            indeterminate: 0,\n        }\n        for (const test of this.tests) {\n            switch (test.status) {\n                case JDTestStatus.Failed:\n                    r.failed++\n                    break\n                case JDTestStatus.Passed:\n                    r.success++\n                    break\n                default:\n                    r.indeterminate++\n            }\n        }\n        return r\n    }\n\n    public start() {\n        this.tests.forEach(t => t.reset())\n        this.testIndex = 0\n    }\n\n    public next() {\n        this.testIndex++\n    }\n\n    get currentTest() {\n        return this.tests[this._testIndex]\n    }\n\n    set currentTest(test: JDTestRunner) {\n        const index = this.tests.indexOf(test)\n        if (index > -1) this.testIndex = index\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport useServiceClient from \"../useServiceClient\"\nimport {\n    Grid,\n    Button,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Typography,\n    Card,\n    CardContent,\n    CardActions,\n    Box,\n    ListSubheader,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    JDServiceTestRunner,\n    JDTestRunner,\n    JDTestStatus,\n    JDTestCommandRunner,\n    JDTestCommandStatus,\n} from \"../../../jacdac-ts/src/test/testrunner\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\n\nfunction TestStatusIcon(props: { test: JDTestRunner }) {\n    const { test } = props\n    const status = useChange(test, t => t.status)\n\n    switch (status) {\n        case JDTestStatus.Active:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction TestListItem(props: {\n    test: JDTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { test, currentTest, onSelectTest } = props\n    const description = useChange(test, t => t.description)\n    const selected = test === currentTest\n    const handleSelectTest = () => onSelectTest(test)\n\n    return (\n        <ListItem selected={selected} button onClick={handleSelectTest}>\n            <ListItemIcon>\n                <TestStatusIcon test={test} />\n            </ListItemIcon>\n            <ListItemText primary={description} />\n        </ListItem>\n    )\n}\n\nfunction TestList(props: {\n    testRunner: JDServiceTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { testRunner, currentTest, onSelectTest } = props\n    const { tests } = testRunner\n    const stats = useChange(testRunner, r => r.stats())\n\n    return (\n        <Card>\n            <CardContent>\n                <List\n                    dense={true}\n                    subheader={\n                        <ListSubheader>\n                            {`${stats.total} tests, ${stats.success} success, ${stats.failed} failed`}\n                        </ListSubheader>\n                    }\n                >\n                    {tests?.map((test, i) => (\n                        <TestListItem\n                            key={i}\n                            test={test}\n                            currentTest={currentTest}\n                            onSelectTest={onSelectTest}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction CommandStatusIcon(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const status = useChange(command, c => c.status)\n\n    switch (status) {\n        case JDTestCommandStatus.Active:\n        case JDTestCommandStatus.RequiresUserInput:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestCommandStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestCommandStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction CommandListItem(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const { message, progress } = useChange(command, c => c.output)\n    const status = useChange(command, c => c.status)\n    const handleAnswer = (status: JDTestCommandStatus) => () =>\n        command.finish(status)\n    return (\n        <>\n            <ListItem selected={status === JDTestCommandStatus.Active}>\n                <ListItemIcon>\n                    <CommandStatusIcon command={command} />\n                </ListItemIcon>\n                <ListItemText\n                    primary={message}\n                    secondary={progress}\n                />\n            </ListItem>\n            {status === JDTestCommandStatus.RequiresUserInput && (\n                <ListItem>\n\n                    <ListItemSecondaryAction>\n                        <Grid container spacing={1}>\n                            <Grid item><Button\n                                variant=\"outlined\"\n                                onClick={handleAnswer(JDTestCommandStatus.Passed)}\n                            >\n                                Yes\n                    </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleAnswer(JDTestCommandStatus.Failed)}\n                                >\n                                    No\n                    </Button>\n                            </Grid>\n                        </Grid>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )}\n\n        </>\n    )\n}\n\nfunction ActiveTest(props: { test: JDTestRunner }) {\n    const { test } = props\n    const { commands } = test\n    const status = useChange(test, t => t.status)\n    const handleRestart = () => test.start()\n    const handleNext = () => test.next()\n    // auto start\n    useEffect(() => test.start(), [test])\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h5\">DO</Typography>\n                <Box m={2}>\n                    <Typography variant=\"body1\">{test.prompt}</Typography>\n                </Box>\n                <Typography variant=\"h5\">TEST</Typography>\n                <List dense={false}>\n                    {commands.map((cmd, i) => (\n                        <CommandListItem key={i} command={cmd} />\n                    ))}\n                </List>\n                {status === JDTestStatus.Passed && (\n                    <Alert severity=\"success\">Test passed</Alert>\n                )}\n                {status === JDTestStatus.Failed && (\n                    <Alert severity=\"error\">Test failed</Alert>\n                )}\n            </CardContent>\n            <CardActions>\n                <Button\n                    variant={\n                        status === JDTestStatus.Active\n                            ? \"outlined\"\n                            : \"contained\"\n                    }\n                    color={\n                        status === JDTestStatus.Passed ? \"primary\" : undefined\n                    }\n                    onClick={handleNext}\n                >\n                    Next\n                </Button>\n                <Button variant=\"outlined\" onClick={handleRestart}>\n                    Restart\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceTestRunner(props: {\n    service: JDService\n    serviceTest?: jdtest.ServiceTestSpec\n}) {\n    const {\n        service,\n        serviceTest = serviceTestFromServiceClass(service.serviceClass),\n    } = props\n    const factory = useCallback(\n        service => serviceTest && new JDServiceTestRunner(serviceTest, service),\n        [service, serviceTest]\n    )\n    const testRunner = useServiceClient(service, factory)\n    const currentTest = useChange(testRunner, t => t?.currentTest)\n    const handleSelectTest = (test: JDTestRunner) => {\n        testRunner.currentTest = test\n    }\n\n    if (!serviceTest)\n        return (\n            <Alert severity=\"warning\">\n                Sorry, there are no tests available for service{\" \"}\n                {service.specification.name}.\n            </Alert>\n        )\n\n    if (!testRunner) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={3}>\n                <TestList\n                    testRunner={testRunner}\n                    currentTest={currentTest}\n                    onSelectTest={handleSelectTest}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                {currentTest ? <ActiveTest test={currentTest} /> : <Alert severity={\"info\"}>\n                    Select a test to get started.\n                </Alert>}\n            </Grid>\n            {service && (\n                <Grid item xs={3}>\n                    <DashboardDevice\n                        showAvatar={true}\n                        showHeader={true}\n                        device={service.device}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(service: JDService, factory: (service: JDService) => T, deps: React.DependencyList = []) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client;\n}"],"sourceRoot":""}