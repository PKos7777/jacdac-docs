{"version":3,"sources":["webpack:///./src/components/ui/CircularProgressWithLabel.tsx","webpack:///./src/components/alert/DeviceLostAlert.tsx","webpack:///./src/components/firmware/useFirmwareRepos.ts","webpack:///./src/components/firmware/LocalFileFirmwareCard.tsx","webpack:///./src/components/firmware/FirmwareCardGrid.tsx","webpack:///./src/components/UpdateDeviceList.tsx","webpack:///./src/components/firmware/SafeBootAlert.tsx","webpack:///./src/components/tools/Flash.tsx","webpack:///./src/pages/tools/updater.tsx","webpack:///./src/components/firmware/FirmwareCard.tsx","webpack:///./node_modules/@material-ui/icons/DeleteForever.js","webpack:///./src/components/ServiceButton.tsx","webpack:///./src/components/DeviceCard.tsx"],"names":["CircularProgressWithLabel","props","Math","round","value","DeviceLostAlert","device","lost","useEventRaised","LOST","FOUND","dev","useFirmwareRepos","showAllRepos","useContext","JacdacContext","bus","useState","repos","setRepos","devices","DEVICE_CHANGE","filter","announced","bootloaders","hasService","SRV_BOOTLOADER","registers","map","service","register","ControlReg","FirmwareIdentifier","reg","useEffectAsync","mounted","deviceSpecifications","spec","repo","firmwares","refresh","firmwareIdentifier","intValue","undefined","indexOf","push","bootloader","boot","services","serviceClass","bl_announce","Packet","onlyHeader","BootloaderCmd","Info","sendCmdAwaitResponseAsync","resp","jdunpack","console","warn","fw","deviceSpecificationFromFirmwareIdentifier","unique","id","join","ImportButton","lazy","LOCAL_FILE_SLUG","LocalFileFirmwareCard","slug","downloading","setDownloading","error","setError","useFirmwareBlob","setFirmwareFile","firmwareBlobs","disabled","version","handleFiles","files","file","handleClear","length","blob","name","toString","FirmwareCardGrid","gridBreakpoints","useGridBreakpoints","safeBoot","useChange","b","firmwareRepos","firmwareRepo","UpdateDeviceCard","AppContext","progress","setProgress","blobs","useFirmwareBlobs","firmwareInfo","d","find","update","updateApplicable","flashing","handleFlashing","updateCandidates","flashFirmwareBlob","prog","UpdateDeviceList","connectionState","scanning","setScanning","useDevices","ignoreSelf","ignoreSimulators","isFlashing","some","useMounted","scan","BusState","Connected","log","scanFirmwares","useEffect","subscribe","FIRMWARE_BLOBS_CHANGE","SafeBootAlert","DbContext","db","useSnackbar","enqueueSnackbar","setSafeBoot","handleRecovery","v","clear","variant","Flash","tab","setTab","handleTabChange","event","newValue","a11yProps","Page","FirmwareCard","useLatestReleases","releases","response","release","setRelease","firmwaresExpanded","setFirmwaresExpanded","tag","tag_name","updateAvailable","slice","substr","downloadColor","downloadVariant","handleReleaseChange","ev","target","rel","r","handleGitHubReleaseDownload","fetchReleaseBinary","firmware","ServiceButton","onClick","others","useStyles","makeStyles","createStyles","root","bullet","display","margin","transform","title","fontSize","pos","marginBottom","navigateToService","specification","navigate","shortId","DeviceDescription","description","useRegisterStringValue","DeviceCard","children","action","content","showDeviceId","showDescription","showTemperature","showFirmware","showServices","classes","SRV_CTRL","SRV_LOGGER"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEe,SAASA,yBAAT,CAAmCC,KAAnC,EAAqF;AAChG,sBACI,2DAAC,iEAAD;AAAK,YAAQ,EAAC,UAAd;AAAyB,WAAO,EAAC;AAAjC,kBACI,2DAAC,iEAAD;AAAkB,WAAO,EAAC;AAA1B,KAA4CA,KAA5C,EADJ,eAEI,2DAAC,iEAAD;AACI,OAAG,EAAE,CADT;AAEI,QAAI,EAAE,CAFV;AAGI,UAAM,EAAE,CAHZ;AAII,SAAK,EAAE,CAJX;AAKI,YAAQ,EAAC,UALb;AAMI,WAAO,EAAC,MANZ;AAOI,cAAU,EAAC,QAPf;AAQI,kBAAc,EAAC;AARnB,kBAUI,2DAAC,iEAAD;AAAY,WAAO,EAAC,SAApB;AAA8B,aAAS,EAAC,KAAxC;AAA8C,SAAK,EAAC;AAApD,KAAwEC,IAAI,CAACC,KAAL,CACpEF,KAAK,CAACG,KAD8D,CAAxE,OAVJ,CAFJ,CADJ;AAmBH,C;;;;;;;;ACvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEO,SAASC,eAAT,CAAyBJ,KAAzB,EAAsD;AAAA,MACjDK,MADiD,GACtCL,KADsC,CACjDK,MADiD;AAEzD,MAAMC,IAAI,GAAGC,8EAAc,CAAC,CAACC,2EAAD,EAAOC,4EAAP,CAAD,EAAgBJ,MAAhB,EAAwB,UAAAK,GAAG;AAAA,WAAI,CAAC,EAACA,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEJ,IAAN,CAAL;AAAA,GAA3B,CAA3B;AACA,sBAAO,wHACFA,IAAI,iBAAI,2DAAC,yDAAD;AAAO,YAAQ,EAAC;AAAhB,sBADN,CAAP;AAGH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASK,gBAAT,CAA0BC,YAA1B,EAAkD;AAAA,oBAC7CC,2BAAU,CAAqBC,0BAArB,CADmC;AAAA,MACrDC,GADqD,eACrDA,GADqD;;AAAA,kBAEnCC,yBAAQ,CAAW,EAAX,CAF2B;AAAA,MAEtDC,KAFsD;AAAA,MAE/CC,QAF+C;;AAI7D,MAAMC,OAAO,GAAGZ,yCAAc,CAACa,kCAAD,EAAgBL,GAAhB,EAAqB;AAAA,WAAMA,GAAG,CAACI,OAAJ,GAAcE,MAAd,CAAqB,UAAAX,GAAG;AAAA,aAAIA,GAAG,CAACY,SAAR;AAAA,KAAxB,CAAN;AAAA,GAArB,CAA9B;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACE,MAAR,CAAe,UAAAhB,MAAM;AAAA,WAAIA,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEmB,UAAR,CAAmBC,oCAAnB,CAAJ;AAAA,GAArB,CAApB;AACA,MAAMC,SAAS,GAAGP,OAAO,CACpBE,MADa,CACN,UAAAhB,MAAM;AAAA,WAAI,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEmB,UAAR,CAAmBC,oCAAnB,CAAD,CAAJ;AAAA,GADA,EACyC;AADzC,GAEbE,GAFa,CAET,UAAAtB,MAAM;AAAA;;AAAA,WAAIA,MAAJ,aAAIA,MAAJ,0CAAIA,MAAM,CAAEuB,OAAR,CAAgB,CAAhB,CAAJ,oDAAI,gBAAoBC,QAApB,CAA6BC,+BAAU,CAACC,kBAAxC,CAAJ;AAAA,GAFG,EAGbV,MAHa,CAGN,UAAAW,GAAG;AAAA,WAAI,CAAC,CAACA,GAAN;AAAA,GAHG,CAAlB;AAKAC,2CAAc;AAAA,oGAAC,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPjB,mBADO,GACW,EADX;;AAAA,mBAEPL,YAFO;AAAA;AAAA;AAAA;;AAGPK,mBAAK,GAAGkB,4CAAoB,GAAGR,GAAvB,CAA2B,UAAAS,IAAI;AAAA,uBAAIA,IAAI,CAACC,IAAT;AAAA,eAA/B,CAAR;AAHO;AAAA;;AAAA;AAKDC,uBALC,GAKqB,EALrB,EAMP;;AANO,0DAOgBZ,SAPhB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOIG,sBAPJ;AAAA;AAAA,qBAQGA,QAAQ,CAACU,OAAT,CAAiB,IAAjB,CARH;;AAAA;AASGC,gCATH,GASwBX,QAAQ,CAACY,QATjC;AAUH,kBAAID,kBAAkB,KAAKE,SAAvB,IAAoCJ,SAAS,CAACK,OAAV,CAAkBH,kBAAlB,IAAwC,CAAhF,EACIF,SAAS,CAACM,IAAV,CAAeJ,kBAAf;;AAXD;AAAA;AAAA;;AAAA;AAAA,2DAckBjB,WAdlB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcIsB,wBAdJ;AAeGC,kBAfH,GAeUD,UAAU,CAACE,QAAX,CAAoB;AAAEC,4BAAY,EAAEvB,oCAAcA;AAA9B,eAApB,EAAsD,CAAtD,CAfV;AAgBGwB,yBAhBH,GAgBiBC,yBAAM,CAACC,UAAP,CAAkBC,kCAAa,CAACC,IAAhC,CAhBjB;AAAA;AAAA;AAAA,qBAkBoBP,IAAI,CAACQ,yBAAL,CAA+BL,WAA/B,CAlBpB;;AAAA;AAkBOM,kBAlBP;AAAA,+BAmBoCA,IAAI,CAACC,QAAL,CAAgD,iBAAhD,CAnBpC,EAmBchB,mBAnBd;AAoBC,kBAAIA,mBAAkB,KAAKE,SAAvB,IAAoCJ,SAAS,CAACK,OAAV,CAAkBH,mBAAlB,IAAwC,CAAhF,EACIF,SAAS,CAACM,IAAV,CAAeJ,mBAAf;AArBL;AAAA;;AAAA;AAAA;AAAA;AAwBCiB,qBAAO,CAACC,IAAR;;AAxBD;AAAA;AAAA;;AAAA;AA2BPzC,mBAAK,GAAGqB,SAAS,CAACX,GAAV,CAAc,UAAAgC,EAAE;AAAA;;AAAA,gDAAIC,iEAAyC,CAACD,EAAD,CAA7C,0DAAI,sBAA+CtB,IAAnD;AAAA,eAAhB,EACHhB,MADG,CACI,UAAAgB,IAAI;AAAA,uBAAI,CAAC,CAACA,IAAN;AAAA,eADR,CAAR;;AA3BO;AA8BX,kBAAIH,OAAJ,EACIhB,QAAQ,CAAC2C,+BAAM,CAAC5C,KAAD,CAAP,CAAR;;AA/BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAgCX,CAACE,OAAO,CAACQ,GAAR,CAAY,UAAAjB,GAAG;AAAA,WAAIA,GAAG,CAACoD,EAAR;AAAA,GAAf,EAA2BC,IAA3B,EAAD,EAAoCrC,SAAS,CAACC,GAAV,CAAc,UAAAK,GAAG;AAAA,WAAIA,GAAG,CAAC8B,EAAR;AAAA,GAAjB,EAA6BC,IAA7B,EAApC,EAAyEnD,YAAzE,CAhCW,CAAd;AAiCA,SAAOK,KAAP;AACH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDD;AACA;AACA;AACA;AACA;AACA,IAAM+C,YAAY,gBAAGC,qBAAI,CAAC;AAAA,SAAM,4HAAN;AAAA,CAAD,CAAzB;AAEA,IAAMC,eAAe,GAAG,YAAxB;AAEe,SAASC,qBAAT,GAAiC;AAC5C,MAAMC,IAAI,GAAGF,eAAb;;AAD4C,kBAENlD,yBAAQ,CAAC,KAAD,CAFF;AAAA,MAErCqD,WAFqC;AAAA,MAExBC,cAFwB;;AAAA,mBAGlBtD,yBAAQ,CAAC,EAAD,CAHU;AAAA,MAGrCuD,KAHqC;AAAA,MAG9BC,QAH8B;;AAAA,yBAIDC,mDAAe,CAACL,IAAD,CAJd;AAAA,MAIpCM,eAJoC,oBAIpCA,eAJoC;AAAA,MAInBC,aAJmB,oBAInBA,aAJmB;;AAK5C,MAAMC,QAAQ,GAAGP,WAAjB;AACA,MAAMQ,OAAO,GAAGF,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAG,CAAH,CAAb,CAAmBE,OAAnC;;AAEA,MAAMC,WAAW;AAAA,oGAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,kBADU,GACHD,KAAK,CAAC,CAAD,CADF;;AAAA,mBAEZC,IAFY;AAAA;AAAA;AAAA;;AAAA;AAIRV,4BAAc,CAAC,IAAD,CAAd;AAJQ;AAAA,qBAKFI,eAAe,CAAChC,SAAD,EAAYsC,IAAZ,CALb;;AAAA;AAAA;AAORV,4BAAc,CAAC,KAAD,CAAd;AAPQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXQ,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAYA,MAAMG,WAAW;AAAA,qGAAG;AAAA;AAAA;AAAA;AAAA;AAChB,kBAAI;AACAT,wBAAQ,CAAC,EAAD,CAAR;AACAF,8BAAc,CAAC,IAAD,CAAd;AACAI,+BAAe,CAAChC,SAAD,EAAYA,SAAZ,CAAf;AACH,eAJD,SAKQ;AACJ4B,8BAAc,CAAC,KAAD,CAAd;AACH;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXW,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAWA,sBAAO,8BAAC,uBAAD,qBACH,8BAAC,6BAAD;AACI,SAAK,EAAEb;AADX,IADG,eAGH,8BAAC,8BAAD,QACKG,KAAK,iBAAI,8BAAC,wBAAD;AAAO,YAAQ,EAAC;AAAhB,KAAyBA,KAAzB,CADd,EAEKM,OAAO,iBAAI,8BAAC,6BAAD;AAAY,WAAO,EAAC;AAApB,8BAAoC,4CAAOA,OAAP,CAApC,CAFhB,EAGK,CAAC,EAACF,aAAD,aAACA,aAAD,eAACA,aAAa,CAAEO,MAAhB,CAAD,iBAA2B,8BAAC,uBAAD;AAAM,SAAK;AAAX,KACvBP,aAAa,CAAChD,GAAd,CAAkB,UAAAwD,IAAI;AAAA,wBAAI,8BAAC,2BAAD;AAAU,SAAG,EAAEA,IAAI,CAAC3C;AAApB,oBACvB,8BAAC,+BAAD;AAAc,aAAO,EAAE2C,IAAI,CAACC,IAA5B;AAAkC,eAAS,SAAOD,IAAI,CAAC3C,kBAAL,CAAwB6C,QAAxB,CAAiC,EAAjC;AAAlD,MADuB,CAAJ;AAAA,GAAtB,CADuB,CAHhC,CAHG,eAYH,8BAAC,8BAAD,QACK,CAAChB,WAAD,iBAAgB,8BAAC,2BAAD,qBAAU,8BAAC,YAAD;AAAc,QAAI,EAAE,iBAApB;AAAuC,mBAAe,EAAES;AAAxD,IAAV,CADrB,EAEK,CAACT,WAAD,KAAgBM,aAAhB,aAAgBA,aAAhB,uBAAgBA,aAAa,CAAEO,MAA/B,kBAAyC,8BAAC,yBAAD;AAAQ,YAAQ,EAAEN,QAAlB;AAA4B,WAAO,EAAC,MAApC;AAA2C,mBAAa,OAAxD;AAAiE,WAAO,EAAEK;AAA1E,aAF9C,CAZG,CAAP;AAmBH,C;;;;;AC3DD;AACA;AACA;CAEA;;AACA;AACA;AACA;AACA;AAEe,SAASK,gBAAT,GAA4B;AAAA,oBACvBzE,2BAAU,CAAqBC,0BAArB,CADa;AAAA,MAC/BC,GAD+B,eAC/BA,GAD+B;;AAEvC,MAAMwE,eAAe,GAAGC,6CAAkB,EAA1C;AACA,MAAMC,QAAQ,GAAGC,oCAAS,CAAC3E,GAAD,EAAM,UAAA4E,CAAC;AAAA,WAAIA,CAAC,CAACF,QAAN;AAAA,GAAP,CAA1B;AACA,MAAMG,aAAa,GAAGjF,gBAAgB,CAAC8E,QAAD,CAAtC;AAEA,sBAAO,8BAAC,uBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACH,8BAAC,uBAAD,oBAAUF,eAAV;AAA2B,QAAI,MAA/B;AAAgC,OAAG,EAAC;AAApC,mBACI,8BAAC,qBAAD,OADJ,CADG,EAIFK,aAAa,CAACjE,GAAd,CAAkB,UAAAkE,YAAY;AAAA,wBAAI,8BAAC,uBAAD,oBAAUN,eAAV;AAA2B,UAAI,MAA/B;AAAgC,SAAG,mBAAiBM;AAApD,qBAC/B,8BAAC,+BAAD;AAAc,UAAI,EAAEA;AAApB,MAD+B,CAAJ;AAAA,GAA9B,CAJE,CAAP;AAQH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASC,gBAAT,CAA0B9F,KAA1B,EAEG;AAAA,oBACiBa,2BAAU,CAAqBC,0BAArB,CAD3B;AAAA,MACSC,GADT,eACSA,GADT;;AAAA,MAESV,MAFT,GAEoBL,KAFpB,CAESK,MAFT;;AAAA,qBAGsBQ,2BAAU,CAACkF,6BAAD,CAHhC;AAAA,MAGSvB,QAHT,gBAGSA,QAHT;;AAAA,kBAIiCxD,yBAAQ,CAAC,CAAD,CAJzC;AAAA,MAIQgF,QAJR;AAAA,MAIkBC,WAJlB;;AAKC,MAAMC,KAAK,GAAGC,2CAAgB,EAA9B;AACA,MAAMC,YAAY,GAAGV,oCAAS,CAACrF,MAAD,EAAS,UAAAgG,CAAC;AAAA,WAAIA,CAAC,CAACD,YAAN;AAAA,GAAV,CAA9B;AACA,MAAMjB,IAAI,GAAGiB,YAAY,KAAIF,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEI,IAAP,CAAY,UAAAX,CAAC;AAAA,WAAIS,YAAY,CAAC5D,kBAAb,IAAmCmD,CAAC,CAACnD,kBAAzC;AAAA,GAAb,CAAJ,CAAzB;AACA,MAAM+D,MAAM,GAAGpB,IAAI,IAAIiB,YAAR,IAAwBI,iDAAgB,CAACJ,YAAD,EAAejB,IAAf,CAAvD;AACA,MAAMsB,QAAQ,GAAGf,oCAAS,CAACrF,MAAD,EAAS,UAAAgG,CAAC;AAAA,WAAIA,CAAC,CAACI,QAAN;AAAA,GAAV,CAA1B;;AAEA,MAAMC,cAAc;AAAA,oGAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACfrG,MAAM,CAACoG,QADQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGfR,yBAAW,CAAC,CAAD,CAAX;AACA5F,oBAAM,CAACoG,QAAP,GAAkB,IAAlB,CAJe,CAIS;;AAClBE,8BALS,GAKU,CAACP,YAAD,CALV;AAAA;AAAA,qBAMTQ,kDAAiB,CAAC7F,GAAD,EAAMoE,IAAN,EAAYwB,gBAAZ,EAA8B,UAAAE,IAAI;AAAA,uBAAIZ,WAAW,CAACY,IAAD,CAAf;AAAA,eAAlC,CANR;;AAAA;AAOf;AACAxG,oBAAM,CAAC+F,YAAP,GAAsB1D,SAAtB;AARe;AAAA;;AAAA;AAAA;AAAA;AAUf8B,sBAAQ,aAAR;;AAVe;AAAA;AAYfnE,oBAAM,CAACoG,QAAP,GAAkB,KAAlB;AAZe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdC,cAAc;AAAA;AAAA;AAAA,KAApB;;AAgBA,sBAAO,8BAAC,6BAAD;AAAY,UAAM,EAAErG,MAApB;AACH,gBAAY,EAAE,IADX;AAEH,WAAO,EAAEkG,MAAM,iBAAI,0DAAiBpB,IAAI,CAACN,OAAtB,CAFhB,CAGH;AAHG;AAIH,UAAM,EAAE4B,QAAQ,gBAAG,8BAAC,4CAAD;AAA2B,WAAK,EAAET;AAAlC,MAAH,GACVO,MAAM,gBACF,8BAAC,yBAAD;AAAQ,oBAAW,+BAAnB;AAAmD,cAAQ,EAAEE,QAA7D;AAAuE,aAAO,EAAC,WAA/E;AACE,WAAK,EAAC,SADR;AACkB,aAAO,EAAEC;AAD3B,eADE,GAGFN,YAAY,gBAAG,8BAAC,8BAAD;AAAO,cAAQ,EAAC;AAAhB,qBAAH,GACR1D;AATX,IAAP;AAUH;;AAEc,SAASoE,gBAAT,GAA4B;AAAA,qBACNjG,2BAAU,CAAqBC,0BAArB,CADJ;AAAA,MAC/BC,GAD+B,gBAC/BA,GAD+B;AAAA,MAC1BgG,eAD0B,gBAC1BA,eAD0B;;AAAA,mBAEP/F,yBAAQ,CAAC,KAAD,CAFD;AAAA,MAEhCgG,QAFgC;AAAA,MAEtBC,WAFsB;;AAGvC,MAAM1B,eAAe,GAAGC,6CAAkB,EAA1C;AACA,MAAMC,QAAQ,GAAGC,oCAAS,CAAC3E,GAAD,EAAM,UAAA4E,CAAC;AAAA,WAAIA,CAAC,CAACF,QAAN;AAAA,GAAP,CAA1B;AACA,MAAMtE,OAAO,GAAG+F,qCAAU,CAAC;AAAE5F,aAAS,EAAE,IAAb;AAAmB6F,cAAU,EAAE,IAA/B;AAAqCC,oBAAgB,EAAE,IAAvD;AAA6D5E,sBAAkB,EAAE;AAAjF,GAAD,EAA0F,CAACiD,QAAD,CAA1F,CAAV,CACXpE,MADW,CACJ,UAAAX,GAAG;AAAA,WAAI+E,QAAQ,IAAI,CAAC/E,GAAG,CAACc,UAAJ,CAAeC,oCAAf,CAAjB;AAAA,GADC,CAAhB;AAEA,MAAM4F,UAAU,GAAGlG,OAAO,CAACmG,IAAR,CAAa,UAAA5G,GAAG;AAAA,WAAIA,GAAG,CAAC+F,QAAR;AAAA,GAAhB,CAAnB;AACA,MAAMP,KAAK,GAAGC,2CAAgB,EAA9B;AACA,MAAMjE,OAAO,GAAGqF,qCAAU,EAA1B;;AATuC,WAUxBC,IAVwB;AAAA;AAAA,IAuBvC;;;AAvBuC;AAAA,iGAUvC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ,EAACtB,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEhB,MAAR,KAAkBmC,UAAlB,IAAgCL,QAAhC,IAA4CD,eAAe,IAAIU,4BAAQ,CAACC,SADhF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGIjE,qBAAO,CAACkE,GAAR;AAHJ;AAKQV,yBAAW,CAAC,IAAD,CAAX;AALR;AAAA,qBAMcW,8CAAa,CAAC7G,GAAD,CAN3B;;AAAA;AAAA;AASQ,kBAAGmB,OAAO,EAAV,EACI+E,WAAW,CAAC,KAAD,CAAX;AAVZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAVuC;AAAA;AAAA;;AAwBvCY,4BAAS,CAAC,YAAM;AAAEL,QAAI;AAAI,GAAjB,EAAmB,CAACH,UAAD,EAAaN,eAAb,EAA8Bb,KAA9B,CAAnB,CAAT;AACA2B,4BAAS,CAAC;AAAA,WAAM9G,GAAG,CAAC+G,SAAJ,CAAc,CAAC1G,kCAAD,EAAgB2G,2CAAhB,CAAd,EAAsD;AAAA,aAAMP,IAAI,EAAV;AAAA,KAAtD,CAAN;AAAA,GAAD,EAA4E,EAA5E,CAAT;AAEA,sBAAO,8BAAC,uBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,KACFrG,OAAO,CAACQ,GAAR,CAAY,UAAAtB,MAAM;AAAA,wBAAI,8BAAC,uBAAD;AAAM,SAAG,EAAEA,MAAM,CAACyD,EAAlB;AAAsB,UAAI;AAA1B,OAA+ByB,eAA/B,gBACnB,8BAAC,gBAAD;AAAkB,YAAM,EAAElF;AAA1B,MADmB,CAAJ;AAAA,GAAlB,CADE,CAAP;AAMH,C;;;;;;;;;;;;;;;;;AC5FD;CAEA;;AACA;AACA;CAEA;;AACA;AACA;AAEe,SAAS2H,aAAT,GAAyB;AAAA,oBACpBnH,2BAAU,CAAqBC,0BAArB,CADU;AAAA,MAC5BC,GAD4B,eAC5BA,GAD4B;;AAAA,qBAErBF,2BAAU,CAAiBoH,4BAAjB,CAFW;AAAA,MAE5BC,EAF4B,gBAE5BA,EAF4B;;AAAA,qBAGRC,4CAAW,EAHH;AAAA,MAG5BC,eAH4B,gBAG5BA,eAH4B;;AAAA,kBAIJpH,yBAAQ,CAACD,GAAG,CAAC0E,QAAL,CAJJ;AAAA,MAI7BA,QAJ6B;AAAA,MAInB4C,WAJmB;;AAKpC,MAAM/F,SAAS,GAAG4F,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAE5F,SAAtB;;AAEA,MAAMgG,cAAc;AAAA,oGAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,eADa,GACT,CAAC9C,QADQ;AAEnB4C,yBAAW,CAACE,CAAD,CAAX;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdD,cAAc;AAAA;AAAA;AAAA,KAApB;;AAIA,MAAMrD,WAAW;AAAA,qGAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACV3C,SAAS,CAACkG,KAAV,EADU;;AAAA;AAEhBJ,6BAAe,CAAC,mBAAD,EAAsB;AACjCK,uBAAO,EAAE;AADwB,eAAtB,CAAf;;AAFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXxD,WAAW;AAAA;AAAA;AAAA,KAAjB,CAXoC,CAkBpC;;;AACA4C,4BAAS,CAAC,YAAM;AACZ9G,OAAG,CAAC0E,QAAJ,GAAeA,QAAf;AACA,WAAO,YAAM;AAAE1E,SAAG,CAAC0E,QAAJ,GAAe,KAAf;AAAsB,KAArC;AACH,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;AAKA,sBAAQ,2EACJ,8BAAC,wBAAD;AAAO,YAAQ,EAAC;AAAhB,kBACI,8BAAC,yBAAD;AAAQ,SAAK,EAAEA,QAAf;AAAyB,YAAQ,EAAE6C;AAAnC,IADJ,eAEI,8BAAC,6BAAD;AAAY,aAAS,EAAC,MAAtB;AAA6B,WAAO,EAAC;AAArC,qBAFJ,eAKI,8BAAC,sBAAD;AAAK,MAAE,EAAE;AAAT,kBACI,8BAAC,6BAAD;AAAY,aAAS,EAAC,MAAtB;AAA6B,WAAO,EAAC;AAArC,8SADJ,CALJ,CADI,EAcH7C,QAAQ,iBAAI,8BAAC,wBAAD;AAAO,YAAQ,EAAC;AAAhB,kBACT,8BAAC,yBAAD;AAAQ,QAAI,EAAC,OAAb;AAAqB,WAAO,EAAC,UAA7B;AAAwC,YAAQ,EAAE,CAACnD,SAAnD;AAA8D,WAAO,EAAE2C,WAAvE;AAAoF,aAAS,eAAE,8BAAC,uBAAD;AAA/F,mBADS,eAIT,8BAAC,sBAAD;AAAK,MAAE,EAAE;AAAT,kBACI,8BAAC,6BAAD;AAAY,aAAS,EAAC,MAAtB;AAA6B,WAAO,EAAC;AAArC,kHADJ,CAJS,CAdT,CAAR;AAyBH,C;;AC3DD;AACA;AACA;AACA;CAEA;;AACA;AACA;AAEe,SAASyD,KAAT,GAAiB;AAAA,kBACN1H,yBAAQ,CAAC,CAAD,CADF;AAAA,MACrB2H,GADqB;AAAA,MAChBC,MADgB;;AAE5B,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAoCC,QAApC,EAAyD;AAC7EH,UAAM,CAACG,QAAD,CAAN;AACH,GAFD;;AAIA,sBACI,8BAAC,sBAAD;AAAK,MAAE,EAAE;AAAT,kBACI,8BAAC,+BAAD,OADJ,eAEI,8BAAC,uBAAD;AAAM,SAAK,EAAEJ,GAAb;AAAkB,YAAQ,EAAEE,eAA5B;AAA6C,kBAAW;AAAxD,kBACI,8BAAC,sBAAD;AAAK,SAAK;AAAV,KAA2BG,qCAAS,CAAC,CAAD,CAApC,EADJ,eAEI,8BAAC,sBAAD;AAAK,SAAK;AAAV,KAA6BA,qCAAS,CAAC,CAAD,CAAtC,EAFJ,CAFJ,eAMI,8BAAC,2BAAD;AAAU,SAAK,EAAEL,GAAjB;AAAsB,SAAK,EAAE;AAA7B,kBACI,8BAAC,gBAAD,OADJ,CANJ,eASI,8BAAC,2BAAD;AAAU,SAAK,EAAEA,GAAjB;AAAsB,SAAK,EAAE;AAA7B,kBACI,8BAAC,gBAAD,OADJ,CATJ,eAYI,8BAAC,aAAD,OAZJ,CADJ;AAgBH,C;;AC/BD;AACA;AAEe,SAASM,IAAT,GAAgB;AAC3B,sBAAO,2EACH,6DADG,eAEH,8MAFG,eAOH,8BAAC,KAAD,OAPG,CAAP;AASH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASC,YAAT,CAAsBlJ,KAAtB,EAA+C;AAAA,MAClDoE,IADkD,GACzCpE,KADyC,CAClDoE,IADkD;;AAAA,2BAE3B+E,0EAAiB,CAAC/E,IAAD,CAFU;AAAA,MAExCgF,QAFwC,sBAElDC,QAFkD;;AAAA,kBAGpBrI,sDAAQ,CAAC,KAAD,CAHY;AAAA,MAGnDqD,WAHmD;AAAA,MAGtCC,cAHsC;;AAAA,mBAIhCtD,sDAAQ,CAAC,EAAD,CAJwB;AAAA,MAInDuD,KAJmD;AAAA,MAI5CC,QAJ4C;;AAAA,mBAK5BxD,sDAAQ,CAAC0B,SAAD,CALoB;AAAA,MAKnD4G,OALmD;AAAA,MAK1CC,UAL0C;;AAAA,mBAMRvI,sDAAQ,CAAC,KAAD,CANA;AAAA,MAMnDwI,iBANmD;AAAA,MAMhCC,oBANgC;;AAAA,yBAOfhF,kFAAe,CAACL,IAAD,CAPA;AAAA,MAOlDM,eAPkD,oBAOlDA,eAPkD;AAAA,MAOjCC,aAPiC,oBAOjCA,aAPiC;;AAQ1D,MAAM+E,GAAG,GAAG,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEK,QAAT,KAAqB,EAAjC;AACA,MAAM/E,QAAQ,GAAGP,WAAjB;AACA,MAAMQ,OAAO,GAAGF,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAG,CAAH,CAAb,CAAmBE,OAAnC;AACA,MAAM+E,eAAe,GAAG,CAAC,CAACF,GAAF,IAAS,CAAC,CAAC7E,OAAX,IAAsB6E,GAAG,CAACG,KAAJ,CAAU,CAAV,MAAiBhF,OAAO,CAACiF,MAAR,CAAe,CAAf,EAAkBJ,GAAG,CAACxE,MAAJ,GAAa,CAA/B,CAA/D;AACA,MAAM6E,aAAa,GAAGH,eAAe,GAAG,SAAH,GAAe,SAApD;AACA,MAAMI,eAAe,GAAGJ,eAAe,GAAG,WAAH,GAAiB,MAAxD,CAb0D,CAe1D;;AACA/B,yDAAS,CAAC,YAAM;AACZ,QAAIuB,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAElE,MAAV,IAAoB,CAACoE,OAAzB,EACIC,UAAU,CAACH,QAAQ,CAAC,CAAD,CAAT,CAAV;AACP,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;;AAKA,MAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,EAAD,EAAyD;AACjF,QAAM3B,CAAC,GAAG2B,EAAE,CAACC,MAAH,CAAUhK,KAApB;AACA,QAAMiK,GAAG,GAAGhB,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAE9C,IAAV,CAAe,UAAA+D,CAAC;AAAA,aAAIA,CAAC,CAACV,QAAF,KAAepB,CAAnB;AAAA,KAAhB,CAAZ;AACAgB,cAAU,CAACa,GAAD,CAAV;AACH,GAJD;;AAKA,MAAME,2BAA2B;AAAA,wMAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE5B9F,sBAAQ,CAAC,EAAD,CAAR;AACAF,4BAAc,CAAC,IAAD,CAAd;AAH4B;AAAA,qBAILiG,2EAAkB,CAACnG,IAAD,EAAOsF,GAAP,CAJb;;AAAA;AAItBc,sBAJsB;AAK5B,kBAAIA,QAAJ,EACI9F,eAAe,CAACgF,GAAD,EAAMc,QAAN,CAAf;;AANwB;AAAA;AAS5BlG,4BAAc,CAAC,KAAD,CAAd;AAT4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAA3BgG,2BAA2B;AAAA;AAAA;AAAA,KAAjC;;AAYA,MAAMrF,WAAW;AAAA,yMAAG;AAAA;AAAA;AAAA;AAAA;AAChB,kBAAI;AACAT,wBAAQ,CAAC,EAAD,CAAR;AACAF,8BAAc,CAAC,IAAD,CAAd;AACAI,+BAAe,CAACgF,GAAD,EAAMhH,SAAN,CAAf;AACH,eAJD,SAKQ;AACJ4B,8BAAc,CAAC,KAAD,CAAd;AACH;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXW,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAWA,sBAAO,2DAAC,iEAAD,qBACH,2DAAC,4EAAD;AAA4B,QAAI,EAAEb;AAAlC,IADG,eAEH,2DAAC,iEAAD,QACKG,KAAK,iBAAI,2DAAC,0DAAD;AAAO,YAAQ,EAAC;AAAhB,KAAyBA,KAAzB,CADd,EAEK,CAAC,EAACI,aAAD,aAACA,aAAD,eAACA,aAAa,CAAEO,MAAhB,CAAD,iBAA2B,2DAAC,iEAAD;AAAK,MAAE,EAAE;AAAT,kBAAY,2DAAC,iEAAD;AAAW,YAAQ,EAAEsE,iBAArB;AAAwC,YAAQ,EAAE;AAAA,aAAMC,oBAAoB,CAAC,CAACD,iBAAF,CAA1B;AAAA;AAAlD,kBACpC,2DAAC,iEAAD;AAAkB,cAAU,eAAE,2DAAC,qEAAD;AAA9B,kBACI,2DAAC,iEAAD;AAAY,WAAO,EAAC;AAApB,kBACI,8EAAQ3E,OAAR,CADJ,eAEI,+EAASF,aAAa,CAACO,MAAvB,gBAFJ,CADJ,CADoC,eAOpC,2DAAC,iEAAD,qBACI,2DAAC,kEAAD;AAAM,SAAK;AAAX,KACKP,aAAa,CAAChD,GAAd,CAAkB,UAAAwD,IAAI;AAAA,wBAAI,2DAAC,kEAAD;AAAU,SAAG,EAAEA,IAAI,CAAC3C;AAApB,oBACvB,2DAAC,kEAAD;AAAc,aAAO,EAAE2C,IAAI,CAACC,IAA5B;AACI,eAAS,eAAE,2DAAC,8DAAD;AAAM,UAAE,oBAAkBD,IAAI,CAAC3C,kBAAL,CAAwB6C,QAAxB,CAAiC,EAAjC;AAA1B,gBACDF,IAAI,CAAC3C,kBAAL,CAAwB6C,QAAxB,CAAiC,EAAjC,CADC;AADf,MADuB,CAAJ;AAAA,GAAtB,CADL,CADJ,CAPoC,CAAZ,CAFhC,EAoBK,CAAA+D,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAElE,MAAV,MAAqB,CAArB,iBAA0B,2DAAC,0DAAD;AAAO,YAAQ,EAAC;AAAhB,0BApB/B,EAqBK,CAAC,EAACkE,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAElE,MAAX,CAAD,iBAAsB,2DAAC,oEAAD;AAAiB,aAAS,EAAE,IAA5B;AAAkC,cAAU,EAAC,kBAA7C;AAAgE,SAAK,EAAEwE,GAAvE;AAA4E,YAAQ,EAAEO;AAAtF,KAClBb,QADkB,aAClBA,QADkB,uBAClBA,QAAQ,CAAEzH,GAAV,CAAc,UAAAyI,GAAG;AAAA,wBAAI,2DAAC,kEAAD;AAAU,SAAG,EAAEA,GAAG,CAACT,QAAnB;AAA6B,WAAK,EAAES,GAAG,CAACT;AAAxC,OAAmDS,GAAG,CAACT,QAAvD,CAAJ;AAAA,GAAjB,CADkB,CArB3B,CAFG,eA2BH,2DAAC,kEAAD,QACK,CAACtF,WAAD,IAAgBiF,OAAhB,iBAA2B,2DAAC,kEAAD;AAAQ,YAAQ,EAAEjF,WAAlB;AAA+B,SAAK,EAAE0F,aAAtC;AAAqD,WAAO,EAAEC,eAA9D;AAA+E,kDAA0C5F,IAAzH;AAAiI,WAAO,EAAEkG;AAA1I,gBADhC,EAIK,CAACjG,WAAD,KAAgBM,aAAhB,aAAgBA,aAAhB,uBAAgBA,aAAa,CAAEO,MAA/B,kBAAyC,2DAAC,kEAAD;AAAQ,YAAQ,EAAEN,QAAlB;AAA4B,WAAO,EAAC,MAApC;AAA2C,mBAAa,OAAxD;AAAiE,WAAO,EAAEK;AAA1E,aAJ9C,EAOKZ,WAAW,iBAAI,2DAAC,oEAAD,OAPpB,CA3BG,CAAP;AAqCH,C;;;;;;;;ACjGY;;AAEb,6BAA6B,mBAAO,CAAC,MAA8C;;AAEnF,8BAA8B,mBAAO,CAAC,MAA+C;;AAErF;AACA;AACA,CAAC;AACD;;AAEA,oCAAoC,mBAAO,CAAC,MAAO;;AAEnD,4CAA4C,mBAAO,CAAC,MAAuB;;AAE3E;AACA;AACA,CAAC;;AAED,2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAGe,SAASoG,aAAT,CAAuBzK,KAAvB,EAA0F;AAAA,MAC7F4B,OAD6F,GAC7D5B,KAD6D,CAC7F4B,OAD6F;AAAA,MACpF8I,OADoF,GAC7D1K,KAD6D,CACpF0K,OADoF;AAAA,MACxEC,MADwE,2DAC7D3K,KAD6D;;AAErG,sBAAO,8BAAC,kCAAD,oBACC2K,MADD;AAEH,WAAO,EAAC,WAFL;AAGH,SAAK,EAAC,SAHH;AAIH,WAAO,EAAED;AAJN,MAKF9I,OAAO,CAACwD,IALN,CAAP;AAOH,C;;;;;;;;;;;;;;;;;;;;;;;CCbD;;CAEA;;CAEA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,IAAMwF,SAAS,GAAGC,qCAAU,CAAC;AAAA,SAAMC,uCAAY,CAAC;AAC5CC,QAAI,EAAE,EADsC;AAG5CC,UAAM,EAAE;AACJC,aAAO,EAAE,cADL;AAEJC,YAAM,EAAE,OAFJ;AAGJC,eAAS,EAAE;AAHP,KAHoC;AAQ5CC,SAAK,EAAE;AACHC,cAAQ,EAAE;AADP,KARqC;AAW5CC,OAAG,EAAE;AACDC,kBAAY,EAAE;AADb;AAXuC,GAAD,CAAlB;AAAA,CAAD,CAA5B;;AAgBA,SAASC,iBAAT,CAA2B5J,OAA3B,EAA+C;AAC3C,MAAMQ,IAAI,GAAGR,OAAO,CAAC6J,aAArB;AACA,MAAIrJ,IAAJ,EACIsJ,wCAAQ,gBAActJ,IAAI,CAACuJ,OAAnB,OAAR,CAHuC,CAGA;AAC9C;;AAED,SAASC,iBAAT,CAA2B5L,KAA3B,EAAwD;AAAA;;AAAA,MAC5CK,MAD4C,GACjCL,KADiC,CAC5CK,MAD4C;AAEpD,MAAMwB,QAAQ,GAAGxB,MAAH,aAAGA,MAAH,0CAAGA,MAAM,CAAEuB,OAAR,CAAgB,CAAhB,CAAH,oDAAG,gBAAoBC,QAApB,CAA6BC,+BAAU,CAAC8J,iBAAxC,CAAjB;AACA,MAAMC,WAAW,GAAGC,0DAAsB,CAACjK,QAAD,CAA1C;AACA,sBAAO,4CAAOgK,WAAW,IAAI,EAAtB,CAAP;AACH;;AAEc,SAASE,UAAT,CAAoB/L,KAApB,EAUZ;AAAA,MACSK,MADT,GAGsEL,KAHtE,CACSK,MADT;AAAA,MACiB2L,QADjB,GAGsEhM,KAHtE,CACiBgM,QADjB;AAAA,MAC2BC,MAD3B,GAGsEjM,KAHtE,CAC2BiM,MAD3B;AAAA,MACmCC,OADnC,GAGsElM,KAHtE,CACmCkM,OADnC;AAAA,MAEKC,YAFL,GAGsEnM,KAHtE,CAEKmM,YAFL;AAAA,MAGKC,eAHL,GAGsEpM,KAHtE,CAGKoM,eAHL;AAAA,MAGsBC,eAHtB,GAGsErM,KAHtE,CAGsBqM,eAHtB;AAAA,MAGuCC,YAHvC,GAGsEtM,KAHtE,CAGuCsM,YAHvC;AAAA,MAGqDC,YAHrD,GAGsEvM,KAHtE,CAGqDuM,YAHrD;AAIC,MAAMC,OAAO,GAAG5B,SAAS,EAAzB;AACA,MAAM7H,QAAQ,GAAG2C,oCAAS,CAACrF,MAAD,EAAS;AAAA,WAAMA,MAAM,CAAC0C,QAAP,GACpC1B,MADoC,CAC7B,UAAAO,OAAO;AAAA,aAAIA,OAAO,CAACoB,YAAR,IAAwByJ,8BAAxB,IAAoC7K,OAAO,CAACoB,YAAR,IAAwB0J,gCAAhE;AAAA,KADsB,CAAN;AAAA,GAAT,CAA1B;AAGA,sBACI,8BAAC,uBAAD;AAAM,aAAS,EAAEF,OAAO,CAACzB;AAAzB,kBACI,8BAAC,mCAAD;AAAkB,UAAM,EAAE1K,MAA1B;AACI,gBAAY,EAAE8L,YADlB;AAEI,mBAAe,EAAEE,eAFrB;AAGI,gBAAY,EAAEC,YAHlB;AAII,aAAS,EAAE;AAJf,IADJ,EAMK,CAACF,eAAe,IAAIF,OAApB,kBACG,8BAAC,8BAAD,qBACK,8BAAC,0CAAD;AAAiB,UAAM,EAAE7L;AAAzB,IADL,EAEK+L,eAAe,iBAAI,8BAAC,iBAAD;AAAmB,UAAM,EAAE/L;AAA3B,IAFxB,EAGK6L,OAHL,CAPR,eAYI,8BAAC,8BAAD,QACKD,MADL,EAEKM,YAAY,KAAIxJ,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEpB,GAAV,CAAc,UAAAC,OAAO;AAAA,wBAAI,8BAAC,aAAD;AAAe,SAAG,EAAEA,OAAO,CAACkC,EAA5B;AAAgC,aAAO,EAAElC,OAAzC;AAAkD,aAAO,EAAE;AAAA,eAAM4J,iBAAiB,CAAC5J,OAAD,CAAvB;AAAA;AAA3D,MAAJ;AAAA,GAArB,CAAJ,CAFjB,CAZJ,EAgBKoK,QAhBL,CADJ;AAoBH,C","file":"component---src-pages-tools-updater-tsx-d814f2d2881ca29b88b0.js","sourcesContent":["import React from \"react\"\nimport { CircularProgressProps, Box, CircularProgress, Typography } from \"@material-ui/core\";\n\nexport default function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}","import React from \"react\";\nimport { LOST, FOUND } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\";\nimport useEventRaised from \"../../jacdac/useEventRaised\";\nimport Alert from \"../ui/Alert\";\n\nexport function DeviceLostAlert(props: { device: JDDevice }) {\n    const { device } = props;\n    const lost = useEventRaised([LOST, FOUND], device, dev => !!dev?.lost)\n    return <>\n        {lost && <Alert severity=\"info\">Device lost...</Alert>}\n    </>\n}","import { useContext, useState } from \"react\";\nimport { deviceSpecificationFromFirmwareIdentifier, deviceSpecifications } from \"../../../jacdac-ts/src/jdom/spec\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useEffectAsync from \"../useEffectAsync\";\nimport { unique } from \"../../../jacdac-ts/src/jdom/utils\";\nimport { BootloaderCmd, ControlReg, DEVICE_CHANGE, SRV_BOOTLOADER } from \"../../../jacdac-ts/src/jdom/constants\";\nimport useEventRaised from \"../../jacdac/useEventRaised\";\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\";\n\nexport default function useFirmwareRepos(showAllRepos?: boolean) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [repos, setRepos] = useState<string[]>([])\n\n    const devices = useEventRaised(DEVICE_CHANGE, bus, () => bus.devices().filter(dev => dev.announced))\n    const bootloaders = devices.filter(device => device?.hasService(SRV_BOOTLOADER));\n    const registers = devices\n        .filter(device => !device?.hasService(SRV_BOOTLOADER)) // not a bootloader\n        .map(device => device?.service(0)?.register(ControlReg.FirmwareIdentifier))\n        .filter(reg => !!reg);\n\n    useEffectAsync(async (mounted) => {\n        let repos: string[] = [];\n        if (showAllRepos)\n            repos = deviceSpecifications().map(spec => spec.repo);\n        else {\n            const firmwares: number[] = [];\n            // ask firmware registers\n            for (const register of registers) {\n                await register.refresh(true)\n                const firmwareIdentifier = register.intValue;\n                if (firmwareIdentifier !== undefined && firmwares.indexOf(firmwareIdentifier) < 0)\n                    firmwares.push(firmwareIdentifier);\n            }\n            // ask bootloaders\n            for (const bootloader of bootloaders) {\n                const boot = bootloader.services({ serviceClass: SRV_BOOTLOADER })[0];\n                const bl_announce = Packet.onlyHeader(BootloaderCmd.Info)\n                try {\n                    const resp = await boot.sendCmdAwaitResponseAsync(bl_announce);\n                    const [, , , firmwareIdentifier] = resp.jdunpack<[number, number, number, number]>(\"u32 u32 u32 u32\");\n                    if (firmwareIdentifier !== undefined && firmwares.indexOf(firmwareIdentifier) < 0)\n                        firmwares.push(firmwareIdentifier);\n                }\n                catch (e) {\n                    console.warn(`bootloader firmware identifier failed`, e)\n                }\n            }\n            repos = firmwares.map(fw => deviceSpecificationFromFirmwareIdentifier(fw)?.repo)\n                .filter(repo => !!repo);\n        }\n        if (mounted)\n            setRepos(unique(repos))\n    }, [devices.map(dev => dev.id).join(), registers.map(reg => reg.id).join(), showAllRepos])\n    return repos;\n}","import React, { lazy, useState } from \"react\"\nimport { Button, Card, CardHeader, CardActions, CardContent, ListItem, List, ListItemText, Typography } from \"@material-ui/core\";\nimport { useFirmwareBlob } from \"./useFirmwareBlobs\";\nimport Alert from \"../ui/Alert\";\nimport Suspense from \"../ui/Suspense\"\nconst ImportButton = lazy(() => import(\"../ImportButton\"))\n\nconst LOCAL_FILE_SLUG = \"local file\";\n\nexport default function LocalFileFirmwareCard() {\n    const slug = LOCAL_FILE_SLUG;\n    const [downloading, setDownloading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const { setFirmwareFile, firmwareBlobs } = useFirmwareBlob(slug)\n    const disabled = downloading;\n    const version = firmwareBlobs?.[0].version\n\n    const handleFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setDownloading(true)\n                await setFirmwareFile(undefined, file)\n            } finally {\n                setDownloading(false)\n            }\n        }\n    }\n\n    const handleClear = async () => {\n        try {\n            setError(\"\")\n            setDownloading(true)\n            setFirmwareFile(undefined, undefined)\n        }\n        finally {\n            setDownloading(false)\n        }\n    }\n\n    return <Card>\n        <CardHeader\n            title={slug} />\n        <CardContent>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {version && <Typography variant=\"body2\">version <code>{version}</code></Typography>}\n            {!!firmwareBlobs?.length && <List dense>\n                {firmwareBlobs.map(blob => <ListItem key={blob.firmwareIdentifier}>\n                    <ListItemText primary={blob.name} secondary={`0x${blob.firmwareIdentifier.toString(16)}`} />\n                </ListItem>)}\n            </List>}\n        </CardContent>\n        <CardActions>\n            {!downloading && <Suspense><ImportButton text={\"Import UF2 file\"} onFilesUploaded={handleFiles} /></Suspense>}\n            {!downloading && firmwareBlobs?.length && <Button disabled={disabled} variant=\"text\" arial-label={\"Clear\"} onClick={handleClear}>\n                Clear\n            </Button>}\n        </CardActions>\n    </Card>\n}","import { Grid, Switch } from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport useGridBreakpoints from \"../useGridBreakpoints\";\nimport FirmwareCard from \"./FirmwareCard\";\n// tslint:disable-next-line: no-submodule-imports\nimport useFirmwareRepos from \"./useFirmwareRepos\";\nimport LocalFileFirmwareCard from \"./LocalFileFirmwareCard\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useChange from \"../../jacdac/useChange\";\n\nexport default function FirmwareCardGrid() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const gridBreakpoints = useGridBreakpoints()\n    const safeBoot = useChange(bus, b => b.safeBoot);\n    const firmwareRepos = useFirmwareRepos(safeBoot)\n\n    return <Grid container spacing={2}>\n        <Grid {...gridBreakpoints} item key=\"localfile\">\n            <LocalFileFirmwareCard />\n        </Grid>\n        {firmwareRepos.map(firmwareRepo => <Grid {...gridBreakpoints} item key={`firmwarerepo${firmwareRepo}`}>\n            <FirmwareCard slug={firmwareRepo} />\n        </Grid>)}\n    </Grid>\n}\n","import { Button, Grid } from \"@material-ui/core\"\nimport { Alert } from \"@material-ui/lab\"\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { DEVICE_CHANGE, FIRMWARE_BLOBS_CHANGE, SRV_BOOTLOADER } from \"../../jacdac-ts/src/jdom/constants\"\nimport { JDDevice } from \"../../jacdac-ts/src/jdom/device\"\nimport { scanFirmwares, flashFirmwareBlob, updateApplicable } from \"../../jacdac-ts/src/jdom/flashing\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\";\nimport CircularProgressWithLabel from \"./ui/CircularProgressWithLabel\"\nimport DeviceCard from \"./DeviceCard\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport { BusState } from \"../../jacdac-ts/src/jdom/bus\"\nimport AppContext from \"./AppContext\"\nimport useChange from \"../jacdac/useChange\"\nimport useDevices from \"./hooks/useDevices\"\nimport useFirmwareBlobs from \"./firmware/useFirmwareBlobs\"\nimport ConnectAlert from \"./alert/ConnectAlert\"\nimport useMounted from \"./hooks/useMounted\"\n\nfunction UpdateDeviceCard(props: {\n    device: JDDevice\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { device } = props\n    const { setError } = useContext(AppContext)\n    const [progress, setProgress] = useState(0)\n    const blobs = useFirmwareBlobs();\n    const firmwareInfo = useChange(device, d => d.firmwareInfo);\n    const blob = firmwareInfo && blobs?.find(b => firmwareInfo.firmwareIdentifier == b.firmwareIdentifier)\n    const update = blob && firmwareInfo && updateApplicable(firmwareInfo, blob);\n    const flashing = useChange(device, d => d.flashing);\n\n    const handleFlashing = async () => {\n        if (device.flashing) return;\n        try {\n            setProgress(0)\n            device.flashing = true; // don't refresh registers while flashing\n            const updateCandidates = [firmwareInfo]\n            await flashFirmwareBlob(bus, blob, updateCandidates, prog => setProgress(prog))\n            // trigger info\n            device.firmwareInfo = undefined;\n        } catch (e) {\n            setError(e);\n        } finally {\n            device.flashing = false;\n        }\n    }\n\n    return <DeviceCard device={device}\n        showFirmware={true}\n        content={update && <span>Update to {blob.version}</span>}\n        // tslint:disable-next-line: react-this-binding-issue\n        action={flashing ? <CircularProgressWithLabel value={progress} />\n            : update\n                ? <Button aria-label=\"deploy new firmware to device\" disabled={flashing} variant=\"contained\"\n                    color=\"primary\" onClick={handleFlashing}>Flash</Button>\n                : firmwareInfo ? <Alert severity=\"success\">Up to date!</Alert>\n                    : undefined} />\n}\n\nexport default function UpdateDeviceList() {\n    const { bus, connectionState } = useContext<JacdacContextProps>(JacdacContext)\n    const [scanning, setScanning] = useState(false)\n    const gridBreakpoints = useGridBreakpoints()\n    const safeBoot = useChange(bus, b => b.safeBoot);\n    const devices = useDevices({ announced: true, ignoreSelf: true, ignoreSimulators: true, firmwareIdentifier: true }, [safeBoot])\n        .filter(dev => safeBoot || !dev.hasService(SRV_BOOTLOADER));\n    const isFlashing = devices.some(dev => dev.flashing);\n    const blobs = useFirmwareBlobs();\n    const mounted = useMounted();\n    async function scan() {\n        if (!blobs?.length || isFlashing || scanning || connectionState != BusState.Connected)\n            return;\n        console.log(`start scanning bus`)\n        try {\n            setScanning(true)\n            await scanFirmwares(bus)\n        }\n        finally {\n            if(mounted())\n                setScanning(false)\n        }\n    }\n    // load indexed db file once\n    useEffect(() => { scan() }, [isFlashing, connectionState, blobs])\n    useEffect(() => bus.subscribe([DEVICE_CHANGE, FIRMWARE_BLOBS_CHANGE], () => scan()), [])\n\n    return <Grid container spacing={2}>\n        {devices.map(device => <Grid key={device.id} item {...gridBreakpoints}>\n            <UpdateDeviceCard device={device} />\n        </Grid>)}\n    </Grid>\n\n}","import { Box, Button, Switch, Typography } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\n// tslint:disable-next-line: no-submodule-imports\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport Alert from \"../ui/Alert\";\nimport DbContext, { DbContextProps } from \"../DbContext\";\n// tslint:disable-next-line: match-default-export-name tslint:disable-next-line: no-submodule-imports\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { useSnackbar } from \"notistack\";\n\nexport default function SafeBootAlert() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { db } = useContext<DbContextProps>(DbContext)\n    const { enqueueSnackbar } = useSnackbar();\n    const [safeBoot, setSafeBoot] = useState(bus.safeBoot);\n    const firmwares = db?.firmwares;\n\n    const handleRecovery = async () => {\n        const v = !safeBoot;\n        setSafeBoot(v);\n    }\n    const handleClear = async () => {\n        await firmwares.clear();\n        enqueueSnackbar(\"firmwares cleared\", {\n            variant: \"info\"\n        })\n    }\n\n    // turn on and off safeboot mode\n    useEffect(() => {\n        bus.safeBoot = safeBoot;\n        return () => { bus.safeBoot = false }\n    }, [safeBoot]);\n\n    return (<>\n        <Alert severity=\"info\">\n            <Switch value={safeBoot} onChange={handleRecovery} />\n            <Typography component=\"span\" variant=\"body1\">\n                recovery mode\n                </Typography>\n            <Box mr={1}>\n                <Typography component=\"span\" variant=\"caption\">\n                    If your module is malfunctioning from the start, you can flash it in bootloader mode.\n                    Turn on recovery mode and unplug/replug any malfunctioning device to switch it to bootloader mode (glowing status LED).\n                    Once your module is flashed, turn off recovery mode and unplug/replug your module again.\n                    </Typography>\n            </Box>\n        </Alert>\n        {safeBoot && <Alert severity=\"warning\">\n            <Button size=\"small\" variant=\"outlined\" disabled={!firmwares} onClick={handleClear} startIcon={<DeleteForeverIcon />}>\n                clear cache\n            </Button>\n            <Box mr={1}>\n                <Typography component=\"span\" variant=\"caption\">\n                    Delete all firmware cached in the browser. The firmware will have to be deleted again from this interface.\n                    </Typography>\n            </Box>\n        </Alert>}\n    </>)\n}\n","import { Box, Tab, Tabs } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport TabPanel, { a11yProps } from '../ui/TabPanel';\nimport ConnectAlert from \"../alert/ConnectAlert\";\nimport FirmwareCardGrid from \"../firmware/FirmwareCardGrid\";\n// tslint:disable-next-line: no-submodule-imports\nimport UpdateDeviceList from \"../UpdateDeviceList\";\nimport SafeBootAlert from \"../firmware/SafeBootAlert\";\n\nexport default function Flash() {\n    const [tab, setTab] = useState(0);\n    const handleTabChange = (event: React.ChangeEvent<unknown>, newValue: number) => {\n        setTab(newValue);\n    }\n\n    return (\n        <Box mb={2}>\n            <ConnectAlert />\n            <Tabs value={tab} onChange={handleTabChange} aria-label=\"View specification formats\">\n                <Tab label={`Updates`} {...a11yProps(1)} />\n                <Tab label={`Firmwares`} {...a11yProps(0)} />\n            </Tabs>\n            <TabPanel value={tab} index={0}>\n                <UpdateDeviceList />\n            </TabPanel>\n            <TabPanel value={tab} index={1}>\n                <FirmwareCardGrid />\n            </TabPanel>\n            <SafeBootAlert />\n        </Box>\n    )\n}\n","import React from \"react\"\nimport Flash from \"../../components/tools/Flash\"\n\nexport default function Page() {\n    return <>\n        <h1>Firmware Updater</h1>\n        <p>\n        This page allows you to update your Jacdac module with new firmware. Find the latest UF2 firmware file from your manufacturer \nand import it with the button below.\n            \n        </p>\n        <Flash />\n    </>\n}","import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Card, CardActions, CardContent, CircularProgress, Collapse, List, ListItem, ListItemText, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { fetchReleaseBinary, useLatestReleases } from \"../github\";\nimport { useFirmwareBlob } from \"./useFirmwareBlobs\";\nimport GithubRepositoryCardHeader from \"../GithubRepositoryCardHeader\";\nimport Alert from \"../ui/Alert\";\nimport { Link } from \"gatsby-theme-material-ui\";\nimport SelectWithLabel from \"../ui/SelectWithLabel\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LoadingProgress from \"../ui/LoadingProgress\";\n\nexport default function FirmwareCard(props: { slug: string }) {\n    const { slug } = props\n    const { response: releases } = useLatestReleases(slug);\n    const [downloading, setDownloading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const [release, setRelease] = useState(undefined)\n    const [firmwaresExpanded, setFirmwaresExpanded] = useState(false)\n    const { setFirmwareFile, firmwareBlobs } = useFirmwareBlob(slug)\n    const tag = release?.tag_name || \"\";\n    const disabled = downloading;\n    const version = firmwareBlobs?.[0].version\n    const updateAvailable = !!tag && !!version && tag.slice(1) !== version.substr(0, tag.length - 1)\n    const downloadColor = updateAvailable ? \"primary\" : \"inherit\"\n    const downloadVariant = updateAvailable ? \"contained\" : \"text\"\n\n    // initialize with latest release\n    useEffect(() => {\n        if (releases?.length && !release)\n            setRelease(releases[0]);\n    }, [releases])\n\n    const handleReleaseChange = (ev: ChangeEvent<{ name?: string; value: unknown; }>) => {\n        const v = ev.target.value as string;\n        const rel = releases?.find(r => r.tag_name === v);\n        setRelease(rel);\n    }\n    const handleGitHubReleaseDownload = async () => {\n        try {\n            setError(\"\")\n            setDownloading(true)\n            const firmware = await fetchReleaseBinary(slug, tag);\n            if (firmware)\n                setFirmwareFile(tag, firmware)\n        }\n        finally {\n            setDownloading(false)\n        }\n    }\n    const handleClear = async () => {\n        try {\n            setError(\"\")\n            setDownloading(true)\n            setFirmwareFile(tag, undefined)\n        }\n        finally {\n            setDownloading(false)\n        }\n    }\n\n    return <Card>\n        <GithubRepositoryCardHeader slug={slug} />\n        <CardContent>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            {!!firmwareBlobs?.length && <Box mb={1}><Accordion expanded={firmwaresExpanded} onChange={() => setFirmwaresExpanded(!firmwaresExpanded)}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography variant=\"body2\">\n                        <code>v{version}</code>\n                        <span> ({firmwareBlobs.length} firmwares)</span>\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List dense>\n                        {firmwareBlobs.map(blob => <ListItem key={blob.firmwareIdentifier}>\n                            <ListItemText primary={blob.name}\n                                secondary={<Link to={`/firmwares/0x${blob.firmwareIdentifier.toString(16)}`}>\n                                    {`0x${blob.firmwareIdentifier.toString(16)}`}\n                                </Link>} />\n                        </ListItem>)}\n                    </List>\n                </AccordionDetails>\n            </Accordion></Box>}\n            {releases?.length === 0 && <Alert severity=\"warning\">No releases found.</Alert>}\n            {!!releases?.length && <SelectWithLabel fullWidth={true} helperText=\"choose a version\" value={tag} onChange={handleReleaseChange}>\n                {releases?.map(rel => <MenuItem key={rel.tag_name} value={rel.tag_name}>{rel.tag_name}</MenuItem>)}\n            </SelectWithLabel>}\n        </CardContent>\n        <CardActions>\n            {!downloading && release && <Button disabled={downloading} color={downloadColor} variant={downloadVariant} aria-label={`Download last release from ${slug}`} onClick={handleGitHubReleaseDownload}>\n                Download\n            </Button>}\n            {!downloading && firmwareBlobs?.length && <Button disabled={disabled} variant=\"text\" arial-label={\"Clear\"} onClick={handleClear}>\n                Clear\n            </Button>}\n            {downloading && <LoadingProgress />}\n        </CardActions>\n    </Card>\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'DeleteForever');\n\nexports.default = _default;","import { ButtonProps } from \"@material-ui/core\";\nimport { Button } from \"gatsby-theme-material-ui\";\nimport React from 'react';\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\";\n\nexport default function ServiceButton(props: { service: JDService, onClick?: () => void } & ButtonProps) {\n    const { service, onClick, ...others } = props;\n    return <Button\n        {...others}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={onClick}>\n        {service.name}\n    </Button>\n}\n","import React from 'react';\n// tslint:disable-next-line: no-submodule-imports\nimport { makeStyles } from '@material-ui/core/styles';\n// tslint:disable-next-line: no-submodule-imports\nimport Card from '@material-ui/core/Card';\n// tslint:disable-next-line: no-submodule-imports\nimport CardContent from '@material-ui/core/CardContent';\nimport { JDDevice } from '../../jacdac-ts/src/jdom/device';\nimport { SRV_CTRL, SRV_LOGGER, ControlReg } from '../../jacdac-ts/src/jdom/constants';\nimport ServiceButton from './ServiceButton';\nimport useChange from '../jacdac/useChange';\nimport { navigate } from \"gatsby\";\nimport { JDService } from '../../jacdac-ts/src/jdom/service';\nimport { CardActions, createStyles } from '@material-ui/core';\nimport DeviceCardHeader from './DeviceCardHeader';\nimport { useRegisterStringValue } from '../jacdac/useRegisterValue';\nimport { DeviceLostAlert } from './alert/DeviceLostAlert';\n\nconst useStyles = makeStyles(() => createStyles({\n    root: {\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n}));\n\nfunction navigateToService(service: JDService) {\n    const spec = service.specification;\n    if (spec)\n        navigate(`/services/${spec.shortId}/`) // todo spec\n}\n\nfunction DeviceDescription(props: { device: JDDevice }) {\n    const { device } = props;\n    const register = device?.service(0)?.register(ControlReg.DeviceDescription)\n    const description = useRegisterStringValue(register)\n    return <span>{description || \"\"}</span>\n}\n\nexport default function DeviceCard(props: {\n    device: JDDevice,\n    children?: any,\n    action?: JSX.Element | JSX.Element[],\n    content?: JSX.Element | JSX.Element[],\n    showDeviceId?: boolean,\n    showServices?: boolean,\n    showTemperature?: boolean,\n    showFirmware?: boolean,\n    showDescription?: boolean\n}) {\n    const { device, children, action, content,\n        showDeviceId,\n        showDescription, showTemperature, showFirmware, showServices } = props;\n    const classes = useStyles();\n    const services = useChange(device, () => device.services()\n        .filter(service => service.serviceClass != SRV_CTRL && service.serviceClass != SRV_LOGGER));\n\n    return (\n        <Card className={classes.root}>\n            <DeviceCardHeader device={device}\n                showDeviceId={showDeviceId}\n                showTemperature={showTemperature}\n                showFirmware={showFirmware}\n                showMedia={true} />\n            {(showDescription || content) &&\n                <CardContent>\n                    {<DeviceLostAlert device={device} />}\n                    {showDescription && <DeviceDescription device={device} />}\n                    {content}\n                </CardContent>}\n            <CardActions>\n                {action}\n                {showServices && services?.map(service => <ServiceButton key={service.id} service={service} onClick={() => navigateToService(service)} />)}\n            </CardActions>\n            {children}\n        </Card>\n    );\n}\n"],"sourceRoot":""}