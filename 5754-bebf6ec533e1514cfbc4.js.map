{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardGyroscope.tsx"],"names":["Sliders","props","server","register","visible","rates","useRegisterUnpackedValue","handleChangeX","event","newValue","reading","values","y","z","n","setValues","sendGetAsync","handleChangeY","x","handleChangeZ","valueDisplay","v","roundWithPrecision","length","step","marks","value","DashboardGyroscope","service","GyroscopeReg","useServiceServer","color","useWidgetTheme","active","rotator","useCallback","delta","rotation","unpackedValue","degreesToRadians","Math","PI","f"],"mappings":"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","file":"5754-bebf6ec533e1514cfbc4.js","sourcesContent":["import React, { useCallback } from \"react\"\nimport { GyroscopeReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport { Grid, Mark, NoSsr } from \"@material-ui/core\"\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\"\nimport CanvasWidget from \"../widgets/CanvasWidget\"\nimport { Vector } from \"../widgets/threeutils\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport Suspense from \"../ui/Suspense\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\n\nfunction Sliders(props: {\n    server: SensorServer<[number, number, number]>\n    register: JDRegister\n    visible: boolean\n}) {\n    const { server, register, visible } = props\n    const rates = useRegisterUnpackedValue<[number, number, number]>(register, {\n        visible,\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeX: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [, y, z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = (newValue as any) as number\n        server.reading.setValues([n, y, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeY: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, , z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = (newValue as any) as number\n        server.reading.setValues([x, n, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeZ: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, y] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = (newValue as any) as number\n        server.reading.setValues([x, y, n])\n        register.sendGetAsync()\n    }\n    const valueDisplay = (v: number) => `${roundWithPrecision(v, 1)}Â°/s`\n\n    if (!rates?.length) return <LoadingProgress />\n    const [x, y, z] = rates\n    const step = 1\n    const marks: Mark[] = [\n        {\n            value: 0,\n        },\n    ]\n    return (\n        <>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"X\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"x rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={x}\n                    marks={marks}\n                    onChange={handleChangeX}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label={\"Y\"}\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"y rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={y}\n                    marks={marks}\n                    onChange={handleChangeY}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"Z\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"z rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={z}\n                    marks={marks}\n                    onChange={handleChangeZ}\n                />\n            </Grid>\n        </>\n    )\n}\n\nexport default function DashboardGyroscope(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const register = service.register(GyroscopeReg.RotationRates)\n    useRegisterUnpackedValue<[number, number, number]>(register, props)\n    const server = useServiceServer<SensorServer<[number, number, number]>>(\n        service\n    )\n    const color = server ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback(\n        (delta, rotation: Vector) => {\n            const rates = register.unpackedValue\n            if (!rates) return\n\n            const [x, y, z] = rates // degrees\n            const degreesToRadians = Math.PI / 180\n            const f = delta * degreesToRadians\n            return {\n                x: rotation.x + x * f,\n                y: rotation.y - z * f,\n                z: rotation.z - y * f,\n            }\n        },\n        [register]\n    )\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item>\n                <NoSsr>\n                    <Suspense>\n                        <CanvasWidget color={active} rotator={rotator} />\n                    </Suspense>\n                </NoSsr>\n            </Grid>\n            {server && (\n                <Sliders\n                    server={server}\n                    register={register}\n                    visible={visible}\n                />\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}