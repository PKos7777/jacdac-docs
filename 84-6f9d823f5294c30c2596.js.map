{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardWaterLevel.tsx"],"names":["DashbaordWaterLevel","props","service","services","variant","levelRegister","register","WaterLevelReg","Level","useRegisterUnpackedValue","value","host","useServiceHost","color","useWidgetTheme","background","controlBackground","active","textProps","hasValue","isNaN","widgetSize","useWidgetSize","length","tvalue","Math","round","mx","wx","n","w","mty","mby","hy","h","r","onChange","event","newValue","svalue","reading","setValues","refresh","Array","fill","map","_","i"],"mappings":"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","file":"84-6f9d823f5294c30c2596.js","sourcesContent":["\nimport React, { } from \"react\";\nimport { WaterLevelReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport { Grid, Slider } from \"@material-ui/core\";\nimport SensorServiceHost from \"../../../jacdac-ts/src/hosts/sensorservicehost\";\n\nexport default function DashbaordWaterLevel(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const levelRegister = service.register(WaterLevelReg.Level);\n    const [value] = useRegisterUnpackedValue<[number]>(levelRegister)\n    const host = useServiceHost<SensorServiceHost<[number]>>(service)\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active, textProps } = useWidgetTheme(color)\n    const hasValue = !isNaN(value);\n    const widgetSize = useWidgetSize(variant, services.length)\n    const tvalue = hasValue ? `${Math.round(value * 100)}%` : `--`\n\n    const mx = 5;\n    const wx = 6;\n    const n = 8;\n    const w = (wx + mx) * n + 2 * mx;\n    const mty = 42;\n    const mby = mx;\n    const hy = w * 2;\n    const h = hy + mty + mby;\n    const r = 1;\n\n    const onChange = (event: unknown, newValue: number | number[]): void => {\n        const svalue = newValue as number;\n        host?.reading.setValues([svalue])\n        levelRegister.refresh();\n    }\n\n    return <Grid container direction=\"row\">\n        <Grid item>\n            <SvgWidget width={w} height={h} size={widgetSize}>\n                <rect fill={background} x={0} y={0} width={w} height={h} r={r} />\n                {Array(n).fill(0).map((_, i) => <path key={`back${i}`} stroke={controlBackground}\n                    d={`M ${2 * mx + i * (wx + mx)} ${h - mby} v ${-hy}`}\n                    strokeWidth={wx}\n                    strokeLinecap={i % 2 === 0 ? \"round\" : \"square\"}\n                />)}\n                {hasValue && Array(n).fill(0).map((_, i) => <path key={`water${i}`} stroke={active}\n                    d={`M ${2 * mx + i * (wx + mx)} ${h - mby - 2} v ${-hy * value}`}\n                    strokeWidth={wx + 2}\n                    strokeLinecap={\"square\"}\n                />)}\n                {tvalue && <text key=\"text\" x={w >> 1} y={mty >> 1} {...textProps}>{tvalue}</text>}\n            </SvgWidget>\n        </Grid>\n        {host && hasValue && <Grid item>\n            <Slider\n                orientation=\"vertical\"\n                valueLabelDisplay=\"off\"\n                min={0} max={1} step={0.05}\n                value={value}\n                onChange={onChange}\n                color={color}\n            />\n        </Grid>}\n    </Grid>\n}"],"sourceRoot":""}