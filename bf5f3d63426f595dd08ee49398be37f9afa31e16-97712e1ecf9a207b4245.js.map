{"version":3,"sources":["webpack:///./jacdac-ts/src/jdom/protocoltestservicehost.ts","webpack:///./jacdac-ts/src/hosts/ledmatrixservicehost.ts","webpack:///./jacdac-ts/src/jdom/light.ts","webpack:///./jacdac-ts/src/hosts/buzzerservicehost.ts","webpack:///./node_modules/@material-ui/core/esm/ListItem/ListItem.js","webpack:///./jacdac-ts/src/hosts/buttonservicehost.ts","webpack:///./jacdac-ts/src/hosts/characterscreenservicehost.ts","webpack:///./jacdac-ts/src/hosts/humidityservicehost.ts","webpack:///./jacdac-ts/src/hosts/joystickservicehost.ts","webpack:///./jacdac-ts/src/hosts/ledpixelservicehost.ts","webpack:///./jacdac-ts/src/hosts/matrixkeypadservicehost.ts","webpack:///./jacdac-ts/src/hosts/motorservicehost.ts","webpack:///./jacdac-ts/src/hosts/leveldetector.ts","webpack:///./jacdac-ts/src/hosts/analogsensorservicehost.ts","webpack:///./jacdac-ts/src/hosts/raingaugeservicehost.ts","webpack:///./jacdac-ts/src/hosts/reflectedlightservicehost.ts","webpack:///./jacdac-ts/src/hosts/rotaryencoderservicehost.ts","webpack:///./jacdac-ts/src/hosts/servoservicehost.ts","webpack:///./jacdac-ts/src/hosts/settingsservicehost.ts","webpack:///./jacdac-ts/src/hosts/speechsynthesisservicehost.ts","webpack:///./jacdac-ts/src/hosts/switchservicehost.ts","webpack:///./jacdac-ts/src/hosts/trafficlightservicehost.ts","webpack:///./jacdac-ts/src/hosts/ledservicehost.ts","webpack:///./jacdac-ts/src/hosts/soundplayerservicehost.ts","webpack:///./jacdac-ts/src/hosts/randomnumbergeneratorservicehost.ts","webpack:///./jacdac-ts/src/hosts/compassservicehost.ts","webpack:///./jacdac-ts/src/hosts/dmxservicehost.ts","webpack:///./jacdac-ts/src/hosts/bitradioservicehost.ts","webpack:///./jacdac-ts/src/hosts/hosts.ts"],"names":["ProtocolTestServiceHost","SRV_PROTO_TEST","init","ProtoTestReg","RwBool","RoBool","ProtoTestCmd","CBool","ProtoTestEvent","EBool","RwI32","RoI32","CI32","EI32","RwU32","RoU32","CU32","EU32","RwString","RoString","CString","EString","rwBytes","RwBytes","RoBytes","CBytes","EBytes","Uint8Array","RwI8U8U16I32","RoI8U8U16I32","CI8U8U16I32","EI8U8U16I32","RwU8String","RoU8String","CU8String","EU8String","addCommand","CReportPipe","handleReportPipe","bind","rwi","roi","ci","ei","values","rw","addRegister","ro","on","CHANGE","setValues","sendEvent","data","pkt","jdunpack","specification","packFormat","pipe","OutPipe","from","device","bus","respondForEach","b","buf","jdpack","ServiceHost","toggle","bitindex","byte","bit","LEDMatrixServiceHost","columns","rows","SRV_LED_MATRIX","intensityValues","leds","LedMatrixReg","Leds","Rows","Columns","brightness","Brightness","skipBoundaryCheck","skipErrorInjection","SensorReg","StreamingPreferredInterval","updateLedBuffer","columnspadded","n","length","fill","emit","LIGHT_PROG_SET_ALL","LIGHT_PROG_FADE","LIGHT_PROG_FADE_HSV","LIGHT_PROG_ROTATE_FWD","LIGHT_PROG_ROTATE_BACK","LIGHT_PROG_SHOW","LIGHT_PROG_RANGE","LIGHT_PROG_MODE","LIGHT_PROG_MODE1","LIGHT_MODE_REPLACE","LIGHT_MODE_ADD_RGB","LIGHT_MODE_SUBTRACT_RGB","LIGHT_MODE_MULTIPLY_RGB","LIGHT_MODE_LAST","LIGHT_PROG_COLN","LIGHT_PROG_COL1","LIGHT_PROG_COL2","LIGHT_PROG_COL3","LIGHT_PROG_COL1_SET","cmdCode","cmd","undefined","isWhiteSpace","code","lightEncode","format","args","outarr","colors","pos","currcmd","pushNumber","Error","push","flush","c","nextToken","charCodeAt","beg","slice","token","t0","f","parseFloat","isNaN","mm","Math","round","parseInt","v","shift","vv","fromHex","BuzzerServiceHost","options","SRV_BUZZER","volume","BuzzerReg","Volume","BuzzerCmd","PlayTone","handlePlayTone","period","duration","frequency","PLAY_TONE","LONG_CLICK_DELAY","HOLD_DELAY","ButtonServiceHost","instanceName","SRV_BUTTON","readingValues","streamingInterval","_held","_longClick","REFRESH","handleRefresh","reading","delay","timestamp","_downTime","ButtonEvent","LongClick","Hold","down","Down","up","upTime","Up","Click","SensorServiceHost","CharacterScreenServiceHost","SRV_CHARACTER_SCREEN","message","variant","textDirection","CharacterScreenReg","Message","Variant","CharacterScreenVariant","LCD","TextDirection","CharacterScreenTextDirection","LeftToRight","HumidityServiceHost","SRV_HUMIDITY","readingError","JoystickSensorServiceHost","digital","SRV_JOYSTICK","JoystickReg","JoystickVariant","Thumb","Digital","PROG_EOF","PROG_CMD","PROG_NUMBER","PROG_COLOR_BLOCK","rgb","r","g","hsv","hue","sat","val","invsat","brightness_floor","color_amplitude","section","offset","rampup","rampdown","rampup_amp_adj","rampdown_amp_adj","rampup_adj_with_floor","rampdown_adj_with_floor","mulcol","m","c2","clamp","SCALE0","i","LedPixelServiceHost","SRV_LED_PIXEL","pxbuffer","prog_mode","prog_tmpmode","range_start","range_end","range_len","range_ptr","prog_ptr","prog_size","prog_data","dirty","inited","power_enable","numColumns","maxPower","maxPixels","numPixels","LedPixelReg","actualBrightness","ActualBrightness","lightType","LightType","LedPixelLightType","WS2812B_GRB","NumPixels","MaxPower","MaxPixels","LedPixelVariant","Strip","numRepeats","NumRepeats","NumColumns","intensity","requested_intensity","allocRxBuffer","LedPixelCmd","Run","handleRun","jd_power_enable","value","is_enabled","numpixels","maxpixels","reset_range","set_next","p","pi","limit_intensity","maxpower","prev_intensity","current_full","current","current_prev","di","base_current","current_limit","inten","prog_fetch_color","ptr","d","prog_fetch","prog","dst","prog_fetch_num","defl","prev","fr","res","prog_fetch_cmd","prog_set","len","start","ok","prog_fade","usehsv","colidx","endp","col0","col1","colstep","colpos","fade1","fade0","col","prog_rot","first","middle","last","next","tmp","tmp1","tmp2","fetch_mode","prog_process","k","setInterval","animationFrame","pcmd","end","isBufferEmpty","RENDER","sync_config","console","log","toHex","MatrixKeypadServiceHost","labels","SRV_MATRIX_KEYPAD","MatrixKeypadReg","Labels","map","l","button","valuei","findIndex","splice","MotorServiceHost","SRV_MOTOR","duty","MotorReg","Duty","enabled","Enabled","loadTorque","LoadTorque","loadSpeed","LoadSpeed","LevelDetector","service","reset","lowThreshold","mount","subscribe","highThreshold","update","_state","SystemReadingThreshold","Neutral","level","setState","high","High","low","Low","state","SystemEvent","JDClient","AnalogSensorServiceHost","serviceClass","minReading","maxReading","readingResolution","SystemReg","MinReading","MaxReading","ReadingResolution","LowThreshold","HighThreshold","levelDetector","RainGaugeServiceHost","SRV_RAIN_GAUGE","_tiltCount","_level","bucketSize","precipitationPrecision","RainGaugeReg","PrecipitationPrecision","rain","fraction","tilt","bucket","ReflectedLightServiceHost","SRV_REFLECTED_LIGHT","ReflectedLightReg","ReflectedLightVariant","InfraredDigital","RotaryEncoderServiceHost","SRV_ROTARY_ENCODER","clicksPerTurn","RotaryEncoderReg","ClicksPerTurn","rotate","clicks","position","ServoServiceHost","SRV_SERVO","minAngle","maxAngle","responseSpeed","stallTorque","angle","ServoReg","Angle","MinAngle","MaxAngle","Offset","ResponseSpeed","StallTorque","SettingsServiceHost","storageKey","SRV_SETTINGS","SettingsCmd","Get","handleGet","Set","handleSet","Delete","handleDelete","ListKeys","handleListKeys","List","handleList","Clear","handleClear","settings","read","getPayload","key","secret","test","payload","stringToBuffer","resp","Packet","jdpacked","sendPacketAsync","bufferToString","save","Object","keys","window","localStorage","getItem","JSON","parse","e","setItem","stringify","SettingsEvent","Change","SpeechSynthesisServiceHost","SRV_SPEECH_SYNTHESIS","synthesis","speechSynthesis","SpeechSynthesisReg","paused","pitch","Pitch","rate","Rate","lang","Lang","SpeechSynthesisCmd","Speak","handleSpeak","Cancel","handleCancel","text","utterance","SpeechSynthesisUtterance","speak","cancel","SwitchServiceHost","SRV_SWITCH","autoOffDelay","SwitchReg","AutoOffDelay","switchOn","switchOff","SwitchEvent","On","startAutoOff","Off","stopAutoOff","autoOffInterval","setTimeout","clearTimeout","TrafficLightServiceHost","SRV_TRAFFIC_LIGHT","red","TrafficLightReg","Red","orange","Orange","green","Green","LEDServiceHost","SRV_LED","ledCount","LedVariant","ThroughHole","luminousIntensity","waveLength","color","LedReg","Color","REGISTER_PRE_GET","updateColor","LedCount","LuminousIntensity","WaveLength","LedCmd","Animate","handleAnimate","_animation","blue","toRed","toGreen","toBlue","speed","now","elapsed","total","progress","alpha","min","oneAlpha","newRed","newGreen","newBlue","SoundPlayerServiceHost","sounds","SRV_SOUND_PLAYER","SoundPlayerReg","SoundPlayerCmd","ListSounds","handleListSounds","Play","handlePlay","sound","name","onPlay","RandomNumberGeneratorServiceHost","SRV_RNG","RngVariant","WebCrypto","RngReg","Random","crypto","getRandomValues","CompassServiceHost","SRV_COMPASS","CompassReg","statusCode","status","SystemStatusCodes","CalibrationNeeded","calibrate","DMXServiceHost","SRV_DMX","DmxCmd","Send","handleSend","RADIO_MAX_PACKET_SIZE","MAX_FIELD_DOUBLE_NAME_LENGTH","MAX_PAYLOAD_LENGTH","PACKET_PREFIX_LENGTH","VALUE_PACKET_NAME_LEN_OFFSET","DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET","PACKET_TYPE_NUMBER","PACKET_TYPE_VALUE","PACKET_TYPE_STRING","PACKET_TYPE_BUFFER","PACKET_TYPE_DOUBLE","PACKET_TYPE_DOUBLE_VALUE","getStringOffset","packetType","truncateString","str","RadioPacket","getPacket","mkPacket","hasString","hasNumber","getNumber","NumberFormat","Int32LE","setNumber","toString","memcpy","Float64LE","BitRadioServiceHost","SRV_BIT_RADIO","BitRadioReg","group","Group","transmissionPower","TransmissionPower","frequencyBand","FrequencyBand","BitRadioCmd","SendString","handleSendString","SendNumber","handleSendNumber","SendValue","handleSendValue","SendBuffer","handleSendBuffer","rpkt","stringPayload","sendRadioPacket","numberPayload","bufferPayload","time","serial","msg","type","broadcast","rssi","groupId","bufferData","inIFrame","parent","postMessage","indoorThermometerOptions","ThermometerVariant","Indoor","outdoorThermometerOptions","Outdoor","medicalThermometerOptions","Body","barometerOptions","sonarOptions","DistanceVariant","Ultrasonic","SG90_STALL_TORQUE","SG90_RESPONSE_SPEED","microServoOptions","microServo270Options","microServo360Options","windDirectionOptions","windSpeedOptions","registerValues","WindSpeedReg","MaxWindSpeed","eCO2Options","ECO2Variant","VOC","CO2Options","NDIR","tvocOptions","microbitSounds","touchButton","AnalogButtonVariant","Capacitive","soundLevel","SoundLevelReg","MinDecibels","MaxDecibels","soundSpectrum","SoundSpectrumReg","FftPow2Size","SmoothingTimeConstant","_hosts","serviceClasses","SRV_SEVEN_SEGMENT_DISPLAY","services","valueValues","SevenSegmentDisplayReg","DigitCount","DecimalPoint","SRV_ACCELEROMETER","SRV_ARCADE_GAMEPAD","ArcadeGamepadServiceHost","ArcadeGamepadButton","Left","Right","A","B","SRV_BAROMETER","Array","_","SRV_ANALOG_BUTTON","OLED","RightToLeft","SRV_COLOR","SRV_DISTANCE","SRV_E_CO2","SRV_TVOC","SRV_THERMOMETER","SRV_GYROSCOPE","SRV_HEART_RATE","HeartRateVariant","Finger","SRV_ILLUMINANCE","ArcadeStick","Ring","Jewel","Stick","Matrix","SRV_LIGHT_LEVEL","LightLevelVariant","PhotoResistor","InfraredAnalog","SRV_MOTION","SRV_PULSE_OXIMETER","SRV_REAL_TIME_CLOCK","RealTimeClockServiceHost","SRV_RELAY","RelayVariant","Electromechanical","RelayReg","MaxSwitchingCurrent","SolidState","SRV_POTENTIOMETER","PotentiometerVariant","Rotary","Slider","SRV_SOIL_MOISTURE","SRV_SOLENOID","SRV_SOUND_LEVEL","SRV_SOUND_SPECTRUM","SwitchVariant","Slide","PushButton","Toggle","Tilt","Proximity","SRV_THERMOCOUPLE","ThermocoupleVariant","TypeB","SRV_UV_INDEX","SRV_WATER_LEVEL","SRV_WEIGHT_SCALE","WeightScaleVariant","Jewelry","Food","SRV_WIND_DIRECTION","SRV_WIND_SPEED","SRV_VIBRATION_MOTOR","LEDMatrix","hosts","addHost","DeviceHost","addDeviceHost","hostDefinitionFromServiceClass","find","host"],"mappings":"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AAA0D;AACgC;AAC3D;AACP;AAC4B;AACN;AACP;AACU;AACJ;AACC;AACR;AAC/B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,0FAA0F,KAAK;AAC/F,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,2EAA2E,KAAK;AAChF,gBAAgB;;AAEhB,oEAAoE,KAAK;AACzE;AACA;AACA;AACA,KAAK;;AAEL,2EAA2E,MAAM;AACjF;AACA;AACA;AACA,KAAK;;AAEL,mEAAmE,KAAK;AACxE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,8DAA8D,KAAK;AACnE;AACA;AACA;AACA,wDAAwD,+CAAe,GAAG,qDAAqB;AAC/F;AACA;AACA;;AAEA,4BAA4B,gDAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;;AAE/D;AACA,uBAAuB,0GAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0GAAwB;;AAEtC,gBAAgB,gDAAgB,CAAC,iEAAW;AAC5C;AACA;AACA;AACA;AACA,oBAAoB,4CAAY;AAChC;AACA;AACA;AACA;AACA,OAAO,UAAU,KAAqC,EAAE,EAEjD;AACP;AACA,GAAG;AACH,iBAAiB,8CAAc;AAC/B,8CAA8C,2EAAY;AAC1D,qBAAqB,iDAAiB;AACtC;AACA,0BAA0B,qDAAoB;AAC9C,GAAG;AACH,kBAAkB,yEAAU;;AAE5B,uBAAuB,0FAAQ;AAC/B,eAAe,4DAAI;AACnB;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,2CAA2C,4DAAI;AAC/C,gBAAgB,2DAAU;AAC1B;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","file":"bf5f3d63426f595dd08ee49398be37f9afa31e16-97712e1ecf9a207b4245.js","sourcesContent":["import { SRV_PROTO_TEST, CHANGE, ProtoTestReg, ProtoTestCmd, ProtoTestEvent } from \"../jdom/constants\";\nimport { jdpack, jdunpack } from \"./pack\";\nimport Packet from \"./packet\";\nimport { OutPipe } from \"./pipes\";\nimport RegisterHost from \"./registerhost\";\nimport ServiceHost from \"./servicehost\";\n\nexport default class ProtocolTestServiceHost extends ServiceHost {\n    private rwBytes: RegisterHost<[Uint8Array]>;\n\n    constructor() {\n        super(SRV_PROTO_TEST);\n\n        this.init<[boolean]>(ProtoTestReg.RwBool, ProtoTestReg.RoBool, ProtoTestCmd.CBool, ProtoTestEvent.EBool, false);\n        this.init<[number]>(ProtoTestReg.RwI32, ProtoTestReg.RoI32, ProtoTestCmd.CI32, ProtoTestEvent.EI32, 0);\n        this.init<[number]>(ProtoTestReg.RwU32, ProtoTestReg.RoU32, ProtoTestCmd.CU32, ProtoTestEvent.EU32, 0);\n        this.init<[string]>(ProtoTestReg.RwString, ProtoTestReg.RoString, ProtoTestCmd.CString, ProtoTestEvent.EString, \"\");\n        this.rwBytes = this.init<[Uint8Array]>(ProtoTestReg.RwBytes, ProtoTestReg.RoBytes, ProtoTestCmd.CBytes, ProtoTestEvent.EBytes, new Uint8Array(0));\n        this.init<[number, number, number, number]>(ProtoTestReg.RwI8U8U16I32, ProtoTestReg.RoI8U8U16I32, ProtoTestCmd.CI8U8U16I32, ProtoTestEvent.EI8U8U16I32, 0, 0, 0, 0);\n        this.init<[number,string]>(ProtoTestReg.RwU8String, ProtoTestReg.RoU8String, ProtoTestCmd.CU8String, ProtoTestEvent.EU8String, 0, \"\");\n\n        this.addCommand(ProtoTestCmd.CReportPipe, this.handleReportPipe.bind(this))\n    }\n\n    private init<TValues extends any[]>(rwi: number, roi: number, ci: number, ei: number, ...values: TValues) {\n        const rw = this.addRegister(rwi, values);\n        const ro = this.addRegister(roi, rw.values());\n        rw.on(CHANGE, () => {\n            ro.setValues(rw.values())\n            this.sendEvent(ei, rw.data);\n        });\n        this.addCommand(ci, pkt => rw.setValues(jdunpack(pkt.data, rw.specification.packFormat)))\n        return rw;\n    }\n\n\n    private async handleReportPipe(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(this.rwBytes.data, (b: number) => {\n            const buf = new Uint8Array(1);\n            buf[0] = b;\n            return jdpack<[Uint8Array]>(\"b\", [buf]);\n        })\n    }\n}\n","import { CHANGE, LedMatrixReg, SensorReg, SRV_LED_MATRIX } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\n\nexport function toggle(data: Uint8Array, bitindex: number) {\n    // find bit to flip\n    let byte = data[bitindex >> 3];\n    const bit = bitindex % 8;\n    const on = 1 === ((byte >> bit) & 1)\n    // flip bit\n    if (on) {\n        byte &= ~(1 << bit);\n    } else {\n        byte |= 1 << bit;\n    }\n    // save\n    data[bitindex >> 3] = byte;\n}\n\nexport default class LEDMatrixServiceHost extends ServiceHost {\n    readonly leds: RegisterHost<[Uint8Array]>;\n    readonly rows: RegisterHost<[number]>;\n    readonly columns: RegisterHost<[number]>;\n    readonly brightness: RegisterHost<[number]>;\n\n    constructor(columns: number, rows: number) {\n        super(SRV_LED_MATRIX, {\n            intensityValues: [0xff >> 1]\n        })\n\n        this.leds = this.addRegister(LedMatrixReg.Leds, [new Uint8Array(0)])\n        this.rows = this.addRegister(LedMatrixReg.Rows, [rows]);\n        this.columns = this.addRegister(LedMatrixReg.Columns, [columns]);\n        this.brightness = this.addRegister(LedMatrixReg.Brightness, [128]);\n\n        this.rows.skipBoundaryCheck = true;\n        this.rows.skipErrorInjection = true;\n\n        // 20fps\n        this.addRegister<[number]>(SensorReg.StreamingPreferredInterval, [50]);\n\n        this.rows.on(CHANGE, this.updateLedBuffer.bind(this));\n        this.columns.on(CHANGE, this.updateLedBuffer.bind(this));\n\n        this.updateLedBuffer();\n    }\n\n    private updateLedBuffer() {\n        // columns must be byte aligned\n        const [rows] = this.rows.values();\n        const [columns] = this.columns.values();\n\n        // there's probably a much smarter way to do this\n        const columnspadded = columns + (8 - columns % 8)\n        // total bits needed\n        const n = rows * columnspadded;\n\n        if (this.leds.data?.length !== n) {\n            // skip serialization\n            this.leds.data = new Uint8Array(n);\n\n            // testing\n            this.leds.data.fill(0x01 | 0x04 | 0x10 | 0x40)\n            this.leds.emit(CHANGE);\n        }\n    }\n}","import { fromHex } from \"./utils\"\n\n/*\n* `0xD0: set_all(C+)` - set all pixels in current range to given color pattern\n* `0xD1: fade(C+)` - set `N` pixels to color between colors in sequence\n* `0xD2: fade_hsv(C+)` - similar to `fade()`, but colors are specified and faded in HSV\n* `0xD3: rotate_fwd(K)` - rotate (shift) pixels by `K` positions away from the connector\n* `0xD4: rotate_back(K)` - same, but towards the connector\n* `0xD5: show(M=50)` - send buffer to strip and wait `M` milliseconds\n* `0xD6: range(P=0, N=length)` - range from pixel `P`, `N` pixels long\n* `0xD7: mode(K=0)` - set update mode\n* `0xD8: mode1(K=0)` - set update mode for next command only\n*/\n\nexport const LIGHT_PROG_SET_ALL = 0xD0\nexport const LIGHT_PROG_FADE = 0xD1\nexport const LIGHT_PROG_FADE_HSV = 0xD2\nexport const LIGHT_PROG_ROTATE_FWD = 0xD3\nexport const LIGHT_PROG_ROTATE_BACK = 0xD4\nexport const LIGHT_PROG_SHOW = 0xD5\nexport const LIGHT_PROG_RANGE = 0xD6\nexport const LIGHT_PROG_MODE = 0xD7\nexport const LIGHT_PROG_MODE1 = 0xD8\n\nexport const LIGHT_MODE_REPLACE = 0x00\nexport const LIGHT_MODE_ADD_RGB = 0x01\nexport const LIGHT_MODE_SUBTRACT_RGB = 0x02\nexport const LIGHT_MODE_MULTIPLY_RGB = 0x03\nexport const LIGHT_MODE_LAST = 0x03\n\nexport const LIGHT_PROG_COLN = 0xC0\nexport const LIGHT_PROG_COL1 = 0xC1\nexport const LIGHT_PROG_COL2 = 0xC2\nexport const LIGHT_PROG_COL3 = 0xC3\n\nexport const LIGHT_PROG_COL1_SET = 0xCF\n\nfunction cmdCode(cmd: string) {\n    switch (cmd) {\n        case \"setall\": return LIGHT_PROG_SET_ALL\n        case \"fade\": return LIGHT_PROG_FADE\n        case \"fadehsv\": return LIGHT_PROG_FADE_HSV\n        case \"rotfwd\": return LIGHT_PROG_ROTATE_FWD\n        case \"rotback\": return LIGHT_PROG_ROTATE_BACK\n        case \"show\":\n        case \"wait\": return LIGHT_PROG_SHOW\n        case \"range\": return LIGHT_PROG_RANGE\n        case \"mode\": return LIGHT_PROG_MODE\n        case \"tmpmode\": return LIGHT_PROG_MODE1\n        case \"setone\": return LIGHT_PROG_COL1_SET\n        case \"mult\": return 0x100\n        default: return undefined\n    }\n}\n\nfunction isWhiteSpace(code: number) {\n    return code == 32 || code == 13 || code == 10 || code == 9\n}\n\nexport function lightEncode(format: string, args: (number | number[])[]) {\n    // tokens are white-space separated\n    // % - number from args[]\n    // # - color from args[]\n    // #0123ff - color\n    // 123 - number\n    // commands: set, fade, fadehsv, rotfwd, rotback, pause\n    // fadehsv 0 12 #00ffff #ffffff\n\n    const outarr: number[] = []\n    let colors: number[] = []\n    let pos = 0\n    let currcmd = 0\n\n    function pushNumber(n: number) {\n        if (n == null || (n | 0) != n || n < 0 || n >= 16383)\n            throw new Error(\"number out of range: \" + n)\n        if (n < 128)\n            outarr.push(n)\n        else {\n            outarr.push(0x80 | (n >> 8))\n            outarr.push(n & 0xff)\n        }\n    }\n\n    function flush() {\n        if (currcmd == 0xCF) {\n            if (colors.length != 1)\n                throw new Error(\"setone requires 1 color\")\n        } else {\n            if (colors.length == 0)\n                return\n            if (colors.length <= 3)\n                outarr.push(0xC0 | colors.length)\n            else {\n                outarr.push(0xC0)\n                outarr.push(colors.length)\n            }\n        }\n        for (const c of colors) {\n            outarr.push((c >> 16) & 0xff)\n            outarr.push((c >> 8) & 0xff)\n            outarr.push((c >> 0) & 0xff)\n        }\n        colors = []\n    }\n\n    function nextToken() {\n        while (isWhiteSpace(format.charCodeAt(pos)))\n            pos++;\n        const beg = pos\n        while (pos < format.length && !isWhiteSpace(format.charCodeAt(pos)))\n            pos++\n        return format.slice(beg, pos)\n\n    }\n\n    while (pos < format.length) {\n        const token = nextToken()\n        const t0 = token.charCodeAt(0)\n        if (97 <= t0 && t0 <= 122) { // a-z\n            flush()\n            currcmd = cmdCode(token)\n            if (currcmd == undefined)\n                throw new Error(\"unknown light command: \" + token)\n            if (currcmd == 0x100) {\n                const f = parseFloat(nextToken())\n                if (isNaN(f) || f < 0 || f > 2)\n                    throw new Error(\"expecting scale\")\n                outarr.push(0xD8) // tmpmode\n                outarr.push(3) // mult\n                outarr.push(0xD0) // setall\n                const mm = Math.round(128 * f) & 0xff;\n                outarr.push(0xC1)\n                outarr.push(mm)\n                outarr.push(mm)\n                outarr.push(mm)\n            } else {\n                outarr.push(currcmd)\n            }\n        } else if (48 <= t0 && t0 <= 57) { // 0-9\n            pushNumber(parseInt(token))\n        } else if (t0 == 37) { // %\n            if (args.length == 0) throw new Error(\"out of args, %\")\n            const v = args.shift()\n            if (typeof v != \"number\")\n                throw new Error(\"expecting number\")\n            pushNumber(v)\n        } else if (t0 == 35) { // #\n            if (token.length == 1) {\n                if (args.length == 0) throw new Error(\"out of args, #\")\n                const v = args.shift()\n                if (typeof v == \"number\")\n                    colors.push(v)\n                else\n                    for (const vv of v) colors.push(vv)\n            } else {\n                if (token.length == 7) {\n                    const b = fromHex(token.slice(1))\n                    const c = (b[0] << 16) | (b[1] << 8) | b[2];\n                    colors.push(c)\n                } else {\n                    throw new Error(\"invalid color: \" + token)\n                }\n            }\n        }\n    }\n    flush()\n\n    return new Uint8Array(outarr)\n}\n","import { BuzzerCmd, BuzzerReg, SRV_BUZZER } from \"../jdom/constants\"\nimport { jdunpack } from \"../jdom/pack\"\nimport Packet from \"../jdom/packet\"\nimport RegisterHost from \"../jdom/registerhost\"\nimport ServiceHost, { ServiceHostOptions } from \"../jdom/servicehost\"\n\nexport default class BuzzerServiceHost extends ServiceHost {\n    readonly volume: RegisterHost<[number]>\n\n    static PLAY_TONE = \"playTone\"\n\n    constructor(options?: ServiceHostOptions) {\n        super(SRV_BUZZER, options)\n\n        this.volume = this.addRegister<[number]>(BuzzerReg.Volume, [0.2])\n        this.addCommand(BuzzerCmd.PlayTone, this.handlePlayTone.bind(this))\n    }\n\n    private handlePlayTone(pkt: Packet) {\n        const [period, , duration] = jdunpack<[number, number, number]>(\n            pkt.data,\n            \"u16 u16 u16\"\n        )\n        const frequency = 1000000 / period\n\n        this.emit(BuzzerServiceHost.PLAY_TONE, [frequency, duration])\n    }\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport isMuiElement from '../utils/isMuiElement';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport * as ReactDOM from 'react-dom';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      position: 'relative',\n      textDecoration: 'none',\n      width: '100%',\n      boxSizing: 'border-box',\n      textAlign: 'left',\n      paddingTop: 8,\n      paddingBottom: 8,\n      '&$focusVisible': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$disabled': {\n        opacity: 0.5\n      }\n    },\n\n    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n    container: {\n      position: 'relative'\n    },\n\n    /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n    focusVisible: {},\n\n    /* Styles applied to the `component` element if dense. */\n    dense: {\n      paddingTop: 4,\n      paddingBottom: 4\n    },\n\n    /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      alignItems: 'flex-start'\n    },\n\n    /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the inner `component` element if `divider={true}`. */\n    divider: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider),\n      backgroundClip: 'padding-box'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the inner `component` element if `button={true}`. */\n    button: {\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: {\n      // Add some space to avoid collision as `ListItemSecondaryAction`\n      // is absolutely positioned.\n      paddingRight: 48\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nvar ListItem = /*#__PURE__*/React.forwardRef(function ListItem(props, ref) {\n  var _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$button = props.button,\n      button = _props$button === void 0 ? false : _props$button,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      componentProp = props.component,\n      _props$ContainerCompo = props.ContainerComponent,\n      ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,\n      _props$ContainerProps = props.ContainerProps;\n  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;\n\n  var ContainerClassName = _props$ContainerProps.className,\n      ContainerProps = _objectWithoutProperties(_props$ContainerProps, [\"className\"]),\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$divider = props.divider,\n      divider = _props$divider === void 0 ? false : _props$divider,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  var context = React.useContext(ListContext);\n  var childContext = {\n    dense: dense || context.dense || false,\n    alignItems: alignItems\n  };\n  var listItemRef = React.useRef(null);\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  var children = React.Children.toArray(childrenProp);\n  var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(handleOwnRef, ref);\n\n  var componentProps = _extends({\n    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== \"center\" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),\n    disabled: disabled\n  }, other);\n\n  var Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(ListContext.Provider, {\n      value: childContext\n    }, /*#__PURE__*/React.createElement(ContainerComponent, _extends({\n      className: clsx(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), /*#__PURE__*/React.createElement(Component, componentProps, children), children.pop()));\n  }\n\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: handleRef\n  }, componentProps), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItem'\n})(ListItem);","import { ButtonEvent, REFRESH, SRV_BUTTON } from \"../jdom/constants\";\nimport SensorServiceHost from \"./sensorservicehost\";\n\nconst LONG_CLICK_DELAY = 500\nconst HOLD_DELAY = 1500\n\nexport default class ButtonServiceHost extends SensorServiceHost<[boolean]> {\n    private _downTime: number;\n    private _held = false;\n    private _longClick = false;\n\n    constructor(instanceName?: string) {\n        super(SRV_BUTTON, { instanceName, readingValues: [false], streamingInterval: 50 });\n        this.on(REFRESH, this.handleRefresh.bind(this));\n    }\n\n    private async handleRefresh() {\n        const [v] = this.reading.values();\n        if (v) {\n            const delay = this.device.bus.timestamp - this._downTime;\n            if (!this._longClick && delay > LONG_CLICK_DELAY) {\n                this._longClick = true;\n                await this.sendEvent(ButtonEvent.LongClick);\n            }\n            if (!this._held && delay > HOLD_DELAY) {\n                this._held = true;\n                await this.sendEvent(ButtonEvent.Hold);\n            }\n        }\n    }\n\n    async down() {\n        const [v] = this.reading.values();\n        if (v) return;\n        this._downTime = this.device.bus.timestamp;\n        this._held = false;\n        this._longClick = false;\n        this.reading.setValues([true]);\n        await this.sendEvent(ButtonEvent.Down);\n    }\n\n    async up() {\n        const [v] = this.reading.values();\n        if (!v) return;\n        const upTime = this.device.bus.timestamp;\n        this.reading.setValues([false]);\n        await this.sendEvent(ButtonEvent.Up);\n\n        // generate clicks\n        if (this._downTime !== undefined) {\n            if (!this._longClick)\n                await this.sendEvent(ButtonEvent.Click);\n        }\n    }\n}","import { CharacterScreenReg, CharacterScreenTextDirection, CharacterScreenVariant, SRV_CHARACTER_SCREEN } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\n\nexport default class CharacterScreenServiceHost extends ServiceHost {\n    readonly message: RegisterHost<[string]>;\n    readonly rows: RegisterHost<[number]>;\n    readonly columns: RegisterHost<[number]>;\n    readonly variant: RegisterHost<[CharacterScreenVariant]>;\n    readonly textDirection: RegisterHost<[CharacterScreenTextDirection]>;\n\n    constructor(options?: {\n        message?: string,\n        rows?: number,\n        columns?: number,\n        variant?: CharacterScreenVariant,\n        textDirection?: CharacterScreenTextDirection\n    }) {\n        super(SRV_CHARACTER_SCREEN);\n        const { message, rows = 2, columns = 16, variant, textDirection } = options || {};\n\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [message || \"\"]);\n        this.rows = this.addRegister<[number]>(CharacterScreenReg.Rows, [rows]);\n        this.columns = this.addRegister<[number]>(CharacterScreenReg.Columns, [columns]);\n        this.variant = this.addRegister<[CharacterScreenVariant]>(CharacterScreenReg.Variant, [variant || CharacterScreenVariant.LCD]);\n        this.message = this.addRegister<[string]>(CharacterScreenReg.Message, [\"\"]);\n        this.textDirection = this.addRegister<[CharacterScreenTextDirection]>(CharacterScreenReg.TextDirection, [textDirection || CharacterScreenTextDirection.LeftToRight])\n    }\n}","import { SRV_HUMIDITY } from \"../jdom/constants\";\nimport SensorServiceHost from \"./sensorservicehost\";\n\nexport default class HumidityServiceHost extends SensorServiceHost<[number]> {\n    constructor() {\n        super(SRV_HUMIDITY, {\n            readingValues: [40],\n            readingError: [0.1],\n            streamingInterval: 1000\n        });\n    }\n}","import { JoystickReg, JoystickVariant, SRV_JOYSTICK } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport SensorServiceHost from \"./sensorservicehost\";\n\nexport default class JoystickSensorServiceHost extends SensorServiceHost<[number, number]> {\n    readonly variant: RegisterHost<[JoystickVariant]>;\n    readonly digital: RegisterHost<[boolean]>;\n\n    constructor(variant?: JoystickVariant, digital?: boolean) {\n        super(SRV_JOYSTICK, { readingValues: [0, 0] })\n\n        this.variant = this.addRegister<[JoystickVariant]>(JoystickReg.Variant, [variant || JoystickVariant.Thumb]);\n        this.digital = this.addRegister<[boolean]>(JoystickReg.Digital, [digital || false]);\n    }\n}","import {\n    CHANGE, LedPixelCmd,\n    LedPixelLightType,\n    LedPixelReg,\n    LedPixelVariant, RENDER, SRV_LED_PIXEL\n} from \"../jdom/constants\";\nimport {\n    LIGHT_MODE_ADD_RGB, LIGHT_MODE_LAST, LIGHT_MODE_MULTIPLY_RGB, LIGHT_MODE_REPLACE, LIGHT_MODE_SUBTRACT_RGB,\n    LIGHT_PROG_COL1, LIGHT_PROG_COL1_SET, LIGHT_PROG_COL2, LIGHT_PROG_COL3, LIGHT_PROG_COLN, LIGHT_PROG_FADE,\n    LIGHT_PROG_FADE_HSV, LIGHT_PROG_MODE, LIGHT_PROG_MODE1, LIGHT_PROG_RANGE, LIGHT_PROG_ROTATE_BACK, LIGHT_PROG_ROTATE_FWD,\n    LIGHT_PROG_SET_ALL, LIGHT_PROG_SHOW\n} from \"../jdom/light\";\nimport Packet from \"../jdom/packet\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost, { ServiceHostOptions } from \"../jdom/servicehost\";\nimport { isBufferEmpty, toHex } from \"../jdom/utils\";\n\nconst PROG_EOF = 0\nconst PROG_CMD = 1\nconst PROG_NUMBER = 3\nconst PROG_COLOR_BLOCK = 4\n\ninterface RGB {\n    r: number;\n    g: number;\n    b: number;\n}\n\nfunction rgb(r: number, g: number, b: number) {\n    return { r, g, b }\n}\n\nfunction hsv(hue: number, sat: number, val: number): RGB {\n    // scale down to 0..192\n    hue = (hue * 192) >> 8;\n\n    // reference: based on FastLED's hsv2rgb rainbow algorithm\n    // [https://github.com/FastLED/FastLED](MIT)\n    const invsat = 255 - sat;\n    const brightness_floor = (val * invsat) >> 8;\n    const color_amplitude = val - brightness_floor;\n    const section = (hue / 0x40) >> 0; // [0..2]\n    const offset = (hue % 0x40) >> 0;  // [0..63]\n\n    const rampup = offset;\n    const rampdown = (0x40 - 1) - offset;\n\n    const rampup_amp_adj = ((rampup * color_amplitude) / (256 / 4)) >> 0;\n    const rampdown_amp_adj = ((rampdown * color_amplitude) / (256 / 4)) >> 0;\n\n    const rampup_adj_with_floor = (rampup_amp_adj + brightness_floor);\n    const rampdown_adj_with_floor = (rampdown_amp_adj + brightness_floor);\n\n    let r = 0, g = 0, b = 0;\n    if (section) {\n        if (section == 1) {\n            // section 1: 0x40..0x7F\n            r = brightness_floor;\n            g = rampdown_adj_with_floor;\n            b = rampup_adj_with_floor;\n        } else {\n            // section 2; 0x80..0xBF\n            r = rampup_adj_with_floor;\n            g = brightness_floor;\n            b = rampdown_adj_with_floor;\n        }\n    } else {\n        // section 0: 0x00..0x3F\n        r = rampdown_adj_with_floor;\n        g = rampup_adj_with_floor;\n        b = brightness_floor;\n    }\n    return rgb(r, g, b);\n}\n\nfunction mulcol(c: number, m: number): number {\n    let c2 = (c * m) >> 7;\n    if (m < 128 && c == c2)\n        c2--;\n    else if (m > 128 && c == c2)\n        c2++;\n    return c2;\n}\n\nfunction clamp(c: number): number {\n    if (c < 0)\n        return 0;\n    if (c > 255)\n        return 255;\n    return c;\n}\n\nfunction SCALE0(c: number, i: number) {\n    return ((((c) & 0xff) * (1 + (i & 0xff))) >> 8)\n}\n\nexport default class LedPixelServiceHost extends ServiceHost {\n    readonly brightness: RegisterHost<[number]>;\n    readonly actualBrightness: RegisterHost<[number]>;\n    readonly lightType: RegisterHost<[LedPixelLightType]>;\n    readonly numPixels: RegisterHost<[number]>;\n    readonly maxPower: RegisterHost<[number]>;\n    readonly variant: RegisterHost<[LedPixelVariant]>;\n    readonly maxPixels: RegisterHost<[number]>;\n    readonly numRepeats: RegisterHost<[number]>;\n    readonly numColumns: RegisterHost<[number]>;\n\n    private pxbuffer: Uint8Array = new Uint8Array(0);\n\n    private prog_mode = 0;\n    private prog_tmpmode = 0;\n\n    private range_start = 0;\n    private range_end = 0;\n    private range_len = 0;\n    private range_ptr = 0;\n\n    private prog_ptr = 0;\n    private prog_size = 0;\n    private prog_data = new Uint8Array(0);\n\n    private dirty = true;\n    private inited = false;\n\n    power_enable = false;\n\n    constructor(options?: {\n        numPixels?: number,\n        numColumns?: number,\n        maxPixels?: number,\n        maxPower?: number\n    } & ServiceHostOptions) {\n        super(SRV_LED_PIXEL, options);\n\n        const { numColumns, maxPower = 200, maxPixels = 300, numPixels = 15 } = options || {};\n\n        this.brightness = this.addRegister<[number]>(LedPixelReg.Brightness, [15]);\n        this.actualBrightness = this.addRegister<[number]>(LedPixelReg.ActualBrightness, [15]);\n        this.lightType = this.addRegister<[LedPixelLightType]>(LedPixelReg.LightType, [LedPixelLightType.WS2812B_GRB]);\n        this.numPixels = this.addRegister<[number]>(LedPixelReg.NumPixels, [numPixels]);\n        this.maxPower = this.addRegister<[number]>(LedPixelReg.MaxPower, [maxPower]);\n        this.maxPixels = this.addRegister<[number]>(LedPixelReg.MaxPixels, [maxPixels]);\n        this.variant = this.addRegister<[LedPixelVariant]>(LedPixelReg.Variant, [LedPixelVariant.Strip]);\n        this.numRepeats = this.addRegister<[number]>(LedPixelReg.NumRepeats, [0]);\n        if (numColumns !== undefined)\n            this.numColumns = this.addRegister<[number]>(LedPixelReg.NumColumns, [numColumns]);\n\n        this.brightness.on(CHANGE, () => this.intensity = this.requested_intensity);\n        this.numPixels.on(CHANGE, this.allocRxBuffer.bind(this))\n        this.maxPixels.on(CHANGE, this.allocRxBuffer.bind(this));\n\n        this.addCommand(LedPixelCmd.Run, this.handleRun.bind(this));\n\n        this.allocRxBuffer();\n    }\n\n    /**\n     * Gets an array of RGB color numbers\n     */\n    get colors() {\n        return this.pxbuffer;\n    }\n\n    private get maxpower(): number {\n        const [r] = this.maxPower.values();\n        return r;\n    }\n\n    private get maxpixels(): number {\n        const [r] = this.maxPixels.values();\n        return r;\n    }\n\n    private get numpixels(): number {\n        const [r] = this.numPixels.values();\n        return r;\n    }\n\n    private get requested_intensity(): number {\n        const [r] = this.brightness.values();\n        return r;\n    }\n\n    private get intensity(): number {\n        const [r] = this.actualBrightness.values();\n        return r;\n    }\n\n    private set intensity(v: number) {\n        this.actualBrightness.setValues([v]);\n    }\n\n    private jd_power_enable(value: boolean) {\n        this.power_enable = value;\n    }\n\n    is_enabled() {\n        return this.numpixels > 0 && this.requested_intensity > 0;\n    }\n\n    private allocRxBuffer() {\n        if (this.numpixels > this.maxpixels)\n            this.numPixels.setValues([this.maxpixels]);\n        const n = this.numpixels * 3; // don't need to prealloc here\n        if (n !== this.pxbuffer.length)\n            this.pxbuffer = new Uint8Array(n);\n    }\n\n    private reset_range() {\n        this.range_ptr = this.range_start;\n    }\n\n    private set_next(c: RGB) {\n        if (this.range_ptr >= this.range_end)\n            return false;\n\n        const p = this.pxbuffer;\n        const pi = this.range_ptr++ * 3;\n        // fast path\n        if (this.prog_tmpmode == LIGHT_MODE_REPLACE) {\n            p[pi + 0] = c.r;\n            p[pi + 1] = c.g;\n            p[pi + 2] = c.b;\n            return true;\n        }\n\n        let r = p[pi + 0], g = p[pi + 1], b = p[pi + 2];\n        switch (this.prog_tmpmode) {\n            case LIGHT_MODE_ADD_RGB:\n                r += c.r;\n                g += c.g;\n                b += c.b;\n                break;\n            case LIGHT_MODE_SUBTRACT_RGB:\n                r -= c.r;\n                g -= c.g;\n                b -= c.b;\n                break;\n            case LIGHT_MODE_MULTIPLY_RGB:\n                r = mulcol(r, c.r);\n                g = mulcol(g, c.g);\n                b = mulcol(b, c.b);\n                break;\n        }\n        p[pi + 0] = clamp(r);\n        p[pi + 1] = clamp(g);\n        p[pi + 2] = clamp(b);\n        return true;\n    }\n\n    private limit_intensity() {\n        const numpixels = this.numpixels;\n        const requested_intensity = this.requested_intensity;\n        const maxpower = this.maxpower;\n        const pxbuffer = this.pxbuffer;\n\n        let n = numpixels * 3;\n        const prev_intensity = this.intensity;\n        let intensity = this.intensity;\n\n        intensity += 1 + (intensity >> 5);\n        if (intensity > requested_intensity)\n            intensity = requested_intensity;\n\n        let current_full = 0;\n        let current = 0;\n        let current_prev = 0;\n        let di = 0;\n        while (n--) {\n            const v = pxbuffer[di++];\n            current += SCALE0(v, intensity);\n            current_prev += SCALE0(v, prev_intensity);\n            current_full += v;\n        }\n\n        // 46uA per step of LED\n        current *= 46;\n        current_prev *= 46;\n        current_full *= 46;\n\n        // 14mA is the chip at 48MHz, 930uA per LED is static\n        const base_current = 14000 + 930 * numpixels;\n        const current_limit = maxpower * 1000 - base_current;\n\n        if (current <= current_limit) {\n            this.intensity = intensity;\n            // LOG(\"curr: %dmA; not limiting %d\", (base_current + current) / 1000, state->intensity);\n            return;\n        }\n\n        if (current_prev <= current_limit) {\n            return; // no change needed\n        }\n\n        let inten = current_limit / (current_full >> 8) - 1;\n        if (inten < 0)\n            inten = 0;\n        this.intensity = inten;\n    }\n\n    private prog_fetch_color(): RGB {\n        const ptr = this.prog_ptr;\n        if (ptr + 3 > this.prog_size)\n            return rgb(0, 0, 0);\n        const d = this.prog_data;\n        this.prog_ptr = ptr + 3;\n        return rgb(d[ptr + 0], d[ptr + 1], d[ptr + 2]);\n    }\n\n    private prog_fetch(): {\n        dst?: number,\n        prog: number\n    } {\n        if (this.prog_ptr >= this.prog_size)\n            return { prog: PROG_EOF };\n        const d = this.prog_data;\n        const c = d[this.prog_ptr++];\n        if (!(c & 0x80)) {\n            return { dst: c, prog: PROG_NUMBER };\n        } else if ((c & 0xc0) == 0x80) {\n            return {\n                dst: ((c & 0x3f) << 8) | d[this.prog_ptr++],\n                prog: PROG_NUMBER\n            }\n        } else\n            switch (c) {\n                case LIGHT_PROG_COL1:\n                    return {\n                        dst: 1,\n                        prog: PROG_COLOR_BLOCK\n                    };\n                case LIGHT_PROG_COL2:\n                    return {\n                        dst: 2,\n                        prog: PROG_COLOR_BLOCK\n                    }\n                case LIGHT_PROG_COL3:\n                    return {\n                        dst: 3,\n                        prog: PROG_COLOR_BLOCK\n                    }\n                case LIGHT_PROG_COLN:\n                    return {\n                        dst: d[this.prog_ptr++],\n                        prog: PROG_COLOR_BLOCK\n                    }\n                default:\n                    return {\n                        dst: c,\n                        prog: PROG_CMD\n                    }\n            }\n    }\n\n    private prog_fetch_num(defl: number): number {\n        const prev = this.prog_ptr;\n        const fr = this.prog_fetch();\n        const { dst: res, prog: r } = fr;\n        if (r == PROG_NUMBER)\n            return res;\n        else {\n            this.prog_ptr = prev; // rollback\n            return defl;\n        }\n    }\n\n    private prog_fetch_cmd(): number {\n        let cmd: number;\n        // skip until there's a command\n        for (; ;) {\n            const c = this.prog_fetch();\n            switch (c.prog) {\n                case PROG_CMD:\n                    return c.dst;\n                case PROG_COLOR_BLOCK:\n                    while (cmd--)\n                        this.prog_fetch_color();\n                    break;\n                case PROG_EOF:\n                    return 0;\n            }\n        }\n    }\n\n    private prog_set(len: number) {\n        this.reset_range();\n        const start = this.prog_ptr;\n        for (; ;) {\n            this.prog_ptr = start;\n            let ok = false;\n            for (let i = 0; i < len; ++i) {\n                // don't break the loop immediately if !ok - make sure the prog counter advances\n                ok = this.set_next(this.prog_fetch_color());\n            }\n            if (!ok)\n                break;\n        }\n    }\n\n    private prog_fade(len: number, usehsv: boolean) {\n        if (len < 2) {\n            this.prog_set(len);\n            return;\n        }\n        let colidx = 0;\n        const endp = this.prog_ptr + 3 * len;\n        let col0 = this.prog_fetch_color();\n        let col1 = this.prog_fetch_color();\n\n        const colstep = ((len - 1) << 16) / this.range_len;\n        let colpos = 0;\n\n        this.reset_range();\n\n        for (; ;) {\n            while (colidx < (colpos >> 16)) {\n                colidx++;\n                col0 = col1;\n                col1 = this.prog_fetch_color();\n            }\n            const fade1 = colpos & 0xffff;\n            const fade0 = 0xffff - fade1;\n            const col = rgb(\n                (col0.r * fade0 + col1.r * fade1 + 0x8000) >> 16,\n                (col0.g * fade0 + col1.g * fade1 + 0x8000) >> 16,\n                (col0.b * fade0 + col1.b * fade1 + 0x8000) >> 16\n            );\n            if (!this.set_next(usehsv ? hsv(col.r, col.g, col.b) : col))\n                break;\n            colpos += colstep;\n        }\n\n        this.prog_ptr = endp;\n    }\n\n    private prog_rot(shift: number) {\n        if (shift <= 0 || shift >= this.range_len)\n            return;\n\n        const range_start = this.range_start;\n        const range_end = this.range_end;\n        const buf = this.pxbuffer;\n\n        let first = range_start * 3;\n        let middle = (range_start + shift) * 3;\n        const last = range_end * 3;\n        let next = middle;\n\n        while (first != next) {\n            const tmp = buf[first];\n            const tmp1 = buf[first + 1];\n            const tmp2 = buf[first + 2];\n\n            buf[first] = buf[next];\n            buf[first + 1] = buf[next + 1];\n            buf[first + 2] = buf[next + 2];\n\n            buf[next] = tmp;\n            buf[next + 1] = tmp1;\n            buf[next + 2] = tmp2;\n\n            first += 3;\n            next += 3;\n\n            if (next === last)\n                next = middle;\n            else if (first === middle)\n                middle = next;\n        }\n    }\n\n    private fetch_mode(): number {\n        const m = this.prog_fetch_num(0);\n        if (m > LIGHT_MODE_LAST)\n            return 0;\n        return m;\n    }\n\n    private prog_process() {\n        const data = this.prog_data;\n\n        if (this.prog_ptr >= this.prog_size)\n            return false;\n\n        // check that the program wasn't restarted\n        // concurrently\n        while (data === this.prog_data) {\n            const cmd = this.prog_fetch_cmd();\n            if (!cmd)\n                break;\n\n            if (cmd == LIGHT_PROG_SHOW) {\n                const k = this.prog_fetch_num(50);\n                this.dirty = true;\n                setInterval(this.animationFrame.bind(this), k)\n                // check data is still current;\n                return data === this.prog_data;\n            }\n\n            switch (cmd) {\n                case LIGHT_PROG_COL1_SET:\n                    this.range_ptr = this.range_start + this.prog_fetch_num(0);\n                    this.set_next(this.prog_fetch_color());\n                    break;\n                case LIGHT_PROG_FADE:\n                case LIGHT_PROG_FADE_HSV:\n                case LIGHT_PROG_SET_ALL: {\n                    const { dst: len, prog: pcmd } = this.prog_fetch();\n                    if (pcmd != PROG_COLOR_BLOCK || len == 0)\n                        continue; // bailout\n                    if (cmd == LIGHT_PROG_SET_ALL)\n                        this.prog_set(len);\n                    else\n                        this.prog_fade(len, cmd == LIGHT_PROG_FADE_HSV);\n                    break;\n                }\n\n                case LIGHT_PROG_ROTATE_BACK:\n                case LIGHT_PROG_ROTATE_FWD: {\n                    let k = this.prog_fetch_num(1);\n                    const len = this.range_len;\n                    if (len == 0)\n                        continue;\n                    while (k >= len)\n                        k -= len;\n                    if (cmd == LIGHT_PROG_ROTATE_FWD && k != 0)\n                        k = len - k;\n                    this.prog_rot(k);\n                    break;\n                }\n\n                case LIGHT_PROG_MODE1:\n                    this.prog_tmpmode = this.fetch_mode();\n                    break;\n\n                case LIGHT_PROG_MODE:\n                    this.prog_mode = this.fetch_mode();\n                    break;\n\n                case LIGHT_PROG_RANGE: {\n                    let start = this.prog_fetch_num(0);\n                    const len = this.prog_fetch_num(this.numpixels);\n                    const numpixels = this.numpixels;\n                    if (start > numpixels)\n                        start = numpixels;\n                    let end = start + len;\n                    if (end > numpixels)\n                        end = numpixels;\n                    this.range_start = start;\n                    this.range_end = end;\n                    this.range_len = end - start;\n                    break;\n                }\n            }\n\n            if (cmd != LIGHT_PROG_MODE1)\n                this.prog_tmpmode = this.prog_mode;\n        }\n\n        return false;\n    }\n\n    /**\n     * Perform an animation step\n     */\n    animationFrame() {\n        if (!this.prog_process())\n            return; // concurrently udpated\n\n        if (!this.is_enabled()) return;\n        if (this.dirty) {\n            this.dirty = false;\n            if (isBufferEmpty(this.pxbuffer)) {\n                this.jd_power_enable(false);\n                return;\n            } else {\n                this.jd_power_enable(true);\n            }\n            this.limit_intensity();\n            // we're ready to render...\n            this.emit(RENDER);\n        }\n    }\n\n    private sync_config() {\n        if (!this.is_enabled()) {\n            this.jd_power_enable(false);\n            return;\n        }\n\n        if (!this.inited) {\n            this.inited = true;\n            // initialize?\n            // px_init(this.lighttype);\n        }\n\n        this.jd_power_enable(true);\n    }\n\n    private handleRun(pkt: Packet) {\n        console.log(\"run\", { data: toHex(pkt.data) })\n\n        this.prog_data = pkt.data;\n        this.prog_size = this.prog_data.length;\n        this.prog_ptr = 0;\n\n        this.range_start = 0;\n        this.range_end = this.range_len = this.numpixels;\n        this.prog_tmpmode = this.prog_mode = 0;\n\n        this.sync_config();\n        this.animationFrame();\n    }\n}","import { MatrixKeypadReg, SRV_MATRIX_KEYPAD } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport SensorServiceHost from \"./sensorservicehost\";\n\nexport default class MatrixKeypadServiceHost extends SensorServiceHost<[([number])[]]> {\n    readonly rows: RegisterHost<[number]>;\n    readonly columns: RegisterHost<[number]>;\n    readonly labels: RegisterHost<[([string])[]]>;\n\n    constructor(columns: number, rows: number, labels?: string[]) {\n        super(SRV_MATRIX_KEYPAD, {\n            readingValues: [[]]\n        })\n\n        this.columns = this.addRegister(MatrixKeypadReg.Columns, [columns]);\n        this.rows = this.addRegister(MatrixKeypadReg.Rows, [rows]);\n        this.labels = this.addRegister(MatrixKeypadReg.Labels, labels ? [labels.map(l => [l])] : undefined);\n    }\n\n    async down(button: number) {\n        const [values] = this.reading.values();\n        const valuei = values.findIndex(v => v[0] === button);\n        if (valuei < 0) {\n            values.push([button]);\n            this.reading.setValues([values]);\n        }\n    }\n\n    async up(button: number) {\n        const [values] = this.reading.values();\n        const valuei = values.findIndex(v => v[0] === button);\n        if (valuei > -1) {\n            values.splice(valuei, 1)\n            this.reading.setValues([values]);\n        }\n    }\n}","import { MotorReg, SRV_MOTOR } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\n\nexport default class MotorServiceHost extends ServiceHost {\n    readonly duty: RegisterHost<[number]>;\n    readonly enabled: RegisterHost<[boolean]>;\n    readonly loadTorque: RegisterHost<[number]>;\n    readonly loadSpeed: RegisterHost<[number]>;\n\n    constructor(instanceName?: string) {\n        super(SRV_MOTOR, { instanceName });\n\n        this.duty = this.addRegister<[number]>(MotorReg.Duty, [0]);\n        this.enabled = this.addRegister<[boolean]>(MotorReg.Enabled, [false]);\n        this.loadTorque = this.addRegister<[number]>(MotorReg.LoadTorque);\n        this.loadSpeed = this.addRegister<[number]>(MotorReg.LoadSpeed);\n    }\n}","import { JDClient } from \"../jdom/client\";\nimport { CHANGE, SystemEvent, SystemReadingThreshold } from \"../jdom/constants\";\nimport AnalogSensorServiceHost from \"./analogsensorservicehost\";\n\nexport class LevelDetector extends JDClient {\n    private _state: number;\n\n    constructor(readonly service: AnalogSensorServiceHost) {\n        super();\n        this.reset();\n        if (this.service.lowThreshold)\n            this.mount(this.service.lowThreshold.subscribe(CHANGE, this.reset.bind(this)));\n        if (this.service.highThreshold)\n            this.mount(this.service.highThreshold.subscribe(CHANGE, this.reset.bind(this)));\n        this.mount(this.service.reading.subscribe(CHANGE, this.update.bind(this)));\n    }\n\n    reset() {\n        this._state = SystemReadingThreshold.Neutral;\n    }\n\n    update() {\n        const [level] = this.service.reading.values();\n        if (level === undefined) {\n            this.setState(SystemReadingThreshold.Neutral);\n            return;\n        }\n\n        const [high] = this.service.highThreshold?.values();\n        if (high !== undefined && level >= high) {\n            this.setState(SystemReadingThreshold.High);\n            return;\n        }\n\n        const [low] = this.service.lowThreshold?.values();\n        if (low !== undefined && level <= low) {\n            this.setState(SystemReadingThreshold.Low);\n            return;\n        }\n\n        // neutral\n        this.setState(SystemReadingThreshold.Neutral);\n    }\n\n    private setState(state: number) {\n        if (state === this._state)\n            return;\n\n        this._state = state;\n        switch (state) {\n            case SystemReadingThreshold.High:\n                this.service.sendEvent(SystemEvent.High)\n                break;\n            case SystemReadingThreshold.Low:\n                this.service.sendEvent(SystemEvent.Low)\n                break;\n            case SystemReadingThreshold.Neutral:\n                this.service.sendEvent(SystemEvent.Neutral)\n                break;\n        }\n    }\n}","import { SystemReg } from \"../jdom/constants\"\nimport RegisterHost from \"../jdom/registerhost\"\nimport { LevelDetector } from \"./leveldetector\"\nimport SensorServiceHost, { SensorServiceOptions } from \"./sensorservicehost\"\n\nexport interface AnalogSensorServiceHostOptions\n    extends SensorServiceOptions<[number]> {\n    minReading?: number\n    maxReading?: number\n    lowThreshold?: number\n    highThreshold?: number\n    readingResolution?: number\n}\n\nexport default class AnalogSensorServiceHost extends SensorServiceHost<\n    [number]\n> {\n    readonly lowThreshold: RegisterHost<[number]>\n    readonly highThreshold: RegisterHost<[number]>\n    readonly levelDetector: LevelDetector\n\n    constructor(\n        serviceClass: number,\n        options?: AnalogSensorServiceHostOptions\n    ) {\n        super(serviceClass, options)\n        const {\n            minReading,\n            maxReading,\n            lowThreshold,\n            highThreshold,\n            readingResolution,\n        } = options || {}\n        if (minReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MinReading, [minReading])\n        if (maxReading !== undefined)\n            this.addRegister<[number]>(SystemReg.MaxReading, [maxReading])\n        if (readingResolution !== undefined)\n            this.addRegister<[number]>(SystemReg.ReadingResolution, [\n                readingResolution,\n            ])\n        if (lowThreshold !== undefined || this.highThreshold !== undefined) {\n            if (lowThreshold !== undefined)\n                this.lowThreshold = this.addRegister<[number]>(\n                    SystemReg.LowThreshold,\n                    [lowThreshold]\n                )\n            if (highThreshold !== undefined)\n                this.highThreshold = this.addRegister<[number]>(\n                    SystemReg.HighThreshold,\n                    [highThreshold]\n                )\n            this.levelDetector = new LevelDetector(this)\n        }\n    }\n}\n","import { CHANGE, RainGaugeReg, SRV_RAIN_GAUGE } from \"../jdom/constants\"\nimport RegisterHost from \"../jdom/registerhost\";\nimport AnalogSensorServiceHost from \"./analogsensorservicehost\";\n\nexport default class RainGaugeServiceHost extends AnalogSensorServiceHost {\n    readonly precipitationPrecision: RegisterHost<[number]>;\n    private _tiltCount = 0;\n    private _level = 0;\n\n    constructor(options?: { bucketSize?: number }) {\n        super(SRV_RAIN_GAUGE, {\n            readingValues: [0]\n        });\n        const { bucketSize } = options || {};\n\n        this.precipitationPrecision = this.addRegister<[number]>(RainGaugeReg.PrecipitationPrecision, [bucketSize || 0.2794])\n        this._level = 0;\n    }\n\n    get tiltCount() {\n        return this._tiltCount;\n    }\n\n    get level() {\n        return this._level;\n    }\n\n    async rain(fraction: number) {\n        if (!fraction) return;\n\n        this._level += fraction;\n        if (this._level >= 0.7)\n            await this.tilt();\n        else\n            this.emit(CHANGE);\n    }\n\n    async tilt() {\n        this._tiltCount++;\n        this._level = 0;\n\n        const [bucket] = this.precipitationPrecision.values()\n        const [current] = this.reading.values();\n        this.reading.setValues([current + (bucket || 0.2)]);\n\n        this.emit(CHANGE);\n    }\n}","import { ReflectedLightReg, ReflectedLightVariant, SRV_REFLECTED_LIGHT } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport AnalogSensorServiceHost from \"./analogsensorservicehost\";\n\nexport default class ReflectedLightServiceHost extends AnalogSensorServiceHost {\n    readonly variant: RegisterHost<[ReflectedLightVariant]>;\n\n    constructor(options?: { variant?: ReflectedLightVariant }) {\n        super(SRV_REFLECTED_LIGHT, { readingValues: [0] })\n        const { variant } = options || {};\n\n        this.variant = this.addRegister<[ReflectedLightVariant]>(ReflectedLightReg.Variant, [variant || ReflectedLightVariant.InfraredDigital])\n    }\n}","import { RotaryEncoderReg, SRV_ROTARY_ENCODER } from \"../jdom/constants\";\nimport SensorServiceHost from \"./sensorservicehost\";\nimport RegisterHost from \"../jdom/registerhost\";\n\nexport default class RotaryEncoderServiceHost extends SensorServiceHost<[number]> {\n    readonly clicksPerTurn: RegisterHost<[number]>;\n\n    constructor() {\n        super(SRV_ROTARY_ENCODER, { readingValues: [0], streamingInterval: 50 });\n\n        this.clicksPerTurn = this.addRegister<[number]>(RotaryEncoderReg.ClicksPerTurn, [12]);\n    }\n\n    async rotate(clicks: number) {\n        const [position] = this.reading.values();\n        this.reading.setValues([position + (clicks >> 0)]);\n    }\n}","import { ServoReg, SRV_SERVO } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost, { ServiceHostOptions } from \"../jdom/servicehost\";\n\nexport default class ServoServiceHost extends ServiceHost {\n    readonly angle: RegisterHost<[number]>;\n    readonly offset: RegisterHost<[number]>;\n    readonly enabled: RegisterHost<[boolean]>;\n    readonly minAngle: RegisterHost<[number]>;\n    readonly maxAngle: RegisterHost<[number]>;\n    readonly responseSpeed: RegisterHost<[number]>;\n    readonly stallTorque: RegisterHost<[number]>;\n\n    constructor(options?: {\n        minAngle?: number,\n        maxAngle?: number,\n        responseSpeed?: number,\n        stallTorque?: number\n    } & ServiceHostOptions) {\n        super(SRV_SERVO, options);\n        const { minAngle, maxAngle, responseSpeed, stallTorque } = options || {};\n\n        this.angle = this.addRegister<[number]>(ServoReg.Angle, [0]);\n        this.enabled = this.addRegister<[boolean]>(ServoReg.Enabled, [false]);\n        this.minAngle = this.addRegister<[number]>(ServoReg.MinAngle, minAngle !== undefined ? [minAngle] : undefined);\n        this.maxAngle = this.addRegister<[number]>(ServoReg.MaxAngle, maxAngle !== undefined ? [maxAngle] : undefined);\n        this.offset = this.addRegister<[number]>(ServoReg.Offset, [0]);\n        this.responseSpeed = this.addRegister<[number]>(ServoReg.ResponseSpeed, responseSpeed !== undefined ? [responseSpeed] : undefined);\n        this.stallTorque = this.addRegister<[number]>(ServoReg.StallTorque, stallTorque !== undefined ? [stallTorque] : undefined);\n    }\n}","import { SettingsCmd, SettingsEvent, SRV_SETTINGS } from \"../jdom/constants\";\nimport { jdpack } from \"../jdom/pack\";\nimport Packet from \"../jdom/packet\";\nimport { OutPipe } from \"../jdom/pipes\";\nimport ServiceHost from \"../jdom/servicehost\";\nimport { bufferToString, SMap, stringToBuffer } from \"../jdom/utils\";\n\nexport default class SettingsServiceHost extends ServiceHost {\n    private settings: SMap<string>;\n\n    constructor(readonly storageKey?: string) {\n        super(SRV_SETTINGS);\n\n        this.addCommand(SettingsCmd.Get, this.handleGet.bind(this));\n        this.addCommand(SettingsCmd.Set, this.handleSet.bind(this));\n        this.addCommand(SettingsCmd.Delete, this.handleDelete.bind(this));\n        this.addCommand(SettingsCmd.ListKeys, this.handleListKeys.bind(this));\n        this.addCommand(SettingsCmd.List, this.handleList.bind(this));\n        this.addCommand(SettingsCmd.Clear, this.handleClear.bind(this));\n\n        this.settings = this.read();\n    }\n\n    private getPayload(key: string) {\n        const value = this.settings[key];\n        const secret = /^$/.test(key);\n\n        let payload: Uint8Array;\n        if (value === undefined) {\n            payload = new Uint8Array(0);\n        } else if (secret) {\n            const payload = new Uint8Array(1);\n            payload[0] = 0;\n        } else { // return value\n            payload = stringToBuffer(value);\n        }\n\n        return payload;\n    }\n\n    private async handleGet(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\");\n        const payload = this.getPayload(key);\n        const resp = Packet.jdpacked<[string, Uint8Array]>(SettingsCmd.Get, \"z b\", [key, payload]);\n        await this.sendPacketAsync(resp);\n    }\n\n    private async handleSet(pkt: Packet) {\n        const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\");\n        console.log({ cmd: \"set\", key, value })\n        this.settings[key] = bufferToString(value);\n        await this.save();\n    }\n\n    private async handleDelete(pkt: Packet) {\n        const [key] = pkt.jdunpack<[string]>(\"s\");\n        delete this.settings[key];\n        await this.save();\n    }\n\n    private async handleListKeys(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(\n            Object.keys(this.settings),\n            k => jdpack<[string]>(\"s\", [k])\n        )\n    }\n\n    private async handleList(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(\n            Object.keys(this.settings),\n            k => {\n                const payload = this.getPayload(k);\n                return jdpack<[string, Uint8Array]>(\"z b\", [k, payload]);\n            });\n    }\n\n    private handleClear() {\n        this.settings = {};\n        this.save();\n    }\n\n    private read(): SMap<string> {\n        if (!this.storageKey)\n            return {};\n\n        try {\n            const payload = typeof window !== \"undefined\"\n                && window.localStorage.getItem(this.storageKey);\n            return JSON.parse(payload || \"{}\")\n        }\n        catch (e) {\n            console.log(e)\n            return {};\n        }\n    }\n\n    private async save() {\n        if (this.storageKey) {\n            try {\n                if (typeof window !== \"undefined\")\n                    window.localStorage.setItem(this.storageKey, JSON.stringify(this.settings));\n            }\n            catch (e) {\n                console.log(e)\n            }\n        }\n        await this.sendEvent(SettingsEvent.Change)\n    }\n}","import { SpeechSynthesisCmd, SpeechSynthesisReg, SRV_SPEECH_SYNTHESIS } from \"../jdom/constants\";\nimport { Packet } from \"../jdom/packet\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\n\nexport default class SpeechSynthesisServiceHost extends ServiceHost {\n    readonly enabled: RegisterHost<[boolean]>;\n    readonly pitch: RegisterHost<[number]>;\n    readonly rate: RegisterHost<[number]>;\n    readonly lang: RegisterHost<[string]>;\n    readonly volume: RegisterHost<[number]>;\n\n    readonly synthesis: SpeechSynthesis;\n\n    constructor() {\n        super(SRV_SPEECH_SYNTHESIS)\n\n        this.synthesis = typeof window !== \"undefined\" && window.speechSynthesis;\n\n        this.enabled = this.addRegister<[boolean]>(SpeechSynthesisReg.Enabled, [!this.synthesis?.paused]);\n        this.pitch = this.addRegister<[number]>(SpeechSynthesisReg.Pitch, [1]);\n        this.rate = this.addRegister<[number]>(SpeechSynthesisReg.Rate, [1]);\n        this.lang = this.addRegister<[string]>(SpeechSynthesisReg.Lang, [\"\"]);\n        this.volume = this.addRegister<[number]>(SpeechSynthesisReg.Volume, [0.5])\n\n        this.addCommand(SpeechSynthesisCmd.Speak, this.handleSpeak.bind(this));\n        this.addCommand(SpeechSynthesisCmd.Cancel, this.handleCancel.bind(this));\n    }\n\n    private handleSpeak(pkt: Packet) {\n        const [text] = pkt.jdunpack(\"s\");\n        if (!this.synthesis || !text)\n            return;\n\n        const [pitch] = this.pitch.values();\n        const [rate] = this.pitch.values()\n        const [lang] = this.lang.values()\n        const [volume] = this.volume.values()\n\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.pitch = pitch;\n        utterance.rate = rate;\n        utterance.lang = lang;\n        utterance.volume = volume;\n\n        this.synthesis.speak(utterance);\n    }\n\n    private handleCancel(pkt: Packet) {\n        this.synthesis?.cancel();\n    }\n}","import { SRV_SWITCH, SwitchEvent, SwitchReg, SwitchVariant } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport SensorServiceHost from \"./sensorservicehost\";\n\nexport default class SwitchServiceHost extends SensorServiceHost<[boolean]> {\n    readonly variant: RegisterHost<[SwitchVariant]>;\n    readonly autoOffDelay: RegisterHost<[number]>;\n    private autoOffInterval: any;\n\n    constructor(options?: { autoOffDelay?: number, variant?: SwitchVariant }) {\n        super(SRV_SWITCH, { readingValues: [false], streamingInterval: 50 });\n        const { autoOffDelay, variant } = options || {};\n\n        this.variant = this.addRegister(SwitchReg.Variant, variant !== undefined ? [variant] : undefined)\n        this.autoOffDelay = this.addRegister(SwitchReg.AutoOffDelay, autoOffDelay !== undefined ? [autoOffDelay] : undefined);\n    }\n\n    async toggle() {\n        const [v] = this.reading.values();\n        if (!v)\n            await this.switchOn();\n        else\n            await this.switchOff();\n    }\n\n    async switchOn() {\n        const [v] = this.reading.values();\n        if (!v) {\n            this.reading.setValues([true]);\n            await this.sendEvent(SwitchEvent.On);\n            this.startAutoOff();\n        }\n    }\n\n    async switchOff() {\n        const [v] = this.reading.values();\n        if (v) {\n            this.reading.setValues([false]);\n            await this.sendEvent(SwitchEvent.Off);\n            this.stopAutoOff();\n        }\n    }\n\n    private startAutoOff() {\n        this.stopAutoOff();\n        if (this.autoOffDelay.data !== undefined) {\n            const [delay] = this.autoOffDelay.values();\n            this.autoOffInterval = setTimeout(this.switchOn.bind(this), delay);\n        }\n    }\n\n    private stopAutoOff() {\n        if (this.autoOffInterval) {\n            clearTimeout(this.autoOffInterval)\n            this.autoOffInterval = undefined;\n        }\n    }\n}","import { SRV_TRAFFIC_LIGHT, TrafficLightReg } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost, { ServiceHostOptions } from \"../jdom/servicehost\";\n\nexport default class TrafficLightServiceHost extends ServiceHost {\n    readonly red: RegisterHost<[boolean]>;\n    readonly orange: RegisterHost<[boolean]>;\n    readonly green: RegisterHost<[boolean]>;\n\n    constructor(options?: ServiceHostOptions) {\n        super(SRV_TRAFFIC_LIGHT, options);\n\n        this.red = this.addRegister(TrafficLightReg.Red, [true]);\n        this.orange = this.addRegister(TrafficLightReg.Orange, [false]);\n        this.green = this.addRegister(TrafficLightReg.Green, [false]);\n    }\n}","import {\n    LedCmd,\n    LedReg,\n    LedVariant,\n    REGISTER_PRE_GET,\n    SRV_LED,\n} from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport RegisterHost from \"../jdom/registerhost\"\nimport ServiceHost, { ServiceHostOptions } from \"../jdom/servicehost\"\nexport default class LEDServiceHost extends ServiceHost {\n    readonly color: RegisterHost<[number, number, number]>\n    readonly maxPower: RegisterHost<[number]>\n    readonly ledCount: RegisterHost<[number]>\n    readonly luminousIntensity: RegisterHost<[number]>\n    readonly waveLength: RegisterHost<[number]>\n    readonly variant: RegisterHost<[LedVariant]>\n\n    private _animation: {\n        red: number\n        green: number\n        blue: number\n        toRed: number\n        toGreen: number\n        toBlue: number\n        speed: number\n        start: number\n    }\n\n    constructor(\n        options?: {\n            ledCount?: number\n            variant?: LedVariant\n            luminousIntensity?: number\n            waveLength?: number\n            maxPower?: number\n            color?: [number, number, number]\n        } & ServiceHostOptions\n    ) {\n        super(SRV_LED, options)\n        const {\n            ledCount = 1,\n            variant = LedVariant.ThroughHole,\n            luminousIntensity,\n            waveLength,\n            color = [255, 0, 0],\n            maxPower = 200,\n        } = options || {}\n\n        this.color = this.addRegister<[number, number, number]>(\n            LedReg.Color,\n            color\n        )\n        this.color.on(REGISTER_PRE_GET, this.updateColor.bind(this))\n        this.maxPower = this.addRegister(LedReg.MaxPower, [maxPower])\n        this.ledCount = this.addRegister(LedReg.LedCount, [ledCount])\n        if (luminousIntensity !== undefined)\n            this.luminousIntensity = this.addRegister(\n                LedReg.LuminousIntensity,\n                [luminousIntensity]\n            )\n        if (waveLength !== undefined)\n            this.waveLength = this.addRegister(LedReg.WaveLength, [waveLength])\n        this.variant = this.addRegister(LedReg.Variant, [variant])\n\n        this.addCommand(LedCmd.Animate, this.handleAnimate.bind(this))\n    }\n\n    private updateColor() {\n        if (!this._animation) return // nothing to do\n\n        // compute new color\n        const {\n            red,\n            green,\n            blue,\n            toRed,\n            toGreen,\n            toBlue,\n            speed,\n            start,\n        } = this._animation\n        const now = this.device.bus.timestamp\n        const elapsed = now - start\n        // see control.md\n        const total = ((512 / speed) * 100) | 0\n        const progress = elapsed / total // may overshoot\n        const alpha = Math.min(1, progress)\n        const oneAlpha = 1 - alpha\n\n        const newRed = (red * alpha + oneAlpha * toRed) | 0\n        const newGreen = (green * alpha + oneAlpha * toGreen) | 0\n        const newBlue = (blue * alpha + oneAlpha * toBlue) | 0\n\n        this.color.setValues([newRed, newGreen, newBlue], true)\n\n        // clear animation when done\n        if (progress > 1) this._animation = undefined\n    }\n\n    private handleAnimate(pkt: Packet) {\n        const [toRed, toGreen, toBlue, speed] = pkt.jdunpack<\n            [number, number, number, number]\n        >(\"u8 u8 u8 u8\")\n\n        if (speed == 0) {\n            this.color.setValues([toRed, toGreen, toBlue])\n            this._animation = undefined\n        } else {\n            const [red, green, blue] = this.color.values()\n\n            this._animation = {\n                red,\n                green,\n                blue,\n                toRed,\n                toGreen,\n                toBlue,\n                speed,\n                start: this.device.bus.timestamp,\n            }\n        }\n    }\n}\n","import { SoundPlayerCmd, SoundPlayerReg, SRV_SOUND_PLAYER } from \"../jdom/constants\";\nimport { jdpack } from \"../jdom/pack\";\nimport Packet from \"../jdom/packet\";\nimport { OutPipe } from \"../jdom/pipes\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\n\nexport type SoundPlayerSound = [number, string];\n\nexport default class SoundPlayerServiceHost extends ServiceHost {\n    readonly volume: RegisterHost<[number]>;\n    onPlay?: (volume: number, name: string) => void;\n    constructor(\n        private readonly sounds: SoundPlayerSound[]) {\n        super(SRV_SOUND_PLAYER);\n\n        this.volume = this.addRegister(SoundPlayerReg.Volume, [0.5]);\n        this.addCommand(SoundPlayerCmd.ListSounds, this.handleListSounds.bind(this));\n        this.addCommand(SoundPlayerCmd.Play, this.handlePlay.bind(this))\n    }\n\n    private async handleListSounds(pkt: Packet) {\n        const pipe = OutPipe.from(this.device.bus, pkt, true);\n        await pipe.respondForEach(this.sounds, sound => jdpack<[number, string]>(\"u32 s\", sound))\n    }\n\n    private handlePlay(pkt: Packet) {\n        const [volume, name] = pkt.jdunpack(\"u0.16 s\");\n        this.onPlay?.(volume, name)\n    }\n}","import {\n    REGISTER_PRE_GET,\n    RngReg,\n    RngVariant,\n    SRV_RNG,\n} from \"../jdom/constants\"\nimport RegisterHost from \"../jdom/registerhost\"\nimport ServiceHost from \"../jdom/servicehost\"\n\nexport default class RandomNumberGeneratorServiceHost extends ServiceHost {\n    readonly reading: RegisterHost<[Uint8Array]>\n    constructor() {\n        super(SRV_RNG, {\n            variant: RngVariant.WebCrypto,\n        })\n\n        this.reading = this.addRegister(RngReg.Random, [new Uint8Array(64)])\n        this.reading.on(REGISTER_PRE_GET, this.handleRefresh.bind(this))\n    }\n\n    private handleRefresh() {\n        // generate new data\n        const data = new Uint8Array(64)\n        if (typeof window !== \"undefined\") window.crypto.getRandomValues(data)\n        this.reading.setValues([data], true)\n    }\n}\n","import { CHANGE, CompassCmd, CompassReg, SRV_COMPASS, SystemStatusCodes } from \"../jdom/constants\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport AnalogSensorServiceHost from \"./analogsensorservicehost\";\n\nexport default class CompassServiceHost extends AnalogSensorServiceHost {\n    private enabled: RegisterHost<[boolean]>;\n    constructor() {\n        super(SRV_COMPASS, {\n            readingValues: [0],\n            minReading: 0,\n            maxReading: 360,\n            readingError: [1]\n        })\n\n        this.enabled = this.addRegister(CompassReg.Enabled, [false]);\n        this.enabled.on(CHANGE, () => {\n            const [status] = this.statusCode.values();\n            if (status === SystemStatusCodes.CalibrationNeeded) {\n                console.log(\"start calibration\")\n                this.calibrate();\n            }\n        })\n    }\n}","import { DmxCmd, SRV_DMX } from \"../jdom/constants\";\nimport Packet from \"../jdom/packet\";\nimport ServiceHost from \"../jdom/servicehost\";\nimport { toHex } from \"../jdom/utils\";\n\nexport default class DMXServiceHost extends ServiceHost {\n    constructor() {\n        super(SRV_DMX, {\n            intensityValues: [0]\n        })\n\n        this.addCommand(DmxCmd.Send, this.handleSend.bind(this));\n    }\n\n    private handleSend(pkt: Packet) {\n        // ignore\n        console.log(`dmx send`, toHex(pkt.data));\n    }\n}","import { getNumber, NumberFormat, setNumber } from \"../jdom/buffer\";\nimport { BitRadioCmd, BitRadioReg, SRV_BIT_RADIO } from \"../jdom/constants\";\nimport { inIFrame } from \"../jdom/iframeclient\";\nimport Packet from \"../jdom/packet\";\nimport RegisterHost from \"../jdom/registerhost\";\nimport ServiceHost from \"../jdom/servicehost\";\nimport { memcpy, stringToBuffer } from \"../jdom/utils\";\n\n// keep in sync with CODAL\nconst RADIO_MAX_PACKET_SIZE = 32;\nconst MAX_FIELD_DOUBLE_NAME_LENGTH = 8;\nconst MAX_PAYLOAD_LENGTH = 20;\nconst PACKET_PREFIX_LENGTH = 9;\nconst VALUE_PACKET_NAME_LEN_OFFSET = 13;\nconst DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET = 17;\n\n// Packet Spec:\n// | 0              | 1 ... 4       | 5 ... 8           | 9 ... 28\n// ----------------------------------------------------------------\n// | packet type    | system time   | serial number     | payload\n//\n// Serial number defaults to 0 unless enabled by user\n\n// payload: number (9 ... 12)\nconst PACKET_TYPE_NUMBER = 0;\n// payload: number (9 ... 12), name length (13), name (14 ... 26)\nconst PACKET_TYPE_VALUE = 1;\n// payload: string length (9), string (10 ... 28)\nconst PACKET_TYPE_STRING = 2;\n// payload: buffer length (9), buffer (10 ... 28)\nconst PACKET_TYPE_BUFFER = 3;\n// payload: number (9 ... 16)\nconst PACKET_TYPE_DOUBLE = 4;\n// payload: number (9 ... 16), name length (17), name (18 ... 26)\nconst PACKET_TYPE_DOUBLE_VALUE = 5;\n\nfunction getStringOffset(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return PACKET_PREFIX_LENGTH;\n        case PACKET_TYPE_VALUE:\n            return VALUE_PACKET_NAME_LEN_OFFSET;\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return DOUBLE_VALUE_PACKET_NAME_LEN_OFFSET;\n        default:\n            return undefined;\n    }\n}\n\n/*\nfunction getMaxStringLength(packetType: number) {\n    switch (packetType) {\n        case PACKET_TYPE_STRING:\n            return MAX_PAYLOAD_LENGTH - 2;\n        case PACKET_TYPE_VALUE:\n        case PACKET_TYPE_DOUBLE_VALUE:\n            return MAX_FIELD_DOUBLE_NAME_LENGTH;\n        default:\n            return undefined;\n    }\n}\n*/\n\nfunction truncateString(str: string) {\n    // TODO\n    return str;\n}\n\nclass RadioPacket {\n    public static getPacket(data: Uint8Array) {\n        if (!data) return undefined;\n        // last 4 bytes is RSSi\n        return new RadioPacket(data);\n    }\n\n    public static mkPacket(packetType: number) {\n        const res = new RadioPacket();\n        res.data[0] = packetType;\n        return res;\n    }\n\n    private constructor(public readonly data?: Uint8Array) {\n        if (!data) this.data = new Uint8Array(RADIO_MAX_PACKET_SIZE + 4);\n    }\n\n    get signal() {\n        return getNumber(this.data, NumberFormat.Int32LE, this.data.length - 4);\n    }\n\n    get packetType() {\n        return this.data[0];\n    }\n\n    get time() {\n        return getNumber(this.data, NumberFormat.Int32LE, 1);\n    }\n\n    set time(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 1, val);\n    }\n\n    get serial() {\n        return getNumber(this.data, NumberFormat.Int32LE, 5);\n    }\n\n    set serial(val: number) {\n        setNumber(this.data, NumberFormat.Int32LE, 5, val);\n    }\n\n    get stringPayload() {\n        const offset = getStringOffset(this.packetType) as number;\n        return offset ? this.data.slice(offset + 1, this.data[offset]).toString() : undefined;\n    }\n\n    set stringPayload(val: string) {\n        const offset = getStringOffset(this.packetType) as number;\n        if (offset) {\n            const buf = stringToBuffer(truncateString(val));\n            this.data[offset] = buf.length;\n            memcpy(this.data, offset + 1, buf);\n        }\n    }\n\n    get numberPayload() {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                return getNumber(this.data, NumberFormat.Int32LE, PACKET_PREFIX_LENGTH);\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                return getNumber(this.data, NumberFormat.Float64LE, PACKET_PREFIX_LENGTH);\n        }\n        return undefined;\n    }\n\n    set numberPayload(val: number) {\n        switch (this.packetType) {\n            case PACKET_TYPE_NUMBER:\n            case PACKET_TYPE_VALUE:\n                setNumber(this.data, NumberFormat.Int32LE, PACKET_PREFIX_LENGTH, val);\n                break;\n            case PACKET_TYPE_DOUBLE:\n            case PACKET_TYPE_DOUBLE_VALUE:\n                setNumber(this.data, NumberFormat.Float64LE, PACKET_PREFIX_LENGTH, val);\n                break;\n        }\n    }\n\n    get bufferPayload() {\n        const len = this.data[PACKET_PREFIX_LENGTH];\n        return this.data.slice(PACKET_PREFIX_LENGTH + 1, PACKET_PREFIX_LENGTH + 1 + len);\n    }\n\n    set bufferPayload(b: Uint8Array) {\n        const len = Math.min(b.length, MAX_PAYLOAD_LENGTH - 1);\n        this.data[PACKET_PREFIX_LENGTH] = len;\n        memcpy(this.data, PACKET_PREFIX_LENGTH + 1, b, 0, len);\n    }\n\n    hasString() {\n        return this.packetType === PACKET_TYPE_STRING ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE;\n    }\n\n    hasNumber() {\n        return this.packetType === PACKET_TYPE_NUMBER ||\n            this.packetType === PACKET_TYPE_DOUBLE ||\n            this.packetType === PACKET_TYPE_VALUE ||\n            this.packetType === PACKET_TYPE_DOUBLE_VALUE;\n    }\n}\n\nexport default class BitRadioServiceHost extends ServiceHost {\n    readonly enabled: RegisterHost<[number]>;\n    readonly group: RegisterHost<[number]>;\n    readonly transmissionPower: RegisterHost<[number]>;\n    readonly frequencyBand: RegisterHost<[number]>;\n\n    constructor() {\n        super(SRV_BIT_RADIO);\n\n        this.enabled = this.addRegister<[number]>(BitRadioReg.Enabled, [0]);\n        this.group = this.addRegister<[number]>(BitRadioReg.Group, [1]);\n        this.transmissionPower = this.addRegister<[number]>(BitRadioReg.TransmissionPower, [6]);\n        this.frequencyBand = this.addRegister<[number]>(BitRadioReg.FrequencyBand, [7]);\n\n        this.addCommand(BitRadioCmd.SendString, this.handleSendString.bind(this));\n        this.addCommand(BitRadioCmd.SendNumber, this.handleSendNumber.bind(this));\n        this.addCommand(BitRadioCmd.SendValue, this.handleSendValue.bind(this));\n        this.addCommand(BitRadioCmd.SendBuffer, this.handleSendBuffer.bind(this));\n    }\n\n    private handleSendString(pkt: Packet) {\n        const [message] = pkt.jdunpack<[string]>(\"s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_STRING);\n        rpkt.stringPayload = message;\n        this.sendRadioPacket(rpkt);\n    }\n\n    private handleSendNumber(pkt: Packet) {\n        const [value] = pkt.jdunpack<[number, string]>(\"f64\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE);\n        rpkt.numberPayload = value;\n        this.sendRadioPacket(rpkt);\n    }\n\n    private handleSendValue(pkt: Packet) {\n        const [value, name] = pkt.jdunpack<[number, string]>(\"f64 s\")\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_DOUBLE_VALUE);\n        rpkt.stringPayload = name;\n        rpkt.numberPayload = value;\n        this.sendRadioPacket(rpkt);\n    }\n\n    private handleSendBuffer(pkt: Packet) {\n        const { data } = pkt;\n        const rpkt = RadioPacket.mkPacket(PACKET_TYPE_BUFFER);\n        rpkt.bufferPayload = data;\n        this.sendRadioPacket(rpkt);\n    }\n\n    private sendRadioPacket(rpkt: RadioPacket) {\n        const [on] = this.enabled.values();\n        if (!on)\n            return; // radio is off\n\n        const { bus } = this.device;\n        const { timestamp } = bus;\n        const [group] = this.group.values();\n        rpkt.time = timestamp;\n        rpkt.serial = 0; // todo\n        const msg = {\n            type: \"radiopacket\",\n            broadcast: true,\n            // TODO\n            rssi: -75,\n            // TODO\n            serial: 0,\n            time: bus.timestamp,\n            payload: {\n                groupId: group,\n                type: 0, // buffer\n                bufferData: rpkt.data\n            }\n        }\n        // send message to parent\n        console.log(`bitradio: send`, msg)\n        if (inIFrame()) {\n            window.parent.postMessage(msg, \"*\");\n        }\n    }\n}","import { JDBus } from \"../jdom/bus\"\nimport {\n    ArcadeGamepadButton,\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n    DistanceVariant,\n    LedPixelVariant,\n    PotentiometerVariant,\n    RelayReg,\n    RelayVariant,\n    SRV_ACCELEROMETER,\n    SRV_ARCADE_GAMEPAD,\n    SRV_BAROMETER,\n    SRV_BUTTON,\n    SRV_BUZZER,\n    SRV_CHARACTER_SCREEN,\n    SRV_DISTANCE,\n    SRV_E_CO2,\n    SRV_HUMIDITY,\n    SRV_LED_PIXEL,\n    SRV_MATRIX_KEYPAD,\n    SRV_MOTOR,\n    SRV_POTENTIOMETER,\n    SRV_PROTO_TEST,\n    SRV_RAIN_GAUGE,\n    SRV_RELAY,\n    SRV_JOYSTICK,\n    SRV_ROTARY_ENCODER,\n    SRV_SERVO,\n    SRV_SETTINGS,\n    SRV_SWITCH,\n    SRV_THERMOMETER,\n    SRV_TRAFFIC_LIGHT,\n    SRV_VIBRATION_MOTOR,\n    SRV_TVOC,\n    SRV_WIND_DIRECTION,\n    SRV_WIND_SPEED,\n    SwitchVariant,\n    ThermometerVariant,\n    WindSpeedReg,\n    ECO2Variant,\n    SRV_SPEECH_SYNTHESIS,\n    SRV_SOIL_MOISTURE,\n    JoystickVariant,\n    SRV_REAL_TIME_CLOCK,\n    SRV_ILLUMINANCE,\n    SRV_LIGHT_LEVEL,\n    LightLevelVariant,\n    SRV_UV_INDEX,\n    SRV_REFLECTED_LIGHT,\n    ReflectedLightVariant,\n    SRV_MOTION,\n    SRV_LED,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n    SevenSegmentDisplayReg,\n    SRV_HEART_RATE,\n    HeartRateVariant,\n    LedVariant,\n    SRV_WATER_LEVEL,\n    SRV_SOUND_LEVEL,\n    SRV_COLOR,\n    SRV_SOUND_PLAYER,\n    SRV_PULSE_OXIMETER,\n    SRV_WEIGHT_SCALE,\n    WeightScaleVariant,\n    SRV_ANALOG_BUTTON,\n    AnalogButtonVariant,\n    SRV_LED_MATRIX,\n    SRV_RNG,\n    SRV_COMPASS,\n    SRV_THERMOCOUPLE,\n    ThermocoupleVariant,\n    SRV_GYROSCOPE,\n    SoundLevelReg,\n    SRV_SOUND_SPECTRUM,\n    SoundSpectrumReg,\n    SRV_SOLENOID,\n    SRV_DMX,\n    SRV_BIT_RADIO,\n} from \"../jdom/constants\"\nimport DeviceHost from \"../jdom/devicehost\"\nimport ProtocolTestServiceHost from \"../jdom/protocoltestservicehost\"\nimport ServiceHost from \"../jdom/servicehost\"\nimport ArcadeGamepadServiceHost from \"./arcadegamepadservicehost\"\nimport ButtonServiceHost from \"./buttonservicehost\"\nimport BuzzerServiceHost from \"./buzzerservicehost\"\nimport CharacterScreenServiceHost from \"./characterscreenservicehost\"\nimport HumidityServiceHost from \"./humidityservicehost\"\nimport JoystickSensorServiceHost from \"./joystickservicehost\"\nimport LEDMatrixServiceHost from \"./ledmatrixservicehost\"\nimport LedPixelServiceHost from \"./ledpixelservicehost\"\nimport MatrixKeypadServiceHost from \"./matrixkeypadservicehost\"\nimport MotorServiceHost from \"./motorservicehost\"\nimport RainGaugeServiceHost from \"./raingaugeservicehost\"\nimport RealTimeClockServiceHost from \"./realtimeclockservicehost\"\nimport ReflectedLightServiceHost from \"./reflectedlightservicehost\"\nimport RotaryEncoderServiceHost from \"./rotaryencoderservicehost\"\nimport SensorServiceHost, { SensorServiceOptions } from \"./sensorservicehost\"\nimport ServoServiceHost from \"./servoservicehost\"\nimport SettingsServiceHost from \"./settingsservicehost\"\nimport SpeechSynthesisServiceHost from \"./speechsynthesisservicehost\"\nimport SwitchServiceHost from \"./switchservicehost\"\nimport TrafficLightServiceHost from \"./trafficlightservicehost\"\nimport LEDServiceHost from \"./ledservicehost\"\nimport { fromHex } from \"../jdom/utils\"\nimport SoundPlayerServiceHost, {\n    SoundPlayerSound,\n} from \"./soundplayerservicehost\"\nimport AnalogSensorServiceHost, {\n    AnalogSensorServiceHostOptions,\n} from \"./analogsensorservicehost\"\nimport RandomNumberGeneratorServiceHost from \"./randomnumbergeneratorservicehost\"\nimport CompassServiceHost from \"./compassservicehost\"\nimport DMXServiceHost from \"./dmxservicehost\"\nimport BitRadioServiceHost from \"./bitradioservicehost\"\n\nconst indoorThermometerOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [21.5],\n    streamingInterval: 1000,\n    minReading: -5,\n    maxReading: 50,\n    readingError: [0.25],\n    variant: ThermometerVariant.Indoor,\n}\nconst outdoorThermometerOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [21.5],\n    streamingInterval: 1000,\n    minReading: -40,\n    maxReading: 120,\n    readingError: [0.25],\n    variant: ThermometerVariant.Outdoor,\n}\nconst medicalThermometerOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [37.5],\n    streamingInterval: 1000,\n    minReading: 35,\n    maxReading: 42,\n    readingError: [0.5],\n    variant: ThermometerVariant.Body,\n}\nconst barometerOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [1013],\n}\nconst sonarOptions: AnalogSensorServiceHostOptions = {\n    variant: DistanceVariant.Ultrasonic,\n    minReading: 0.02,\n    maxReading: 4,\n    readingValues: [1],\n}\n\nconst SG90_STALL_TORQUE = 1.8\nexport const SG90_RESPONSE_SPEED = 0.12 // deg/60deg\n\nconst microServoOptions = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n}\nconst microServo270Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED, // s/60deg\n    minAngle: -135,\n    maxAngle: 135,\n}\nconst microServo360Options = {\n    stallTorque: SG90_STALL_TORQUE, // kg/cm\n    responseSpeed: SG90_RESPONSE_SPEED * 2, // s/60deg\n    minAngle: -180,\n    maxAngle: 180,\n}\nconst windDirectionOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [0],\n    readingError: [5],\n    streamingInterval: 1000,\n}\nconst windSpeedOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [0],\n    readingError: [0.5],\n    streamingInterval: 1000,\n    registerValues: [{ code: WindSpeedReg.MaxWindSpeed, values: [55] }],\n}\nconst eCO2Options: AnalogSensorServiceHostOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.VOC,\n}\nconst CO2Options: AnalogSensorServiceHostOptions = {\n    readingValues: [4000],\n    streamingInterval: 1000,\n    variant: ECO2Variant.NDIR,\n}\nconst tvocOptions: AnalogSensorServiceHostOptions = {\n    readingValues: [500],\n    streamingInterval: 1000,\n}\n\nconst microbitSounds: SoundPlayerSound[] = [\n    [0, \"giggle\"],\n    [0, \"happy\"],\n    [0, \"hello\"],\n    [0, \"mysterious\"],\n    [0, \"sad\"],\n    [0, \"slide\"],\n    [0, \"soaring\"],\n    [0, \"spring\"],\n    [0, \"twinkle\"],\n    [0, \"yawn\"],\n]\nconst touchButton: AnalogSensorServiceHostOptions = {\n    lowThreshold: 0.3,\n    highThreshold: 0.8,\n    readingValues: [0],\n    variant: AnalogButtonVariant.Capacitive,\n}\nconst soundLevel: AnalogSensorServiceHostOptions = {\n    readingValues: [0],\n    lowThreshold: 10,\n    highThreshold: 70,\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundLevelReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundLevelReg.MaxDecibels,\n            values: [-30],\n        },\n    ],\n}\nconst soundSpectrum: SensorServiceOptions<[Uint8Array]> = {\n    readingValues: [new Uint8Array(0)],\n    intensityValues: [false],\n    registerValues: [\n        {\n            code: SoundSpectrumReg.FftPow2Size,\n            values: [5],\n        },\n        {\n            code: SoundSpectrumReg.MinDecibels,\n            values: [-100],\n        },\n        {\n            code: SoundSpectrumReg.MaxDecibels,\n            values: [-30],\n        },\n        {\n            code: SoundSpectrumReg.SmoothingTimeConstant,\n            values: [0.8],\n        },\n    ],\n}\n\nconst _hosts: {\n    name: string\n    serviceClasses: number[]\n    services: () => ServiceHost[]\n}[] = [\n    {\n        name: \"7-segment (4 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new ServiceHost(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"ff112233\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [4],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"7-segment (8 segments)\",\n        serviceClasses: [SRV_SEVEN_SEGMENT_DISPLAY],\n        services: () => [\n            new ServiceHost(SRV_SEVEN_SEGMENT_DISPLAY, {\n                intensityValues: [0xffff],\n                valueValues: [fromHex(\"0102040810204080\")],\n                registerValues: [\n                    {\n                        code: SevenSegmentDisplayReg.DigitCount,\n                        values: [8],\n                    },\n                    {\n                        code: SevenSegmentDisplayReg.DecimalPoint,\n                        values: [true],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"accelerometer\",\n        serviceClasses: [SRV_ACCELEROMETER],\n        services: () => [\n            new SensorServiceHost<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n            }),\n        ],\n    },\n    {\n        name: \"arcade gamepad (all buttons)\",\n        serviceClasses: [SRV_ARCADE_GAMEPAD],\n        services: () => [new ArcadeGamepadServiceHost()],\n    },\n    {\n        name: \"arcade gamepad (only DPad+A/B)\",\n        serviceClasses: [SRV_ARCADE_GAMEPAD],\n        services: () => [\n            new ArcadeGamepadServiceHost([\n                ArcadeGamepadButton.Left,\n                ArcadeGamepadButton.Right,\n                ArcadeGamepadButton.Up,\n                ArcadeGamepadButton.Down,\n                ArcadeGamepadButton.A,\n                ArcadeGamepadButton.B,\n            ]),\n        ],\n    },\n    {\n        name: \"barometer\",\n        serviceClasses: [SRV_BAROMETER],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"bitradio\",\n        serviceClasses: [SRV_BIT_RADIO],\n        services: () => [new BitRadioServiceHost()],\n    },\n    {\n        name: \"button\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [new ButtonServiceHost()],\n    },\n    {\n        name: \"button (2x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [\n            new ButtonServiceHost(\"B0\"),\n            new ButtonServiceHost(\"B1\"),\n        ],\n    },\n    {\n        name: \"button (4x)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map((_, i) => new ButtonServiceHost(`B${i}`)),\n    },\n    {\n        name: \"buzzer\",\n        serviceClasses: [SRV_BUZZER],\n        services: () => [new BuzzerServiceHost()],\n    },\n    {\n        name: \"capacitive button\",\n        serviceClasses: [SRV_ANALOG_BUTTON],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_ANALOG_BUTTON, touchButton),\n        ],\n    },\n    {\n        name: \"capacitive button (6x)\",\n        serviceClasses: [SRV_ANALOG_BUTTON],\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new AnalogSensorServiceHost(SRV_ANALOG_BUTTON, {\n                            ...touchButton,\n                            ...{ instanceName: `C${i}` },\n                        })\n                ),\n    },\n    {\n        name: \"capacitive button (12x)\",\n        serviceClasses: [SRV_ANALOG_BUTTON],\n        services: () =>\n            Array(12)\n                .fill(0)\n                .map(\n                    (_, i) =>\n                        new AnalogSensorServiceHost(SRV_ANALOG_BUTTON, {\n                            ...touchButton,\n                            ...{ instanceName: `C${i}` },\n                        })\n                ),\n    },\n    {\n        name: \"character screen (LDC, 16x2)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServiceHost({ message: \"hello\\nworld!\" }),\n        ],\n    },\n    {\n        name: \"character screen (OLED, 32x8, RTL)\",\n        serviceClasses: [SRV_CHARACTER_SCREEN],\n        services: () => [\n            new CharacterScreenServiceHost({\n                message: \"hello\\nworld!\",\n                columns: 32,\n                rows: 8,\n                variant: CharacterScreenVariant.OLED,\n                textDirection: CharacterScreenTextDirection.RightToLeft,\n            }),\n        ],\n    },\n    {\n        name: \"color\",\n        serviceClasses: [SRV_COLOR],\n        services: () => [\n            new SensorServiceHost<[number, number, number]>(SRV_COLOR, {\n                readingValues: [0.5, 0, 0.5],\n            }),\n        ],\n    },\n    {\n        name: \"compass\",\n        serviceClasses: [SRV_COMPASS],\n        services: () => [new CompassServiceHost()],\n    },\n    {\n        name: \"distance (sonar)\",\n        serviceClasses: [SRV_DISTANCE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_DISTANCE, sonarOptions),\n        ],\n    },\n    {\n        name: \"DMX\",\n        serviceClasses: [SRV_DMX],\n        services: () => [new DMXServiceHost()],\n    },\n    {\n        name: \"eCO₂\",\n        serviceClasses: [SRV_E_CO2],\n        services: () => [new AnalogSensorServiceHost(SRV_E_CO2, eCO2Options)],\n    },\n    {\n        name: \"eCO₂ + TVOC\",\n        serviceClasses: [SRV_E_CO2, SRV_TVOC],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_E_CO2, eCO2Options),\n            new AnalogSensorServiceHost(SRV_TVOC, tvocOptions),\n        ],\n    },\n    {\n        name: \"eCO₂ + humidity + thermometer\",\n        serviceClasses: [SRV_E_CO2, SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_E_CO2, CO2Options),\n            new HumidityServiceHost(),\n            new AnalogSensorServiceHost(\n                SRV_THERMOMETER,\n                indoorThermometerOptions\n            ),\n        ],\n    },\n    {\n        name: \"gyroscope\",\n        serviceClasses: [SRV_GYROSCOPE],\n        services: () => [\n            new SensorServiceHost<[number, number, number]>(SRV_GYROSCOPE, {\n                readingValues: [0, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"heart rate\",\n        serviceClasses: [SRV_HEART_RATE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 100,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"humidity\",\n        serviceClasses: [SRV_HUMIDITY],\n        services: () => [new HumidityServiceHost()],\n    },\n    {\n        name: \"humidity + temperature\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER],\n        services: () => [\n            new HumidityServiceHost(),\n            new AnalogSensorServiceHost(\n                SRV_THERMOMETER,\n                outdoorThermometerOptions\n            ),\n        ],\n    },\n    {\n        name: \"humidity + temperature + barometer\",\n        serviceClasses: [SRV_HUMIDITY, SRV_THERMOMETER, SRV_BAROMETER],\n        services: () => [\n            new HumidityServiceHost(),\n            new AnalogSensorServiceHost(\n                SRV_THERMOMETER,\n                outdoorThermometerOptions\n            ),\n            new AnalogSensorServiceHost(SRV_BAROMETER, barometerOptions),\n        ],\n    },\n    {\n        name: \"illuminance\",\n        serviceClasses: [SRV_ILLUMINANCE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_ILLUMINANCE, {\n                readingValues: [1],\n            }),\n        ],\n    },\n    {\n        name: \"joystick (thumbstick)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [new JoystickSensorServiceHost(JoystickVariant.Thumb)],\n    },\n    {\n        name: \"joystick (arcade stick digital)\",\n        serviceClasses: [SRV_JOYSTICK],\n        services: () => [\n            new JoystickSensorServiceHost(JoystickVariant.ArcadeStick, true),\n        ],\n    },\n    {\n        name: \"LED (RGB through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServiceHost({\n                variant: LedVariant.ThroughHole,\n                ledCount: 1,\n                color: [255, 0, 0],\n            }),\n        ],\n    },\n    {\n        name: \"LED (blue through hole)\",\n        serviceClasses: [SRV_LED],\n        services: () => [\n            new LEDServiceHost({\n                variant: LedVariant.ThroughHole,\n                waveLength: 624,\n                ledCount: 3,\n                color: [0, 0, 255],\n            }),\n        ],\n    },\n    {\n        name: \"LED matrix (5x5 micro:bit)\",\n        serviceClasses: [SRV_LED_MATRIX],\n        services: () => [new LEDMatrixServiceHost(5, 5)],\n    },\n    {\n        name: \"LED matrix (8x8)\",\n        serviceClasses: [SRV_LED_MATRIX],\n        services: () => [new LEDMatrixServiceHost(8, 8)],\n    },\n    {\n        name: \"LED matrix (11x7)\",\n        serviceClasses: [SRV_LED_MATRIX],\n        services: () => [new LEDMatrixServiceHost(11, 7)],\n    },\n    {\n        name: \"LED pixel ring 10\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 10,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 12\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 12,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 16\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 16,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel ring 24\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 24,\n                variant: LedPixelVariant.Ring,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel jewel 7\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 7,\n                variant: LedPixelVariant.Jewel,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel stick 8\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 8,\n                variant: LedPixelVariant.Stick,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 30\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 60,\n                maxPower: 1000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 60\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 60,\n                maxPower: 2000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 150\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 150,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel strip 300\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 300,\n                maxPower: 5000,\n                variant: LedPixelVariant.Strip,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (4x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (8x8)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 64,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"LED pixel matrix (16x4)\",\n        serviceClasses: [SRV_LED_PIXEL],\n        services: () => [\n            new LedPixelServiceHost({\n                numPixels: 64,\n                numColumns: 16,\n                variant: LedPixelVariant.Matrix,\n            }),\n        ],\n    },\n    {\n        name: \"light level (photo-resistor)\",\n        serviceClasses: [SRV_LIGHT_LEVEL],\n        services: () => [\n            new SensorServiceHost(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.PhotoResistor,\n            }),\n        ],\n    },\n    {\n        name: \"line tracker (digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [new ReflectedLightServiceHost()],\n    },\n    {\n        name: \"line tracker (2x digital)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServiceHost(),\n            new ReflectedLightServiceHost(),\n        ],\n    },\n    {\n        name: \"line tracker (analog)\",\n        serviceClasses: [SRV_REFLECTED_LIGHT],\n        services: () => [\n            new ReflectedLightServiceHost({\n                variant: ReflectedLightVariant.InfraredAnalog,\n            }),\n        ],\n    },\n    {\n        name: \"matrix keypad (3x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServiceHost(3, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"*\",\n                \"0\",\n                \"#\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (4x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServiceHost(4, 4, [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"A\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"B\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"C\",\n                \"*\",\n                \"0\",\n                \"#\",\n                \"D\",\n            ]),\n        ],\n    },\n    {\n        name: \"matrix keypad (1x4)\",\n        serviceClasses: [SRV_MATRIX_KEYPAD],\n        services: () => [\n            new MatrixKeypadServiceHost(4, 1, [\"1\", \"2\", \"3\", \"4\"]),\n        ],\n    },\n    {\n        name: \"motion\",\n        serviceClasses: [SRV_MOTION],\n        services: () => [\n            new SensorServiceHost(SRV_MOTION, {\n                readingValues: [false],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"motor\",\n        serviceClasses: [SRV_MOTOR],\n        services: () => [new MotorServiceHost()],\n    },\n    {\n        name: \"protocol test\",\n        serviceClasses: [SRV_PROTO_TEST],\n        services: () => [new ProtocolTestServiceHost()],\n    },\n    {\n        name: \"pulse oxymeter\",\n        serviceClasses: [SRV_PULSE_OXIMETER],\n        services: () => [\n            new SensorServiceHost<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"oxymeter + heart beat\",\n        serviceClasses: [SRV_PULSE_OXIMETER, SRV_HEART_RATE],\n        services: () => [\n            new SensorServiceHost<[number]>(SRV_PULSE_OXIMETER, {\n                readingValues: [98],\n                streamingInterval: 1000,\n            }),\n            new AnalogSensorServiceHost(SRV_HEART_RATE, {\n                readingValues: [80],\n                streamingInterval: 1000,\n                variant: HeartRateVariant.Finger,\n            }),\n        ],\n    },\n    {\n        name: \"RNG (random number generator)\",\n        serviceClasses: [SRV_RNG],\n        services: () => [new RandomNumberGeneratorServiceHost()],\n    },\n    {\n        name: \"rain gauge\",\n        serviceClasses: [SRV_RAIN_GAUGE],\n        services: () => [new RainGaugeServiceHost()],\n    },\n    {\n        name: \"real time clock\",\n        serviceClasses: [SRV_REAL_TIME_CLOCK],\n        services: () => [new RealTimeClockServiceHost()],\n    },\n    {\n        name: \"relay (EM/10A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () => [\n            new ServiceHost(SRV_RELAY, {\n                intensityValues: [false],\n                variant: RelayVariant.Electromechanical,\n                registerValues: [\n                    {\n                        code: RelayReg.MaxSwitchingCurrent,\n                        values: [10],\n                    },\n                ],\n            }),\n        ],\n    },\n    {\n        name: \"relay 4x (SSR/5A)\",\n        serviceClasses: [SRV_RELAY],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(\n                    () =>\n                        new ServiceHost(SRV_RELAY, {\n                            intensityValues: [false],\n                            variant: RelayVariant.SolidState,\n                            registerValues: [\n                                {\n                                    code: RelayReg.MaxSwitchingCurrent,\n                                    values: [5],\n                                },\n                            ],\n                        })\n                ),\n    },\n    {\n        name: \"rotary encoder\",\n        serviceClasses: [SRV_ROTARY_ENCODER],\n        services: () => [new RotaryEncoderServiceHost()],\n    },\n    {\n        name: \"rotary encoder + button\",\n        serviceClasses: [SRV_ROTARY_ENCODER, SRV_BUTTON],\n        services: () => [\n            new RotaryEncoderServiceHost(),\n            new ButtonServiceHost(),\n        ],\n    },\n    {\n        name: \"rotary potentiometer\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Rotary,\n                readingValues: [0.5],\n            }),\n        ],\n    },\n    {\n        name: \"servo\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServiceHost(microServoOptions)],\n    },\n    {\n        name: \"servo (270°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServiceHost(microServo270Options)],\n    },\n    {\n        name: \"servo (360°)\",\n        serviceClasses: [SRV_SERVO],\n        services: () => [new ServoServiceHost(microServo360Options)],\n    },\n    {\n        name: \"servo x 2\",\n        serviceClasses: [SRV_SERVO],\n        services: () =>\n            Array(2)\n                .fill(0)\n                .map(() => new ServoServiceHost(microServoOptions)),\n    },\n    {\n        name: \"servo x 4\",\n        serviceClasses: [SRV_SERVO],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(() => new ServoServiceHost(microServoOptions)),\n    },\n    {\n        name: \"servo x 6\",\n        serviceClasses: [SRV_SERVO],\n        services: () =>\n            Array(6)\n                .fill(0)\n                .map((_, i) => new ServoServiceHost(microServoOptions)),\n    },\n    {\n        name: \"servo x 16\",\n        serviceClasses: [SRV_SERVO],\n        services: () =>\n            Array(16)\n                .fill(0)\n                .map((_, i) => new ServoServiceHost(microServoOptions)),\n    },\n    {\n        name: \"settings\",\n        serviceClasses: [SRV_SETTINGS],\n        services: () => [new SettingsServiceHost()],\n    },\n    {\n        name: \"slider\",\n        serviceClasses: [SRV_POTENTIOMETER],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_POTENTIOMETER, {\n                variant: PotentiometerVariant.Slider,\n            }),\n        ],\n    },\n    {\n        name: \"soil moisture\",\n        serviceClasses: [SRV_SOIL_MOISTURE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_SOIL_MOISTURE, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"speech synthesis\",\n        serviceClasses: [SRV_SPEECH_SYNTHESIS],\n        services: () => [new SpeechSynthesisServiceHost()],\n    },\n    {\n        name: \"solenoid\",\n        serviceClasses: [SRV_SOLENOID],\n        services: () => [\n            new ServiceHost(SRV_SOLENOID, {\n                intensityValues: [0],\n            }),\n        ],\n    },\n    {\n        name: \"sound level\",\n        serviceClasses: [SRV_SOUND_LEVEL],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_SOUND_LEVEL, soundLevel),\n        ],\n    },\n    {\n        name: \"sound spectrum\",\n        serviceClasses: [SRV_SOUND_SPECTRUM],\n        services: () => [\n            new SensorServiceHost<[Uint8Array]>(\n                SRV_SOUND_SPECTRUM,\n                soundSpectrum\n            ),\n        ],\n    },\n    {\n        name: \"sound player (micro:bit v2 sounds)\",\n        serviceClasses: [SRV_SOUND_PLAYER],\n        services: () => [new SoundPlayerServiceHost(microbitSounds)],\n    },\n    {\n        name: \"switch (slide)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServiceHost({ variant: SwitchVariant.Slide }),\n        ],\n    },\n    {\n        name: \"switch (push button)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServiceHost({ variant: SwitchVariant.PushButton }),\n        ],\n    },\n    {\n        name: \"switch (toggle)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServiceHost({ variant: SwitchVariant.Toggle }),\n        ],\n    },\n    {\n        name: \"switch (tilt)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServiceHost({ variant: SwitchVariant.Tilt }),\n        ],\n    },\n    {\n        name: \"switch (proximity)\",\n        serviceClasses: [SRV_SWITCH],\n        services: () => [\n            new SwitchServiceHost({\n                variant: SwitchVariant.Proximity,\n                autoOffDelay: 30,\n            }),\n        ],\n    },\n    {\n        name: \"thermometer (outdoor)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new SensorServiceHost(SRV_THERMOMETER, outdoorThermometerOptions),\n        ],\n    },\n    {\n        name: \"thermometer (medical)\",\n        serviceClasses: [SRV_THERMOMETER],\n        services: () => [\n            new AnalogSensorServiceHost(\n                SRV_THERMOMETER,\n                medicalThermometerOptions\n            ),\n        ],\n    },\n    {\n        name: \"traffic light\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () => [new TrafficLightServiceHost()],\n    },\n    {\n        name: \"traffic crossing (4 x lights)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT],\n        services: () =>\n            Array(4)\n                .fill(0)\n                .map(_ => new TrafficLightServiceHost()),\n    },\n    {\n        name: \"thermocouple\",\n        serviceClasses: [SRV_THERMOCOUPLE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_THERMOCOUPLE, {\n                readingValues: [550],\n                streamingInterval: 1000,\n                minReading: 0,\n                maxReading: 1100,\n                readingError: [2.2],\n                variant: ThermocoupleVariant.TypeB,\n            }),\n        ],\n    },\n    {\n        name: \"TVOC\",\n        serviceClasses: [SRV_TVOC],\n        services: () => [new AnalogSensorServiceHost(SRV_TVOC, tvocOptions)],\n    },\n    {\n        name: \"UV index\",\n        serviceClasses: [SRV_UV_INDEX],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_UV_INDEX, {\n                readingValues: [5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"water level\",\n        serviceClasses: [SRV_WATER_LEVEL],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WATER_LEVEL, {\n                readingValues: [0.5],\n                streamingInterval: 1000,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (jewelry)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WEIGHT_SCALE, {\n                readingValues: [0.001],\n                variant: WeightScaleVariant.Jewelry,\n                maxReading: 0.2,\n                minReading: 0.0005,\n                readingResolution: 0.00001,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (body)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WEIGHT_SCALE, {\n                readingValues: [60],\n                variant: WeightScaleVariant.Body,\n                maxReading: 180,\n                readingResolution: 0.1,\n            }),\n        ],\n    },\n    {\n        name: \"weight scale (food)\",\n        serviceClasses: [SRV_WEIGHT_SCALE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WEIGHT_SCALE, {\n                readingValues: [0.5],\n                variant: WeightScaleVariant.Food,\n                maxReading: 6,\n                readingResolution: 0.001,\n            }),\n        ],\n    },\n    {\n        name: \"wind direction\",\n        serviceClasses: [SRV_WIND_DIRECTION],\n        services: () => [\n            new AnalogSensorServiceHost(\n                SRV_WIND_DIRECTION,\n                windDirectionOptions\n            ),\n        ],\n    },\n    {\n        name: \"wind speed\",\n        serviceClasses: [SRV_WIND_SPEED],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WIND_SPEED, windSpeedOptions),\n        ],\n    },\n    {\n        name: \"weather station (wind speed, direction, rain)\",\n        serviceClasses: [SRV_WIND_SPEED, SRV_WIND_DIRECTION, SRV_RAIN_GAUGE],\n        services: () => [\n            new AnalogSensorServiceHost(SRV_WIND_SPEED, windSpeedOptions),\n            new AnalogSensorServiceHost(\n                SRV_WIND_DIRECTION,\n                windDirectionOptions\n            ),\n            new RainGaugeServiceHost(),\n        ],\n    },\n    {\n        name: \"vibration motor\",\n        serviceClasses: [SRV_VIBRATION_MOTOR],\n        services: () => [new ServiceHost(SRV_VIBRATION_MOTOR)],\n    },\n    {\n        name: \"chassis (motor x 2 + sonar + light)\",\n        serviceClasses: [SRV_DISTANCE, SRV_LED_PIXEL, SRV_MOTOR],\n        services: () => [\n            new MotorServiceHost(\"L\"),\n            new MotorServiceHost(\"R\"),\n            new AnalogSensorServiceHost(SRV_DISTANCE, sonarOptions),\n            new LedPixelServiceHost({\n                numPixels: 5,\n                variant: LedPixelVariant.Stick,\n                instanceName: \"lights\",\n            }),\n        ],\n    },\n    {\n        name: \"railway crossing (2 x lights, 2 x servos, 1 x buffer)\",\n        serviceClasses: [SRV_TRAFFIC_LIGHT, SRV_SERVO, SRV_BUZZER],\n        services: () => [\n            new TrafficLightServiceHost({ instanceName: \"left light\" }),\n            new ServoServiceHost({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"left arm\",\n            }),\n            new TrafficLightServiceHost({ instanceName: \"right light\" }),\n            new ServoServiceHost({\n                minAngle: 0,\n                maxAngle: 90,\n                instanceName: \"right arm\",\n            }),\n            new BuzzerServiceHost({ instanceName: \"bell\" }),\n        ],\n    },\n    {\n        name: \"Arcade controller (6 x buttons)\",\n        serviceClasses: [SRV_BUTTON],\n        services: () => [\n            new ButtonServiceHost(\"Left\"),\n            new ButtonServiceHost(\"Up\"),\n            new ButtonServiceHost(\"Right\"),\n            new ButtonServiceHost(\"Down\"),\n            new ButtonServiceHost(\"A\"),\n            new ButtonServiceHost(\"B\"),\n        ],\n    },\n    {\n        name: \"micro:bit v2\",\n        serviceClasses: [\n            SRV_LED_MATRIX,\n            SRV_BUTTON,\n            SRV_ACCELEROMETER,\n            SRV_SOUND_LEVEL,\n            SRV_LIGHT_LEVEL,\n            SRV_BUZZER,\n            SRV_SOUND_PLAYER,\n        ],\n        services: () => [\n            new LEDMatrixServiceHost(5, 5),\n            new ButtonServiceHost(\"A\"),\n            new ButtonServiceHost(\"B\"),\n            new SensorServiceHost<[number, number, number]>(SRV_ACCELEROMETER, {\n                readingValues: [0.5, 0.5, -(1 - (0.5 * 0.5 + 0.5 * 0.5))],\n            }),\n            new AnalogSensorServiceHost(SRV_SOUND_LEVEL, soundLevel),\n            new SensorServiceHost(SRV_LIGHT_LEVEL, {\n                readingValues: [0.5],\n                variant: LightLevelVariant.LEDMatrix,\n            }),\n            new BuzzerServiceHost(),\n            new SoundPlayerServiceHost(microbitSounds),\n        ],\n    },\n]\n\nexport default function hosts() {\n    return _hosts.slice(0)\n}\n\nexport function addHost(bus: JDBus, services: ServiceHost[]) {\n    const d = new DeviceHost(services)\n    bus.addDeviceHost(d)\n    return d\n}\n\nexport function hostDefinitionFromServiceClass(serviceClass: number) {\n    return _hosts.find(\n        host =>\n            host.serviceClasses.length === 1 &&\n            host.serviceClasses[0] === serviceClass\n    )\n}\n"],"sourceRoot":""}