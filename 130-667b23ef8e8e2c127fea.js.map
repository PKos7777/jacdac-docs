{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardWindDirection.tsx"],"names":["DashboardWindDirection","props","service","services","variant","directionRegister","register","WindDirectionReg","WindDirection","useRegisterUnpackedValue","direction","host","useServiceHost","color","useWidgetTheme","background","controlBackground","active","arrowHeadId","useId","a","useThrottledValue","undefined","w","h","mw","mh","r","sw","cx","cy","cy2","handleChange","ev","newValue","reading","setValues","refresh"],"mappings":"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","file":"130-667b23ef8e8e2c127fea.js","sourcesContent":["import React, { } from \"react\";\nimport { WindDirectionReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport { useId } from \"react-use-id-hook\"\nimport useThrottledValue from \"../hooks/useThrottledValue\";\nimport { Grid, Slider } from \"@material-ui/core\";\nimport SensorServiceHost from \"../../../jacdac-ts/src/hosts/sensorservicehost\";\nimport LoadingProgress from \"../ui/LoadingProgress\";\n\nexport default function DashboardWindDirection(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const directionRegister = service.register(WindDirectionReg.WindDirection);\n    const [direction] = useRegisterUnpackedValue<[number]>(directionRegister)\n\n    const host = useServiceHost<SensorServiceHost<[number]>>(service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const arrowHeadId = useId();\n\n    const a = useThrottledValue(direction, 360);\n\n    if (direction === undefined)\n        return <LoadingProgress />;\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const mh = 4.5\n    const r = (w >> 1) - 4;\n    const sw = 3;\n    const cx = w >> 1\n    const cy = h * 4 / 5\n    const cy2 = h * 2 / 5;\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await host?.reading.setValues([newValue as number])\n        directionRegister.refresh()\n    }\n\n    return <Grid container direction=\"column\">\n        <Grid item xs={12}>\n            <SvgWidget width={w} height={h}>\n                <defs>\n                    <marker id={arrowHeadId}\n                        markerWidth={mw} markerHeight={mh}\n                        refX={0} refY={mh / 2} orient=\"auto\">\n                        <polygon fill={active} points={`0 0, ${mw} ${mh / 2}, 0 ${mh}`} />\n                    </marker>\n                </defs>\n                <g transform={`rotate(${a}, ${w >> 1}, ${h >> 1})`}>\n                    <circle cx={w >> 1} cy={h >> 1} r={r} fill={controlBackground}\n                        stroke={background} strokeWidth={sw} />\n                    <line x1={cx} y1={cy} x2={cx} y2={cy2}\n                        stroke={active} strokeWidth={sw}\n                        markerEnd={`url(#${arrowHeadId})`}\n                        aria-label={`arrow point at ${direction}Â°`} />\n                </g>\n            </SvgWidget >\n        </Grid>\n        {host && <Grid item>\n            <Slider\n                color={color}\n                valueLabelDisplay=\"auto\"\n                min={0} max={360} step={5} value={direction}\n                onChange={handleChange}\n            />\n        </Grid>}\n    </Grid>\n}"],"sourceRoot":""}