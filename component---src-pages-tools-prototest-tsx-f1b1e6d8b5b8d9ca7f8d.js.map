{"version":3,"sources":["webpack:///./src/components/TestCard.tsx","webpack:///./src/pages/tools/prototest.tsx"],"names":["TestCard","props","title","subheader","onTest","children","autoRun","useState","output","setOutput","runTest","log","toValue","msg","undefined","Uint8Array","toHex","Array","isArray","map","JSON","stringify","logger","Error","push","Object","keys","forEach","k","join","handleClick","randomFieldPayload","field","specification","r","type","Math","random","unsigned","n","min","parseInt","slice","pick","typicalMin","absoluteMin","max","typicalMax","absoluteMax","randomRange","a","cryptoRandomUint32","buffer","ch_a","charCodeAt","ch_z","s","i","String","fromCharCode","randomPayload","packFormat","fields","rs","some","RegisterProtocolTest","rw","ro","ev","name","replace","useEffectAsync","sendGetAsync","testRwRo","payload","data","jdpack","evCount","count","sendSetAsync","delay","rwdata","rwpayload","jdunpack","jdpackEqual","ropayload","testCommand","service","sendPacketAsync","Packet","from","code","test","registersUseAcks","ServiceProtocolTest","device","regs","registers","rws","filter","reg","kind","roname","find","event","outPipeTest","register","ProtoTestReg","RwBytes","bufferEq","receiveWithInPipe","ProtoTestCmd","CReportPipe","recv","recvu","buf","id","ProtocolTest","useContext","JacdacContext","bus","host","setHost","services","useChange","b","serviceClass","SRV_PROTO_TEST","toggleHost","useEffect","d","JDDeviceHost","ProtocolTestServiceHost","addDeviceHost","removeDeviceHost"],"mappings":"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","file":"component---src-pages-tools-prototest-tsx-f1b1e6d8b5b8d9ca7f8d.js","sourcesContent":["import { Card, CardActions, CardContent, CardHeader } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { delay, toHex } from \"../../jacdac-ts/src/jdom/utils\";\nimport CmdButton from \"./CmdButton\";\nimport Snippet from \"./ui/Snippet\"\nimport useEffectAsync from \"./useEffectAsync\";\n\nexport type TestLogger = (name: string, ...msg: any) => void;\nexport type Test = (log: TestLogger) => Promise<void>;\n\nexport default function TestCard(props: {\n    title: string,\n    subheader?: string;\n    children?: JSX.Element | JSX.Element[],\n    onTest: Test,\n    autoRun?: boolean\n}) {\n    const { title, subheader, onTest, children, autoRun } = props;\n    const [output, setOutput] = useState(\"\");\n\n    const runTest = async () => {\n        const log: string[] = [];\n\n        const toValue = (msg: any) => {\n            if (msg === undefined || msg === null)\n                return \"\"\n            else if (typeof msg === \"string\")\n                return msg;\n            else if (msg instanceof Uint8Array)\n                return toHex(msg)\n            else if (Array.isArray(msg))\n                return msg.map(toValue);\n            else\n                return JSON.stringify(msg);\n        }\n\n        const logger = (msg: any) => {\n            if (msg instanceof Error)\n                log.push(msg + \"\")\n            if (typeof msg === \"object\") {\n                Object.keys(msg)\n                    .forEach(k => log.push(`${k}: ${toValue(msg[k])}`))\n            } else\n                log.push(toValue(msg));\n        }\n\n        try {\n            await onTest(logger);\n        } catch (e) {\n            logger(e);\n            throw e;\n        } finally {\n            setOutput(log.join('\\n'))\n        }\n    }\n\n    const handleClick = async () => await runTest();\n\n    return <Card>\n        <CardHeader title={title} subheader={subheader} />\n        <CardContent>\n            {children}\n            {output && <Snippet value={output} />}\n        </CardContent>\n        <CardActions>\n            <CmdButton variant=\"outlined\" onClick={handleClick} disableReset={true} autoRun={autoRun}>Test</CmdButton>\n        </CardActions>\n    </Card>\n}","import { Grid, Switch, Typography } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { bufferEq, cryptoRandomUint32, delay, pick, randomRange, toHex } from \"../../../jacdac-ts/src/jdom/utils\";\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport { ProtoTestCmd, ProtoTestReg, SRV_PROTO_TEST } from \"../../../jacdac-ts/src/jdom/constants\";\nimport useChange from \"../../jacdac/useChange\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\";\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\";\nimport ConnectAlert from \"../../components/alert/ConnectAlert\";\nimport { JDField } from \"../../../jacdac-ts/src/jdom/field\";\nimport { jdpack, jdpackEqual, jdunpack, PackedValues } from \"../../../jacdac-ts/src/jdom/pack\";\nimport DeviceName from \"../../components/DeviceName\";\nimport DeviceActions from \"../../components/DeviceActions\";\nimport useEffectAsync from \"../../components/useEffectAsync\";\nimport TestCard from \"../../components/TestCard\";\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\";\nimport { JDEvent } from \"../../../jacdac-ts/src/jdom/event\";\nimport { AlertTitle } from \"@material-ui/lab\";\nimport Alert from \"../../components/ui/Alert\";\nimport JDDeviceHost from \"../../../jacdac-ts/src/jdom/devicehost\";\nimport ProtocolTestServiceHost from \"../../../jacdac-ts/src/jdom/protocoltestservicehost\"\nimport { Link } from \"gatsby-theme-material-ui\";\n\nfunction randomFieldPayload(field: JDField) {\n    const { specification } = field;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let r: any = undefined;\n    switch (specification.type) {\n        case \"bool\":\n            r = Math.random() > 0.5 ? 1 : 0;\n            break;\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const unsigned = specification.type[0] === \"u\";\n            const n = Math.min(30, parseInt(specification.type.slice(1)));\n            const min = pick(specification.typicalMin, specification.absoluteMin, unsigned ? 0 : -((1 << (n - 1)) - 1));\n            const max = pick(specification.typicalMax, specification.absoluteMax, unsigned ? (1 << n) - 1 : (1 << (n - 1)) - 1);\n            r = randomRange(min, max);\n            break;\n        }\n        case \"bytes\": {\n            // maxBytes?\n            const a = cryptoRandomUint32(randomRange(1, 3));\n            r = new Uint8Array(a.buffer);\n            break;\n        }\n        case \"string\":\n        case \"string0\": {\n            const ch_a = \"a\".charCodeAt(0);\n            const ch_z = \"z\".charCodeAt(0)\n            const n = randomRange(4, 10);\n            let s = \"\"\n            for (let i = 0; i < n; ++i) {\n                s += String.fromCharCode(randomRange(ch_a, ch_z));\n            }\n            r = s;\n            break;\n        }\n    }\n\n    return r;\n}\n\nfunction randomPayload<T extends PackedValues>(packFormat: string, fields: JDField[]): T {\n    if (!packFormat)\n        throw new Error(\"pack format unknown\")\n    const rs = fields.map(randomFieldPayload);\n    if (rs.some(r => r === undefined))\n        throw new Error(\"unsupported data layout\")\n    return rs as T;\n}\n\nfunction RegisterProtocolTest(props: { rw: JDRegister, ro: JDRegister, ev: JDEvent }) {\n    const { rw, ro, ev } = props;\n    const { specification, fields } = rw;\n    const name = specification.name.replace(/^rw_/, \"\")\n\n    // event code and command code are the same as rw register\n    useEffectAsync(async () => {\n        await rw.sendGetAsync();\n        await ro.sendGetAsync();\n    }, []);\n\n    const testRwRo = async (log) => {\n        log(`-- testing rw`)\n        const packFormat = specification.packFormat;\n        const payload = randomPayload(packFormat, fields);\n        log({ payload })\n\n        const data = jdpack(packFormat, payload);\n        log({ data: toHex(data) })\n\n        // setup observer for event counts\n        const evCount = ev.count;\n\n        // send over packet\n        await rw.sendSetAsync(data);\n        // read packet\n        await rw.sendGetAsync();\n        // wait for response\n        await delay(100);\n        // check read\n        log({ rwdata: toHex(rw.data) });\n        const rwpayload = jdunpack(rw.data, packFormat);\n        log({ rwpayload });\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n\n        // check ro\n        log(`-- testing ro`)\n        await ro.sendGetAsync();\n        // wait for response\n        await delay(100);\n        const ropayload = jdunpack(ro.data, packFormat);\n        log({ ropayload })\n        if (!jdpackEqual(packFormat, payload, ropayload))\n            throw new Error(`expected ro ${payload}, got ${ropayload}`)\n\n        // the event should have triggered once\n        log(`-- testing event`)\n        if (packFormat !== \"u8\" && evCount + 1 !== ev.count)\n            throw new Error(`expected 1 event, got ${ev.count - evCount}`)\n    }\n\n    const testCommand = async (log) => {\n        log(`-- testing cmd`)\n\n        const packFormat = specification.packFormat;\n        const payload = randomPayload(packFormat, fields);\n        log({ payload })\n        const data = jdpack(packFormat, payload);\n        log({ data: toHex(data) })\n        // send over cmd packet\n        await rw.service.sendPacketAsync(Packet.from(rw.code, data))\n        // read packet\n        await rw.sendGetAsync();\n        // wait for response\n        await delay(100);\n        // check read\n        log({ rwdata: toHex(rw.data) });\n        const rwpayload = jdunpack(rw.data, packFormat);\n        log({ rwpayload });\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n    }\n\n    const test = async (log) => {\n        log(`- testing no acks`)\n        rw.service.registersUseAcks = false;\n        await testRwRo(log);\n        await testCommand(log);\n        log(`- testing acks`)\n        rw.service.registersUseAcks = true;\n        await testRwRo(log);\n        await testCommand(log);\n    }\n\n    return <TestCard title={name} subheader={specification.packFormat || \"?\"} onTest={test} />\n}\n\nfunction ServiceProtocolTest(props: { service: JDService }) {\n    const { service } = props;\n    const { device } = service;\n\n    const regs = service.registers();\n    const rws = service.registers().filter(reg => reg.specification.kind == \"rw\")\n        .map(rw => {\n            const roname = rw.name.replace(/^rw_/, \"ro_\");\n            const ro = regs.find(r => r.specification.kind === \"ro\" && r.specification.name === roname)\n            const ev = service.event(rw.code);\n            return { rw, ro, ev }\n        });\n\n    const outPipeTest = async (log) => {\n        // fill bytes with data\n        const rw = service.register(ProtoTestReg.RwBytes);\n        const [data] = randomPayload<[Uint8Array]>(\"b\", rw.fields);\n        log(`data: ${toHex(data)}`)\n        // send over cmd packet\n        rw.service.registersUseAcks = true;\n        await rw.sendSetAsync(data);\n        await rw.sendGetAsync();\n        // wait for response\n        await delay(100);\n        log(`data recv: ${toHex(rw.data)}`)\n        if (!bufferEq(data, rw.data))\n            throw new Error(`rw write failed, expected ${toHex(data)}, got ${toHex(rw.data)}`);\n        // read packet back\n        const recv = await service.receiveWithInPipe<[number]>(ProtoTestCmd.CReportPipe, \"u8\")\n        const recvu = new Uint8Array(recv.map(buf => buf[0]));\n        log(`received ${toHex(recvu)}`)\n        if (!bufferEq(data, recvu))\n            throw new Error(`expected ${toHex(data)}, got ${toHex(recv.map(buf => buf[0]))}`)\n    }\n\n    return <Grid container spacing={1}>\n        <Grid item xs={10}>\n            <Typography variant=\"h4\">\n                <DeviceName device={device} />\n            </Typography>\n        </Grid>\n        <Grid item xs={2}>\n            <DeviceActions device={device} showReset={true} />\n        </Grid>\n        {rws?.map(rw => <Grid key={rw.rw.id} item xs={12} md={6}><RegisterProtocolTest {...rw} /></Grid>)}\n        <Grid key={\"cpipe\"} item xs={12} md={6}>\n            <TestCard title={\"out pipe\"} subheader={\"\"} onTest={outPipeTest} />\n        </Grid>\n    </Grid>\n}\n\nexport default function ProtocolTest() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [host, setHost] = useState(false);\n    const services = useChange(bus, b => b.services({ serviceClass: SRV_PROTO_TEST }))\n\n    const toggleHost = () => setHost(!host);\n\n    // add virtual device\n    useEffect(() => {\n        if (!host)\n            return () => { };\n\n        const d = new JDDeviceHost([new ProtocolTestServiceHost()]);\n        bus.addDeviceHost(d);\n        return () => bus.removeDeviceHost(d);\n    }, [host]);\n\n    return <>\n        <h1>Protocol Test</h1>\n        <p>\n            A helper page to test the Jacdac protocol against a\n            <Link to=\"/services/prototest/\">protocol test</Link> service.\n        </p>\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid key=\"connect\" item xs={12}>\n                <ConnectAlert serviceClass={SRV_PROTO_TEST} />\n            </Grid>\n            {services?.map(service => <Grid key={service.id} item xs={12}>\n                <ServiceProtocolTest service={service} />\n            </Grid>)}\n            <Grid item xs={12}>\n                <Alert severity=\"info\">\n                    <AlertTitle>Developer zone</AlertTitle>\n                    <Switch checked={host} onChange={toggleHost} />\n                    <label>Add simulator</label>\n                </Alert>\n            </Grid>\n        </Grid>\n    </>\n}"],"sourceRoot":""}