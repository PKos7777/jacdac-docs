{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardReflectedLight.tsx"],"names":["DashboardReflectedLight","props","service","services","variant","brighessRegister","register","ReflectedLightReg","Brightness","useRegisterUnpackedValue","brightness","Variant","sensorVariant","host","useServiceHost","color","useWidgetTheme","background","controlBackground","widgetSize","useWidgetSize","length","maxValue","handleDown","reading","setValues","refresh","buttonProps","useSvgButtonProps","actualBrightness","useThrottledValue","w","h","m","sw","ReflectedLightVariant","InfraredAnalog","dx","x","sh","dark","bright","userSelect","pointerEvents"],"mappings":"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","file":"117-442aa928e9bd41dc64e6.js","sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceHost from \"../hooks/useServiceHost\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport ReflectedLightServiceHost from \"../../../jacdac-ts/src/hosts/reflectedlightservicehost\"\nimport {\n    ReflectedLightReg,\n    ReflectedLightVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\n\nexport default function DashboardReflectedLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const brighessRegister = service.register(ReflectedLightReg.Brightness)\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brighessRegister,\n        props\n    )\n    const [sensorVariant] = useRegisterUnpackedValue<[ReflectedLightVariant]>(\n        service.register(ReflectedLightReg.Variant),\n        props\n    )\n\n    const host = useServiceHost<ReflectedLightServiceHost>(service)\n    const color = host ? \"secondary\" : \"primary\"\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    const maxValue = 1.0\n    const handleDown = () => {\n        host.reading.setValues([brightness > 0 ? 0 : 1.0])\n        brighessRegister.refresh()\n    }\n    const buttonProps = useSvgButtonProps<SVGRectElement>(\n        \"line detector\",\n        host && handleDown\n    )\n\n    const actualBrightness = useThrottledValue(brightness || 0, maxValue << 2)\n\n    const w = 64\n    const h = 64\n    const m = 4\n    const sw = sensorVariant === ReflectedLightVariant.InfraredAnalog ? 32 : 16\n    const dx = w >> 1\n    const x = (w - sw - dx) / 2 + (actualBrightness / maxValue) * dx\n    const sh = 32\n    const dark = \"#000\"\n    const bright = \"#ddd\"\n\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={dark}\n                aria-label=\"dark area\"\n            />\n            <rect\n                x={w >> 1}\n                y={0}\n                width={w >> 1}\n                height={h}\n                fill={bright}\n                aria-label=\"bright area\"\n            />\n            <g transform={`translate(${x}, ${h - m - sh})`}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={sw}\n                    height={sh}\n                    fill={background}\n                    {...buttonProps}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={sh / 3}\n                    r={sw / 2 - 4}\n                    fill={dark}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n                <circle\n                    cx={sw >> 1}\n                    cy={(sh * 2) / 3}\n                    r={sw / 2 - 4}\n                    fill={bright}\n                    stroke={controlBackground}\n                    strokeWidth={2}\n                    style={{ userSelect: \"none\", pointerEvents: \"none\" }}\n                />\n            </g>\n        </SvgWidget>\n    )\n}\n"],"sourceRoot":""}