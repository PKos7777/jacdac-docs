{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayArrow.js","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/rolemanager.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/vmrunner.ts","webpack://jacdac-docs/./src/components/vm/VMRunner.tsx"],"names":["refresh_env","registers","k","register","retry","val","undefined","refresh","unpackedValue","writeReg","reg","fmt","ev","sendSetPackedAsync","sendCommand","service","pkt","values","sendCmdAsync","identifier","jdpack","packFormat","VMServiceEnvironment","_registers","_events","registerRegister","regName","handler","specification","packets","find","isRegister","name","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","command","commandName","p","isCommand","writeRegister","jdreg","lookup","e","root","type","object","fld","property","field","fields","f","value","refreshEnvironment","JDServiceClient","VMEnvironment","notifyOnChange","_currentEvent","_envs","_locals","serviceChanged","role","added","unmount","serviceEnv","getService","getRootName","Object","forEach","s","roleName","me","local","writeLocal","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","JDExprEvaluator","env","callEval","exprStack","tos","length","pop","eval","visitExpression","ret","push","top","le","id","lit","MyRoleManager","bus","notify","_roles","_devices","on","DEVICE_ANNOUNCE","dev","addServices","DEVICE_DISCONNECT","removeServices","services","keys","nameMatch","shortName","indexOf","filter","d","n1","n2","cn1","slice","toLowerCase","replace","trim","cn2","getServicesFromName","addRoleService","serviceShortName","existingInstance","r","serviceSpecificationFromName","provider","serviceProviderDefinitionFromServiceClass","classIdentifier","serviceProvider","addServiceProvider","VMStatus","IT4CommandEvaluator","gc","checkExpression","expr","evaluate","_status","Running","args","a","Completed","inst","Stopped","IT4CommandRunner","_eval","reset","status","step","isWaiting","finish","cancel","IT4HandlerRunner","stopped","_commandIndex","_currentCommand","post_process","commands","Ready","IT4ProgramRunner","program","_waitQueue","_running","_rm","_env","split","events","run","_handlers","handlers","h","index","emit","start","roles","nextTime","ERROR","VMRunner","props","autoStartDefault","autoStart","useContext","JacdacContext","useState","testRunner","setTestRunner","setAutoStart","useEffect","runner","disabled","useChange","t","handleRun","handleCancel","running"],"mappings":"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","file":"8681e1d67a6dd0cf4967cae72c671a181d17268f-aef61fc551810debcac1.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');\n\nexports.default = _default;","import { isEvent, isRegister, isCommand } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\n\nexport async function refresh_env(registers: SMap<JDRegister>) {\n    for (const k in registers) {\n        const register = registers[k]\n        let retry = 0\n        let val: any = undefined\n        do {\n            await register.refresh()\n            val = register.unpackedValue?.[0]\n        } while (val === undefined && retry++ < 2)\n    }\n}\n\n// TODO: you want [ev] to be PackedValues and handle the arrays yourself.\nasync function writeReg(reg: JDRegister, fmt: string, ev: any) {\n    await reg.sendSetPackedAsync(fmt, [ev], true)\n}\n\nasync function sendCommand(service: JDService, pkt: jdspec.PacketInfo, values: PackedValues) {\n    // console.log(pkt, values)\n    await service.sendCmdAsync(pkt.identifier, jdpack(pkt.packFormat, values), true)\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public sendCommand(command: jsep.Identifier, values: PackedValues) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt)\n            sendCommand(this.service, pkt, values)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public writeRegister(regName: string, ev: any) {\n        const jdreg = this._registers[regName]\n        if (jdreg) {\n            writeReg(jdreg, jdreg.specification?.packFormat, ev)\n            return true\n        }\n        return false\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | jsep.Identifier | string): any {\n        let root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        let fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public refreshEnvironment() {\n        refresh_env(this._registers)\n    }\n}\n\nexport class VMEnvironment extends JDEventSource {\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _locals: SMap<string> = {}\n\n    constructor(\n        private readonly notifyOnChange: () => void\n    ) {\n        super()\n    }\n\n    public serviceChanged(role: string, service: JDService, added: boolean) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (added) {\n            this._envs[role] = new VMServiceEnvironment(service)\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerRegister(reg, this.notifyOnChange)\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.notifyOnChange()\n            })\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        return this._envs[root]\n    }\n\n    public refreshEnvironment() {\n        Object.values(this._envs).forEach(s => s?.refreshEnvironment())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public sendCommand(e: jsep.MemberExpression, values: PackedValues) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            serviceEnv.sendCommand(e.property as jsep.Identifier, values)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            let me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._locals[local]\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return undefined\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.lookup(reg)\n        }\n        return undefined\n    }\n\n    public writeRegister(e: jsep.MemberExpression | string, ev: any) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.writeRegister(reg, ev)\n        }\n        return false\n    }\n\n    public writeLocal(e: jsep.MemberExpression | string, ev: any) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            this._locals[local] = ev\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return false\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        Object.values(this._envs).forEach(vs => vs.unmount())\n    }\n}\n","/*\nThe JD-VM runs a program, which is a set of handlers. Each handler is of the form\n•\twait on event/condition, followed by a\n•\tsequence of guarded commands – the sequence is executed atomically (though may suspend if it contains a wait)\nAfter a handler finishes executing, it restarts (there is an implicit event loop around all the handlers, as usual). \n \nWe will have a small key-value store to keep program state (perhaps we will have the ability to store lists of values as well as basic values) across the handler executions.\n \nCommands can talk to JD services (probably via roles), as well as read/write program state, and wait on events/expressions. Any command can be guarded by an expression, for conditional execution.\n \nExpressions can be against service registers (as in the test case) and program state.\n \n*/\n\nexport type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: JDExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class JDExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public eval(e: jsep.Expression) {\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    public visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    let ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                this.visitExpression(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = this.env(e as jsep.MemberExpression)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                this.exprStack.push(this.env(id.name))\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import { JDEventSource } from \"../jdom/eventsource\"\nimport { DEVICE_ANNOUNCE, DEVICE_DISCONNECT } from \"../jdom/constants\"\nimport { JDBus } from \"../jdom/bus\"\nimport { JDDevice } from \"../jdom/device\"\nimport { JDService } from \"../jdom/service\"\nimport { serviceSpecificationFromName } from \"../jdom/spec\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../src/servers/servers\"\nimport { SMap } from \"../jdom/utils\"\n\nexport class MyRoleManager extends JDEventSource {\n    private _roles: SMap<JDService | string> = {}\n    private _devices: JDDevice[] = []\n\n    constructor(\n        private readonly bus: JDBus,\n        private readonly notify: (\n            role: string,\n            service: JDService,\n            added: boolean\n        ) => void\n    ) {\n        super()\n        this.bus.on(DEVICE_ANNOUNCE, (dev: JDDevice) => this.addServices(dev))\n        this.bus.on(DEVICE_DISCONNECT, (dev: JDDevice) =>\n            this.removeServices(dev)\n        )\n    }\n\n    private addServices(dev: JDDevice) {\n        dev.services().forEach(s => {\n            let role = Object.keys(this._roles).find(\n                k =>\n                    typeof this._roles[k] === \"string\" &&\n                    this.nameMatch(\n                        this._roles[k] as string,\n                        s.specification.shortName\n                    )\n            )\n            if (role && this._devices.indexOf(dev) === -1) {\n                this._roles[role] = s\n                this._devices.push(dev)\n                if (this.notify) this.notify(role, s, true)\n            }\n        })\n    }\n\n    private removeServices(dev: JDDevice) {\n        if (this._devices.indexOf(dev) >= 0) {\n            this._devices = this._devices.filter(d => d !== dev)\n            let role = Object.keys(this._roles).find(\n                k =>\n                    typeof this._roles[k] !== \"string\" &&\n                    dev.services().indexOf(this._roles[k] as JDService) >= 0\n            )\n            if (role) {\n                let service = this._roles[role] as JDService\n                this._roles[role] = (this._roles[\n                    role\n                ] as JDService).specification.shortName\n                if (this.notify) this.notify(role, service, false)\n            }\n        }\n    }\n\n    public getService(role: string): JDService {\n        let s = this._roles[role]\n        return !s || typeof s === \"string\" ? undefined : s\n    }\n\n    private nameMatch(n1: string, n2: string) {\n        const cn1 = n1.slice(0).toLowerCase().replace(\"_\", \" \").trim()\n        const cn2 = n2.slice(0).toLowerCase().replace(\"_\", \" \").trim()\n        return cn1 === cn2\n    }\n\n    private getServicesFromName(root: string): JDService[] {\n        return this.bus\n            .services()\n            .filter(s => this.nameMatch(s.specification.shortName, root))\n    }\n\n    public addRoleService(role: string, serviceShortName: string) {\n        const s = this._roles[role]\n        if (s && typeof(s) !== \"string\") \n            return\n        let existingInstance = Object.values(this._roles).find(\n            r =>\n                (typeof r === \"string\" &&\n                    this.nameMatch(r, serviceShortName)) ||\n                (typeof r === \"object\" &&\n                    this.nameMatch(r.specification.shortName, serviceShortName))\n        )\n        this._roles[role] = serviceShortName\n        let ret = this.getServicesFromName(serviceShortName)\n        if (existingInstance || ret.length === 0) {\n            // spin up a new simulator\n            let service = serviceSpecificationFromName(serviceShortName)\n            if (service) {\n                let provider = serviceProviderDefinitionFromServiceClass(\n                    service?.classIdentifier\n                )\n                if (provider) {\n                    let serviceProvider = addServiceProvider(this.bus, provider)\n                }\n            }\n        } else {\n            this._roles[role] = ret[0]\n        }\n    }\n}\n","import { IT4Program, IT4Handler, IT4GuardedCommand } from \"./ir\"\nimport { MyRoleManager } from \"./rolemanager\"\nimport { VMEnvironment } from \"./environment\"\nimport { JDExprEvaluator } from \"./expr\"\nimport { JDBus } from \"../jdom/bus\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, ERROR } from \"../jdom/constants\"\n\nexport enum VMStatus {\n    Ready = \"ready\",\n    Running = \"running\",\n    Completed = \"completed\",\n    Stopped = \"stopped\",\n}\n\ninterface Environment {\n    lookup: (e: jsep.MemberExpression | string) => any\n    writeRegister: (e: jsep.MemberExpression | string, v: any) => boolean\n    writeLocal: (e: jsep.MemberExpression | string, v: any) => boolean\n    hasEvent: (e: jsep.MemberExpression | string) => boolean\n    sendCommand: (command: jsep.MemberExpression, values: any[]) => void\n    refreshEnvironment: () => void\n    unsubscribe: () => void\n}\n\nclass IT4CommandEvaluator {\n    private _status: VMStatus\n    constructor(\n        private readonly env: Environment,\n        private readonly gc: IT4GuardedCommand\n    ) {}\n\n    get status() {\n        return this._status\n    }\n\n    private get inst() {\n        return (this.gc.command.callee as jsep.Identifier)?.name\n    }\n\n    private checkExpression(e: jsep.Expression) {\n        const expr = new JDExprEvaluator(e => this.env.lookup(e), undefined)\n        return expr.eval(e) ? true : false\n    }\n\n    public evaluate() {\n        this._status = VMStatus.Running\n        const args = this.gc.command.arguments\n        if (this.gc.command.callee.type === \"MemberExpression\") {\n            // interpret as a service command (role.comand)\n            const expr = new JDExprEvaluator(\n                e => this.env.lookup(e),\n                undefined\n            )\n            let values = this.gc.command.arguments.map(a => expr.eval(a))\n            this.env.sendCommand(this.gc.command.callee as jsep.MemberExpression, values)\n            this._status = VMStatus.Completed\n            return\n        }\n        switch (this.inst) {\n            case \"awaitEvent\": {\n                const event = args[0] as jsep.MemberExpression\n                if (this.env.hasEvent(event)) {\n                    this._status = this.checkExpression(args[1])\n                        ? VMStatus.Completed\n                        : VMStatus.Running\n                }\n                break\n            }\n            case \"awaitCondition\": {\n                this._status = this.checkExpression(args[0])\n                    ? VMStatus.Completed\n                    : VMStatus.Running\n                break\n            }\n            case \"writeRegister\":\n            case \"writeLocal\": {\n                const expr = new JDExprEvaluator(\n                    e => this.env.lookup(e),\n                    undefined\n                )\n                const ev = expr.eval(args[1])\n                const reg = args[0] as jsep.MemberExpression\n                if (\n                    (this.inst === \"writeRegister\" &&\n                        this.env.writeRegister(reg, ev)) ||\n                    (this.inst === \"writeLocal\" && this.env.writeLocal(reg, ev))\n                ) {\n                    this._status = VMStatus.Completed\n                }\n                this._status = VMStatus.Completed\n                break\n            }\n            case \"halt\": {\n                this._status = VMStatus.Stopped\n                break\n            }\n        }\n    }\n}\n\nclass IT4CommandRunner {\n    private _status = VMStatus.Running\n    private _eval: IT4CommandEvaluator\n    constructor(env: Environment, gc: IT4GuardedCommand) {\n        this._eval = new IT4CommandEvaluator(env, gc)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: VMStatus) {\n        if (s != this._status) {\n            this._status = s\n        }\n    }\n\n    get isWaiting(): boolean {\n        return this.status === VMStatus.Running\n    }\n\n    reset() {\n        this.status = VMStatus.Running\n    }\n\n    step() {\n        if (this.isWaiting) {\n            this._eval.evaluate()\n            this.finish(this._eval.status)\n        }\n    }\n\n    cancel() {\n        this.finish(VMStatus.Stopped)\n    }\n\n    private finish(s: VMStatus) {\n        if (\n            (this.isWaiting && s === VMStatus.Completed) ||\n            s === VMStatus.Stopped\n        ) {\n            this.status = s\n        }\n    }\n}\n\nclass IT4HandlerRunner {\n    private _commandIndex: number\n    private _currentCommand: IT4CommandRunner\n    private stopped = false\n\n    constructor(\n        public readonly id: number,\n        public readonly env: Environment,\n        private readonly handler: IT4Handler\n    ) {\n        this.reset()\n    }\n\n    get status() {\n        return this.stopped\n            ? VMStatus.Stopped\n            : this._currentCommand === undefined\n            ? VMStatus.Ready\n            : this._currentCommand.status\n    }\n\n    public reset() {\n        this._commandIndex = undefined\n        this._currentCommand = undefined\n        this.stopped = false\n    }\n\n    cancel() {\n        this.stopped = true\n        this.env.unsubscribe()\n    }\n\n    private post_process() {\n        if (this._currentCommand.status === VMStatus.Stopped)\n            this.stopped = true\n    }\n\n    // run-to-completion semantics\n    step() {\n        // eight stopped or empty\n        if (this.stopped || !this.handler.commands.length) return\n\n        if (this._commandIndex === undefined) {\n            this._commandIndex = 0\n            this._currentCommand = new IT4CommandRunner(\n                this.env,\n                this.handler.commands[this._commandIndex]\n            )\n        }\n        this._currentCommand.step()\n        this.post_process()\n        while (\n            this._currentCommand.status === VMStatus.Completed &&\n            this._commandIndex < this.handler.commands.length - 1\n        ) {\n            this._commandIndex++\n            this._currentCommand = new IT4CommandRunner(\n                this.env,\n                this.handler.commands[this._commandIndex]\n            )\n            this._currentCommand.step()\n            this.post_process()\n        }\n    }\n}\n\nexport class IT4ProgramRunner extends JDEventSource {\n    private _handlers: IT4HandlerRunner[]\n    private _env: VMEnvironment\n    private _waitQueue: IT4HandlerRunner[] = []\n    private _running = false\n    private _rm: MyRoleManager\n\n    constructor(private readonly program: IT4Program, bus: JDBus) {\n        super()\n        this._rm = new MyRoleManager(bus, (role, service, added) => {\n            this._env.serviceChanged(role, service, added)\n            if (added) {\n                this.program.registers.forEach(r => {\n                    const [root, reg] = r.split(\".\")\n                    if (root === role) {\n                        this._env.registerRegister(role, reg)\n                    }\n                })\n                this.program.events.forEach(e => {\n                    const [root, ev] = e.split(\".\")\n                    if (root === role) {\n                        this._env.registerEvent(role, ev)\n                    }\n                })\n            }\n        })\n        this._env = new VMEnvironment(() => {\n            this.run()\n        })\n        this._handlers = program.handlers.map(\n            (h, index) => new IT4HandlerRunner(index, this._env, h)\n        )\n        this._waitQueue = this._handlers.slice(0)\n    }\n\n    get status() {\n        const ret =\n            this._running === false\n                ? VMStatus.Stopped\n                : this._waitQueue.length > 0\n                ? VMStatus.Running\n                : VMStatus.Completed\n        return ret\n    }\n\n    cancel() {\n        if (!this._running) return // nothing to cancel\n\n        this._running = false\n        this._waitQueue = this._handlers.slice(0)\n        this._waitQueue.forEach(h => h.reset())\n        this.emit(CHANGE)\n    }\n\n    start() {\n        if (this._running) return // already running\n\n        this.program.roles.forEach(role => {\n            this._rm.addRoleService(role.role, role.serviceShortName)\n        })\n        this._running = true\n        this.emit(CHANGE)\n        this.run()\n    }\n\n    run() {\n        try {\n            if (!this._running) return\n            this._env.refreshEnvironment()\n            if (this._waitQueue.length > 0) {\n                const nextTime: IT4HandlerRunner[] = []\n                this._waitQueue.forEach(h => {\n                    h.step()\n                    if (h.status !== VMStatus.Stopped) {\n                        if (h.status === VMStatus.Completed) h.reset()\n                        nextTime.push(h)\n                    }\n                })\n                this._waitQueue = nextTime\n                this._env.consumeEvent()\n            } else {\n                this.emit(CHANGE)\n            }\n        } catch (e) {\n            this.emit(ERROR, e)\n        }\n    }\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { IT4Program } from \"../../../jacdac-ts/src/vm/ir\"\nimport { IT4ProgramRunner, VMStatus } from \"../../../jacdac-ts/src/vm/vmrunner\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useChange from \"../../jacdac/useChange\"\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\n\nexport default function VMRunner(props: {\n    program: IT4Program\n    autoStart?: boolean\n}) {\n    const { program, autoStart: autoStartDefault } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [testRunner, setTestRunner] = useState<IT4ProgramRunner>()\n    const [autoStart, setAutoStart] = useState(!!autoStartDefault)\n\n    useEffect(() => {\n        const runner = program && new IT4ProgramRunner(program, bus)\n        setTestRunner(runner)\n        if (runner && autoStart) runner.start()\n        return () => runner?.cancel()\n    }, [program, autoStart])\n\n    const disabled = !testRunner\n    const status = useChange(testRunner, t => t?.status)\n    const handleRun = () => {\n        setAutoStart(autoStartDefault)\n        testRunner.start()\n    }\n    const handleCancel = () => {\n        setAutoStart(false)\n        testRunner.cancel()\n    }\n    const running = status === VMStatus.Running\n\n    return (\n        <Button\n            disabled={disabled}\n            variant=\"contained\"\n            onClick={running ? handleCancel : handleRun}\n            color={running ? \"default\" : \"primary\"}\n            startIcon={running ? <LoadingProgress /> : <PlayArrowIcon />}\n        >\n            {running ? \"Stop\" : \"Run\"}\n        </Button>\n    )\n}\n"],"sourceRoot":""}