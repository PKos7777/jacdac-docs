{"version":3,"sources":["webpack:///./src/components/hooks/useMicrophoneSpectrum.ts","webpack:///./src/components/widgets/BytesBarGraphWidget.tsx","webpack:///./src/components/dashboard/DashboardSoundSpectrum.tsx"],"names":["useMicrophoneSpectrum","enabled","options","useMicrophoneAnalyzer","analyser","onClickActivateMicrophone","closeMicrophone","frequencies","useRef","Uint8Array","useEffect","spectrum","a","current","length","frequencyBinCount","getByteFrequencyData","BytesBarGraphWidget","props","register","size","visible","server","useServiceServer","service","color","useWidgetTheme","background","controlBackground","active","pathRef","w","h","m","dy","subscribe","REPORT_UPDATE","bins","data","dx","dw","d","i","bin","setAttribute","HostMicrophoneButton","host","enabledRegister","SoundSpectrumReg","Enabled","useRegisterBoolValue","useRegisterUnpackedValue","MinDecibels","minDecibels","MaxDecibels","maxDecibels","FftPow2Size","fftPow2Size","fftSize","SmoothingTimeConstant","smoothingTimeConstant","title","handleClick","sendSetBoolAsync","REFRESH","v","undefined","reading","setValues","DashboardSoundSpectrum","frequencyBinsRegister","FrequencyBins"],"mappings":"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","file":"126-9e3ad1f67532f264389e.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\";\n\nexport default function useMicrophoneSpectrum(enabled: boolean, options?: AudioAnalyzerOptions) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } = useMicrophoneAnalyzer(options);\n    const frequencies = useRef(new Uint8Array(0));\n\n    useEffect(() => {\n        if (!enabled)\n            closeMicrophone();\n    }, [enabled]);\n\n    return {\n        onClickActivateMicrophone,\n        spectrum: () => {\n            const a = analyser();\n            if (!a) return frequencies.current;\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount);\n            a?.getByteFrequencyData(frequencies.current);\n            return frequencies.current;\n        }\n    }\n}","import React, { useRef, useEffect } from \"react\"\nimport { REPORT_UPDATE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SvgWidget from \"./SvgWidget\"\nimport useWidgetTheme from \"./useWidgetTheme\"\n\nexport default function BytesBarGraphWidget(props: {\n    register: JDRegister\n    size?: string\n    visible: boolean\n}) {\n    const { register, size, visible } = props\n    const server = useServiceServer(register.service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const pathRef = useRef<SVGPathElement>()\n\n    const w = 128\n    const h = w / 1.612\n    const m = 2\n    const dy = (h - 2 * m) / 0xff\n\n    useEffect(\n        () =>\n            visible &&\n            register?.subscribe(REPORT_UPDATE, () => {\n                // render outside of react loop\n                const { current } = pathRef\n                const bins = register.data\n                if (!current || !bins) return\n\n                const dx = (w - 2 * m) / bins.length\n                const dw = (w - 2 * m) / (bins.length * 6)\n                let d = `M ${m} ${h - m} `\n                for (let i = 0; i < bins.length; ++i) {\n                    const bin = bins[i]\n                    d += ` v ${-dy * bin} h ${dx - dw} v ${dy * bin} h ${dw}`\n                }\n                d += \" z\"\n                current.setAttribute(\"d\", d)\n            }),\n        [register, visible, pathRef.current]\n    )\n\n    return (\n        <SvgWidget width={w} height={h} size={size} background={background}>\n            <path\n                fill={active}\n                stroke={controlBackground}\n                strokeWidth={m / 2}\n                ref={pathRef}\n            />\n        </SvgWidget>\n    )\n}\n","import React, { useEffect } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid } from \"@material-ui/core\"\nimport MicIcon from \"@material-ui/icons/Mic\"\nimport {\n    REFRESH,\n    SoundSpectrumReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useMicrophoneSpectrum from \"../hooks/useMicrophoneSpectrum\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport BytesBarGraphWidget from \"../widgets/BytesBarGraphWidget\"\n\nfunction HostMicrophoneButton(props: {\n    service: JDService\n    host?: SensorServer<[Uint8Array]>\n    visible: boolean\n}) {\n    const { host, service, visible } = props\n    const enabledRegister = service.register(SoundSpectrumReg.Enabled)\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(\n        service.register(SoundSpectrumReg.MinDecibels),\n        props\n    )\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(\n        service.register(SoundSpectrumReg.MaxDecibels),\n        props\n    )\n    const [fftPow2Size] = useRegisterUnpackedValue<[number]>(\n        service.register(SoundSpectrumReg.FftPow2Size),\n        props\n    )\n    const fftSize = 1 << (fftPow2Size || 5)\n    const [smoothingTimeConstant] = useRegisterUnpackedValue<[number]>(\n        service.register(SoundSpectrumReg.SmoothingTimeConstant),\n        props\n    )\n    const { spectrum, onClickActivateMicrophone } = useMicrophoneSpectrum(\n        enabled && !!host,\n        {\n            fftSize,\n            smoothingTimeConstant,\n            minDecibels,\n            maxDecibels,\n        }\n    )\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled) await onClickActivateMicrophone()\n        await enabledRegister.sendSetBoolAsync(!enabled, true)\n    }\n\n    // update volume on demand\n    useEffect(\n        () =>\n            visible &&\n            enabled &&\n            host?.subscribe(REFRESH, () => {\n                const v = spectrum?.()\n                if (v !== undefined) {\n                    host.reading.setValues([v], true)\n                }\n            }),\n        [host, spectrum, visible]\n    )\n\n    return (\n        <IconButtonWithProgress\n            aria-label={title}\n            title={title}\n            indeterminate={enabled}\n            onClick={handleClick}\n        >\n            <MicIcon />\n        </IconButtonWithProgress>\n    )\n}\n\nexport default function DashboardSoundSpectrum(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const frequencyBinsRegister = service.register(\n        SoundSpectrumReg.FrequencyBins\n    )\n    const server = useServiceServer<SensorServer<[Uint8Array]>>(service)\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <BytesBarGraphWidget visible={visible} register={frequencyBinsRegister} />\n            </Grid>\n            <Grid item>\n                <HostMicrophoneButton\n                    service={service}\n                    host={server}\n                    visible={visible}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}