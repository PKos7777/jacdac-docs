{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardMatrixKeypad.tsx","webpack://jacdac-docs/./src/components/hooks/useArrowKeys.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigation.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigationProps.ts"],"names":["DashboardMatrixKeypad","props","service","services","variant","widgetRef","useRef","pressedRegister","useRegister","MatrixKeypadReg","labelsRegister","rowsRegister","columnsRegister","useRegisterUnpackedValue","pressed","labels","rows","columns","server","useServiceServer","color","useWidgetTheme","background","controlBackground","active","textProps","widgetSize","useWidgetSize","length","undefined","clickeable","pw","ph","ps","pr","m","w","h","handleButtonUp","index","up","refresh","handleButtonDown","down","render","ledEls","ledProps","className","role","tabIndex","y","row","x","col","on","findIndex","p","label","handleUp","handleDown","fireUp","useFireKey","fireDown","push","navProps","useKeyboardNavigationProps","current","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","onDown","symmetric","handlers","e","charCode","keyCodeFromEvent","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","f","document","activeElement","next","focus","vertical","onKeyDown"],"mappings":"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","file":"7859-c6a992c17b5b0c3a8107.js","sourcesContent":["import React, { SVGProps, useRef } from \"react\"\nimport { MatrixKeypadReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useFireKey from \"../hooks/useFireKey\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport MatrixKeypadServer from \"../../../jacdac-ts/src/servers/matrixkeypadserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardMatrixKeypad(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const widgetRef = useRef<SVGGElement>()\n    const pressedRegister = useRegister(service, MatrixKeypadReg.Pressed)\n    const labelsRegister = useRegister(service, MatrixKeypadReg.Labels)\n    const rowsRegister = useRegister(service, MatrixKeypadReg.Rows)\n    const columnsRegister = useRegister(service, MatrixKeypadReg.Columns)\n\n    const [pressed] = useRegisterUnpackedValue<[[number][]]>(\n        pressedRegister,\n        props\n    )\n    const [labels] = useRegisterUnpackedValue<[[string][]]>(\n        labelsRegister,\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const server = useServiceServer<MatrixKeypadServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services?.length)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined) return <LoadingProgress />\n\n    const clickeable = !!server\n    // compute size\n    const pw = 8\n    const ph = 8\n    const ps = 0.5\n    const pr = 1\n    const m = 2\n    const w = columns * pw + (columns + 1) * m\n    const h = rows * ph + (rows + 1) * m\n\n    const handleButtonUp = (index: number) => () => {\n        server.up(index)\n        pressedRegister.refresh()\n    }\n    const handleButtonDown = (index: number) => () => {\n        server.down(index)\n        pressedRegister.refresh()\n    }\n\n    // add leds\n    const render = () => {\n        const ledEls: JSX.Element[] = []\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: clickeable ? \"clickeable\" : undefined,\n            role: clickeable ? \"button\" : \"\",\n            tabIndex: clickeable ? 0 : undefined,\n        }\n\n        let y = m\n        for (let row = 0; row < rows; row++) {\n            let x = m\n            for (let col = 0; col < columns; col++) {\n                const index = row * columns + col\n                const on = pressed?.findIndex(p => p[0] === index) > -1\n                const label = labels?.[index]?.[0]\n\n                const handleUp = clickeable ? handleButtonUp(index) : undefined\n                const handleDown = clickeable\n                    ? handleButtonDown(index)\n                    : undefined\n                const fireUp = useFireKey(handleUp)\n                const fireDown = useFireKey(handleDown)\n\n                ledEls.push(\n                    <rect\n                        key={`l${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={on ? active : controlBackground}\n                        stroke={\"none\"}\n                        strokeWidth={ps}\n                        {...ledProps}\n                        aria-label={label || `key ${row},${col}`}\n                        onKeyDown={fireDown}\n                        onKeyUp={fireUp}\n                        onPointerDown={handleDown}\n                        onPointerUp={handleUp}\n                    />\n                )\n                if (label) {\n                    ledEls.push(\n                        <text\n                            key={`t${row}-${col}`}\n                            fontSize={(ph * 2) / 3}\n                            {...textProps}\n                            x={x + pw / 2}\n                            y={y + ph / 2}\n                        >\n                            {label}\n                        </text>\n                    )\n                }\n                x += pw + m\n            }\n            y += ph + m\n        }\n        return { ledEls }\n    }\n\n    const { ledEls } = render()\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w}\n                height={h}\n                rx={pr}\n                ry={pr}\n                fill={background}\n            />\n            <g ref={widgetRef} {...navProps}>\n                {ledEls}\n            </g>\n        </SvgWidget>\n    )\n}\n","import React, { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\";\n\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void,\n    onRight?: () => void,\n    onUp?: () => void,\n    onDown?: () => void,\n    symmetric?: boolean;\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options;\n\n    if (!onLeft && !onUp && !onRight && !onDown)\n        return undefined;\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft)\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e);\n        const handler = handlers[charCode];\n        if (handler) {\n            e.preventDefault();\n            handler();\n        }\n    }\n}\n","import React from \"react\"\n\nexport default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]';\n    const onMove = (offset: number) => () => {\n        console.log('keyboard move', { offset })\n        const focusable = Array.from<SVGElement>(parentRef?.querySelectorAll(query) || []);\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement);\n            const next = ((me + offset) + focusable.length) % focusable.length;\n            focusable[next].focus();\n        }\n    }\n    return onMove;\n}","import useArrowKeys from \"./useArrowKeys\";\nimport useKeyboardNavigation from \"./useKeyboardNavigation\";\n\nexport default function useKeyboardNavigationProps(parentRef: Element, vertical?: boolean) {\n    const onMove = useKeyboardNavigation(parentRef);\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    });\n\n    return {\n        onKeyDown: parentRef && onKeyDown\n    }\n}"],"sourceRoot":""}