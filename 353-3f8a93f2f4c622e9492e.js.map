{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardSevenSegmentDisplay.tsx"],"names":["DashboardSevenSegmentDisplay","props","service","visible","digitsRegister","useRegister","SevenSegmentDisplayReg","brightnessRegister","digitCountRegister","decimalPointRegister","useRegisterUnpackedValue","Uint8Array","digits","brightness","digitCount","decimalPoint","useRegisterBoolValue","server","useServiceServer","color","useWidgetTheme","active","background","undefined","md","rs","hs","ws","wd","hd","w","h","opacity","VerticalSegment","bit","digit","mask","mx","my","HorizontalSegment","DotSegment","Digit","dprops","x","y","Array","fill","map","_","i"],"mappings":"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","file":"353-3f8a93f2f4c622e9492e.js","sourcesContent":["import React from \"react\"\nimport { SevenSegmentDisplayReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { Grid } from \"@material-ui/core\"\nimport RegisterInput from \"../RegisterInput\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardSevenSegmentDisplay(\n    props: DashboardServiceProps\n) {\n    const { service, visible } = props\n\n    const digitsRegister = useRegister(service, SevenSegmentDisplayReg.Digits)\n    const brightnessRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.Brightness\n    )\n    const digitCountRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.DigitCount\n    )\n    const decimalPointRegister = useRegister(\n        service,\n        SevenSegmentDisplayReg.DecimalPoint\n    )\n\n    const [digits] = useRegisterUnpackedValue<[Uint8Array]>(digitsRegister) || [\n        new Uint8Array(0),\n    ]\n    const [brightness] = useRegisterUnpackedValue<[number]>(\n        brightnessRegister,\n        props\n    )\n    const [digitCount] = useRegisterUnpackedValue<[number]>(\n        digitCountRegister,\n        props\n    )\n    const decimalPoint = useRegisterBoolValue(decimalPointRegister, props)\n\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { active, background } = useWidgetTheme(color)\n\n    if (digitCount === undefined) return <LoadingProgress />\n\n    const md = 4\n    const rs = 4\n    const hs = 32\n    const ws = 28\n    const wd = ws + 2 * rs\n    const hd = 2 * rs\n\n    const w = digitCount * (wd + 4 * md) + md\n    const h = 2 * md + 3 * hd + 2 * hs\n    const opacity = brightness || 0\n\n    /*\n    GFEDCBA DP\n    - A -\n    |   |\n    G   B\n    |   |\n    - F -\n    |   |   -\n    E   C  |DP|\n    - D -   -\n    */\n\n    const VerticalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n    const HorizontalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const DotSegment = (props: { digit: number }) => {\n        const bit = (props.digit & 0x80) == 0x80\n        const mx = rs + wd + 2 * rs\n        const my = rs + 2 * hd + 2 * hs\n        return (\n            <>\n                <circle\n                    fill={background}\n                    stroke=\"none\"\n                    r={rs}\n                    cx={mx}\n                    cy={my}\n                />\n                {bit && (\n                    <circle\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        r={rs}\n                        cx={mx}\n                        cy={my}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const Digit = (dprops: { x: number; y: number; digit: number }) => {\n        const { x, y, digit } = dprops\n        return (\n            <g transform={`translate(${x}, ${y})`}>\n                <VerticalSegment\n                    key=\"G\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0x01}\n                />\n\n                <HorizontalSegment\n                    key=\"F\"\n                    mx={rs}\n                    my={rs + hs + hd}\n                    digit={digit}\n                    mask={0x02}\n                />\n\n                <VerticalSegment\n                    key=\"E\"\n                    mx={rs}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0x04}\n                />\n\n                <HorizontalSegment\n                    key=\"D\"\n                    mx={rs}\n                    my={rs + 2 * hd + 2 * hs}\n                    digit={digit}\n                    mask={0x08}\n                />\n\n                <VerticalSegment\n                    key=\"C\"\n                    mx={rs + wd}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0x10}\n                />\n                <VerticalSegment\n                    key=\"B\"\n                    mx={rs + wd}\n                    my={rs}\n                    digit={digit}\n                    mask={0x20}\n                />\n\n                <HorizontalSegment\n                    key=\"A\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0x40}\n                />\n\n                {decimalPoint && <DotSegment digit={digit} />}\n            </g>\n        )\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    {Array(digitCount)\n                        .fill(0)\n                        .map((_, i) => (\n                            <Digit\n                                key={i}\n                                x={md + (wd + 4 * md) * i}\n                                y={md}\n                                digit={digits?.[i] || 0}\n                            />\n                        ))}\n                </SvgWidget>\n            </Grid>\n            <Grid item>\n                <RegisterInput\n                    register={brightnessRegister}\n                    visible={visible}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}