{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/Clear.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Send.js","webpack://jacdac-docs/./src/components/dashboard/DashboardCharacterScreen.tsx"],"names":["useStyles","makeStyles","createStyles","text","fontFamily","fontWeight","box","DashboardCharacterScreen","props","service","classes","messageRegister","useRegister","CharacterScreenReg","rowsRegister","columnsRegister","textDirectionRegister","useRegisterUnpackedValue","message","rows","columns","textDirection","useState","fieldMessage","setFieldMessage","useWidgetTheme","textPrimary","background","controlBackground","handleClear","sendCmdAsync","CharacterScreenCmd","handleMessage","sendSetStringAsync","handleFieldMessageChange","ev","target","value","undefined","cw","ch","m","mo","fs","rtl","CharacterScreenTextDirection","w","h","lines","split","els","y","row","x","line","column","char","push"],"mappings":"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","file":"7787-d5c3827dfe5185a6cb53.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import React, { ChangeEvent, useState } from \"react\"\nimport {\n    CharacterScreenCmd,\n    CharacterScreenReg,\n    CharacterScreenTextDirection,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport { createStyles, Grid, makeStyles, TextField } from \"@material-ui/core\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\nimport CmdButton from \"../CmdButton\"\nimport ClearIcon from \"@material-ui/icons/Clear\"\nimport SendIcon from \"@material-ui/icons/Send\"\nconst useStyles = makeStyles(() =>\n    createStyles({\n        text: {\n            fontFamily: \"monospace\",\n            fontWeight: 100,\n        },\n        box: {},\n    })\n)\n\nexport default function DashboardCharacterScreen(props: DashboardServiceProps) {\n    const { service } = props\n    const classes = useStyles()\n    const messageRegister = useRegister(service, CharacterScreenReg.Message)\n    const rowsRegister = useRegister(service, CharacterScreenReg.Rows)\n    const columnsRegister = useRegister(service, CharacterScreenReg.Columns)\n    const textDirectionRegister = useRegister(\n        service,\n        CharacterScreenReg.TextDirection\n    )\n    const [message] = useRegisterUnpackedValue<[string]>(messageRegister, props)\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const [textDirection] = useRegisterUnpackedValue<[number]>(\n        textDirectionRegister,\n        props\n    )\n    const [fieldMessage, setFieldMessage] = useState(\"\")\n    const { textPrimary, background, controlBackground } =\n        useWidgetTheme(\"primary\")\n\n    const handleClear = async () =>\n        await service.sendCmdAsync(CharacterScreenCmd.Clear)\n    const handleMessage = async () =>\n        await messageRegister.sendSetStringAsync(fieldMessage, true)\n    const handleFieldMessageChange = (ev: ChangeEvent<HTMLTextAreaElement>) =>\n        setFieldMessage(ev.target.value)\n\n    if (rows === undefined || columns === undefined) return <LoadingProgress /> // size unknown\n\n    const cw = 8\n    const ch = 10\n    const m = 1\n    const mo = 2\n    const fs = 8\n\n    const rtl = textDirection === CharacterScreenTextDirection.RightToLeft\n    const w = columns * (cw + m) - m + 2 * mo\n    const h = rows * (ch + m) - m + 2 * mo\n\n    const lines = (message || \"\").split(/\\n/g)\n    const els: JSX.Element[] = []\n\n    let y = mo\n    for (let row = 0; row < rows; ++row) {\n        let x = mo\n        const line = lines[row]\n        for (let column = 0; column < columns; ++column) {\n            const char = line?.[rtl ? columns - 1 - column : column]\n            els.push(\n                <g key={`${row}-${column}`}>\n                    <rect\n                        x={x}\n                        y={y}\n                        width={cw}\n                        height={ch}\n                        className={classes.box}\n                        fill={controlBackground}\n                    />\n                    {char && (\n                        <text\n                            x={x + cw / 2}\n                            y={y + ch - fs / 3}\n                            textAnchor=\"middle\"\n                            fontSize={fs}\n                            className={classes.text}\n                            fill={textPrimary}\n                            aria-label={char}\n                        >\n                            {char}\n                        </text>\n                    )}\n                </g>\n            )\n            x += cw + m\n        }\n\n        y += ch + m\n    }\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <Grid container spacing={1}>\n                    <Grid item xs>\n                        <TextField\n                            value={fieldMessage}\n                            onChange={handleFieldMessageChange}\n                            multiline={true}\n                            rows={rows || 2}\n                            fullWidth={true}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <CmdButton\n                            title=\"set message\"\n                            onClick={handleMessage}\n                            icon={<SendIcon />}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <CmdButton\n                            title=\"clear the entire display\"\n                            onClick={handleClear}\n                            icon={<ClearIcon />}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <SvgWidget\n                    tabIndex={0}\n                    title={`character screen displaying \"${message}\"`}\n                    width={w}\n                    height={h}\n                >\n                    <>\n                        <rect\n                            x={0}\n                            y={0}\n                            width={w}\n                            height={h}\n                            r={m / 2}\n                            fill={background}\n                        />\n                        {els}\n                    </>\n                </SvgWidget>\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}