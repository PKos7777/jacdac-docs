{"version":3,"sources":["webpack:///../src/components/intersection-observer.ts"],"names":["intersectionObserver","ioEntryMap","WeakMap","connection","navigator","mozConnection","webkitConnection","createIntersectionObserver","callback","window","IntersectionObserver","entries","forEach","entry","isIntersecting","get","target","rootMargin","effectiveType","saveData","element","current","set","observe","unobserve"],"mappings":";;;;;;AAGA;AAAA;AAAA,GAAIA,EAAJ,CAIMC,EAAa,GAAIC,QAAJ,EAJnB,CAMMC,EACHC,UAAkBD,UAAlBC,EACAA,UAAkBC,aADlBD,EAEAA,UAAkBE,gBATrB,CASqBA,QAQLC,EARKD,CASnBE,CATmBF,CASnBE,CAKA,MAAM,wBAA0BC,OAA1B,EAODT,IACHA,EAAuB,GAAIU,qBAAJ,CACrB,YACEC,EAAQC,OAARD,CAAgB,kBACVE,EAAMC,cAAND,GAAMC,SAERb,EAAWc,GAAXd,CAAeY,EAAMG,MAArBf,CAFQa,GAEaE,GAFbF,CAIRb,SAAkBY,EAAMG,MAAxBf,CAJEY,EAIsBG,CAL5BL,EAK4BK,CAPT,CAWrB,CACEC,yBAvBiBd,CAuBjBc,CAvBiBd,MAuBjBc,CAvBiBd,EAAYe,aAuB7BD,GAvB6BC,MAwBCf,CAxBDe,EAwBCf,EAAYgB,QAD1CF,CAC0CE,QAD1CF,CAC0CE,QAF5C,CAXqB,CADpBnB,EAc2CmB,SAQ9CC,CAR8CD,CAQ9CC,CAQA,MANIA,GAAQC,OAARD,GAEFnB,EAAWqB,GAAXrB,CAAemB,EAAQC,OAAvBpB,CAAgCO,CAAhCP,EACAD,EAAqBuB,OAArBvB,CAA6BoB,EAAQC,OAArCrB,CAHEoB,EAGmCC,WAIjCrB,GAAwBoB,EAAQC,OAAhCrB,GACFC,SAAkBmB,EAAQC,OAA1BpB,EACAD,EAAqBwB,SAArBxB,CAA+BoB,EAAQC,OAAvCrB,CAFEA,EAEqCqB,CAH3C,CAG2CA,CAxCvC,EAwCuCA,WArCzC,MADAb,iBACA,CADAA,CAFJ,CAEIA,C","file":"128-0e90dfd11cd4e05cbf98.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { RefObject } from \"react\"\n\nlet intersectionObserver: IntersectionObserver\n\ntype Unobserver = () => void\n\nconst ioEntryMap = new WeakMap<HTMLElement, () => void>()\n/* eslint-disable @typescript-eslint/no-explicit-any  */\nconst connection =\n  (navigator as any).connection ||\n  (navigator as any).mozConnection ||\n  (navigator as any).webkitConnection\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// These match the thresholds used in Chrome's native lazy loading\n// @see https://web.dev/browser-level-image-lazy-loading/#distance-from-viewport-thresholds\nconst FAST_CONNECTION_THRESHOLD = `1250px`\nconst SLOW_CONNECTION_THRESHOLD = `2500px`\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: RefObject<HTMLElement | undefined>) => Unobserver {\n  const connectionType = connection?.effectiveType\n\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Get the matching entry's callback and call it\n            ioEntryMap.get(entry.target as HTMLElement)?.()\n            // We only need to call it once\n            ioEntryMap.delete(entry.target as HTMLElement)\n          }\n        })\n      },\n      {\n        rootMargin:\n          connectionType === `4g` && !connection?.saveData\n            ? FAST_CONNECTION_THRESHOLD\n            : SLOW_CONNECTION_THRESHOLD,\n      }\n    )\n  }\n\n  return function observe(\n    element: RefObject<HTMLElement | undefined>\n  ): Unobserver {\n    if (element.current) {\n      // Store a reference to the callback mapped to the element being watched\n      ioEntryMap.set(element.current, callback)\n      intersectionObserver.observe(element.current)\n    }\n\n    return function unobserve(): void {\n      if (intersectionObserver && element.current) {\n        ioEntryMap.delete(element.current)\n        intersectionObserver.unobserve(element.current)\n      }\n    }\n  }\n}\n"],"sourceRoot":""}