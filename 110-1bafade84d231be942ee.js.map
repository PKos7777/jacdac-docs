{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardColor.tsx"],"names":["DashboardColor","props","service","register","ColorReg","Color","useRegisterUnpackedValue","r","g","b","host","useServiceServer","color","useWidgetTheme","background","undefined","value","handleChange","console","log","rgb","reading","setValues","refresh","w","rx"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEe,SAASA,cAAT,CAAwBC,KAAxB,EAAsD;AAAA,MACzDC,OADyD,GAC7CD,KAD6C,CACzDC,OADyD;AAEjE,MAAMC,QAAQ,GAAGD,OAAO,CAACC,QAAR,CAAiBC,8EAAQ,CAACC,KAA1B,CAAjB;;AAFiE,8BAG/CC,iGAAwB,CACtCH,QADsC,EAEtCF,KAFsC,CAHuB;AAAA,MAG1DM,CAH0D;AAAA,MAGvDC,CAHuD;AAAA,MAGpDC,CAHoD;;AAOjE,MAAMC,IAAI,GAAGC,+EAAgB,CACzBT,OADyB,CAA7B;AAGA,MAAMU,KAAK,GAAGF,IAAI,GAAG,WAAH,GAAiB,SAAnC;;AAViE,wBAW1CG,+EAAc,CAACD,KAAD,CAX4B;AAAA,MAWzDE,UAXyD,mBAWzDA,UAXyD;;AAajE,MAAIP,CAAC,KAAKQ,SAAV,EAAqB,oBAAO,2DAAC,mEAAD,OAAP;AAErB,MAAMC,KAAK,aAAWT,CAAC,GAAG,IAAL,IAAc,CAAxB,YAA+BC,CAAC,GAAG,IAAL,IAAc,CAA5C,YACNC,CAAC,GAAG,IAAL,IAAc,CADP,OAAX;;AAGA,MAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACL,KAAD,EAEf;AACFM,WAAO,CAACC,GAAR,CAAY;AAAEP,WAAK,EAALA;AAAF,KAAZ;AADE,QAEMQ,GAFN,GAEcR,KAFd,CAEMQ,GAFN;AAGFV,QAAI,CAACW,OAAL,CAAaC,SAAb,CAAuB,CAACF,GAAG,CAACb,CAAJ,GAAQ,IAAT,EAAea,GAAG,CAACZ,CAAJ,GAAQ,IAAvB,EAA6BY,GAAG,CAACX,CAAJ,GAAQ,IAArC,CAAvB;AACAN,YAAQ,CAACoB,OAAT;AACH,GAPD;;AAQA,MAAMC,CAAC,GAAG,EAAV;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAIf,IAAJ,EACI,oBACI,2DAAC,+DAAD;AACI,SAAK,EAAEM,KADX;AAEI,YAAQ,EAAC,MAFb;AAGI,oBAAgB,EAAEN,IAAI,IAAIO;AAH9B,IADJ,CADJ,KASI,oBACI,2DAAC,kEAAD;AAAW,SAAK,EAAEO,CAAlB;AAAqB,UAAM,EAAEA;AAA7B,kBACI;AACI,KAAC,EAAE,CADP;AAEI,KAAC,EAAE,CAFP;AAGI,SAAK,EAAEA,CAHX;AAII,UAAM,EAAEA,CAJZ;AAKI,MAAE,EAAEC,EALR;AAMI,MAAE,EAAEA,EANR;AAOI,QAAI,EAAET,KAPV;AAQI,UAAM,EAAEF,UARZ;AASI,eAAW,EAAE,CATjB;AAUI,YAAQ,EAAE,CAVd;AAWI,iBAAU,QAXd;AAYI,6BAAqBE,KAArB;AAZJ,IADJ,CADJ;AAkBP,C","file":"110-1bafade84d231be942ee.js","sourcesContent":["import React from \"react\"\nimport { ColorReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { BlockPicker } from \"react-color\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nexport default function DashboardColor(props: DashboardServiceProps) {\n    const { service } = props\n    const register = service.register(ColorReg.Color)\n    const [r, g, b] = useRegisterUnpackedValue<[number, number, number]>(\n        register,\n        props\n    )\n    const host = useServiceServer<SensorServer<[number, number, number]>>(\n        service\n    )\n    const color = host ? \"secondary\" : \"primary\"\n    const { background } = useWidgetTheme(color)\n\n    if (r === undefined) return <LoadingProgress />\n\n    const value = `rgb(${(r * 0xff) >> 0}, ${(g * 0xff) >> 0}, ${\n        (b * 0xff) >> 0\n    })`\n    const handleChange = (color: {\n        rgb: { r: number; g: number; b: number }\n    }) => {\n        console.log({ color })\n        const { rgb } = color\n        host.reading.setValues([rgb.r / 0xff, rgb.g / 0xff, rgb.b / 0xff])\n        register.refresh()\n    }\n    const w = 64\n    const rx = 4\n    if (host)\n        return (\n            <BlockPicker\n                color={value}\n                triangle=\"hide\"\n                onChangeComplete={host && handleChange}\n            />\n        )\n    else\n        return (\n            <SvgWidget width={w} height={w}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={w}\n                    rx={rx}\n                    ry={rx}\n                    fill={value}\n                    stroke={background}\n                    strokeWidth={2}\n                    tabIndex={0}\n                    aria-live=\"polite\"\n                    aria-label={`color ${value} detected`}\n                />\n            </SvgWidget>\n        )\n}\n"],"sourceRoot":""}