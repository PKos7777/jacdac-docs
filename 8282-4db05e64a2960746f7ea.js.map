{"version":3,"file":"8282-4db05e64a2960746f7ea.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASc,YAAT,CAAsBC,KAAtB,EAAoD;AAC/D,MAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,MAAM;AAAEE,IAAAA;AAAF,MAAUhB,iDAAU,CAAqBY,iEAArB,CAA1B;AACA,MAAM;AAAEK,IAAAA;AAAF,MAAejB,iDAAU,CAACQ,6DAAD,CAA/B;AACA,MAAMU,MAAM,GAAGhB,4EAAgB,CAAYa,OAAZ,CAA/B;AACA,MAAMI,KAAK,GAAGD,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAA,OAACE,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,+CAAQ,CAAC,EAAD,CAAlC;AAEA,MAAMqB,kBAAkB,GAAGX,uEAAW,CAACI,OAAD,EAAUV,kGAAV,CAAtC;AACA,MAAM,CAACmB,UAAD,IAAerB,4FAAwB,CACzCmB,kBADyC,EAEzCR,KAFyC,CAA7C;AAIA,MAAMW,gBAAgB,GAAGd,uEAAW,CAACI,OAAD,EAAUV,wFAAV,CAApC;AACA,MAAMsB,QAAQ,GAAGxB,4FAAwB,CACrCsB,gBADqC,EAErCX,KAFqC,CAAzC;AAIA,MAAMc,WAAW,GAAGnB,sEAAS,CAACS,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEC,KAAT,EAAgBU,CAAC,IAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,MAAH,EAArB,CAA7B;AAEA,MAAMC,gBAAgB,GAAGpB,uEAAW,CAACI,OAAD,EAAUV,8FAAV,CAApC;AACA,MAAM,CAAC4B,QAAD,IAAa9B,4FAAwB,CACvC4B,gBADuC,EAEvCjB,KAFuC,CAA3C;AAKA,MAAM,CAACoB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYR,WAAW,IAAID,QAAjC;AACA,MAAMU,GAAG,GAAIH,CAAC,IAAI,EAAN,GAAaC,CAAC,IAAI,CAAlB,GAAuBC,CAAnC,CA3B+D,CA6B/D;;AACA,MAAIF,CAAC,KAAKI,SAAV,EAAqB,oBAAO,iDAAC,oEAAD,OAAP,CA9B0C,CAgC/D;;AACA,MAAMC,cAAc;AAAA,iHAAG,WAAOC,GAAP,EAAuB;AAC1C,UAAI;AACA,cAAMzB,OAAO,CAAC0B,YAAR,CACFrC,4FADE,EAEFG,0EAAM,CAAmC,aAAnC,EAAkD,CACnDiC,GAAG,IAAI,EAAR,GAAc,IADsC,EAEnDA,GAAG,IAAI,CAAR,GAAa,IAFuC,EAGpDA,GAAG,GAAG,IAH8C,EAIpDpB,KAJoD,CAAlD,CAFJ,CAAN;AASA,cAAMJ,GAAG,CAAC2B,KAAJ,CAAU,GAAV,CAAN;AACA,cAAMlB,gBAAgB,CAACmB,YAAjB,EAAN;AACH,OAZD,CAYE,OAAOC,CAAP,EAAU;AACR5B,QAAAA,QAAQ,CAAC4B,CAAD,CAAR;AACH;AACJ,KAhBmB;;AAAA,oBAAdN,cAAc;AAAA;AAAA;AAAA,KAApB;;AAkBA,sBACI,iDAAC,0DAAD;AACI,SAAK,EAAEpB,KADX;AAEI,YAAQ,EAAEkB,GAFd;AAGI,cAAU,EAAEb,UAHhB;AAII,YAAQ,EAAES,QAJd;AAKI,oBAAgB,EAAEM,cALtB;AAMI,SAAK,EAAEnB,KANX;AAOI,iBAAa,EAAEC;AAPnB,IADJ;AAWH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport LEDServer from \"../../../jacdac-ts/src/servers/ledserver\"\nimport { LedCmd, LedReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport AppContext from \"../AppContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport LEDWidget from \"../widgets/LEDWidget\"\nimport useRegister from \"../hooks/useRegister\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { setError } = useContext(AppContext)\n    const server = useServiceServer<LEDServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const [speed, setSpeed] = useState(32)\n\n    const waveLengthRegister = useRegister(service, LedReg.WaveLength)\n    const [waveLength] = useRegisterUnpackedValue<[number]>(\n        waveLengthRegister,\n        props\n    )\n    const busColorRegister = useRegister(service, LedReg.Color)\n    const busColor = useRegisterUnpackedValue<[number, number, number]>(\n        busColorRegister,\n        props\n    )\n    const serverColor = useChange(server?.color, _ => _?.values())\n\n    const ledCountRegister = useRegister(service, LedReg.LedCount)\n    const [ledCount] = useRegisterUnpackedValue<[number]>(\n        ledCountRegister,\n        props\n    )\n\n    const [r, g, b] = serverColor || busColor\n    const rgb = (r << 16) | (g << 8) | b\n\n    // nothing to see\n    if (r === undefined) return <LoadingProgress />\n\n    // send animate command\n    const handleSetColor = async (col: number) => {\n        try {\n            await service.sendCmdAsync(\n                LedCmd.Animate,\n                jdpack<[number, number, number, number]>(\"u8 u8 u8 u8\", [\n                    (col >> 16) & 0xff,\n                    (col >> 8) & 0xff,\n                    col & 0xff,\n                    speed,\n                ])\n            )\n            await bus.delay(500)\n            await busColorRegister.sendGetAsync()\n        } catch (e) {\n            setError(e)\n        }\n    }\n\n    return (\n        <LEDWidget\n            color={color}\n            ledColor={rgb}\n            waveLength={waveLength}\n            ledCount={ledCount}\n            onLedColorChange={handleSetColor}\n            speed={speed}\n            onSpeedChange={setSpeed}\n        />\n    )\n}\n"],"names":["React","useContext","useState","useServiceServer","useRegisterUnpackedValue","LedCmd","LedReg","LoadingProgress","jdpack","AppContext","useChange","LEDWidget","useRegister","JacdacContext","DashboardLED","props","service","bus","setError","server","color","speed","setSpeed","waveLengthRegister","WaveLength","waveLength","busColorRegister","Color","busColor","serverColor","_","values","ledCountRegister","LedCount","ledCount","r","g","b","rgb","undefined","handleSetColor","col","sendCmdAsync","Animate","delay","sendGetAsync","e"],"sourceRoot":""}