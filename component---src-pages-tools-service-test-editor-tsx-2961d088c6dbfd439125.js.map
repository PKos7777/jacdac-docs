{"version":3,"sources":["webpack:///./src/components/ServiceSpecificationSelect.tsx","webpack:///./src/components/tools/ServiceTestEditor.tsx","webpack:///./src/pages/tools/service-test-editor.tsx","webpack:///./node_modules/@material-ui/lab/esm/AlertTitle/AlertTitle.js","webpack:///./node_modules/@material-ui/icons/Info.js","webpack:///./src/components/SelectService.tsx","webpack:///./src/components/test/ServiceTest.tsx","webpack:///./src/components/ui/HighlightTextField.tsx"],"names":["useStyles","makeStyles","createStyles","root","minWidth","ServiceSpecificationSelect","props","label","serviceClass","setServiceClass","variant","fullWidth","error","useState","Math","random","labelId","classes","specs","serviceSpecifications","filter","spec","test","shortId","handleChange","event","parseInt","target","value","map","classIdentifier","name","SERVICE_TEST_STORAGE_KEY","ServiceTestEditor","useContext","AppContext","setError","SRV_BUTTON","useLocalStorage","source","setSource","serviceSpec","useMemo","serviceSpecificationFromClassIdentifier","json","parseSpecificationTestMarkdownToJSON","servicePath","camelName","toString","toLowerCase","handleLoadFromGithub","fetchText","ghSource","errors","Page","SelectService","JacdacContext","bus","onSelect","services","useChange","n","gridBreakpoints","useGridBreakpoints","handleSelect","service","length","id","device","Diagnostics","hostDefinition","hostDefinitionFromServiceClass","handleStartSimulator","addHost","ServiceTestRunnerSelect","ServiceTest","showStartSimulator","serviceTest","serviceTestFromServiceClass","undefined","setService","Flags","diagnostics","GithubPullRequestButton","lazy","AnnotationTooltip","withStyles","theme","arrow","color","palette","main","tooltip","backgroundColor","common","white","boxShadow","shadows","fontSize","typography","body2","Tooltip","HighlightTextField","code","onChange","language","annotations","pullRequestTitle","pullRequestPath","pullRequestDescription","DarkModeContext","darkMode","DARK_THEME","LIGHT_THEME","editorRef","useRef","useEditable","disabled","indentation","defaultProps","className","style","tokens","getTokenProps","minHeight","whiteSpace","line","i","annotation","find","a","title","message","el","borderBottom","token","empty","key"],"mappings":"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","file":"component---src-pages-tools-service-test-editor-tsx-2961d088c6dbfd439125.js","sourcesContent":["import { createStyles, makeStyles, MenuItem, TextField, Theme } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { serviceSpecifications } from \"../../jacdac-ts/src/jdom/spec\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            minWidth: \"18rem\",\n        }\n    }),\n);\n\nexport default function ServiceSpecificationSelect(props: {\n    label: string,\n    serviceClass: number;\n    setServiceClass: (serviceClass: number) => void;\n    variant?: \"outlined\" | \"filled\" | \"standard\";\n    fullWidth?: boolean;\n    error?: string;\n}) {\n    const { label, serviceClass, setServiceClass, variant, fullWidth, error } = props;\n    const [labelId] = useState('select-' + Math.random());\n    const classes = useStyles();\n    const specs = serviceSpecifications().filter(spec => !/^_/.test(spec.shortId))\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) =>\n        setServiceClass(parseInt(event.target.value));\n\n    return <TextField\n        id={labelId}\n        className={classes.root}\n        label={label}\n        error={!!error}\n        helperText={error}\n        value={serviceClass}\n        select\n        variant={variant}\n        fullWidth={fullWidth}\n        onChange={handleChange}>\n        <MenuItem key=\"none\" value=\"NaN\">No service selected</MenuItem>\n        {specs.map(spec => <MenuItem\n            key={spec.classIdentifier}\n            value={spec.classIdentifier}>{spec.name}</MenuItem>)}\n    </TextField>\n}","import React, { useContext, useMemo, useState } from \"react\"\nimport { Button, Grid } from \"@material-ui/core\"\nimport { parseSpecificationTestMarkdownToJSON } from \"../../../jacdac-ts/jacdac-spec/spectool/jdtest\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport ServiceSpecificationSelect from \"../ServiceSpecificationSelect\"\nimport { SRV_BUTTON } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ServiceTest from \"../test/ServiceTest\"\nimport { fetchText } from \"../github\"\nimport AppContext from \"../AppContext\"\n\nconst SERVICE_TEST_STORAGE_KEY = \"jacdac:servicetesteditorsource\"\n\nexport default function ServiceTestEditor() {\n    const { setError } = useContext(AppContext)\n    const [serviceClass, setServiceClass] = useState(SRV_BUTTON)\n    const [source, setSource] = useLocalStorage(SERVICE_TEST_STORAGE_KEY, \"\")\n    const serviceSpec = useMemo(\n        () => serviceSpecificationFromClassIdentifier(serviceClass),\n        [serviceClass]\n    )\n    const json = useMemo(\n        () => parseSpecificationTestMarkdownToJSON(source, serviceSpec),\n        [source, serviceSpec]\n    )\n    const servicePath =\n        json &&\n        `services/tests/${(\n            serviceSpec.camelName ||\n            serviceSpec.shortId ||\n            `0x${serviceSpec.classIdentifier.toString(16)}`\n        ).toLowerCase()}`\n    const handleLoadFromGithub = async () => {\n        try {\n            const ghSource = await fetchText(\n                \"microsoft/jacdac\",\n                \"main\",\n                `services/tests/${serviceSpec.shortId}.md`,\n                \"text/plain\"\n            )\n            if (ghSource)\n                setSource(ghSource)\n            else\n                setError(\"Test source not found\")\n        } catch (e) {\n            setError(e)\n        }\n    }\n    return (\n        <Grid spacing={2} container>\n            <Grid item xs={12}>\n                <Grid container spacing={2} direction=\"row\">\n                    <Grid item>\n                        <ServiceSpecificationSelect\n                            label={\"Select a service to test\"}\n                            serviceClass={serviceClass}\n                            setServiceClass={setServiceClass}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant=\"outlined\"\n                            disabled={!serviceSpec}\n                            onClick={handleLoadFromGithub}\n                        >\n                            Load tests from GitHub\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} xl={6}>\n                <HighlightTextField\n                    code={source}\n                    language={\"markdown\"}\n                    onChange={setSource}\n                    annotations={json?.errors}\n                    pullRequestTitle={\n                        json && `Service test: ${serviceSpec.name}`\n                    }\n                    pullRequestPath={servicePath}\n                />\n            </Grid>\n            {json && (\n                <Grid item xs={12} xl={6}>\n                    <ServiceTest showStartSimulator={true} serviceSpec={serviceSpec} serviceTest={json} />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceTestEditor from \"../../components/tools/ServiceTestEditor\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>Service Test Editor</h1>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/reference/service-tests\">\n                    service test\n                </Link>{\" \"}\n                documentation.\n            </p>\n            <ServiceTestEditor />\n        </>\n    )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      fontWeight: theme.typography.fontWeightMedium,\n      marginTop: -2\n    }\n  };\n};\nvar AlertTitle = /*#__PURE__*/React.forwardRef(function AlertTitle(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    gutterBottom: true,\n    component: \"div\",\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlertTitle'\n})(AlertTitle);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useChange from \"../jacdac/useChange\"\nimport {\n    Grid,\n    Card,\n    CardActions,\n    Button\n} from \"@material-ui/core\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport Alert from \"./ui/Alert\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectService(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, onSelect } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader device={service.device} />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                    >\n                                        Select\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}","import React, { useContext, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addHost,\n    hostDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/hosts/hosts\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\nimport SelectService from \"../SelectService\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = hostDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addHost(bus, hostDefinition.services())\n\n    if (!hostDefinition) return null\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { serviceClass, onSelect } = props\n    return (\n        <>\n            <h3>Select a device to test</h3>\n            <SelectService serviceClass={serviceClass} onSelect={onSelect} />\n        </>\n    )\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec\n    serviceTest?: jdtest.ServiceTestSpec\n    showStartSimulator?: boolean\n}) {\n    const {\n        serviceSpec,\n        showStartSimulator,\n        serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier),\n    } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip\n                    title=\"go to specification\"\n                    to={`/services/${serviceSpec.shortId}/`}\n                >\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && (\n                <Diagnostics serviceClass={serviceClass} />\n            )}\n            {!service && (\n                <ServiceTestRunnerSelect\n                    serviceClass={serviceClass}\n                    onSelect={handleSelect}\n                />\n            )}\n            {service && (\n                <ServiceTestRunner\n                    service={service}\n                    serviceTest={serviceTest}\n                />\n            )}\n        </>\n    )\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react/jsx-key */\nimport React, { useContext, useRef, lazy } from \"react\"\nimport Highlight, {\n    defaultProps,\n    Language,\n    PrismTheme,\n} from \"prism-react-renderer\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport LIGHT_THEME from \"prism-react-renderer/themes/github\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DARK_THEME from \"prism-react-renderer/themes/vsDark\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useEditable } from \"use-editable\"\nimport { Alert } from \"@material-ui/lab\"\nimport { Grid, Tooltip, withStyles } from \"@material-ui/core\"\nimport Suspense from \"../ui/Suspense\";\nconst GithubPullRequestButton = lazy(() => import('../GithubPullRequestButton'));\n\nconst AnnotationTooltip = withStyles(theme => ({\n    arrow: {\n        color: theme.palette.error.main,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.common.white,\n        boxShadow: theme.shadows[1],\n        fontSize: theme.typography.body2.fontSize,\n    },\n}))(Tooltip)\n\nexport default function HighlightTextField(props: {\n    language: string\n    code: string\n    onChange: (newValue: string) => void\n    annotations?: jdspec.Diagnostic[]\n    pullRequestTitle?: string\n    pullRequestPath?: string\n    pullRequestDescription?: string\n}) {\n    const {\n        code,\n        onChange,\n        language,\n        annotations,\n        pullRequestTitle,\n        pullRequestPath,\n        pullRequestDescription,\n    } = props\n    const { darkMode } = useContext(DarkModeContext)\n    const theme = (darkMode === \"dark\" ? DARK_THEME : LIGHT_THEME) as PrismTheme\n    const editorRef = useRef(null)\n\n    useEditable(editorRef, onChange, {\n        disabled: false,\n        indentation: 4,\n    })\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs={12}>\n                <Highlight\n                    {...defaultProps}\n                    code={code}\n                    language={language as Language}\n                    theme={theme}\n                >\n                    {({ className, style, tokens, getTokenProps }) => (\n                        <pre\n                            ref={editorRef}\n                            className={className}\n                            spellCheck={false}\n                            style={{\n                                ...style,\n                                ...{\n                                    minHeight: \"12rem\",\n                                    whiteSpace: \"pre-wrap\",\n                                },\n                            }}\n                        >\n                            {tokens.map((line, i) => {\n                                const annotation = annotations?.find(\n                                    a => a.line === i + 1\n                                )\n                                const title = annotation?.message\n                                const el = (\n                                    <span\n                                        key={i}\n                                        style={\n                                            annotation && {\n                                                borderBottom: \"dashed 1px red\",\n                                            }\n                                        }\n                                    >\n                                        {line\n                                            .filter(token => !token.empty)\n                                            .map((token, key) => (\n                                                <span\n                                                    {...getTokenProps({\n                                                        token,\n                                                        key,\n                                                    })}\n                                                />\n                                            ))}\n                                        {i < tokens.length - 1 ? \"\\n\" : null}\n                                    </span>\n                                )\n                                return title ? (\n                                    <AnnotationTooltip\n                                        title={title}\n                                        arrow\n                                        key={i}\n                                    >\n                                        {el}\n                                    </AnnotationTooltip>\n                                ) : (\n                                    el\n                                )\n                            })}\n                        </pre>\n                    )}\n                </Highlight>\n            </Grid>\n            {!!annotations?.length && (\n                <Grid item xs={12}>\n                    <Alert severity=\"error\">\n                        <ul>\n                            {annotations.map((a, i) => (\n                                <li key={i}>\n                                    line {a.line}: {a.message}\n                                </li>\n                            ))}\n                        </ul>\n                    </Alert>\n                </Grid>\n            )}\n            {pullRequestTitle && pullRequestPath && (\n                <Grid item>\n                    <Suspense>\n                        <GithubPullRequestButton\n                            title={pullRequestTitle}\n                            head={pullRequestPath}\n                            description={pullRequestDescription}\n                            files={{\n                                [pullRequestPath + \".md\"]: code,\n                            }}\n                        />\n                    </Suspense>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}