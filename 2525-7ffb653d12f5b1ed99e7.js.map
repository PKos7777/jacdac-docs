{"version":3,"file":"2525-7ffb653d12f5b1ed99e7.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dialogs/RecordDataDialog.tsx"],"sourcesContent":["import React, { useEffect, useContext, useState } from \"react\"\n\nimport {\n    Button,\n    Grid,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    TextField,\n    createStyles,\n    InputAdornment,\n} from \"@material-ui/core\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport StopIcon from \"@material-ui/icons/Stop\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DownloadIcon from \"@material-ui/icons/GetApp\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\"\nimport { Autocomplete } from \"@material-ui/lab\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport ReadingFieldGrid from \"../ReadingFieldGrid\"\nimport FieldDataSet from \"../FieldDataSet\"\nimport ClassDataSetGrid from \"../ClassDataSetGrid\"\nimport Trend from \"../Trend\"\n\nimport useChange from \"../../jacdac/useChange\"\nimport useChartPalette from \"../useChartPalette\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport ServiceManagerContext from \"../ServiceManagerContext\"\n\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport { isSensor } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JDBus from \"../../../jacdac-ts/src/jdom/bus\"\nimport { REPORT_UPDATE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockSvg, FieldVariable, WorkspaceSvg } from \"blockly\"\nimport { MB_CLASS_VAR_TYPE, MODEL_BLOCKS } from \"../model-editor/modelblockdsl\"\nimport RecordingBlockField from \"../blockly/fields/mb/RecordingBlockField\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginBottom: theme.spacing(1),\n        },\n        grow: {\n            flexGrow: 1,\n        },\n        field: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(1.5),\n        },\n        segment: {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n        },\n        row: {\n            marginBottom: theme.spacing(0.5),\n        },\n        buttons: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(2),\n        },\n        trend: {\n            width: theme.spacing(10),\n        },\n        vmiddle: {\n            verticalAlign: \"middle\",\n        },\n    })\n)\nconst LIVE_HORIZON = 24\nfunction createDataSet(\n    bus: JDBus,\n    registers: JDRegister[],\n    name: string,\n    live: boolean,\n    palette: string[]\n) {\n    const fields = arrayConcatMany(registers.map(reg => reg.fields))\n    const colors = fields.map((f, i) => palette[i % palette.length])\n    const set = new FieldDataSet(bus, name, fields, colors)\n    if (live) set.maxRows = LIVE_HORIZON + 4\n\n    return set\n}\n\nexport default function BlocklyDataRecordingDialog(props: {\n    open: boolean\n    onDone: (recording:FieldDataSet[], blockId: string) => void\n    onClose: () => void\n    recordingCount: number\n    workspace: WorkspaceSvg\n}) {\n    const { open, onDone, onClose, recordingCount, workspace } = props\n    const [dialogType, setDialogType] = useState<\n        \"chooseSensors\" | \"recordData\"\n    >(\"chooseSensors\")\n\n    \n    const classes = useStyles()\n    const chartPalette = useChartPalette()\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const readingRegisters = useChange(bus, bus =>\n        arrayConcatMany(\n            bus.devices().map(device =>\n                device\n                    .services()\n                    .filter(srv => isSensor(srv.specification))\n                    .map(srv => srv.readingRegister)\n            )\n        )\n    )\n\n    const getWorkspaceClasses = (): string[] => {\n        // get updated list of class variables\n        const classes = workspace\n            .getVariablesOfType(MB_CLASS_VAR_TYPE)\n            .map(function (classVar) {\n                return classVar.name\n            })\n        if (classes.length == 0) return [\"class1\"]\n        return classes\n    }\n\n\n    /* For choosing sensors */\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [totalSamples, setTotalSamples] = useState(0)\n    const [recordingName, setRecordingName] = useState(\n        \"recording\" + recordingCount\n    )\n    const [className, setClassName] = useState(\"class1\")\n\n    const [, setRecordingLength] = useState(0)\n\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n    }\n\n    const handleRecordingNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setRecordingName(event.target.value.trim())\n    }\n\n    const handleClassNameChange = (newClassName: string) => {\n        setClassName(newClassName)\n    }\n\n    /* For recording data*/\n    const recordingRegisters = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n    const [isRecording, setIsRecording] = useState(false)\n    const [liveRecording, setLiveRecording] = useState<FieldDataSet>(undefined)\n    const [, setLiveDataTimestamp] = useState(0)\n    const [currentRecording, ] = useState({\n        recording: [],\n        blockId: \"\"})\n\n    const [samplingIntervalDelay, setSamplingIntervalDelay] = useState(\"100\")\n    const [samplingDuration, setSamplingDuration] = useState(\"2\")\n\n    const samplingIntervalDelayi = parseInt(samplingIntervalDelay)\n    const samplingCount = Math.ceil(\n        (parseFloat(samplingDuration) * 1000) / samplingIntervalDelayi\n    )\n    const errorSamplingIntervalDelay =\n        isNaN(samplingIntervalDelayi) || !/\\d+/.test(samplingIntervalDelay)\n    const errorSamplingDuration = isNaN(samplingCount)\n    const error = errorSamplingDuration || errorSamplingIntervalDelay\n    const startEnabled = !!recordingRegisters?.length\n\n    const handleSamplingIntervalChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setSamplingIntervalDelay(event.target.value.trim())\n    }\n    const handleSamplingDurationChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setSamplingDuration(event.target.value.trim())\n    }\n    const newRecording = (registerIds: string[], live: boolean) =>\n        registerIds.length\n            ? createDataSet(\n                  bus,\n                  readingRegisters.filter(\n                      reg => registerIds.indexOf(reg.id) > -1\n                  ),\n                  `${recordingName}.${totalSamples}`,\n                  live,\n                  chartPalette\n              )\n            : undefined\n\n    const stopRecording = () => {\n        if (isRecording) {\n            // add new samples to recording\n            currentRecording.recording.push(liveRecording)\n            setTotalSamples(totalSamples + 1)\n\n            // refresh live recording\n            setLiveRecording(newRecording(registerIdsChecked, true))\n\n            // stop recording\n            setIsRecording(false)\n        }\n    }\n    const startRecording = async () => {\n        if (!isRecording && recordingRegisters.length) {\n            setLiveRecording(newRecording(registerIdsChecked, false))\n            setIsRecording(true)\n        }\n    }\n    const startStreamingRegisters = () => {\n        console.log(`start streaming`)\n        const streamers = recordingRegisters?.map(reg =>\n            reg.subscribe(REPORT_UPDATE, () => {})\n        )\n        return () => {\n            console.log(`stop streaming`)\n            streamers.map(streamer => streamer())\n        }\n    }\n    const toggleRecording = () => {\n        if (isRecording) stopRecording()\n        else startRecording()\n    }\n    const handleDeleteSample = (sample: FieldDataSet) => {\n        const i = currentRecording.recording.indexOf(sample)\n        if (i > -1) currentRecording.recording.splice(i, 1)\n    }\n    const updateLiveData = () => {\n        setLiveRecording(liveRecording)\n        setRecordingLength(liveRecording.rows.length)\n        setLiveDataTimestamp(bus.timestamp)\n    }\n    const throttleUpdate = throttle(() => updateLiveData(), 30)\n    // data collection\n    // interval add data entry\n    const addRow = (values?: number[]) => {\n        if (!liveRecording) return\n        //console.log(values)\n        liveRecording.addRow(values)\n        if (isRecording && liveRecording.length >= samplingCount) {\n            // stop recording\n            updateLiveData()\n            stopRecording()\n        } else {\n            throttleUpdate()\n        }\n    }\n    // setting interval\n    useEffect(() => {\n        if (error) return\n        console.log(`set interval to ${samplingIntervalDelayi}`)\n        recordingRegisters.forEach(reg =>\n            reg.sendSetPackedAsync(\"i32\", [samplingIntervalDelayi])\n        )\n    }, [samplingIntervalDelayi, registerIdsChecked, errorSamplingIntervalDelay])\n    // collecting\n    useEffect(() => {\n        if (error) return undefined\n        const interval = setInterval(() => addRow(), samplingIntervalDelayi)\n        const stopStreaming = startStreamingRegisters()\n\n        return () => {\n            clearInterval(interval)\n            stopStreaming()\n        }\n    }, [isRecording, dialogType, samplingIntervalDelayi, samplingCount])\n\n    /* For placing a block on the workspace */\n    const addNewRecording = () => {\n        // Create new block for this recording\n        if (className != null && className != undefined) {\n            // Get or create new class typed variable\n            // (createVariable will return an existing variable if one with a particular name already exists)\n            const classVar = workspace.createVariable(\n                className,\n                MB_CLASS_VAR_TYPE\n            )\n\n            // Create new recording block on the workspace\n            const newRecordingBlock = workspace.newBlock(\n                MODEL_BLOCKS + \"recording\"\n            ) as BlockSvg\n            currentRecording.blockId = newRecordingBlock.id\n\n            // Automatically insert the recording name into the new block\n            const recordingNameField = newRecordingBlock.getField(\n                \"RECORDING_NAME\"\n            ) as FieldVariable\n            recordingNameField.setValue(recordingName)\n\n            // Automatically insert the class name into the new block\n            const classNameField = newRecordingBlock.getField(\n                \"CLASS_NAME\"\n            ) as FieldVariable\n            classNameField.setValue(classVar.getId())\n\n            // Save recording data to block\n            const blockParamsField = newRecordingBlock.getField(\n                \"BLOCK_PARAMS\"\n            ) as RecordingBlockField\n            const recordingBlockParams = {\n                parametersVisible: null,\n                numSamples: currentRecording.recording.length,\n                timestamp: currentRecording.recording[0].startTimestamp,\n                inputTypes: currentRecording.recording[0].headers,\n            }\n            blockParamsField.updateFieldValue(recordingBlockParams)\n\n            newRecordingBlock.initSvg()\n            newRecordingBlock.render(false)\n            workspace.centerOnBlock(newRecordingBlock.id)\n        }\n    }\n\n    /* For interface controls */\n    const resetInputs = () => {\n        setClassName(\"class1\")\n        setRecordingName(\"recording\" + recordingCount)\n        setSamplingIntervalDelay(\"100\")\n        setSamplingDuration(\"2\")\n    }\n    const handleDownloadDataSet = () => {\n        const recordingCountHeader = `Number of recordings,${currentRecording.recording.length}`\n\n        const recordingData: string[] = []\n        currentRecording.recording.forEach(sample => {\n            recordingData.push(\n                \"Recording metadata,\" +\n                    sample.name +\n                    \",\" +\n                    sample.rows.length +\n                    \",\" +\n                    className\n            )\n            recordingData.push(sample.toCSV())\n        })\n        const recordData = recordingData.join(\"\\n\")\n\n        const csv: string[] = [recordingCountHeader, recordData]\n        fileStorage.saveText(`${recordingName}dataset.csv`, csv.join(\"\\n\"))\n    }\n    const handleCancel = () => {\n        // reset the user inputs\n        resetInputs()\n        // close the modal\n        onClose()\n    }\n    const handleNext = () => {\n        // begin recording live data\n        setLiveRecording(newRecording(registerIdsChecked, true))\n\n        // go to the next page\n        setDialogType(\"recordData\")\n    }\n\n    const handleDone = () => {\n        // create new recording block\n        addNewRecording()\n\n        // reset the user inputs\n        resetInputs()\n\n        // call the done function\n        const { recording, blockId } = currentRecording\n        onDone(recording, blockId)\n\n        onClose()\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            {dialogType == \"chooseSensors\" ? (\n                <>\n                    <DialogContent>\n                        <Grid container direction={\"column\"}>\n                            <Grid item>\n                                <h2>Collect new recording</h2>\n                                {/* RANDI TODO Toggle button to get data from sensors vs upload from file */}\n                                <div key=\"sensors\">\n                                    <div className={classes.row}>\n                                        <TextField\n                                            className={classes.field}\n                                            label=\"Recording name\"\n                                            value={recordingName}\n                                            variant=\"outlined\"\n                                            onChange={handleRecordingNameChange}\n                                        />\n                                        <Autocomplete\n                                            className={classes.field}\n                                            disabled={isRecording}\n                                            options={getWorkspaceClasses()}\n                                            style={{\n                                                width: 250,\n                                                display: \"inline-flex\",\n                                            }}\n                                            renderInput={params => (\n                                                <TextField\n                                                    {...params}\n                                                    label=\"Class label\"\n                                                    variant=\"outlined\"\n                                                />\n                                            )}\n                                            value={className}\n                                            onInputChange={(event, newValue) =>\n                                                handleClassNameChange(newValue)\n                                            }\n                                        />\n                                    </div>\n                                    <h3>Collect data from</h3>\n                                    {!readingRegisters.length && (\n                                        <span>Waiting for sensors...</span>\n                                    )}\n                                    {!!readingRegisters.length && (\n                                        <ReadingFieldGrid\n                                            readingRegisters={readingRegisters}\n                                            registerIdsChecked={\n                                                registerIdsChecked\n                                            }\n                                            recording={isRecording}\n                                            liveDataSet={liveRecording}\n                                            handleRegisterCheck={\n                                                handleRegisterCheck\n                                            }\n                                        />\n                                    )}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" onClick={handleCancel}>\n                            Cancel\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            endIcon={<NavigateNextIcon />}\n                            disabled={!registerIdsChecked.length}\n                            onClick={handleNext}\n                        >\n                            Next\n                        </Button>\n                    </DialogActions>\n                </>\n            ) : (\n                // recordData\n                <>\n                    <DialogContent>\n                        <Grid container direction={\"column\"}>\n                            <Grid item>\n                                <h3>Edit recording: {recordingName}</h3>\n                                <div key=\"recordedData\">\n                                    <div key=\"recordings\">\n                                        <h4>\n                                            Recorded samples\n                                            <IconButtonWithTooltip\n                                                onClick={handleDownloadDataSet}\n                                                title=\"Download all recording data\"\n                                                disabled={\n                                                    currentRecording.recording.length == 0\n                                                }\n                                            >\n                                                <DownloadIcon />\n                                            </IconButtonWithTooltip>\n                                        </h4>\n                                        {currentRecording.recording.length ? (\n                                            <ClassDataSetGrid\n                                                key={\"samples-\" + recordingName}\n                                                label={className}\n                                                tables={currentRecording.recording}\n                                                handleDeleteTable={\n                                                    handleDeleteSample\n                                                }\n                                            />\n                                        ) : (\n                                            <span>None</span>\n                                        )}\n                                    </div>\n                                </div>\n                            </Grid>\n                            <Grid item>\n                                <br />\n                            </Grid>\n                            <Grid item>\n                                <div key=\"record\">\n                                    <div className={classes.row}>\n                                        <h4>Add more samples</h4>\n                                        <TextField\n                                            className={classes.field}\n                                            error={errorSamplingDuration}\n                                            disabled={isRecording}\n                                            label=\"Sampling duration\"\n                                            value={samplingDuration}\n                                            variant=\"outlined\"\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        s\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={\n                                                handleSamplingDurationChange\n                                            }\n                                        />\n                                        <TextField\n                                            className={classes.field}\n                                            error={errorSamplingIntervalDelay}\n                                            disabled={isRecording}\n                                            label=\"Sampling interval\"\n                                            value={samplingIntervalDelay}\n                                            variant=\"outlined\"\n                                            InputProps={{\n                                                startAdornment: (\n                                                    <InputAdornment position=\"start\">\n                                                        ms\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                            onChange={\n                                                handleSamplingIntervalChange\n                                            }\n                                        />\n                                    </div>\n                                    <div className={classes.buttons}>\n                                        <Button\n                                            size=\"large\"\n                                            variant=\"contained\"\n                                            color={\n                                                isRecording\n                                                    ? \"secondary\"\n                                                    : \"primary\"\n                                            }\n                                            aria-label=\"start/stop recording\"\n                                            title=\"start/stop recording\"\n                                            onClick={toggleRecording}\n                                            startIcon={\n                                                isRecording ? (\n                                                    <StopIcon />\n                                                ) : (\n                                                    <PlayArrowIcon />\n                                                )\n                                            }\n                                            disabled={!startEnabled}\n                                        >\n                                            {isRecording ? \"Stop\" : \"Start\"}\n                                        </Button>\n                                    </div>\n                                </div>\n                                <div key=\"liveData\">\n                                    {liveRecording && (\n                                        <Trend\n                                            key=\"trends\"\n                                            height={12}\n                                            dataSet={liveRecording}\n                                            horizon={LIVE_HORIZON}\n                                            dot={true}\n                                            gradient={true}\n                                        />\n                                    )}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" onClick={handleCancel}>\n                            Cancel\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            endIcon={<NavigateNextIcon />}\n                            disabled={!currentRecording.recording.length}\n                            onClick={handleDone}\n                        >\n                            Done\n                        </Button>\n                    </DialogActions>\n                </>\n            )}\n        </Dialog>\n    )\n}\n"],"names":["React","useEffect","useContext","useState","Button","Grid","Dialog","DialogActions","DialogContent","TextField","createStyles","InputAdornment","IconButtonWithTooltip","PlayArrowIcon","StopIcon","DownloadIcon","NavigateNextIcon","Autocomplete","makeStyles","ReadingFieldGrid","FieldDataSet","ClassDataSetGrid","Trend","useChange","useChartPalette","JacdacContext","ServiceManagerContext","arrayConcatMany","isSensor","REPORT_UPDATE","throttle","MB_CLASS_VAR_TYPE","MODEL_BLOCKS","useStyles","theme","root","marginBottom","spacing","grow","flexGrow","field","marginRight","segment","marginTop","row","buttons","trend","width","vmiddle","verticalAlign","LIVE_HORIZON","createDataSet","bus","registers","name","live","palette","fields","map","reg","colors","f","i","length","set","maxRows","BlocklyDataRecordingDialog","props","open","onDone","onClose","recordingCount","workspace","dialogType","setDialogType","classes","chartPalette","fileStorage","readingRegisters","devices","device","services","filter","srv","specification","readingRegister","getWorkspaceClasses","getVariablesOfType","classVar","registerIdsChecked","setRegisterIdsChecked","totalSamples","setTotalSamples","recordingName","setRecordingName","className","setClassName","setRecordingLength","handleRegisterCheck","indexOf","id","splice","push","sort","handleRecordingNameChange","event","target","value","trim","handleClassNameChange","newClassName","recordingRegisters","isRecording","setIsRecording","liveRecording","setLiveRecording","undefined","setLiveDataTimestamp","currentRecording","recording","blockId","samplingIntervalDelay","setSamplingIntervalDelay","samplingDuration","setSamplingDuration","samplingIntervalDelayi","parseInt","samplingCount","Math","ceil","parseFloat","errorSamplingIntervalDelay","isNaN","test","errorSamplingDuration","error","startEnabled","handleSamplingIntervalChange","handleSamplingDurationChange","newRecording","registerIds","stopRecording","startRecording","startStreamingRegisters","console","log","streamers","subscribe","streamer","toggleRecording","handleDeleteSample","sample","updateLiveData","rows","timestamp","throttleUpdate","addRow","values","forEach","sendSetPackedAsync","interval","setInterval","stopStreaming","clearInterval","addNewRecording","createVariable","newRecordingBlock","newBlock","recordingNameField","getField","setValue","classNameField","getId","blockParamsField","recordingBlockParams","parametersVisible","numSamples","startTimestamp","inputTypes","headers","updateFieldValue","initSvg","render","centerOnBlock","resetInputs","handleDownloadDataSet","recordingCountHeader","recordingData","toCSV","recordData","join","csv","saveText","handleCancel","handleNext","handleDone","display","params","newValue","startAdornment"],"sourceRoot":""}