{"version":3,"sources":["webpack://jacdac-docs/./src/components/tools/JDomTreeView.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","margins","marginLeft","spacing","marginRight","JDomTreeView","props","defaultExpanded","defaultSelected","other","classes","useState","expanded","setExpanded","selected","setSelected","devices","useDevices","ignoreSelf","handleToggle","event","nodeIds","handleSelect","clsx","width","map","device","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;CAEA;;CAEA;;CAEA;;CAEA;;CAEA;AACA;;AACA;AACA;AAEA,IAAMA,SAAS,GAAGC,0EAAU,CAAC,UAAAC,KAAK;AAAA,SAC9BC,0EAAY,CAAC;AACTC,QAAI,EAAE;AACFC,cAAQ,EAAE;AADR,KADG;AAITC,WAAO,EAAE;AACLC,gBAAU,EAAEL,KAAK,CAACM,OAAN,CAAc,GAAd,CADP;AAELC,iBAAW,EAAEP,KAAK,CAACM,OAAN,CAAc,GAAd;AAFR;AAJA,GAAD,CADkB;AAAA,CAAN,CAA5B;AAYe,SAASE,YAAT,CAAsBC,KAAtB,EAAgD;AAAA,MACnDC,eADmD,GACJD,KADI,CACnDC,eADmD;AAAA,MAClCC,eADkC,GACJF,KADI,CAClCE,eADkC;AAAA,MACdC,KADc,6GACJH,KADI;;AAE3D,MAAMI,OAAO,GAAGf,SAAS,EAAzB;;AAF2D,kBAG3BgB,+CAAQ,CAAWJ,eAAe,IAAI,EAA9B,CAHmB;AAAA,MAGpDK,QAHoD;AAAA,MAG1CC,WAH0C;;AAAA,mBAI3BF,+CAAQ,CAAWH,eAAe,IAAI,EAA9B,CAJmB;AAAA,MAIpDM,QAJoD;AAAA,MAI1CC,WAJ0C;;AAK3D,MAAMC,OAAO,GAAGC,mEAAU,CAAC;AAAEC,cAAU,EAAE;AAAd,GAAD,CAA1B;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CACjBC,KADiB,EAEjBC,OAFiB,EAGhB;AACDR,eAAW,CAACQ,OAAD,CAAX;AACH,GALD;;AAOA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CACjBF,KADiB,EAEjBC,OAFiB,EAGhB;AACDN,eAAW,CAACM,OAAD,CAAX;AACH,GALD;;AAOA,sBACI,iDAAC,uEAAD;AACI,aAAS,EAAEE,sDAAI,CAACb,OAAO,CAACX,IAAT,EAAeW,OAAO,CAACT,OAAvB,CADnB;AAEI,uBAAmB,eAAE,iDAAC,8EAAD,OAFzB;AAGI,qBAAiB,eAAE,iDAAC,2EAAD,OAHvB;AAII,kBAAc,eAAE;AAAK,WAAK,EAAE;AAAEuB,aAAK,EAAE;AAAT;AAAZ,MAJpB;AAKI,YAAQ,EAAEZ,QALd;AAMI,YAAQ,EAAEE,QANd;AAOI,gBAAY,EAAEK,YAPlB;AAQI,gBAAY,EAAEG;AARlB,KAUKN,OAVL,aAUKA,OAVL,uBAUKA,OAAO,CAAES,GAAT,CAAa,UAAAC,MAAM;AAAA,wBAChB,iDAAC,wEAAD;AACI,SAAG,EAAEA,MAAM,CAACC,EADhB;AAEI,YAAM,EAAED,MAFZ;AAGI,cAAQ,EAAEd,QAHd;AAII,cAAQ,EAAEE;AAJd,OAKQL,KALR,EADgB;AAAA,GAAnB,CAVL,CADJ;AAsBH,C","file":"188-e6d5842187813d3dbf05.js","sourcesContent":["import React, { useState } from \"react\"\nimport clsx from \"clsx\"\n// tslint:disable-next-line: no-submodule-imports\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\"\n// tslint:disable-next-line: no-submodule-imports\nimport TreeView from \"@material-ui/lab/TreeView\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport useDevices from \"../hooks/useDevices\"\nimport { DeviceTreeItem, JDomTreeViewProps } from \"./JDomTreeViewItems\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        margins: {\n            marginLeft: theme.spacing(0.5),\n            marginRight: theme.spacing(0.5),\n        },\n    })\n)\n\nexport default function JDomTreeView(props: JDomTreeViewProps) {\n    const { defaultExpanded, defaultSelected, ...other } = props\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState<string[]>(defaultExpanded || [])\n    const [selected, setSelected] = useState<string[]>(defaultSelected || [])\n    const devices = useDevices({ ignoreSelf: true })\n\n    const handleToggle = (\n        event: React.ChangeEvent<unknown>,\n        nodeIds: string[]\n    ) => {\n        setExpanded(nodeIds)\n    }\n\n    const handleSelect = (\n        event: React.ChangeEvent<unknown>,\n        nodeIds: string[]\n    ) => {\n        setSelected(nodeIds)\n    }\n\n    return (\n        <TreeView\n            className={clsx(classes.root, classes.margins)}\n            defaultCollapseIcon={<ArrowDropDownIcon />}\n            defaultExpandIcon={<ArrowRightIcon />}\n            defaultEndIcon={<div style={{ width: 12 }} />}\n            expanded={expanded}\n            selected={selected}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n        >\n            {devices?.map(device => (\n                <DeviceTreeItem\n                    key={device.id}\n                    device={device}\n                    expanded={expanded}\n                    selected={selected}\n                    {...other}\n                />\n            ))}\n        </TreeView>\n    )\n}\n"],"sourceRoot":""}