{"version":3,"sources":["webpack:///../src/components/lazy-hydrate.tsx"],"names":["IS_DEV","process","NODE_ENV","lazyHydrate","root","hydrated","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","current","hasSSRHtml","querySelector","hasNativeLazyLoadSupport","cacheKey","JSON","stringify","hasLoaded","hasImageLoaded","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","render","hydrate"],"mappings":";;;;;;;;;;;;;;;;AAqBA,GAAMA,mBAASC,YAAf,CAA2BC,QAEXC,EAFWD,CAEXC,CAFWD,CAiBzBE,CAjByBF,CAkBzBG,CAlByBH,CAkBzBG,IAdEC,UAcFD,CAbEE,WAaFF,CAZEG,aAYFH,CAXEI,YAWFJ,CAVEK,kBAUFL,CATEM,OASFN,CAREO,gBAQFP,CAREO,IACAC,QAOFR,CAPEQ,aAAW,EAAXA,CAAW,CAObR,CANES,kBAMFT,CALEU,mBAKFV,CALEU,IACAC,SAIFX,CAJEW,sBAIFX,CAHKY,4NAGLZ,CAGEa,EAMEZ,EANFY,KAHFb,CAIEc,EAKEb,EALFa,MAJFd,CAKEe,EAIEd,EAJFc,MALFf,CAMEgB,EAGEf,EAHFe,MANFhB,CAOEiB,EAEEhB,EAFFgB,WAPFjB,CAQmBkB,EACfjB,EADFS,eARFV,CAWA,IAAKD,EAAKoB,OAAV,CACE,YAGF,GAAMC,GAAarB,EAAKoB,OAALpB,CAAasB,aAAbtB,CAAasB,yBAAbtB,CAAnB,CAEA,GAAIuB,gFAA8BF,CAA9BE,EAA8BF,CAAepB,EAASmB,OAA1D,CACE,YAGF,GAAMI,GAAWC,KAAKC,SAALD,CAAeR,CAAfQ,CAAjB,CACME,EAAYC,6EAAeJ,CAAfI,CADlB,CAGAnB,gFACEG,WADFH,CAEEC,gBAFFD,CAGEE,iBAHFF,EAIKA,CAJLA,EAOA,GAAMoB,gBACJC,2DAACC,oEAADD,CAACC,CAAcf,OAAQA,CAAtBe,CAA8BjB,MAAOA,CAArCiB,CAA4ChB,OAAQA,CAApDgB,CAADD,CAAqDf,CACjDY,CADiDZ,eAEjDe,2DAACE,oEAADF,CAACE,iBACKC,6EACFf,CADEe,CAEF5B,CAFE4B,CAGFjB,CAHEiB,CAIFnB,CAJEmB,CAKFlB,CALEkB,CAMFd,CANEc,CADLD,CAADF,CAFJA,cAaEA,2DAACI,oEAADJ,CAACI,iBACMrB,CADNqB,CACMrB,CACLC,MAAOA,CADFD,CAELE,OAAQA,CAFHF,CAGLsB,UAAW3B,CAHNK,CADNqB,CAKKE,6EACFhC,CADEgC,CAEFT,GAAatB,CAFX+B,CAGFnB,CAHEmB,CAIFjC,CAJEiC,CAKF9B,CALE8B,CAMFZ,CANEY,CAOF7B,CAPE6B,CAQF3B,CARE2B,CALLF,CAADJ,CAbFA,CADF,CAsCA,OAJiB7B,EAASmB,OAATnB,EAAoBL,CAApBK,CAA6BoC,gDAA7BpC,CAAsCqC,iDAIvD,EAHST,CAGT,CAHoB7B,EAAKoB,OAGzB,EAFAnB,EAASmB,OAATnB,CAASmB,CAAU,CAEnB,CAFmB,WAGbpB,EAAKoB,OAALpB,EACFqC,yDAAQ,IAARA,CAA0CrC,EAAKoB,OAA/CiB,CADErC,CAC6CoB,CAFnD,CAEmDA,C","file":"27-5da57730834699f611ae.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport {\n  getMainProps,\n  getPlaceholderProps,\n  hasNativeLazyLoadSupport,\n  hasImageLoaded,\n} from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nconst IS_DEV = process.env.NODE_ENV === `development`\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  if (!root.current) {\n    return null\n  }\n\n  const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n  // On first server hydration do nothing\n  if (hasNativeLazyLoadSupport() && hasSSRHtml && !hydrated.current) {\n    return null\n  }\n\n  const cacheKey = JSON.stringify(images)\n  const hasLoaded = hasImageLoaded(cacheKey)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      {!hasLoaded && (\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            isLoaded,\n            layout,\n            width,\n            height,\n            wrapperBackgroundColor\n          )}\n        />\n      )}\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          hasLoaded || isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n  const doRender = hydrated.current || IS_DEV ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}