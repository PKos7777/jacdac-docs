{"version":3,"file":"141-a04b60d8af33530574f7.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWifi.tsx"],"sourcesContent":["import React, { ChangeEvent, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Switch,\n    TextField,\n    Typography,\n} from \"@material-ui/core\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { useId } from \"react-use-id-hook\"\nimport SettingsIcon from \"@material-ui/icons/Settings\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterBoolValue } from \"../../jacdac/useRegisterValue\"\nimport {\n    WifiAPFlags,\n    WifiCmd,\n    WifiReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useMounted from \"../hooks/useMounted\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\ninterface ScanResult {\n    flags: WifiAPFlags\n    rssi: number\n    channel: number\n    bssid: Uint8Array\n    ssid: string\n}\n\nfunction ConnectAp(props: { service: JDService; info: ScanResult }) {\n    const { service, info } = props\n    const { ssid, flags, rssi } = info\n    const [password, setPassword] = useState(\"\")\n    const [selected, setSelected] = useState(false)\n    const selectId = useId()\n    const passwordId = useId()\n    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n    const handleConnect = async () => {\n        await service.sendCmdPackedAsync<[string, string]>(\n            WifiCmd.Connect,\n            [ssid, password || \"\"],\n            true\n        )\n    }\n    const toggleSelected = () => setSelected(!selected)\n    const hasPassword = !!(flags & WifiAPFlags.HasPassword)\n    const connectError =\n        !password && !hasPassword ? \"password required\" : undefined\n\n    return (\n        <ListItem id={selectId} button onClick={toggleSelected}>\n            <ListItemText primary={ssid} secondary={`rssi: ${rssi}`} />\n            {selected && (\n                <>\n                    <TextField\n                        id={passwordId}\n                        value={password}\n                        label=\"Password\"\n                        fullWidth={true}\n                        type=\"password\"\n                        required={!hasPassword}\n                        helperText={connectError}\n                        onChange={handlePasswordChange}\n                    />\n                    <CmdButton\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!!connectError}\n                        onClick={handleConnect}\n                    >\n                        Connect\n                    </CmdButton>\n                </>\n            )}\n        </ListItem>\n    )\n}\n\nfunction ConnectDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    service: JDService\n}) {\n    const { open, setOpen, service } = props\n    const [aps, setAps] = useState<ScanResult[]>([])\n    const mounted = useMounted()\n\n    const handleClose = () => setOpen(false)\n    const startScan = async () => {\n        const res = await service.receiveWithInPipe<\n            [WifiAPFlags, number, number, Uint8Array, string][]\n        >(WifiCmd.Scan, \"u32 x[4] i8 u8 b[6] s[33]\")\n        if (!mounted()) return\n\n        const newAps: ScanResult[] = arrayConcatMany(res)\n            .map(([flags, rssi, channel, bssid, ssid]) => ({\n                flags,\n                rssi,\n                channel,\n                bssid,\n                ssid,\n            }))\n            .sort((l, r) => l.rssi - r.rssi)\n        setAps(newAps || [])\n    }\n\n    return (\n        <Dialog\n            open={open}\n            fullWidth={true}\n            maxWidth={\"lg\"}\n            onClose={handleClose}\n        >\n            <DialogContent>\n                <DialogTitle>\n                    Connect to Wifi\n                    <CmdButton onClick={startScan} title=\"scan\" autoRun={true}>\n                        <RefreshIcon />\n                    </CmdButton>\n                </DialogTitle>\n                <List>\n                    {aps.map(ap => (\n                        <ConnectAp key={ap.ssid} service={service} info={ap} />\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default function DashboardWifi(props: DashboardServiceProps) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n    const connectId = useId()\n\n    const color = \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const connectedRegister = service.register(WifiReg.Connected)\n    const connected = useRegisterBoolValue(connectedRegister, props)\n    const handleConnectionClick = () => setOpen(true)\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                style={{ color: textPrimary, minWidth: \"16rem\" }}\n            >\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        Wifi\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Switch checked={connected} aria-labelledby={connectId} />\n                    <label className=\".no-pointer-events\" id={connectId}>\n                        {connected ? \"connected\" : \"...\"}\n                    </label>\n                    <IconButtonWithTooltip\n                        title=\"Connect to wifi\"\n                        onClick={handleConnectionClick}\n                    >\n                        <SettingsIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n            <ConnectDialog open={open} setOpen={setOpen} service={service} />\n        </>\n    )\n}\n"],"names":["React","useState","Dialog","DialogContent","DialogTitle","Grid","List","ListItem","ListItemText","Switch","TextField","Typography","useWidgetTheme","useId","SettingsIcon","IconButtonWithTooltip","CmdButton","useRegisterBoolValue","WifiAPFlags","WifiCmd","WifiReg","useMounted","arrayConcatMany","RefreshIcon","ConnectAp","props","service","info","ssid","flags","rssi","password","setPassword","selected","setSelected","selectId","passwordId","handlePasswordChange","event","target","value","handleConnect","sendCmdPackedAsync","Connect","toggleSelected","hasPassword","HasPassword","connectError","undefined","ConnectDialog","open","setOpen","aps","setAps","mounted","handleClose","startScan","res","receiveWithInPipe","Scan","newAps","map","channel","bssid","sort","l","r","ap","DashboardWifi","connectId","color","textPrimary","connectedRegister","register","Connected","connected","handleConnectionClick","minWidth"],"sourceRoot":""}