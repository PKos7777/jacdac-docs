{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/HourglassEmpty.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayCircleFilled.js","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtestfuns.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack://jacdac-docs/./jacdac-ts/src/test/testrunner.ts","webpack://jacdac-docs/./src/components/test/ServiceTestRunner.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useServiceClient.ts"],"names":["getTestCommandFunctions","testFunctions","filter","f","context","getTestExpressionFunctions","id","args","prompt","undefined","refresh_env","registers","k","register","retry","val","refresh","unpackedValue","writeReg","reg","fmt","ev","sendSetPackedAsync","sendCommand","service","pkt","values","sendCmdAsync","identifier","jdpack","packFormat","VMServiceEnvironment","_registers","_events","registerRegister","regName","handler","specification","packets","find","isRegister","name","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","command","commandName","p","isCommand","writeRegister","jdreg","lookup","e","root","type","object","fld","property","field","fields","value","refreshEnvironment","JDServiceClient","VMEnvironment","notifyOnChange","_currentEvent","_envs","_locals","serviceChanged","role","added","unmount","serviceEnv","getService","getRootName","Object","forEach","s","roleName","me","local","writeLocal","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","JDExprEvaluator","env","callEval","exprStack","tos","length","pop","eval","visitExpression","ret","push","top","le","lit","JDTestStatus","JDTestCommandStatus","commandStatusToTestStatus","status","Active","Passed","Failed","NotReady","RequiresUserInput","cmdToTestFunction","cmd","call","t","JDCommandEvaluator","testRunner","_prompt","_progress","_status","_startExpressions","_rangeComplete","_eventsComplete","start","ee","getStartVal","r","v","goal","error","testFun","startExprs","exprVisitor","ce","eventList","child","findIndex","exprEval","createPrompt","replaceId","a","i","replaceVal","aStart","roundWithPrecision","toString","slice","replace","setEvent","checkExpression","expr","getStart","evaluate","Math","abs","pretify","regSaved","regValue","amtSaved","beginSaved","endSaved","shift","serviceTestRunner","JDTestCommandRunner","_output","message","progress","_commandEvaluator","reset","output","envChange","isActive","newOutput","finish","cancel","finishCommand","emit","JDTestRunner","testSpec","commands","testCommands","c","_commandIndex","commandIndex","next","newStatus","currentCommand","eventChange","description","index","JDServiceTestRunner","_testIndex","_env","tests","events","substr","indexOf","currentTest","stats","total","success","failed","indeterminate","test","testIndex","ct","TestStatusIcon","props","useChange","TestListItem","onSelectTest","selected","handleSelectTest","TestList","CommandStatusIcon","CommandListItem","handleAnswer","ActiveTest","handleRestart","handleNext","useEffect","ServiceTestRunner","serviceTest","serviceTestFromServiceClass","serviceClass","factory","useCallback","useServiceClient","device","useGridBreakpoints","itemCount","useContext","AppContext","drawerType","xs","sm","md","lg","xl","DrawerType","deps","useState","client","setClient"],"mappings":"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","file":"859a83de993caea7524bf57c2975f3be6812c8c3-de14ea4a15b51f76aa83.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n}), 'HourglassEmpty');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"\n}), 'PlayCircleFilled');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdtest.d.ts\" />\n\nexport type JDTestFunctions =\n    | \"changes\"\n    | \"ask\"\n    | \"check\"\n    | \"increases\"\n    | \"decreases\"\n    | \"increasesBy\"\n    | \"decreasesBy\"\n    | \"stepsUpTo\"\n    | \"stepsDownTo\"\n    | \"events\"\n    | \"awaitEvent\"\n    | \"nextEvent\"\n    | \"assign\"\n    | \"closeTo\"\n\nexport function getTestCommandFunctions() {\n    return testFunctions.filter(f => f.context === \"command\" || f.context === \"either\")\n}\n\nexport function getTestExpressionFunctions() {\n    return testFunctions.filter(f => f.context === \"expression\" || f.context === \"either\")\n}\n\nconst testFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"changes\",\n        args: [\"register\"],\n        prompt: `check that {1} changes`,\n        context: \"command\",\n    },\n    {\n        id: \"ask\",\n        args: [],\n        prompt: undefined,\n        context: \"command\",\n    },\n    {\n        id: \"events\",\n        args: [\"events\"],\n        prompt: `check that events {1} are observed`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true] ],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"nextEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `next event must be {1}, then check {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"assign\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"check\",\n        args: [\"boolean\"],\n        prompt: `check that {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"increases\",\n        args: [\"register\"],\n        prompt: `check that {1} increases`,\n        context: \"command\",\n    },\n    {\n        id: \"decreases\",\n        args: [\"register\"],\n        prompt: `check that {1} decreases`,\n        context: \"command\",\n    },\n    {\n        id: \"increasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that  {1} (initially {1:val}) increases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"decreasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that {1} (initially {1:val}) decreases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsUpTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step up (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsDownTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step down (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"start\",\n        args: [\"any\"],\n        prompt: undefined,\n        context: \"expression\",\n    },\n    {\n        id: \"closeTo\",\n        args: [\"number\", \"number\", \"number\"],\n        prompt: `evaluate {1} until it is close to {2:val}, as given by error {3:val}`,\n        context: \"either\",\n    },\n]\n","import { isEvent, isRegister, isCommand } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\n\nexport async function refresh_env(registers: SMap<JDRegister>) {\n    for (const k in registers) {\n        const register = registers[k]\n        let retry = 0\n        let val: any = undefined\n        do {\n            await register.refresh()\n            val = register.unpackedValue?.[0]\n        } while (val === undefined && retry++ < 2)\n    }\n}\n\n// TODO: you want [ev] to be PackedValues and handle the arrays yourself.\nasync function writeReg(reg: JDRegister, fmt: string, ev: any) {\n    await reg.sendSetPackedAsync(fmt, [ev], true)\n}\n\nasync function sendCommand(\n    service: JDService,\n    pkt: jdspec.PacketInfo,\n    values: PackedValues\n) {\n    // console.log(pkt, values)\n    await service.sendCmdAsync(\n        pkt.identifier,\n        jdpack(pkt.packFormat, values),\n        true\n    )\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public sendCommand(command: jsep.Identifier, values: PackedValues) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) sendCommand(this.service, pkt, values)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public writeRegister(regName: string, ev: any) {\n        const jdreg = this._registers[regName]\n        if (jdreg) {\n            writeReg(jdreg, jdreg.specification?.packFormat, ev)\n            return true\n        }\n        return false\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | jsep.Identifier | string): any {\n        let root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        let fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public refreshEnvironment() {\n        refresh_env(this._registers)\n    }\n}\n\nexport class VMEnvironment extends JDEventSource {\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _locals: SMap<string> = {}\n\n    constructor(private readonly notifyOnChange: () => void) {\n        super()\n    }\n\n    public serviceChanged(role: string, service: JDService, added: boolean) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (added) {\n            this._envs[role] = new VMServiceEnvironment(service)\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerRegister(reg, this.notifyOnChange)\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.notifyOnChange()\n            })\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        return this._envs[root]\n    }\n\n    public refreshEnvironment() {\n        Object.values(this._envs).forEach(s => s?.refreshEnvironment())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public sendCommand(e: jsep.MemberExpression, values: PackedValues) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            serviceEnv.sendCommand(e.property as jsep.Identifier, values)\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            let me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._locals[local]\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return undefined\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.lookup(reg)\n        }\n        return undefined\n    }\n\n    public writeRegister(e: jsep.MemberExpression | string, ev: any) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.writeRegister(reg, ev)\n        }\n        return false\n    }\n\n    public writeLocal(e: jsep.MemberExpression | string, ev: any) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            this._locals[local] = ev\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return false\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        Object.values(this._envs).forEach(vs => vs.unmount())\n    }\n}\n","/*\nThe JD-VM runs a program, which is a set of handlers. Each handler is of the form\n•\twait on event/condition, followed by a\n•\tsequence of guarded commands – the sequence is executed atomically (though may suspend if it contains a wait)\nAfter a handler finishes executing, it restarts (there is an implicit event loop around all the handlers, as usual). \n \nWe will have a small key-value store to keep program state (perhaps we will have the ability to store lists of values as well as basic values) across the handler executions.\n \nCommands can talk to JD services (probably via roles), as well as read/write program state, and wait on events/expressions. Any command can be guarded by an expression, for conditional execution.\n \nExpressions can be against service registers (as in the test case) and program state.\n \n*/\n\nimport { exception } from \"console\"\n\nexport type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: JDExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class JDExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public eval(e: jsep.Expression) {\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    public visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    let ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                this.visitExpression(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = this.env(e as jsep.MemberExpression)\n                if (val === undefined)\n                    throw \"undefined-register\"\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = this.env(id.name)\n                if (val === undefined)\n                    throw \"undefined-register\"\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import {\n    getTestCommandFunctions,\n    JDTestFunctions,\n} from \"../../jacdac-spec/spectool/jdtestfuns\"\nimport { exprVisitor } from \"../../jacdac-spec/spectool/jdutils\"\n\nimport { CHANGE } from \"../jdom/constants\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { JDService } from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { roundWithPrecision } from \"../jdom/utils\"\nimport { unparse, JDExprEvaluator, CallEvaluator, StartMap } from \"../vm/expr\"\nimport { VMServiceEnvironment } from \"../vm/environment\"\n\nexport enum JDTestStatus {\n    NotReady,\n    Active,\n    Passed,\n    Failed,\n}\n\nexport enum JDTestCommandStatus {\n    NotReady,\n    Active,\n    RequiresUserInput,\n    Passed,\n    Failed\n}\n\nfunction commandStatusToTestStatus(status: JDTestCommandStatus) {\n    switch (status) {\n        case JDTestCommandStatus.Active:\n            return JDTestStatus.Active\n        case JDTestCommandStatus.Passed:\n            return JDTestStatus.Passed\n        case JDTestCommandStatus.Failed:\n            return JDTestStatus.Failed\n        case JDTestCommandStatus.NotReady:\n            return JDTestStatus.NotReady\n        case JDTestCommandStatus.RequiresUserInput:\n            return JDTestStatus.Active\n    }\n}\n\nfunction cmdToTestFunction(cmd: jdtest.TestCommandSpec) {\n    const id = (<jsep.Identifier>cmd.call.callee).name\n    return getTestCommandFunctions().find(t => t.id == id)\n}\n\nclass JDCommandEvaluator {\n    private _prompt = \"\"\n    private _progress = \"\"\n    private _status = JDTestCommandStatus.Active\n    private _startExpressions: StartMap = []\n    private _rangeComplete: number = undefined\n    private _eventsComplete: string[] = undefined\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {}\n\n    public get prompt() {\n        return this._prompt\n    }\n    public get status() {\n        return this._status\n    }\n    public get progress() {\n        return this._progress\n    }\n\n    private get env() {\n        return (e: jsep.MemberExpression | string) => {\n            return this.testRunner.serviceTestRunner.lookup(e)\n        }\n    }\n\n    private callEval(start: StartMap) : CallEvaluator {\n        return (caller: jsep.CallExpression, ee: JDExprEvaluator) => { \n            function getStartVal(e: jsep.Expression) {\n                return start.find(r => r.e === e).v\n            }\n            const callee = <jsep.Identifier>caller.callee\n            switch (callee.name) {\n                case \"start\": \n                    return getStartVal(caller.arguments[0]);\n                case \"closeTo\": {\n                    const args = caller.arguments\n                    const goal = getStartVal(args[1])\n                    const error = getStartVal(args[2])\n                    ee.visitExpression(args[0])\n                    const ev = ee.pop()\n                    return  ev >= goal - error && ev <= goal + error\n                }\n                default: // ERROR\n            }\n            return null;\n        }\n    }\n\n    // TODO: define an interface between test runner and command evaluator\n    // TODO: so this all can be done modularly\n    public start() {\n        this._startExpressions = []\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        const startExprs: jsep.Expression[] = []\n        switch (testFun.id as JDTestFunctions) {\n            case \"check\":\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                exprVisitor(null, args, (p, ce: jsep.CallExpression) => {\n                    if (ce.type !== \"CallExpression\") return\n                    if ((<jsep.Identifier>ce.callee).name === \"start\")\n                        startExprs.push(ce.arguments[0])\n                    else if ((<jsep.Identifier>ce.callee).name === \"closeTo\") {\n                        startExprs.push(ce.arguments[1])\n                        startExprs.push(ce.arguments[2])\n                    }\n                })\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                startExprs.push(args[0])\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\":\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                startExprs.push(args[0])\n                startExprs.push(args[1])\n                break\n            }\n            case \"closeTo\": {\n                startExprs.push(args[1])\n                startExprs.push(args[2])\n                break\n            }\n            case \"assign\": {\n                startExprs.push(args[1])\n                break\n            }\n            case \"events\": {\n                const eventList = this.command.call\n                    .arguments[0] as jsep.ArrayExpression\n                this._eventsComplete = (eventList.elements as jsep.Identifier[]).map(\n                    id => id.name\n                )\n                break\n            }\n        }\n        // evaluate the start expressions and store the results\n        startExprs.forEach(child => {\n            if (this._startExpressions.findIndex(r => r.e === child) < 0) {\n                const exprEval = new JDExprEvaluator(this.env, this.callEval([]))\n                this._startExpressions.push({\n                    e: child,\n                    v: exprEval.eval(child),\n                })\n            }\n        })\n        this.createPrompt()\n    }\n\n    private createPrompt() {\n        const testFun = cmdToTestFunction(this.command)\n        const replaceId = this.command.call.arguments.map((a, i) => {\n            return [`{${i + 1}}`, unparse(a)]\n        })\n        const replaceVal = this.command.call.arguments.map((a, i) => {\n            const aStart = this._startExpressions.find(r => r.e === a)\n            return [\n                `{${i + 1}:val}`,\n                aStart && aStart.v\n                    ? roundWithPrecision(aStart.v, 3).toString()\n                    : unparse(a),\n            ]\n        })\n        this._prompt =\n            testFun.id === \"ask\" || testFun.id === \"say\"\n                ? this.command.prompt.slice(0)\n                : testFun.prompt.slice(0)\n        replaceId.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n        replaceVal.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n    }\n\n    public setEvent(ev: string) {}\n\n    private checkExpression(e: jsep.Expression) {\n        const expr = new JDExprEvaluator(this.env, this.callEval(this._startExpressions))\n        return expr.eval(e)\n            ? JDTestCommandStatus.Passed\n            : JDTestCommandStatus.Active\n    }\n\n    private getStart(e: jsep.Expression) {\n        return this._startExpressions.find(r => r.e === e)\n    }\n\n    public evaluate() {\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        this._status = JDTestCommandStatus.Active\n        this._progress = \"\"\n        switch (testFun.id as JDTestFunctions) {\n            case \"ask\": {\n                this._status = JDTestCommandStatus.RequiresUserInput\n                break\n            }\n            case \"check\": {\n                this._status = this.checkExpression(args[0])\n                break\n            }\n            case \"closeTo\": {\n                const goal = this.getStart(args[1])\n                const error = this.getStart(args[2])\n                const expr = new JDExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[0]) as number\n                if (Math.abs(ev - goal.v) <= error.v)\n                    this._status = JDTestCommandStatus.Passed\n                this._progress = `current: ${pretify(ev)}; goal: ${pretify(\n                    goal.v\n                )}; error: ${pretify(error.v)}`\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                const regSaved = this._startExpressions.find(\n                    r => r.e === args[0]\n                )\n                const regValue = this.env(unparse(args[0]))\n                const status =\n                    regValue &&\n                    regSaved.v &&\n                    ((testFun.id === \"changes\" && regValue !== regSaved.v) ||\n                        (testFun.id === \"increases\" && regValue > regSaved.v) ||\n                        (testFun.id === \"decreases\" && regValue < regSaved.v))\n                        ? JDTestCommandStatus.Passed\n                        : JDTestCommandStatus.Active\n                this._status = status\n                regSaved.v = regValue\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": {\n                const regSaved = this.getStart(args[0])\n                const amtSaved = this.getStart(args[1])\n                const regValue = this.env(unparse(args[0]))\n                if (testFun.id === \"increasesBy\") {\n                    if (regValue >= regSaved.v + amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    } else if (\n                        regValue >= regSaved.v &&\n                        regValue < regSaved.v + amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )}, goal: ${pretify(regSaved.v + amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                } else {\n                    if (regValue <= regSaved.v - amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                        this._progress = \"completed\"\n                    } else if (\n                        regValue <= regSaved.v &&\n                        regValue > regSaved.v - amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )} goal: ${pretify(regSaved.v - amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                }\n                break\n            }\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                this._status = JDTestCommandStatus.Active\n                const regValue = this.env(unparse(args[0]))\n                const beginSaved = this.getStart(args[0])\n                const endSaved = this.getStart(args[1])\n                if (this._rangeComplete === undefined) {\n                    this._rangeComplete = regValue\n                } else {\n                    if (\n                        regValue ===\n                        this._rangeComplete +\n                            (testFun.id == \"stepsUpTo\" ? 1 : -1)\n                    )\n                        this._rangeComplete = regValue\n                    if (this._rangeComplete === endSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    }\n                }\n                if (this._rangeComplete != undefined) {\n                    this._progress =\n                        testFun.id == \"stepsUpTo\"\n                            ? `from ${pretify(beginSaved.v)} up to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                            : `from ${pretify(beginSaved.v)} down to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                }\n                break\n            }\n            case \"events\": {\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev === this._eventsComplete[0]) {\n                        this._eventsComplete.shift()\n                        if (this._eventsComplete.length === 0)\n                            this._status = JDTestCommandStatus.Passed\n                    } else {\n                        this._status = JDTestCommandStatus.Failed\n                    }\n                    this._progress = `got event ${ev}; remaining = [${this._eventsComplete}]`\n                } else {\n                    this._progress = `no events received; remaining = [${this._eventsComplete}]`\n                }\n                break\n            }\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                const event = args[0] as jsep.Identifier\n                this._progress = `waiting for event ${event.name}`\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev !== event.name) {\n                        if (testFun.id === \"nextEvent\")\n                            this._status = JDTestCommandStatus.Failed\n                    } else {\n                        // this._status = JDTestCommandStatus.Passed\n                        this._status = this.checkExpression(\n                            this.command.call.arguments[1]\n                        )\n                    }\n                } else {\n                    this._progress = `no events received; ${this._progress}`\n                }\n                break\n            }\n            case \"assign\": {\n                const expr = new JDExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[1])\n                const reg = args[0] as jsep.Identifier\n                if (this.testRunner.serviceTestRunner.writeRegister(reg.name, ev)) {\n                    this._status = JDTestCommandStatus.Passed\n                    this._progress = `wrote ${ev} to register ${reg.name}`\n                }\n            }\n        }\n\n        function pretify(v: number) {\n            return roundWithPrecision(v, 3)\n        }\n    }\n}\n\nexport interface JDCommandOutput {\n    message: string\n    progress: string\n}\n\nexport class JDTestCommandRunner extends JDEventSource {\n    private _status = JDTestCommandStatus.NotReady\n    private _output: JDCommandOutput = { message: \"\", progress: \"\" }\n    private _commandEvaluator: JDCommandEvaluator = null\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n        super()\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestCommandStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestCommandStatus.Failed &&\n            this.status !== JDTestCommandStatus.Passed\n        )\n    }\n\n    get isActive(): boolean {\n        return (\n            this.status === JDTestCommandStatus.Active ||\n            this.status === JDTestCommandStatus.RequiresUserInput\n        )\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: JDCommandOutput) {\n        if (\n            !this._output ||\n            this._output.message !== value.message ||\n            this._output.progress !== value.progress\n        ) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.status = JDTestCommandStatus.NotReady\n        this.output = { message: \"\", progress: \"\" }\n        this._commandEvaluator = null\n    }\n\n    start() {\n        this.status = JDTestCommandStatus.Active\n        this._commandEvaluator = undefined\n        this.envChange()\n    }\n\n    envChange() {\n        if (this.isActive) {\n            if (!this._commandEvaluator) {\n                this._commandEvaluator = new JDCommandEvaluator(\n                    this.testRunner,\n                    this.command\n                )\n                try {\n                    this._commandEvaluator.start()\n                } catch (e) {\n                    // we will try again on next environment change\n                    this._commandEvaluator = undefined\n                }\n            } \n            if (this._commandEvaluator) {\n                try {\n                    this._commandEvaluator.evaluate()\n                    const newOutput: JDCommandOutput = {\n                        message: this._commandEvaluator.prompt,\n                        progress: this._commandEvaluator.progress,\n                    }\n                    this.output = newOutput\n                    if (\n                        this._commandEvaluator.status ===\n                        JDTestCommandStatus.RequiresUserInput\n                    )\n                        this.status = JDTestCommandStatus.RequiresUserInput\n                    else \n                        this.finish(this._commandEvaluator.status)\n                } catch (e) {\n                    // show still be in the active state\n                }\n            }\n        }\n    }\n\n    cancel() {\n        this.finish(JDTestCommandStatus.Failed)\n    }\n\n    finish(s: JDTestCommandStatus) {\n        if (\n            this.isActive &&\n            (s === JDTestCommandStatus.Failed ||\n                s === JDTestCommandStatus.Passed)\n        ) {\n            this.status = s\n            this.testRunner.finishCommand()\n        }\n    }\n}\n\nexport class JDTestRunner extends JDEventSource {\n    private _status = JDTestStatus.NotReady\n    private _commandIndex: number\n    private _currentEvent: string\n    public readonly commands: JDTestCommandRunner[]\n\n    constructor(\n        public readonly serviceTestRunner: JDServiceTestRunner,\n        private readonly testSpec: jdtest.TestSpec\n    ) {\n        super()\n        this.commands = testSpec.testCommands.map(\n            c => new JDTestCommandRunner(this, c)\n        )\n    }\n\n    public reset() {\n        if (this.status !== JDTestStatus.NotReady) {\n            this._status = JDTestStatus.NotReady\n            this._commandIndex = undefined\n            this._currentEvent = undefined\n            this.commands.forEach(t => t.reset())\n            this.emit(CHANGE)\n        }\n    }\n\n    start() {\n        this.reset()\n        this.status = JDTestStatus.Active\n        this.commandIndex = 0\n        this.serviceTestRunner.refreshEnvironment()\n    }\n\n    next() {\n        this.serviceTestRunner.next()\n    }\n\n    cancel() {\n        this.finish(JDTestStatus.Failed)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestStatus.Failed &&\n            this.status !== JDTestStatus.Passed\n        )\n    }\n\n    get description() {\n        return this.testSpec.description\n    }\n\n    get prompt() {\n        return this.testSpec.prompt\n    }\n\n    finish(newStatus: JDTestStatus) {\n        if (this.status === JDTestStatus.Active) {\n            this.status = newStatus\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n\n    private set commandIndex(index: number) {\n        if (this._commandIndex !== index) {\n            this._commandIndex = index\n            this.currentCommand?.start()\n            this.emit(CHANGE)\n        }\n    }\n\n    public envChange() {\n        if (this.status === JDTestStatus.Active) {\n            this.currentCommand?.envChange()\n        }\n    }\n\n    public eventChange(event: string) {\n        if (this.status === JDTestStatus.Active) {\n            this._currentEvent = event\n            this.envChange()\n        }\n    }\n\n    public get hasEvent() {\n        return this._currentEvent != undefined\n    }\n\n    public consumeEvent() {\n        const ret = this._currentEvent\n        this._currentEvent = undefined\n        return ret\n    }\n\n    public finishCommand() {\n        if (this.commandIndex === this.commands.length - 1)\n            this.finish(commandStatusToTestStatus(this.currentCommand.status))\n        else this.commandIndex++\n    }\n\n    get currentCommand() {\n        return this.commands[this._commandIndex]\n    }\n}\n\nexport class JDServiceTestRunner extends JDServiceClient {\n    private _testIndex = -1\n    private _env: VMServiceEnvironment;\n    public readonly tests: JDTestRunner[]\n\n    constructor(\n        public readonly testSpec: jdtest.ServiceTestSpec,\n        service: JDService\n    ) {\n        super(service)\n        this._env = new VMServiceEnvironment(service)\n        this.tests = this.testSpec.tests.map(t => new JDTestRunner(this, t))\n        this.testSpec.tests.forEach(t => {\n            t.events.forEach(s => {\n                let eventName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerEvent(eventName, () => { this.currentTest?.eventChange(eventName) })\n            })\n            t.registers.forEach(s => {\n                let regName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerRegister(regName, () => { this.currentTest?.envChange() })\n            })\n        })\n        this.start()\n    }\n\n    public refreshEnvironment() {\n        this._env.refreshEnvironment();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        return this._env.lookup(e)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public writeRegister(regName: string, val: any) {\n        return this._env.writeRegister(regName, val)\n    }\n\n    private get testIndex() {\n        return this._testIndex\n    }\n\n    private set testIndex(index: number) {\n        if (this._testIndex !== index) {\n            // stop previous test if needed\n            const ct = this.currentTest\n            if (ct) {\n                if (ct.status === JDTestStatus.Active) {\n                    ct.cancel()\n                }\n            }\n            // update test\n            this._testIndex = index\n            this.emit(CHANGE)\n        }\n    }\n\n    public stats() {\n        const r = {\n            total: this.tests.length,\n            success: 0,\n            failed: 0,\n            indeterminate: 0,\n        }\n        for (const test of this.tests) {\n            switch (test.status) {\n                case JDTestStatus.Failed:\n                    r.failed++\n                    break\n                case JDTestStatus.Passed:\n                    r.success++\n                    break\n                default:\n                    r.indeterminate++\n            }\n        }\n        return r\n    }\n\n    public start() {\n        this.tests.forEach(t => t.reset())\n        this.testIndex = 0\n    }\n\n    public next() {\n        this.testIndex++\n    }\n\n    get currentTest() {\n        return this.tests[this._testIndex]\n    }\n\n    set currentTest(test: JDTestRunner) {\n        const index = this.tests.indexOf(test)\n        if (index > -1) this.testIndex = index\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport useServiceClient from \"../useServiceClient\"\nimport {\n    Grid,\n    Button,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Typography,\n    Card,\n    CardContent,\n    CardActions,\n    Box,\n    ListSubheader,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    JDServiceTestRunner,\n    JDTestRunner,\n    JDTestStatus,\n    JDTestCommandRunner,\n    JDTestCommandStatus,\n} from \"../../../jacdac-ts/src/test/testrunner\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\n\nfunction TestStatusIcon(props: { test: JDTestRunner }) {\n    const { test } = props\n    const status = useChange(test, t => t.status)\n\n    switch (status) {\n        case JDTestStatus.Active:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction TestListItem(props: {\n    test: JDTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { test, currentTest, onSelectTest } = props\n    const description = useChange(test, t => t.description)\n    const selected = test === currentTest\n    const handleSelectTest = () => onSelectTest(test)\n\n    return (\n        <ListItem selected={selected} button onClick={handleSelectTest}>\n            <ListItemIcon>\n                <TestStatusIcon test={test} />\n            </ListItemIcon>\n            <ListItemText primary={description} />\n        </ListItem>\n    )\n}\n\nfunction TestList(props: {\n    testRunner: JDServiceTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { testRunner, currentTest, onSelectTest } = props\n    const { tests } = testRunner\n    const stats = useChange(testRunner, r => r.stats())\n\n    return (\n        <Card>\n            <CardContent>\n                <List\n                    dense={true}\n                    subheader={\n                        <ListSubheader>\n                            {`${stats.total} tests, ${stats.success} success, ${stats.failed} failed`}\n                        </ListSubheader>\n                    }\n                >\n                    {tests?.map((test, i) => (\n                        <TestListItem\n                            key={i}\n                            test={test}\n                            currentTest={currentTest}\n                            onSelectTest={onSelectTest}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction CommandStatusIcon(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const status = useChange(command, c => c.status)\n\n    switch (status) {\n        case JDTestCommandStatus.Active:\n        case JDTestCommandStatus.RequiresUserInput:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestCommandStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestCommandStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction CommandListItem(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const { message, progress } = useChange(command, c => c.output)\n    const status = useChange(command, c => c.status)\n    const handleAnswer = (status: JDTestCommandStatus) => () =>\n        command.finish(status)\n    return (\n        <>\n            <ListItem selected={status === JDTestCommandStatus.Active}>\n                <ListItemIcon>\n                    <CommandStatusIcon command={command} />\n                </ListItemIcon>\n                <ListItemText\n                    primary={message}\n                    secondary={progress}\n                />\n            </ListItem>\n            {status === JDTestCommandStatus.RequiresUserInput && (\n                <ListItem>\n\n                    <ListItemSecondaryAction>\n                        <Grid container spacing={1}>\n                            <Grid item><Button\n                                variant=\"outlined\"\n                                onClick={handleAnswer(JDTestCommandStatus.Passed)}\n                            >\n                                Yes\n                    </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleAnswer(JDTestCommandStatus.Failed)}\n                                >\n                                    No\n                    </Button>\n                            </Grid>\n                        </Grid>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )}\n\n        </>\n    )\n}\n\nfunction ActiveTest(props: { test: JDTestRunner }) {\n    const { test } = props\n    const { commands } = test\n    const status = useChange(test, t => t.status)\n    const handleRestart = () => test.start()\n    const handleNext = () => test.next()\n    // auto start\n    useEffect(() => test.start(), [test])\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h5\">DO</Typography>\n                <Box m={2}>\n                    <Typography variant=\"body1\">{test.prompt}</Typography>\n                </Box>\n                <Typography variant=\"h5\">TEST</Typography>\n                <List dense={false}>\n                    {commands.map((cmd, i) => (\n                        <CommandListItem key={i} command={cmd} />\n                    ))}\n                </List>\n                {status === JDTestStatus.Passed && (\n                    <Alert severity=\"success\">Test passed</Alert>\n                )}\n                {status === JDTestStatus.Failed && (\n                    <Alert severity=\"error\">Test failed</Alert>\n                )}\n            </CardContent>\n            <CardActions>\n                <Button\n                    variant={\n                        status === JDTestStatus.Active\n                            ? \"outlined\"\n                            : \"contained\"\n                    }\n                    color={\n                        status === JDTestStatus.Passed ? \"primary\" : undefined\n                    }\n                    onClick={handleNext}\n                >\n                    Next\n                </Button>\n                <Button variant=\"outlined\" onClick={handleRestart}>\n                    Restart\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceTestRunner(props: {\n    service: JDService\n    serviceTest?: jdtest.ServiceTestSpec\n}) {\n    const {\n        service,\n        serviceTest = serviceTestFromServiceClass(service.serviceClass),\n    } = props\n    const factory = useCallback(\n        service => serviceTest && new JDServiceTestRunner(serviceTest, service),\n        [service, serviceTest]\n    )\n    const testRunner = useServiceClient(service, factory)\n    const currentTest = useChange(testRunner, t => t?.currentTest)\n    const handleSelectTest = (test: JDTestRunner) => {\n        testRunner.currentTest = test\n    }\n\n    if (!serviceTest)\n        return (\n            <Alert severity=\"warning\">\n                Sorry, there are no tests available for service{\" \"}\n                {service.specification.name}.\n            </Alert>\n        )\n\n    if (!testRunner) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={3}>\n                <TestList\n                    testRunner={testRunner}\n                    currentTest={currentTest}\n                    onSelectTest={handleSelectTest}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                {currentTest ? <ActiveTest test={currentTest} /> : <Alert severity={\"info\"}>\n                    Select a test to get started.\n                </Alert>}\n            </Grid>\n            {service && (\n                <Grid item xs={3}>\n                    <DashboardDevice\n                        showAvatar={true}\n                        showHeader={true}\n                        device={service.device}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(service: JDService, factory: (service: JDService) => T, deps: React.DependencyList = []) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client;\n}"],"sourceRoot":""}