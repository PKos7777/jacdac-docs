{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdspec.ts"],"names":["DEVICE_IMAGE_WIDTH","DEVICE_IMAGE_HEIGHT","unitDescription","m","kg","s","A","K","cd","mol","Hz","rad","sr","N","Pa","J","W","C","V","F","Ohm","S","Wb","T","H","lm","lx","Bq","Gy","Sv","kat","m2","m3","bit","lat","lon","pH","dB","dBW","count","EL","B","VA","VAs","var","vars","hsv","rgb","rpm","uv","lux","bpm","mcd","px","secondaryUnitConverters","ms","name","unit","scale","offset","min","h","MHz","kW","kVA","kvar","Ah","Wh","kWh","varh","kvarh","kVAh","KiB","GB","mV","mA","dBm","ppm","ppb","hPa","mm","cm","km","nm","nT","frac","us","mWh","g","resolveUnit","su","undefined","units","r","Object","keys","forEach","k","push","description","filter","scd","sort","l","localeCompare","identifierRanges","rw","ro","const","command","report","event","parseServiceSpecificationMarkdownToJSON","filecontent","includes","filename","replace","info","status","shortId","camelName","shortName","extends","notes","classIdentifier","enums","packets","tags","backticksType","enumInfo","packetInfo","pipePacket","errors","lineNo","noteId","lastCmd","packetsToDescribe","nextModifier","systemInfo","usedIds","values","prev","processInclude","split","line","processLine","e","error","message","length","normalizeMD","v","camelize","f","toUpperCase","pkt","packFormat","trim","exec","interpret","slice","hd","cont","newNoteId","toLowerCase","iface","expanded","words","test","pop","cmd","startEnum","startPacket","finishPacket","packetField","enumMember","metadataMember","packed","hasNaturalAlignment","warn","repeats","hadzero","fields","p","kind","startRepeats","storage","type","pid","identifier","ranges","some","range","toString","map","join","indexOf","identifierName","regid","reading","find","md","checkBraces","forceSection","sectionId","generalKind","kindSt","shift","w2","internal","isReport","unshift","normalizeName","secondary","hasReport","optional","pipeType","atat","w","parseInt","isSet","isNaN","systemPacket","isUser","isSystem","isHigh","toHex","highCommands","splice","last","rangeCheck","tp","normalizeStorageType","typeShift","Math","floor","bits","max","abs","parseVal","eq","val","parseIntCheck","defaultValue","isOptional","op","isFloat","tok","normalizeUnit","field","isSimpleType","canonicalType","multiSegmented","segmented","typicalMin","typicalMax","absoluteMin","absoluteMax","maxBytes","isFlags","members","allowFloat","parseIntFloat","looksRandom","n","i","hh","genRandom","random","gen","group","capitalize","concat","inner","derived","innerEnums","clone","ie","innerPackets","ipkt","JSON","parse","stringify","msg","file","tp2","a","b","len","sz","byteOffset","memberSize","pad","o","fail","Error","toUpper","x","toLower","cStorage","isRegister","unitPref","prettyUnit","u","toH","hdDef","pref","en","enPref","cmt","addComment","wrapComment","comment","isMetaPipe","needsStruct","tname","unaligned","def","cst","_","upperCamel","snakify","dashify","humanify","typeInfo","f0","desc","wrapSnippet","code","TYPESCRIPT_STATIC_NAMESPACE","packFormatForField","fld","isStatic","useBooleans","szSuff","tsType","fmt","sinfo","ff","packInfo","vartp","reptp","isArray","varname","console","log","buffers","names","types","toTypescript","staticTypeScript","indent","indent2","enumkw","toLocaleUpperCase","tsEnums","pack","text","meta","normalizeDeviceSpecification","dev","id","escapeDeviceIdentifier","company","escapeDeviceNameIdentifier","repo","link","services","firmwares","escaped","converters","json","j","c","ts","sts","isNumericType"],"mappings":"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","file":"74493c31a6571423b4de02ce9ddf127887738210-11004deab58f10fa0c4a.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"jdspec.d.ts\" />\nimport { parseIntFloat } from \"./jdutils\"\n\nexport const DEVICE_IMAGE_WIDTH = 600\nexport const DEVICE_IMAGE_HEIGHT = 450\n\n// modified subset of SenML\nexport const unitDescription: jdspec.SMap<string> = {\n    \"°\": \"angle\",\n    \"°/s\": \"rotation rate\",\n    \"°/s2\": \"rotation acceleration\",\n    m: \"meter\",\n    kg: \"kilogram\",\n    s: \"second\",\n    A: \"ampere\",\n    K: \"kelvin\",\n    cd: \"candela\",\n    mol: \"mole\",\n    Hz: \"hertz\",\n    rad: \"radian\",\n    sr: \"steradian\",\n    N: \"newton\",\n    Pa: \"pascal\",\n    J: \"joule\",\n    W: \"watt\",\n    C: \"coulomb\",\n    V: \"volt\",\n    F: \"farad\",\n    Ohm: \"ohm\",\n    S: \"siemens\",\n    Wb: \"weber\",\n    T: \"tesla\",\n    H: \"henry\",\n    \"°C\": \"degrees Celsius\",\n    lm: \"lumen\",\n    lx: \"lux\",\n    Bq: \"becquerel\",\n    Gy: \"gray\",\n    Sv: \"sievert\",\n    kat: \"katal\",\n    m2: \"square meter (area)\",\n    m3: \"cubic meter (volume)\",\n    \"m/s\": \"meter per second (velocity)\",\n    \"m/s2\": \"meter per square second (acceleration)\",\n    \"m3/s\": \"cubic meter per second (flow rate)\",\n    \"W/m2\": \"watt per square meter (irradiance)\",\n    \"cd/m2\": \"candela per square meter (luminance)\",\n    bit: \"bit (information content)\",\n    \"bit/s\": \"bit per second (data rate)\",\n    lat: \"degrees latitude\",\n    lon: \"degrees longitude\",\n    pH: \"pH value (acidity; logarithmic quantity)\",\n    dB: \"decibel (logarithmic quantity)\",\n    dBW: \"decibel relative to 1 W (power level)\",\n    count: \"1 (counter value)\",\n    \"/\": \"1 (ratio e.g., value of a switch)\",\n    \"%RH\": \"Percentage (Relative Humidity)\",\n    \"%EL\": \"Percentage (remaining battery energy level)\",\n    EL: \"seconds (remaining battery energy level)\",\n    \"1/s\": \"1 per second (event rate)\",\n    \"S/m\": \"Siemens per meter (conductivity)\",\n    B: \"Byte (information content)\",\n    VA: \"volt-ampere (Apparent Power)\",\n    VAs: \"volt-ampere second (Apparent Energy)\",\n    var: \"volt-ampere reactive (Reactive Power)\",\n    vars: \"volt-ampere-reactive second (Reactive Energy)\",\n    \"J/m\": \"joule per meter (Energy per distance)\",\n    \"kg/m3\": \"kilogram per cubic meter (mass density, mass concentration)\",\n    \"s/60°\": \"servo speed (time to travel 60°)\",\n    \"kg/cm\": \"torque\",\n    hsv: \"bit HSV color\",\n    rgb: \"RGB color\",\n    rpm: \"revolutions per minute\",\n    uv: \"UV index\",\n    lux: \"illuminance\",\n    bpm: \"beats per minute\",\n    mcd: \"micro candella\",\n    px: \"pixel\",\n}\n\nexport const secondaryUnitConverters: jdspec.SMap<{\n    name: string\n    unit: senml.Unit | \"#\"\n    scale: number\n    offset: number\n}> = {\n    ms: { name: \"millisecond\", unit: \"s\", scale: 1 / 1000, offset: 0 },\n    min: { name: \"minute\", unit: \"s\", scale: 60, offset: 0 },\n    h: { name: \"hour\", unit: \"s\", scale: 3600, offset: 0 },\n    MHz: { name: \"megahertz\", unit: \"Hz\", scale: 1000000, offset: 0 },\n    kW: { name: \"kilowatt\", unit: \"W\", scale: 1000, offset: 0 },\n    kVA: { name: \"kilovolt-ampere\", unit: \"VA\", scale: 1000, offset: 0 },\n    kvar: { name: \"kilovar\", unit: \"var\", scale: 1000, offset: 0 },\n    Ah: { name: \"ampere-hour\", unit: \"C\", scale: 3600, offset: 0 },\n    Wh: { name: \"watt-hour\", unit: \"J\", scale: 3600, offset: 0 },\n    kWh: { name: \"kilowatt-hour\", unit: \"J\", scale: 3600000, offset: 0 },\n    varh: { name: \"var-hour\", unit: \"vars\", scale: 3600, offset: 0 },\n    kvarh: { name: \"kilovar-hour\", unit: \"vars\", scale: 3600000, offset: 0 },\n    kVAh: {\n        name: \"kilovolt-ampere-hour\",\n        unit: \"VAs\",\n        scale: 3600000,\n        offset: 0,\n    },\n    \"Wh/km\": {\n        name: \"watt-hour per kilometer\",\n        unit: \"J/m\",\n        scale: 3.6,\n        offset: 0,\n    },\n    KiB: { name: \"kibibyte\", unit: \"B\", scale: 1024, offset: 0 },\n    GB: { name: \"gigabyte\", unit: \"B\", scale: 1.0e9, offset: 0 },\n    \"Mbit/s\": {\n        name: \"megabit per second\",\n        unit: \"bit/s\",\n        scale: 1000000,\n        offset: 0,\n    },\n    \"B/s\": { name: \"byte per second\", unit: \"bit/s\", scale: 8, offset: 0 },\n    \"MB/s\": {\n        name: \"megabyte per second\",\n        unit: \"bit/s\",\n        scale: 8000000,\n        offset: 0,\n    },\n    mV: { name: \"millivolt\", unit: \"V\", scale: 1 / 1000, offset: 0 },\n    mA: { name: \"milliampere\", unit: \"A\", scale: 1 / 1000, offset: 0 },\n    dBm: { name: \"decibel (milliwatt)\", unit: \"dBW\", scale: 1, offset: -30 },\n    \"ug/m3\": {\n        name: \"microgram per cubic meter\",\n        unit: \"kg/m3\",\n        scale: 1.0e-9,\n        offset: 0,\n    },\n    \"mm/h\": {\n        name: \"millimeter per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3600000,\n        offset: 0,\n    },\n    \"m/h\": { name: \"meter per hour\", unit: \"m/s\", scale: 1 / 3600, offset: 0 },\n    \"cm/s\": {\n        name: \"centimeter per seconds\",\n        unit: \"m/s\",\n        scale: 1 / 100,\n        offset: 0,\n    },\n    ppm: { name: \"parts per million\", unit: \"/\", scale: 1.0e-6, offset: 0 },\n    ppb: { name: \"parts per billion\", unit: \"/\", scale: 1.0e-9, offset: 0 },\n    \"/100\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"%\": { name: \"percent\", unit: \"/\", scale: 1 / 100, offset: 0 },\n    \"/1000\": { name: \"permille\", unit: \"/\", scale: 1 / 1000, offset: 0 },\n    hPa: { name: \"hectopascal\", unit: \"Pa\", scale: 100, offset: 0 },\n    mm: { name: \"millimeter\", unit: \"m\", scale: 1 / 1000, offset: 0 },\n    cm: { name: \"centimeter\", unit: \"m\", scale: 1 / 100, offset: 0 },\n    km: { name: \"kilometer\", unit: \"m\", scale: 1000, offset: 0 },\n    \"km/h\": {\n        name: \"kilometer per hour\",\n        unit: \"m/s\",\n        scale: 1 / 3.6,\n        offset: 0,\n    },\n    \"8ms\": { name: \"8 milliseconds\", unit: \"s\", scale: 8 / 1000, offset: 0 },\n    nm: { name: \"nanometer\", unit: \"m\", scale: 1e-9, offset: 0 },\n    nT: { name: \"nano Tesla\", unit: \"T\", scale: 1e9, offset: 0 },\n\n    // compat with previous Jacdac versions\n    frac: { name: \"ratio\", unit: \"/\", scale: 1, offset: 0 },\n    us: { name: \"micro seconds\", unit: \"s\", scale: 1e-6, offset: 0 },\n    mWh: { name: \"micro watt-hour\", unit: \"J\", scale: 3.6e-3, offset: 0 },\n    g: { name: \"earth gravity\", unit: \"m/s2\", scale: 9.80665, offset: 0 },\n    \"#\": { name: \"count\", unit: \"#\", scale: 1, offset: 0 },\n}\n\nexport function resolveUnit(unit: string) {\n    if (unit === \"\") return { name: \"\", unit: \"\", scale: 1, offset: 1 } // indentifier\n\n    // seconary unit?\n    const su = secondaryUnitConverters[unit]\n    if (su) return su\n\n    const name = unitDescription[unit]\n    if (name) return { name, unit, scale: 1, offset: 0 }\n\n    return undefined\n}\n\nexport function units(): { name: string; description: string }[] {\n    const r: { name: string; description: string }[] = []\n    Object.keys(unitDescription).forEach(k => {\n        r.push({ name: k, description: unitDescription[k] })\n        Object.keys(secondaryUnitConverters)\n            .filter(scd => secondaryUnitConverters[scd].unit === k)\n            .forEach(scd =>\n                r.push({\n                    name: scd,\n                    description: secondaryUnitConverters[scd].name,\n                })\n            )\n    })\n    r.sort((l, r) => l.name.localeCompare(r.name))\n    return r\n}\n\n/* check ranges, see system.md\nRegisters `0x001-0x07f` - r/w common to all services\nRegisters `0x080-0x0ff` - r/w defined per-service\nRegisters `0x100-0x17f` - r/o common to all services\nRegisters `0x180-0x1ff` - r/o defined per-service\nRegisters `0x200-0xeff` - custom, defined per-service\nRegisters `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n*/\nconst identifierRanges: { [index: string]: [number, number][] } = {\n    rw: [\n        [0x001, 0x07f],\n        [0x080, 0x0ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    ro: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    const: [\n        [0x100, 0x17f],\n        [0x180, 0x1ff],\n        [0x200, 0xeff], // custom\n        [0xf00, 0xfff], // impl\n    ],\n    command: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    report: [\n        [0x000, 0x07f],\n        [0x080, 0xeff],\n        [0xf00, 0xfff],\n    ],\n    event: [\n        [0x00, 0x7f], // system\n        [0x80, 0xff],\n    ],\n}\n\nexport function parseServiceSpecificationMarkdownToJSON(\n    filecontent: string,\n    includes?: jdspec.SMap<jdspec.ServiceSpec>,\n    filename = \"\"\n): jdspec.ServiceSpec {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdspec.ServiceSpec = {\n        name: \"\",\n        status: \"experimental\",\n        shortId: filename.replace(/\\.md$/, \"\").replace(/.*\\//, \"\"),\n        camelName: \"\",\n        shortName: \"\",\n        extends: [],\n        notes: {},\n        classIdentifier: 0,\n        enums: {},\n        packets: [],\n        tags: [],\n    }\n\n    let backticksType = \"\"\n    let enumInfo: jdspec.EnumInfo = null\n    let packetInfo: jdspec.PacketInfo = null\n    let pipePacket: jdspec.PacketInfo = null\n    let errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let noteId = \"short\"\n    let lastCmd: jdspec.PacketInfo\n    let packetsToDescribe: jdspec.PacketInfo[]\n    let nextModifier: \"\" | \"segmented\" | \"multi-segmented\" | \"repeats\" = \"\"\n\n    const systemInfo = includes?.[\"_system\"]\n    const usedIds: jdspec.SMap<string> = {}\n    for (const prev of values(includes || {})) {\n        if (prev.classIdentifier) usedIds[prev.classIdentifier + \"\"] = prev.name\n    }\n\n    try {\n        if (includes[\"_system\"] && includes[\"_base\"]) processInclude(\"_base\")\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (errors.length) info.errors = errors\n\n    for (const k of Object.keys(info.notes))\n        info.notes[k] = normalizeMD(info.notes[k])\n    for (const v of info.packets) v.description = normalizeMD(v.description)\n\n    if (!info.camelName)\n        info.camelName = camelize(\n            info.name\n                .replace(/\\s+/g, \" \")\n                .replace(/[ -](.)/g, (f, l) => l.toUpperCase())\n                .replace(/[^\\w]+/g, \"_\")\n        )\n    if (!info.shortName) info.shortName = info.camelName\n\n    if (info.camelName == \"system\") info.classIdentifier = 0x1fff_fff1\n    else if (info.camelName == \"base\") info.classIdentifier = 0x1fff_fff3\n    else if (info.camelName == \"sensor\") info.classIdentifier = 0x1fff_fff2\n\n    if (info.shortName != \"control\" && !info.classIdentifier)\n        error(\"identifier: not specified\")\n\n    info.packets.forEach(pkt => (pkt.packFormat = packFormat(info, pkt)))\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || line.slice(0, 4) == \"    \"\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                const [, hd, cont] = m\n                packetsToDescribe = null\n                const newNoteId = cont.trim().toLowerCase()\n                if (hd == \"#\" && !info.name) {\n                    info.name = cont.trim()\n                    line = \"\"\n                } else if (\n                    newNoteId == \"registers\" ||\n                    newNoteId == \"commands\" ||\n                    newNoteId == \"events\" ||\n                    newNoteId == \"examples\"\n                ) {\n                    noteId = newNoteId\n                    line = \"\"\n                } else {\n                    if (noteId == \"short\") noteId = \"long\"\n                    // keep line\n                }\n            }\n\n            if (packetsToDescribe) {\n                for (const iface of packetsToDescribe)\n                    iface.description += line + \"\\n\"\n            } else {\n                if (line || info.notes[noteId]) {\n                    if (!info.notes[noteId]) info.notes[noteId] = \"\"\n                    info.notes[noteId] += line + \"\\n\"\n                }\n            }\n        } else {\n            if (packetsToDescribe && packetsToDescribe[0].description)\n                packetsToDescribe = null\n            const expanded = line\n                .replace(/\\/\\/.*/, \"\")\n                .replace(/[?@:=,{};]/g, s => \" \" + s + \" \")\n                .trim()\n            if (!expanded) return\n            const words = expanded.split(/\\s+/)\n            if (/^[;,]/.test(words[words.length - 1])) words.pop()\n            let cmd = words[0]\n            // allow for `command = Foo.Bar` etc (ie. command is not a keyword there)\n            if (words[1] == \":\" || words[1] == \"=\") cmd = \":\"\n            switch (cmd) {\n                case \"enum\":\n                case \"flags\":\n                    startEnum(words)\n                    break\n                case \"meta\":\n                case \"pipe\":\n                case \"report\":\n                case \"command\":\n                case \"const\":\n                case \"ro\":\n                case \"rw\":\n                case \"event\":\n                    startPacket(words)\n                    break\n                case \"}\":\n                    if (packetInfo) {\n                        finishPacket()\n                    } else if (enumInfo) {\n                        enumInfo = null\n                    } else {\n                        error(\"nothing to end here\")\n                    }\n                    break\n                default:\n                    if (packetInfo) packetField(words)\n                    else if (enumInfo) enumMember(words)\n                    else metadataMember(words)\n            }\n        }\n    }\n\n    function finishPacket() {\n        packetInfo.packed = hasNaturalAlignment(packetInfo) ? undefined : true\n        if (packetInfo.packed)\n            warn(`you may want to use explicit padding in ${packetInfo.name}`)\n\n        let repeats = false\n        let hadzero = false\n        for (const p of packetInfo.fields) {\n            if (hadzero) {\n                error(\n                    `field ${p.name} in ${packetInfo.kind} ${packetInfo.name} follows a variable-sized field`\n                )\n                break\n            }\n            if (p.startRepeats) {\n                if (repeats)\n                    error(\n                        `repeats: can only be specified once; in ${packetInfo.kind} ${packetInfo.name}`\n                    )\n                repeats = true\n            }\n            if (p.storage == 0 && p.type != \"string0\") {\n                if (repeats) {\n                    error(\n                        `variable-sized field ${p.name} in ${packetInfo.kind} ${packetInfo.name} cannot repeat`\n                    )\n                    break\n                }\n                hadzero = true\n            }\n        }\n\n        const pid = packetInfo.identifier\n        const ranges = identifierRanges[packetInfo.kind]\n        if (\n            packetInfo.name != \"set_register\" &&\n            packetInfo.name != \"get_register\" &&\n            ranges &&\n            !ranges.some(range => range[0] <= pid && pid <= range[1])\n        )\n            error(\n                `${packetInfo.name} identifier 0x${pid.toString(\n                    16\n                )} out of range, expected in ${ranges\n                    .map(\n                        range =>\n                            `[${range\n                                .map(r => `0x${r.toString(16)}`)\n                                .join(\", \")}]`\n                    )\n                    .join(\", \")}`\n            )\n\n        // additional checks for specific packets\n        if (\n            [\n                \"reading_error\",\n                \"min_reading\",\n                \"max_reading\",\n                \"reading_resolution\",\n            ].indexOf(packetInfo.identifierName) > -1\n        ) {\n            const regid = packetInfo.identifierName\n            if (packetInfo.fields.length > 1) error(`${regid} must be a number`)\n            const reading = info.packets.find(\n                pkt => pkt.kind === \"ro\" && pkt.identifierName === \"reading\"\n            )\n            if (!reading) error(`${regid} register without a reading register`)\n            else if (packetInfo.fields[0].unit !== reading.fields[0].unit)\n                error(\n                    `${regid} unit (${packetInfo.fields[0].unit}) and reading unit (${reading.fields[0].unit}) must match`\n                )\n        }\n\n        packetInfo = null\n    }\n\n    function normalizeMD(md: string) {\n        return md.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n    }\n\n    function checkBraces(words: string[]) {\n        if (enumInfo || packetInfo) error(\"already in braces\")\n        if (words) {\n            if (words[2] != \"{\") error(`expecting: ${words[0]} NAME {`)\n        }\n\n        enumInfo = null\n        packetInfo = null\n    }\n\n    function forceSection(sectionId: string) {\n        if (noteId != sectionId) {\n            error(`this is only allowed in ## ${sectionId} not in ## ${noteId}`)\n        }\n    }\n\n    function generalKind(k: jdspec.PacketKind): jdspec.PacketKind {\n        switch (k) {\n            case \"const\":\n            case \"ro\":\n            case \"rw\":\n                return \"rw\"\n            default:\n                return k\n        }\n    }\n\n    function startPacket(words: string[]) {\n        checkBraces(null)\n        const kindSt = words.shift()\n        let kind: jdspec.PacketKind = \"command\"\n        if (kindSt == \"meta\") {\n            forceSection(\"commands\")\n            let w2 = words.shift()\n            if (w2 == \"pipe\") w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\")\n                kind = (\"meta_pipe_\" + w2) as any\n            else error(\"invalid token after meta\")\n        } else if (kindSt == \"pipe\") {\n            forceSection(\"commands\")\n            const w2 = words.shift()\n            if (w2 == \"report\" || w2 == \"command\") kind = (\"pipe_\" + w2) as any\n            else error(\"invalid token after pipe\")\n        } else {\n            kind = kindSt as any\n        }\n\n        let internal: boolean = undefined\n        if (words[0] === \"internal\") {\n            internal = true\n            words.shift()\n        }\n\n        let name = words.shift()\n        const isReport = kind == \"report\"\n        if (isReport && lastCmd && !/^\\w+$/.test(name)) {\n            words.unshift(name)\n            name = lastCmd.name\n        }\n        packetInfo = {\n            kind,\n            name: normalizeName(name),\n            identifier: undefined,\n            description: \"\",\n            fields: [],\n            internal,\n        }\n        if (isReport && lastCmd && name == lastCmd.name) {\n            packetInfo.secondary = true\n            lastCmd.hasReport = true\n        }\n        if (!packetsToDescribe) packetsToDescribe = []\n        packetsToDescribe.push(packetInfo)\n        if (words[0] == \"?\") {\n            words.shift()\n            packetInfo.optional = true\n        }\n\n        const prev = info.packets.filter(p => p.name == packetInfo.name)\n        if (prev.length == 0) {\n            // OK\n        } else if (\n            prev.length == 1 &&\n            prev[0].kind == \"command\" &&\n            packetInfo.kind == \"report\"\n        ) {\n            // OK\n        } else {\n            error(`packet redefinition ${prev.map(p => p.name).join(\", \")} `)\n        }\n\n        if (/pipe/.test(kind)) {\n            if (!pipePacket)\n                error(\n                    \"pipe definitions can only occur after the pipe-open packet\"\n                )\n            else packetInfo.pipeType = pipePacket.pipeType\n        }\n\n        const atat = words.indexOf(\"@\")\n        if (kind == \"pipe_command\" || kind == \"pipe_report\") {\n            // no identifier\n            packetInfo.identifier = 0\n        } else if (atat >= 0) {\n            const w = words[atat + 1]\n            let v = parseInt(w)\n            let isSet = true\n            if (isNaN(v)) {\n                v = 0\n                isSet = false\n                if (systemInfo) {\n                    const systemPacket = systemInfo.packets.find(\n                        p => p.name == w\n                    )\n                    if (systemPacket) {\n                        v = systemPacket.identifier\n                        packetInfo.identifierName = w\n                        if (systemPacket.kind != kind)\n                            error(\n                                `kind mismatch on ${w}: ${systemPacket.kind} vs ${kind}`\n                            )\n                        else isSet = true\n                    } else error(`${w} not found in _system`)\n                } else {\n                    error(`${w} cannot be resolved, since _system is missing`)\n                }\n            }\n\n            let isUser = false\n            let isSystem = false\n            let isHigh = 0x200 <= v && v <= 0xeff\n            switch (kind) {\n                case \"const\":\n                case \"ro\":\n                    forceSection(\"registers\")\n                    isSystem = 0x100 <= v && v <= 0x17f\n                    isUser = 0x180 <= v && v <= 0x1ff\n                    break\n                case \"rw\":\n                    forceSection(\"registers\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n                case \"report\":\n                case \"command\":\n                    forceSection(\"commands\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    isHigh = 0x100 <= v && v <= 0xeff\n                    break\n                case \"event\":\n                    forceSection(\"events\")\n                    isSystem = 0x00 <= v && v <= 0x7f\n                    isUser = 0x80 <= v && v <= 0xff\n                    break\n            }\n\n            if (isUser) {\n                // ok\n            } else if (isSystem) {\n                if (!packetInfo.identifierName)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} should be expressed with a name from _system.md`\n                    )\n            } else if (isHigh) {\n                if (!info.highCommands)\n                    warn(\n                        `${kind} @ ${toHex(\n                            v\n                        )} is from the extended range but 'high: 1' missing`\n                    )\n            }\n\n            packetInfo.identifier = v\n            words.splice(atat, 2)\n        } else {\n            if (isReport && lastCmd) packetInfo.identifier = lastCmd.identifier\n            else error(`@ not found at ${packetInfo.name}`)\n        }\n\n        if (\n            info.packets.some(\n                p =>\n                    generalKind(p.kind) == generalKind(packetInfo.kind) &&\n                    (!/pipe/.test(p.kind) ||\n                        p.pipeType == packetInfo.pipeType) &&\n                    p.identifier == packetInfo.identifier\n            )\n        ) {\n            error(\"packet identifier already used\")\n        }\n\n        info.packets.push(packetInfo)\n\n        if (kind == \"command\") lastCmd = packetInfo\n        else lastCmd = null\n\n        if (words[0] == \"=\" || words[0] == \":\") {\n            words.unshift(\"_\")\n            packetField(words)\n            finishPacket()\n        } else {\n            const last = words.shift()\n            if (last == \"{\") {\n                if (words[0] == \"...\") words.shift()\n                if (words[0] == \"}\") {\n                    words.shift()\n                    finishPacket()\n                }\n                if (words.length) error(`excessive tokens: ${words[0]}...`)\n            } else {\n                if (last === undefined && kind == \"event\") {\n                    finishPacket()\n                } else {\n                    error(\"expecting '{'\")\n                }\n            }\n        }\n    }\n\n    function rangeCheck(tp: string, v: number) {\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n\n        if (isNaN(v)) return v // error already reported\n\n        if (storage == 0) {\n            error(`numeric values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (v < 0 && storage > 0) {\n            error(`negative values like ${v} not allowed for ${tp}`)\n            return v\n        }\n\n        if (Math.floor(v) != v && typeShift == 0) {\n            error(`only integer values allowed for ${tp}; got ${v}`)\n            return v\n        }\n\n        let bits = storage < 0 ? -storage * 8 - 1 : storage * 8\n        bits -= typeShift || 0\n        // don't use bitshift to allow for more than 32 bits\n        let max = 1\n        while (bits--) max *= 2\n        if (-v == max) {\n            // OK - min_int\n        } else if (max == 1 && v == 1) {\n            // we make an exception for u0.8 being set to 1\n        } else {\n            if (Math.abs(v) >= max) {\n                error(`value ${v} is out of range for ${tp}`)\n                return v\n            }\n        }\n\n        return v\n    }\n\n    function parseVal(words: string[]) {\n        const eq = words.shift()\n        if (eq != \"=\" && eq != \":\") error(\"expecting '='\")\n        const val = words.shift()\n        return parseIntCheck(val, true)\n    }\n\n    function packetField(words: string[]) {\n        if (\n            words.length == 2 &&\n            (words[0] == \"repeats\" ||\n                words[0] == \"segmented\" ||\n                words[0] == \"multi-segmented\")\n        ) {\n            nextModifier = words[0]\n            return\n        }\n        const name = normalizeName(words.shift())\n        let defaultValue: number = undefined\n        let isOptional: boolean = undefined\n        let op = words.shift()\n        if (op == \"?\") {\n            isOptional = true\n            op = words.shift()\n        }\n        if (op == \"=\") {\n            defaultValue = parseIntCheck(words.shift(), true)\n            op = words.shift()\n        }\n\n        if (op != \":\") error(\"expecting ':'\")\n\n        const tp = words.shift()\n        const [storage, type, typeShift] = normalizeStorageType(tp)\n        const isFloat = typeShift === null || undefined\n\n        let tok = words.shift()\n        let unit: jdspec.Unit = \"\"\n        if (tok != \"{\") {\n            unit = normalizeUnit(tok)\n            tok = words.shift()\n        }\n\n        if (defaultValue !== undefined) rangeCheck(tp, defaultValue)\n\n        let shift = typeShift || undefined\n        if (unit == \"/\") {\n            // / units should be used with ui0. data\n            if (!/^(u0|i1)\\.\\d+$/.test(tp))\n                error(\n                    `fraction unit must be used with u0.yyy or i1.yyy data types (got ${tp})`\n                )\n\n            shift = Math.abs(storage) * 8\n            if (storage < 0) shift -= 1\n        }\n\n        const field: jdspec.PacketMember = {\n            name,\n            unit,\n            shift,\n            isFloat,\n            type,\n            storage,\n            isSimpleType: canonicalType(storage) == type || undefined,\n            defaultValue,\n            isOptional,\n            multiSegmented: nextModifier == \"multi-segmented\" || undefined,\n            segmented:\n                nextModifier == \"segmented\" ||\n                nextModifier == \"multi-segmented\" ||\n                undefined,\n            startRepeats: nextModifier == \"repeats\" || undefined,\n        }\n\n        if (tok == \"{\") {\n            while (words.length) {\n                tok = words.shift()\n                if (tok == \"}\") break\n                tok = camelize(tok)\n                switch (tok) {\n                    case \"maxBytes\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(\"u8\", parseVal(words))\n                        break\n                    }\n                    case \"typicalMin\":\n                    case \"typicalMax\":\n                    case \"absoluteMin\":\n                    case \"absoluteMax\": {\n                        // eslint-disable-next-line @typescript-eslint/no-extra-semi,@typescript-eslint/no-explicit-any\n                        ;(field as any)[tok] = rangeCheck(tp, parseVal(words))\n                        break\n                    }\n                    case \"preferredInterval\": {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if ((packetInfo as any)[tok] !== undefined)\n                            error(`field ${tok} already set`)\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ;(packetInfo as any)[tok] = rangeCheck(\n                            \"u32\",\n                            parseVal(words)\n                        )\n                        break\n                    }\n                    default:\n                        error(\"unknown constraint: \" + tok)\n                        break\n                }\n                if (words[0] == \",\") words.shift()\n            }\n            if (tok == \"}\") tok = null\n        }\n\n        if (tok) error(`excessive tokens at the end of member: ${tok}...`)\n\n        if (\n            field.typicalMin === undefined &&\n            field.typicalMax !== undefined &&\n            storage > 0\n        )\n            field.typicalMin = 0\n\n        if (\n            field.absoluteMin === undefined &&\n            field.absoluteMax !== undefined &&\n            storage > 0\n        )\n            field.absoluteMin = 0\n\n        if (!field.storage && field.maxBytes) field.storage = field.maxBytes\n\n        if (/pipe/.test(type)) {\n            packetInfo.pipeType = packetInfo.name\n            if (\n                pipePacket &&\n                pipePacket.name == packetInfo.name &&\n                packetInfo.kind == \"report\"\n            ) {\n                // keep old pipePacket\n            } else {\n                pipePacket = packetInfo\n            }\n        }\n\n        if (\n            !field.isOptional &&\n            packetInfo.fields[packetInfo.fields.length - 1]?.isOptional\n        ) {\n            error(`all fields after an optional field have to optional`)\n        }\n\n        packetInfo.fields.push(field)\n        nextModifier = undefined\n    }\n\n    function startEnum(words: string[]) {\n        checkBraces(null)\n        if (words[2] != \":\" || words[4] != \"{\")\n            error(\"expecting: enum NAME : TYPE {\")\n        enumInfo = {\n            name: normalizeName(words[1]),\n            storage: normalizeStorageType(words[3])[0],\n            isFlags: words[0] == \"flags\" || undefined,\n            members: {},\n        }\n        if (info.enums[enumInfo.name]) error(\"enum redefinition\")\n        info.enums[enumInfo.name] = enumInfo\n    }\n\n    function enumMember(words: string[]) {\n        if (words[1] != \"=\" || words.length != 3)\n            error(`expecting: FIELD_NAME = INTEGER`)\n        enumInfo.members[normalizeName(words[0])] = rangeCheck(\n            canonicalType(enumInfo.storage),\n            parseIntCheck(words[2])\n        )\n    }\n\n    function parseIntCheck(w: string, allowFloat = false) {\n        try {\n            return parseIntFloat(info, w, allowFloat)\n        } catch (e) {\n            error(e.message)\n            return 0\n        }\n    }\n\n    function looksRandom(n: number) {\n        const s = n.toString(16)\n        const h = \"0123456789abcdef\"\n        for (let i = 0; i < h.length; ++i) {\n            const hh = h[i]\n            if (s.indexOf(hh + hh + hh) >= 0) return false\n        }\n        if (/f00d|dead|deaf|beef/.test(s)) return false\n        return true\n    }\n\n    function genRandom() {\n        for (;;) {\n            const m = (Math.random() * 0xfff_ffff) | 0x1000_0000\n            if (looksRandom(m)) return m\n        }\n    }\n\n    function metadataMember(words: string[]) {\n        if (\n            !(\n                (words[1] == \"=\" || words[1] == \":\") &&\n                (words[0] == \"tags\" || words.length == 3)\n            )\n        )\n            error(`expecting: FIELD_NAME = VALUE or FIELD_NAME : VALUE`)\n        switch (words[0]) {\n            case \"extends\":\n                processInclude(words[2])\n                break\n            case \"class\":\n            case \"identifier\": {\n                info.classIdentifier = parseIntCheck(words[2])\n                if (info.name != \"Control\" && info.classIdentifier == 0)\n                    info.classIdentifier = 1\n                const gen = `how about ${toHex(genRandom())}`\n                if (\n                    !(\n                        info.classIdentifier == 0 ||\n                        (0x1000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x1fff_ff00) ||\n                        (0x2000_0001 <= info.classIdentifier &&\n                            info.classIdentifier <= 0x2ffff_ff00)\n                    )\n                )\n                    error(`class identifier out of range; ${gen}`)\n                if (!looksRandom(info.classIdentifier))\n                    error(`class identifier doesn't look random; ${gen}`)\n                if (usedIds[info.classIdentifier + \"\"])\n                    error(\n                        `class identifier ${toHex(\n                            info.classIdentifier\n                        )} already used in ${\n                            usedIds[info.classIdentifier + \"\"]\n                        }; ${gen}`\n                    )\n                break\n            }\n            case \"camel\":\n                info.camelName = words[2]\n                break\n            case \"short\":\n                info.shortName = words[2]\n                break\n            case \"high\":\n                info.highCommands = !!parseIntCheck(words[2])\n                break\n            case \"status\":\n                if (\n                    [\"stable\", \"experimental\", \"deprecated\"].indexOf(words[2]) >\n                    -1\n                )\n                    info.status = <any>words[2]\n                else error(\"unknown status\")\n                break\n            case \"group\":\n                info.group = capitalize(words.slice(2).join(\" \"))\n                break\n            case \"tags\": {\n                const tags = words.slice(2).filter(w => w != \",\" && w != \";\")\n                info.tags = info.tags.concat(tags)\n                break\n            }\n            default:\n                error(\"unknown metadata field: \" + words[0])\n                break\n        }\n    }\n\n    function processInclude(name: string) {\n        if (name == \"_system\") return\n        const inner = includes[name]\n        if (!inner) return error(\"include file not found: \" + name)\n        if (\n            info.packets.some(pkt => !pkt.derived) ||\n            values(info.enums).some(e => !e.derived)\n        )\n            error(\"extends: only allowed on top of the .md file\")\n        if (inner.errors) errors = errors.concat(inner.errors)\n        const innerEnums = clone(inner.enums)\n        Object.keys(innerEnums)\n            .filter(k => !info.enums[k])\n            .forEach(k => {\n                const ie = innerEnums[k]\n                ie.derived = name\n                info.enums[k] = ie\n            })\n        const innerPackets = clone(\n            inner.packets.filter(\n                pkt =>\n                    !info.packets.find(\n                        ipkt =>\n                            ipkt.kind === pkt.kind &&\n                            ipkt.identifier === pkt.identifier\n                    )\n            )\n        )\n        innerPackets.forEach(pkt => (pkt.derived = name))\n        info.packets = [...info.packets, ...innerPackets]\n        if (inner.highCommands) info.highCommands = true\n        info.extends = inner.extends.concat([name])\n    }\n\n    function clone<T>(v: T): T {\n        return JSON.parse(JSON.stringify(v))\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function warn(msg: string) {\n        if (info.camelName == \"system\") return // no warnings in _system\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n\n    function normalizeName(n: string) {\n        if (!/^\\w+$/.test(n)) error(\"expecting name here\")\n        if (n.length > 31) error(`name '${n}' too long`)\n        return n\n    }\n\n    function normalizeStorageType(\n        tp: string\n    ): [jdspec.StorageType, string, number] {\n        if (info.enums[tp]) return [info.enums[tp].storage, tp, 0]\n        if (!tp) error(\"expecting type here\")\n        const tp2 = tp.replace(/_t$/, \"\").toLowerCase()\n        const m = /^([ui])(\\d+)\\.(\\d+)$/.exec(tp2)\n        if (m) {\n            const a = parseIntCheck(m[2])\n            const b = parseIntCheck(m[3])\n            const len = a + b\n            if (!(len == 8 || len == 16 || len == 32 || len == 64))\n                error(`fixed point ${tp} can't be ${len} bits`)\n            if (a == 0 && m[1] == \"i\")\n                error(\n                    `fixed point ${tp} can't be i0.X; has to be at least i1.X`\n                )\n            return [(m[1] == \"i\" ? -1 : 1) * (len >> 3), tp2, b]\n        }\n\n        switch (tp2) {\n            case \"bool\":\n                return [1, tp2, 0]\n            case \"i8\":\n            case \"u8\":\n            case \"i16\":\n            case \"u16\":\n            case \"i32\":\n            case \"u32\":\n            case \"i64\":\n            case \"u64\": {\n                let sz = parseIntCheck(tp2.replace(/^./, \"\")) >> 3\n                if (tp2[0] == \"i\") sz = -sz\n                return [sz, tp2, 0]\n            }\n            case \"f16\":\n                return [2, tp2, null]\n            case \"f32\":\n                return [4, tp2, null]\n            case \"f64\":\n                return [8, tp2, null]\n            case \"pipe\":\n                return [12, tp2, 0]\n            case \"pipe_port\":\n                return [2, tp2, 0]\n            case \"devid\":\n                return [8, tp2, 0]\n            case \"bytes\":\n            case \"string\":\n            case \"string0\":\n                return [0, tp2, 0]\n            default: {\n                const m = /^u8\\[(\\d+)\\]$/.exec(tp2)\n                if (m) return [parseIntCheck(m[1]), tp2, 0]\n                error(\"unknown type: \" + tp + \" \" + tp2)\n                return [4, tp2, 0]\n            }\n        }\n    }\n\n    function normalizeUnit(unit: string): jdspec.Unit {\n        if (unit === undefined || unit === null) return \"\"\n\n        if (unitDescription[unit] || secondaryUnitConverters[unit])\n            return unit as jdspec.Unit\n        error(`expecting unit, got '${unit}'`)\n        return \"\"\n    }\n\n    function hasNaturalAlignment(iface: jdspec.PacketInfo) {\n        let byteOffset = 0\n\n        for (const m of iface.fields) {\n            const sz = memberSize(m)\n            if (sz == 0) continue\n            const pad = sz > 4 ? 4 : sz\n            if (!/^u8\\[/.test(m.type) && byteOffset % pad != 0) return false\n            byteOffset += sz\n        }\n\n        return true\n    }\n}\n\nfunction values<T>(o: jdspec.SMap<T>): T[] {\n    const r: T[] = []\n    for (const k of Object.keys(o)) r.push(o[k])\n    return r\n}\n\nfunction fail(msg: string) {\n    throw new Error(msg)\n}\n\nfunction toUpper(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toUpperCase()\n}\n\nfunction toLower(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (x, a, b) => a + \"_\" + b)\n        .toLowerCase()\n}\n\nfunction packed(iface: jdspec.PacketInfo) {\n    if (!iface.packed) return \"\"\n    else return \" __attribute__((packed))\"\n}\n\nfunction cStorage(tp: jdspec.StorageType) {\n    if (tp == 0 || [1, 2, 4, 8].indexOf(Math.abs(tp)) < 0) return \"bytes\"\n    if (tp < 0) return `int${-tp * 8}_t`\n    else return `uint${tp * 8}_t`\n}\n\nfunction canonicalType(tp: jdspec.StorageType): string {\n    if (tp == 0) return \"bytes\"\n    if (tp < 0) return `i${-tp * 8}`\n    else return `u${tp * 8}`\n}\n\nfunction isRegister(k: jdspec.PacketKind) {\n    return k == \"ro\" || k == \"rw\" || k == \"const\"\n}\n\nfunction toHex(n: number): string {\n    if (n === undefined) return \"\"\n    if (n < 0) return \"-\" + toHex(n)\n    return \"0x\" + n.toString(16)\n}\n\nfunction unitPref(f: jdspec.PacketMember) {\n    if (!f.unit) return \"\"\n    else return prettyUnit(f.unit) + \" \"\n}\n\nfunction prettyUnit(u: jdspec.Unit): string {\n    switch (u) {\n        case \"us\":\n            return \"μs\"\n        case \"C\":\n            return \"°C\"\n        case \"/\":\n            return \"ratio\"\n        default:\n            return u\n    }\n}\n\nfunction toH(info: jdspec.ServiceSpec) {\n    let r = \"// Autogenerated C header file for \" + info.name + \"\\n\"\n    const hdDef = `_JACDAC_SPEC_${toUpper(info.camelName)}_H`\n    r += `#ifndef ${hdDef}\\n`\n    r += `#define ${hdDef} 1\\n`\n\n    let pref = \"JD_\" + toUpper(info.shortName) + \"_\"\n\n    if (info.shortId[0] == \"_\") pref = \"JD_\"\n\n    if (info.shortId[0] != \"_\")\n        r += `\\n#define JD_SERVICE_CLASS_${toUpper(info.shortName)}  ${toHex(\n            info.classIdentifier\n        )}\\n`\n\n    for (const en of values(info.enums).filter(en => !en.derived)) {\n        const enPref = pref + toUpper(en.name)\n        r += `\\n// enum ${en.name} (${cStorage(en.storage)})\\n`\n        for (const k of Object.keys(en.members))\n            r +=\n                \"#define \" +\n                enPref +\n                \"_\" +\n                toUpper(k) +\n                \" \" +\n                toHex(en.members[k]) +\n                \"\\n\"\n    }\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        r += wrapComment(cmt.comment)\n\n        if (\n            !pkt.secondary &&\n            pkt.kind != \"pipe_command\" &&\n            pkt.kind != \"pipe_report\"\n        ) {\n            let inner = \"CMD\"\n            if (isRegister(pkt.kind)) inner = \"REG\"\n            else if (pkt.kind == \"event\") inner = \"EV\"\n            else if (\n                pkt.kind == \"meta_pipe_command\" ||\n                pkt.kind == \"meta_pipe_report\"\n            )\n                inner = \"PIPE\"\n            let val = toHex(pkt.identifier)\n            if (pkt.identifierName)\n                val = \"JD_\" + inner + \"_\" + toUpper(pkt.identifierName)\n            const name = pref + inner + \"_\" + toUpper(pkt.name)\n            if (name != val) r += `#define ${name} ${val}\\n`\n        }\n\n        const isMetaPipe =\n            pkt.kind == \"meta_pipe_report\" || pkt.kind == \"meta_pipe_command\"\n\n        if (cmt.needsStruct || isMetaPipe) {\n            let tname =\n                \"jd_\" + toLower(info.camelName) + \"_\" + toLower(pkt.name)\n            if (pkt.kind == \"report\") tname += \"_report\"\n            r += `typedef struct ${tname} {\\n`\n            if (isMetaPipe) {\n                r += `    uint32_t identifier; // ${toHex(pkt.identifier)}\\n`\n            }\n            let unaligned = \"\"\n            for (let i = 0; i < pkt.fields.length; ++i) {\n                const f = pkt.fields[i]\n                let def = \"\"\n                const cst = cStorage(f.storage)\n                const sz = memberSize(f)\n                if (f.type == \"string\" || f.type == \"string0\")\n                    def = `char ${f.name}[${sz}]`\n                else if (cst == \"bytes\") def = `uint8_t ${f.name}[${sz}]`\n                else def = `${cst} ${f.name}`\n                // if it's the last field and it start repeats, treat it as an array\n                if (f.startRepeats && i == pkt.fields.length - 1) def += \"[0]\"\n                def += \";\"\n                if (!f.isSimpleType && f.type != \"devid\")\n                    def += \"  // \" + unitPref(f) + f.type\n                else if (f.unit) def += \" // \" + prettyUnit(f.unit)\n                r += \"    \" + unaligned + def + \"\\n\"\n                if (f.type == \"string0\") unaligned = \"// \"\n            }\n            r += `}${packed(pkt)} ${tname}_t;\\n\\n`\n        }\n    }\n    r += \"\\n#endif\\n\"\n    return r\n}\n\nexport function camelize(name: string) {\n    if (!name) return name\n    return (\n        name[0].toLowerCase() +\n        name.slice(1).replace(/_([a-z0-9])/gi, (_, l) => l.toUpperCase())\n    )\n}\n\nexport function capitalize(name: string) {\n    if (!name) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nfunction upperCamel(name: string) {\n    name = camelize(name)\n    if (!name?.length) return name\n    return name[0].toUpperCase() + name.slice(1)\n}\n\nexport function snakify(name: string) {\n    return name?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \"_\" + b)\n}\n\nexport function dashify(name: string) {\n    if (!name) return name\n    return snakify(name.replace(/^_+/, \"\")).replace(/_/g, \"-\").toLowerCase()\n}\n\nexport function humanify(name: string) {\n    return name\n        ?.replace(/([a-z])([A-Z])/g, (_, a, b) => a + \" \" + b)\n        .replace(/(-|_)/g, \" \")\n}\n\nfunction addComment(pkt: jdspec.PacketInfo) {\n    let comment = \"\"\n\n    let typeInfo = \"\"\n    let needsStruct = false\n    if (pkt.fields.length == 0) {\n        if (pkt.kind != \"event\") typeInfo = \"No args\"\n    } else if (pkt.fields.length == 1 && !pkt.fields[0].startRepeats) {\n        const f0 = pkt.fields[0]\n        typeInfo = cStorage(f0.storage)\n        if (!f0.isSimpleType) typeInfo = f0.type + \" (\" + typeInfo + \")\"\n        typeInfo = unitPref(f0) + typeInfo\n        if (f0.name != \"_\") typeInfo = f0.name + \" \" + typeInfo\n    } else {\n        needsStruct = true\n    }\n\n    if (pkt.fields.length == 1) {\n        if (isRegister(pkt.kind)) {\n            let info = \"\"\n            if (pkt.kind == \"ro\") info = \"Read-only\"\n            else if (pkt.kind == \"const\") info = \"Constant\"\n            else info = \"Read-write\"\n            if (typeInfo) typeInfo = info + \" \" + typeInfo\n            else typeInfo = info\n        } else if (typeInfo) {\n            typeInfo = \"Argument: \" + typeInfo\n        }\n    }\n\n    if (pkt.kind == \"report\" && pkt.secondary) {\n        comment += \"Report: \" + typeInfo + \"\\n\"\n    } else {\n        if (pkt.description) {\n            let desc = pkt.description.replace(/\\n\\n[^]*/, \"\")\n            if (typeInfo) desc = typeInfo + \". \" + desc\n            comment = desc + \"\\n\" + comment\n        }\n    }\n\n    return {\n        comment,\n        needsStruct,\n    }\n}\n\nfunction wrapComment(comment: string) {\n    return (\n        \"\\n/**\\n * \" +\n        comment.replace(/\\n+$/, \"\").replace(/\\n/g, \"\\n * \") +\n        \"\\n */\\n\"\n    )\n}\n\nfunction wrapSnippet(code: string) {\n    if (!code) return code\n    return `\n\\`\\`\\`\n${code.replace(/^\\n+/, \"\").replace(/\\n+$/, \"\")}\n\\`\\`\\`\n`\n}\n\nexport const TYPESCRIPT_STATIC_NAMESPACE = \"jacdac\"\nfunction packFormatForField(\n    info: jdspec.ServiceSpec,\n    fld: jdspec.PacketMember,\n    isStatic?: boolean,\n    useBooleans?: boolean\n) {\n    const sz = memberSize(fld)\n    const szSuff = sz ? `[${sz}]` : ``\n    let tsType = \"number\"\n    let fmt = \"\"\n    if (/^[fiu]\\d+(\\.\\d+)?$/.test(fld.type) && 1 <= sz && sz <= 8) {\n        fmt = fld.type\n    } else if (/^u8\\[\\d*\\]$/.exec(fld.type)) {\n        fmt = \"b\" + szSuff\n    } else if (info.enums[fld.type]) {\n        fmt = canonicalType(info.enums[fld.type].storage)\n        tsType = upperCamel(info.camelName) + upperCamel(fld.type)\n        if (isStatic) tsType = TYPESCRIPT_STATIC_NAMESPACE + \".\" + tsType\n    } else {\n        switch (fld.type) {\n            case \"string\":\n                fmt = \"s\" + szSuff\n                tsType = \"string\"\n                break\n            case \"bytes\":\n                fmt = \"b\" + szSuff\n                break\n            case \"string0\":\n                fmt = \"z\"\n                tsType = \"string\"\n                break\n            case \"devid\":\n                fmt = \"b[8]\"\n                break\n            case \"pipe_port\":\n                fmt = \"u16\"\n                break\n            case \"pipe\":\n                fmt = \"b[12]\"\n                break\n            case \"bool\":\n                // TODO native bool support\n                fmt = \"u8\"\n                if (useBooleans) tsType = \"boolean\"\n                break\n            default:\n                return null\n        }\n    }\n\n    if (tsType == \"number\" && fmt && fmt[0] == \"b\") tsType = \"Buffer\"\n    return { fmt, tsType }\n}\n\n/**\n * Generates the format to pack/unpack a data payload for this packet\n * @param pkt\n * TODO fix this\n */\nexport function packFormat(\n    sinfo: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    useBooleans?: boolean\n): string {\n    if (pkt.packed || !pkt.fields?.length) return undefined\n\n    const fmt: string[] = []\n    for (const fld of pkt.fields) {\n        if (fld.startRepeats) fmt.push(\"r:\")\n        const ff = packFormatForField(sinfo, fld, false, useBooleans)\n        if (!ff) return undefined\n        fmt.push(ff.fmt)\n    }\n\n    return fmt.join(\" \")\n}\n\nexport function packInfo(\n    info: jdspec.ServiceSpec,\n    pkt: jdspec.PacketInfo,\n    isStatic: boolean,\n    useBooleans?: boolean\n) {\n    const vars: string[] = []\n    const vartp: string[] = []\n    let fmt = \"\"\n    let repeats: string[]\n    let reptp: string[]\n\n    for (let i = 0; i < pkt.fields.length; ++i) {\n        const fld = pkt.fields[i]\n        let isArray = \"\"\n        if (fld.startRepeats) {\n            if (i == pkt.fields.length - 1) {\n                isArray = \"[]\"\n            } else {\n                fmt += \"r: \"\n                repeats = []\n                reptp = []\n                vars.push(\"rest\")\n            }\n        }\n        const varname = camelize(fld.name == \"_\" ? pkt.name : fld.name)\n        const f0 = packFormatForField(info, fld, isStatic, useBooleans)\n        if (!f0 || /(reserved|padding)/.test(fld.name)) {\n            if (!f0)\n                console.log(\n                    `${pkt.name}/${fld.name} - can't get format for '${fld.type}'`\n                )\n            fmt += `x[${memberSize(fld)}] `\n        } else {\n            fmt += f0.fmt + isArray + \" \"\n            let tp = f0.tsType\n            if (tp == \"Buffer\" && !isStatic) tp = \"Uint8Array\"\n            tp += isArray\n            if (repeats) {\n                repeats.push(varname)\n                reptp.push(tp)\n            } else {\n                vars.push(varname)\n                vartp.push(tp)\n            }\n        }\n    }\n\n    fmt = fmt.replace(/ *$/, \"\")\n\n    if (reptp) vartp.push(\"([\" + reptp.join(\", \") + \"])[]\")\n\n    let buffers = \"\"\n    buffers += `const [${vars.join(\", \")}] = jdunpack<[${vartp.join(\n        \", \"\n    )}]>(buf, \"${fmt}\")\\n`\n    if (repeats) buffers += `const [${repeats.join(\", \")}] = rest[0]\\n`\n\n    buffers = buffers.replace(/\\n*$/, \"\")\n\n    return {\n        buffers,\n        names: vars,\n        types: vartp,\n    }\n}\n\nfunction memberSize(fld: jdspec.PacketMember) {\n    return Math.abs(fld.storage)\n}\n\nfunction toTypescript(info: jdspec.ServiceSpec, staticTypeScript: boolean) {\n    const indent = staticTypeScript ? \"    \" : \"\"\n    const indent2 = indent + \"    \"\n    const enumkw = staticTypeScript\n        ? indent + \"export const enum\"\n        : \"export enum\"\n    let r = staticTypeScript\n        ? `namespace ${TYPESCRIPT_STATIC_NAMESPACE} {\\n`\n        : \"\"\n    r += indent + \"// Service: \" + info.name + \"\\n\"\n    if (info.shortId[0] != \"_\") {\n        r +=\n            indent +\n            `export const SRV_${snakify(\n                info.camelName\n            ).toLocaleUpperCase()} = ${toHex(info.classIdentifier)}\\n`\n    }\n    const pref = upperCamel(info.camelName)\n    for (const en of values(info.enums)) {\n        const enPref = pref + upperCamel(en.name)\n        r += `\\n${enumkw} ${enPref} { // ${cStorage(en.storage)}\\n`\n        for (const k of Object.keys(en.members))\n            r += indent2 + k + \" = \" + toHex(en.members[k]) + \",\\n\"\n        r += indent + \"}\\n\\n\"\n    }\n    const tsEnums: jdspec.SMap<string> = {}\n\n    for (const pkt of info.packets) {\n        if (pkt.derived) continue\n\n        const cmt = addComment(pkt)\n        const pack = pkt.fields.length\n            ? packInfo(info, pkt, staticTypeScript).buffers\n            : \"\"\n\n        let inner = \"Cmd\"\n        if (isRegister(pkt.kind)) inner = \"Reg\"\n        else if (pkt.kind == \"event\") inner = \"Event\"\n        else if (\n            pkt.kind == \"meta_pipe_command\" ||\n            pkt.kind == \"meta_pipe_report\"\n        )\n            inner = \"PipeCmd\"\n        else if (pkt.kind == \"pipe_command\" || pkt.kind == \"pipe_report\")\n            inner = \"info\"\n\n        let text = \"\"\n        let meta = \"\"\n        if (pkt.secondary || inner == \"info\") {\n            if (pack)\n                text = wrapComment(\n                    `${pkt.kind} ${upperCamel(pkt.name)}${wrapSnippet(pack)}`\n                )\n        } else {\n            const val = toHex(pkt.identifier)\n            if (staticTypeScript && pkt.kind === \"event\") {\n                meta = `//% block=\"${snakify(pkt.name).replace(/_/g, \" \")}\"\\n`\n            }\n            text = `${\n                wrapComment(cmt.comment + wrapSnippet(pack)) + meta\n            }${upperCamel(pkt.name)} = ${val},\\n`\n        }\n\n        if (text) tsEnums[inner] = (tsEnums[inner] || \"\") + text\n\n        // don't line const strings in makecode,\n        // they don't get dropped efficiently\n    }\n\n    for (const k of Object.keys(tsEnums)) {\n        if (k == \"info\") r += tsEnums[k].replace(/^/gm, indent) + \"\\n\\n\"\n        else {\n            const inner = tsEnums[k]\n                .replace(/^\\n+/, \"\")\n                .replace(/\\n$/, \"\")\n                .replace(/\\n/g, \"\\n    \" + indent)\n            r += `${enumkw} ${pref}${k} {\\n    ${indent}${inner}\\n${indent}}\\n\\n`\n        }\n    }\n\n    if (staticTypeScript) r += \"}\\n\"\n\n    return r.replace(/ *$/gm, \"\")\n}\n\nexport function normalizeDeviceSpecification(dev: jdspec.DeviceSpec) {\n    // reorder fields\n    const clone: jdspec.DeviceSpec = {\n        id: (dev.id =\n            escapeDeviceIdentifier(dev.company) +\n            \"-\" +\n            escapeDeviceNameIdentifier(dev.name)),\n        name: dev.name,\n        company: dev.company,\n        description: dev.description,\n        repo: dev.repo,\n        link: dev.link,\n        services: dev.services || [],\n        firmwares: dev.firmwares || [],\n    }\n    return clone\n}\n\nexport function escapeDeviceIdentifier(text: string) {\n    if (!text) text = \"\"\n    const escaped = text\n        .trim()\n        .toLowerCase()\n        .replace(/([^a-z0-9_-])+/gi, \"-\")\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\")\n    const id = snakify(escaped)\n    return id\n}\n\nexport function escapeDeviceNameIdentifier(text: string) {\n    return escapeDeviceIdentifier(text).replace(/-/g, \"\")\n}\n\nexport function converters(): jdspec.SMap<(s: jdspec.ServiceSpec) => string> {\n    return {\n        json: (j: jdspec.ServiceSpec) => JSON.stringify(j, null, 2),\n        c: toH,\n        ts: j => toTypescript(j, false),\n        sts: j => toTypescript(j, true),\n        /*\n        \"cpp\": toHPP,\n        */\n    }\n}\n\nexport function isNumericType(field: jdspec.PacketMember) {\n    const tp = field.type\n    return (\n        !field.startRepeats &&\n        /^[uif]\\d+(\\.\\d+)?$/.test(tp) &&\n        tp != \"pipe_port\" &&\n        tp != \"bool\"\n    )\n}\n"],"sourceRoot":""}