{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCompass.tsx"],"names":["DashboardCompass","props","service","headingRegister","useRegister","CompassReg","enabledRegister","useRegisterUnpackedValue","heading","enabled","useRegisterBoolValue","statusCodeRegister","status","off","server","useServiceServer","color","useWidgetTheme","background","controlBackground","active","textProps","undefined","calibrating","SystemStatusCodes","w","h","mw","r","sw","cx","cy","sp","pr","pri","handleChange","ev","newValue","reading","setValues","refresh","valueDisplay","angle","Math","round","toggleOff","sendSetBoolAsync"],"mappings":"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","file":"1025-56c8a98f38aef74462af.js","sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid, Slider } from \"@material-ui/core\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport {\n    CompassReg,\n    SystemStatusCodes,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport PowerButton from \"../widgets/PowerButton\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardCompass(props: DashboardServiceProps) {\n    const { service } = props\n\n    const headingRegister = useRegister(service, CompassReg.Heading)\n    const enabledRegister = useRegister(service, CompassReg.Enabled)\n    const [heading] = useRegisterUnpackedValue<[number]>(headingRegister, props)\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [status] = useRegisterUnpackedValue<[SystemStatusCodes, number]>(\n        service.statusCodeRegister,\n        props\n    )\n    const off = !enabled\n\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n\n    if (heading === undefined) return <LoadingProgress />\n\n    const calibrating = status === SystemStatusCodes.Calibrating\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const r = (w >> 1) - 4\n    const sw = 3\n    const cx = w >> 1\n    const cy = h >> 1\n    const sp = 1\n    const pr = 5\n    const pri = 3\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await server?.reading.setValues([newValue as number])\n        headingRegister.refresh()\n    }\n    const valueDisplay = (angle: number) => `${Math.round(angle)}Â°`\n    const toggleOff = () => enabledRegister.sendSetBoolAsync(off, true)\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    <circle\n                        cx={cx}\n                        cy={cy}\n                        r={r}\n                        fill={controlBackground}\n                        stroke={background}\n                        strokeWidth={sw}\n                    />\n                    <g\n                        transform={`rotate(${off ? 0 : heading}, ${w >> 1}, ${\n                            h >> 1\n                        })`}\n                    >\n                        <path\n                            d={`M ${cx - mw} ${\n                                cy + sp / 2\n                            } l ${mw} ${r} l ${mw} ${-r} z`}\n                            fill={background}\n                            stroke={background}\n                            strokeWidth={sp}\n                        />\n                        <path\n                            d={`M ${cx - mw} ${\n                                cy - sp / 2\n                            } l ${mw} ${-r} l ${mw} ${r} z`}\n                            stroke={background}\n                            fill={off ? controlBackground : active}\n                            strokeWidth={sp}\n                        />\n                    </g>\n                    {calibrating && (\n                        <circle\n                            cx={cx}\n                            cy={cy}\n                            r={r}\n                            opacity={0.9}\n                            fill={background}\n                        />\n                    )}\n                    {calibrating && (\n                        <text x={cx} y={cy} fontSize={8} {...textProps}>\n                            calibrating\n                        </text>\n                    )}\n                    <PowerButton\n                        r={pr}\n                        ri={pri}\n                        cx={w - pr - 1}\n                        cy={h - pr - 1}\n                        color={color}\n                        strokeWidth={1}\n                        off={off}\n                        onClick={toggleOff}\n                    />\n                </SvgWidget>\n            </Grid>\n            {server && (\n                <Grid item>\n                    <Slider\n                        color={color}\n                        valueLabelDisplay=\"auto\"\n                        valueLabelFormat={valueDisplay}\n                        min={0}\n                        max={360}\n                        step={1}\n                        value={heading}\n                        onChange={handleChange}\n                        aria-label=\"heading\"\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}