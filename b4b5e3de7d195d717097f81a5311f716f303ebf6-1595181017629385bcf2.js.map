{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts"],"names":["GLOBAL_CHANGE","VMExceptionCode","VMException","code","data","Error","VMServiceEnvironment","service","_registers","_events","registerRegister","regName","handler","pkt","specification","packets","find","isRegister","name","register","identifier","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","sendCommandAsync","command","values","commandName","p","isCommand","sendCmdAsync","jdpack","packFormat","writeRegisterAsync","ev","SystemReg","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","isIntensity","fields","type","lookupRegisterAsync","e","root","object","fld","undefined","property","refresh","unpackedValue","field","f","value","JDServiceClient","VMEnvironment","registers","events","_currentEvent","_envs","_globals","globals","serviceChanged","role","unmount","forEach","r","reg","serviceEnv","getService","emit","getRootName","s","RoleNoService","lookupAsync","roleName","me","local","writeGlobal","firstType","TypeMismatch","toString","consumeEvent","hasEvent","unsubscribe","Object","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","evalAsync","visitExpressionAsync","ret","push","top","Math","abs","le","val","id","lit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAIA;AACA;AACA;AAKO,IAAMA,aAAa,GAAG,mBAAtB;AAEA,IAAKC,eAAZ;;WAAYA,e;AAAAA,iB;AAAAA,iB;AAAAA,iB;GAAAA,e,KAAAA,e;;AAML,IAAMC,WAAb;AAAA;;AACI,uBAAqBC,IAArB,EAAqDC,IAArD,EAAmE;AAAA;;AAC/D;AAD+D,UAA9CD,IAA8C,GAA9CA,IAA8C;AAAA,UAAdC,IAAc,GAAdA,IAAc;AAAA;AAElE;;AAHL;AAAA,6GAAiCC,KAAjC;AAMO,IAAMC,oBAAb;AAAA;;AAII,gCAAYC,OAAZ,EAAgC;AAAA;;AAC5B,yCAAMA,OAAN;AAD4B,WAHxBC,UAGwB,GAHO,EAGP;AAAA,WAFxBC,OAEwB,GAFC,EAED;AAAA;AAE/B;;AANL;;AAAA,SAQWC,gBARX,GAQI,0BAAwBC,OAAxB,EAAyCC,OAAzC,EAA8D;AAC1D,QAAI,CAAC,KAAKJ,UAAL,CAAgBG,OAAhB,CAAL,EAA+B;AAC3B,UAAME,GAAG,GAAG,KAAKN,OAAL,CAAaO,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACR,UAAAH,GAAG;AAAA,eAAII,gEAAU,CAACJ,GAAD,CAAV,IAAmBA,GAAG,CAACK,IAAJ,KAAaP,OAApC;AAAA,OADK,CAAZ;;AAGA,UAAIE,GAAJ,EAAS;AACL,YAAMM,QAAQ,GAAG,KAAKZ,OAAL,CAAaY,QAAb,CAAsBN,GAAG,CAACO,UAA1B,CAAjB;AACA,aAAKZ,UAAL,CAAgBG,OAAhB,IAA2BQ,QAA3B;AACA,aAAKE,KAAL,CAAWF,QAAQ,CAACG,SAAT,CAAmBC,8DAAnB,EAA2BX,OAA3B,CAAX;AACH;AACJ;AACJ,GAnBL;;AAAA,SAqBWY,aArBX,GAqBI,uBAAqBC,SAArB,EAAwCb,OAAxC,EAA6D;AACzD,QAAI,CAAC,KAAKH,OAAL,CAAagB,SAAb,CAAL,EAA8B;AAC1B,UAAMZ,GAAG,GAAG,KAAKN,OAAL,CAAaO,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACR,UAAAH,GAAG;AAAA,eAAIa,6DAAO,CAACb,GAAD,CAAP,IAAgBA,GAAG,CAACK,IAAJ,KAAaO,SAAjC;AAAA,OADK,CAAZ;;AAGA,UAAIZ,GAAJ,EAAS;AACL,YAAMc,KAAK,GAAG,KAAKpB,OAAL,CAAaoB,KAAb,CAAmBd,GAAG,CAACO,UAAvB,CAAd;AACA,aAAKX,OAAL,CAAagB,SAAb,IAA0BE,KAA1B;AACA,aAAKN,KAAL,CAAWM,KAAK,CAACL,SAAN,CAAgBM,6DAAhB,EAAuBhB,OAAvB,CAAX;AACH;AACJ;AACJ,GAhCL;;AAAA,SAkCiBiB,gBAlCjB;AAAA,+MAkCI,iBACIC,OADJ,EAEIC,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAIUC,yBAJV,GAIwBF,OAJxB,aAIwBA,OAJxB,uBAIwBA,OAAO,CAAEZ,IAJjC;AAKUL,iBALV,GAKgB,KAAKN,OAAL,CAAaO,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACR,UAAAiB,CAAC;AAAA,uBAAIC,+DAAS,CAACD,CAAD,CAAT,IAAgBA,CAAC,CAACf,IAAF,KAAWc,WAA/B;AAAA,eADO,CALhB;;AAAA,mBAQQnB,GARR;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASc,KAAKN,OAAL,CAAa4B,YAAb,CACFtB,GAAG,CAACO,UADF,EAEFgB,4DAAM,CAACvB,GAAG,CAACwB,UAAL,EAAiBN,MAAjB,CAFJ,EAGF,IAHE,CATd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlCJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmDiBO,kBAnDjB;AAAA,iNAmDI,kBAAgC3B,OAAhC,EAAiD4B,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AACUpB,sBADV,GACqB,KAAKX,UAAL,CAAgBG,OAAhB,CADrB;;AAAA,oBAEQQ,QAAQ,CAAChB,IAAT,KAAkBqC,6EAF1B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEiD,KAAKC,UAAL,EAFjD;;AAAA;AAAA;AAAA,qBAGU,KAAKC,aAAL,CAAmB,KAAKlC,UAAL,CAAgBG,OAAhB,CAAnB,EAA6C4B,EAA7C,CAHV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyDkBG,aAzDlB;AAAA,4MAyDI,kBAA4BC,KAA5B,EAA+CJ,EAA/C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACUI,KADV,aACUA,KADV,uBACUA,KAAK,CAAEC,kBAAP,yBACFD,KAAK,CAAC7B,aADJ,yDACF,qBAAqBuB,UADnB,EAEF,CAACE,EAAD,CAFE,EAGF,IAHE,CADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiEkBE,UAjElB;AAAA,yMAiEI;AAAA;AAAA;AAAA;AAAA;AAAA;AACU5B,iBADV,GACgB,KAAKN,OAAL,CAAaO,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CAAwC6B,6DAAxC,CADhB;;AAAA,oBAEQhC,GAAG,IAAIA,GAAG,CAACiC,MAAJ,CAAW,CAAX,EAAcC,IAAd,KAAuB,MAFtC;AAAA;AAAA;AAAA;;AAGcJ,mBAHd,GAGsB,KAAKpC,OAAL,CAAaY,QAAb,CAAsBqB,qFAAtB,CAHtB;AAAA;AAAA,qBAIc,KAAKE,aAAL,CAAmBC,KAAnB,EAA0B,IAA1B,CAJd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjEJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyEiBK,mBAzEjB;AAAA,kNAyEI,kBAAiCC,CAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,kBADV,GAEQ,OAAOD,CAAP,KAAa,QAAb,GACMA,CADN,GAEMA,CAAC,CAACF,IAAF,KAAW,YAAX,GACAE,CAAC,CAAC/B,IADF,GAEC+B,CAAC,CAACE,MAAH,CAA8BjC,IAN5C;AAOUkC,iBAPV,GAQQ,OAAOH,CAAP,KAAa,QAAb,GACMI,SADN,GAEMJ,CAAC,CAACF,IAAF,KAAW,YAAX,GACAM,SADA,GAECJ,CAAC,CAACK,QAAH,CAAgCpC,IAZ9C;;AAAA,oBAaQgC,IAAI,IAAI,KAAK1C,UAbrB;AAAA;AAAA;AAAA;;AAccW,sBAdd,GAcyB,KAAKX,UAAL,CAAgB0C,IAAhB,CAdzB;AAAA;AAAA,qBAec/B,QAAQ,CAACoC,OAAT,EAfd;;AAAA;AAAA,kBAgBaH,GAhBb;AAAA;AAAA;AAAA;;AAAA,yEAgByBjC,QAAQ,CAACqC,aAhBlC,0DAgByB,sBAAyB,CAAzB,CAhBzB;;AAAA;AAkBkBC,mBAlBlB,GAkB0BtC,QAAQ,CAAC2B,MAAT,CAAgB9B,IAAhB,CACV,UAAA0C,CAAC;AAAA,uBAAIA,CAAC,CAACxC,IAAF,KAAWkC,GAAf;AAAA,eADS,CAlB1B;AAAA,gDAqBmBK,KArBnB,aAqBmBA,KArBnB,uBAqBmBA,KAAK,CAAEE,KArB1B;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAuBeT,IAAI,IAAI,KAAKzC,OAvB5B;AAAA;AAAA;AAAA;;AAwBcgD,oBAxBd,4BAwBsB,KAAKhD,OAAL,CAAayC,IAAb,EAAmBJ,MAxBzC,0DAwBsB,sBAA2B9B,IAA3B,CAAgC,UAAA0C,CAAC;AAAA,uBAAIA,CAAC,CAACxC,IAAF,KAAWkC,GAAf;AAAA,eAAjC,CAxBtB;AAAA,gDAyBeK,MAzBf,aAyBeA,MAzBf,uBAyBeA,MAAK,CAAEE,KAzBtB;;AAAA;AAAA,gDA2BWN,SA3BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzEJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA0CO,yEAA1C;AA6GO,IAAMC,aAAb;AAAA;;AAQI,yBACYC,SADZ,EAEYC,MAFZ,EAGE;AAAA;;AACE;AADF,WAPMC,aAON,GAP8BX,SAO9B;AAAA,WANMY,KAMN,GAN0C,EAM1C;AAAA,WALMC,QAKN,GALuC,EAKvC;AAAA,WAFUJ,SAEV,GAFUA,SAEV;AAAA,WADUC,MACV,GADUA,MACV;AAAA;AAED;;AAbL;;AAAA,UAeWI,OAfX,GAeI,mBAAiB;AACb,WAAO,KAAKD,QAAZ;AACH,GAjBL;;AAAA,UAmBWE,cAnBX,GAmBI,wBAAsBC,IAAtB,EAAoC9D,OAApC,EAAwD;AAAA;;AACpD,QAAI,KAAK0D,KAAL,CAAWI,IAAX,CAAJ,EAAsB;AAClB,WAAKJ,KAAL,CAAWI,IAAX,EAAiBC,OAAjB;;AACA,WAAKL,KAAL,CAAWI,IAAX,IAAmBhB,SAAnB;AACH;;AACD,QAAI9C,OAAJ,EAAa;AACT,WAAK0D,KAAL,CAAWI,IAAX,IAAmB,IAAI/D,oBAAJ,CAAyBC,OAAzB,CAAnB;AACA,WAAKuD,SAAL,CAAeS,OAAf,CAAuB,UAAAC,CAAC,EAAI;AACxB,YAAIA,CAAC,CAACH,IAAF,KAAWA,IAAf,EAAqB;AACjB,gBAAI,CAAC3D,gBAAL,CAAsB2D,IAAtB,EAA4BG,CAAC,CAACrD,QAA9B;AACH;AACJ,OAJD;AAKA,WAAK4C,MAAL,CAAYQ,OAAZ,CAAoB,UAAAtB,CAAC,EAAI;AACrB,YAAIA,CAAC,CAACoB,IAAF,KAAWA,IAAf,EAAqB;AACjB,gBAAI,CAAC7C,aAAL,CAAmB6C,IAAnB,EAAyBpB,CAAC,CAACtB,KAA3B;AACH;AACJ,OAJD;AAKH;AACJ,GArCL;;AAAA,UAuCWjB,gBAvCX,GAuCI,0BAAwB2D,IAAxB,EAAsCI,GAAtC,EAAmD;AAAA;;AAC/C,QAAI;AACA,UAAMC,UAAU,GAAG,KAAKC,UAAL,CAAgBN,IAAhB,CAAnB;AACAK,gBAAU,CAAChE,gBAAX,CAA4B+D,GAA5B,EAAiC,YAAM;AACnC,cAAI,CAACG,IAAL,CAAUrD,8DAAV;AACH,OAFD;AAGH,KALD,CAKE,OAAO0B,CAAP,EAAU,CACR;AACH;AACJ,GAhDL;;AAAA,UAkDWzB,aAlDX,GAkDI,uBAAqB6C,IAArB,EAAmC9B,EAAnC,EAA+C;AAAA;;AAC3C,QAAI;AACA,UAAMmC,UAAU,GAAG,KAAKC,UAAL,CAAgBN,IAAhB,CAAnB;AACAK,gBAAU,CAAClD,aAAX,CAAyBe,EAAzB,EAA6B,YAAM;AAC/B,cAAI,CAACyB,aAAL,GAAwBK,IAAxB,SAAgC9B,EAAhC;;AACA,cAAI,CAACqC,IAAL,CAAUrD,8DAAV;AACH,OAHD;AAIH,KAND,CAME,OAAO0B,CAAP,EAAU,CACR;AACH;AACJ,GA5DL;;AAAA,UA8DY4B,WA9DZ,GA8DI,qBAAoB5B,CAApB,EAAuD;AACnD,QAAI,CAACA,CAAL,EAAQ,OAAOI,SAAP;AACR,QAAI,OAAOJ,CAAP,KAAa,QAAjB,EAA2B,OAAOA,CAAP;AAC3B,QAAIA,CAAC,CAACF,IAAF,KAAW,kBAAf,EACI,OAAQE,CAAC,CAACE,MAAH,CAA8BjC,IAArC;AACJ,WAAOmC,SAAP;AACH,GApEL;;AAAA,UAsEYsB,UAtEZ,GAsEI,oBAAmB1B,CAAnB,EAAsD;AAClD,QAAMC,IAAI,GAAG,KAAK2B,WAAL,CAAiB5B,CAAjB,CAAb;AACA,QAAI,CAACC,IAAL,EAAW,OAAOG,SAAP;AACX,QAAMyB,CAAC,GAAG,KAAKb,KAAL,CAAWf,IAAX,CAAV;;AACA,QAAI,CAAC4B,CAAL,EAAQ;AACJ,YAAM,IAAI5E,WAAJ,CACFD,eAAe,CAAC8E,aADd,EAEF7B,IAFE,CAAN;AAIH;;AACD,WAAO4B,CAAP;AACH,GAjFL,CAmFI;AAnFJ;;AAAA,UAoFiBjD,gBApFjB;AAAA;AAAA;AAAA,gNAoFI,kBACIoB,CADJ,EAEIlB,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAIU2C,wBAJV,GAIuB,KAAKC,UAAL,CAAgB1B,CAAhB,CAJvB,EAKI;;AALJ;AAAA,qBAMUyB,UANV,aAMUA,UANV,uBAMUA,UAAU,CAAE7C,gBAAZ,CACFoB,CAAC,CAACK,QADA,EAEFvB,MAFE,CANV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApFJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAgGiBiD,WAhGjB;AAAA,0MAgGI,kBACI/B,CADJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGUgC,sBAHV,GAGqB,KAAKJ,WAAL,CAAiB5B,CAAjB,CAHrB;;AAAA,oBAIQgC,QAAQ,KAAK,GAJrB;AAAA;AAAA;AAAA;;AAKcC,iBALd,GAKmBjC,CALnB;;AAAA,oBAMYiC,GAAE,CAAC5B,QAAH,CAAYP,IAAZ,KAAqB,YANjC;AAAA;AAAA;AAAA;;AAOkBoC,mBAPlB,GAO2BD,GAAE,CAAC5B,QAAJ,CAAiCpC,IAP3D;AAAA,wEAQmB,KAAKgD,QAAL,CAAciB,KAAd,CARnB,yDAQmB,qBAAsBxB,KARzC;;AAAA;AAAA,gDAUeN,SAVf;;AAAA;AAYUqB,wBAZV,GAYuB,KAAKC,UAAL,CAAgB1B,CAAhB,CAZvB;AAaUiC,gBAbV,GAaejC,CAbf;AAAA;AAAA,qBAciByB,UAAU,CAAC1B,mBAAX,CACTkC,EAAE,CAAC5B,QADM,CAdjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhGJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAmHiBhB,kBAnHjB;AAAA,kNAmHI,kBACIW,CADJ,EAEIV,EAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAIUmC,wBAJV,GAIuB,KAAKC,UAAL,CAAgB1B,CAAhB,CAJvB;AAKUiC,gBALV,GAKejC,CALf;;AAAA,oBAMQiC,EAAE,CAAC5B,QAAH,CAAYP,IAAZ,KAAqB,YAN7B;AAAA;AAAA;AAAA;;AAOc0B,iBAPd,GAOqBS,EAAE,CAAC5B,QAAJ,CAAiCpC,IAPrD;AAAA;AAAA,qBAQcwD,UAAU,CAACpC,kBAAX,CAA8BmC,GAA9B,EAAmClC,EAAnC,CARd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnHJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UA+HW6C,WA/HX,GA+HI,qBACInC,CADJ,EAEIU,KAFJ,EAGE;AACE,QAAMsB,QAAQ,GAAG,KAAKJ,WAAL,CAAiB5B,CAAjB,CAAjB;AACA,QAAI,CAACgC,QAAD,IAAaA,QAAQ,KAAK,GAA9B,EAAmC,OAAO5B,SAAP;AACnC,QAAM6B,EAAE,GAAGjC,CAAX;;AACA,QAAIiC,EAAE,CAAC5B,QAAH,CAAYP,IAAZ,KAAqB,YAAzB,EAAuC;AACnC,UAAMoC,KAAK,GAAID,EAAE,CAAC5B,QAAJ,CAAiCpC,IAA/C;;AACA,UAAI,KAAKgD,QAAL,CAAciB,KAAd,CAAJ,EAA0B;AACtB,YAAME,SAAS,GAAG,KAAKnB,QAAL,CAAciB,KAAd,EAAqBpC,IAAvC;;AACA,YAAIsC,SAAS,KAAK,OAAO1B,KAAzB,EAAgC;AAC5B,gBAAM,IAAIzD,WAAJ,CACFD,eAAe,CAACqF,YADd,gBAEUH,KAFV,wBAEkCE,SAFlC,2BAEiE1B,KAAK,CAAC4B,QAAN,EAFjE,CAAN;AAIH;;AACD,YAAI5B,KAAK,KAAK,KAAKO,QAAL,CAAciB,KAAd,EAAqBxB,KAAnC,EAA0C;AACtC,eAAKO,QAAL,CAAciB,KAAd,EAAqBxB,KAArB,GAA6BA,KAA7B;AACA,eAAKiB,IAAL,CAAU5E,aAAV;AACH;AACJ,OAZD,MAYO;AACH,YAAMqF,UAAS,GAAG,OAAO1B,KAAzB;;AACA,YACI0B,UAAS,KAAK,QAAd,IACAA,UAAS,KAAK,SADd,IAEAA,UAAS,KAAK,QAHlB,EAIE;AACE,gBAAM,IAAInF,WAAJ,CACFD,eAAe,CAACqF,YADd,qBAEeD,UAFf,oBAAN;AAIH;;AACD,aAAKnB,QAAL,CAAciB,KAAd,IAAuB;AAAEpC,cAAI,EAAEsC,UAAR;AAAmB1B,eAAK,EAALA;AAAnB,SAAvB;AACA,aAAKiB,IAAL,CAAU5E,aAAV;AACH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAtKL;;AAAA,UAwKWwF,YAxKX,GAwKI,wBAAsB;AAClB,SAAKxB,aAAL,GAAqBX,SAArB;AACH,GA1KL;;AAAA,UA4KWoC,QA5KX,GA4KI,kBAAgBxC,CAAhB,EAAmD;AAC/C,QAAMgC,QAAQ,GAAG,KAAKJ,WAAL,CAAiB5B,CAAjB,CAAjB;AACA,QAAMiC,EAAE,GAAGjC,CAAX;;AACA,QAAIiC,EAAE,CAAC5B,QAAH,CAAYP,IAAZ,KAAqB,YAAzB,EAAuC;AACnC,UAAMpB,KAAK,GAAIuD,EAAE,CAAC5B,QAAJ,CAAiCpC,IAA/C;AACA,aAAO,KAAK8C,aAAL,KAA0BiB,QAA1B,SAAsCtD,KAA7C;AACH;;AACD,WAAO,KAAP;AACH,GApLL;;AAAA,UAsLW+D,WAtLX,GAsLI,uBAAqB;AACjB,sCAAiBC,MAAM,CAAC5D,MAAP,CAAc,KAAKkC,KAAnB,CAAjB,oCAA4C;AAAvC,UAAM2B,EAAE,qBAAR;AACDA,QAAE,CAACtB,OAAH;AACH;AACJ,GA1LL;;AAAA;AAAA,EACYuB,qEADZ,E;;;;;;;;;;;;;;;;;ACtIA;AAQO,SAASC,OAAT,CAAiB7C,CAAjB,EAA6C;AAChD,UAAQA,CAAC,CAACF,IAAV;AACI,SAAK,iBAAL;AAAwB;AACpB,YAAMgD,EAAE,GAAG9C,CAAX;AACA,qBAAW8C,EAAE,CAACC,QAAH,CAAYC,GAAZ,CAAgBH,OAAhB,EAAyBI,IAAzB,CAA8B,IAA9B,CAAX;AACH;;AACD,SAAK,gBAAL;AAAuB;AACnB,YAAMC,MAAM,GAAGlD,CAAf;AACA,eAAU6C,OAAO,CAACK,MAAM,CAACC,MAAR,CAAjB,SAAoCD,MAAM,CAACE,SAAP,CAC/BJ,GAD+B,CAC3BH,OAD2B,EAE/BI,IAF+B,CAE1B,IAF0B,CAApC;AAGH;;AACD,SAAK,kBAAL;AAAyB;AACrB,YAAMhD,IAAI,GAAGD,CAAb;AACA,eAAOC,IAAI,CAACoD,QAAL,GACER,OAAO,CAAC5C,IAAI,CAACC,MAAN,CADT,SAC0B2C,OAAO,CAAC5C,IAAI,CAACI,QAAN,CADjC,SAEEwC,OAAO,CAAC5C,IAAI,CAACC,MAAN,CAFT,SAE0B2C,OAAO,CAAC5C,IAAI,CAACI,QAAN,CAFxC;AAGH;;AACD,SAAK,kBAAL;AACA,SAAK,mBAAL;AAA0B;AACtB,YAAMiD,EAAE,GAAGtD,CAAX;AACA,qBAAW6C,OAAO,CAACS,EAAE,CAACC,IAAJ,CAAlB,SAA+BD,EAAE,CAACE,QAAlC,SAA8CX,OAAO,CAACS,EAAE,CAACG,KAAJ,CAArD;AACH;;AACD,SAAK,iBAAL;AAAwB;AACpB,YAAMC,EAAE,GAAG1D,CAAX;AACA,oBAAU0D,EAAE,CAACF,QAAb,GAAwBX,OAAO,CAACa,EAAE,CAACC,QAAJ,CAA/B;AACH;;AACD,SAAK,YAAL;AAAmB;AACf,eAAQ3D,CAAD,CAAuB/B,IAA9B;AACH;;AACD,SAAK,SAAL;AAAgB;AACZ,eAAQ+B,CAAD,CAAoB4D,GAA3B;AACH;;AACD;AACI,aAAO,MAAP;AAjCR;AAmCH;AAEM,IAAMC,eAAb;AACI;AAGA;AACA,2BAAoBC,GAApB,EAA2CC,QAA3C,EAAoE;AAAA,SAH5DC,SAG4D,GAHzC,EAGyC;AAAA,SAAhDF,GAAgD,GAAhDA,GAAgD;AAAA,SAAzBC,QAAyB,GAAzBA,QAAyB;AAAE;;AAL1E;;AAAA,SAOWE,GAPX,GAOI,eAAa;AACT,WAAO,KAAKD,SAAL,CAAe,KAAKA,SAAL,CAAeE,MAAf,GAAwB,CAAvC,CAAP;AACH,GATL;;AAAA,SAWWC,GAXX,GAWI,eAAa;AACT,WAAO,KAAKH,SAAL,CAAeG,GAAf,EAAP;AACH,GAbL;;AAAA,SAeiBC,SAfjB;AAAA,wMAeI,iBAAuBpE,CAAvB;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKgE,SAAL,GAAiB,EAAjB;AADJ;AAAA,qBAEU,KAAKK,oBAAL,CAA0BrE,CAA1B,CAFV;;AAAA;AAAA,+CAGW,KAAKgE,SAAL,CAAeG,GAAf,EAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqBiBE,oBArBjB;AAAA,mNAqBI,kBAAkCrE,CAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BACYA,CAAC,CAACF,IADd;AAAA,gDAEa,iBAFb,wBAOa,gBAPb,wBAea,kBAfb,wBAoFa,iBApFb,yBA4Ga,mBA5Gb,yBA4Ha,kBA5Hb,yBAsIa,YAtIb,yBA8Ia,SA9Ib;AAAA;;AAAA;AAAA;;AAAA;AAQY,kBAAI,KAAKiE,QAAT,EAAmB;AACTO,mBADS,GACH,KAAKP,QAAL,CAAmC/D,CAAnC,EAAsC,IAAtC,CADG;AAEf,qBAAKgE,SAAL,CAAeO,IAAf,CAAoBD,GAApB;AACH,eAHD,MAGO,KAAKN,SAAL,CAAeO,IAAf,CAAoBnE,SAApB;;AAXnB;;AAAA;AAgBkBkD,gBAhBlB,GAgB8CtD,CAhB9C;AAAA;AAAA,qBAiBkB,KAAKqE,oBAAL,CAA0Bf,EAAE,CAACC,IAA7B,CAjBlB;;AAAA;AAAA;AAAA,qBAkBkB,KAAKc,oBAAL,CAA0Bf,EAAE,CAACG,KAA7B,CAlBlB;;AAAA;AAmBkBA,mBAnBlB,GAmB0B,KAAKO,SAAL,CAAeG,GAAf,EAnB1B;AAoBkBZ,kBApBlB,GAoByB,KAAKS,SAAL,CAAeG,GAAf,EApBzB;AAAA,6BAqBoBb,EAAE,CAACE,QArBvB;AAAA,gDAsBqB,GAtBrB,yBAyBqB,GAzBrB,yBA4BqB,GA5BrB,yBA+BqB,GA/BrB,yBAkCqB,GAlCrB,yBAqCqB,IArCrB,yBAwCqB,KAxCrB,yBA2CqB,IA3CrB,yBA8CqB,GA9CrB,yBAiDqB,GAjDrB,yBAoDqB,GApDrB,yBAuDqB,IAvDrB,yBA0DqB,IA1DrB,yBA6DqB,KA7DrB,yBAgEqB,KAhErB,yBAoEqB,GApErB,yBAuEqB,GAvErB,yBA0EqB,IA1ErB,yBA6EqB,IA7ErB;AAAA;;AAAA;AAuBoB,mBAAKQ,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AAvBpB;;AAAA;AA0BoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AA1BpB;;AAAA;AA6BoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AA7BpB;;AAAA;AAgCoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AAhCpB;;AAAA;AAmCoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AAnCpB;;AAAA;AAsCoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AAtCpB;;AAAA;AAyCoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AAzCpB;;AAAA;AA4CoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AA5CpB;;AAAA;AA+CoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AA/CpB;;AAAA;AAkDoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AAlDpB;;AAAA;AAqDoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AArDpB;;AAAA;AAwDoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AAxDpB;;AAAA;AA2DoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AA3DpB;;AAAA;AA8DoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AA9DpB;;AAAA;AAiEoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AAjEpB;;AAAA;AAqEoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AArEpB;;AAAA;AAwEoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AAxEpB;;AAAA;AA2EoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AA3EpB;;AAAA;AA8EoB,mBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AA9EpB;;AAAA;AAAA;;AAAA;AAqFkBC,gBArFlB,GAqF6C1D,CArF7C;AAAA;AAAA,qBAsFkB,KAAKqE,oBAAL,CAA0BX,EAAE,CAACC,QAA7B,CAtFlB;;AAAA;AAuFkBa,iBAvFlB,GAuFwB,KAAKR,SAAL,CAAeG,GAAf,EAvFxB;AAAA,6BAwFoBT,EAAE,CAACF,QAxFvB;AAAA,gDAyFqB,KAzFrB,yBA4FqB,GA5FrB,yBA+FqB,GA/FrB,yBAkGqB,GAlGrB,yBAqGqB,GArGrB;AAAA;;AAAA;AA0FoB,mBAAKQ,SAAL,CAAeO,IAAf,CAAoBE,IAAI,CAACC,GAAL,CAASF,GAAT,CAApB;AA1FpB;;AAAA;AA6FoB,mBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AA7FpB;;AAAA;AAgGoB,mBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AAhGpB;;AAAA;AAmGoB,mBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AAnGpB;;AAAA;AAsGoB,mBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AAtGpB;;AAAA;AAAA;;AAAA;AA6GkBG,gBA7GlB,GA6G+C3E,CA7G/C;AAAA;AAAA,qBA8GkB,KAAKqE,oBAAL,CAA0BM,EAAE,CAACpB,IAA7B,CA9GlB;;AAAA;AAAA,6BA+GoBoB,EAAE,CAACnB,QA/GvB;AAAA,gDAgHqB,IAhHrB,yBAoHqB,IApHrB;AAAA;;AAAA;AAAA,mBAiHwB,KAAKS,GAAL,EAjHxB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAkH+B,KAAKI,oBAAL,CAA0BM,EAAE,CAAClB,KAA7B,CAlH/B;;AAAA;AAAA;;AAAA;AAAA,kBAqHyB,KAAKQ,GAAL,EArHzB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAsH+B,KAAKI,oBAAL,CAA0BM,EAAE,CAAClB,KAA7B,CAtH/B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA+H8B,KAAKK,GAAL,CAAS9D,CAAT,CA/H9B;;AAAA;AA+HkB4E,iBA/HlB;AAgIY;AACA;AACA;AACA,mBAAKZ,SAAL,CAAeO,IAAf,CAAoBK,GAApB;AAnIZ;;AAAA;AAuIkBC,gBAvIlB,GAuIwC7E,CAvIxC;AAAA;AAAA,qBAwI8B,KAAK8D,GAAL,CAASe,EAAE,CAAC5G,IAAZ,CAxI9B;;AAAA;AAwIkB2G,kBAxIlB;AAyIY;AACA;AACA,mBAAKZ,SAAL,CAAeO,IAAf,CAAoBK,IAApB;AA3IZ;;AAAA;AA+IkBE,iBA/IlB,GA+IsC9E,CA/ItC;AAgJY,mBAAKgE,SAAL,CAAeO,IAAf,CAAoBO,GAAG,CAACpE,KAAxB;AAhJZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,I","file":"b4b5e3de7d195d717097f81a5311f716f303ebf6-1595181017629385bcf2.js","sourcesContent":["import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT, SystemReg } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\n\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface, atomic } from \"./runner\"\n\nexport const GLOBAL_CHANGE = \"vmEnvglobalChange\"\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\"\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(\n        command: jsep.Identifier,\n        values: PackedValues\n    ) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, ev: atomic) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], ev)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, ev: atomic) {\n        await jdreg?.sendSetPackedAsync(\n            jdreg.specification?.packFormat,\n            [ev],\n            true\n        )\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, true)\n        }\n    }\n\n    public async lookupRegisterAsync(e: jsep.MemberExpression | jsep.Identifier | string) {\n        const root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        const fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            const register = this._registers[root]\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[]\n    ) {\n        super()\n    }\n\n    public globals() {\n        return this._globals;\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (service) {\n            this._envs[role] = new VMServiceEnvironment(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerRegister(reg, () => {\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._envs[root]\n        if (!s) {\n            throw new VMException(\n                VMExceptionCode.RoleNoService,\n                root\n            )\n        }\n        return s\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        // TODO: need to raise alert if service undefined\n        await serviceEnv?.sendCommandAsync(\n            e.property as jsep.Identifier,\n            values\n        )\n    }\n\n    public async lookupAsync(\n        e: jsep.MemberExpression | string\n    ) {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        return await serviceEnv.lookupRegisterAsync(\n            me.property as jsep.Identifier | jsep.MemberExpression\n        )\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        ev: number\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            await serviceEnv.writeRegisterAsync(reg, ev)\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._envs)) {\n            vs.unmount()\n        }\n    }\n}\n","export type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression) {\n        this.exprStack = []\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                await this.visitExpressionAsync(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(e as jsep.MemberExpression)\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n"],"sourceRoot":""}