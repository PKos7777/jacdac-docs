{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/markdown.ts","webpack://jacdac-docs/./src/components/tools/VMEditorRunner.tsx","webpack://jacdac-docs/./src/pages/tools/vm-editor-runner.tsx"],"names":["supportedExpressions","parseITTTMarkdownToJSON","filecontent","filename","replace","info","description","roles","handlers","backticksType","errors","lineNo","currentHandler","handlerHeading","symbolResolver","SpecSymbolResolver","undefined","getServiceFromRole","e","error","checkExpression","CheckExpression","t","indexOf","split","line","processLine","message","finishHandler","length","trim","m","exec","interpret","slice","hd","cont","expanded","processCommand","commands","root","jsep","ret","check","IT4Functions","command","id","role","arguments","name","serviceShortName","service","serviceSpecificationFromName","find","pair","push","serviceShortId","guard","sym","msg","some","file","VM_MARKDOWN_SOURCE_STORAGE_KEY","VMEditorRunner","useLocalStorage","source","setSource","json","useMemo","Page"],"mappings":"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","file":"component---src-pages-tools-vm-editor-runner-tsx-87f5a8ded4a9665359d6.js","sourcesContent":["import jsep from \"jsep\"\n\nimport {\n    CheckExpression,\n    SpecSymbolResolver,\n} from \"../../jacdac-spec/spectool/jdutils\"\nimport { IT4Program, IT4Handler, IT4Functions, getServiceFromRole } from \"./ir\"\nimport { serviceSpecificationFromName } from \"../jdom/spec\"\n\nconst supportedExpressions: jsep.ExpressionType[] = [\n    \"MemberExpression\",\n    \"ArrayExpression\",\n    \"BinaryExpression\",\n    \"Identifier\",\n    \"Literal\",\n    \"UnaryExpression\",\n    \"LogicalExpression\",\n]\n\nexport function parseITTTMarkdownToJSON(\n    filecontent: string,\n    filename = \"\"\n): IT4Program {\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: IT4Program = {\n        description: \"\",\n        roles: [],\n        handlers: [],\n    }\n\n    let backticksType = \"\"\n    const errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let currentHandler: IT4Handler = null\n    let handlerHeading = \"\"\n\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(info),\n        e => error(e)\n    )\n\n    const checkExpression = new CheckExpression(\n        symbolResolver,\n        (t: jsep.ExpressionType) => supportedExpressions.indexOf(t) >= 0,\n        e => error(e)\n    )\n\n    try {\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (currentHandler) finishHandler(symbolResolver)\n\n    if (errors.length) info.errors = errors\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" ||\n            line.slice(0, 4) == \"    \" ||\n            /^\\t/.exec(line)\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                handlerHeading = \"\"\n                const [, hd, cont] = m\n                if (hd == \"#\") {\n                    if (!info.description) info.description = cont.trim()\n                    else error(\"use ## to start a handler, not #\")\n                } else if (hd == \"##\") {\n                    if (currentHandler) finishHandler(symbolResolver)\n                    handlerHeading = cont.trim()\n                }\n            }\n        } else {\n            const expanded = line.replace(/\\/\\/.*/, \"\").trim()\n            if (!expanded) return\n            processCommand(expanded)\n        }\n    }\n\n    function processCommand(expanded: string) {\n        if (!currentHandler) {\n            if (!handlerHeading)\n                error(`every handler must have a description (via ##)`)\n            currentHandler = {\n                description: handlerHeading,\n                commands: [],\n            }\n            handlerHeading = \"\"\n        }\n\n        const root = <jsep.CallExpression>jsep(expanded)\n        const ret = checkExpression.check(root, IT4Functions)\n\n        if (ret) {\n            const [command, root] = ret\n\n            if (currentHandler.commands.length === 0) {\n                if (command?.id === \"role\") {\n                    // TODO: check\n                    const role = (root.arguments[0] as jsep.Identifier).name\n                    const serviceShortName = (\n                        root.arguments[1] as jsep.Identifier\n                    ).name\n                    const service =\n                        serviceSpecificationFromName(serviceShortName)\n                    if (!service)\n                        error(\n                            `can't find service with shortId=${serviceShortName}`\n                        )\n                    else if (info.roles.find(pair => pair.role === role))\n                        error(`role with name ${role} already declared`)\n                    else\n                        info.roles.push({\n                            role: role,\n                            serviceShortId: serviceShortName,\n                        })\n                    return\n                } else if (\n                    !command ||\n                    (command.id !== \"awaitEvent\" &&\n                        command.id !== \"awaitCondition\")\n                ) {\n                    error(\n                        `An ITTT handler must begin with call to an await function (awaitEvent | awaitCondition)`\n                    )\n                    return\n                }\n            } else {\n                if (command?.id === \"role\") {\n                    error(`roles must be declared at beginning of handler`)\n                }\n            }\n\n            currentHandler.commands.push({ guard: undefined, command: root })\n        }\n    }\n\n    function finishHandler(sym: SpecSymbolResolver) {\n        if (currentHandler.commands.length > 0)\n            info.handlers.push(currentHandler)\n        currentHandler = null\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n}\n","import React, { useMemo } from \"react\"\nimport { parseITTTMarkdownToJSON } from \"../../../jacdac-ts/src/vm/markdown\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport { Grid } from \"@material-ui/core\"\nimport GridHeader from \"../ui/GridHeader\"\nimport VMRunner from \"../vm/VMRunner\"\nimport DashBoard from \"../dashboard/Dashboard\"\n\nconst VM_MARKDOWN_SOURCE_STORAGE_KEY = \"jacdac:vmeditorsource:markdown\"\n\nexport default function VMEditorRunner() {\n    const [source, setSource] = useLocalStorage(\n        VM_MARKDOWN_SOURCE_STORAGE_KEY,\n        `# VM Handler program\\n\\n`\n    )\n    const json = useMemo(() => parseITTTMarkdownToJSON(source), [source])\n    return (\n        <Grid spacing={2} container>\n            <Grid item xs={12}>\n                <HighlightTextField\n                    code={source}\n                    language={\"markdown\"}\n                    onChange={setSource}\n                    annotations={json?.errors}\n                />\n            </Grid>\n            <GridHeader title=\"Preview\" />\n            {json && (\n                <Grid item xs={12}>\n                    <VMRunner program={json} />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <DashBoard />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from \"react\"\nimport VMEditorRunner from \"../../components/tools/VMEditorRunner\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>VM Editor/Runner</h1>\n            <VMEditorRunner />\n        </>\n    )\n}\n"],"sourceRoot":""}