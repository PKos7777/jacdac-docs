[
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1ffffff3;1",
    "displayName": "Base service",
    "description": "Base class for all services.",
    "contents": [
      {
        "@type": "Property",
        "name": "instance_name",
        "@id": "dtmi:jacdac:x1ffffff3:const:instancename;1",
        "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
        "schema": "string"
      },
      {
        "@type": "Telemetry",
        "name": "status_code",
        "@id": "dtmi:jacdac:x1ffffff3:ro:statuscode;1",
        "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "code",
              "schema": "integer"
            },
            {
              "name": "vendor_code",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "status_code_changed",
        "@id": "dtmi:jacdac:x1ffffff3:event:statuscodechanged;1",
        "description": "Notifies that the status code of the service changed.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "code",
              "schema": "integer"
            },
            {
              "name": "vendor_code",
              "schema": "integer"
            }
          ]
        }
      }
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1ffffff3:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1ffffff2;1",
    "displayName": "Sensor",
    "description": "Base class for sensors.",
    "contents": [
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "streaming_interval",
        "@id": "dtmi:jacdac:x1ffffff2:rw:streaminginterval;1",
        "description": "Period between packets of data when streaming in milliseconds.",
        "unit": "millisecond",
        "schema": "integer",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1ffffff2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1f140409;1",
    "displayName": "Accelerometer",
    "description": "A 3-axis accelerometer.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "forces",
        "@id": "dtmi:jacdac:x1f140409:ro:forces;1",
        "description": "Indicates the current forces acting on accelerometer.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "x",
              "schema": "float"
            },
            {
              "name": "y",
              "schema": "float"
            },
            {
              "name": "z",
              "schema": "float"
            }
          ]
        }
      },
      {
        "@type": [
          "Telemetry",
          "Acceleration"
        ],
        "name": "forces_error",
        "@id": "dtmi:jacdac:x1f140409:ro:forceserror;1",
        "description": "Error on the reading value.",
        "unit": "gForce",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "Acceleration"
        ],
        "name": "max_force",
        "@id": "dtmi:jacdac:x1f140409:rw:maxforce;1",
        "description": "Configures the range forces detected.\nRead-back after setting to get current value.",
        "unit": "gForce",
        "schema": "float",
        "writable": true
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "tilt_up",
        "@id": "dtmi:jacdac:x1f140409:event:tiltup;1",
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "tilt_down",
        "@id": "dtmi:jacdac:x1f140409:event:tiltdown;1",
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "tilt_left",
        "@id": "dtmi:jacdac:x1f140409:event:tiltleft;1",
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "tilt_right",
        "@id": "dtmi:jacdac:x1f140409:event:tiltright;1",
        "description": "Emitted when accelerometer is tilted in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "face_up",
        "@id": "dtmi:jacdac:x1f140409:event:faceup;1",
        "description": "Emitted when accelerometer is laying flat in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "face_down",
        "@id": "dtmi:jacdac:x1f140409:event:facedown;1",
        "description": "Emitted when accelerometer is laying flat in the given direction.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "freefall",
        "@id": "dtmi:jacdac:x1f140409:event:freefall;1",
        "description": "Emitted when total force acting on accelerometer is much less than 1g.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "shake",
        "@id": "dtmi:jacdac:x1f140409:event:shake;1",
        "description": "Emitted when forces change violently a few times.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "force_2g",
        "@id": "dtmi:jacdac:x1f140409:event:force2g;1",
        "description": "Emitted when force in any direction exceeds given threshold.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "force_3g",
        "@id": "dtmi:jacdac:x1f140409:event:force3g;1",
        "description": "Emitted when force in any direction exceeds given threshold.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "force_6g",
        "@id": "dtmi:jacdac:x1f140409:event:force6g;1",
        "description": "Emitted when force in any direction exceeds given threshold.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "force_8g",
        "@id": "dtmi:jacdac:x1f140409:event:force8g;1",
        "description": "Emitted when force in any direction exceeds given threshold.",
        "schema": "dtmi:jacdac:x1f140409:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1f140409:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1deaa06e;1",
    "displayName": "Arcade Gamepad",
    "description": "This service is deprecated in favor or `joystick`; it is currently used by the micro:bit Arcade smart shield though.\nA gamepad with direction and action buttons for one player.\nIf a device has multiple controllers, it should have multiple gamepad services, using consecutive service identifiers.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "down",
        "@id": "dtmi:jacdac:x1deaa06e:event:down;1",
        "description": "Emitted when button goes from inactive to active.",
        "schema": "dtmi:jacdac:x1deaa06e:button;1"
      },
      {
        "@type": "Telemetry",
        "name": "up",
        "@id": "dtmi:jacdac:x1deaa06e:event:up;1",
        "description": "Emitted when button goes from active to inactive.",
        "schema": "dtmi:jacdac:x1deaa06e:button;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1deaa06e:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1deaa06e:button;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "left",
            "displayName": "Left",
            "enumValue": 1
          },
          {
            "name": "up",
            "displayName": "Up",
            "enumValue": 2
          },
          {
            "name": "right",
            "displayName": "Right",
            "enumValue": 3
          },
          {
            "name": "down",
            "displayName": "Down",
            "enumValue": 4
          },
          {
            "name": "a",
            "displayName": "A",
            "enumValue": 5
          },
          {
            "name": "b",
            "displayName": "B",
            "enumValue": 6
          },
          {
            "name": "menu",
            "displayName": "Menu",
            "enumValue": 7
          },
          {
            "name": "select",
            "displayName": "Select",
            "enumValue": 8
          },
          {
            "name": "reset",
            "displayName": "Reset",
            "enumValue": 9
          },
          {
            "name": "exit",
            "displayName": "Exit",
            "enumValue": 10
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1fc63606;1",
    "displayName": "Arcade sound",
    "description": "A sound playing device.\n\nThis is typically run over an SPI connection, not regular single-wire JACDAC.",
    "contents": [
      {
        "@type": "Property",
        "name": "sample_rate",
        "@id": "dtmi:jacdac:x1fc63606:rw:samplerate;1",
        "description": "Get or set playback sample rate (in samples per second).\nIf you set it, read it back, as the value may be rounded up or down.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "buffer_size",
        "@id": "dtmi:jacdac:x1fc63606:const:buffersize;1",
        "description": "The size of the internal audio buffer.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "buffer_pending",
        "@id": "dtmi:jacdac:x1fc63606:ro:bufferpending;1",
        "description": "How much data is still left in the buffer to play.\nClients should not send more data than `buffer_size - buffer_pending`,\nbut can keep the `buffer_pending` as low as they want to ensure low latency\nof audio playback.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1fc63606:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x19ed364c;1",
    "displayName": "Azure IoT Hub",
    "description": "Send messages, receive commands, and work with device twins in Azure IoT Hub.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "connection_status",
        "@id": "dtmi:jacdac:x19ed364c:ro:connectionstatus;1",
        "description": "Returns `\"ok\"` when connected, empty `\"\"` when disconnected, and an error description otherwise.",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "hub_name",
        "@id": "dtmi:jacdac:x19ed364c:const:hubname;1",
        "description": "Something like `my-iot-hub.azure-devices.net`; empty string when not properly configured",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "device_id",
        "@id": "dtmi:jacdac:x19ed364c:const:deviceid;1",
        "description": "Something like `my-dev-007`; empty string when `connection_string` is not set.",
        "schema": "string"
      },
      {
        "@type": "Telemetry",
        "name": "message",
        "@id": "dtmi:jacdac:x19ed364c:event:message;1",
        "description": "This event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.",
        "schema": "string"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "connected",
        "@id": "dtmi:jacdac:x19ed364c:event:connected;1",
        "description": "Raised when the device is connected to the hub.",
        "schema": "dtmi:jacdac:x19ed364c:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "disconnected",
        "@id": "dtmi:jacdac:x19ed364c:event:disconnected;1",
        "description": "Raised when the device is disconnected to the hub. ``connection_status`` may contain information about the error.",
        "schema": "dtmi:jacdac:x19ed364c:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x19ed364c:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1c739e6c;1",
    "displayName": "Barcode reader",
    "description": "A device that reads various barcodes, like QR codes. For the web, see [BarcodeDetector](https://developer.mozilla.org/en-US/docs/Web/API/BarcodeDetector).",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x1c739e6c:rw:enabled;1",
        "description": "Turns on or off the detection of barcodes.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "detect",
        "@id": "dtmi:jacdac:x1c739e6c:event:detect;1",
        "description": "Raised when a bar code is detected and decoded. If the reader detects multiple codes, it will issue multiple events.\nIn case of numeric barcodes, the `data` field should contain the ASCII (which is the same as UTF8 in that case) representation of the number.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "format",
              "schema": "dtmi:jacdac:x1c739e6c:format;1"
            },
            {
              "name": "data",
              "schema": "string"
            }
          ]
        }
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1c739e6c:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1c739e6c:format;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "aztec",
            "displayName": "Aztec",
            "enumValue": 1
          },
          {
            "name": "code128",
            "displayName": "Code128",
            "enumValue": 2
          },
          {
            "name": "code39",
            "displayName": "Code39",
            "enumValue": 3
          },
          {
            "name": "code93",
            "displayName": "Code93",
            "enumValue": 4
          },
          {
            "name": "codabar",
            "displayName": "Codabar",
            "enumValue": 5
          },
          {
            "name": "dataMatrix",
            "displayName": "DataMatrix",
            "enumValue": 6
          },
          {
            "name": "ean13",
            "displayName": "Ean13",
            "enumValue": 8
          },
          {
            "name": "ean8",
            "displayName": "Ean8",
            "enumValue": 9
          },
          {
            "name": "iTF",
            "displayName": "ITF",
            "enumValue": 10
          },
          {
            "name": "pdf417",
            "displayName": "Pdf417",
            "enumValue": 11
          },
          {
            "name": "qrCode",
            "displayName": "QrCode",
            "enumValue": 12
          },
          {
            "name": "upcA",
            "displayName": "UpcA",
            "enumValue": 13
          },
          {
            "name": "upcE",
            "displayName": "UpcE",
            "enumValue": 14
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1e117cea;1",
    "displayName": "Barometer",
    "description": "A sensor measuring air pressure of outside environment.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "pressure",
        "@id": "dtmi:jacdac:x1e117cea:ro:pressure;1",
        "description": "The air pressure.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "pressure_error",
        "@id": "dtmi:jacdac:x1e117cea:ro:pressureerror;1",
        "description": "The real pressure is between `pressure - pressure_error` and `pressure + pressure_error`.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1e117cea:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1ac986cf;1",
    "displayName": "bit:radio",
    "description": "Support for sending and receiving packets using the [Bit Radio protocol](https://github.com/microsoft/pxt-common-packages/blob/master/libs/radio/docs/reference/radio.md), typically used between micro:bit devices.",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x1ac986cf:rw:enabled;1",
        "description": "Turns on/off the radio antenna.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "group",
        "@id": "dtmi:jacdac:x1ac986cf:rw:group;1",
        "description": "Group used to filter packets",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "transmission_power",
        "@id": "dtmi:jacdac:x1ac986cf:rw:transmissionpower;1",
        "description": "Antenna power to increase or decrease range.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "frequency_band",
        "@id": "dtmi:jacdac:x1ac986cf:rw:frequencyband;1",
        "description": "Change the transmission and reception band of the radio to the given channel.",
        "schema": "integer",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1ac986cf:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1ffa9948;1",
    "displayName": "Bootloader",
    "description": "Allows flashing (reprogramming) devices over Jacdac.",
    "contents": [],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1ffa9948:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1ffa9948:error;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "noError",
            "displayName": "NoError",
            "enumValue": 0
          },
          {
            "name": "packetTooSmall",
            "displayName": "PacketTooSmall",
            "enumValue": 1
          },
          {
            "name": "outOfFlashableRange",
            "displayName": "OutOfFlashableRange",
            "enumValue": 2
          },
          {
            "name": "invalidPageOffset",
            "displayName": "InvalidPageOffset",
            "enumValue": 3
          },
          {
            "name": "notPageAligned",
            "displayName": "NotPageAligned",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1473a263;1",
    "displayName": "Button",
    "description": "A push-button, which returns to inactive position when not operated anymore.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "pressure",
        "@id": "dtmi:jacdac:x1473a263:ro:pressure;1",
        "description": "Indicates the pressure state of the button, where ``0`` is open and ``0xffff`` is fully pressed.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "analog",
        "@id": "dtmi:jacdac:x1473a263:const:analog;1",
        "description": "Indicates if the button provides analog ``pressure`` readings.",
        "schema": "boolean"
      },
      {
        "@type": "Telemetry",
        "name": "pressed",
        "@id": "dtmi:jacdac:x1473a263:ro:pressed;1",
        "description": "Determines if the button is pressed currently.\n\nIf the event ``down`` is observed, ``pressed`` is true; if ``up`` or ``hold`` are observed, ``pressed`` is false.\nTo initialize, wait for any event or timeout to ``pressed`` is true after 750ms (1.5x hold time).",
        "schema": "boolean"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "down",
        "@id": "dtmi:jacdac:x1473a263:event:down;1",
        "description": "Emitted when button goes from inactive to active.",
        "schema": "dtmi:jacdac:x1473a263:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "TimeSpan"
        ],
        "name": "up",
        "@id": "dtmi:jacdac:x1473a263:event:up;1",
        "description": "Emitted when button goes from active to inactive. The 'time' parameter \nrecords the amount of time between the down and up events.",
        "unit": "millisecond",
        "schema": "integer"
      },
      {
        "@type": [
          "Telemetry",
          "TimeSpan"
        ],
        "name": "hold",
        "@id": "dtmi:jacdac:x1473a263:event:hold;1",
        "description": "Emitted when the press time is greater than 500ms, and then at least every 500ms \nas long as the button remains pressed. The 'time' parameter records the the amount of time\nthat the button has been held (since the down event).",
        "unit": "millisecond",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1473a263:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1b57b1d7;1",
    "displayName": "Buzzer",
    "description": "A simple buzzer.",
    "contents": [
      {
        "@type": "Property",
        "name": "volume",
        "@id": "dtmi:jacdac:x1b57b1d7:rw:volume;1",
        "description": "The volume (duty cycle) of the buzzer.",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1b57b1d7:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x2865adc9;1",
    "displayName": "Capacitive Button",
    "description": "A configuration service for a capacitive push-button.",
    "contents": [
      {
        "@type": "Property",
        "name": "threshold",
        "@id": "dtmi:jacdac:x2865adc9:rw:threshold;1",
        "description": "Indicates the threshold for ``up`` events.",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x2865adc9:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1f37c56a;1",
    "displayName": "Character Screen",
    "description": "A screen that displays characters.",
    "contents": [
      {
        "@type": "Property",
        "name": "message",
        "@id": "dtmi:jacdac:x1f37c56a:rw:message;1",
        "description": "Text to show. Use `\\n` to break lines.",
        "schema": "string",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "brightness",
        "@id": "dtmi:jacdac:x1f37c56a:rw:brightness;1",
        "description": "Brightness of the screen. `0` means off.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1f37c56a:const:variant;1",
        "description": "Describes the type of character LED screen.",
        "schema": "dtmi:jacdac:x1f37c56a:variant;1"
      },
      {
        "@type": "Property",
        "name": "text_direction",
        "@id": "dtmi:jacdac:x1f37c56a:rw:textdirection;1",
        "description": "Specifies the RTL or LTR direction of the text.",
        "schema": "dtmi:jacdac:x1f37c56a:textdirection;1",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "rows",
        "@id": "dtmi:jacdac:x1f37c56a:const:rows;1",
        "description": "Gets the number of rows.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "columns",
        "@id": "dtmi:jacdac:x1f37c56a:const:columns;1",
        "description": "Gets the number of columns.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1f37c56a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1f37c56a:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "lCD",
            "displayName": "LCD",
            "enumValue": 1
          },
          {
            "name": "oLED",
            "displayName": "OLED",
            "enumValue": 2
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1f37c56a:textdirection;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "leftToRight",
            "displayName": "LeftToRight",
            "enumValue": 1
          },
          {
            "name": "rightToLeft",
            "displayName": "RightToLeft",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1630d567;1",
    "displayName": "Color",
    "description": "Senses RGB colors",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "color",
        "@id": "dtmi:jacdac:x1630d567:ro:color;1",
        "description": "Detected color in the RGB color space.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "red",
              "schema": "float"
            },
            {
              "name": "green",
              "schema": "float"
            },
            {
              "name": "blue",
              "schema": "float"
            }
          ]
        }
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1630d567:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x15b7b9bf;1",
    "displayName": "Compass",
    "description": "A sensor that measures the heading.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "heading",
        "@id": "dtmi:jacdac:x15b7b9bf:ro:heading;1",
        "description": "The heading with respect to the magnetic north.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x15b7b9bf:rw:enabled;1",
        "description": "Turn on or off the sensor. Turning on the sensor may start a calibration sequence.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "heading_error",
        "@id": "dtmi:jacdac:x15b7b9bf:ro:headingerror;1",
        "description": "Error on the heading reading",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x15b7b9bf:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x0;1",
    "displayName": "Control",
    "description": "Control service is always service index `0`.\nIt handles actions common to all services on a device.\n\nNote: some of the optional features (including `flood_ping`, `mcu_temperature`, and all string registers)\nare not implemented in `8bit` version.",
    "contents": [
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "reset_in",
        "@id": "dtmi:jacdac:x0:rw:resetin;1",
        "description": "When set to value other than `0`, it asks the device to reset after specified number of microseconds.\nThis is typically used to implement watchdog functionality, where a brain device sets `reset_in` to\nsay 1.6s every 0.5s.",
        "unit": "microsecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "device_description",
        "@id": "dtmi:jacdac:x0:const:devicedescription;1",
        "description": "Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "firmware_identifier",
        "@id": "dtmi:jacdac:x0:const:firmwareidentifier;1",
        "description": "A numeric code for the string above; used to identify firmware images and devices.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "bootloader_firmware_identifier",
        "@id": "dtmi:jacdac:x0:const:bootloaderfirmwareidentifier;1",
        "description": "Typically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "firmware_version",
        "@id": "dtmi:jacdac:x0:const:firmwareversion;1",
        "description": "A string describing firmware version; typically semver.",
        "schema": "string"
      },
      {
        "@type": "Telemetry",
        "name": "mcu_temperature",
        "@id": "dtmi:jacdac:x0:ro:mcutemperature;1",
        "description": "MCU temperature in degrees Celsius (approximate).",
        "schema": "integer"
      },
      {
        "@type": [
          "Telemetry",
          "TimeSpan"
        ],
        "name": "uptime",
        "@id": "dtmi:jacdac:x0:ro:uptime;1",
        "description": "Number of microseconds since boot.",
        "unit": "microsecond",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "device_url",
        "@id": "dtmi:jacdac:x0:const:deviceurl;1",
        "description": "Request the information web site for this device",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "device_specification_url",
        "@id": "dtmi:jacdac:x0:const:devicespecificationurl;1",
        "description": "URL pointing to device JSON specification.",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "firmware_url",
        "@id": "dtmi:jacdac:x0:const:firmwareurl;1",
        "description": "URL with machine-readable metadata information about updating device firmware",
        "schema": "string"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x0:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x0:announceflags;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "restartCounterSteady",
            "displayName": "RestartCounterSteady",
            "enumValue": 15
          },
          {
            "name": "restartCounter1",
            "displayName": "RestartCounter1",
            "enumValue": 1
          },
          {
            "name": "restartCounter2",
            "displayName": "RestartCounter2",
            "enumValue": 2
          },
          {
            "name": "restartCounter4",
            "displayName": "RestartCounter4",
            "enumValue": 4
          },
          {
            "name": "restartCounter8",
            "displayName": "RestartCounter8",
            "enumValue": 8
          },
          {
            "name": "statusLightNone",
            "displayName": "StatusLightNone",
            "enumValue": 0
          },
          {
            "name": "statusLightMono",
            "displayName": "StatusLightMono",
            "enumValue": 16
          },
          {
            "name": "statusLightRgbNoFade",
            "displayName": "StatusLightRgbNoFade",
            "enumValue": 32
          },
          {
            "name": "statusLightRgbFade",
            "displayName": "StatusLightRgbFade",
            "enumValue": 48
          },
          {
            "name": "supportsACK",
            "displayName": "SupportsACK",
            "enumValue": 256
          },
          {
            "name": "supportsBroadcast",
            "displayName": "SupportsBroadcast",
            "enumValue": 512
          },
          {
            "name": "supportsFrames",
            "displayName": "SupportsFrames",
            "enumValue": 1024
          },
          {
            "name": "isClient",
            "displayName": "IsClient",
            "enumValue": 2048
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x141a6b8a;1",
    "displayName": "Distance",
    "description": "A sensor that determines the distance of an object without any physical contact involved.",
    "contents": [
      {
        "@type": [
          "Telemetry",
          "Length"
        ],
        "name": "distance",
        "@id": "dtmi:jacdac:x141a6b8a:ro:distance;1",
        "description": "Current distance from the object",
        "unit": "metre",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "Length"
        ],
        "name": "min_range",
        "@id": "dtmi:jacdac:x141a6b8a:const:minrange;1",
        "description": "Minimum measurable distance",
        "unit": "metre",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "Length"
        ],
        "name": "max_range",
        "@id": "dtmi:jacdac:x141a6b8a:const:maxrange;1",
        "description": "Maximum measurable distance",
        "unit": "metre",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x141a6b8a:const:variant;1",
        "description": "Determines the type of sensor used.",
        "schema": "dtmi:jacdac:x141a6b8a:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x141a6b8a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x141a6b8a:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "ultrasonic",
            "displayName": "Ultrasonic",
            "enumValue": 1
          },
          {
            "name": "infrared",
            "displayName": "Infrared",
            "enumValue": 2
          },
          {
            "name": "liDAR",
            "displayName": "LiDAR",
            "enumValue": 3
          },
          {
            "name": "laser",
            "displayName": "Laser",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x11cf8c05;1",
    "displayName": "DMX",
    "description": "A service that can send DMX512-A packets with limited size. This service is designed to allow tinkering with a few DMX devices, but only allows 235 channels. More about DMX at https://en.wikipedia.org/wiki/DMX512.",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x11cf8c05:rw:enabled;1",
        "description": "Determines if the DMX bridge is active",
        "schema": "boolean",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x11cf8c05:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x169c9dc6;1",
    "displayName": "Equivalent CO₂",
    "description": "Measures equivalent CO₂ levels.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "e_CO2",
        "@id": "dtmi:jacdac:x169c9dc6:ro:eco2;1",
        "description": "Equivalent CO₂ (eCO₂) readings.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "e_CO2_error",
        "@id": "dtmi:jacdac:x169c9dc6:ro:eco2error;1",
        "description": "Error on the reading value.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_e_CO2",
        "@id": "dtmi:jacdac:x169c9dc6:const:mineco2;1",
        "description": "Minimum measurable value",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_e_CO2",
        "@id": "dtmi:jacdac:x169c9dc6:const:maxeco2;1",
        "description": "Minimum measurable value",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "conditioning_period",
        "@id": "dtmi:jacdac:x169c9dc6:const:conditioningperiod;1",
        "description": "Time required to achieve good sensor stability before measuring after long idle period.",
        "unit": "second",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x169c9dc6:const:variant;1",
        "description": "Type of physical sensor and capabilities.",
        "schema": "dtmi:jacdac:x169c9dc6:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x169c9dc6:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x169c9dc6:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "vOC",
            "displayName": "VOC",
            "enumValue": 1
          },
          {
            "name": "nDIR",
            "displayName": "NDIR",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1e1b06f2;1",
    "displayName": "Gyroscope",
    "description": "A 3-axis gyroscope.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "rotation_rates",
        "@id": "dtmi:jacdac:x1e1b06f2:ro:rotationrates;1",
        "description": "Indicates the current forces acting on accelerometer.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "x",
              "schema": "float"
            },
            {
              "name": "y",
              "schema": "float"
            },
            {
              "name": "z",
              "schema": "float"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "rotation_rates_error",
        "@id": "dtmi:jacdac:x1e1b06f2:ro:rotationrateserror;1",
        "description": "Error on the reading value.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_rate",
        "@id": "dtmi:jacdac:x1e1b06f2:rw:maxrate;1",
        "description": "Configures the range of range of rotation rates.",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1e1b06f2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x166c6dc4;1",
    "displayName": "Heart Rate",
    "description": "A sensor approximating the heart rate. \n\n\n**Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "heart_rate",
        "@id": "dtmi:jacdac:x166c6dc4:ro:heartrate;1",
        "description": "The estimated heart rate.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "heart_rate_error",
        "@id": "dtmi:jacdac:x166c6dc4:ro:heartrateerror;1",
        "description": "The estimated error on the reported sensor data.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x166c6dc4:const:variant;1",
        "description": "The type of physical sensor",
        "schema": "dtmi:jacdac:x166c6dc4:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x166c6dc4:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x166c6dc4:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "finger",
            "displayName": "Finger",
            "enumValue": 1
          },
          {
            "name": "chest",
            "displayName": "Chest",
            "enumValue": 2
          },
          {
            "name": "wrist",
            "displayName": "Wrist",
            "enumValue": 3
          },
          {
            "name": "pump",
            "displayName": "Pump",
            "enumValue": 4
          },
          {
            "name": "webCam",
            "displayName": "WebCam",
            "enumValue": 5
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x18b05b6a;1",
    "displayName": "HID Keyboard",
    "description": "Control a HID keyboard. \n\nThe codes for the key (selectors) is defined in the [HID Keyboard\nspecification](https://usb.org/sites/default/files/hut1_21.pdf), chapter 10 Keyboard/Keypad Page, page 81.\nModifiers are in page 87.\n\nThe device keeps tracks of the key state and is able to clear it all with the clear command.",
    "contents": [],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x18b05b6a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x18b05b6a:modifiers;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "none",
            "displayName": "None",
            "enumValue": 0
          },
          {
            "name": "leftControl",
            "displayName": "LeftControl",
            "enumValue": 1
          },
          {
            "name": "leftShift",
            "displayName": "LeftShift",
            "enumValue": 2
          },
          {
            "name": "leftAlt",
            "displayName": "LeftAlt",
            "enumValue": 4
          },
          {
            "name": "leftGUI",
            "displayName": "LeftGUI",
            "enumValue": 8
          },
          {
            "name": "rightControl",
            "displayName": "RightControl",
            "enumValue": 16
          },
          {
            "name": "rightShift",
            "displayName": "RightShift",
            "enumValue": 32
          },
          {
            "name": "rightAlt",
            "displayName": "RightAlt",
            "enumValue": 64
          },
          {
            "name": "rightGUI",
            "displayName": "RightGUI",
            "enumValue": 128
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x18b05b6a:action;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "press",
            "displayName": "Press",
            "enumValue": 0
          },
          {
            "name": "up",
            "displayName": "Up",
            "enumValue": 1
          },
          {
            "name": "down",
            "displayName": "Down",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1885dc1c;1",
    "displayName": "HID Mouse",
    "description": "Controls a HID mouse.",
    "contents": [],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1885dc1c:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1885dc1c:button;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "left",
            "displayName": "Left",
            "enumValue": 1
          },
          {
            "name": "right",
            "displayName": "Right",
            "enumValue": 2
          },
          {
            "name": "middle",
            "displayName": "Middle",
            "enumValue": 4
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1885dc1c:buttonevent;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "up",
            "displayName": "Up",
            "enumValue": 1
          },
          {
            "name": "down",
            "displayName": "Down",
            "enumValue": 2
          },
          {
            "name": "click",
            "displayName": "Click",
            "enumValue": 3
          },
          {
            "name": "doubleClick",
            "displayName": "DoubleClick",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x16c810b8;1",
    "displayName": "Humidity",
    "description": "A sensor measuring humidity of outside environment.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "humidity",
        "@id": "dtmi:jacdac:x16c810b8:ro:humidity;1",
        "description": "The relative humidity in percentage of full water saturation.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "humidity_error",
        "@id": "dtmi:jacdac:x16c810b8:ro:humidityerror;1",
        "description": "The real humidity is between `humidity - humidity_error` and `humidity + humidity_error`.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_humidity",
        "@id": "dtmi:jacdac:x16c810b8:const:minhumidity;1",
        "description": "Lowest humidity that can be reported.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_humidity",
        "@id": "dtmi:jacdac:x16c810b8:const:maxhumidity;1",
        "description": "Highest humidity that can be reported.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x16c810b8:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1e6ecaf2;1",
    "displayName": "Illuminance",
    "description": "Detects the amount of light falling onto a given surface area.\n\nNote that this is different from *luminance*, the amount of light that passes through, emits from, or reflects off an object.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "light",
        "@id": "dtmi:jacdac:x1e6ecaf2:ro:light;1",
        "description": "The amount of illuminance, as lumens per square metre.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "light_error",
        "@id": "dtmi:jacdac:x1e6ecaf2:ro:lighterror;1",
        "description": "Error on the reported sensor value.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1e6ecaf2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x16fa36e5;1",
    "displayName": "Indexed screen",
    "description": "A screen with indexed colors.\n\nThis is often run over an SPI connection, not regular single-wire JACDAC.",
    "contents": [
      {
        "@type": "Property",
        "name": "brightness",
        "@id": "dtmi:jacdac:x16fa36e5:rw:brightness;1",
        "description": "Set backlight brightness.\nIf set to `0` the display may go to sleep.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "bits_per_pixel",
        "@id": "dtmi:jacdac:x16fa36e5:const:bitsperpixel;1",
        "description": "Determines the number of palette entries.\nTypical values are 1, 2, 4, or 8.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "width",
        "@id": "dtmi:jacdac:x16fa36e5:const:width;1",
        "description": "Screen width in \"natural\" orientation.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "height",
        "@id": "dtmi:jacdac:x16fa36e5:const:height;1",
        "description": "Screen height in \"natural\" orientation.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "width_major",
        "@id": "dtmi:jacdac:x16fa36e5:rw:widthmajor;1",
        "description": "If true, consecutive pixels in the \"width\" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the \"height\" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff `width < height`\n(in other words, it's only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the `rotation` register.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "up_sampling",
        "@id": "dtmi:jacdac:x16fa36e5:rw:upsampling;1",
        "description": "Every pixel sent over wire is represented by `up_sampling x up_sampling` square of physical pixels.\nSome displays may allow changing this (which will also result in changes to `width` and `height`).\nTypical values are 1 and 2.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "rotation",
        "@id": "dtmi:jacdac:x16fa36e5:rw:rotation;1",
        "description": "Possible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect `width` and `height` registers,\nand may be ignored by some screens.",
        "schema": "integer",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x16fa36e5:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x108f7456;1",
    "displayName": "Joystick",
    "description": "A two axis directional joystick",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "direction",
        "@id": "dtmi:jacdac:x108f7456:ro:direction;1",
        "description": "If the joystick is analog, the directional buttons should be \"simulated\", based on joystick position\n(`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).\nIf the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).\nThe primary button on the joystick is `A`.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "buttons",
              "schema": "dtmi:jacdac:x108f7456:buttons;1"
            },
            {
              "name": "x",
              "schema": "float"
            },
            {
              "name": "y",
              "schema": "float"
            }
          ]
        }
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x108f7456:const:variant;1",
        "description": "The type of physical joystick.",
        "schema": "dtmi:jacdac:x108f7456:variant;1"
      },
      {
        "@type": "Property",
        "name": "buttons_available",
        "@id": "dtmi:jacdac:x108f7456:const:buttonsavailable;1",
        "description": "Indicates a bitmask of the buttons that are mounted on the joystick.\nIf the `Left`/`Up`/`Right`/`Down` buttons are marked as available here, the joystick is digital.\nEven when marked as not available, they will still be simulated based on the analog joystick.",
        "schema": "dtmi:jacdac:x108f7456:buttons;1"
      },
      {
        "@type": "Telemetry",
        "name": "buttons_changed",
        "@id": "dtmi:jacdac:x108f7456:event:buttonschanged;1",
        "description": "Emitted whenever the state of buttons changes.",
        "schema": "dtmi:jacdac:x108f7456:buttons;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x108f7456:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x108f7456:buttons;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "left",
            "displayName": "Left",
            "enumValue": 1
          },
          {
            "name": "up",
            "displayName": "Up",
            "enumValue": 2
          },
          {
            "name": "right",
            "displayName": "Right",
            "enumValue": 4
          },
          {
            "name": "down",
            "displayName": "Down",
            "enumValue": 8
          },
          {
            "name": "a",
            "displayName": "A",
            "enumValue": 16
          },
          {
            "name": "b",
            "displayName": "B",
            "enumValue": 32
          },
          {
            "name": "menu",
            "displayName": "Menu",
            "enumValue": 64
          },
          {
            "name": "select",
            "displayName": "Select",
            "enumValue": 128
          },
          {
            "name": "reset",
            "displayName": "Reset",
            "enumValue": 256
          },
          {
            "name": "exit",
            "displayName": "Exit",
            "enumValue": 512
          },
          {
            "name": "x",
            "displayName": "X",
            "enumValue": 1024
          },
          {
            "name": "y",
            "displayName": "Y",
            "enumValue": 2048
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x108f7456:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "thumb",
            "displayName": "Thumb",
            "enumValue": 1
          },
          {
            "name": "arcadeBall",
            "displayName": "ArcadeBall",
            "enumValue": 2
          },
          {
            "name": "arcadeStick",
            "displayName": "ArcadeStick",
            "enumValue": 3
          },
          {
            "name": "gamepad",
            "displayName": "Gamepad",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1e3048f8;1",
    "displayName": "LED",
    "description": "A controller for 1 or more monochrome or RGB LEDs connected in parallel.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "color",
        "@id": "dtmi:jacdac:x1e3048f8:ro:color;1",
        "description": "The current color of the LED.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "red",
              "schema": "integer"
            },
            {
              "name": "green",
              "schema": "integer"
            },
            {
              "name": "blue",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": [
          "Property",
          "Current"
        ],
        "name": "max_power",
        "@id": "dtmi:jacdac:x1e3048f8:rw:maxpower;1",
        "description": "Limit the power drawn by the light-strip (and controller).",
        "unit": "milliampere",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "led_count",
        "@id": "dtmi:jacdac:x1e3048f8:const:ledcount;1",
        "description": "If known, specifies the number of LEDs in parallel on this device.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "wave_length",
        "@id": "dtmi:jacdac:x1e3048f8:const:wavelength;1",
        "description": "If monochrome LED, specifies the wave length of the LED.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "luminous_intensity",
        "@id": "dtmi:jacdac:x1e3048f8:const:luminousintensity;1",
        "description": "The luminous intensity of the LED, at full value, in micro candella.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1e3048f8:const:variant;1",
        "description": "The physical type of LED.",
        "schema": "dtmi:jacdac:x1e3048f8:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1e3048f8:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1e3048f8:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "throughHole",
            "displayName": "ThroughHole",
            "enumValue": 1
          },
          {
            "name": "sMD",
            "displayName": "SMD",
            "enumValue": 2
          },
          {
            "name": "power",
            "displayName": "Power",
            "enumValue": 3
          },
          {
            "name": "bead",
            "displayName": "Bead",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x110d154b;1",
    "displayName": "LED Matrix",
    "description": "A rectangular monochrome LED matrix controller.",
    "contents": [
      {
        "@type": "Property",
        "name": "brightness",
        "@id": "dtmi:jacdac:x110d154b:rw:brightness;1",
        "description": "Reads the general brightness of the LEDs. ``0`` when the screen is off.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "rows",
        "@id": "dtmi:jacdac:x110d154b:const:rows;1",
        "description": "Number of rows on the screen",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "columns",
        "@id": "dtmi:jacdac:x110d154b:const:columns;1",
        "description": "Number of columns on the screen",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x110d154b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x126f00e0;1",
    "displayName": "LED Pixel",
    "description": "A controller for strips of individually controlled RGB LEDs.",
    "contents": [
      {
        "@type": "Property",
        "name": "brightness",
        "@id": "dtmi:jacdac:x126f00e0:rw:brightness;1",
        "description": "Set the luminosity of the strip.\nAt `0` the power to the strip is completely shut down.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "actual_brightness",
        "@id": "dtmi:jacdac:x126f00e0:ro:actualbrightness;1",
        "description": "This is the luminosity actually applied to the strip.\nMay be lower than `brightness` if power-limited by the `max_power` register.\nIt will rise slowly (few seconds) back to `brightness` is limits are no longer required.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "light_type",
        "@id": "dtmi:jacdac:x126f00e0:rw:lighttype;1",
        "description": "Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change.",
        "schema": "dtmi:jacdac:x126f00e0:lighttype;1",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "num_pixels",
        "@id": "dtmi:jacdac:x126f00e0:rw:numpixels;1",
        "description": "Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "num_columns",
        "@id": "dtmi:jacdac:x126f00e0:rw:numcolumns;1",
        "description": "If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": [
          "Property",
          "Current"
        ],
        "name": "max_power",
        "@id": "dtmi:jacdac:x126f00e0:rw:maxpower;1",
        "description": "Limit the power drawn by the light-strip (and controller).",
        "unit": "milliampere",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "max_pixels",
        "@id": "dtmi:jacdac:x126f00e0:const:maxpixels;1",
        "description": "The maximum supported number of pixels.\nAll writes to `num_pixels` are clamped to `max_pixels`.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "num_repeats",
        "@id": "dtmi:jacdac:x126f00e0:rw:numrepeats;1",
        "description": "How many times to repeat the program passed in `run` command.\nShould be set before the `run` command.\nSetting to `0` means to repeat forever.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x126f00e0:const:variant;1",
        "description": "Specifies the shape of the light strip.",
        "schema": "dtmi:jacdac:x126f00e0:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x126f00e0:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x126f00e0:lighttype;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "wS2812B_GRB",
            "displayName": "WS2812B_GRB",
            "enumValue": 0
          },
          {
            "name": "aPA102",
            "displayName": "APA102",
            "enumValue": 16
          },
          {
            "name": "sK9822",
            "displayName": "SK9822",
            "enumValue": 17
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x126f00e0:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "strip",
            "displayName": "Strip",
            "enumValue": 1
          },
          {
            "name": "ring",
            "displayName": "Ring",
            "enumValue": 2
          },
          {
            "name": "stick",
            "displayName": "Stick",
            "enumValue": 3
          },
          {
            "name": "jewel",
            "displayName": "Jewel",
            "enumValue": 4
          },
          {
            "name": "matrix",
            "displayName": "Matrix",
            "enumValue": 5
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x17dc9a1c;1",
    "displayName": "Light level",
    "description": "A sensor that measures luminosity level.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "light_level",
        "@id": "dtmi:jacdac:x17dc9a1c:ro:lightlevel;1",
        "description": "Detect light level",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x17dc9a1c:const:variant;1",
        "description": "The type of physical sensor.",
        "schema": "dtmi:jacdac:x17dc9a1c:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x17dc9a1c:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x17dc9a1c:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "photoResistor",
            "displayName": "PhotoResistor",
            "enumValue": 1
          },
          {
            "name": "lEDMatrix",
            "displayName": "LEDMatrix",
            "enumValue": 2
          },
          {
            "name": "ambient",
            "displayName": "Ambient",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x12dc1fca;1",
    "displayName": "Logger",
    "description": "A service which can report messages to the bus.",
    "contents": [
      {
        "@type": "Property",
        "name": "min_priority",
        "@id": "dtmi:jacdac:x12dc1fca:rw:minpriority;1",
        "description": "Messages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.",
        "schema": "dtmi:jacdac:x12dc1fca:priority;1",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x12dc1fca:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x12dc1fca:priority;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "debug",
            "displayName": "Debug",
            "enumValue": 0
          },
          {
            "name": "log",
            "displayName": "Log",
            "enumValue": 1
          },
          {
            "name": "warning",
            "displayName": "Warning",
            "enumValue": 2
          },
          {
            "name": "error",
            "displayName": "Error",
            "enumValue": 3
          },
          {
            "name": "silent",
            "displayName": "Silent",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x13029088;1",
    "displayName": "Magnetometer",
    "description": "A 3-axis magnetometer.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "forces",
        "@id": "dtmi:jacdac:x13029088:ro:forces;1",
        "description": "Indicates the current magnetic field on magnetometer.\nFor reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`).",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "x",
              "schema": "integer"
            },
            {
              "name": "y",
              "schema": "integer"
            },
            {
              "name": "z",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "forces_error",
        "@id": "dtmi:jacdac:x13029088:ro:forceserror;1",
        "description": "Error on the readings.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x13029088:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x13062dc8;1",
    "displayName": "Matrix Keypad",
    "description": "A matrix of buttons connected as a keypad",
    "contents": [
      {
        "@type": "Property",
        "name": "rows",
        "@id": "dtmi:jacdac:x13062dc8:const:rows;1",
        "description": "Number of rows in the matrix",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "columns",
        "@id": "dtmi:jacdac:x13062dc8:const:columns;1",
        "description": "Number of columns in the matrix",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x13062dc8:const:variant;1",
        "description": "The type of physical keypad. If the variant is ``ElastomerLEDPixel``\nand the next service on the device is a ``LEDPixel`` service, it is considered\nas the service controlling the LED pixel on the keypad.",
        "schema": "dtmi:jacdac:x13062dc8:variant;1"
      },
      {
        "@type": "Telemetry",
        "name": "down",
        "@id": "dtmi:jacdac:x13062dc8:event:down;1",
        "description": "Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "up",
        "@id": "dtmi:jacdac:x13062dc8:event:up;1",
        "description": "Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "click",
        "@id": "dtmi:jacdac:x13062dc8:event:click;1",
        "description": "Emitted together with `up` when the press time was not longer than 500ms.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "long_click",
        "@id": "dtmi:jacdac:x13062dc8:event:longclick;1",
        "description": "Emitted together with `up` when the press time was more than 500ms.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x13062dc8:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x13062dc8:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "membrane",
            "displayName": "Membrane",
            "enumValue": 1
          },
          {
            "name": "keyboard",
            "displayName": "Keyboard",
            "enumValue": 2
          },
          {
            "name": "elastomer",
            "displayName": "Elastomer",
            "enumValue": 3
          },
          {
            "name": "elastomerLEDPixel",
            "displayName": "ElastomerLEDPixel",
            "enumValue": 4
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x113dac86;1",
    "displayName": "Microphone",
    "description": "A single-channel microphone.",
    "contents": [
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "sampling_period",
        "@id": "dtmi:jacdac:x113dac86:rw:samplingperiod;1",
        "description": "Get or set microphone sampling period.\nSampling rate is `1_000_000 / sampling_period Hz`.",
        "unit": "microsecond",
        "schema": "integer",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x113dac86:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1a848cd7;1",
    "displayName": "MIDI output",
    "description": "A MIDI output device.",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x1a848cd7:rw:enabled;1",
        "description": "Opens or closes the port to the MIDI device",
        "schema": "boolean",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1a848cd7:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x140f9a78;1",
    "displayName": "Model Runner",
    "description": "Runs machine learning models.\n\nOnly models with a single input tensor and a single output tensor are supported at the moment.\nInput is provided by Sensor Aggregator service on the same device.\nMultiple instances of this service may be present, if more than one model format is supported by a device.",
    "contents": [
      {
        "@type": "Property",
        "name": "auto_invoke_every",
        "@id": "dtmi:jacdac:x140f9a78:rw:autoinvokeevery;1",
        "description": "When register contains `N > 0`, run the model automatically every time new `N` samples are collected.\nModel may be run less often if it takes longer to run than `N * sampling_interval`.\nThe `outputs` register will stream its value after each run.\nThis register is not stored in flash.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": [
          "Telemetry",
          "TimeSpan"
        ],
        "name": "last_run_time",
        "@id": "dtmi:jacdac:x140f9a78:ro:lastruntime;1",
        "description": "The time consumed in last model execution.",
        "unit": "microsecond",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "allocated_arena_size",
        "@id": "dtmi:jacdac:x140f9a78:ro:allocatedarenasize;1",
        "description": "Number of RAM bytes allocated for model execution.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "model_size",
        "@id": "dtmi:jacdac:x140f9a78:ro:modelsize;1",
        "description": "The size of the model in bytes.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "last_error",
        "@id": "dtmi:jacdac:x140f9a78:ro:lasterror;1",
        "description": "Textual description of last error when running or loading model (if any).",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "format",
        "@id": "dtmi:jacdac:x140f9a78:const:format;1",
        "description": "The type of ML models supported by this service.\n`TFLite` is flatbuffer `.tflite` file.\n`ML4F` is compiled machine code model for Cortex-M4F.\nThe format is typically present as first or second little endian word of model file.",
        "schema": "dtmi:jacdac:x140f9a78:modelformat;1"
      },
      {
        "@type": "Property",
        "name": "format_version",
        "@id": "dtmi:jacdac:x140f9a78:const:formatversion;1",
        "description": "A version number for the format.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "parallel",
        "@id": "dtmi:jacdac:x140f9a78:const:parallel;1",
        "description": "If present and true this service can run models independently of other\ninstances of this service on the device.",
        "schema": "boolean"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x140f9a78:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x140f9a78:modelformat;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "tFLite",
            "displayName": "TFLite",
            "enumValue": 860636756
          },
          {
            "name": "mL4F",
            "displayName": "ML4F",
            "enumValue": 809963362
          },
          {
            "name": "edgeImpulseCompiled",
            "displayName": "EdgeImpulseCompiled",
            "enumValue": 810961221
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1179a749;1",
    "displayName": "Motion",
    "description": "A sensor, typically PIR, that detects object motion within a certain range",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "moving",
        "@id": "dtmi:jacdac:x1179a749:ro:moving;1",
        "description": "Reports is movement is currently detected by the sensor.",
        "schema": "boolean"
      },
      {
        "@type": [
          "Property",
          "Length"
        ],
        "name": "max_distance",
        "@id": "dtmi:jacdac:x1179a749:const:maxdistance;1",
        "description": "Maximum distance where objects can be detected.",
        "unit": "metre",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "angle",
        "@id": "dtmi:jacdac:x1179a749:const:angle;1",
        "description": "Opening of the field of view",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1179a749:const:variant;1",
        "description": "Type of physical sensor",
        "schema": "dtmi:jacdac:x1179a749:variant;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "movement",
        "@id": "dtmi:jacdac:x1179a749:event:movement;1",
        "description": "A movement was detected.",
        "schema": "dtmi:jacdac:x1179a749:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1179a749:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1179a749:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "pIR",
            "displayName": "PIR",
            "enumValue": 1
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x17004cd8;1",
    "displayName": "Motor",
    "description": "A bi-directional DC motor.",
    "contents": [
      {
        "@type": "Property",
        "name": "duty",
        "@id": "dtmi:jacdac:x17004cd8:rw:duty;1",
        "description": "PWM duty cycle of the motor. Use negative/positive values to run the motor forwards and backwards.\nPositive is recommended to be clockwise rotation and negative counterclockwise. A duty of ``0`` \nwhile ``enabled`` acts as brake.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x17004cd8:rw:enabled;1",
        "description": "Turn the power to the motor on/off.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "load_torque",
        "@id": "dtmi:jacdac:x17004cd8:const:loadtorque;1",
        "description": "Torque required to produce the rated power of an electrical motor at load speed.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "load_speed",
        "@id": "dtmi:jacdac:x17004cd8:const:loadspeed;1",
        "description": "Revolutions per minute of the motor under full load.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x17004cd8:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x18d55e2b;1",
    "displayName": "Multitouch",
    "description": "A capacitive touch sensor with multiple inputs.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "touch",
        "@id": "dtmi:jacdac:x18d55e2b:event:touch;1",
        "description": "Emitted when an input is touched.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "release",
        "@id": "dtmi:jacdac:x18d55e2b:event:release;1",
        "description": "Emitted when an input is no longer touched.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "tap",
        "@id": "dtmi:jacdac:x18d55e2b:event:tap;1",
        "description": "Emitted when an input is briefly touched. TODO Not implemented.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "long_press",
        "@id": "dtmi:jacdac:x18d55e2b:event:longpress;1",
        "description": "Emitted when an input is touched for longer than 500ms. TODO Not implemented.",
        "schema": "integer"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "swipe_pos",
        "@id": "dtmi:jacdac:x18d55e2b:event:swipepos;1",
        "description": "Emitted when input channels are successively touched in order of increasing channel numbers.",
        "schema": "dtmi:jacdac:x18d55e2b:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "swipe_neg",
        "@id": "dtmi:jacdac:x18d55e2b:event:swipeneg;1",
        "description": "Emitted when input channels are successively touched in order of decreasing channel numbers.",
        "schema": "dtmi:jacdac:x18d55e2b:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x18d55e2b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1f274746;1",
    "displayName": "Potentiometer",
    "description": "A slider or rotary potentiometer.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "position",
        "@id": "dtmi:jacdac:x1f274746:ro:position;1",
        "description": "The relative position of the slider between `0` and `1`.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1f274746:const:variant;1",
        "description": "Specifies the physical layout of the potentiometer.",
        "schema": "dtmi:jacdac:x1f274746:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1f274746:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1f274746:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "slider",
            "displayName": "Slider",
            "enumValue": 1
          },
          {
            "name": "rotary",
            "displayName": "Rotary",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1fa4c95a;1",
    "displayName": "Power",
    "description": "A power-provider service.",
    "contents": [
      {
        "@type": "Property",
        "name": "allowed",
        "@id": "dtmi:jacdac:x1fa4c95a:rw:allowed;1",
        "description": "Can be used to completely disable the service.\nWhen allowed, the service may still not be providing power, see \n`power_status` for the actual current state.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": [
          "Property",
          "Current"
        ],
        "name": "max_power",
        "@id": "dtmi:jacdac:x1fa4c95a:rw:maxpower;1",
        "description": "Limit the power provided by the service. The actual maximum limit will depend on hardware.\nThis field may be read-only in some implementations - you should read it back after setting.",
        "unit": "milliampere",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "power_status",
        "@id": "dtmi:jacdac:x1fa4c95a:ro:powerstatus;1",
        "description": "Indicates whether the power provider is currently providing power (`Powering` state), and if not, why not.\n`Overprovision` means there was another power provider, and we stopped not to overprovision the bus.",
        "schema": "dtmi:jacdac:x1fa4c95a:powerstatus;1"
      },
      {
        "@type": [
          "Telemetry",
          "Current"
        ],
        "name": "current_draw",
        "@id": "dtmi:jacdac:x1fa4c95a:ro:currentdraw;1",
        "description": "Present current draw from the bus.",
        "unit": "milliampere",
        "schema": "integer"
      },
      {
        "@type": [
          "Telemetry",
          "Voltage"
        ],
        "name": "battery_voltage",
        "@id": "dtmi:jacdac:x1fa4c95a:ro:batteryvoltage;1",
        "description": "Voltage on input.",
        "unit": "millivolt",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "battery_charge",
        "@id": "dtmi:jacdac:x1fa4c95a:ro:batterycharge;1",
        "description": "Fraction of charge in the battery.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "battery_capacity",
        "@id": "dtmi:jacdac:x1fa4c95a:const:batterycapacity;1",
        "description": "Energy that can be delivered to the bus when battery is fully charged.\nThis excludes conversion overheads if any.",
        "schema": "integer"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "keep_on_pulse_duration",
        "@id": "dtmi:jacdac:x1fa4c95a:rw:keeponpulseduration;1",
        "description": "Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",
        "unit": "millisecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "keep_on_pulse_period",
        "@id": "dtmi:jacdac:x1fa4c95a:rw:keeponpulseperiod;1",
        "description": "Many USB power packs need current to be drawn from time to time to prevent shutdown.\nThis regulates how often and for how long such current is drawn.\nTypically a 1/8W 22 ohm resistor is used as load. This limits the duty cycle to 10%.",
        "unit": "millisecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "power_status_changed",
        "@id": "dtmi:jacdac:x1fa4c95a:event:powerstatuschanged;1",
        "description": "Emitted whenever `power_status` changes.",
        "schema": "dtmi:jacdac:x1fa4c95a:powerstatus;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1fa4c95a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1fa4c95a:powerstatus;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "disallowed",
            "displayName": "Disallowed",
            "enumValue": 0
          },
          {
            "name": "powering",
            "displayName": "Powering",
            "enumValue": 1
          },
          {
            "name": "overload",
            "displayName": "Overload",
            "enumValue": 2
          },
          {
            "name": "overprovision",
            "displayName": "Overprovision",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x281740c3;1",
    "displayName": "Pressure Button",
    "description": "A pressure sensitive push-button.",
    "contents": [
      {
        "@type": "Property",
        "name": "threshold",
        "@id": "dtmi:jacdac:x281740c3:rw:threshold;1",
        "description": "Indicates the threshold for ``up`` events.",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x281740c3:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x16c7466a;1",
    "displayName": "Protocol Test",
    "description": "This is test service to validate the protocol packet transmissions between the browser and a MCU.\nUse this page if you are porting Jacdac to a new platform.",
    "contents": [
      {
        "@type": "Property",
        "name": "rw_bool",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwbool;1",
        "description": "A read write bool register.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_bool",
        "@id": "dtmi:jacdac:x16c7466a:ro:robool;1",
        "description": "A read only bool register. Mirrors rw_bool.",
        "schema": "boolean"
      },
      {
        "@type": "Property",
        "name": "rw_u32",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwu32;1",
        "description": "A read write u32 register.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_u32",
        "@id": "dtmi:jacdac:x16c7466a:ro:rou32;1",
        "description": "A read only u32 register.. Mirrors rw_u32.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "rw_i32",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwi32;1",
        "description": "A read write i32 register.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_i32",
        "@id": "dtmi:jacdac:x16c7466a:ro:roi32;1",
        "description": "A read only i32 register.. Mirrors rw_i32.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "rw_string",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwstring;1",
        "description": "A read write string register.",
        "schema": "string",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_string",
        "@id": "dtmi:jacdac:x16c7466a:ro:rostring;1",
        "description": "A read only string register. Mirrors rw_string.",
        "schema": "string"
      },
      {
        "@type": "Property",
        "name": "rw_i8_u8_u16_i32",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwi8u8u16i32;1",
        "description": "A read write i8, u8, u16, i32 register.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "i8",
              "schema": "integer"
            },
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "u16",
              "schema": "integer"
            },
            {
              "name": "i32",
              "schema": "integer"
            }
          ]
        },
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_i8_u8_u16_i32",
        "@id": "dtmi:jacdac:x16c7466a:ro:roi8u8u16i32;1",
        "description": "A read only i8, u8, u16, i32 register.. Mirrors rw_i8_u8_u16_i32.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "i8",
              "schema": "integer"
            },
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "u16",
              "schema": "integer"
            },
            {
              "name": "i32",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": "Property",
        "name": "rw_u8_string",
        "@id": "dtmi:jacdac:x16c7466a:rw:rwu8string;1",
        "description": "A read write u8, string register.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "string",
              "schema": "string"
            }
          ]
        },
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "ro_u8_string",
        "@id": "dtmi:jacdac:x16c7466a:ro:rou8string;1",
        "description": "A read only u8, string register.. Mirrors rw_u8_string.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "string",
              "schema": "string"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "e_bool",
        "@id": "dtmi:jacdac:x16c7466a:event:ebool;1",
        "description": "An event raised when rw_bool is modified",
        "schema": "boolean"
      },
      {
        "@type": "Telemetry",
        "name": "e_u32",
        "@id": "dtmi:jacdac:x16c7466a:event:eu32;1",
        "description": "An event raised when rw_u32 is modified",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "e_i32",
        "@id": "dtmi:jacdac:x16c7466a:event:ei32;1",
        "description": "An event raised when rw_i32 is modified",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "e_string",
        "@id": "dtmi:jacdac:x16c7466a:event:estring;1",
        "description": "An event raised when rw_string is modified",
        "schema": "string"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "e_bytes",
        "@id": "dtmi:jacdac:x16c7466a:event:ebytes;1",
        "description": "An event raised when rw_bytes is modified",
        "schema": "dtmi:jacdac:x16c7466a:event;1"
      },
      {
        "@type": "Telemetry",
        "name": "e_i8_u8_u16_i32",
        "@id": "dtmi:jacdac:x16c7466a:event:ei8u8u16i32;1",
        "description": "An event raised when rw_i8_u8_u16_i32 is modified",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "i8",
              "schema": "integer"
            },
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "u16",
              "schema": "integer"
            },
            {
              "name": "i32",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "e_u8_string",
        "@id": "dtmi:jacdac:x16c7466a:event:eu8string;1",
        "description": "An event raised when rw_u8_string is modified",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "u8",
              "schema": "integer"
            },
            {
              "name": "string",
              "schema": "string"
            }
          ]
        }
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x16c7466a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x10bb4eb6;1",
    "displayName": "Pulse Oximeter",
    "description": "A sensor approximating the oxygen level. \n\n**Jacdac is not suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.**",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "oxygen",
        "@id": "dtmi:jacdac:x10bb4eb6:ro:oxygen;1",
        "description": "The estimated oxygen level in blood.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "oxygen_error",
        "@id": "dtmi:jacdac:x10bb4eb6:ro:oxygenerror;1",
        "description": "The estimated error on the reported sensor data.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x10bb4eb6:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x13734c95;1",
    "displayName": "Rain gauge",
    "description": "Measures the amount of liquid precipitation over an area in a predefined period of time.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "precipitation",
        "@id": "dtmi:jacdac:x13734c95:ro:precipitation;1",
        "description": "Total precipitation recorded so far.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "precipitation_precision",
        "@id": "dtmi:jacdac:x13734c95:const:precipitationprecision;1",
        "description": "Typically the amount of rain needed for tipping the bucket.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x13734c95:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1a8b1a28;1",
    "displayName": "Real time clock",
    "description": "Real time clock to support collecting data with precise time stamps.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "local_time",
        "@id": "dtmi:jacdac:x1a8b1a28:ro:localtime;1",
        "description": "Current time in 24h representation. \n* ``day_of_month`` is day of the month, starting at ``1``\n* ``day_of_week`` is day of the week, starting at ``1`` as monday\nDefault streaming period is 1 second.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "year",
              "schema": "integer"
            },
            {
              "name": "month",
              "schema": "integer"
            },
            {
              "name": "day_of_month",
              "schema": "integer"
            },
            {
              "name": "day_of_week",
              "schema": "integer"
            },
            {
              "name": "hour",
              "schema": "integer"
            },
            {
              "name": "min",
              "schema": "integer"
            },
            {
              "name": "sec",
              "schema": "integer"
            }
          ]
        }
      },
      {
        "@type": [
          "Telemetry",
          "TimeSpan"
        ],
        "name": "error",
        "@id": "dtmi:jacdac:x1a8b1a28:ro:error;1",
        "description": "Time drift since the last call to the ``set_time`` command.",
        "unit": "second",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "precision",
        "@id": "dtmi:jacdac:x1a8b1a28:const:precision;1",
        "description": "Error on the clock, in parts per million of seconds.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1a8b1a28:const:variant;1",
        "description": "The type of physical clock used by the sensor.",
        "schema": "dtmi:jacdac:x1a8b1a28:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1a8b1a28:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1a8b1a28:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "computer",
            "displayName": "Computer",
            "enumValue": 1
          },
          {
            "name": "crystal",
            "displayName": "Crystal",
            "enumValue": 2
          },
          {
            "name": "cuckoo",
            "displayName": "Cuckoo",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x126c4cb2;1",
    "displayName": "Reflected light",
    "description": "A sensor that detects light and dark surfaces, commonly used for line following robots.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "brightness",
        "@id": "dtmi:jacdac:x126c4cb2:ro:brightness;1",
        "description": "Reports the reflected brightness. It may be a digital value or, for some sensor, analog value.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x126c4cb2:const:variant;1",
        "description": "Type of physical sensor used",
        "schema": "dtmi:jacdac:x126c4cb2:variant;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "dark",
        "@id": "dtmi:jacdac:x126c4cb2:event:dark;1",
        "description": "The sensor detected a transition from light to dark",
        "schema": "dtmi:jacdac:x126c4cb2:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "light",
        "@id": "dtmi:jacdac:x126c4cb2:event:light;1",
        "description": "The sensor detected a transition from dark to light",
        "schema": "dtmi:jacdac:x126c4cb2:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x126c4cb2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x126c4cb2:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "infraredDigital",
            "displayName": "InfraredDigital",
            "enumValue": 1
          },
          {
            "name": "infraredAnalog",
            "displayName": "InfraredAnalog",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x183fe656;1",
    "displayName": "Relay",
    "description": "A switching relay.",
    "contents": [
      {
        "@type": "Property",
        "name": "closed",
        "@id": "dtmi:jacdac:x183fe656:rw:closed;1",
        "description": "Indicates whether the relay circuit is currently on (closed) or off (closed).",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x183fe656:const:variant;1",
        "description": "Describes the type of relay used.",
        "schema": "dtmi:jacdac:x183fe656:variant;1"
      },
      {
        "@type": [
          "Property",
          "Current"
        ],
        "name": "max_switching_current",
        "@id": "dtmi:jacdac:x183fe656:const:maxswitchingcurrent;1",
        "description": "Maximum switching current for a resistive load.",
        "unit": "milliampere",
        "schema": "integer"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "on",
        "@id": "dtmi:jacdac:x183fe656:event:on;1",
        "description": "Emitted when relay goes from ``off`` to ``on`` state.",
        "schema": "dtmi:jacdac:x183fe656:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "off",
        "@id": "dtmi:jacdac:x183fe656:event:off;1",
        "description": "Emitted when relay goes from ``on`` to ``off`` state.",
        "schema": "dtmi:jacdac:x183fe656:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x183fe656:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x183fe656:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "electromechanical",
            "displayName": "Electromechanical",
            "enumValue": 1
          },
          {
            "name": "solidState",
            "displayName": "SolidState",
            "enumValue": 2
          },
          {
            "name": "reed",
            "displayName": "Reed",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1789f0a2;1",
    "displayName": "Random Number Generator",
    "description": "Generates random numbers using entropy sourced from physical processes.\n\nThis typically uses a cryptographical pseudo-random number generator (for example [Fortuna](https://en.wikipedia.org/wiki/Fortuna_(PRNG))),\nwhich is periodically re-seeded with entropy coming from some hardware source.",
    "contents": [
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1789f0a2:const:variant;1",
        "description": "The type of algorithm/technique used to generate the number.\n`Quantum` refers to dedicated hardware device generating random noise due to quantum effects.\n`ADCNoise` is the noise from quick readings of analog-digital converter, which reads temperature of the MCU or some floating pin.\n`WebCrypto` refers is used in simulators, where the source of randomness comes from an advanced operating system.",
        "schema": "dtmi:jacdac:x1789f0a2:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1789f0a2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1789f0a2:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "quantum",
            "displayName": "Quantum",
            "enumValue": 1
          },
          {
            "name": "aDCNoise",
            "displayName": "ADCNoise",
            "enumValue": 2
          },
          {
            "name": "webCrypto",
            "displayName": "WebCrypto",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1e4b7e66;1",
    "displayName": "Role Manager",
    "description": "Assign roles to services on the Jacdac bus.\n\nInternally, the role manager stores a mapping from `(device_id, service_idx)` to role name.\nUsers refer to services by using role names (eg., they instantiate an accelerometer client with a given role name).\nEach client has a role, and roles are unique to clients\n(ie., one should not have both a gyro and accelerometer service with role `left_leg`).\n\nRole names can be hierarchical, using slash character as a separator.\nExamples: `left_leg/acc`, `left_leg/gyro`, `right_leg/acc`.\nIf two roles share the prefix before first slash, it should be used as a hint that the services\nshould be co-located on a single device\n(eg., here the `left_leg` \"location\" is expected to have both an accelerometer and a gyro service on a single device).",
    "contents": [
      {
        "@type": "Property",
        "name": "auto_bind",
        "@id": "dtmi:jacdac:x1e4b7e66:rw:autobind;1",
        "description": "Normally, if some roles are unfilled, and there are idle services that can fulfill them,\nthe brain device will assign roles (bind) automatically.\nSuch automatic assignment happens every second or so, and is trying to be smart about \nco-locating roles that share \"host\" (part before first slash),\nas well as reasonably stable assignments.\nOnce user start assigning roles manually using this service, auto-binding should be disabled to avoid confusion.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Telemetry",
        "name": "all_roles_allocated",
        "@id": "dtmi:jacdac:x1e4b7e66:ro:allrolesallocated;1",
        "description": "Indicates if all required roles have been allocated to devices.",
        "schema": "boolean"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "change",
        "@id": "dtmi:jacdac:x1e4b7e66:event:change;1",
        "description": "Emit notifying that the internal state of the service changed.",
        "schema": "dtmi:jacdac:x1e4b7e66:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1e4b7e66:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x10fa29c9;1",
    "displayName": "Rotary encoder",
    "description": "An incremental rotary encoder - converts angular motion of a shaft to digital signal.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "position",
        "@id": "dtmi:jacdac:x10fa29c9:ro:position;1",
        "description": "Upon device reset starts at `0` (regardless of the shaft position).\nIncreases by `1` for a clockwise \"click\", by `-1` for counter-clockwise.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "clicks_per_turn",
        "@id": "dtmi:jacdac:x10fa29c9:const:clicksperturn;1",
        "description": "This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x10fa29c9:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x19f4d06b;1",
    "displayName": "Rover",
    "description": "A roving robot.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "kinematics",
        "@id": "dtmi:jacdac:x19f4d06b:ro:kinematics;1",
        "description": "The current position and orientation of the robot.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "x",
              "schema": "float"
            },
            {
              "name": "y",
              "schema": "float"
            },
            {
              "name": "vx",
              "schema": "float"
            },
            {
              "name": "vy",
              "schema": "float"
            },
            {
              "name": "heading",
              "schema": "float"
            }
          ]
        }
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x19f4d06b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1d90e1c5;1",
    "displayName": "Sensor Aggregator",
    "description": "Aggregate data from multiple sensors into a single stream\n(often used as input to machine learning models on the same device, see model runner service).",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "num_samples",
        "@id": "dtmi:jacdac:x1d90e1c5:ro:numsamples;1",
        "description": "Number of input samples collected so far.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "sample_size",
        "@id": "dtmi:jacdac:x1d90e1c5:ro:samplesize;1",
        "description": "Size of a single sample.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "streaming_samples",
        "@id": "dtmi:jacdac:x1d90e1c5:rw:streamingsamples;1",
        "description": "When set to `N`, will stream `N` samples as `current_sample` reading.",
        "schema": "integer",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1d90e1c5:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1d90e1c5:sampletype;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "u8",
            "displayName": "U8",
            "enumValue": 8
          },
          {
            "name": "i8",
            "displayName": "I8",
            "enumValue": 136
          },
          {
            "name": "u16",
            "displayName": "U16",
            "enumValue": 16
          },
          {
            "name": "i16",
            "displayName": "I16",
            "enumValue": 144
          },
          {
            "name": "u32",
            "displayName": "U32",
            "enumValue": 32
          },
          {
            "name": "i32",
            "displayName": "I32",
            "enumValue": 160
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x12fc9103;1",
    "displayName": "Servo",
    "description": "Servo is a small motor with arm that can be pointing at a specific direction.\n\nThe `min/max_angle/pulse` may be read-only if the servo is permanently affixed to its Jacdac controller.",
    "contents": [
      {
        "@type": "Property",
        "name": "angle",
        "@id": "dtmi:jacdac:x12fc9103:rw:angle;1",
        "description": "Specifies the angle of the arm.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x12fc9103:rw:enabled;1",
        "description": "Turn the power to the servo on/off.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "offset",
        "@id": "dtmi:jacdac:x12fc9103:rw:offset;1",
        "description": "Correction applied to the angle to account for the servo arm drift.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "min_angle",
        "@id": "dtmi:jacdac:x12fc9103:const:minangle;1",
        "description": "Lowest angle that can be set.",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "min_pulse",
        "@id": "dtmi:jacdac:x12fc9103:rw:minpulse;1",
        "description": "The length of pulse corresponding to lowest angle.",
        "unit": "microsecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "max_angle",
        "@id": "dtmi:jacdac:x12fc9103:const:maxangle;1",
        "description": "Highest angle that can be set.",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "max_pulse",
        "@id": "dtmi:jacdac:x12fc9103:rw:maxpulse;1",
        "description": "The length of pulse corresponding to highest angle.",
        "unit": "microsecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "stall_torque",
        "@id": "dtmi:jacdac:x12fc9103:const:stalltorque;1",
        "description": "The servo motor will stop rotating when it is trying to move a ``stall_torque`` weight at a radial distance of ``1.0`` cm.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "response_speed",
        "@id": "dtmi:jacdac:x12fc9103:const:responsespeed;1",
        "description": "Time to move 60°.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x12fc9103:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1107dc4a;1",
    "displayName": "Settings",
    "description": "Non-volatile key-value storage interface for storing settings.",
    "contents": [
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "change",
        "@id": "dtmi:jacdac:x1107dc4a:event:change;1",
        "description": "Notifies that some setting have been modified.",
        "schema": "dtmi:jacdac:x1107dc4a:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1107dc4a:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x196158f7;1",
    "displayName": "7-segment display",
    "description": "A 7-segment numeric display, with one or more digits.",
    "contents": [
      {
        "@type": "Property",
        "name": "brightness",
        "@id": "dtmi:jacdac:x196158f7:rw:brightness;1",
        "description": "Controls the brightness of the LEDs. ``0`` means off.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "double_dots",
        "@id": "dtmi:jacdac:x196158f7:rw:doubledots;1",
        "description": "Turn on or off the column LEDs (separating minutes from hours, etc.) in of the segment.\nIf the column LEDs is not supported, the value remains false.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "digit_count",
        "@id": "dtmi:jacdac:x196158f7:const:digitcount;1",
        "description": "The number of digits available on the display.",
        "schema": "integer"
      },
      {
        "@type": "Property",
        "name": "decimal_point",
        "@id": "dtmi:jacdac:x196158f7:const:decimalpoint;1",
        "description": "True if decimal points are available (on all digits).",
        "schema": "boolean"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x196158f7:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1d4aa3b3;1",
    "displayName": "Soil moisture",
    "description": "A soil moisture sensor.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "moisture",
        "@id": "dtmi:jacdac:x1d4aa3b3:ro:moisture;1",
        "description": "Indicates the wetness of the soil, from ``dry`` to ``wet``.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1d4aa3b3:const:variant;1",
        "description": "Describe the type of physical sensor.",
        "schema": "dtmi:jacdac:x1d4aa3b3:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1d4aa3b3:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1d4aa3b3:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "resistive",
            "displayName": "Resistive",
            "enumValue": 1
          },
          {
            "name": "capacitive",
            "displayName": "Capacitive",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x171723ca;1",
    "displayName": "Solenoid",
    "description": "A push-pull solenoid is a type of relay that pulls a coil when activated.",
    "contents": [
      {
        "@type": "Property",
        "name": "pulled",
        "@id": "dtmi:jacdac:x171723ca:rw:pulled;1",
        "description": "Indicates whether the solenoid is energized and pulled (on) or pushed (off).",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x171723ca:const:variant;1",
        "description": "Describes the type of solenoid used.",
        "schema": "dtmi:jacdac:x171723ca:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x171723ca:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x171723ca:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "pushPull",
            "displayName": "PushPull",
            "enumValue": 1
          },
          {
            "name": "valve",
            "displayName": "Valve",
            "enumValue": 2
          },
          {
            "name": "latch",
            "displayName": "Latch",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x14ad1a5d;1",
    "displayName": "Sound level",
    "description": "A sound level detector sensor, gives a relative indication of the sound level.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "sound_level",
        "@id": "dtmi:jacdac:x14ad1a5d:ro:soundlevel;1",
        "description": "The sound level detected by the microphone",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x14ad1a5d:rw:enabled;1",
        "description": "Turn on or off the microphone.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "min_decibels",
        "@id": "dtmi:jacdac:x14ad1a5d:rw:mindecibels;1",
        "description": "The minimum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "max_decibels",
        "@id": "dtmi:jacdac:x14ad1a5d:rw:maxdecibels;1",
        "description": "The maximum power value considered by the sensor.\nIf both ``min_decibels`` and ``max_decibels`` are supported,\nthe volume in deciment can be linearly interpolated between\n``[min_decibels, max_decibels]``.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "loud_threshold",
        "@id": "dtmi:jacdac:x14ad1a5d:rw:loudthreshold;1",
        "description": "The sound level to trigger a loud event.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "quiet_threshold",
        "@id": "dtmi:jacdac:x14ad1a5d:rw:quietthreshold;1",
        "description": "The sound level to trigger a quiet event.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "loud",
        "@id": "dtmi:jacdac:x14ad1a5d:event:loud;1",
        "description": "Raised when a loud sound is detected",
        "schema": "dtmi:jacdac:x14ad1a5d:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "quiet",
        "@id": "dtmi:jacdac:x14ad1a5d:event:quiet;1",
        "description": "Raised when a period of quietness is detected",
        "schema": "dtmi:jacdac:x14ad1a5d:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x14ad1a5d:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1403d338;1",
    "displayName": "Sound player",
    "description": "A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds.",
    "contents": [
      {
        "@type": "Property",
        "name": "volume",
        "@id": "dtmi:jacdac:x1403d338:rw:volume;1",
        "description": "Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes.",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1403d338:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x157abc1e;1",
    "displayName": "Sound Spectrum",
    "description": "A microphone that analyzes the sound specturm",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x157abc1e:rw:enabled;1",
        "description": "Turns on/off the micropohone.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "fft_pow2_size",
        "@id": "dtmi:jacdac:x157abc1e:rw:fftpow2size;1",
        "description": "The power of 2 used as the size of the FFT to be used to determine the frequency domain.",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "min_decibels",
        "@id": "dtmi:jacdac:x157abc1e:rw:mindecibels;1",
        "description": "The minimum power value in the scaling range for the FFT analysis data",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "max_decibels",
        "@id": "dtmi:jacdac:x157abc1e:rw:maxdecibels;1",
        "description": "The maximum power value in the scaling range for the FFT analysis data",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "smoothing_time_constant",
        "@id": "dtmi:jacdac:x157abc1e:rw:smoothingtimeconstant;1",
        "description": "The averaging constant with the last analysis frame. \nIf ``0`` is set, there is no averaging done, whereas a value of ``1`` means \"overlap the previous and current buffer quite a lot while computing the value\".",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x157abc1e:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1204d995;1",
    "displayName": "Speech synthesis",
    "description": "A speech synthesizer",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x1204d995:rw:enabled;1",
        "description": "Determines if the speech engine is in a non-paused state.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "lang",
        "@id": "dtmi:jacdac:x1204d995:rw:lang;1",
        "description": "Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt.",
        "schema": "string",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "volume",
        "@id": "dtmi:jacdac:x1204d995:rw:volume;1",
        "description": "Volume for utterances.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "pitch",
        "@id": "dtmi:jacdac:x1204d995:rw:pitch;1",
        "description": "Pitch for utterances",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "rate",
        "@id": "dtmi:jacdac:x1204d995:rw:rate;1",
        "description": "Rate for utterances",
        "schema": "float",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1204d995:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1ad29402;1",
    "displayName": "Switch",
    "description": "A switch, which keeps its position.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "active",
        "@id": "dtmi:jacdac:x1ad29402:ro:active;1",
        "description": "Indicates whether the switch is currently active (on).",
        "schema": "boolean"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1ad29402:const:variant;1",
        "description": "Describes the type of switch used.",
        "schema": "dtmi:jacdac:x1ad29402:variant;1"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "auto_off_delay",
        "@id": "dtmi:jacdac:x1ad29402:const:autooffdelay;1",
        "description": "Specifies the delay without activity to automatically turn off after turning on.\nFor example, some light switches in staircases have such a capability.",
        "unit": "second",
        "schema": "float"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "on",
        "@id": "dtmi:jacdac:x1ad29402:event:on;1",
        "description": "Emitted when switch goes from ``off`` to ``on``.",
        "schema": "dtmi:jacdac:x1ad29402:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "off",
        "@id": "dtmi:jacdac:x1ad29402:event:off;1",
        "description": "Emitted when switch goes from ``on`` to ``off``.",
        "schema": "dtmi:jacdac:x1ad29402:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1ad29402:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1ad29402:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "slide",
            "displayName": "Slide",
            "enumValue": 1
          },
          {
            "name": "tilt",
            "displayName": "Tilt",
            "enumValue": 2
          },
          {
            "name": "pushButton",
            "displayName": "PushButton",
            "enumValue": 3
          },
          {
            "name": "tactile",
            "displayName": "Tactile",
            "enumValue": 4
          },
          {
            "name": "toggle",
            "displayName": "Toggle",
            "enumValue": 5
          },
          {
            "name": "proximity",
            "displayName": "Proximity",
            "enumValue": 6
          },
          {
            "name": "magnetic",
            "displayName": "Magnetic",
            "enumValue": 7
          },
          {
            "name": "footPedal",
            "displayName": "FootPedal",
            "enumValue": 8
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1b43b70b;1",
    "displayName": "TCP",
    "description": "Data transfer over TCP/IP and TLS stream sockets.",
    "contents": [],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1b43b70b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1b43b70b:tcperror;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "invalidCommand",
            "displayName": "InvalidCommand",
            "enumValue": 1
          },
          {
            "name": "invalidCommandPayload",
            "displayName": "InvalidCommandPayload",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x143ac061;1",
    "displayName": "Thermocouple",
    "description": "A thermocouple using a heat probe to gather temperatures.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "temperature",
        "@id": "dtmi:jacdac:x143ac061:ro:temperature;1",
        "description": "The temperature.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_temperature",
        "@id": "dtmi:jacdac:x143ac061:const:mintemperature;1",
        "description": "Lowest temperature that can be reported.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_temperature",
        "@id": "dtmi:jacdac:x143ac061:const:maxtemperature;1",
        "description": "Highest temperature that can be reported.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "temperature_error",
        "@id": "dtmi:jacdac:x143ac061:ro:temperatureerror;1",
        "description": "The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x143ac061:const:variant;1",
        "description": "Specifies the type of thermometer.",
        "schema": "dtmi:jacdac:x143ac061:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x143ac061:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x143ac061:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "typeK",
            "displayName": "TypeK",
            "enumValue": 1
          },
          {
            "name": "typeJ",
            "displayName": "TypeJ",
            "enumValue": 2
          },
          {
            "name": "typeT",
            "displayName": "TypeT",
            "enumValue": 3
          },
          {
            "name": "typeE",
            "displayName": "TypeE",
            "enumValue": 4
          },
          {
            "name": "typeN",
            "displayName": "TypeN",
            "enumValue": 5
          },
          {
            "name": "typeS",
            "displayName": "TypeS",
            "enumValue": 6
          },
          {
            "name": "typeR",
            "displayName": "TypeR",
            "enumValue": 7
          },
          {
            "name": "typeB",
            "displayName": "TypeB",
            "enumValue": 8
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1421bac7;1",
    "displayName": "Thermometer",
    "description": "A thermometer measuring outside or inside environment.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "temperature",
        "@id": "dtmi:jacdac:x1421bac7:ro:temperature;1",
        "description": "The temperature.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_temperature",
        "@id": "dtmi:jacdac:x1421bac7:const:mintemperature;1",
        "description": "Lowest temperature that can be reported.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_temperature",
        "@id": "dtmi:jacdac:x1421bac7:const:maxtemperature;1",
        "description": "Highest temperature that can be reported.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "temperature_error",
        "@id": "dtmi:jacdac:x1421bac7:ro:temperatureerror;1",
        "description": "The real temperature is between `temperature - temperature_error` and `temperature + temperature_error`.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1421bac7:const:variant;1",
        "description": "Specifies the type of thermometer.",
        "schema": "dtmi:jacdac:x1421bac7:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1421bac7:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1421bac7:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "outdoor",
            "displayName": "Outdoor",
            "enumValue": 1
          },
          {
            "name": "indoor",
            "displayName": "Indoor",
            "enumValue": 2
          },
          {
            "name": "body",
            "displayName": "Body",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x15c38d9b;1",
    "displayName": "Traffic Light",
    "description": "Controls a mini traffic with a red, orange and green LED.",
    "contents": [
      {
        "@type": "Property",
        "name": "red",
        "@id": "dtmi:jacdac:x15c38d9b:rw:red;1",
        "description": "The on/off state of the red light.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "orange",
        "@id": "dtmi:jacdac:x15c38d9b:rw:orange;1",
        "description": "The on/off state of the red light.",
        "schema": "boolean",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "green",
        "@id": "dtmi:jacdac:x15c38d9b:rw:green;1",
        "description": "The on/off state of the red light.",
        "schema": "boolean",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x15c38d9b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x12a5b597;1",
    "displayName": "Total Volatile organic compound",
    "description": "Measures equivalent Total Volatile Organic Compound levels.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "TVOC",
        "@id": "dtmi:jacdac:x12a5b597:ro:tvoc;1",
        "description": "Total volatile organic compound readings in parts per billion.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "TVOC_error",
        "@id": "dtmi:jacdac:x12a5b597:ro:tvocerror;1",
        "description": "Error on the reading data",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_TVOC",
        "@id": "dtmi:jacdac:x12a5b597:const:mintvoc;1",
        "description": "Minimum measurable value",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_TVOC",
        "@id": "dtmi:jacdac:x12a5b597:const:maxtvoc;1",
        "description": "Minimum measurable value",
        "schema": "float"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "conditioning_period",
        "@id": "dtmi:jacdac:x12a5b597:const:conditioningperiod;1",
        "description": "Time required to achieve good sensor stability before measuring after long idle period.",
        "unit": "second",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x12a5b597:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1f6e0d90;1",
    "displayName": "UV index",
    "description": "The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "uv_index",
        "@id": "dtmi:jacdac:x1f6e0d90:ro:uvindex;1",
        "description": "Ultraviolet index, typically refreshed every second.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "uv_index_error",
        "@id": "dtmi:jacdac:x1f6e0d90:ro:uvindexerror;1",
        "description": "Error on the UV measure.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1f6e0d90:const:variant;1",
        "description": "The type of physical sensor and capabilities.",
        "schema": "dtmi:jacdac:x1f6e0d90:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1f6e0d90:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1f6e0d90:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "uVA_UVB",
            "displayName": "UVA_UVB",
            "enumValue": 1
          },
          {
            "name": "visible_IR",
            "displayName": "Visible_IR",
            "enumValue": 2
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x2194841f;1",
    "displayName": "Verified Telemetry",
    "description": "A mixin service that exposes verified telemetry information for a sensor (see https://github.com/Azure/Verified-Telemetry/tree/main/PnPModel).",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "telemetry_status",
        "@id": "dtmi:jacdac:x2194841f:ro:telemetrystatus;1",
        "description": "Reads the telemetry working status, where ``true`` is working and ``false`` is faulty.",
        "schema": "dtmi:jacdac:x2194841f:status;1"
      },
      {
        "@type": [
          "Property",
          "TimeSpan"
        ],
        "name": "telemetry_status_interval",
        "@id": "dtmi:jacdac:x2194841f:rw:telemetrystatusinterval;1",
        "description": "Specifies the interval between computing the fingerprint information.",
        "unit": "millisecond",
        "schema": "integer",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "fingerprint_type",
        "@id": "dtmi:jacdac:x2194841f:const:fingerprinttype;1",
        "description": "Type of the fingerprint.",
        "schema": "dtmi:jacdac:x2194841f:fingerprinttype;1"
      },
      {
        "@type": "Telemetry",
        "name": "fingerprint_template",
        "@id": "dtmi:jacdac:x2194841f:ro:fingerprinttemplate;1",
        "description": "Template Fingerprint information of a working sensor.",
        "schema": {
          "@type": "Object",
          "fields": [
            {
              "name": "confidence",
              "schema": "integer"
            },
            {
              "name": "template"
            }
          ]
        }
      },
      {
        "@type": "Telemetry",
        "name": "telemetry_status_change",
        "@id": "dtmi:jacdac:x2194841f:event:telemetrystatuschange;1",
        "description": "The telemetry status of the device was updated.",
        "schema": "dtmi:jacdac:x2194841f:status;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "fingerprint_template_change",
        "@id": "dtmi:jacdac:x2194841f:event:fingerprinttemplatechange;1",
        "description": "The fingerprint template was updated",
        "schema": "dtmi:jacdac:x2194841f:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x2194841f:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x2194841f:status;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "unknown",
            "displayName": "Unknown",
            "enumValue": 0
          },
          {
            "name": "working",
            "displayName": "Working",
            "enumValue": 1
          },
          {
            "name": "faulty",
            "displayName": "Faulty",
            "enumValue": 2
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x2194841f:fingerprinttype;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "fallCurve",
            "displayName": "FallCurve",
            "enumValue": 1
          },
          {
            "name": "currentSense",
            "displayName": "CurrentSense",
            "enumValue": 2
          },
          {
            "name": "custom",
            "displayName": "Custom",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x183fc4a2;1",
    "displayName": "Vibration motor",
    "description": "A vibration motor.",
    "contents": [
      {
        "@type": "Property",
        "name": "enabled",
        "@id": "dtmi:jacdac:x183fc4a2:rw:enabled;1",
        "description": "Determines if the vibration motor responds to vibrate commands.",
        "schema": "boolean",
        "writable": true
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x183fc4a2:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x147b62ed;1",
    "displayName": "Water level",
    "description": "A sensor that measures liquid/water level.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "level",
        "@id": "dtmi:jacdac:x147b62ed:ro:level;1",
        "description": "The reported water level.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x147b62ed:const:variant;1",
        "description": "The type of physical sensor.",
        "schema": "dtmi:jacdac:x147b62ed:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x147b62ed:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x147b62ed:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "resistive",
            "displayName": "Resistive",
            "enumValue": 1
          },
          {
            "name": "contactPhotoElectric",
            "displayName": "ContactPhotoElectric",
            "enumValue": 2
          },
          {
            "name": "nonContactPhotoElectric",
            "displayName": "NonContactPhotoElectric",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1f4d5040;1",
    "displayName": "Weight Scale",
    "description": "A weight measuring sensor.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "weight",
        "@id": "dtmi:jacdac:x1f4d5040:ro:weight;1",
        "description": "The reported weight.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "weight_error",
        "@id": "dtmi:jacdac:x1f4d5040:ro:weighterror;1",
        "description": "The estimate error on the reported reading.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "zero_offset",
        "@id": "dtmi:jacdac:x1f4d5040:rw:zerooffset;1",
        "description": "Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.\nYou do not need to subtract that from the reading, it has already been done.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "gain",
        "@id": "dtmi:jacdac:x1f4d5040:rw:gain;1",
        "description": "Calibrated gain on the weight scale error.",
        "schema": "float",
        "writable": true
      },
      {
        "@type": "Property",
        "name": "max_weight",
        "@id": "dtmi:jacdac:x1f4d5040:const:maxweight;1",
        "description": "Maximum supported weight on the scale.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "min_weight",
        "@id": "dtmi:jacdac:x1f4d5040:const:minweight;1",
        "description": "Minimum recommend weight on the scale.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "weight_resolution",
        "@id": "dtmi:jacdac:x1f4d5040:const:weightresolution;1",
        "description": "Smallest, yet distinguishable change in reading.",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "variant",
        "@id": "dtmi:jacdac:x1f4d5040:const:variant;1",
        "description": "The type of physical scale",
        "schema": "dtmi:jacdac:x1f4d5040:variant;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1f4d5040:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x1f4d5040:variant;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "body",
            "displayName": "Body",
            "enumValue": 1
          },
          {
            "name": "food",
            "displayName": "Food",
            "enumValue": 2
          },
          {
            "name": "jewelry",
            "displayName": "Jewelry",
            "enumValue": 3
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x18aae1fa;1",
    "displayName": "WIFI",
    "description": "Discovery and connection to WiFi networks. Separate TCP service is used for data transfer.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "connected",
        "@id": "dtmi:jacdac:x18aae1fa:ro:connected;1",
        "description": "Indicates whether or not we currently have an IP address assigned.",
        "schema": "boolean"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "got_ip",
        "@id": "dtmi:jacdac:x18aae1fa:event:gotip;1",
        "description": "Emitted upon successful join and IP address assignment.",
        "schema": "dtmi:jacdac:x18aae1fa:event;1"
      },
      {
        "@type": [
          "Telemetry",
          "Event"
        ],
        "name": "lost_ip",
        "@id": "dtmi:jacdac:x18aae1fa:event:lostip;1",
        "description": "Emitted when disconnected from network.",
        "schema": "dtmi:jacdac:x18aae1fa:event;1"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x18aae1fa:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      },
      {
        "@type": "Enum",
        "@id": "dtmi:jacdac:x18aae1fa:apflags;1",
        "valueSchema": "integer",
        "enumValues": [
          {
            "name": "hasPassword",
            "displayName": "HasPassword",
            "enumValue": 1
          },
          {
            "name": "wPS",
            "displayName": "WPS",
            "enumValue": 2
          },
          {
            "name": "hasSecondaryChannelAbove",
            "displayName": "HasSecondaryChannelAbove",
            "enumValue": 4
          },
          {
            "name": "hasSecondaryChannelBelow",
            "displayName": "HasSecondaryChannelBelow",
            "enumValue": 8
          },
          {
            "name": "iEEE_802_11B",
            "displayName": "IEEE_802_11B",
            "enumValue": 256
          },
          {
            "name": "iEEE_802_11A",
            "displayName": "IEEE_802_11A",
            "enumValue": 512
          },
          {
            "name": "iEEE_802_11G",
            "displayName": "IEEE_802_11G",
            "enumValue": 1024
          },
          {
            "name": "iEEE_802_11N",
            "displayName": "IEEE_802_11N",
            "enumValue": 2048
          },
          {
            "name": "iEEE_802_11AC",
            "displayName": "IEEE_802_11AC",
            "enumValue": 4096
          },
          {
            "name": "iEEE_802_11AX",
            "displayName": "IEEE_802_11AX",
            "enumValue": 8192
          },
          {
            "name": "iEEE_802_LongRange",
            "displayName": "IEEE_802_LongRange",
            "enumValue": 32768
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x186be92b;1",
    "displayName": "Wind direction",
    "description": "A sensor that measures wind direction.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "wind_direction",
        "@id": "dtmi:jacdac:x186be92b:ro:winddirection;1",
        "description": "The direction of the wind.",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "wind_direction_error",
        "@id": "dtmi:jacdac:x186be92b:ro:winddirectionerror;1",
        "description": "Error on the wind direction reading",
        "schema": "integer"
      },
      {
        "@type": "Telemetry",
        "name": "wind_direction_offset",
        "@id": "dtmi:jacdac:x186be92b:ro:winddirectionoffset;1",
        "description": "Offset added to direction to account for sensor calibration.",
        "schema": "integer"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x186be92b:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  },
  {
    "@type": "Interface",
    "@id": "dtmi:jacdac:services:x1b591bbf;1",
    "displayName": "Wind speed",
    "description": "A sensor that measures wind speed.",
    "contents": [
      {
        "@type": "Telemetry",
        "name": "wind_speed",
        "@id": "dtmi:jacdac:x1b591bbf:ro:windspeed;1",
        "description": "The velocity of the wind.",
        "schema": "float"
      },
      {
        "@type": "Telemetry",
        "name": "wind_speed_error",
        "@id": "dtmi:jacdac:x1b591bbf:ro:windspeederror;1",
        "description": "Error on the reading",
        "schema": "float"
      },
      {
        "@type": "Property",
        "name": "max_wind_speed",
        "@id": "dtmi:jacdac:x1b591bbf:const:maxwindspeed;1",
        "description": "Maximum speed that can be measured by the sensor.",
        "schema": "float"
      }
    ],
    "extends": [
      "dtmi:jacdac:services:x1ffffff3;1",
      "dtmi:jacdac:services:x1ffffff2;1"
    ],
    "schemas": [
      {
        "@id": "dtmi:jacdac:x1b591bbf:event;1",
        "@type": "Object",
        "fields": [
          {
            "name": "count",
            "schema": "integer"
          }
        ]
      }
    ],
    "@context": "dtmi:dtdl:context;2"
  }
]