{"version":3,"file":"7175-e020a46e1e5476b78582.js","mappings":";;;;;;;;;;AAGA,IAAIA,CAAJ;AAAA,IAIMC,CAAAA,GAAa,IAAIC,OAAJ,EAJnB;AAAA,IAMMC,CAAAA,GACHC,SAAAA,CAAkBD,UAAlBC,IACAA,SAAAA,CAAkBC,aADlBD,IAEAA,SAAAA,CAAkBE,gBATrB;;AASqBA,SAQLC,CARKD,CASnBE,CATmBF,EASnBE;AAKA,SAAM,0BAA0BE,MAA1B,IAODV,CAAAA,KACHA,CAAAA,GAAuB,IAAIW,oBAAJ,CACrB;AACEC,IAAAA,CAAAA,CAAQC,OAARD,CAAgB;AAAA;AACVE,MAAAA,CAAAA,CAAMC,cAAND,KAAMC,SAAAA,CAAAA,GAERd,CAAAA,CAAWe,GAAXf,CAAea,CAAAA,CAAMG,MAArBhB,CAFQc,KAEaE,CAAAA,EAFbF,EAIRd,CAAAA,CAAAA,MAAAA,CAAkBa,CAAAA,CAAMG,MAAxBhB,CAJEa;AAIsBG,KAL5BL;AAK4BK,GAPT,EAWrB;AACEC,IAAAA,UAAAA,EAAAA,UAAAA,QAvBiBf,CAuBjBe,GAvBiBf,KAAAA,CAuBjBe,GAvBiBf,CAAAA,CAAYM,aAuB7BS,KAvB6BT,QAwBCN,CAxBDM,IAwBCN,CAAAA,CAAYgB,QAD1CD,GAC0CC,QAD1CD,GAC0CC;AAF5C,GAXqB,CADpBnB,CAAAA,EAc2CmB,UAQ9CC,CAR8CD,EAQ9CC;AAQA,WANIA,CAAAA,CAAQC,OAARD,KAEFnB,CAAAA,CAAWqB,GAAXrB,CAAemB,CAAAA,CAAQC,OAAvBpB,EAAgCO,CAAhCP,GACAD,CAAAA,CAAqBuB,OAArBvB,CAA6BoB,CAAAA,CAAQC,OAArCrB,CAHEoB,GAGmCC,YAAAA;AAIjCrB,MAAAA,CAAAA,IAAwBoB,CAAAA,CAAQC,OAAhCrB,KACFC,CAAAA,CAAAA,MAAAA,CAAkBmB,CAAAA,CAAQC,OAA1BpB,GACAD,CAAAA,CAAqBwB,SAArBxB,CAA+BoB,CAAAA,CAAQC,OAAvCrB,CAFEA;AAEqCqB,KAH3C;AAG2CA,GAxCvC,IAwCuCA,YAAAA;AArCzC,WADAb,CAAAA,IAAAA,YAAAA,CAAAA,CACA;AADAA,GAFJ;AAEIA","sources":["webpack://jacdac-docs/../src/components/intersection-observer.ts"],"sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { RefObject } from \"react\"\n\nlet intersectionObserver: IntersectionObserver\n\nexport type Unobserver = () => void\n\nconst ioEntryMap = new WeakMap<HTMLElement, () => void>()\n/* eslint-disable @typescript-eslint/no-explicit-any  */\nconst connection =\n  (navigator as any).connection ||\n  (navigator as any).mozConnection ||\n  (navigator as any).webkitConnection\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// These match the thresholds used in Chrome's native lazy loading\n// @see https://web.dev/browser-level-image-lazy-loading/#distance-from-viewport-thresholds\nconst FAST_CONNECTION_THRESHOLD = `1250px`\nconst SLOW_CONNECTION_THRESHOLD = `2500px`\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: RefObject<HTMLElement | undefined>) => Unobserver {\n  const connectionType = connection?.effectiveType\n\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Get the matching entry's callback and call it\n            ioEntryMap.get(entry.target as HTMLElement)?.()\n            // We only need to call it once\n            ioEntryMap.delete(entry.target as HTMLElement)\n          }\n        })\n      },\n      {\n        rootMargin:\n          connectionType === `4g` && !connection?.saveData\n            ? FAST_CONNECTION_THRESHOLD\n            : SLOW_CONNECTION_THRESHOLD,\n      }\n    )\n  }\n\n  return function observe(\n    element: RefObject<HTMLElement | undefined>\n  ): Unobserver {\n    if (element.current) {\n      // Store a reference to the callback mapped to the element being watched\n      ioEntryMap.set(element.current, callback)\n      intersectionObserver.observe(element.current)\n    }\n\n    return function unobserve(): void {\n      if (intersectionObserver && element.current) {\n        ioEntryMap.delete(element.current)\n        intersectionObserver.unobserve(element.current)\n      }\n    }\n  }\n}\n"],"names":["intersectionObserver","ioEntryMap","WeakMap","connection","navigator","mozConnection","webkitConnection","createIntersectionObserver","callback","effectiveType","window","IntersectionObserver","entries","forEach","entry","isIntersecting","get","target","rootMargin","saveData","element","current","set","observe","unobserve"],"sourceRoot":""}