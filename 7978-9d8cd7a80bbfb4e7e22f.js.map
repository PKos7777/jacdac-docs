{"version":3,"sources":["webpack://jacdac-docs/./src/components/ui/LEDMatrixWidgets.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardLEDMatrix.tsx"],"names":["LEDMatrixDisplayWidget","props","leds","brightness","rows","columns","color","onChange","widgetRef","useRef","useWidgetTheme","background","controlBackground","active","navProps","useKeyboardNavigationProps","current","undefined","minOpacity","pw","ph","ps","pr","m","w","h","columnspadded","handleLedClick","bitindex","ev","buttons","newLeds","slice","toggle","render","boxEls","ledEls","onFill","onStroke","offFill","offStroke","ledProps","className","role","tabIndex","y","row","x","col","box","push","byte","bit","on","handleClick","fireClick","useFireKey","length","DashboardLEDMatrixDisplay","service","ledsRegister","register","LedMatrixReg","useRegisterUnpackedValue","server","useServiceServer","useChange","handleChange","sendSetAsync"],"mappings":"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","file":"7978-9d8cd7a80bbfb4e7e22f.js","sourcesContent":["import React, { SVGProps, useRef } from \"react\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useFireKey from \"../hooks/useFireKey\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport { toggle } from \"../../../jacdac-ts/src/servers/ledmatrixserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nexport default function LEDMatrixDisplayWidget(props: {\n    leds: Uint8Array\n    brightness: number\n    rows: number\n    columns: number\n    color?: \"primary\" | \"secondary\"\n    onChange?: (newLeds: Uint8Array) => void\n}) {\n    const {\n        leds,\n        brightness = 0.5,\n        rows,\n        columns,\n        color = \"primary\",\n        onChange,\n    } = props\n    const widgetRef = useRef<SVGGElement>()\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined) return <LoadingProgress />\n\n    // compute size\n    const minOpacity = 0.3\n    const pw = 8\n    const ph = 8\n    const ps = 0.5\n    const pr = 2\n    const m = 2\n    const w = columns * pw + (columns + 1) * m\n    const h = rows * ph + (rows + 1) * m\n\n    const columnspadded = columns + (8 - (columns % 8))\n\n    const handleLedClick =\n        (bitindex: number) => (ev: React.PointerEvent<SVGRectElement>) => {\n            if (ev && !ev.buttons) return\n            const newLeds = leds.slice(0)\n            toggle(newLeds, bitindex)\n            onChange?.(newLeds)\n        }\n\n    // add leds\n    const render = () => {\n        const boxEls: JSX.Element[] = []\n        const ledEls: JSX.Element[] = []\n        const onFill = active\n        const onStroke = undefined\n        const offFill = controlBackground\n        const offStroke = \"transparent\"\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: \"clickeable\",\n            role: \"button\",\n            tabIndex: 0,\n        }\n\n        let y = m\n        for (let row = 0; row < rows; row++) {\n            let x = m\n            for (let col = 0; col < columns; col++) {\n                const box = (\n                    <rect\n                        key={`b${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={controlBackground}\n                    />\n                )\n                boxEls.push(box)\n\n                const bitindex = row * columnspadded + col\n                const byte = leds?.[bitindex >> 3]\n                const bit = bitindex % 8\n                const on = 1 === ((byte >> bit) & 1)\n                const handleClick = handleLedClick(bitindex)\n                const fireClick = useFireKey(handleClick)\n\n                ledEls.push(\n                    <rect\n                        key={`l${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={on ? onFill : offFill}\n                        stroke={on ? onStroke : offStroke}\n                        strokeWidth={ps}\n                        {...ledProps}\n                        aria-label={`led ${row}, ${col} ${on ? \"on\" : \"off\"}`}\n                        onPointerDown={handleClick}\n                        onPointerEnter={handleClick}\n                        onKeyDown={fireClick}\n                    />\n                )\n                x += pw + m\n            }\n            y += ph + m\n        }\n        return { boxEls, ledEls }\n    }\n\n    const { boxEls, ledEls } = render()\n    return (\n        <SvgWidget width={w} height={h}>\n            <rect\n                x={0}\n                y={0}\n                width={w}\n                height={h}\n                rx={2}\n                ry={2}\n                fill={background}\n            />\n            <g ref={widgetRef} {...navProps}>\n                {boxEls}\n                {ledEls.length && (\n                    <g opacity={minOpacity + brightness * (1 - minOpacity)}>\n                        {ledEls}\n                    </g>\n                )}\n            </g>\n        </SvgWidget>\n    )\n}\n","import React from \"react\"\nimport { LedMatrixReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useChange from \"../../jacdac/useChange\"\nimport LEDMatrixDisplayWidget from \"../ui/LEDMatrixWidgets\"\n\nexport default function DashboardLEDMatrixDisplay(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n\n    const ledsRegister = service.register(LedMatrixReg.Leds)\n    const [leds] = useRegisterUnpackedValue<[Uint8Array]>(ledsRegister, props)\n    const [brightness = 0] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Brightness),\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Rows),\n        props\n    )\n    const [columns] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Columns),\n        props\n    )\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    useChange(server)\n    const handleChange = (newLeds: Uint8Array) => {\n        ledsRegister.sendSetAsync(newLeds, true)\n    }\n    return (\n        <LEDMatrixDisplayWidget\n            leds={leds}\n            brightness={brightness}\n            rows={rows}\n            columns={columns}\n            color={color}\n            onChange={handleChange}\n        />\n    )\n}\n"],"sourceRoot":""}