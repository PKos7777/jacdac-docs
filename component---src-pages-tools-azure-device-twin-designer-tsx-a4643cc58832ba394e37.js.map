{"version":3,"sources":["webpack:///./src/components/ui/Snippet.tsx","webpack:///./src/pages/tools/azure-device-twin-designer.tsx"],"names":["Snippet","props","value","mode","download","url","caption","v","className","ComponentRow","component","onUpdate","twin","name","service","useMemo","validateTwinComponent","nameError","serviceError","nameId","useId","handleComponentNameChange","ev","escapeName","target","handleSetService","serviceClass","serviceSpecificationFromClassIdentifier","handleComponentDelete","components","splice","indexOf","classIdentifier","undefined","count","filter","c","length","AzureDeviceTwinDesigner","variant","useLocalStorage","displayName","setTwin","dtdl","contents","map","serviceSpecificationToComponent","DTDL_CONTEXT","dtdlSource","JSON","stringify","update","clone","handleDisplayNameChange","handleAddService","names","push","uniqueName","shortId","i"],"mappings":"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","file":"component---src-pages-tools-azure-device-twin-designer-tsx-a4643cc58832ba394e37.js","sourcesContent":["import { IconButton, Typography } from \"@material-ui/core\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport React, { useContext } from \"react\"\nimport CodeBlock from \"../CodeBlock\"\n\nexport default function Snippet(props: {\n    value: string | (() => string),\n    mode?: string,\n    download?: string;\n    url?: string;\n    caption?: string | JSX.Element | JSX.Element[];\n}) {\n    const { value, mode, download, url, caption } = props\n    const v: string = typeof value === 'function' ? value() : value;\n    const className = mode && `language-${mode === \"sts\" ? \"ts\" : mode}`\n    return <>\n        <CodeBlock className={className} downloadName={download} downloadText={download && v} url={url}>{v}</CodeBlock>\n        {caption && <Typography variant=\"caption\">{caption}</Typography>}\n    </>\n}","import { Grid, TextField } from \"@material-ui/core\"\nimport React, { ChangeEvent, useMemo } from \"react\"\nimport { clone, uniqueName } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useLocalStorage from \"../../components/useLocalStorage\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\"\nimport ServiceSpecificationSelect from \"../../components/ServiceSpecificationSelect\"\nimport {\n    DTDL_CONTEXT,\n    escapeName,\n    serviceSpecificationToComponent,\n} from \"../../../jacdac-ts/src/azure-iot/dtdl\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport Snippet from \"../../components/ui/Snippet\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport { useId } from \"react-use-id-hook\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\ninterface DigitalTwinComponent {\n    name: string\n    service: jdspec.ServiceSpec\n}\n\ninterface DigitalTwinSpec {\n    displayName: string\n    components: DigitalTwinComponent[]\n}\n\nfunction ComponentRow(props: {\n    twin: DigitalTwinSpec\n    component: DigitalTwinComponent\n    onUpdate: () => void\n}) {\n    const { component, onUpdate, twin } = props\n    const { name, service } = component\n    const { nameError, serviceError } = useMemo(\n        () => validateTwinComponent(twin, component),\n        [twin, component]\n    )\n    const nameId = useId()\n    const handleComponentNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        component.name = escapeName(ev.target.value)\n        onUpdate()\n    }\n    const handleSetService = (serviceClass: number) => {\n        component.service = serviceSpecificationFromClassIdentifier(\n            serviceClass\n        )\n        onUpdate()\n    }\n    const handleComponentDelete = () => {\n        twin.components.splice(twin.components.indexOf(component), 1)\n        onUpdate()\n    }\n    return <>\n        <h1>Azure Device Twin Designer</h1>\n        <p>\n\n            An <Link href=\"https://github.com/Azure/opendigitaltwins-dtdl/\">device twin</Link> is to be used in IoT solutions such as with Azure IoT Hubs,\n            Azure IoT Plug And Play.\n            The repository of <Link to=\"/dtmi/\">Azure IoT Plug And Play models</Link> for services can be used to resolve models.\n        </p>\n        <Grid item xs={12}>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <TextField\n                        id={nameId}\n                        fullWidth={true}\n                        error={!!nameError}\n                        variant=\"outlined\"\n                        label=\"name\"\n                        helperText={nameError}\n                        value={name}\n                        onChange={handleComponentNameChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <ServiceSpecificationSelect\n                        variant=\"outlined\"\n                        label=\"service\"\n                        serviceClass={service.classIdentifier}\n                        setServiceClass={handleSetService}\n                        error={serviceError}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconButtonWithTooltip\n                        title=\"Remove service\"\n                        onClick={handleComponentDelete}\n                    >\n                        <DeleteIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n        </Grid>\n    </>\n}\n\nfunction validateTwinComponent(\n    twin: DigitalTwinSpec,\n    component: DigitalTwinComponent\n) {\n    let serviceError: string = undefined\n    const nameError: string = undefined\n    const count = twin.components.filter(\n        c => c.service.classIdentifier === component.service.classIdentifier\n    ).length\n    if (count > 1) serviceError = `Multiple same service not supported.`\n    return { serviceError, nameError }\n}\n\nexport default function AzureDeviceTwinDesigner() {\n    const variant = \"outlined\"\n    const [twin, setTwin] = useLocalStorage<DigitalTwinSpec>(\n        \"jacdac:digitaltwin;1\",\n        {\n            displayName: \"mydesigner\",\n            components: [],\n        } as DigitalTwinSpec\n    )\n\n    const dtdl = {\n        \"@type\": \"Interface\",\n        \"@id\": `dtmi:jacdac:devices:${escapeName(twin.displayName)},1`,\n        displayName: twin.displayName,\n        contents: twin.components.map(c =>\n            serviceSpecificationToComponent(c.service, c.name)\n        ),\n        \"@context\": DTDL_CONTEXT,\n    }\n    const dtdlSource = JSON.stringify(dtdl, null, 2)\n\n    const update = () => {\n        setTwin(clone(twin))\n    }\n    const handleDisplayNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        twin.displayName = ev.target.value\n        update()\n    }\n    const handleAddService = (service: jdspec.ServiceSpec) => {\n        const names = twin.components.map(c => c.name)\n        twin.components.push({\n            name: uniqueName(names, service.shortId),\n            service,\n        })\n        update()\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                    required\n                    fullWidth={true}\n                    label=\"Display name\"\n                    placeholder=\"My device\"\n                    value={twin.displayName || \"\"}\n                    onChange={handleDisplayNameChange}\n                    variant={variant}\n                />\n            </Grid>\n            {twin.components.map((c, i) => (\n                <ComponentRow\n                    key={i}\n                    twin={twin}\n                    component={c}\n                    onUpdate={update}\n                />\n            ))}\n            <Grid item xs={12}>\n                <AddServiceIconButton onAdd={handleAddService} />\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox>\n                    <Snippet value={dtdlSource} mode=\"json\" download=\"model\" />\n                </PaperBox>\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}