{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./src/components/data-science/datadsl.ts","webpack://jacdac-docs/./src/components/blockly/jsonvisitor.ts","webpack://jacdac-docs/./src/components/data-science/DSBlockEditor.tsx","webpack://jacdac-docs/./src/pages/tools/data-science-editor.tsx"],"names":["GLOBAL_CHANGE","VMExceptionCode","VMException","code","data","Error","VMServiceEnvironment","service","_registers","_events","registerRegister","regName","handler","pkt","specification","packets","find","isRegister","name","register","identifier","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","sendCommandAsync","command","values","commandName","p","isCommand","sendCmdAsync","jdpack","packFormat","writeRegisterAsync","ev","SystemReg","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","isIntensity","fields","type","lookupRegister","e","root","object","fld","undefined","property","unpackedValue","field","f","value","refreshRegistersAsync","k","refresh","JDServiceClient","VMEnvironment","registers","events","_currentEvent","_envs","_globals","globals","serviceChanged","role","unmount","forEach","r","reg","serviceEnv","getService","emit","getRootName","s","RoleNoService","Object","lookup","roleName","me","local","writeGlobal","firstType","TypeMismatch","toString","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","colour","DataScienceBlockDomainSpecificLanguage","id","createBlocks","blocks","kind","message0","args0","inputsInline","nextStatement","output","createCategory","contents","dataDsl","visitBlock","block","visitor","inputs","children","input","visitInput","child","keys","map","visitField","visitWorkspace","workspace","DS_SOURCE_STORAGE_KEY","DSEditorWithContext","useContext","BlockContext","workspaceJSON","useEffect","console","log","Flags","DScienceEditor","dsls","useMemo","variablesDsl","shadowDsl","fieldsDsl","Page"],"mappings":"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","file":"component---src-pages-tools-data-science-editor-tsx-b19ff66e4c59ce6952ef.js","sourcesContent":["import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT, SystemReg } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\n\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface, atomic } from \"./runner\"\n\nexport const GLOBAL_CHANGE = \"vmEnvglobalChange\"\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\"\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(\n        command: jsep.Identifier,\n        values: PackedValues\n    ) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, ev: atomic) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], ev)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, ev: atomic) {\n        await jdreg?.sendSetPackedAsync(\n            jdreg.specification?.packFormat,\n            [ev],\n            true\n        )\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, true)\n        }\n    }\n\n    public lookupRegister(e: jsep.MemberExpression | jsep.Identifier | string): atomic {\n        const root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        const fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public async refreshRegistersAsync() {\n        for (const k in this._registers) {\n            const register = this._registers[k]\n            await register.refresh()\n        }\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[]\n    ) {\n        super()\n    }\n\n    public globals() {\n        return this._globals;\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (service) {\n            this._envs[role] = new VMServiceEnvironment(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerRegister(reg, () => {\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._envs[root]\n        if (!s) {\n            throw new VMException(\n                VMExceptionCode.RoleNoService,\n                root\n            )\n        }\n        return s\n    }\n\n    public async refreshRegistersAsync() {\n        for (const s of Object.values(this._envs)) {\n            await s?.refreshRegistersAsync()\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        // TODO: need to raise alert if service undefined\n        await serviceEnv?.sendCommandAsync(\n            e.property as jsep.Identifier,\n            values\n        )\n    }\n\n    public lookup(\n        e: jsep.MemberExpression | string\n    ): atomic {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        return serviceEnv.lookupRegister(\n            me.property as jsep.Identifier | jsep.MemberExpression\n        )\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        ev: number\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            await serviceEnv.writeRegisterAsync(reg, ev)\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._envs)) {\n            vs.unmount()\n        }\n    }\n}\n","import { BlockDefinition, CategoryDefinition } from \"../blockly/toolbox\"\nimport BlockDomainSpecificLanguage from \"../blockly/dsl/dsl\"\n\nconst colour = \"#123456\"\nexport class DataScienceBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"dataScience\"\n    createBlocks() {\n        const blocks: BlockDefinition[] = [\n            {\n                kind: \"block\",\n                type: \"ds_some_event\",\n                message0: \"some event\",\n                args0: [],\n                inputsInline: true,\n                nextStatement: null,\n                colour,\n            } as BlockDefinition,\n            {\n                kind: \"block\",\n                type: \"ds_some_block\",\n                message0: \"some block data\",\n                args0: [],\n                inputsInline: true,\n                output: \"Number\",\n                colour,\n            } as BlockDefinition,\n        ]\n        return blocks\n    }\n\n    createCategory() {\n        return [\n            <CategoryDefinition>{\n                kind: \"category\",\n                name: \"Data Science\",\n                colour,\n                contents: [\n                    {\n                        kind: \"block\",\n                        type: \"ds_some_event\",\n                    },\n                    {\n                        kind: \"block\",\n                        type: \"ds_some_block\",\n                    },\n                ],\n            },\n        ]\n    }\n}\n\nconst dataDsl = new DataScienceBlockDomainSpecificLanguage()\nexport default dataDsl\n","import { BlockJSON, FieldJSON, InputJSON, WorkspaceJSON } from \"./jsongenerator\"\n\nexport interface WorkspaceVisitor {\n    visitBlock?: (block: BlockJSON) => void\n    visitInput?: (input: InputJSON) => void\n    visitField?: (name: string, field: FieldJSON) => void\n}\n\nexport function visitBlock(block: BlockJSON, visitor: WorkspaceVisitor) {\n    if (!block) return\n    visitor.visitBlock?.(block)\n    const { inputs, children } = block\n    inputs?.forEach(input => visitInput(input, visitor))\n    children?.forEach(child => visitBlock(child, visitor))\n}\n\nexport function visitInput(input: InputJSON, visitor: WorkspaceVisitor) {\n    if (!input) return\n    visitor.visitInput?.(input)\n    const { fields, child } = input\n    if (fields) Object.keys(fields).map(k => visitField(k, fields[k], visitor))\n    visitBlock(child, visitor)\n}\n\nexport function visitField(\n    name: string,\n    field: FieldJSON,\n    visitor: WorkspaceVisitor\n) {\n    if (!field) return\n    visitor.visitField?.(name, field)\n}\n\nexport function visitWorkspace(\n    workspace: WorkspaceJSON,\n    visitor: WorkspaceVisitor\n) {\n    workspace?.blocks.forEach(block => visitBlock(block, visitor))\n}\n","import React, { useContext, useEffect, useMemo } from \"react\"\nimport { NoSsr } from \"@material-ui/core\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport dataDsl from \"./datadsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport { visitWorkspace } from \"../blockly/jsonvisitor\"\n\nconst DS_SOURCE_STORAGE_KEY = \"data-science-blockly-xml\"\n\nfunction DSEditorWithContext() {\n    // block context handles hosting blockly\n    const { workspaceJSON } = useContext(BlockContext)\n\n    // run this when workspaceJSON changes\n    useEffect(() => {\n        visitWorkspace(workspaceJSON, {\n            visitBlock: block => console.log(`block ${block.type}`, { block }),\n            visitInput: input => console.log(`input ${input.name}`, { input }),\n            visitField: (name, field) =>\n                console.log(`field ${name}: ${field.value}`, { field }),\n        })\n    }, [workspaceJSON])\n\n    return (\n        <>\n            <BlockEditor />\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </>\n    )\n}\n\nexport default function DScienceEditor() {\n    const dsls = useMemo(() => {\n        return [dataDsl, variablesDsl, shadowDsl, fieldsDsl]\n    }, [])\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={DS_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <DSEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n"],"sourceRoot":""}