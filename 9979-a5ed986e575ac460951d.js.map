{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLEDMatrix.tsx"],"names":["DashboardLEDMatrixDisplay","props","service","ledsRegister","register","LedMatrixReg","useRegisterUnpackedValue","leds","brightness","rows","columns","server","useServiceServer","color","useChange","handleChange","newLeds","sendSetAsync"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEe,SAASA,yBAAT,CACXC,KADW,EAEb;AAAA,MACUC,OADV,GACsBD,KADtB,CACUC,OADV;AAGE,MAAMC,YAAY,GAAGD,OAAO,CAACE,QAAR,CAAiBC,4FAAjB,CAArB;;AAHF,8BAIiBC,4FAAwB,CAAeH,YAAf,EAA6BF,KAA7B,CAJzC;AAAA,MAISM,IAJT;;AAAA,+BAK2BD,4FAAwB,CAC7CJ,OAAO,CAACE,QAAR,CAAiBC,wGAAjB,CAD6C,EAE7CJ,KAF6C,CALnD;AAAA;AAAA,MAKSO,UALT,uCAKsB,CALtB;;AAAA,+BASiBF,4FAAwB,CACnCJ,OAAO,CAACE,QAAR,CAAiBC,4FAAjB,CADmC,EAEnCJ,KAFmC,CATzC;AAAA,MASSQ,IATT;;AAAA,+BAaoBH,4FAAwB,CACtCJ,OAAO,CAACE,QAAR,CAAiBC,kGAAjB,CADsC,EAEtCJ,KAFsC,CAb5C;AAAA,MAaSS,OAbT;;AAiBE,MAAMC,MAAM,GAAGC,yEAAgB,CAACV,OAAD,CAA/B;AACA,MAAMW,KAAK,GAAGF,MAAM,GAAG,WAAH,GAAiB,SAArC;AACAG,qEAAS,CAACH,MAAD,CAAT;;AACA,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAyB;AAC1Cb,gBAAY,CAACc,YAAb,CAA0BD,OAA1B,EAAmC,IAAnC;AACH,GAFD;;AAGA,sBACI,iDAAC,6DAAD;AACI,QAAI,EAAET,IADV;AAEI,cAAU,EAAEC,UAFhB;AAGI,QAAI,EAAEC,IAHV;AAII,WAAO,EAAEC,OAJb;AAKI,SAAK,EAAEG,KALX;AAMI,YAAQ,EAAEE;AANd,IADJ;AAUH,C","file":"9979-a5ed986e575ac460951d.js","sourcesContent":["import React from \"react\"\nimport { LedMatrixReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useChange from \"../../jacdac/useChange\"\nimport LEDMatrixDisplayWidget from \"../widgets/LEDMatrixWidget\"\n\nexport default function DashboardLEDMatrixDisplay(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n\n    const ledsRegister = service.register(LedMatrixReg.Leds)\n    const [leds] = useRegisterUnpackedValue<[Uint8Array]>(ledsRegister, props)\n    const [brightness = 0] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Brightness),\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Rows),\n        props\n    )\n    const [columns] = useRegisterUnpackedValue<[number]>(\n        service.register(LedMatrixReg.Columns),\n        props\n    )\n    const server = useServiceServer(service)\n    const color = server ? \"secondary\" : \"primary\"\n    useChange(server)\n    const handleChange = (newLeds: Uint8Array) => {\n        ledsRegister.sendSetAsync(newLeds, true)\n    }\n    return (\n        <LEDMatrixDisplayWidget\n            leds={leds}\n            brightness={brightness}\n            rows={rows}\n            columns={columns}\n            color={color}\n            onChange={handleChange}\n        />\n    )\n}\n"],"sourceRoot":""}