{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardArcadeGamepad.tsx"],"names":["buttonLabels","ArcadeGamepadButton","ArcadeButton","props","cx","cy","ro","color","pressure","ri","button","server","onRefresh","useWidgetTheme","textProps","active","background","controlBackground","checked","title","label","handleDown","down","handleUp","up","buttonProps","useSvgButtonProps","DashboardArcadeGamepad","service","useRegisterUnpackedValue","register","ArcadeGamepadReg","available","pressedRegister","pressed","useServiceServer","length","w","h","cw","ch","sro","sri","scy","pos","small","handleRefresh","refresh","abx","aby","abr","abw","map","find","p"],"mappings":"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","file":"5830-7ef385b1aba33d6a1f49.js","sourcesContent":["import React from \"react\"\nimport {\n    ArcadeGamepadButton,\n    ArcadeGamepadReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport ArcadeGamepadServer from \"../../../jacdac-ts/src/servers/arcadegamepadserver\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nconst buttonLabels = {\n    [ArcadeGamepadButton.Left]: \"\\u25C4\",\n    [ArcadeGamepadButton.Up]: \"\\u25B2\",\n    [ArcadeGamepadButton.Down]: \"\\u25BC\",\n    [ArcadeGamepadButton.Right]: \"\\u25BA\",\n}\n\nfunction ArcadeButton(props: {\n    cx: number\n    cy: number\n    ro: number\n    ri: number\n    pressure: number\n    button: ArcadeGamepadButton\n    server: ArcadeGamepadServer\n    onRefresh: () => void\n    color?: \"primary\" | \"secondary\"\n}) {\n    const { cx, cy, ro, color, pressure, ri, button, server, onRefresh } = props\n    const { textProps, active, background, controlBackground } = useWidgetTheme(\n        color\n    )\n    const checked = (pressure || 0) > 0\n    const title = ArcadeGamepadButton[button]\n    const label = buttonLabels[button] || title[0]\n\n    const handleDown = () => {\n        server?.down(button, 0.7)\n        onRefresh()\n    }\n    const handleUp = () => {\n        server?.up(button)\n        onRefresh()\n    }\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(\n        title,\n        handleDown,\n        handleUp\n    )\n\n    return (\n        <g\n            transform={`translate(${cx},${cy})`}\n            aria-label={`button ${title} ${checked ? \"down\" : \"up\"}`}\n        >\n            <circle cx={0} cy={0} r={ro} fill={background} />\n            <circle\n                cx={0}\n                cy={0}\n                r={ri}\n                fill={checked ? active : controlBackground}\n                {...buttonProps}\n            >\n                <title>{title}</title>\n            </circle>\n            <text cx={0} cy={0} fontSize={ri} {...textProps}>\n                {label}\n            </text>\n        </g>\n    )\n}\n\nexport default function DashboardArcadeGamepad(props: DashboardServiceProps) {\n    const { service } = props\n    const [available] = useRegisterUnpackedValue<[[ArcadeGamepadButton][]]>(\n        service.register(ArcadeGamepadReg.AvailableButtons),\n        props\n    )\n    const pressedRegister = service.register(ArcadeGamepadReg.Buttons)\n    const [pressed] = useRegisterUnpackedValue<\n        [[ArcadeGamepadButton, number][]]\n    >(pressedRegister, props)\n    const server = useServiceServer<ArcadeGamepadServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background } = useWidgetTheme(color)\n\n    if (!available?.length) return <LoadingProgress />\n\n    const w = 256\n    const h = 128\n\n    const cw = w / 12\n    const ch = h / 4\n\n    const ro = cw - 2\n    const ri = ro - 4\n\n    const sro = ro - 10\n    const sri = sro - 2\n    const scy = sro\n\n    const pos = {\n        [ArcadeGamepadButton.Left]: { cx: cw * 1.5, cy: 2 * ch, small: false },\n        [ArcadeGamepadButton.Up]: { cx: cw * 3, cy: ch, small: false },\n        [ArcadeGamepadButton.Right]: { cx: cw * 4.5, cy: 2 * ch, small: false },\n        [ArcadeGamepadButton.Down]: { cx: cw * 3, cy: 3 * ch, small: false },\n\n        [ArcadeGamepadButton.A]: { cx: cw * 10.5, cy: ch * 1.25, small: false },\n        [ArcadeGamepadButton.B]: { cx: cw * 9.5, cy: ch * 2.75, small: false },\n\n        [ArcadeGamepadButton.Menu]: { cx: cw * 7, cy: scy, small: true },\n        [ArcadeGamepadButton.Select]: { cx: cw * 6, cy: scy, small: true },\n\n        [ArcadeGamepadButton.Exit]: { cx: cw * 8, cy: scy, small: true },\n        [ArcadeGamepadButton.Reset]: { cx: cw * 9, cy: scy, small: true },\n    }\n\n    const handleRefresh = async () => await pressedRegister.refresh()\n\n    const abx = cw * 8 + 1\n    const aby = ch * 3 + 4\n    const abr = cw / 2\n    const abw = cw * 5 - 6\n    return (\n        <SvgWidget width={w} height={h}>\n            <circle\n                cx={cw * 3}\n                cy={2 * ch}\n                r={2.6 * cw}\n                fill=\"none\"\n                stroke={background}\n                strokeWidth={4}\n            />\n            <rect\n                transform={`rotate(-66, ${abx}, ${aby})`}\n                x={abx}\n                y={aby}\n                rx={abr}\n                ry={abr}\n                width={abw}\n                height={cw * 2.2}\n                fill=\"none\"\n                stroke={background}\n                strokeWidth={4}\n            />\n            {available\n                .map(button => ({ button: button[0], pos: pos[button[0]] }))\n                .map(({ button, pos }) => (\n                    <ArcadeButton\n                        key={button}\n                        cx={pos.cx}\n                        cy={pos.cy}\n                        ro={pos.small ? sro : ro}\n                        ri={pos.small ? sri : ri}\n                        button={button}\n                        server={server}\n                        onRefresh={handleRefresh}\n                        pressure={pressed?.find(p => p[0] === button)?.[1] || 0}\n                        color={color}\n                    />\n                ))}\n        </SvgWidget>\n    )\n}\n"],"sourceRoot":""}