{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/HourglassEmpty.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayCircleFilled.js","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtestfuns.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack://jacdac-docs/./jacdac-ts/src/test/testrunner.ts","webpack://jacdac-docs/./src/components/test/ServiceTestRunner.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useServiceClient.ts"],"names":["getTestCommandFunctions","testFunctions","filter","f","context","getTestExpressionFunctions","id","args","prompt","undefined","refresh_env","registers","k","register","retry","val","refresh","unpackedValue","writeReg","reg","fmt","ev","sendSetPackedAsync","VMServiceEnvironment","service","_registers","_events","registerRegister","regName","handler","pkt","specification","packets","find","isRegister","name","identifier","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","writeRegister","jdreg","packFormat","lookup","e","root","type","object","fld","property","field","fields","value","refreshEnvironment","JDServiceClient","VMEnvironment","notifyOnChange","_currentEvent","_envs","_locals","serviceChanged","role","added","unmount","serviceEnv","getService","getRootName","Object","values","forEach","s","roleName","me","local","writeLocal","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","JDExprEvaluator","env","callEval","exprStack","tos","length","pop","eval","visitExpression","ret","push","top","le","lit","JDTestStatus","JDTestCommandStatus","commandStatusToTestStatus","status","Active","Passed","Failed","NotReady","RequiresUserInput","cmdToTestFunction","cmd","call","t","JDCommandEvaluator","testRunner","command","_prompt","_progress","_status","_startExpressions","_rangeComplete","_eventsComplete","start","ee","getStartVal","r","v","goal","error","testFun","startExprs","exprVisitor","p","ce","eventList","child","findIndex","exprEval","createPrompt","replaceId","a","i","replaceVal","aStart","roundWithPrecision","toString","slice","replace","setEvent","checkExpression","expr","getStart","evaluate","Math","abs","pretify","regSaved","regValue","amtSaved","beginSaved","endSaved","shift","serviceTestRunner","JDTestCommandRunner","_output","message","progress","_commmandEvaluator","reset","output","envChange","isActive","newOutput","finish","cancel","finishCommand","emit","JDTestRunner","testSpec","commands","testCommands","c","_commandIndex","commandIndex","next","newStatus","currentCommand","eventChange","description","index","JDServiceTestRunner","_testIndex","_env","tests","events","substr","indexOf","currentTest","stats","total","success","failed","indeterminate","test","testIndex","ct","TestStatusIcon","props","useChange","TestListItem","onSelectTest","selected","handleSelectTest","TestList","CommandStatusIcon","CommandListItem","handleAnswer","ActiveTest","handleRestart","handleNext","useEffect","ServiceTestRunner","serviceTest","serviceTestFromServiceClass","serviceClass","factory","useCallback","useServiceClient","device","useGridBreakpoints","itemCount","useContext","AppContext","drawerType","xs","sm","md","lg","xl","DrawerType","deps","useState","client","setClient"],"mappings":"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","file":"859a83de993caea7524bf57c2975f3be6812c8c3-c65ed65a1c0fab11a67b.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n}), 'HourglassEmpty');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"\n}), 'PlayCircleFilled');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdtest.d.ts\" />\n\nexport type JDTestFunctions =\n    | \"changes\"\n    | \"ask\"\n    | \"check\"\n    | \"increases\"\n    | \"decreases\"\n    | \"increasesBy\"\n    | \"decreasesBy\"\n    | \"stepsUpTo\"\n    | \"stepsDownTo\"\n    | \"events\"\n    | \"awaitEvent\"\n    | \"nextEvent\"\n    | \"assign\"\n    | \"closeTo\"\n\nexport function getTestCommandFunctions() {\n    return testFunctions.filter(f => f.context === \"command\" || f.context === \"either\")\n}\n\nexport function getTestExpressionFunctions() {\n    return testFunctions.filter(f => f.context === \"expression\" || f.context === \"either\")\n}\n\nconst testFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"changes\",\n        args: [\"register\"],\n        prompt: `check that {1} changes`,\n        context: \"command\",\n    },\n    {\n        id: \"ask\",\n        args: [],\n        prompt: undefined,\n        context: \"command\",\n    },\n    {\n        id: \"events\",\n        args: [\"events\"],\n        prompt: `check that events {1} are observed`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true] ],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"nextEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `next event must be {1}, then check {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"assign\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"check\",\n        args: [\"boolean\"],\n        prompt: `check that {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"increases\",\n        args: [\"register\"],\n        prompt: `check that {1} increases`,\n        context: \"command\",\n    },\n    {\n        id: \"decreases\",\n        args: [\"register\"],\n        prompt: `check that {1} decreases`,\n        context: \"command\",\n    },\n    {\n        id: \"increasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that  {1} (initially {1:val}) increases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"decreasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that {1} (initially {1:val}) decreases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsUpTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step up (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsDownTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step down (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"start\",\n        args: [\"any\"],\n        prompt: undefined,\n        context: \"expression\",\n    },\n    {\n        id: \"closeTo\",\n        args: [\"number\", \"number\", \"number\"],\n        prompt: `evaluate {1} until it is close to {2:val}, as given by error {3:val}`,\n        context: \"either\",\n    },\n]\n","import { isEvent, isRegister } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT } from \"../jdom/constants\"\n\nexport async function refresh_env(registers: SMap<JDRegister>) {\n    for (const k in registers) {\n        const register = registers[k]\n        let retry = 0\n        let val: any = undefined\n        do {\n            await register.refresh()\n            val = register.unpackedValue?.[0]\n        } while (val === undefined && retry++ < 2)\n    }\n}\n\n// TODO: you want [ev] to be PackedValues and handle the arrays yourself.\nasync function writeReg(reg: JDRegister, fmt: string, ev: any) {\n    await reg.sendSetPackedAsync(fmt, [ev], true)\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public writeRegister(regName: string, ev: any) {\n        const jdreg = this._registers[regName]\n        if (jdreg) {\n            writeReg(jdreg, jdreg.specification?.packFormat, ev)\n            return true\n        }\n        return false\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | jsep.Identifier | string): any {\n        let root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        let fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public refreshEnvironment() {\n        refresh_env(this._registers)\n    }\n}\n\nexport class VMEnvironment extends JDEventSource {\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _locals: SMap<string> = {}\n\n    constructor(\n        private readonly notifyOnChange: () => void\n    ) {\n        super()\n    }\n\n    public serviceChanged(role: string, service: JDService, added: boolean) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (added) {\n            this._envs[role] = new VMServiceEnvironment(service)\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerRegister(reg, this.notifyOnChange)\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        const serviceEnv = this.getService(role)\n        if (serviceEnv) {\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.notifyOnChange()\n            })\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        return this._envs[root]\n    }\n\n    public refreshEnvironment() {\n        Object.values(this._envs).forEach(s => s?.refreshEnvironment())\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            let me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._locals[local]\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return undefined\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.lookup(reg)\n        }\n        return undefined\n    }\n\n    public writeRegister(e: jsep.MemberExpression | string, ev: any) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (serviceEnv && me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            return serviceEnv.writeRegister(reg, ev)\n        }\n        return false\n    }\n\n    public writeLocal(e: jsep.MemberExpression | string, ev: any) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            this._locals[local] = ev\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const serviceEnv = this.getService(e)\n        if (!serviceEnv) return false\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        Object.values(this._envs).forEach(vs => vs.unmount())\n    }\n}\n","/*\nThe JD-VM runs a program, which is a set of handlers. Each handler is of the form\n•\twait on event/condition, followed by a\n•\tsequence of guarded commands – the sequence is executed atomically (though may suspend if it contains a wait)\nAfter a handler finishes executing, it restarts (there is an implicit event loop around all the handlers, as usual). \n \nWe will have a small key-value store to keep program state (perhaps we will have the ability to store lists of values as well as basic values) across the handler executions.\n \nCommands can talk to JD services (probably via roles), as well as read/write program state, and wait on events/expressions. Any command can be guarded by an expression, for conditional execution.\n \nExpressions can be against service registers (as in the test case) and program state.\n \n*/\n\nexport type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: JDExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class JDExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public eval(e: jsep.Expression) {\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    public visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    let ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                this.visitExpression(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = this.env(e as jsep.MemberExpression)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                this.exprStack.push(this.env(id.name))\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import {\n    getTestCommandFunctions,\n    JDTestFunctions,\n} from \"../../jacdac-spec/spectool/jdtestfuns\"\nimport { exprVisitor } from \"../../jacdac-spec/spectool/jdutils\"\n\nimport { CHANGE } from \"../jdom/constants\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { JDService } from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { roundWithPrecision } from \"../jdom/utils\"\nimport { unparse, JDExprEvaluator, CallEvaluator, StartMap } from \"../vm/expr\"\nimport { VMServiceEnvironment } from \"../vm/environment\"\n\nexport enum JDTestStatus {\n    NotReady,\n    Active,\n    Passed,\n    Failed,\n}\n\nexport enum JDTestCommandStatus {\n    NotReady,\n    Active,\n    RequiresUserInput,\n    Passed,\n    Failed\n}\n\nfunction commandStatusToTestStatus(status: JDTestCommandStatus) {\n    switch (status) {\n        case JDTestCommandStatus.Active:\n            return JDTestStatus.Active\n        case JDTestCommandStatus.Passed:\n            return JDTestStatus.Passed\n        case JDTestCommandStatus.Failed:\n            return JDTestStatus.Failed\n        case JDTestCommandStatus.NotReady:\n            return JDTestStatus.NotReady\n        case JDTestCommandStatus.RequiresUserInput:\n            return JDTestStatus.Active\n    }\n}\n\nfunction cmdToTestFunction(cmd: jdtest.TestCommandSpec) {\n    const id = (<jsep.Identifier>cmd.call.callee).name\n    return getTestCommandFunctions().find(t => t.id == id)\n}\n\nclass JDCommandEvaluator {\n    private _prompt = \"\"\n    private _progress = \"\"\n    private _status = JDTestCommandStatus.Active\n    private _startExpressions: StartMap = []\n    private _rangeComplete: number = undefined\n    private _eventsComplete: string[] = undefined\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {}\n\n    public get prompt() {\n        return this._prompt\n    }\n    public get status() {\n        return this._status\n    }\n    public get progress() {\n        return this._progress\n    }\n\n    private get env() {\n        return (e: jsep.MemberExpression | string) => {\n            return this.testRunner.serviceTestRunner.lookup(e)\n        }\n    }\n\n    private callEval(start: StartMap) : CallEvaluator {\n        return (caller: jsep.CallExpression, ee: JDExprEvaluator) => { \n            function getStartVal(e: jsep.Expression) {\n                return start.find(r => r.e === e).v\n            }\n            const callee = <jsep.Identifier>caller.callee\n            switch (callee.name) {\n                case \"start\": \n                    return getStartVal(caller.arguments[0]);\n                case \"closeTo\": {\n                    const args = caller.arguments\n                    const goal = getStartVal(args[1])\n                    const error = getStartVal(args[2])\n                    ee.visitExpression(args[0])\n                    const ev = ee.pop()\n                    return  ev >= goal - error && ev <= goal + error\n                }\n                default: // ERROR\n            }\n            return null;\n        }\n    }\n\n    // TODO: define an interface between test runner and command evaluator\n    // TODO: so this all can be done modularly\n    public start() {\n        this._startExpressions = []\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        const startExprs: jsep.Expression[] = []\n        switch (testFun.id as JDTestFunctions) {\n            case \"check\":\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                exprVisitor(null, args, (p, ce: jsep.CallExpression) => {\n                    if (ce.type !== \"CallExpression\") return\n                    if ((<jsep.Identifier>ce.callee).name === \"start\")\n                        startExprs.push(ce.arguments[0])\n                    else if ((<jsep.Identifier>ce.callee).name === \"closeTo\") {\n                        startExprs.push(ce.arguments[1])\n                        startExprs.push(ce.arguments[2])\n                    }\n                })\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                startExprs.push(args[0])\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\":\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                startExprs.push(args[0])\n                startExprs.push(args[1])\n                break\n            }\n            case \"closeTo\": {\n                startExprs.push(args[1])\n                startExprs.push(args[2])\n                break\n            }\n            case \"assign\": {\n                startExprs.push(args[1])\n                break\n            }\n            case \"events\": {\n                const eventList = this.command.call\n                    .arguments[0] as jsep.ArrayExpression\n                this._eventsComplete = (eventList.elements as jsep.Identifier[]).map(\n                    id => id.name\n                )\n                break\n            }\n        }\n        // evaluate the start expressions and store the results\n        startExprs.forEach(child => {\n            if (this._startExpressions.findIndex(r => r.e === child) < 0) {\n                const exprEval = new JDExprEvaluator(this.env, this.callEval([]))\n                this._startExpressions.push({\n                    e: child,\n                    v: exprEval.eval(child),\n                })\n            }\n        })\n        this.createPrompt()\n    }\n\n    private createPrompt() {\n        const testFun = cmdToTestFunction(this.command)\n        const replaceId = this.command.call.arguments.map((a, i) => {\n            return [`{${i + 1}}`, unparse(a)]\n        })\n        const replaceVal = this.command.call.arguments.map((a, i) => {\n            const aStart = this._startExpressions.find(r => r.e === a)\n            return [\n                `{${i + 1}:val}`,\n                aStart && aStart.v\n                    ? roundWithPrecision(aStart.v, 3).toString()\n                    : unparse(a),\n            ]\n        })\n        this._prompt =\n            testFun.id === \"ask\" || testFun.id === \"say\"\n                ? this.command.prompt.slice(0)\n                : testFun.prompt.slice(0)\n        replaceId.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n        replaceVal.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n    }\n\n    public setEvent(ev: string) {}\n\n    private checkExpression(e: jsep.Expression) {\n        const expr = new JDExprEvaluator(this.env, this.callEval(this._startExpressions))\n        return expr.eval(e)\n            ? JDTestCommandStatus.Passed\n            : JDTestCommandStatus.Active\n    }\n\n    private getStart(e: jsep.Expression) {\n        return this._startExpressions.find(r => r.e === e)\n    }\n\n    public evaluate() {\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        this._status = JDTestCommandStatus.Active\n        this._progress = \"\"\n        switch (testFun.id as JDTestFunctions) {\n            case \"ask\": {\n                this._status = JDTestCommandStatus.RequiresUserInput\n                break\n            }\n            case \"check\": {\n                this._status = this.checkExpression(args[0])\n                break\n            }\n            case \"closeTo\": {\n                const goal = this.getStart(args[1])\n                const error = this.getStart(args[2])\n                const expr = new JDExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[0]) as number\n                if (Math.abs(ev - goal.v) <= error.v)\n                    this._status = JDTestCommandStatus.Passed\n                this._progress = `current: ${pretify(ev)}; goal: ${pretify(\n                    goal.v\n                )}; error: ${pretify(error.v)}`\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                const regSaved = this._startExpressions.find(\n                    r => r.e === args[0]\n                )\n                const regValue = this.env(unparse(args[0]))\n                const status =\n                    regValue &&\n                    regSaved.v &&\n                    ((testFun.id === \"changes\" && regValue !== regSaved.v) ||\n                        (testFun.id === \"increases\" && regValue > regSaved.v) ||\n                        (testFun.id === \"decreases\" && regValue < regSaved.v))\n                        ? JDTestCommandStatus.Passed\n                        : JDTestCommandStatus.Active\n                this._status = status\n                regSaved.v = regValue\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": {\n                const regSaved = this.getStart(args[0])\n                const amtSaved = this.getStart(args[1])\n                const regValue = this.env(unparse(args[0]))\n                if (testFun.id === \"increasesBy\") {\n                    if (regValue >= regSaved.v + amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    } else if (\n                        regValue >= regSaved.v &&\n                        regValue < regSaved.v + amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )}, goal: ${pretify(regSaved.v + amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                } else {\n                    if (regValue <= regSaved.v - amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                        this._progress = \"completed\"\n                    } else if (\n                        regValue <= regSaved.v &&\n                        regValue > regSaved.v - amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )} goal: ${pretify(regSaved.v - amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                }\n                break\n            }\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                this._status = JDTestCommandStatus.Active\n                const regValue = this.env(unparse(args[0]))\n                const beginSaved = this.getStart(args[0])\n                const endSaved = this.getStart(args[1])\n                if (this._rangeComplete === undefined) {\n                    this._rangeComplete = regValue\n                } else {\n                    if (\n                        regValue ===\n                        this._rangeComplete +\n                            (testFun.id == \"stepsUpTo\" ? 1 : -1)\n                    )\n                        this._rangeComplete = regValue\n                    if (this._rangeComplete === endSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    }\n                }\n                if (this._rangeComplete != undefined) {\n                    this._progress =\n                        testFun.id == \"stepsUpTo\"\n                            ? `from ${pretify(beginSaved.v)} up to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                            : `from ${pretify(beginSaved.v)} down to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                }\n                break\n            }\n            case \"events\": {\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev === this._eventsComplete[0]) {\n                        this._eventsComplete.shift()\n                        if (this._eventsComplete.length === 0)\n                            this._status = JDTestCommandStatus.Passed\n                    } else {\n                        this._status = JDTestCommandStatus.Failed\n                    }\n                    this._progress = `got event ${ev}; remaining = [${this._eventsComplete}]`\n                } else {\n                    this._progress = `no events received; remaining = [${this._eventsComplete}]`\n                }\n                break\n            }\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                const event = args[0] as jsep.Identifier\n                this._progress = `waiting for event ${event.name}`\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev !== event.name) {\n                        if (testFun.id === \"nextEvent\")\n                            this._status = JDTestCommandStatus.Failed\n                    } else {\n                        // this._status = JDTestCommandStatus.Passed\n                        this._status = this.checkExpression(\n                            this.command.call.arguments[1]\n                        )\n                    }\n                } else {\n                    this._progress = `no events received; ${this._progress}`\n                }\n                break\n            }\n            case \"assign\": {\n                const expr = new JDExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.eval(args[1])\n                const reg = args[0] as jsep.Identifier\n                if (this.testRunner.serviceTestRunner.writeRegister(reg.name, ev)) {\n                    this._status = JDTestCommandStatus.Passed\n                    this._progress = `wrote ${ev} to register ${reg.name}`\n                }\n            }\n        }\n\n        function pretify(v: number) {\n            return roundWithPrecision(v, 3)\n        }\n    }\n}\n\nexport interface JDCommandOutput {\n    message: string\n    progress: string\n}\n\nexport class JDTestCommandRunner extends JDEventSource {\n    private _status = JDTestCommandStatus.NotReady\n    private _output: JDCommandOutput = { message: \"\", progress: \"\" }\n    private _commmandEvaluator: JDCommandEvaluator = null\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n        super()\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestCommandStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestCommandStatus.Failed &&\n            this.status !== JDTestCommandStatus.Passed\n        )\n    }\n\n    get isActive(): boolean {\n        return (\n            this.status === JDTestCommandStatus.Active ||\n            this.status === JDTestCommandStatus.RequiresUserInput\n        )\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: JDCommandOutput) {\n        if (\n            !this._output ||\n            this._output.message !== value.message ||\n            this._output.progress !== value.progress\n        ) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.status = JDTestCommandStatus.NotReady\n        this.output = { message: \"\", progress: \"\" }\n        this._commmandEvaluator = null\n    }\n\n    start() {\n        this.status = JDTestCommandStatus.Active\n        this._commmandEvaluator = new JDCommandEvaluator(\n            this.testRunner,\n            this.command\n        )\n        this._commmandEvaluator.start()\n        this.envChange()\n    }\n\n    envChange() {\n        if (this.isActive) {\n            this._commmandEvaluator.evaluate()\n            const newOutput: JDCommandOutput = {\n                message: this._commmandEvaluator.prompt,\n                progress: this._commmandEvaluator.progress,\n            }\n            this.output = newOutput\n            if (\n                this._commmandEvaluator.status ===\n                JDTestCommandStatus.RequiresUserInput\n            )\n                this.status = JDTestCommandStatus.RequiresUserInput\n            else this.finish(this._commmandEvaluator.status)\n        }\n    }\n\n    cancel() {\n        this.finish(JDTestCommandStatus.Failed)\n    }\n\n    finish(s: JDTestCommandStatus) {\n        if (\n            this.isActive &&\n            (s === JDTestCommandStatus.Failed ||\n                s === JDTestCommandStatus.Passed)\n        ) {\n            this.status = s\n            this.testRunner.finishCommand()\n        }\n    }\n}\n\nexport class JDTestRunner extends JDEventSource {\n    private _status = JDTestStatus.NotReady\n    private _commandIndex: number\n    private _currentEvent: string\n    public readonly commands: JDTestCommandRunner[]\n\n    constructor(\n        public readonly serviceTestRunner: JDServiceTestRunner,\n        private readonly testSpec: jdtest.TestSpec\n    ) {\n        super()\n        this.commands = testSpec.testCommands.map(\n            c => new JDTestCommandRunner(this, c)\n        )\n    }\n\n    public reset() {\n        if (this.status !== JDTestStatus.NotReady) {\n            this._status = JDTestStatus.NotReady\n            this._commandIndex = undefined\n            this._currentEvent = undefined\n            this.commands.forEach(t => t.reset())\n            this.emit(CHANGE)\n        }\n    }\n\n    start() {\n        this.reset()\n        this.status = JDTestStatus.Active\n        this.commandIndex = 0\n        this.serviceTestRunner.refreshEnvironment()\n    }\n\n    next() {\n        this.serviceTestRunner.next()\n    }\n\n    cancel() {\n        this.finish(JDTestStatus.Failed)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestStatus.Failed &&\n            this.status !== JDTestStatus.Passed\n        )\n    }\n\n    get description() {\n        return this.testSpec.description\n    }\n\n    get prompt() {\n        return this.testSpec.prompt\n    }\n\n    finish(newStatus: JDTestStatus) {\n        if (this.status === JDTestStatus.Active) {\n            this.status = newStatus\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n\n    private set commandIndex(index: number) {\n        if (this._commandIndex !== index) {\n            this._commandIndex = index\n            this.currentCommand?.start()\n            this.emit(CHANGE)\n        }\n    }\n\n    public envChange() {\n        if (this.status === JDTestStatus.Active) {\n            this.currentCommand?.envChange()\n        }\n    }\n\n    public eventChange(event: string) {\n        if (this.status === JDTestStatus.Active) {\n            this._currentEvent = event\n            this.envChange()\n        }\n    }\n\n    public get hasEvent() {\n        return this._currentEvent != undefined\n    }\n\n    public consumeEvent() {\n        const ret = this._currentEvent\n        this._currentEvent = undefined\n        return ret\n    }\n\n    public finishCommand() {\n        if (this.commandIndex === this.commands.length - 1)\n            this.finish(commandStatusToTestStatus(this.currentCommand.status))\n        else this.commandIndex++\n    }\n\n    get currentCommand() {\n        return this.commands[this._commandIndex]\n    }\n}\n\nexport class JDServiceTestRunner extends JDServiceClient {\n    private _testIndex = -1\n    private _env: VMServiceEnvironment;\n    public readonly tests: JDTestRunner[]\n\n    constructor(\n        public readonly testSpec: jdtest.ServiceTestSpec,\n        service: JDService\n    ) {\n        super(service)\n        this._env = new VMServiceEnvironment(service)\n        this.tests = this.testSpec.tests.map(t => new JDTestRunner(this, t))\n        this.testSpec.tests.forEach(t => {\n            t.events.forEach(s => {\n                let eventName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerEvent(eventName, () => { this.currentTest?.eventChange(eventName) })\n            })\n            t.registers.forEach(s => {\n                let regName = s.substr(s.indexOf(\".\")+1)\n                this._env.registerRegister(regName, () => { this.currentTest?.envChange() })\n            })\n        })\n        this.start()\n    }\n\n    public refreshEnvironment() {\n        this._env.refreshEnvironment();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        return this._env.lookup(e)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public writeRegister(regName: string, val: any) {\n        return this._env.writeRegister(regName, val)\n    }\n\n    private get testIndex() {\n        return this._testIndex\n    }\n\n    private set testIndex(index: number) {\n        if (this._testIndex !== index) {\n            // stop previous test if needed\n            const ct = this.currentTest\n            if (ct) {\n                if (ct.status === JDTestStatus.Active) {\n                    ct.cancel()\n                }\n            }\n            // update test\n            this._testIndex = index\n            this.emit(CHANGE)\n        }\n    }\n\n    public stats() {\n        const r = {\n            total: this.tests.length,\n            success: 0,\n            failed: 0,\n            indeterminate: 0,\n        }\n        for (const test of this.tests) {\n            switch (test.status) {\n                case JDTestStatus.Failed:\n                    r.failed++\n                    break\n                case JDTestStatus.Passed:\n                    r.success++\n                    break\n                default:\n                    r.indeterminate++\n            }\n        }\n        return r\n    }\n\n    public start() {\n        this.tests.forEach(t => t.reset())\n        this.testIndex = 0\n    }\n\n    public next() {\n        this.testIndex++\n    }\n\n    get currentTest() {\n        return this.tests[this._testIndex]\n    }\n\n    set currentTest(test: JDTestRunner) {\n        const index = this.tests.indexOf(test)\n        if (index > -1) this.testIndex = index\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport useServiceClient from \"../useServiceClient\"\nimport {\n    Grid,\n    Button,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Typography,\n    Card,\n    CardContent,\n    CardActions,\n    Box,\n    ListSubheader,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    JDServiceTestRunner,\n    JDTestRunner,\n    JDTestStatus,\n    JDTestCommandRunner,\n    JDTestCommandStatus,\n} from \"../../../jacdac-ts/src/test/testrunner\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\n\nfunction TestStatusIcon(props: { test: JDTestRunner }) {\n    const { test } = props\n    const status = useChange(test, t => t.status)\n\n    switch (status) {\n        case JDTestStatus.Active:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction TestListItem(props: {\n    test: JDTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { test, currentTest, onSelectTest } = props\n    const description = useChange(test, t => t.description)\n    const selected = test === currentTest\n    const handleSelectTest = () => onSelectTest(test)\n\n    return (\n        <ListItem selected={selected} button onClick={handleSelectTest}>\n            <ListItemIcon>\n                <TestStatusIcon test={test} />\n            </ListItemIcon>\n            <ListItemText primary={description} />\n        </ListItem>\n    )\n}\n\nfunction TestList(props: {\n    testRunner: JDServiceTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { testRunner, currentTest, onSelectTest } = props\n    const { tests } = testRunner\n    const stats = useChange(testRunner, r => r.stats())\n\n    return (\n        <Card>\n            <CardContent>\n                <List\n                    dense={true}\n                    subheader={\n                        <ListSubheader>\n                            {`${stats.total} tests, ${stats.success} success, ${stats.failed} failed`}\n                        </ListSubheader>\n                    }\n                >\n                    {tests?.map((test, i) => (\n                        <TestListItem\n                            key={i}\n                            test={test}\n                            currentTest={currentTest}\n                            onSelectTest={onSelectTest}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction CommandStatusIcon(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const status = useChange(command, c => c.status)\n\n    switch (status) {\n        case JDTestCommandStatus.Active:\n        case JDTestCommandStatus.RequiresUserInput:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestCommandStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestCommandStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction CommandListItem(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const { message, progress } = useChange(command, c => c.output)\n    const status = useChange(command, c => c.status)\n    const handleAnswer = (status: JDTestCommandStatus) => () =>\n        command.finish(status)\n    return (\n        <>\n            <ListItem selected={status === JDTestCommandStatus.Active}>\n                <ListItemIcon>\n                    <CommandStatusIcon command={command} />\n                </ListItemIcon>\n                <ListItemText\n                    primary={message}\n                    secondary={progress}\n                />\n            </ListItem>\n            {status === JDTestCommandStatus.RequiresUserInput && (\n                <ListItem>\n\n                    <ListItemSecondaryAction>\n                        <Grid container spacing={1}>\n                            <Grid item><Button\n                                variant=\"outlined\"\n                                onClick={handleAnswer(JDTestCommandStatus.Passed)}\n                            >\n                                Yes\n                    </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleAnswer(JDTestCommandStatus.Failed)}\n                                >\n                                    No\n                    </Button>\n                            </Grid>\n                        </Grid>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )}\n\n        </>\n    )\n}\n\nfunction ActiveTest(props: { test: JDTestRunner }) {\n    const { test } = props\n    const { commands } = test\n    const status = useChange(test, t => t.status)\n    const handleRestart = () => test.start()\n    const handleNext = () => test.next()\n    // auto start\n    useEffect(() => test.start(), [test])\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h5\">DO</Typography>\n                <Box m={2}>\n                    <Typography variant=\"body1\">{test.prompt}</Typography>\n                </Box>\n                <Typography variant=\"h5\">TEST</Typography>\n                <List dense={false}>\n                    {commands.map((cmd, i) => (\n                        <CommandListItem key={i} command={cmd} />\n                    ))}\n                </List>\n                {status === JDTestStatus.Passed && (\n                    <Alert severity=\"success\">Test passed</Alert>\n                )}\n                {status === JDTestStatus.Failed && (\n                    <Alert severity=\"error\">Test failed</Alert>\n                )}\n            </CardContent>\n            <CardActions>\n                <Button\n                    variant={\n                        status === JDTestStatus.Active\n                            ? \"outlined\"\n                            : \"contained\"\n                    }\n                    color={\n                        status === JDTestStatus.Passed ? \"primary\" : undefined\n                    }\n                    onClick={handleNext}\n                >\n                    Next\n                </Button>\n                <Button variant=\"outlined\" onClick={handleRestart}>\n                    Restart\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceTestRunner(props: {\n    service: JDService\n    serviceTest?: jdtest.ServiceTestSpec\n}) {\n    const {\n        service,\n        serviceTest = serviceTestFromServiceClass(service.serviceClass),\n    } = props\n    const factory = useCallback(\n        service => serviceTest && new JDServiceTestRunner(serviceTest, service),\n        [service, serviceTest]\n    )\n    const testRunner = useServiceClient(service, factory)\n    const currentTest = useChange(testRunner, t => t?.currentTest)\n    const handleSelectTest = (test: JDTestRunner) => {\n        testRunner.currentTest = test\n    }\n\n    if (!serviceTest)\n        return (\n            <Alert severity=\"warning\">\n                Sorry, there are no tests available for service{\" \"}\n                {service.specification.name}.\n            </Alert>\n        )\n\n    if (!testRunner) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={3}>\n                <TestList\n                    testRunner={testRunner}\n                    currentTest={currentTest}\n                    onSelectTest={handleSelectTest}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                {currentTest ? <ActiveTest test={currentTest} /> : <Alert severity={\"info\"}>\n                    Select a test to get started.\n                </Alert>}\n            </Grid>\n            {service && (\n                <Grid item xs={3}>\n                    <DashboardDevice\n                        showAvatar={true}\n                        showHeader={true}\n                        device={service.device}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import { useEffect, useState } from \"react\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(service: JDService, factory: (service: JDService) => T, deps: React.DependencyList = []) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client;\n}"],"sourceRoot":""}