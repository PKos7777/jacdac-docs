{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/VoiceChat.js","webpack://jacdac-docs/./src/components/dashboard/DashboardSpeechSynthesis.tsx"],"names":["DashboardSpeechSynthesis","props","service","enabled","register","SpeechSynthesisReg","useState","text","setText","textId","useId","handleChange","ev","newValue","target","value","handleSpeak","console","log","boolValue","sendSetAsync","jdpack","sendCmdAsync","SpeechSynthesisCmd"],"mappings":";;;;;;;AAAa;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,8BAA8B,mBAAO,CAAC,KAA+C;;AAErF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,oCAAoC,mBAAO,CAAC,KAAO;;AAEnD,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E;AACA;AACA,CAAC;;AAED,SAAe,Y;;;;;;;;;;;;;;;;;;;;;;;;;ACnBf;AACA;AAKA;AACA;AACA;AACA;AACA;AAEe,SAASA,wBAAT,CAAkCC,KAAlC,EAAgE;AAAA,MACnEC,OADmE,GACvDD,KADuD,CACnEC,OADmE;AAE3E,MAAMC,OAAO,GAAGD,OAAO,CAACE,QAAR,CAAiBC,wGAAjB,CAAhB;;AAF2E,kBAGnDC,+CAAQ,CAAC,QAAD,CAH2C;AAAA,MAGpEC,IAHoE;AAAA,MAG9DC,OAH8D;;AAI3E,MAAMC,MAAM,GAAGC,kEAAK,EAApB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE,EAAI;AACvB,QAAMC,QAAQ,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAA3B;AACAP,WAAO,CAACK,QAAD,CAAP;AACH,GAHD;;AAKA,MAAMG,WAAW;AAAA,kMAAG;AAAA;AAAA;AAAA;AAAA;AAChBC,qBAAO,CAACC,GAAR,YAAqBX,IAArB;;AADgB,kBAEXJ,OAAO,CAACgB,SAFG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGNhB,OAAO,CAACiB,YAAR,CACFC,0EAAM,CAAY,IAAZ,EAAkB,CAAC,IAAD,CAAlB,CADJ,EAEF,IAFE,CAHM;;AAAA;AAAA;AAAA,qBAOVnB,OAAO,CAACoB,YAAR,CACFC,oGADE,EAEFF,0EAAM,CAAW,GAAX,EAAgB,CAACd,IAAD,CAAhB,CAFJ,CAPU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXS,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAaA,sBACI,iHACI,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,+DAAD;AACI,MAAE,EAAEP,MADR;AAEI,cAAU,EAAE,KAFhB;AAGI,SAAK,EAAEF,IAHX;AAII,SAAK,EAAE,kBAJX;AAKI,cAAU,EAAE,yBALhB;AAMI,YAAQ,EAAEI,YANd;AAOI,QAAI,EAAE;AAPV,IADJ,eAUI,iDAAC,wDAAD;AACI,YAAQ,EAAE,CAACJ,IADf;AAEI,SAAK,EAAC,YAFV;AAGI,WAAO,EAAES,WAHb;AAII,QAAI,eAAE,iDAAC,0EAAD;AAJV,IAVJ,CADJ,CADJ;AAqBH,C","file":"3887-b40e485189009851b1e5.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12l-4-3.2V14H6V6h8v3.2L18 6v8z\"\n}), 'VoiceChat');\n\nexports.default = _default;","import React, { useState } from \"react\"\nimport {\n    SpeechSynthesisCmd,\n    SpeechSynthesisReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { Grid, TextField } from \"@material-ui/core\"\nimport VoiceChatIcon from \"@material-ui/icons/VoiceChat\"\nimport CmdButton from \"../CmdButton\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { useId } from \"react-use-id-hook\"\n\nexport default function DashboardSpeechSynthesis(props: DashboardServiceProps) {\n    const { service } = props\n    const enabled = service.register(SpeechSynthesisReg.Enabled)\n    const [text, setText] = useState(\"jacdac\")\n    const textId = useId()\n\n    const handleChange = ev => {\n        const newValue = ev.target.value\n        setText(newValue)\n    }\n\n    const handleSpeak = async () => {\n        console.log(`speak ${text}`)\n        if (!enabled.boolValue)\n            await enabled.sendSetAsync(\n                jdpack<[boolean]>(\"u8\", [true]),\n                true\n            )\n        await service.sendCmdAsync(\n            SpeechSynthesisCmd.Speak,\n            jdpack<[string]>(\"s\", [text])\n        )\n    }\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <TextField\n                    id={textId}\n                    spellCheck={false}\n                    value={text}\n                    label={\"speech synthesis\"}\n                    helperText={\"Enter text to speak out\"}\n                    onChange={handleChange}\n                    type={\"text\"}\n                />\n                <CmdButton\n                    disabled={!text}\n                    title=\"speak text\"\n                    onClick={handleSpeak}\n                    icon={<VoiceChatIcon />}\n                />\n            </Grid>\n        </>\n    )\n}\n"],"sourceRoot":""}