{"version":3,"file":"component---src-templates-service-test-tsx-04599345a0feaf2c541d.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/select/SelectServiceGrid.tsx","webpack://jacdac-docs/./src/components/test/ServiceTest.tsx","webpack://jacdac-docs/./src/templates/service-test.tsx"],"sourcesContent":["import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Grid, Card, CardActions, Button } from \"@material-ui/core\"\nimport DeviceCardHeader from \"../DeviceCardHeader\"\nimport Alert from \"../ui/Alert\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectServiceGrid(props: {\n    serviceClass: number\n    buttonText?: string\n    disabled?: boolean\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, buttonText, onSelect, disabled } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={service.device}\n                                    showAvatar={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                        disabled={disabled}\n                                    >\n                                        {buttonText || \"Select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\nimport SelectServiceGrid from \"../select/SelectServiceGrid\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\nimport { DISCONNECT } from \"../../../jacdac-ts/src/jdom/constants\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = serviceProviderDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addServiceProvider(bus, hostDefinition)\n\n    if (!hostDefinition) return null\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { serviceClass, onSelect } = props\n    return (\n        <>\n            <h3>Select a device to test</h3>\n            <SelectServiceGrid serviceClass={serviceClass} onSelect={onSelect} />\n        </>\n    )\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec\n    serviceTest?: jdtest.ServiceTestSpec\n    showStartSimulator?: boolean\n}) {\n    const {\n        serviceSpec,\n        showStartSimulator,\n        serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier),\n    } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    // clear selected service when json changes\n    useEffect(() => {\n        setService(undefined)\n    }, [serviceTest])\n    // clear service if device disconnects\n    useEffect(() => service?.device?.subscribe(DISCONNECT, () => {\n        setService(undefined)\n    }), [service])\n\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip\n                    title=\"go to specification\"\n                    to={`/services/${serviceSpec.shortId}/`}\n                >\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && (\n                <Diagnostics serviceClass={serviceClass} />\n            )}\n            {!service && (\n                <ServiceTestRunnerSelect\n                    serviceClass={serviceClass}\n                    onSelect={handleSelect}\n                />\n            )}\n            {service && (\n                <ServiceTestRunner\n                    service={service}\n                    serviceTest={serviceTest}\n                />\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport ServiceTest from \"../components/test/ServiceTest\"\n\nexport default function Page(props: { pageContext: { node: { classIdentifier: number } } }) {\n    const spec = serviceSpecificationFromClassIdentifier(props.pageContext.node.classIdentifier);\n    return <>\n        <ServiceTest serviceSpec={spec} />\n        <h2>See Also</h2>\n        < ul >\n            <li><a href={`https://github.com/microsoft/jacdac/tree/main/services/${props.pageContext.node.shortId}.md`}>Edit specification source</a>.</li>\n            <li>Read <Link to=\"/reference/service-specification/\">Service Specification Language</Link> reference</li>\n            <li>Create a new service specification using the <Link to=\"/tools/service-editor/\">Service Editor</Link></li>\n            <li>Using services in JavaScript with the <Link to={`/clients/javascript/jdom`}>Jacdac Object Model (JDOM)</Link></li>\n        </ul>\n    </>\n}\n\n"],"names":["React","useContext","useGridBreakpoints","JacdacContext","useChange","Grid","Card","CardActions","Button","DeviceCardHeader","Alert","SelectServiceGrid","props","bus","serviceClass","buttonText","onSelect","disabled","services","n","gridBreakpoints","handleSelect","service","length","map","id","device","useEffect","useState","AlertTitle","InfoIcon","IconButtonWithTooltip","addServiceProvider","serviceProviderDefinitionFromServiceClass","Flags","serviceTestFromServiceClass","ServiceTestRunner","DISCONNECT","Diagnostics","hostDefinition","handleStartSimulator","ServiceTestRunnerSelect","ServiceTest","serviceSpec","showStartSimulator","serviceTest","classIdentifier","setService","undefined","subscribe","name","shortId","diagnostics","Link","serviceSpecificationFromClassIdentifier","Page","spec","pageContext","node"],"sourceRoot":""}