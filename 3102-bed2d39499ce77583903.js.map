{"version":3,"file":"3102-bed2d39499ce77583903.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/model-editor/MBModel.ts"],"sourcesContent":["import { JDEventSource } from \"../../../jacdac-ts/src/jdom/eventsource\"\nimport type { TFModelTrainingParams, TFLayerStats } from \"../../workers/tf/dist/node_modules/tf.worker\"\n\nexport interface ModelStats {\n    total: TFLayerStats\n    layers: TFLayerStats[]\n}\n\nexport const DEFAULT_MODEL = \"default\"\nexport const MCU_SPEED = 64000 // for microbit in 1/ms\nexport const MCU_FLOAT_SIZE = 2\n\nexport function validModelJSON(blockJSON) {\n    const warnings = {}\n\n    // don't check empty block JSON\n    if (!blockJSON) return undefined\n\n    // don't check default models\n    if (blockJSON == DEFAULT_MODEL) return warnings\n\n    // 1. make sure all of the training parameters are present\n    const blockParams = blockJSON.inputs[1].fields.expand_button.value\n    if (\n        !blockParams.lossFn ||\n        !blockParams.optimizer ||\n        !blockParams.metrics ||\n        !blockParams.numEpochs\n    ) {\n        warnings[blockJSON.id] =\n            \"Missing training parameters. Expand the block to enter parameters\"\n    }\n\n    // 2. make sure there is at least one layer\n    const firstLayer = blockJSON.inputs.filter(\n        input => input.name == \"LAYER_INPUTS\"\n    )[0].child\n    if (!firstLayer) {\n        warnings[blockJSON.id] = \"Cannot train empty model\"\n        return warnings\n    }\n\n    // 3. make sure layer arch starts with a conv, pool, or flatten\n    let convolutionType\n    if (\n        firstLayer.type == \"model_block_conv1d_layer\" ||\n        firstLayer.type == \"model_block_maxpool1d_layer\"\n        //layerBlock.type == \"model_block_avgpool1d_layer\"\n    ) {\n        convolutionType = \"1d\"\n    } else if (\n        firstLayer.type == \"model_block_conv2d_layer\" ||\n        firstLayer.type == \"model_block_maxpool2d_layer\"\n        //layerBlock.type == \"model_block_avgpool2d_layer\"\n    ) {\n        convolutionType = \"2d\"\n    } else if (firstLayer.type != \"model_block_flatten_layer\") {\n        warnings[firstLayer.id] =\n            \"Models must start with a convolutional layer, pooling layer, or flatten layer.\"\n    }\n\n    // 4. make sure a flatten layer is present\n    let foundFlatten = firstLayer.type == \"model_block_flatten_layer\"\n\n    // 5. the smallest possible model is a flatten layer plus a dense layer\n    let minimumModel = false\n\n    firstLayer.children?.forEach((childBlock, idx) => {\n        if (!minimumModel) minimumModel = true\n        // 6. make sure that only dense layers come after flatten\n        if (foundFlatten) {\n            if (childBlock.type != \"model_block_dense_layer\")\n                warnings[childBlock.id] =\n                    \"Only dense layers can go after the flatten layer\"\n        }\n        if (!foundFlatten)\n            foundFlatten = childBlock.type == \"model_block_flatten_layer\"\n\n        // 7. make sure 1d/2d model types are consistent\n        if (convolutionType == \"1d\" && childBlock.type.indexOf(\"2d\") > -1)\n            warnings[childBlock.id] = `All layers in this model must be 1d`\n        else if (convolutionType == \"2d\" && childBlock.type.indexOf(\"1d\") > -1)\n            warnings[childBlock.id] = `All layers in this model must be 2d`\n\n        // 8. check that the last layer is a dense layer\n        if (idx == firstLayer.children.length - 1) {\n            if (childBlock.type != \"model_block_dense_layer\") {\n                warnings[childBlock.id] =\n                    \"Last layer in model must be a dense layer\"\n            } else {\n                // dense layer must have units equal to output shape & a softmax activation\n                const params = childBlock.inputs[0].fields.expand_button.value\n\n                // 9. final dense layer must have a softmax activation\n                if (params.activation != \"softmax\")\n                    warnings[\n                        childBlock.id\n                    ] = `The final dense layer must use \"softmax\" as activation function`\n\n                // 10. final dense layer must have num units equal to the number of labels\n                /*if (params.numUnits != outputShape)\n                    warnings[\n                        childBlock.id\n                    ] = `The final dense layer must have a number of units equal to the output shape`*/\n            }\n        }\n    })\n\n    if (!minimumModel) {\n        warnings[blockJSON.id] =\n            \"Models must contain one flatten layer that is followed by at least one dense layer\"\n    }\n    if (!foundFlatten) {\n        warnings[blockJSON.id] =\n            \"Models must contain at least one flatten layer\"\n    }\n\n    return warnings\n}\n\nexport default class MBModel extends JDEventSource {\n    // maintain info about the dataset this model was created for\n    inputShape: number[]\n    inputTypes: string[]\n    inputInterval: number\n    outputShape: number\n\n    // maintain training info about the model\n    armModel: string\n    trainingAcc: number\n    modelStats: ModelStats\n    modelSummary: string[]\n    weightData: ArrayBuffer\n    trainingParams: TFModelTrainingParams\n\n    // maintain the blockJSON that goes with this model\n    blockJSON: any\n    layerJSON: any[]\n    convolutionType: string\n\n    static createFromFile(modelObj: {\n        name: string\n        inputShape: number[]\n        inputTypes: string[]\n        inputInterval: number\n        convolutionType: string\n        labels: string[]\n        modelJSON: any\n        modelStats: any\n        outputShape: number\n        status?: string\n        trainingAcc?: number\n        weights?: number[]\n    }) {\n        const mbModel = new MBModel(\n            modelObj.name,\n            modelObj.labels,\n            modelObj.modelJSON,\n            modelObj.status\n        )\n        mbModel.inputShape = modelObj.inputShape\n        mbModel.inputTypes = modelObj.inputTypes\n        mbModel.inputInterval = modelObj.inputInterval || 100\n        mbModel.outputShape = modelObj.outputShape\n        mbModel.convolutionType = modelObj.convolutionType\n\n        mbModel.trainingAcc = modelObj.trainingAcc || 0\n        mbModel.weightData =\n            new Uint32Array(modelObj.weights).buffer || new ArrayBuffer(0)\n        mbModel.modelStats = modelObj.modelStats || undefined\n\n        return mbModel\n    }\n\n    constructor(\n        public name: string,\n        public labels?: string[],\n        public modelJSON?: any,\n        public status?: string\n    ) {\n        super()\n\n        this.labels = this.labels || []\n        this.modelJSON = this.modelJSON || \"\"\n        this.status = this.status || \"empty\"\n\n        this.weightData = new ArrayBuffer(0)\n    }\n\n    get summary() {\n        const modelInfo = [\n            `Training Status: ${this.status}`,\n            `Input Types: ${this.inputTypes}`,\n        ]\n        if (this.modelStats)\n            modelInfo.push(`Model Stats: ${this.modelStatSummary}`)\n\n        return modelInfo\n    }\n\n    get modelStatSummary() {\n        if (!this.modelStats || !this.modelStats.layers.length) return \"\"\n\n        const totalBytes =\n            this.modelStats.total.weightBytes + this.modelStats.total.codeBytes\n        const totalCycles = this.modelStats.total.optimizedCycles\n        const executionTimeMs = totalCycles / MCU_SPEED\n        return `${this.modelStats.layers.length} layers, ${(\n            totalBytes / 1000\n        ).toPrecision(2)} KB, ${executionTimeMs.toPrecision(2)}ms`\n    }\n\n    set parseBlockJSON(blockJSON: any) {\n        this.blockJSON = blockJSON\n\n        const layers = []\n\n        // get the first layer and add it to the list\n        const layerBlock = blockJSON.inputs.filter(\n            input => input.name == \"LAYER_INPUTS\"\n        )[0].child\n\n        if (layerBlock) {\n            layers.push(layerBlock)\n\n            // determine what dimensionality of CNN is used (1d, 2d, or none)\n            this.convolutionType = \"\"\n            if (layerBlock.type.indexOf(\"1d\") > -1) this.convolutionType = \"1d\"\n            if (layerBlock.type.indexOf(\"2d\") > -1) this.convolutionType = \"2d\"\n\n            // add the remaining layers to the list\n            layerBlock.children?.forEach(childBlock => layers.push(childBlock))\n        }\n\n        // store layers with model\n        this.layerJSON = layers\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            inputShape: this.inputShape,\n            inputTypes: this.inputTypes,\n            inputInterval: this.inputInterval,\n            convolutionType: this.convolutionType,\n            labels: this.labels,\n            modelJSON: this.modelJSON,\n            modelStats: this.modelStats,\n            outputShape: this.outputShape,\n            status: this.status || \"empty\",\n            trainingAcc: this.trainingAcc || 0,\n            weights: Array.from(new Uint32Array(this.weightData)),\n        }\n    }\n}\n"],"names":["JDEventSource","DEFAULT_MODEL","MCU_SPEED","MCU_FLOAT_SIZE","validModelJSON","blockJSON","warnings","undefined","blockParams","inputs","fields","expand_button","value","lossFn","optimizer","metrics","numEpochs","id","firstLayer","filter","input","name","child","convolutionType","type","foundFlatten","minimumModel","children","forEach","childBlock","idx","indexOf","length","params","activation","MBModel","createFromFile","modelObj","mbModel","labels","modelJSON","status","inputShape","inputTypes","inputInterval","outputShape","trainingAcc","weightData","Uint32Array","weights","buffer","ArrayBuffer","modelStats","toJSON","Array","from","modelInfo","push","modelStatSummary","layers","totalBytes","total","weightBytes","codeBytes","totalCycles","optimizedCycles","executionTimeMs","toPrecision","layerBlock","layerJSON"],"sourceRoot":""}