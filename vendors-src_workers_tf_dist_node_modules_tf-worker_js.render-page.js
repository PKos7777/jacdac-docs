/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!*******************************************************!*\
  !*** ./src/workers/tf/dist/node_modules/tf-worker.js ***!
  \*******************************************************/
__webpack_require__.r(__webpack_exports__);
function e(){return(e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e}).apply(this,arguments)}class t{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class n{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,o(e,t,n)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e%2==0?e:e+1}function o(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function l(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function u(e,t,n=""){l(p(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function c(e){l(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function h(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||$(e)&&!n)for(let s=0;s<e.length;++s)h(e[s],t,n);else t.push(e);return t}function d(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function p(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function f(e){return e%1==0}function g(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function m(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function b(e,t=(e=>0),n){return new Promise((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()})}function x(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function y(e,t){const n=t.length;return l((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),l(e.every(e=>f(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function k(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:y(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function w(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function I(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function $(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function N(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function C(e){return"string"==typeof e||e instanceof String}function S(e){return"number"==typeof e}function T(e){return Array.isArray(e)?T(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":S(e)?"float32":C(e)?"string":"boolean"==typeof e?"bool":"float32"}function E(e){return!!(e&&e.constructor&&e.call&&e.apply)}function R(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function A(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function F(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce((e,t)=>e*t)*(s?2:1);for(let t=0;t<a;t++)r[t]=F(e+t*o,i,n,s)}return r}function D(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce((e,t)=>e*t)*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return F(0,e,t,n)}function _(e,t){const n=O(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function O(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function M(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return D(e,new Float32Array(n));if("int32"===t)return D(e,new Int32Array(n));if("bool"===t)return D(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function L(e){e.forEach(t=>{l(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function z(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function B(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function P(e){return e&&e.then&&"function"==typeof e.then}class W{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=U,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(P(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function U(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function V(){return H}let G,H=null;function j(){if(null==G){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}G=e}return G}function q(e,t){const n=function(){const e=j();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const K=q("kernelRegistry",()=>new Map),X=q("gradRegistry",()=>new Map);function Y(e,t){const n=te(e,t);return K.get(n)}function J(e){return X.get(e)}function Z(e){const t=K.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function Q(e){const{kernelName:t,backendName:n}=e,s=te(t,n);K.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),K.set(s,e)}function ee(e){const{kernelName:t}=e;X.has(t)&&V().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),X.set(t,e)}function te(e,t){return`${t}_${e}`}var ne=re,se=null;try{se=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function re(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function ae(e){return!0===(e&&e.__isLong__)}Object.defineProperty(re.prototype,"__isLong__",{value:!0}),re.isLong=ae;var ie={},oe={};function le(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=oe[e])?s:(n=ce(e,(0|e)<0?-1:0,!0),r&&(oe[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=ie[e])?s:(n=ce(e,e<0?-1:0,!1),r&&(ie[e]=n),n)}function ue(e,t){if(isNaN(e))return t?ye:xe;if(t){if(e<0)return ye;if(e>=ge)return $e}else{if(e<=-me)return Ne;if(e+1>=me)return Ie}return e<0?ue(-e,t).neg():ce(e%fe|0,e/fe|0,t)}function ce(e,t,n){return new re(e,t,n)}re.fromInt=le,re.fromNumber=ue,re.fromBits=ce;var he=Math.pow;function de(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return xe;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return de(e.substring(1),t,n).neg();for(var r=ue(he(n,8)),a=xe,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=ue(he(n,o));a=a.mul(u).add(ue(l))}else a=(a=a.mul(r)).add(ue(l))}return a.unsigned=t,a}function pe(e,t){return"number"==typeof e?ue(e,t):"string"==typeof e?de(e,t):ce(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}re.fromString=de,re.fromValue=pe;var fe=4294967296,ge=fe*fe,me=ge/2,be=le(1<<24),xe=le(0);re.ZERO=xe;var ye=le(0,!0);re.UZERO=ye;var ke=le(1);re.ONE=ke;var we=le(1,!0);re.UONE=we;var ve=le(-1);re.NEG_ONE=ve;var Ie=ce(-1,2147483647,!1);re.MAX_VALUE=Ie;var $e=ce(-1,-1,!0);re.MAX_UNSIGNED_VALUE=$e;var Ne=ce(0,-2147483648,!1);re.MIN_VALUE=Ne;var Ce=re.prototype;Ce.toInt=function(){return this.unsigned?this.low>>>0:this.low},Ce.toNumber=function(){return this.unsigned?(this.high>>>0)*fe+(this.low>>>0):this.high*fe+(this.low>>>0)},Ce.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Ne)){var t=ue(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=ue(he(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},Ce.getHighBits=function(){return this.high},Ce.getHighBitsUnsigned=function(){return this.high>>>0},Ce.getLowBits=function(){return this.low},Ce.getLowBitsUnsigned=function(){return this.low>>>0},Ce.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ne)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},Ce.isZero=function(){return 0===this.high&&0===this.low},Ce.eqz=Ce.isZero,Ce.isNegative=function(){return!this.unsigned&&this.high<0},Ce.isPositive=function(){return this.unsigned||this.high>=0},Ce.isOdd=function(){return 1==(1&this.low)},Ce.isEven=function(){return 0==(1&this.low)},Ce.equals=function(e){return ae(e)||(e=pe(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},Ce.eq=Ce.equals,Ce.notEquals=function(e){return!this.eq(e)},Ce.neq=Ce.notEquals,Ce.ne=Ce.notEquals,Ce.lessThan=function(e){return this.comp(e)<0},Ce.lt=Ce.lessThan,Ce.lessThanOrEqual=function(e){return this.comp(e)<=0},Ce.lte=Ce.lessThanOrEqual,Ce.le=Ce.lessThanOrEqual,Ce.greaterThan=function(e){return this.comp(e)>0},Ce.gt=Ce.greaterThan,Ce.greaterThanOrEqual=function(e){return this.comp(e)>=0},Ce.gte=Ce.greaterThanOrEqual,Ce.ge=Ce.greaterThanOrEqual,Ce.compare=function(e){if(ae(e)||(e=pe(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Ce.comp=Ce.compare,Ce.negate=function(){return!this.unsigned&&this.eq(Ne)?Ne:this.not().add(ke)},Ce.neg=Ce.negate,Ce.add=function(e){ae(e)||(e=pe(e));var t=0,n=0,s=0,r=0;return s+=(r+=(65535&this.low)+(65535&e.low))>>>16,n+=(s+=(this.low>>>16)+(e.low>>>16))>>>16,t+=(n+=(65535&this.high)+(65535&e.high))>>>16,t+=(this.high>>>16)+(e.high>>>16),ce((s&=65535)<<16|(r&=65535),(t&=65535)<<16|(n&=65535),this.unsigned)},Ce.subtract=function(e){return ae(e)||(e=pe(e)),this.add(e.neg())},Ce.sub=Ce.subtract,Ce.multiply=function(e){if(this.isZero())return xe;if(ae(e)||(e=pe(e)),se)return ce(se.mul(this.low,this.high,e.low,e.high),se.get_high(),this.unsigned);if(e.isZero())return xe;if(this.eq(Ne))return e.isOdd()?Ne:xe;if(e.eq(Ne))return this.isOdd()?Ne:xe;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(be)&&e.lt(be))return ue(this.toNumber()*e.toNumber(),this.unsigned);var t=65535&this.high,n=this.low>>>16,s=65535&this.low,r=65535&e.high,a=e.low>>>16,i=65535&e.low,o=0,l=0,u=0,c=0;return u+=(c+=s*i)>>>16,l+=(u+=n*i)>>>16,u&=65535,l+=(u+=s*a)>>>16,o+=(l+=t*i)>>>16,l&=65535,o+=(l+=n*a)>>>16,l&=65535,o+=(l+=s*r)>>>16,o+=(this.high>>>16)*i+t*a+n*r+s*(e.high>>>16),ce((u&=65535)<<16|(c&=65535),(o&=65535)<<16|(l&=65535),this.unsigned)},Ce.mul=Ce.multiply,Ce.divide=function(e){if(ae(e)||(e=pe(e)),e.isZero())throw Error("division by zero");var t,n,s;if(se)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?ce((this.unsigned?se.div_u:se.div_s)(this.low,this.high,e.low,e.high),se.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?ye:xe;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return ye;if(e.gt(this.shru(1)))return we;s=ye}else{if(this.eq(Ne))return e.eq(ke)||e.eq(ve)?Ne:e.eq(Ne)?ke:(t=this.shr(1).div(e).shl(1)).eq(xe)?e.isNegative()?ke:ve:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(Ne))return this.unsigned?ye:xe;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=xe}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:he(2,r-48),i=ue(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=ue(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=ke),s=s.add(i),n=n.sub(o)}return s},Ce.div=Ce.divide,Ce.modulo=function(e){return ae(e)||(e=pe(e)),se?ce((this.unsigned?se.rem_u:se.rem_s)(this.low,this.high,e.low,e.high),se.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Ce.mod=Ce.modulo,Ce.rem=Ce.modulo,Ce.not=function(){return ce(~this.low,~this.high,this.unsigned)},Ce.and=function(e){return ae(e)||(e=pe(e)),ce(this.low&e.low,this.high&e.high,this.unsigned)},Ce.or=function(e){return ae(e)||(e=pe(e)),ce(this.low|e.low,this.high|e.high,this.unsigned)},Ce.xor=function(e){return ae(e)||(e=pe(e)),ce(this.low^e.low,this.high^e.high,this.unsigned)},Ce.shiftLeft=function(e){return ae(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ce(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):ce(0,this.low<<e-32,this.unsigned)},Ce.shl=Ce.shiftLeft,Ce.shiftRight=function(e){return ae(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ce(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):ce(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Ce.shr=Ce.shiftRight,Ce.shiftRightUnsigned=function(e){if(ae(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?ce(this.low>>>e|t<<32-e,t>>>e,this.unsigned):ce(32===e?t:t>>>e-32,0,this.unsigned)},Ce.shru=Ce.shiftRightUnsigned,Ce.shr_u=Ce.shiftRightUnsigned,Ce.toSigned=function(){return this.unsigned?ce(this.low,this.high,!1):this},Ce.toUnsigned=function(){return this.unsigned?this:ce(this.low,this.high,!0)},Ce.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Ce.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Ce.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},re.fromBytes=function(e,t,n){return n?re.fromBytesLE(e,t):re.fromBytesBE(e,t)},re.fromBytesLE=function(e,t){return new re(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},re.fromBytesBE=function(e,t){return new re(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};var Se=ne;const Te=Se||Object.assign(Object.create(null),ne,{default:Se});function Ee(e){return Te.fromString(e,!0,16)}const Re=Ee("c3a5c85c97cb3127"),Ae=Ee("b492b66fbe98f273"),Fe=Ee("9ae16a3b2f90404f");function De(e){return e.xor(e.shru(47))}function _e(e,t,n){const s=e.slice(t,t+n);return Te.fromBytes(Array.from(s),!0,!0)}function Oe(e,t){return _e(e,t,8)}function Me(e,t){return _e(e,t,4)}function Le(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function ze(e,t,n=Ee("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Be(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Le(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Le(r,44)),[r.add(s),a.add(i)]}(Oe(e,t),Oe(e,t+8),Oe(e,t+16),Oe(e,t+24),n,s)}function Pe(e,t=e.length){const n=Te.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Fe.add(2*t),s=Oe(e,0).add(Fe),r=Oe(e,t-8);return ze(Le(r,37).mul(n).add(s),Le(s,25).add(r).mul(n),n)}if(t>=4){const n=Fe.add(2*t);return ze(Me(e,0).shl(3).add(t),Me(e,t-4),n)}if(t>0){const n=t+(e[t-1]<<2);return De(Fe.mul(e[0]+(e[t>>1]<<8)).xor(Re.mul(n))).mul(Fe)}return Fe}(e,t):function(e,t=e.length){const n=Fe.add(2*t),s=Oe(e,0).mul(Ae),r=Oe(e,8),a=Oe(e,t-8).mul(n),i=Oe(e,t-16).mul(Fe);return ze(Le(s.add(r),43).add(Le(a,30)).add(i),s.add(Le(r.add(Fe),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Fe.add(2*t),s=Oe(e,0).mul(Fe),r=Oe(e,8),a=Oe(e,t-8).mul(n),i=Oe(e,t-16).mul(Fe),o=Le(s.add(r),43).add(Le(a,30)).add(i),l=ze(o,s.add(Le(r.add(Fe),18)).add(a),n),u=Oe(e,16).mul(n),c=Oe(e,24),h=o.add(Oe(e,t-32)).mul(n),d=l.add(Oe(e,t-24)).mul(n);return ze(Le(u.add(c),43).add(Le(h,30)).add(d),u.add(Le(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Ae).add(113),a=De(r.mul(Fe).add(113)).mul(Fe),i=[Te.UZERO,Te.UZERO],o=[Te.UZERO,Te.UZERO];s=s.mul(Fe).add(Oe(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Le(s.add(r).add(i[0]).add(Oe(e,l+8)),37).mul(Ae),r=Le(r.add(i[1]).add(Oe(e,l+48)),42).mul(Ae),s=s.xor(o[1]),r=r.add(i[0]).add(Oe(e,l+40)),a=Le(a.add(o[0]),33).mul(Ae),i=Be(e,l,i[1].mul(Ae),s.add(o[0])),o=Be(e,l+32,a.add(o[1]),r.add(Oe(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Ae.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Le(s.add(r).add(i[0]).add(Oe(e,l+8)),37).mul(h),r=Le(r.add(i[1]).add(Oe(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Oe(e,l+40))),a=Le(a.add(o[0]),33).mul(h),i=Be(e,l,i[1].mul(h),s.add(o[0])),o=Be(e,l+32,a.add(o[1]),r.add(Oe(e,l+16))),[a,s]=[s,a],ze(ze(i[0],o[0],h).add(De(r).mul(Re)).add(a),ze(i[1],o[1],h).add(s),h)}function We(e,t){return"string"===t?Ge(e):Ue([e],t)}function Ue(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=h(e)),V().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Ve(){return V().platform.now()}function Ge(e,t="utf-8"){return t=t||"utf-8",V().platform.encode(e,t)}function He(e,t="utf-8"){return t=t||"utf-8",V().platform.decode(e,t)}class je{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ke)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=Ve();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:Ve()-i})}if(V().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then(t=>{qe(t,n.dtype,e)})}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),s,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])})})}}function qe(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Ke{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?m(`${s}ms`,9):s.error,o=m(e,25),l=t.rank,u=t.size,c=m(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Xe(e,t,n,s){const r=A(t),a=function(e,t,n,s){const r=d(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Qe(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Ye(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=Ze(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}function Ye(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:C(e)?`'${e}'`:"bool"===n?Je(e):parseFloat(e.toFixed(7)).toString(),m(s,t)}function Je(e){return 0===e?"false":"true"}function Ze(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[Ye(Qe(e)[0],0,n)]:"bool"===n?[Je(e[0])]:[e[0].toString()];if(1===l){if(o>20){let t=Array.from(e.slice(0,3*i)),s=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(t=Qe(t),s=Qe(s)),["["+t.map((e,t)=>Ye(e,r[t],n)).join(", ")+", ..., "+s.map((e,t)=>Ye(e,r[o-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?Qe(e):Array.from(e)).map((e,t)=>Ye(e,r[t],n)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,d=[];if(o>20){for(let t=0;t<3;t++){const s=t*h;d.push(...Ze(e.slice(s,s+h),u,n,c,r,!1))}d.push("...");for(let t=o-3;t<o;t++){const s=t*h;d.push(...Ze(e.slice(s,s+h),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h;d.push(...Ze(e.slice(s,s+h),u,n,c,r,t===o-1))}const p=2===l?",":"";d[0]="["+d[0]+p;for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<l;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function Qe(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class et{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=d(e),null!=n){const e=n.length;l(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||v(t,this.size),this.strides=A(e)}set(e,...t){0===t.length&&(t=[0]),l(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t])throw new Error(`Requested out of range element at ${e}.   Buffer shape=${this.shape}`);t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return tt().makeTensor(this.values,this.shape,this.dtype)}}let tt=null,nt=null;class st{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=d(e),this.strides=A(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return nt.buffer(this.shape,this.dtype,e)}bufferSync(){return nt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return D(this.shape,e,"complex64"===this.dtype)}arraySync(){return D(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=tt().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>He(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=tt().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>He(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await tt().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(tt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return nt.print(this,e)}clone(){return this.throwIfDisposed(),nt.clone(this)}toString(e=!1){return Xe(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),nt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),tt().makeVariable(this,e,t,n)}}function rt(){return q("Tensor",()=>st)}Object.defineProperty(st,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),rt();class at extends st{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!p(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);tt().disposeTensor(this),this.dataId=e.dataId,tt().incRef(this,null)}dispose(){tt().disposeVariable(this),this.isDisposedInternal=!0}}var it,ot,lt,ut,ct;Object.defineProperty(at,Symbol.hasInstance,{value:e=>e instanceof st&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(it||(it={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ot||(ot={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(lt||(lt={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ut||(ut={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ct||(ct={}));const ht={float32:ut,int32:ot,bool:lt,complex64:ct};function dt(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ht[e][t]}function pt(e){return dt(e,"int32")}function ft(e,t){if(e.dtype===t.dtype)return[e,t];const n=dt(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function gt(e){const t=[];return mt(e,t,new Set),t}function mt(e,t,n){if(null==e)return;if(e instanceof st)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),mt(s,t,n))}}function bt(e){return null!=e.kernelName}class xt{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class yt{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new xt}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new je(this.backendInstance),!0}setupRegisteredKernels(){Z(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Z(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=t.factory();if(!s||s instanceof n||"function"!=typeof s.then)return this.registry[e]=s,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=s.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return yt.nextTensorId++}nextVariableId(){return yt.nextVariableId++}clone(e){const t=wt.runKernel("Identity",{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>wt.runKernel("Cast",{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){if(null==Y(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach(e=>{r+="complex64"===e.dtype?3:1});const a=s-t-r-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const u=bt(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(bt(e)){const{kernelName:t,inputs:r,attrs:a}=e,u=Y(t,this.backendName);l(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map(e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)});if(s){const e=this.getTensorsForGradient(t,r,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy(()=>t(this.backend,r));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:c,attrs:h}=e,d=bt(e)?null:e.backwardsFunc;let p;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,c,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()}),s&&this.addTapeNode(u,c,t,d,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(e=>null!=c[e]?c[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const s=J(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(l(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>r[t]);return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");s=s||this.backend;let r=e;"string"===(n=n||"float32")&&C(e[0])&&(r=e.map(e=>Ge(e)));const a=s.write(r,t,n),i=new st(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new st(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new at(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*N(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof at||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*N(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=J(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],s=O(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e}),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=gt(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==s.id||this.track(e)})}gradients(e,t,n,s=!1){if(l(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));l(r instanceof st,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach(e=>s[e.id]=!0),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[r.id]=null==n?function(e){const t=_(d(e),"float32");return wt.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!p(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,e=>this.tidy(e),vt);const s=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(e){return l(E(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;l(t.every(e=>e instanceof st),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return t.forEach((e,t)=>{s[t]=e}),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),l(n.value instanceof st,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),l(E(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];l(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),l(a.every(e=>e instanceof st),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Ve(),n=await this.backend.time(e);return n.wallMs=Ve()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new xt;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function kt(){const e=j();if(null==e._tfengine){const t=new W(e);e._tfengine=new yt(t)}return H=e._tfengine.ENV,tt=()=>e._tfengine,e._tfengine}yt.nextTensorId=0,yt.nextVariableId=0;const wt=kt();function vt(e,t){return wt.runKernel("Add",{a:e,b:t})}function It(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function $t(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Nt=V();function Ct(e,t){let n=e;if($(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||$(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&V().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&St(e,s,[]),s}function St(e,t,n){if(n=n||[],!Array.isArray(e)&&!$(e))return void l(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);l(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),l(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const s=t.slice(1);for(let t=0;t<e.length;++t)St(e[t],s,n.concat(t))}function Tt(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Et(e,t,n,s="numeric"){if(e instanceof st)return Tt(s,e.dtype,t,n),e;let r=T(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Tt(s,r,t,n),null==e||!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=Ct(e,r);$(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Ue(e,r):h(e,[],!0);return wt.makeTensor(i,a,r)}function Rt(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>Et(e,`${t}[${r}]`,n,s))}function At(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{wt.startScope(n);try{const t=s(...e);return P(t)&&console.error("Cannot return a Promise inside of tidy."),wt.endScope(t),t}catch(e){throw wt.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}Nt.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Nt.registerFlag("IS_BROWSER",()=>$t()),Nt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Nt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Nt.registerFlag("PROD",()=>!1),Nt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Nt.getBool("DEBUG")),Nt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Nt.registerFlag("IS_TEST",()=>!1),Nt.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),Nt.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);const Ft=At({complex_:function(e,t){const n=Et(e,"real","complex"),s=Et(t,"imag","complex");return u(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`),wt.runKernel("Complex",{real:n,imag:s})}});function Dt(e,t,n,s){if(null==s&&(s=T(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){L(t);const e=d(t),s=d(n);l(e===s,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`);for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==d(t.slice(e));l(n[e]===t[e]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return $(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Ue(e,s):h(e,[],!0),wt.makeTensor(e,t,s)}function _t(e,t,n){return Dt(e,t,Ct(e,n),n)}const Ot={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Mt(e,t){const n=[],s=[],r=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)});s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Lt(await Promise.all(s)),specs:n}}function Lt(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const s=new Uint8Array(t);let r=0;return n.forEach(e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength}),s.buffer}const zt="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Bt(e){return zt?Buffer.byteLength(e):new Blob([e]).size}function Pt(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let s=0;return e.forEach(e=>{n.set(new Uint8Array(e),s),s+=e.byteLength}),n.buffer}function Wt(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Ut(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Bt(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Bt(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Vt(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r];a[r]=e[n[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class Gt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Gt.instance&&(Gt.instance=new Gt),Gt.instance}static registerSaveRouter(e){Gt.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Gt.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Gt.getHandlers(e,"save")}static getLoadHandlers(e,t){return Gt.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Gt.getInstance().loadRouters:Gt.getInstance().saveRouters).forEach(t=>{const r=t(e,n);null!==r&&s.push(r)}),s}}function Ht(){if(!V().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function jt(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class qt{constructor(e){if(this.indexedDB=Ht(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>jt(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction("models_store","readonly"),s=t.objectStore("models_store").get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=Ut(t),a=r.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore("model_info_store");const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)})}}qt.URL_SCHEME="indexeddb://";const Kt=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(qt.URL_SCHEME)?(t=e.slice(qt.URL_SCHEME.length),new qt(t)):null;var t};Gt.registerSaveRouter(Kt),Gt.registerLoadRouter(Kt);class Xt{constructor(){this.indexedDB=Ht()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>jt(n),n.onsuccess=()=>{const s=n.result,r=s.transaction("model_info_store","readonly"),a=r.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(qt.URL_SCHEME)?t.slice(qt.URL_SCHEME.length):t,new Promise((t,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>jt(s),s.onsuccess=()=>{const r=s.result,a=r.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction("models_store","readwrite");const s=l.objectStore("models_store").delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)})}}const Yt="tensorflowjs_models",Jt="info",Zt="model_topology",Qt="weight_specs",en="weight_data",tn="model_metadata";function nn(e){return{info:[Yt,e,Jt].join("/"),topology:[Yt,e,Zt].join("/"),weightSpecs:[Yt,e,Qt].join("/"),weightData:[Yt,e,en].join("/"),modelMetadata:[Yt,e,tn].join("/")}}function sn(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function rn(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class an{constructor(e){if(!V().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=nn(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=Ut(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(zt)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:s}}catch(e){throw sn(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(zt){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}an.URL_SCHEME="localstorage://";const on=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(an.URL_SCHEME)?(t=e.slice(an.URL_SCHEME.length),new an(t)):null;var t};Gt.registerSaveRouter(on),Gt.registerLoadRouter(on);class ln{constructor(){l(V().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),l("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Yt+"/",n="/"+Jt;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[rn(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=nn(e=(t=e).startsWith(an.URL_SCHEME)?t.slice(an.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return sn(n),s}}class un{constructor(){this.managers={}}static getInstance(){return null==un.instance&&(un.instance=new un),un.instance}static registerManager(e,t){l(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),l(e.length>0,()=>"scheme must not be an empty string.");const n=un.getInstance();l(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class cn{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(V().get("IS_BROWSER")){V().setPlatform("browser",new cn);try{un.registerManager(an.URL_SCHEME,new ln)}catch(e){}try{un.registerManager(qt.URL_SCHEME,new Xt)}catch(e){}}let hn;function dn(e,t="float32",n){return t=t||"float32",L(e),new et(e,t,n)}V().get("IS_NODE")&&V().setPlatform("node",new class{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=V().global.fetch?V().global.fetch(e,t):(null==hn&&(hn=require("node-fetch")),hn(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const pn=At({cast_:function(e,t){const n=Et(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return wt.runKernel("Cast",{x:n},{dtype:t})}}),fn=At({clone_:function(e){const t=Et(e,"x","clone","string_or_numeric");return wt.runKernel("Identity",{x:t})}});function gn(e){return new Promise(e=>setTimeout(e)).then(e)}kt(),nt={buffer:dn,cast:pn,clone:fn,print:function(e,t=!1){console.log(e.toString(t))}};class mn{constructor(e){if(!V().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(mn.URL_SCHEME)&&(e=e.slice(mn.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Wt(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await gn(()=>r.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await gn(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Ut(e)}}}}function bn(e,t,n,s){!function(e){l(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){l(e>=0&&e<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`),l(t>=0&&t<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`),l(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`)}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++r/e.length*(s-n);return t(i),a}),a)))}mn.URL_SCHEME="downloads://",Gt.registerSaveRouter(e=>V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(mn.URL_SCHEME)?function(e="model"){return new mn(e)}(e.slice(mn.URL_SCHEME.length)):null);class xn{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(l("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=V().platform.fetch,l(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&l(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Wt(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Ut(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}if(null==t.modelTopology&&null==t.weightsManifest)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return async function(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[s,r]=await t(e.weightsManifest);n.weightSpecs=s,n.weightData=r}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,Pt(await async function(e,t){null==t&&(t={});const n=null==t.fetchFunc?V().platform.fetch:t.fetchFunc,s=e.map(e=>n(e,t.requestInit,{isBinary:!0})),r=(null==t.onProgress?await Promise.all(s):await bn(s,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(r):await bn(r,t.onProgress,.5,1)}(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function yn(e){return null!=e.match(xn.URL_SCHEME_REGEX)}xn.URL_SCHEME_REGEX=/^https?:\/\//;const kn=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>yn(e)):yn(e),n)return wn(e,t)}return null};function wn(e,t){return new xn(e,t)}Gt.registerSaveRouter(kn),Gt.registerLoadRouter(kn);const vn=At({matMul_:function(e,t,n=!1,s=!1){let r=Et(e,"a","matMul"),a=Et(t,"b","matMul");return[r,a]=ft(r,a),wt.runKernel("BatchMatMul",{a:r,b:a},{transposeA:n,transposeB:s})}}),In=At({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r=Et(e,"indices","oneHot","int32");return wt.runKernel("OneHot",{indices:r},{depth:t,onValue:n,offValue:s})}}),$n=At({transpose_:function(e,t){const n=Et(e,"x","transpose");return null==t&&(t=n.shape.map((e,t)=>t).reverse()),l(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{l(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`)}),n.rank<=1?n.clone():wt.runKernel("Transpose",{x:n},{perm:t})}});function Nn(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===d(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...A(e.shape).map(e=>e/u),1].slice(0,a);return[l,i,u,c]}function Cn(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Sn(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:d(t.shape)/o,sliceSize:i,strides:[...A(n.slice(0,r)),1],outputSize:d(n)}}function Tn(e,t,n){const s=e.shape.length;l(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),l(s===n.length,()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)l(t[r]+n[r]<=e.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}function En(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Rn(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function An(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Fn(e,t,n){return n<=e?n:n-(t-1)}function Dn(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function _n(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=On(i,l,u,s,e),h=Mn(o,l,u,r,e),d=An(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=zn(i,s,a,e,t,l),h[t]=Bn(o,r,a,e,t,l),d[t]=Ln(a,t,l);return{begin:c,end:h,strides:d}}function On(e,t,n,s,r){const a=[...r],i=Dn(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=Fn(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Mn(e,t,n,s,r){const i=[...r],o=Dn(n,t);for(let r=0;r<i.length;r++)if(o.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{const a=Fn(t,n,r);let o=s[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let e=0;e<i.length;e++){const t=r[e];i[e]<0&&(i[e]+=t),i[e]=a(0,i[e],r[e])}return i}function Ln(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function zn(e,t,n,s,r,i){let o=t[r];(e&1<<r||i&1<<r||null==o)&&(o=(n[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=a(0,o,l-1),o}function Bn(e,t,n,s,r,i){let o=t[r];const l=n[r]||1;(e&1<<r||i&1<<r||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[r];return o<0&&(o+=u),o=l>0?a(0,o,u):a(-1,o,u-1),o}function Pn(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Wn(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Un(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(e=>{l(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(l(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-s[n])),[s,a]}function Vn(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const d=En(i);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=e.length-u.length,f=En(o),g=e.slice();f.forEach(e=>{u[e]=0,c[e]=1,g.splice(e,0,1)});const{begin:m,end:b,strides:x}=_n(g,d,p,u,c,h,r,a,i);u=m,c=b,h=x;const y=En(l);y.forEach(e=>{c[e]=u[e]+1,h[e]=1});const k=Rn(u,c,h),w=k.filter((e,t)=>-1===y.indexOf(t));return{nonStrided:h.every(e=>1===e),$begin:u,$end:c,$strides:h,size:k,newShape:g,outShape:w}}var Gn={__proto__:null,assertParamsValid:Tn,maskToAxes:En,computeOutShape:Rn,stridesWithElidedDims:An,getNormalizedAxes:_n,startIndicesWithElidedDims:On,stopIndicesWithElidedDims:Mn,stridesForAxis:Ln,startForAxis:zn,stopForAxis:Bn,isSliceContinous:Pn,computeFlatOffset:Wn,parseSliceParams:Un,sliceInfo:Vn};class Hn{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class jn{constructor(){this.classNameMap={}}static getMap(){return null==jn.instance&&(jn.instance=new jn),jn.instance}static register(e){jn.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function qn(e){l(null!=e.className,()=>"Class being registered does not have the static className property defined."),l("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),l(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),jn.register(e)}function Kn(){return wt}function Xn(){return wt.memory()}function Yn(e,t){return wt.tidy(e,t)}function Jn(e){gt(e).forEach(e=>e.dispose())}function Zn(e){return wt.keep(e)}function Qn(e,t,n=1){return wt.registerBackend(e,t,n)}const es=At({add_:function(e,t){let n=Et(e,"a","add"),s=Et(t,"b","add");return[n,s]=ft(n,s),wt.runKernel("Add",{a:n,b:s})}}),ts=At({floorDiv_:function(e,t){let n=Et(e,"a","floorDiv"),s=Et(t,"b","floorDiv");return[n,s]=ft(n,s),wt.runKernel("FloorDiv",{a:n,b:s})}}),ns=At({div_:function(e,t){let n=Et(e,"a","div"),s=Et(t,"b","div");return[n,s]=ft(n,s),"int32"===n.dtype&&"int32"===s.dtype?ts(n,s):wt.runKernel("RealDiv",{a:n,b:s},{})}}),ss=At({mul_:function(e,t){let n=Et(e,"a","mul"),s=Et(t,"b","mul");return[n,s]=ft(n,s),wt.runKernel("Multiply",{a:n,b:s})}}),rs=At({abs_:function(e){const t=Et(e,"x","abs");return wt.runKernel("complex64"===t.dtype?"ComplexAbs":"Abs",{x:t})}}),as=At({acos_:function(e){const t=Et(e,"x","acos");return wt.runKernel("Acos",{x:t})}}),is=At({acosh_:function(e){const t=Et(e,"x","acosh");return wt.runKernel("Acosh",{x:t})}}),os=At({all_:function(e,t=null,n=!1){const s=Et(e,"x","all","bool");return wt.runKernel("All",{x:s},{axis:t,keepDims:n})}}),ls=At({any_:function(e,t=null,n=!1){const s=Et(e,"x","any","bool");return wt.runKernel("Any",{x:s},{axis:t,keepDims:n})}}),us=At({argMax_:function(e,t=0){const n=Et(e,"x","argMax");return wt.runKernel("ArgMax",{x:n},{axis:t})}}),cs=At({argMin_:function(e,t=0){const n=Et(e,"x","argMin");return wt.runKernel("ArgMin",{x:n},{axis:t})}}),hs=At({asin_:function(e){const t=Et(e,"x","asin");return wt.runKernel("Asin",{x:t})}}),ds=At({asinh_:function(e){const t=Et(e,"x","asinh");return wt.runKernel("Asinh",{x:t})}}),ps=At({atan_:function(e){const t=Et(e,"x","atan");return wt.runKernel("Atan",{x:t})}}),fs=At({atan2_:function(e,t){let n=Et(e,"a","atan2"),s=Et(t,"b","atan2");return[n,s]=ft(n,s),wt.runKernel("Atan2",{a:n,b:s})}}),gs=At({atanh_:function(e){const t=Et(e,"x","atanh");return wt.runKernel("Atanh",{x:t})}});function ms(e,t,n,s,r="NHWC",a){return ys(e,[...t,e[3]],n,a,s,null,null,Ts(r))}function bs(e,t,n,s,r,a,i="channelsLast"){const[o,l]=vs(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ys(e,u,n,s,r,a,!1,i)}function xs(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Is(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return ks(e,c,n,s,r,!1,h,a)}function ys(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[d,p,,f]=t,[g,m]=vs(n),[b,x]=vs(s),y=$s(d,b),k=$s(p,x),{padInfo:w,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=ws(e,t,n));const a=e[1];return[Ns((e[0]-t+2*s)/n+1,r),Ns((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),d=e-l,p=Math.floor(o/2);u={top:l,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Ns((t-a+d+p)/s+1,o),h=Ns((n-i+f+g)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,y,k,a,o),$=i?f*h:f;let N;return"channelsFirst"===o?N=[l,$,v,I]:"channelsLast"===o&&(N=[l,v,I,$]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:$,padInfo:w,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:k,dilationHeight:b,dilationWidth:x,inShape:e,outShape:N,filterShape:t}}function ks(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,d,u,c,h]=e}const[p,f,g,,m]=t,[b,x,y]=Is(n),[k,w,v]=Is(s),I=$s(p,k),$=$s(f,w),N=$s(g,v),{padInfo:C,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,d,p,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=ws(e,t,s));const i=e[1],o=e[2];return[Ns((e[0]-t+2*r)/s+1,a),Ns((i-t+2*r)/s+1,a),Ns((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);d=a[0],p=a[1],f=a[2]}else if("same"===e){d=Math.ceil(t/r),p=Math.ceil(n/a),f=Math.ceil(s/i);const e=(d-1)*r+o-t,c=(p-1)*a+l-n,g=(f-1)*i+u-s,m=Math.floor(e/2),b=e-m,x=Math.floor(c/2),y=c-x,k=Math.floor(g/2);h={top:x,bottom:y,left:k,right:g-k,front:m,back:b,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-o+1)/r),p=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,b,x,y,I,$,N,o),R=a?m*d:m;let A;return"channelsFirst"===i?A=[l,R,S,T,E]:"channelsLast"===i&&(A=[l,S,T,E,R]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:S,outHeight:T,outWidth:E,outChannels:R,padInfo:C,strideDepth:b,strideHeight:x,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:I,effectiveFilterHeight:$,effectiveFilterWidth:N,dilationDepth:k,dilationHeight:w,dilationWidth:v,inShape:e,outShape:A,filterShape:t}}function ws(e,t,n,s=1){const r=$s(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function vs(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Is(e){return"number"==typeof e?[e,e,e]:e}function $s(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ns(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Cs(e){const[t,n,s]=vs(e);return 1===t&&1===n&&1===s}function Ss(e,t){return Cs(e)||Cs(t)}function Ts(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Es=At({reshape_:function(e,t){const n=Et(e,"x","reshape","string_or_numeric");return wt.runKernel("Reshape",{x:n},{shape:t})}}),Rs=At({avgPool_:function(e,t,n,s,r){const a=Et(e,"x","avgPool","float32");l(Ss(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=Es(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&l(f(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let u=wt.runKernel("AvgPool",{x:i},{filterSize:t,strides:n,pad:s,dimRoundingMode:r});return u=pn(u,a.dtype),o?Es(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),As=At({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Et(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=Es(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),l("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),null!=r&&l(f(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let c=wt.runKernel("AvgPool3D",{x:o},{filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a});return c=pn(c,o.dtype),u?Es(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Fs=At({concat_:function(e,t=0){l(e.length>=1,()=>"Pass at least one tensor to concat");const n=Rt(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?fn(n[0]):wt.runKernel("Concat",n,{axis:t})}}),Ds=At({sigmoid_:function(e){const t=Et(e,"x","sigmoid");return wt.runKernel("Sigmoid",{x:t})}}),_s=At({slice_:function(e,t,n){const s=Et(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return wt.runKernel("Slice",{x:s},{begin:t,size:n})}}),Os=At({tanh_:function(e){const t=Et(e,"x","tanh");return wt.runKernel("Tanh",{x:t})}}),Ms=At({batchToSpaceND_:function(e,t,n){const s=Et(e,"x","batchToSpaceND"),r=t.reduce((e,t)=>e*t);return l(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),l(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),l(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),wt.runKernel("BatchToSpaceND",{x:s},{blockShape:t,crops:n})}}),Ls=At({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Et(e,"x","batchNorm"),o=Et(t,"mean","batchNorm"),u=Et(n,"variance","batchNorm");let c,h;null!=r&&(c=Et(r,"scale","batchNorm")),null!=s&&(h=Et(s,"offset","batchNorm")),l(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),l(null==h||o.rank===h.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),l(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d=function(e){let t;return t=0===e.rank||1===e.rank?Es(e,[1,1,1,e.size]):2===e.rank?Es(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Es(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p=wt.runKernel("FusedBatchNorm",{x:d,scale:c,offset:h,mean:o,variance:u},{varianceEpsilon:a});return Es(p,i.shape)}}),zs=At({batchNorm2d_:function(e,t,n,s,r,a){const i=Et(e,"x","batchNorm"),o=Et(t,"mean","batchNorm"),u=Et(n,"variance","batchNorm");let c,h;return null!=r&&(c=Et(r,"scale","batchNorm")),null!=s&&(h=Et(s,"offset","batchNorm")),l(2===i.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),l(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),l(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&l(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`),null!=h&&l(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`),Ls(i,o,u,h,c,a)}}),Bs=At({batchNorm3d_:function(e,t,n,s,r,a){const i=Et(e,"x","batchNorm"),o=Et(t,"mean","batchNorm"),u=Et(n,"variance","batchNorm");let c,h;return null!=r&&(c=Et(r,"scale","batchNorm")),null!=s&&(h=Et(s,"offset","batchNorm")),l(3===i.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),l(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),l(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&l(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`),null!=h&&l(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`),Ls(i,o,u,h,c,a)}}),Ps=At({batchNorm4d_:function(e,t,n,s,r,a){const i=Et(e,"x","batchNorm"),o=Et(t,"mean","batchNorm"),u=Et(n,"variance","batchNorm");let c,h;return null!=r&&(c=Et(r,"scale","batchNorm")),null!=s&&(h=Et(s,"offset","batchNorm")),l(4===i.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),l(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),l(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&l(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`),null!=h&&l(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`),Ls(i,o,u,h,c,a)}}),Ws=At({bincount_:function(e,t,n){const s=Et(e,"x","bincount"),r=Et(t,"weights","bincount");return l("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),l(n>=0,()=>`size must be non-negative, but got ${n}.`),l(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),wt.runKernel("Bincount",{x:s,weights:r},{size:n})}}),Us=At({broadcastTo_:function(e,t){let n=Et(e,"broadcastTo","x");const s=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Es(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?fn(n):wt.runKernel("Tile",{x:n},{reps:a})}}),Vs=At({ceil_:function(e){const t=Et(e,"x","ceil");return wt.runKernel("Ceil",{x:t})}}),Gs=At({clipByValue_:function(e,t,n){const s=Et(e,"x","clipByValue");return l(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),wt.runKernel("ClipByValue",{x:s},{clipValueMin:t,clipValueMax:n})}}),Hs=At({concat1d_:function(e){return Fs(e,0)}}),js=At({concat2d_:function(e,t){return Fs(e,t)}}),qs=At({concat3d_:function(e,t){return Fs(e,t)}}),Ks=At({concat4d_:function(e,t){return Fs(e,t)}}),Xs=At({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Et(e,"x","conv2d"),u=Et(t,"filter","conv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=Es(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`),l(4===u.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`),null!=i&&l(f(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d="NHWC"===r?c.shape[3]:c.shape[1];l(d===u.shape[2],()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${u.shape[2]}.`),l(Ss(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p=wt.runKernel("Conv2D",{x:c,filter:u},{strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i});return h?Es(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Ys=At({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Et(e,"x","conv1d"),u=Et(t,"filter","conv1d");let c=o,h=!1;2===o.rank&&(h=!0,c=Es(o,[1,o.shape[0],o.shape[1]])),l(3===c.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`),l(3===u.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`),null!=i&&l(f(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),l(c.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`),l(Ss(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),l("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const d=Es(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=Es(c,[c.shape[0],1,c.shape[1],c.shape[2]]),g=Xs(p,d,[1,n],s,"NHWC",[1,a],i);return Es(g,h?[g.shape[2],g.shape[3]]:[g.shape[0],g.shape[2],g.shape[3]])}}),Js=At({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){l(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,u=t,c=!1;3===t.rank&&(c=!0,u=Es(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),l(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),l(4===u.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`),l(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);const h="NHWC"===a?o[3]:o[1],d="NHWC"===a?u.shape[3]:u.shape[1];l(h===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`),l(d===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`),null!=i&&l(f(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const p=wt.runKernel("Conv2DBackpropInput",{dy:u,filter:n},{strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o});return c?Es(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Zs=At({conv2dTranspose_:function(e,t,n,s,r,a){const i=Et(e,"x","conv2dTranspose"),o=Et(t,"filter","conv2dTranspose");return Js(n,i,o,s,r,"NHWC",a)}}),Qs=At({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Et(e,"x","conv3d"),o=Et(t,"filter","conv3d");let u=i,c=!1;4===i.rank&&(c=!0,u=Es(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),l(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),l(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),l(Ss(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),l("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const h=wt.runKernel("Conv3D",{x:u,filter:o},{strides:n,pad:s,dataFormat:r,dilations:a});return c?Es(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),er=At({conv3DBackpropInput_:function(e,t,n,s,r){l(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Es(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],c=i.shape[4];l(5===a.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),l(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),l(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),l(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),l(c===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`);const h=wt.runKernel("Conv3DBackpropInputV2",{dy:i,filter:n},{pad:r,strides:s,inputShape:a});return o?Es(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),tr=At({conv3dTranspose_:function(e,t,n,s,r){const a=Et(e,"x","conv3dTranspose"),i=Et(t,"filter","conv3dTranspose");return er(n,a,i,s,r)}}),nr=At({cos_:function(e){const t=Et(e,"x","cos");return wt.runKernel("Cos",{x:t})}}),sr=At({cosh_:function(e){const t=Et(e,"x","cosh");return wt.runKernel("Cosh",{x:t})}}),rr=At({cumsum_:function(e,t=0,n=!1,s=!1){const r=Et(e,"x","cumsum");return wt.runKernel("Cumsum",{x:r},{axis:t,exclusive:n,reverse:s})}}),ar=At({depthToSpace_:function(e,t,n="NHWC"){const s=Et(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];return l(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),l(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`),l(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`),wt.runKernel("DepthToSpace",{x:s},{blockSize:t,dataFormat:n})}}),ir=At({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Et(e,"x","depthwiseConv2d"),u=Et(t,"filter","depthwiseConv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=Es(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`),l(4===u.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`),l(c.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=i&&l(f(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const d=wt.runKernel("DepthwiseConv2dNative",{x:c,filter:u},{strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i});return h?Es(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),or=At({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Et(e,"x","dilation2d"),o=Et(t,"filter","dilation2d");l(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),l(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),l("NHWC"===a,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let u=i,c=!1;3===i.rank&&(u=Es(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);const h=wt.runKernel("Dilation2D",{x:u,filter:o},{strides:n,pad:s,dilations:r});return c?Es(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});function lr(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function ur(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function cr(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const hr=At({equal_:function(e,t){let n=Et(e,"a","equal","string_or_numeric"),s=Et(t,"b","equal","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("Equal",{a:n,b:s})}}),dr=At({where_:function(e,t,n){const s=Et(t,"a","where"),r=Et(n,"b","where"),a=Et(e,"condition","where","bool"),i=cr(cr(a.shape,s.shape),r.shape),o=Us(a,i),l=Us(s,i),u=Us(r,i);return wt.runKernel("Select",{condition:o,t:l,e:u})}}),pr=At({zerosLike_:function(e){const t=Et(e,"x","zerosLike");return wt.runKernel("ZerosLike",{x:t})}}),fr=At({divNoNan_:function(e,t){let n=Et(e,"a","div"),s=Et(t,"b","div");[n,s]=ft(n,s);const r=ns(n,s),a=pr(r),i=hr(s,a);return dr(i,a,r)}}),gr=At({dot_:function(e,t){const n=Et(e,"t1","dot"),s=Et(t,"t2","dot");l(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(l(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===n.rank&&1===s.rank){const e=Es(n,[1,-1]),t=Es(s,[-1,1]),r=vn(e,t);return Es(r,[])}if(1===n.rank&&2===s.rank){const e=Es(n,[1,-1]),t=Es(s,[s.shape[0],s.shape[1]]),r=vn(e,t);return Es(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Es(s,[-1,1]),t=vn(n,e);return Es(t,[t.size])}{const e=Es(s,[s.shape[0],s.shape[1]]);return vn(n,e)}}}),mr=At({elu_:function(e){const t=Et(e,"x","elu");return wt.runKernel("Elu",{x:t})}}),br=At({erf_:function(e){let t=Et(e,"x","erf");return l("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=pn(t,"float32")),wt.runKernel("Erf",{x:t})}}),xr=At({exp_:function(e){const t=Et(e,"x","exp");return wt.runKernel("Exp",{x:t})}}),yr=At({expandDims_:function(e,t=0){const n=Et(e,"x","expandDims","string_or_numeric");return l(t<=n.rank,()=>"Axis must be <= rank of the tensor"),wt.runKernel("ExpandDims",{input:n},{dim:t})}}),kr=At({expm1_:function(e){const t=Et(e,"x","expm1");return wt.runKernel("Expm1",{x:t})}}),wr=At({tile_:function(e,t){const n=Et(e,"x","tile","string_or_numeric");return l(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),wt.runKernel("Tile",{x:n},{reps:t})}}),vr=At({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=dn([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=Es(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return wr(yr(i,0),[n[0],1,1]);if(2===n.length)return wr(yr(yr(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return wr(yr(yr(yr(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Ir(e,t,n){return wt.runKernel("Fill",{},{shape:e,value:t,dtype:n})}const $r=At({floor_:function(e){const t=Et(e,"x","floor");return wt.runKernel("Floor",{x:t})}}),Nr=At({gather_:function(e,t,n=0,s=0){const r=Et(e,"x","gather"),a=Et(t,"indices","gather","int32");return wt.runKernel("GatherV2",{x:r,indices:a},{axis:n,batchDims:s})}}),Cr=At({greater_:function(e,t){let n=Et(e,"a","greater","string_or_numeric"),s=Et(t,"b","greater","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("Greater",{a:n,b:s})}}),Sr=At({greaterEqual_:function(e,t){let n=Et(e,"a","greaterEqual","string_or_numeric"),s=Et(t,"b","greaterEqual","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("GreaterEqual",{a:n,b:s})}}),Tr=At({imag_:function(e){const t=Et(e,"input","imag");return wt.runKernel("Imag",{input:t})}}),Er=At({isFinite_:function(e){const t=Et(e,"x","isFinite");return wt.runKernel("IsFinite",{x:t})}}),Rr=At({isInf_:function(e){const t=Et(e,"x","isInf");return wt.runKernel("IsInf",{x:t})}}),Ar=At({isNaN_:function(e){const t=Et(e,"x","isNaN");return wt.runKernel("IsNan",{x:t})}}),Fr=At({leakyRelu_:function(e,t=.2){const n=Et(e,"x","leakyRelu");return wt.runKernel("LeakyRelu",{x:n},{alpha:t})}}),Dr=At({less_:function(e,t){let n=Et(e,"a","less","string_or_numeric"),s=Et(t,"b","less","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("Less",{a:n,b:s})}}),_r=At({lessEqual_:function(e,t){let n=Et(e,"a","lessEqual","string_or_numeric"),s=Et(t,"b","lessEqual","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("LessEqual",{a:n,b:s})}}),Or=At({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Et(e,"x","localResponseNormalization");l(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),l(f(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=Es(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u=wt.runKernel("LRN",{x:i},{depthRadius:t,bias:n,alpha:s,beta:r});return o?Es(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Mr=At({log_:function(e){const t=Et(e,"x","log");return wt.runKernel("Log",{x:t})}}),Lr=At({log1p_:function(e){const t=Et(e,"x","log1p");return wt.runKernel("Log1p",{x:t})}});function zr(e){return wt.customGrad(e)}const Br=At({neg_:function(e){const t=Et(e,"x","neg");return wt.runKernel("Neg",{x:t})}}),Pr=At({softplus_:function(e){const t=Et(e,"x","softplus");return wt.runKernel("Softplus",{x:t})}}),Wr=At({logSigmoid_:function(e){const t=Et(e,"x","logSigmoid");return zr(e=>({value:Br(Pr(Br(e))),gradFunc:t=>ss(t,Ds(Br(e)))}))(t)}}),Ur=At({max_:function(e,t=null,n=!1){const s=Et(e,"x","max");return wt.runKernel("Max",{x:s},{reductionIndices:t,keepDims:n})}}),Vr=At({sub_:function(e,t){let n=Et(e,"a","sub"),s=Et(t,"b","sub");return[n,s]=ft(n,s),wt.runKernel("Sub",{a:n,b:s})}}),Gr=At({sum_:function(e,t=null,n=!1){let s=Et(e,"x","sum");return"bool"===s.dtype&&(s=pn(s,"int32")),wt.runKernel("Sum",{x:s},{axis:t,keepDims:n})}}),Hr=At({logSoftmax_:function(e,t=-1){const n=Et(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return zr((e,n)=>{const s=Ur(e,t,!0),r=Vr(e,s),a=Vr(pn(r,"float32"),Mr(Gr(xr(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=xr(s);return Vr(e,ss(Gr(e,t,!0),r))}}})(n)}});function jr(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function qr(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Kr(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map(t=>e[t])]}function Xr(e,t){return qr(e,t.map(e=>1),t)}function Yr(e,t,n){l(jr(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function Jr(e,t){if(jr(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach(e=>n.push(e)),n}function Zr(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Qr(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const ea=At({logSumExp_:function(e,t=null,n=!1){const s=Et(e,"x","logSumExp"),r=y(t,s.shape),a=Ur(s,r,!0),i=Vr(s,a),o=xr(i),l=Gr(o,r),u=Mr(l),c=es(Es(a,u.shape),u);if(n){const e=Xr(c.shape,r);return Es(c,e)}return c}}),ta=At({logicalAnd_:function(e,t){const n=Et(e,"a","logicalAnd","bool"),s=Et(t,"b","logicalAnd","bool");return cr(n.shape,s.shape),wt.runKernel("LogicalAnd",{a:n,b:s})}}),na=At({logicalNot_:function(e){const t=Et(e,"x","logicalNot","bool");return wt.runKernel("LogicalNot",{x:t})}}),sa=At({logicalOr_:function(e,t){const n=Et(e,"a","logicalOr","bool"),s=Et(t,"b","logicalOr","bool");return cr(n.shape,s.shape),wt.runKernel("LogicalOr",{a:n,b:s})}}),ra=At({logicalXor_:function(e,t){const n=Et(e,"a","logicalXor","bool"),s=Et(t,"b","logicalXor","bool");return cr(n.shape,s.shape),ta(sa(e,t),na(ta(e,t)))}}),aa=At({maxPool_:function(e,t,n,s,r){const a=Et(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Es(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),l(Ss(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=r&&l(f(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const u=wt.runKernel("MaxPool",{x:i},{filterSize:t,strides:n,pad:s,dimRoundingMode:r});return o?Es(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ia=At({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Et(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=Es(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),l("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),null!=r&&l(f(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c=wt.runKernel("MaxPool3D",{x:o},{filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a});return u?Es(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),oa=At({maximum_:function(e,t){let n=Et(e,"a","maximum"),s=Et(t,"b","maximum");return[n,s]=ft(n,s),"bool"===n.dtype&&(n=pn(n,"int32"),s=pn(s,"int32")),cr(n.shape,s.shape),wt.runKernel("Maximum",{a:n,b:s})}}),la=At({mean_:function(e,t=null,n=!1){const s=Et(e,"x","mean");return wt.runKernel("Mean",{x:s},{axis:t,keepDims:n})}});function ua(e,t="float32"){if("complex64"===t){const t=ua(e,"float32"),n=ua(e,"float32");return Ft(t,n)}const n=O(d(e),t);return wt.makeTensor(n,e,t)}function ca(e,t="float32"){if("complex64"===t){const t=ca(e,"float32"),n=ua(e,"float32");return Ft(t,n)}const n=_(d(e),t);return wt.makeTensor(n,e,t)}const ha=At({min_:function(e,t=null,n=!1){const s=Et(e,"x","min");return wt.runKernel("Min",{x:s},{axis:t,keepDims:n})}}),da=At({minimum_:function(e,t){let n=Et(e,"a","minimum"),s=Et(t,"b","minimum");return[n,s]=ft(n,s),"bool"===n.dtype&&(n=pn(n,"int32"),s=pn(s,"int32")),cr(n.shape,s.shape),wt.runKernel("Minimum",{a:n,b:s})}}),pa=At({mirrorPad_:function(e,t,n){l("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const s=Et(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");l(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)l(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),l(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`);return wt.runKernel("MirrorPad",{x:s},{paddings:t,mode:n})}}),fa=At({mod_:function(e,t){let n=Et(e,"a","mod"),s=Et(t,"b","mod");return[n,s]=ft(n,s),wt.runKernel("Mod",{a:n,b:s})}}),ga=At({square_:function(e){const t=Et(e,"x","square");return wt.runKernel("Square",{x:t},{})}}),ma=At({moments_:function(e,t=null,n=!1){const s=y(t,(e=Et(e,"x","moments")).shape),r=la(e,s,n);let a=r.shape;n||(a=Xr(r.shape,s));const i=ga(Vr(pn(e,"float32"),Es(r,a)));return{mean:r,variance:la(i,s,n)}}}),ba=At({notEqual_:function(e,t){let n=Et(e,"a","notEqual","string_or_numeric"),s=Et(t,"b","notEqual","string_or_numeric");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("NotEqual",{a:n,b:s})}}),xa=At({onesLike_:function(e){const t=Et(e,"x","onesLike");return wt.runKernel("OnesLike",{x:t})}}),ya=At({pad_:function(e,t,n=0){const s=Et(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return wt.runKernel("PadV2",{x:s},{paddings:t,constantValue:n})}}),ka=At({spaceToBatchND_:function(e,t,n){const s=Et(e,"x","spaceToBatchND");return l(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),l(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),l(s.shape.reduce((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),wt.runKernel("SpaceToBatchND",{x:s},{blockShape:t,paddings:n})}}),wa=At({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Et(e,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=Es(i,[1,i.shape[0],i.shape[1],i.shape[2]])),l(Ss(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const c=bs(o.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),s=n.map(e=>Math.floor(e/2)),r=n.map((e,t)=>e-s[t]);return n.map((e,t)=>[s[t],r[t]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function(e,t,n){const s=n.map(e=>e[0]),r=n.map(e=>e[1]),a=e.concat(s,r),i=t.map((e,t)=>(e-a[t]%e)%e),o=r.map((e,t)=>e+i[t]);return[t.map((e,t)=>[s[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",b=p?o:ka(o,h,f),x=("avg"===n?()=>Rs(b,t,a,m):()=>aa(b,t,a,m))(),y=p?x:Ms(x,h,g);return u?Es(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),va=At({pow_:function(e,t){let n=Et(e,"base","pow"),s=Et(t,"exp","pow");return[n,s]=ft(n,s),wt.runKernel("Pow",{a:n,b:s})}}),Ia=At({prelu_:function(e,t){const n=Et(e,"x","prelu"),s=Et(t,"alpha","prelu");return wt.runKernel("Prelu",{x:n,alpha:s})}}),$a=At({prod_:function(e,t=null,n=!1){let s=Et(e,"x","prod");return"bool"===s.dtype&&(s=pn(s,"int32")),wt.runKernel("Prod",{x:s},{axis:t,keepDims:n})}});function Na(e){var t={exports:{}};return e(t,t.exports),t.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var Ca=Na(function(e){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.alea=a}(0,e)}),Sa=Na(function(e){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor128=a}(0,e)}),Ta=Na(function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorwow=a}(0,e)}),Ea=Na(function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],s[r]=n^=(e^=e<<13)^e<<9,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorshift7=a}(0,e)}),Ra=Na(function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n=r[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(r=0==(n=o[127&a]^=s+(i=i+1640531527|0))?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,o[r]=(s^=s>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor4096=a}(0,e)}),Aa=Na(function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.tychei=a}(0,e)}),Fa={__proto__:null,default:{}},Da=Na(function(e){!function(t,n){var s,r=this,a=256,i=n.pow(a,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var m=[],b=f(p((u=1==u?{entropy:!0}:u||{}).entropy?[e,g(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(a):(e=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(e)),g(e)}catch(e){var n=r.navigator,i=n&&n.plugins;return[+new Date,r,i,r.screen,g(t)]}}():e,3),m),x=new h(m),y=function(){for(var e=x.g(6),t=i,n=0;e<o;)e=(e+n)*a,t*=a,n=x.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|x.g(4)},y.quick=function(){return x.g(4)/4294967296},y.double=y,f(g(x.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&d(r,x),e.state=function(){return d(x,{})}),s?(n.random=e,t):e})(y,b,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,r=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<a;)o[r]=r++;for(r=0;r<a;r++)o[r]=o[i=u&i+e[r%n]+(t=o[r])],o[i]=t;(s.g=function(e){for(var t,n=0,r=s.i,i=s.j,o=s.S;e--;)t=o[r=u&r+1],n=n*a+o[u&(o[r]=o[i=u&i+t])+(o[i]=t)];return s.i=r,s.j=i,n})(a)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(p(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return g(t)}function g(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=Fa}catch(e){}}}([],Math)});Da.alea=Ca,Da.xor128=Sa,Da.xorwow=Ta,Da.xorshift7=Ea,Da.xor4096=Ra,Da.tychei=Aa;var _a=Da;class Oa{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=_a.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ma{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=_a.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const La=At({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Oa(t,n,s,!1,r),i=dn(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),za=At({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=dn(e,s),i=new Ma(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Ba(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");return wt.runKernel("Range",{},{start:e,stop:t,step:n,dtype:s})}const Pa=At({real_:function(e){const t=Et(e,"input","real");return wt.runKernel("Real",{input:t})}}),Wa=At({reciprocal_:function(e){const t=Et(e,"x","reciprocal");return wt.runKernel("Reciprocal",{x:t})}}),Ua=At({relu_:function(e){const t=Et(e,"x","relu");return wt.runKernel("Relu",{x:t})}}),Va=At({relu6_:function(e){const t=Et(e,"x","relu6");return wt.runKernel("Relu6",{x:t})}}),Ga=At({reverse_:function(e,t){const n=Et(e,"x","reverse");return wt.runKernel("Reverse",{x:n},{dims:t})}}),Ha=At({round_:function(e){const t=Et(e,"x","round");return wt.runKernel("Round",{x:t})}}),ja=At({rsqrt_:function(e){const t=Et(e,"x","rsqrt");return wt.runKernel("Rsqrt",{x:t})}});function qa(e,t){if(($(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&$(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Dt(e,[],[],t)}const Ka=At({selu_:function(e){const t=Et(e,"x","selu");return wt.runKernel("Selu",{x:t})}}),Xa=At({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Et(e,"x","separableConv2d"),u=Et(t,"depthwiseFilter","separableConv2d"),c=Et(n,"pointwiseFilter","separableConv2d");let h=o,d=!1;if(3===o.rank&&(d=!0,h=Es(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");l(4===h.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`),l(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),l(4===c.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),l(1===c.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`),l(1===c.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);const p=u.shape[2],f=u.shape[3];l(c.shape[2]===p*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*f}, but got ${c.shape[2]}.`);const g=ir(h,u,s,r,i,a),m=Xs(g,c,1,"valid",i);return d?Es(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Ya=At({sign_:function(e){const t=Et(e,"x","sign");return wt.runKernel("Sign",{x:t})}}),Ja=At({sin_:function(e){const t=Et(e,"x","sin");return wt.runKernel("Sin",{x:t})}}),Za=At({sinh_:function(e){const t=Et(e,"x","sinh");return wt.runKernel("Sinh",{x:t})}}),Qa=At({slice1d_:function(e,t,n){const s=Et(e,"x","slice1d");return l(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),_s(s,[t],[n])}}),ei=At({slice2d_:function(e,t,n){const s=Et(e,"x","slice2d");return l(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),_s(s,t,n)}}),ti=At({slice3d_:function(e,t,n){const s=Et(e,"x","slice3d");return l(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),_s(s,t,n)}}),ni=At({slice4d_:function(e,t,n){const s=Et(e,"x","slice4d");return l(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),_s(s,t,n)}}),si=At({softmax_:function(e,t=-1){const n=Et(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);return wt.runKernel("Softmax",{logits:n},{dim:t})}}),ri=At({fft_:function(e){return l("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),wt.runKernel("FFT",{input:e})}}),ai=At({ifft_:function(e){return l("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),wt.runKernel("IFFT",{input:e})}}),ii=At({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Es(e,[n,t]);s=ai(r)}else{const r=[n,2*(t-1)],a=Es(Pa(e),[n,t]),i=Es(Tr(e),[n,t]),o=Ga(_s(a,[0,1],[n,t-2]),1),l=ss(Ga(_s(i,[0,1],[n,t-2]),1),qa(-1)),u=Fs([a,o],1),c=Fs([i,l],1),h=Es(Ft(u,c),[r[0],r[1]]);s=ai(h)}if(s=Pa(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Es(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),oi=At({split_:function(e,t,n=0){const s=Et(e,"x","split");return wt.runKernel("SplitV",{x:s},{numOrSizeSplits:t,axis:n})}}),li=At({rfft_:function(e,t){l("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,r=_s(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map(e=>e);s[e.shape.length-1]=t-n,r=Fs([e,ua(s)],e.shape.length-1),n=t}else r=e;const a=pr(r),i=Es(Ft(r,a),[s,n]),o=ri(i),u=Math.floor(n/2)+1,c=Pa(o),h=Tr(o),d=oi(c,[u,n-u],c.shape.length-1),p=oi(h,[u,n-u],h.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=u,Es(Ft(d[0],p[0]),f)}}),ui=At({sqrt_:function(e){const t=Et(e,"x","sqrt");return wt.runKernel("Sqrt",{x:t})}}),ci=At({squaredDifference_:function(e,t){let n=Et(e,"a","squaredDifference"),s=Et(t,"b","squaredDifference");return[n,s]=ft(n,s),cr(n.shape,s.shape),wt.runKernel("SquaredDifference",{a:n,b:s},{})}}),hi=At({squeeze_:function(e,t){const n=Et(e,"x","squeeze");return Es(n,k(n.shape,t).newShape)}}),di=At({stack_:function(e,t=0){const n=Rt(e,"tensors","stack","string_or_numeric");return l(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&l(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),wt.runKernel("Pack",n,{axis:t})}}),pi=At({step_:function(e,t=0){const n=Et(e,"x","step");return wt.runKernel("Step",{x:n},{alpha:t})}}),fi=At({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u=Et(e,"x","stridedSlice","string_or_numeric");return wt.runKernel("StridedSlice",{x:u},{begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l})}}),gi=At({tan_:function(e){const t=Et(e,"x","tan");return wt.runKernel("Tan",{x:t})}});function mi(e,t){c(e);const n=Ct(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Dt(e,null,n,t)}function bi(e,t,n){if(c(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Ct(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Dt(e,t,s,n)}const xi=At({topk_:function(e,t=1,n=!0){const s=Et(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=wt.runKernel("TopK",a,i);return{values:o,indices:l}}}),yi=At({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Oa(t,n,s,!0,r),i=dn(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),ki=At({unique_:function(e,t=0){const n=Et(e,"x","unique","string_or_numeric");l(n.rank>0,()=>"The input tensor must be at least 1D");const s={x:n},r={axis:t},[a,i]=wt.runKernel("Unique",s,r);return{values:a,indices:i}}}),wi=At({unsortedSegmentSum_:function(e,t,n){const s=Et(e,"x","unsortedSegmentSum"),r=Et(t,"segmentIds","unsortedSegmentSum","int32");return l(f(n),()=>"numSegments must be of dtype int"),wt.runKernel("UnsortedSegmentSum",{x:s,segmentIds:r},{numSegments:n})}}),vi=At({unstack_:function(e,t=0){const n=Et(e,"x","unstack","string_or_numeric");return l(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),wt.runKernel("Unpack",{value:n},{axis:t})}});function Ii(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=dn(e,"int32"),r=dn([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]);r.values.set(a,t*e.length)}return r.toTensor()}function $i(e,t,n=null){if(0===e.rank)return rs(e);if(1!==e.rank&&null===n)return $i(Es(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Gr(rs(e),n);if(Infinity===t)return Ur(rs(e),n);if(-Infinity===t)return ha(rs(e),n);if("euclidean"===t||2===t)return ui(Gr(va(rs(e),qa(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Ur(Gr(rs(e),n[0]),n[1]-1);if(Infinity===t)return Ur(Gr(rs(e),n[1]),n[0]);if(-Infinity===t)return ha(Gr(rs(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ui(Gr(ga(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Ni=At({norm_:function(e,t="euclidean",n=null,s=!1){const r=$i(e=Et(e,"x","norm"),t,n);let a=r.shape;if(s){const t=y(n,e.shape);a=Xr(r.shape,t)}return Es(r,a)}}),Ci=At({dropout_:function(e,t,n,s){const r=Et(e,"x","dropout");if(l("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),l(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof st?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(p(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)n.push(null==t[s]&&null!=e.shape[s]?e.shape[s]:t[s]);return n}return t}(r,n),i=1-t,o=ns($r(es(za(a,0,1,"float32",s),i)),i);return ss(r,o)}});function Si(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return mi(r,"float32")}const Ti=At({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=Es(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Es(t,[1,t.shape[0],t.shape[1],t.shape[2]])),l(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),l(4===u.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`),l(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);const c="NHWC"===a?o.shape[3]:o.shape[1],h="NHWC"===a?u.shape[3]:u.shape[1];return l(c===n[2],()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`),l(h===n[3],()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`),null!=i&&l(f(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),wt.runKernel("Conv2DBackpropFilter",{x:o,dy:u},{strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n})}});function Ei(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ss(e,pi(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ri(e,t){let n=t;const s=ur(e.shape,t.shape);return s.length>0&&(n=Gr(n,s)),Es(n,e.shape)}function Ai(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Ua(e);if("elu"===t)return mr(e);if("relu6"===t)return Va(e);if("prelu"===t)return Ia(e,n);if("leakyrelu"===t)return Fr(e,s);if("sigmoid"===t)return Ds(e);throw new Error(`Unknown fused activation ${t}.`)}const Fi=(e,t)=>!(e>0)||"linear"===t,Di=At({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===Fi(wt.state.gradientDepth,u=u||"linear")){let l=Xs(e,t,n,s,r,a,i);return null!=o&&(l=es(l,o)),Ai(l,u,c,h)}const d=Et(e,"x","conv2d"),p=Et(t,"filter","conv2d");let g=d,m=!1;3===d.rank&&(m=!0,g=Es(d,[1,d.shape[0],d.shape[1],d.shape[2]])),l(4===g.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${g.rank}.`),l(4===p.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`),null!=i&&l(f(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),l(g.shape[3]===p.shape[2],()=>`Error in conv2d: depth of input (${g.shape[3]}) must match input depth for filter ${p.shape[2]}.`),l(Ss(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),l("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const b=ys(g.shape,p.shape,n,a,s,i);let x,y;null!=o&&(x=Et(o,"bias","fused conv2d"),[x]=ft(x,d),cr(b.outShape,x.shape)),null!=c&&(y=Et(c,"prelu weights","fused conv2d"));const k=(e,t)=>{const[r,i,o,c]=t,h=Ei(e,o,u);l(Cs(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const d=[Js(i.shape,h,r,n,s),Ti(i,h,r.shape,n,s)];if(null!=c){const e=Ri(c,h);d.push(e)}return d},w={x:g,filter:p,bias:x,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:h};return null==o?zr((e,t,n)=>{let s=wt.runKernel("FusedConv2D",w,v);return n([t,e,s]),m&&(s=Es(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:k}})(g,p):zr((e,t,n,s)=>{let r=wt.runKernel("FusedConv2D",w,v);return s([t,e,r,n]),m&&(r=Es(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}})(g,p,x)}}),_i=At({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Es(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;return 3===l.rank&&(l=Es(t,[1,t.shape[0],t.shape[1],t.shape[2]])),wt.runKernel("DepthwiseConv2dNativeBackpropFilter",{x:o,dy:l},{strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n})}}),Oi=At({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Es(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u=wt.runKernel("DepthwiseConv2dNativeBackpropInput",{dy:o,filter:n},{strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e});return l?Es(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Mi=At({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Fi(wt.state.gradientDepth,a)){let l=vn(e,t,n,s);return null!=r&&(l=es(l,r)),Ai(l,a,i,o)}let u=Et(e,"a","fused matMul"),c=Et(t,"b","fused matMul");[u,c]=ft(u,c);const h=n?u.shape[u.rank-2]:u.shape[u.rank-1],f=s?c.shape[c.rank-1]:c.shape[c.rank-2],g=n?u.shape[u.rank-1]:u.shape[u.rank-2],m=s?c.shape[c.rank-2]:c.shape[c.rank-1],b=u.shape.slice(0,-2),x=c.shape.slice(0,-2),y=d(b),k=d(x);l(u.rank>=2&&c.rank>=2&&u.rank===c.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${c.rank}.`),l(p(b,x),()=>`Error in fused matMul: outer dimensions (${b}) and (${x}) of Tensors with shapes ${u.shape} and ${c.shape} must match.`),l(h===f,()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${n} and transposeB=${s} must match.`);const w=u.shape.slice(0,-2).concat([g,m]),v=Es(u,n?[y,h,g]:[y,g,h]),I=Es(c,s?[k,m,f]:[k,f,m]);let $,N;null!=r&&($=Et(r,"bias","fused matMul"),[$]=ft($,u),cr(w,$.shape)),null!=i&&(N=Et(i,"prelu weights","fused matMul"));const C=(e,t)=>{const[i,o,l,u]=t,c=Ei(Es(e,l.shape),l,a);let h,d;return n||s?!n&&s?(h=vn(c,o,!1,!1),d=vn(c,i,!0,!1)):n&&!s?(h=vn(o,c,!1,!0),d=vn(i,c,!1,!1)):(h=vn(o,c,!0,!0),d=vn(c,i,!0,!0)):(h=vn(c,o,!1,!0),d=vn(i,c,!0,!1)),null!=r?[h,d,Ri(u,c)]:[h,d]},S={a:v,b:I,bias:$,preluActivationWeights:N},T={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};return null==r?zr((e,t,n)=>{const s=wt.runKernel("_FusedMatMul",S,T);return n([e,t,s]),{value:Es(s,w),gradFunc:C}})(v,I):zr((e,t,n,s)=>{const r=wt.runKernel("_FusedMatMul",S,T);return s([e,t,r,n]),{value:Es(r,w),gradFunc:C}})(v,I,$)}});At({hammingWindow_:function(e){return Si(e,.54,.46)}});const Li=At({hannWindow_:function(e){return Si(e,.5,.5)}}),zi=At({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(_s(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=Fs([_s(e,a,t-s),Ir([s],r)]);i.push(o),a+=n}return 0===i.length?bi([],[0,t]):Es(Fs(i),[i.length,t])}});At({stft_:function(e,t,n,s,r=Li){null==s&&(s=Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2)))));const a=zi(e,t,n),i=ss(a,r(t));return li(i,s)}});const Bi=At({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Et(e,"image","cropAndResize"),o=Et(t,"boxes","cropAndResize","float32"),u=Et(n,"boxInd","cropAndResize","int32"),c=o.shape[0];return l(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),l(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${o.shape}.`),l(1===u.rank&&u.shape[0]===c,()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${o.shape}.`),l(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),l(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),l("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),wt.runKernel("CropAndResize",{image:i,boxes:o,boxInd:u},{method:r,extrapolationValue:a,cropSize:s})}}),Pi=At({flipLeftRight_:function(e){const t=Et(e,"image","flipLeftRight","float32");return l(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),wt.runKernel("FlipLeftRight",{image:t},{})}}),Wi=At({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Et(e,"image","rotateWithOffset","float32");return l(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),wt.runKernel("RotateWithOffset",{image:r},{radians:t,fillValue:n,center:s})}});function Ui(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),l(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),l(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),l(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),l(1===t.rank,()=>"scores must be a 1D tensor"),l(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),l(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Vi=At({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Et(e,"boxes","nonMaxSuppression"),i=Et(t,"scores","nonMaxSuppression"),o=Ui(a,i,n,s,r);return wt.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold})}});function Gi(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||Hi)}(e,t,n);e.splice(s<0?-(s+1):s,0,t)}function Hi(e,t){return e>t?1:e<t?-1:0}function ji(e,t,n,s,r){return Xi(e,t,n,s,r,0)}function qi(e,t,n,s,r,a){return Xi(e,t,n,s,r,0,!1,a,!0)}function Ki(e,t,n,s,r,a){return Xi(e,t,n,s,r,a,!0)}function Xi(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Zi);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Yi(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Ji(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),d.push(t.score)):t.score>r&&Gi(u,t,Zi))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return i&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function Yi(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(o-a)*(l-i),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(a,u),m=Math.max(i,c),b=Math.min(o,h),x=Math.min(l,d),y=Math.max(b-g,0)*Math.max(x-m,0);return y/(p+f-y)}function Ji(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Zi(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Qi=At({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Et(e,"boxes","nonMaxSuppression"),o=Et(t,"scores","nonMaxSuppression"),l=Ui(i,o,n,s,r,a),u=wt.runKernel("NonMaxSuppressionV5",{boxes:i,scores:o},{maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma});return{selectedIndices:u[0],selectedScores:u[1]}}}),eo=At({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Et(e,"boxes","nonMaxSuppression"),o=Et(t,"scores","nonMaxSuppression"),l=Ui(i,o,n,s,r,null),u=wt.runKernel("NonMaxSuppressionV4",{boxes:i,scores:o},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:u[0],validOutputs:u[1]}}}),to=At({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Et(e,"images","resizeBilinear");l(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),l(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),l(!1===s||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=Es(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o=wt.runKernel("ResizeBilinear",{images:a},{alignCorners:n,halfPixelCenters:s,size:t});return i?Es(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),no=At({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Et(e,"images","resizeNearestNeighbor");l(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),l(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),l("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),l(!1===s||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=Es(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o=wt.runKernel("ResizeNearestNeighbor",{images:a},{alignCorners:n,halfPixelCenters:s,size:t});return i?Es(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),so=At({threshold_:function(e,t="binary",n=!1,s=.5){const r=Et(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,u,c,h=ss(mi([s]),255);if(l(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),l(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),l("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),l("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[i,o,u]=oi(r,[1,1,1],-1);const e=ss(i,.2989),t=ss(o,.587),n=ss(u,.114);c=es(es(e,t),n)}else c=e;"otsu"===t&&(h=function(e,t){let n,s,r,a,i,o,l=mi([-1]),u=mi([0]),c=mi([0]);for(let h=0;h<e.size-1;h++){n=_s(e,0,h+1),s=_s(e,h+1),i=ns(Gr(n),t),o=ns(Gr(s),t);const d=Gr(ss(n,Ba(0,n.size)));r=ns(d,Gr(n));const p=Ir(s.shape,n.size),f=es(Ba(0,s.size),p),g=ss(s,f);a=ns(Gr(g),Gr(s));const m=Vr(r,a),b=Vr(r,a),x=ss(i,o);c=ss(ss(x,m),b);const y=Cr(c,u);u=dr(y,c,u),l=dr(y,mi([h]),l)}return l}(Ws(pn(Ha(c),"int32"),_t([]),256),a));const d=n?_r(c,h):Cr(c,h);return pn(ss(d,255),"int32")}}),ro=At({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Et(e,"image","transform","float32"),o=Et(t,"transforms","transform","float32");return l(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),l(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),l(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`),wt.runKernel("Transform",{image:i,transforms:o},{interpolation:n,fillMode:s,fillValue:r,outputShape:a})}}),ao=At({bandPart_:function(e,t,n){l(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),l(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const s=Et(e,"a","bandPart");l(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Es(Ba(0,a,1,"int32"),[-1,1]),u=Ba(0,i,1,"int32"),c=Vr(o,u),h=ta(_r(c,qa(+t,"int32")),Sr(c,qa(-n,"int32"))),d=ua([a,i],s.dtype);return Es(di(vi(Es(s,[-1,a,i])).map(e=>dr(h,e,d))),r)}}),io=At({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,l(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)l(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=oi(e,e.shape[0],0).map(e=>hi(e,[0]));l(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],s=e;for(let t=0;t<e.length;++t)n.push(wt.tidy(()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=ss(Gr(ss(n[s],e)),n[s]);e=Vr(e,t)}return ns(e,Ni(e,"euclidean"))}));return t?di(n,0):n}});function oo(e,t=!1){return wt.tidy(()=>{l(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],s=e.shape[1];let r=vr(n),a=fn(e);const i=bi([[1]],[1,1]);let o=fn(i);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=a,l=o,u=r;[o,a,r]=wt.tidy(()=>{const t=_s(a,[e,e],[n-e,1]),l=Ni(t),u=_s(a,[e,e],[1,1]),c=dr(Cr(u,0),bi([[-1]]),bi([[1]])),h=Vr(u,ss(c,l)),d=ns(t,h);o=1===d.shape[0]?fn(i):Fs([i,_s(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Br(ns(vn(c,h),l)),f=_s(a,[e,0],[n-e,s]),g=ss(p,o),m=$n(o);if(0===e)a=Vr(f,vn(g,vn(m,f)));else{const t=Vr(f,vn(g,vn(m,f)));a=Fs([_s(a,[0,0],[e,s]),t],0)}const b=$n(g),x=_s(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Vr(x,vn(vn(x,o),b));else{const t=Vr(x,vn(vn(x,o),b));r=Fs([_s(r,[0,0],[n,e]),t],1)}return[o,a,r]}),Jn([t,l,u])}return!t&&n>s&&(r=_s(r,[0,0],[n,s]),a=_s(a,[0,0],[s,s])),[r,a]})}const lo=At({qr_:function(e,t=!1){if(l(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return oo(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),s=vi(Es(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach(e=>{const[n,s]=oo(e,t);r.push(n),a.push(s)}),[Es(di(r,0),e.shape),Es(di(a,0),e.shape)]}}});var uo;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(uo||(uo={}));const co=At({computeWeightedLoss_:function(e,t,n=uo.SUM_BY_NONZERO_WEIGHTS){const s=Et(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Et(t,"weights","computeWeightedLoss"));const a=null==r?s:ss(s,r);if(n===uo.NONE)return a;if(n===uo.SUM)return Gr(a);if(n===uo.MEAN){if(null==r)return la(a);{const e=s.size/r.size,t=ns(Gr(a),Gr(r));return e>1?ns(t,qa(e)):t}}if(n===uo.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ns(Gr(a),qa(s.size));{const e=ss(r,ca(s.shape)),t=pn(Gr(ba(e,qa(0))),"float32");return ns(Gr(a),t)}}throw Error(`Unknown reduction: ${n}`)}});At({absoluteDifference_:function(e,t,n,s=uo.SUM_BY_NONZERO_WEIGHTS){const r=Et(e,"labels","absoluteDifference"),a=Et(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Et(n,"weights","absoluteDifference")),u(r.shape,a.shape,"Error in absoluteDifference: ");const o=rs(Vr(r,a));return co(o,i,s)}}),At({cosineDistance_:function(e,t,n,s,r=uo.SUM_BY_NONZERO_WEIGHTS){const a=Et(e,"labels","cosineDistance"),i=Et(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Et(s,"weights","cosineDistance")),u(a.shape,i.shape,"Error in cosineDistance: ");const l=qa(1),c=Vr(l,Gr(ss(a,i),n,!0));return co(c,o,r)}}),At({hingeLoss_:function(e,t,n,s=uo.SUM_BY_NONZERO_WEIGHTS){let r=Et(e,"labels","hingeLoss");const a=Et(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Et(n,"weights","hingeLoss")),u(r.shape,a.shape,"Error in hingeLoss: ");const o=qa(1);r=Vr(ss(qa(2),r),o);const l=Ua(Vr(o,ss(r,a)));return co(l,i,s)}}),At({huberLoss_:function(e,t,n,s=1,r=uo.SUM_BY_NONZERO_WEIGHTS){const a=Et(e,"labels","huberLoss"),i=Et(t,"predictions","huberLoss");let o=null;null!=n&&(o=Et(n,"weights","huberLoss")),u(a.shape,i.shape,"Error in huberLoss: ");const l=qa(s),c=rs(Vr(i,a)),h=da(c,l),d=Vr(c,h),p=es(ss(qa(.5),ga(h)),ss(l,d));return co(p,o,r)}}),At({logLoss_:function(e,t,n,s=1e-7,r=uo.SUM_BY_NONZERO_WEIGHTS){const a=Et(e,"labels","logLoss"),i=Et(t,"predictions","logLoss");let o=null;null!=n&&(o=Et(n,"weights","logLoss")),u(a.shape,i.shape,"Error in logLoss: ");const l=qa(1),c=qa(s),h=Br(ss(a,Mr(es(i,c)))),d=ss(Vr(l,a),Mr(es(Vr(l,i),c))),p=Vr(h,d);return co(p,o,r)}}),At({meanSquaredError_:function(e,t,n,s=uo.SUM_BY_NONZERO_WEIGHTS){const r=Et(e,"labels","meanSquaredError"),a=Et(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Et(n,"weights","meanSquaredError")),u(r.shape,a.shape,"Error in meanSquaredError: ");const o=ci(r,a);return co(o,i,s)}}),At({sigmoidCrossEntropy_:function(e,t,n,s=0,r=uo.SUM_BY_NONZERO_WEIGHTS){let a=Et(e,"multiClassLabels","sigmoidCrossEntropy");const i=Et(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Et(n,"weights","sigmoidCrossEntropy")),u(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=qa(s),t=qa(1),n=qa(.5);a=es(ss(a,Vr(t,e)),ss(n,e))}const l=function(e,t){const n=Et(e,"labels","sigmoidCrossEntropyWithLogits"),s=Et(t,"logits","sigmoidCrossEntropyWithLogits");u(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Ua(s),a=ss(s,n),i=Lr(xr(Br(rs(s))));return es(Vr(r,a),i)}(a,i);return co(l,o,r)}}),At({softmaxCrossEntropy_:function(e,t,n,s=0,r=uo.SUM_BY_NONZERO_WEIGHTS){let a=Et(e,"onehotLabels","softmaxCrossEntropy");const i=Et(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Et(n,"weights","softmaxCrossEntropy")),u(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=qa(s),t=qa(1),n=qa(a.shape[1]);a=es(ss(a,Vr(t,e)),ns(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return zr((e,t,s)=>{const r=ea(t,[n],!0),a=Vr(pn(t,"float32"),r);s([e,a]);const i=Br(ss(a,e));return{value:Gr(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Xr(e.shape,[n]);return[ss(Es(e,a),Vr(pn(s,"float32"),xr(r))),ss(Es(e,a),Vr(xr(r),pn(s,"float32")))]}}})(e,t)}(a,i);return co(l,o,r)}}),At({sparseFillEmptyRows_:function(e,t,n,s){const r=Et(e,"indices","sparseFillEmptyRows"),a=Et(t,"values","sparseFillEmptyRows"),i=Et(n,"denseShape","sparseFillEmptyRows"),o=Et(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l=wt.runKernel("SparseFillEmptyRows",{indices:r,values:a,denseShape:i,defaultValue:o});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),At({sparseReshape_:function(e,t,n){const s=Et(e,"inputIndices","sparseReshape"),r=Et(t,"inputShape","sparseReshape"),a=Et(n,"newShape","sparseReshape");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i=wt.runKernel("SparseReshape",{inputIndices:s,inputShape:r,newShape:a});return{outputIndices:i[0],outputShape:i[1]}}}),At({sparseSegmentMean_:function(e,t,n){const s=Et(e,"data","sparseSegmentMean"),r=Et(t,"indices","sparseSegmentMean"),a=Et(n,"segmentIds","sparseSegmentMean");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);return wt.runKernel("SparseSegmentMean",{data:s,indices:r,segmentIds:a})}}),At({sparseSegmentSum_:function(e,t,n){const s=Et(e,"data","sparseSegmentSum"),r=Et(t,"indices","sparseSegmentSum"),a=Et(n,"segmentIds","sparseSegmentSum");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);return wt.runKernel("SparseSegmentSum",{data:s,indices:r,segmentIds:a})}}),At({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Et(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Et(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c=wt.runKernel("StringNGrams",{data:l,dataSplits:u},{separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o});return{nGrams:c[0],nGramsSplits:c[1]}}}),At({stringSplit_:function(e,t,n=!0){const s=Et(e,"input","stringSplit","string"),r=Et(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a=wt.runKernel("StringSplit",{input:s,delimiter:r},{skipEmpty:n});return{indices:a[0],values:a[1],shape:a[2]}}}),At({stringToHashBucketFast_:function(e,t){const n=Et(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return wt.runKernel("StringToHashBucketFast",{input:n},s)}});const ho={flipLeftRight:Pi,resizeNearestNeighbor:no,resizeBilinear:to,rotateWithOffset:Wi,cropAndResize:Bi,nonMaxSuppression:Vi,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Et(e,"boxes","nonMaxSuppressionAsync"),i=Et(t,"scores","nonMaxSuppressionAsync"),o=Ui(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=ji(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),mi(h,"int32")},nonMaxSuppressionWithScore:Qi,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Et(e,"boxes","nonMaxSuppressionAsync"),o=Et(t,"scores","nonMaxSuppressionAsync"),l=Ui(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Ki(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:mi(d,"int32"),selectedScores:mi(p)}},nonMaxSuppressionPadded:eo,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Et(e,"boxes","nonMaxSuppressionAsync"),o=Et(t,"scores","nonMaxSuppressionAsync"),l=Ui(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:g}=qi(d,p,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:mi(f,"int32"),validOutputs:qa(g,"int32")}},threshold:so,transform:ro},po={bandPart:ao,gramSchmidt:io,qr:lo};class fo extends Hn{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:r[e.name]}));this.applyGradients(e)}else this.applyGradients(r);return Jn(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){l(E(e),()=>"The f passed in variableGrads(f) must be a function"),l(null==t||Array.isArray(t)&&t.every(e=>e instanceof at),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in wt.registeredVariables)t.push(wt.registeredVariables[e])}const s=n?t.filter(e=>!e.trainable):null,r=t.length;l((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=wt.gradients(e,t,null,!0);l(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),l(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=s&&s.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Jn(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:qa(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(fo,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class go extends fo{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=wt.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=wt.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Yn(()=>pr(s).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Yn(()=>pr(s).variable(!1))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Yn(()=>{const e=es(ss(a,this.rho),ss(ga(r),1-this.rho)),t=ss(ns(ui(es(i,this.epsilon)),ui(es(a,this.epsilon))),r),n=es(ss(i,this.rho),ss(ga(t),1-this.rho));a.assign(e),i.assign(n);const o=es(ss(t,-this.learningRate),s);s.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Jn(this.accumulatedGrads.map(e=>e.variable)),Jn(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}go.className="Adadelta",qn(go);class mo extends fo{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=wt.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Yn(()=>Ir(s.shape,this.initialAccumulatorValue).variable(e))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;Yn(()=>{const e=es(a,ga(r));a.assign(e);const t=es(ss(ns(r,ui(es(e,wt.backend.epsilon()))),-this.learningRate),s);s.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Jn(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}mo.className="Adagrad",qn(mo);class bo extends fo{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Yn(()=>{this.accBeta1=qa(t).variable(),this.accBeta2=qa(n).variable()}),null==s&&(this.epsilon=wt.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Yn(()=>{const n=Vr(1,this.accBeta1),s=Vr(1,this.accBeta2);t.forEach((t,r)=>{const a=wt.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Yn(()=>pr(a).variable(!1))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:Yn(()=>pr(a).variable(!1))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=es(ss(o,this.beta1),ss(i,1-this.beta1)),c=es(ss(l,this.beta2),ss(ga(i),1-this.beta2)),h=ns(u,n),d=ns(c,s);o.assign(u),l.assign(c);const p=es(ss(ns(h,es(ui(d),this.epsilon)),-this.learningRate),a);a.assign(p)}),this.accBeta1.assign(ss(this.accBeta1,this.beta1)),this.accBeta2.assign(ss(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Jn(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&Jn(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),Yn(()=>{this.accBeta1.assign(va(this.beta1,this.iterations_+1)),this.accBeta2.assign(va(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}bo.className="Adam",qn(bo);class xo extends fo{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Yn(()=>{this.iteration=qa(0).variable(),this.accBeta1=qa(t).variable()}),null==s&&(this.epsilon=wt.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Yn(()=>{const n=Vr(1,this.accBeta1),s=ns(-this.learningRate,es(ss(this.iteration,this.decay),1));t.forEach((t,r)=>{const a=wt.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:pr(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:pr(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=es(ss(o,this.beta1),ss(i,1-this.beta1)),c=ss(l,this.beta2),h=rs(i),d=oa(c,h);o.assign(u),l.assign(d);const p=es(ss(ns(s,n),ns(u,es(d,this.epsilon))),a);a.assign(p)}),this.iteration.assign(es(this.iteration,1)),this.accBeta1.assign(ss(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Jn(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&Jn(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}xo.className="Adamax",qn(xo);class yo extends fo{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=wt.registeredVariables[t];Yn(()=>{const e=es(ss(this.c,s),r);r.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Zn(qa(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}yo.className="SGD",qn(yo);class ko extends yo{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=qa(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=wt.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Yn(()=>pr(s).variable(e))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Yn(()=>{let e;const t=es(ss(this.m,r),a);e=es(ss(this.c,this.useNesterov?es(a,ss(t,this.m)):t),s),r.assign(t),s.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Jn(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}ko.className="Momentum",qn(ko);class wo extends fo{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=wt.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=wt.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Yn(()=>pr(s).variable(r))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Yn(()=>pr(s).variable(r))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Yn(()=>pr(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Yn(()=>{const e=es(ss(i,this.decay),ss(ga(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=es(ss(t,this.decay),ss(a,1-this.decay)),l=ns(ss(a,this.learningRate),ui(Vr(e,es(ga(r),this.epsilon)))),u=es(ss(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Vr(s,u);s.assign(c)}else{const e=es(ss(i,this.decay),ss(ga(a),1-this.decay)),t=es(ss(o,this.momentum),ns(ss(a,this.learningRate),ui(es(e,this.epsilon))));i.assign(e),o.assign(t);const n=Vr(s,t);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Jn(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Jn(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&Jn(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}wo.className="RMSProp",qn(wo);class vo{static sgd(e){return new yo(e)}static momentum(e,t,n=!1){return new ko(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new wo(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new bo(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new go(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new xo(e,t,n,s,r)}static adagrad(e,t=.1){return new mo(e,t)}}const Io={sgd:vo.sgd,momentum:vo.momentum,adadelta:vo.adadelta,adagrad:vo.adagrad,rmsprop:vo.rmsprop,adamax:vo.adamax,adam:vo.adam},$o="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function No(){return new Promise(e=>$o(()=>e()))}function Co(e,t){const n=e[0].length;e.forEach((e,t)=>{l(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),l(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=e[0];e.forEach((e,r)=>{for(let a=0;a<n;a++)l(a===t||e[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function So(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}function To(e){return e<=30?e:R(e,Math.floor(Math.sqrt(e)))}function Eo(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Ro(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Ao(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Fo(e,t,n,s=!0){const r=[];r.push(s?e[0]/n:e[0]*n);for(let n=1;n<e.length;++n)r.push(n<=t.length?s?t[n-1]*e[n]:e[n]/t[n-1]:e[n]);return r}function Do(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function _o(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function Oo(...e){V().getBool("IS_TEST")||console.warn(...e)}function Mo(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Lo(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function zo(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Bo(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Po(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Wo(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Uo(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Vo(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Go=/->/g;function Ho(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Go,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split("->");l(-1===s.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some(e=>-1!==e.indexOf(t)))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(o.indexOf(a[e][t]))}const c=o.length,h=[];for(let e=r.length;e<c;++e)h.push(e);return{allDims:o,summedDims:h,idDims:u}}function jo(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:s}}function qo(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:l(s[t[e][n]]===r[n],()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`)}}function Ko(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Yo(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Xo(e){return e.every((e,t)=>e===t)}function Yo(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Jo(e,t,n=0){let s=[];if("number"==typeof t)l(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(e.shape[n]/t);else{l(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const r=t.indexOf(-1);if(-1!==r){const s=t.reduce((e,t)=>t>0?e+t:e);t[r]=e.shape[n]-s}l(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function Zo(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=R(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=R(e,n+1);return n}function Qo(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)s.push(a!==t?e[a]:n);return s}function el(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function tl(e){try{return e.map(e=>He(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function nl(e){return e.map(e=>Ge(e))}var sl={__proto__:null,slice_util:Gn,segment_util:{__proto__:null,segOpComputeOptimalWindowSize:Zo,computeOutShape:Qo,collectGatherOpShapeInfo:el},fromUint8ToStringArray:tl,fromStringArrayToUint8:nl,upcastType:dt,axesAreInnerMostDims:jr,combineLocations:qr,computeOutAndReduceShapes:Kr,expandShapeToKeepDim:Xr,assertAxesAreInnerMostDims:Yr,getAxesPermutation:Jr,getUndoAxesPermutation:Zr,getInnerMostAxes:Qr,getBroadcastDims:lr,getReductionAxes:ur,assertAndGetBroadcastShape:cr,assertParamsConsistent:Co,computeOutShape:So,computeDilation2DInfo:ms,computePool2DInfo:bs,computePool3DInfo:xs,computeConv2DInfo:ys,computeConv3DInfo:ks,computeDefaultPad:ws,tupleValuesAreOne:Cs,eitherStridesOrDilationsAreOne:Ss,convertConv2DDataFormat:Ts,getFusedDyActivation:Ei,getFusedBiasGradient:Ri,applyActivation:Ai,shouldFuse:Fi,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:To,getImageCenter:Eo,getReshaped:Ro,getPermuted:Ao,getReshapedPermuted:Fo,getSliceBeginCoords:Do,getSliceSize:_o,prepareAndValidate:Nn,validateUpdateShape:Cn,validateInput:function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Cn(n,t,e)},calculateShapes:Sn,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Oo,log:function(...e){V().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:Mo,splitRealAndImagArrays:Lo,complexWithEvenIndex:zo,complexWithOddIndex:Bo,getComplexWithIndex:Po,assignToTypedArray:Wo,exponents:Uo,exponent:Vo,decodeEinsumEquation:Ho,getEinsumPermutation:jo,checkEinsumDimSizes:qo,getEinsumComputePath:Ko,isIdentityPermutation:Xo,prepareSplitSize:Jo};const rl={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,pi(pn(n,"float32"),-1))}}},al={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ga(pn(n,"float32")),s=ui(Vr(qa(1),t));return Br(ns(e,s))}}}},il={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ui(Vr(ga(pn(n,"float32")),1));return ns(e,t)}}}},ol={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{let t=e;const s=ur(n.shape,r);return s.length>0&&(t=Gr(t,s)),Es(t,n.shape)},b:()=>{let t=e;const n=ur(s.shape,r);return n.length>0&&(t=Gr(t,n)),Es(t,s.shape)}}}},ll={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pr(n)}}},ul={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pr(n)}}},cl={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,ui(Vr(qa(1),ga(pn(n,"float32")))))}}},hl={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ui(es(qa(1),ga(pn(n,"float32"))));return ns(e,t)}}}},dl={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{const t=es(ga(n),ga(s));let a=ss(e,ns(s,t));const i=ur(n.shape,r);return i.length>0&&(a=Gr(a,i)),Es(a,n.shape)},b:()=>{const t=es(ga(n),ga(s));let a=Br(ss(e,ns(n,t)));const i=ur(s.shape,r);return i.length>0&&(a=Gr(a,i)),Es(a,s.shape)}}}},pl={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,es(ga(pn(n,"float32")),1))}}},fl={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,Vr(qa(1),ga(pn(n,"float32"))))}}},gl=At({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Et(e,"dy","avgPool3dGrad"),o=Et(t,"input","avgPool3dGrad");let u=i,c=o,h=!1;4===o.rank&&(h=!0,u=Es(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=Es(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),l(5===u.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`),l(5===c.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`),null!=a&&l(f(r),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`);const d=wt.runKernel("AvgPool3DGrad",{dy:u,input:c},{filterSize:n,strides:s,pad:r,dimRoundingMode:a});return h?Es(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ml={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>gl(e,s,r,a,i,o)}}},bl=At({avgPoolGrad_:function(e,t,n,s,r){const a=Et(e,"dy","avgPoolGrad"),i=Et(t,"input","avgPoolGrad");l(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,c=!1;3===i.rank&&(c=!0,o=Es(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Es(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===u.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`),l(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);const h=wt.runKernel("AvgPoolGrad",{dy:u,input:o},{filterSize:n,strides:s,pad:r});return c?Es(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),xl={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>bl(e,s,r,a,i)}}},yl={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>vn(e,r,!1,!1),b:()=>vn(e,s,!0,!1)}:a&&!i?{a:()=>vn(r,e,!1,!0),b:()=>vn(s,e,!1,!1)}:{a:()=>vn(r,e,!0,!0),b:()=>vn(e,s,!0,!0)}:{a:()=>vn(e,r,!1,!0),b:()=>vn(s,e,!0,!1)}}},kl={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>ka(e,s,r)}}},wl={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n.inputShape,r=n.shape,a=Array.from(r);for(let e=s.length-1;e>=0;e--)if(s[e]===r[e])a[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${r}].`);const i=[];for(let e=0;e<a.length;e++)a[e]>1&&i.push(e);return{x:()=>Gr(e,i,!0)}}},vl={kernelName:"Ceil",gradFunc:e=>({x:()=>pr(e)})},Il={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>dr(ta(Sr(s,r),_r(s,a)),e,pr(e))}}},$l={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:rl.gradFunc},Nl={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map(e=>e.shape),{axis:r}=n,a=y(r,t[0].shape)[0],i=s.map(e=>e[a]);return oi(e,i,a).map(e=>()=>e)}},Cl={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return l(Cs(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Js(s.shape,e,r,i,o,u),filter:()=>Ti(s,e,r.shape,i,o,u)}}},Sl={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Xs(e,r,a,i,o,1,l),filter:()=>Ti(e,s,r.shape,a,i,o,l)}}},Tl=At({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Es(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;return 4===i.rank&&(i=Es(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),l(5===a.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),l(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),l(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),l(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),l(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`),wt.runKernel("Conv3DBackpropFilterV2",{x:a,dy:i},{strides:s,pad:r,filterShape:n})}}),El={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;l(Cs(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=t;return{x:()=>er(i.shape,e,o,r,a),filter:()=>Tl(i,e,o.shape,r,a)}}},Rl={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(Br(Ja(pn(n,"float32"))),e)}}},Al={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(Za(pn(n,"float32")),e)}}},Fl={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Jr([r],s.rank);let n=rr(e,r,a,!i);return null!=t&&(n=$n(n,t)),n}}}},Dl={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;l(Cs(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,c]=t;return l(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),l(4===c.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`),l(u.shape[3]===c.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`),l(Ss(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),null!=i&&l(f(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),{x:()=>Oi(u.shape,e,c,r,a,s,i),filter:()=>_i(u,e,c.shape,r,a,s,i)}}},_l={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>wt.runKernel("Dilation2DBackpropInput",a,n),filter:()=>wt.runKernel("Dilation2DBackpropFilter",i,n)}}},Ol={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>wt.runKernel("EluGrad",s)}}},Ml={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=ss(xr(Br(ga(n))),2/Math.sqrt(Math.PI));return{x:()=>ss(e,s)}}},Ll={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,n)}}},zl={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Es(e,n.shape)}}},Bl={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,xr(n))}}},Pl={kernelName:"Floor",gradFunc:e=>({x:()=>pr(e)})},Wl={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{const t=ns(e,pn(s,"float32")),a=ur(n.shape,r);return a.length>0?Es(Gr(t,a),n.shape):t},b:()=>{let t=ss(e,pn(n,"float32"));const a=ur(s.shape,r);a.length>0&&(t=Es(Gr(t,a),s.shape));const i=ga(s);return Br(ns(t,pn(i,"float32")))}}}},Ul={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?qa(1):o,u=ur(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Vr(r,a),d=ss(e,l),p=ja(es(i,qa(s))),f=ss(ss(ss(p,p),p),qa(-.5));return{x:()=>Es(ss(ss(e,1===a.rank?wr(Es(p,[1,1,1,a.shape[0]]),c):p),l),r.shape),mean:()=>{let e=ss(ss(p,qa(-1)),d);return 1===a.rank&&(e=Gr(e,u)),Es(e,a.shape)},variance:()=>{let e=ss(ss(f,h),d);return 1===a.rank&&(e=Gr(e,u)),Es(e,a.shape)},scale:()=>{const t=ss(h,p);let n=ss(e,t);return 1===a.rank&&(n=Gr(n,u)),Es(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Gr(t,u)),Es(t,a.shape)}}}},Vl={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=y(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Gl(0,l),d=Gl(l+1,l+1+c),p=Hl([o,[n],u]),f=Es(e,p),g=Es(r,[n]),m=Hl([[l],h,d]),b=$n(f,m);let x=wi(b,g,s.shape[i]);const y=Zr(m);return x=$n(x,y),x},indices:()=>r}}};function Gl(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Hl(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const jl={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>pr(n),b:()=>pr(s)}}},ql={kernelName:"Identity",gradFunc:e=>({x:()=>pn(e,"float32")})},Kl={kernelName:"IsFinite",gradFunc:e=>({x:()=>pr(e)})},Xl={kernelName:"IsInf",gradFunc:e=>({x:()=>pr(e)})},Yl={kernelName:"IsNan",gradFunc:e=>({x:()=>pr(e)})},Jl={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Cr(s,0);return{x:()=>dr(a,e,ss(e,r))}}},Zl={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,es(n,1))}}},Ql={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,pn(n,"float32"))}}},eu={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=xr(s);return Vr(e,ss(Gr(e,r,!0),t))}}}},tu=At({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){return wt.runKernel("LRNGrad",{x:e,y:t,dy:n},{depthRadius:s,bias:r,alpha:a,beta:i})}}),nu={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>tu(s,r,e,a,i,o,l)}}};function su(e,t,n,s){return t.rank<n.rank&&(t=Es(t,Xr(t.shape,s))),e.rank<n.rank&&(e=Es(e,Xr(e.shape,s))),{x:()=>ss(e,pn(hr(n,t),e.dtype))}}const ru={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=su(e,t[1],a,y(r,a.shape));return{x:()=>i.x()}}},au={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>ss(e,pn(Sr(n,s),"float32")),b:()=>ss(e,pn(Dr(n,s),"float32"))}}},iu=At({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Et(e,"dy","maxPool3dGrad"),u=Et(t,"input","maxPool3dGrad"),c=Et(n,"output","maxPool3dGrad");let h=o,d=u,p=c,g=!1;4===u.rank&&(g=!0,h=Es(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),d=Es(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=Es(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),l(5===h.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`),l(5===d.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`),l(5===p.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`),null!=i&&l(f(a),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const m=wt.runKernel("MaxPool3DGrad",{dy:h,input:d,output:p},{filterSize:s,strides:r,pad:a,dimRoundingMode:i});return g?Es(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),ou={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>iu(e,s,r,a,i,o,l)}}},lu=At({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Et(e,"dy","maxPoolGrad"),u=Et(t,"input","maxPoolGrad"),c=Et(n,"output","maxPoolGrad");return l(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),l(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),l(4===u.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`),null!=i&&l(f(a),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),wt.runKernel("MaxPoolGrad",{dy:o,input:u,output:c},{filterSize:s,strides:r,pad:a,dimRoundingMode:i})}}),uu={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>_s(e,a,s.shape)}}},cu={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Ms(e,s,r)}}},hu={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Fs(e,s)}}},du=[rl,al,il,ol,{kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,s)=>{n[s]=()=>e.clone()}),n}},ll,ul,cl,hl,dl,pl,fl,ml,xl,yl,kl,wl,{kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},vl,Il,$l,Nl,Sl,Cl,El,Rl,Al,Fl,Dl,_l,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{const t=ns(e,pn(s,"float32")),a=ur(n.shape,r);return a.length>0?Es(Gr(t,a),n.shape):t},b:()=>{let t=ss(e,pn(n,"float32"));const a=ur(s.shape,r);a.length>0&&(t=Es(Gr(t,a),s.shape));const i=ga(s);return Br(ns(t,pn(i,"float32")))}}}},Ol,Ml,Ll,zl,Bl,Wl,Pl,Ul,Vl,jl,ql,Kl,Xl,Yl,Jl,Zl,Ql,eu,nu,ru,ru,au,ou,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>lu(e,s,r,a,i,o)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=y(r,s.shape),i=d(Kr(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach(e=>{t[e]=1});const n=Es(e,t);return ns(ss(n,ca(s.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=su(e,i,a,y(r,a.shape));return{x:()=>o.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>ss(e,pn(_r(n,s),"float32")),b:()=>ss(e,pn(Cr(n,s),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>_s(e,a,s.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{const t=ur(n.shape,r);return t.length>0?Es(Gr(e,t),n.shape):e},b:()=>{const t=ss(e,Br($r(ns(n,s)))),a=ur(s.shape,r);return a.length>0?Es(Gr(t,a),s.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{const t=ss(e,pn(s,"float32")),a=ur(n.shape,r);return a.length>0?Es(Gr(t,a),n.shape):t},b:()=>{const t=ss(e,pn(n,"float32")),a=ur(s.shape,r);return a.length>0?Es(Gr(t,a),s.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>Br(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>ua(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>pr(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return vi(e,s).map(e=>()=>e)}},uu,uu,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=cr(a.shape,i.shape);return{a:()=>{const t=pn(i,"float32");let n=ss(e,ss(t,va(a,Vr(t,qa(1)))));const s=ur(a.shape,o);return s.length>0&&(n=Gr(n,s)),Es(n,a.shape)},b:()=>{const t=Cr(a,0),n=dr(t,Mr(a),pr(a));let s=ss(e,ss(r,n));const l=ur(i.shape,o);return l.length>0&&(s=Gr(s,l)),Es(s,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Cr(n,0);return{x:()=>dr(r,e,ss(e,s)),alpha:()=>{let t=dr(r,pr(e),ss(e,n));const a=ur(s.shape,e.shape);return a.length>0&&(t=Gr(t,a)),Es(t,s.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,Br(ga(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=ss(_r(n,6),pi(n));return{x:()=>ss(e,pn(s,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,pn(pi(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Es(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>wt.runKernel("ResizeBilinearGrad",r,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>wt.runKernel("ResizeNearestNeighborGrad",r,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:s}=n,r=y(s,e.shape);return{x:()=>Ga(e,r)}}},{kernelName:"Round",gradFunc:e=>({x:()=>pr(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Br(ns(e,ss(va(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>pn(pr(n),"float32"),t:()=>ss(e,pn(n,e.dtype)),e:()=>ss(e,pn(na(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Cr(n,qa(0)),s=qa(1.7580993408473768),r=qa(1.0507009873554805),a=ss(e,r),i=ss(ss(e,s),xr(pn(n,"float32")));return dr(t,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,ss(n,Vr(qa(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>pr(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(nr(pn(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(sr(pn(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Un(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>ya(e,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=ss(e,s);return{logits:()=>Vr(a,ss(Gr(a,[r],!0),s))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,Ds(n))}}},cu,cu,hu,hu,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,ss(ui(pn(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=qa(2);return{a:()=>ss(e,ss(r,Vr(n,s))),b:()=>ss(e,ss(r,Vr(s,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(e,ss(pn(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>pr(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=cr(n.shape,s.shape);return{a:()=>{let t=e;const s=ur(n.shape,r);return s.length>0&&(t=Gr(t,s)),Es(t,n.shape)},b:()=>{let t=e;const n=ur(s.shape,r);return n.length>0&&(t=Gr(t,n)),Es(Br(t),s.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;y(a,s.shape).forEach(e=>{r[e]=1});const i=Es(e,r),o=ss(i,ca(s.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ns(e,ga(nr(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ss(Vr(qa(1),ga(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=pr(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=es(t,_s(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=es(t,_s(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=es(t,_s(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=es(t,_s(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Zr(r);return{x:()=>$n(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>di(e,r)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=oa(t,pr(t)),s=Nr(e,n);let r=Sr(t,qa(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=yr(r,e+1);r=ta(r,ca(s.shape,"bool"));const i=pr(s);return dr(r,s,i)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>pr(e)})}];for(const e of du)ee(e);let pu;function fu(){return null==pu&&(pu=wt.backend.epsilon()),pu}rt().prototype.abs=function(){return this.throwIfDisposed(),rs(this)},rt().prototype.acos=function(){return this.throwIfDisposed(),as(this)},rt().prototype.acosh=function(){return this.throwIfDisposed(),is(this)},rt().prototype.add=function(e){return this.throwIfDisposed(),es(this,e)},rt().prototype.all=function(e,t){return this.throwIfDisposed(),os(this,e,t)},rt().prototype.any=function(e,t){return this.throwIfDisposed(),ls(this,e,t)},rt().prototype.argMax=function(e){return this.throwIfDisposed(),us(this,e)},rt().prototype.argMin=function(e){return this.throwIfDisposed(),cs(this,e)},rt().prototype.asScalar=function(){return this.throwIfDisposed(),l(1===this.size,()=>"The array must have only 1 element."),Es(this,[])},rt().prototype.asType=function(e){return this.throwIfDisposed(),pn(this,e)},rt().prototype.as1D=function(){return this.throwIfDisposed(),Es(this,[this.size])},rt().prototype.as2D=function(e,t){return this.throwIfDisposed(),Es(this,[e,t])},rt().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Es(this,[e,t,n])},rt().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Es(this,[e,t,n,s])},rt().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Es(this,[e,t,n,s,r])},rt().prototype.asin=function(){return this.throwIfDisposed(),hs(this)},rt().prototype.asinh=function(){return this.throwIfDisposed(),ds(this)},rt().prototype.atan=function(){return this.throwIfDisposed(),ps(this)},rt().prototype.atan2=function(e){return this.throwIfDisposed(),fs(this,e)},rt().prototype.atanh=function(){return this.throwIfDisposed(),gs(this)},rt().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Rs(this,e,t,n,s)},rt().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Ms(this,e,t)},rt().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Ls(this,e,t,n,s,r)},rt().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Us(this,e)},rt().prototype.cast=function(e){return this.throwIfDisposed(),pn(this,e)},rt().prototype.ceil=function(){return this.throwIfDisposed(),Vs(this)},rt().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Gs(this,e,t)},rt().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof st&&(e=[e]),Fs([this,...e],t)},rt().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ys(this,e,t,n,s,r,a)},rt().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Zs(this,e,t,n,s,r)},rt().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Xs(this,e,t,n,s,r,a)},rt().prototype.cos=function(){return this.throwIfDisposed(),nr(this)},rt().prototype.cosh=function(){return this.throwIfDisposed(),sr(this)},rt().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),rr(this,e,t,n)},rt().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),ar(this,e,t)},rt().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),ir(this,e,t,n,s,r,a)},rt().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),or(this,e,t,n,s,r)},rt().prototype.divNoNan=function(e){return this.throwIfDisposed(),fr(this,e)},rt().prototype.div=function(e){return this.throwIfDisposed(),ns(this,e)},rt().prototype.dot=function(e){return this.throwIfDisposed(),gr(this,e)},rt().prototype.elu=function(){return this.throwIfDisposed(),mr(this)},rt().prototype.equal=function(e){return this.throwIfDisposed(),hr(this,e)},rt().prototype.erf=function(){return this.throwIfDisposed(),br(this)},rt().prototype.exp=function(){return this.throwIfDisposed(),xr(this)},rt().prototype.expandDims=function(e){return this.throwIfDisposed(),yr(this,e)},rt().prototype.expm1=function(){return this.throwIfDisposed(),kr(this)},rt().prototype.fft=function(){return this.throwIfDisposed(),ri(this)},rt().prototype.flatten=function(){return this.throwIfDisposed(),Es(this,[this.size])},rt().prototype.floor=function(){return this.throwIfDisposed(),$r(this)},rt().prototype.floorDiv=function(e){return this.throwIfDisposed(),ts(this,e)},rt().prototype.gather=function(e,t){return this.throwIfDisposed(),Nr(this,e,t)},rt().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Sr(this,e)},rt().prototype.greater=function(e){return this.throwIfDisposed(),Cr(this,e)},rt().prototype.ifft=function(){return this.throwIfDisposed(),ai(this)},rt().prototype.irfft=function(){return this.throwIfDisposed(),ii(this)},rt().prototype.isFinite=function(){return this.throwIfDisposed(),Er(this)},rt().prototype.isInf=function(){return this.throwIfDisposed(),Rr(this)},rt().prototype.isNaN=function(){return this.throwIfDisposed(),Ar(this)},rt().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Fr(this,e)},rt().prototype.lessEqual=function(e){return this.throwIfDisposed(),_r(this,e)},rt().prototype.less=function(e){return this.throwIfDisposed(),Dr(this,e)},rt().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Or(this,e,t,n,s)},rt().prototype.logSigmoid=function(){return this.throwIfDisposed(),Wr(this)},rt().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Hr(this,e)},rt().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),ea(this,e,t)},rt().prototype.log=function(){return this.throwIfDisposed(),Mr(this)},rt().prototype.log1p=function(){return this.throwIfDisposed(),Lr(this)},rt().prototype.logicalAnd=function(e){return this.throwIfDisposed(),ta(this,e)},rt().prototype.logicalNot=function(){return this.throwIfDisposed(),na(this)},rt().prototype.logicalOr=function(e){return this.throwIfDisposed(),sa(this,e)},rt().prototype.logicalXor=function(e){return this.throwIfDisposed(),ra(this,e)},rt().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),vn(this,e,t,n)},rt().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),aa(this,e,t,n,s)},rt().prototype.max=function(e,t){return this.throwIfDisposed(),Ur(this,e,t)},rt().prototype.maximum=function(e){return this.throwIfDisposed(),oa(this,e)},rt().prototype.mean=function(e,t){return this.throwIfDisposed(),la(this,e,t)},rt().prototype.min=function(e,t){return this.throwIfDisposed(),ha(this,e,t)},rt().prototype.minimum=function(e){return this.throwIfDisposed(),da(this,e)},rt().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),pa(this,e,t)},rt().prototype.mod=function(e){return this.throwIfDisposed(),fa(this,e)},rt().prototype.mul=function(e){return this.throwIfDisposed(),ss(this,e)},rt().prototype.neg=function(){return this.throwIfDisposed(),Br(this)},rt().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Ni(this,e,t,n)},rt().prototype.notEqual=function(e){return this.throwIfDisposed(),ba(this,e)},rt().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),In(this,e,t,n)},rt().prototype.onesLike=function(){return this.throwIfDisposed(),xa(this)},rt().prototype.pad=function(e,t){return this.throwIfDisposed(),ya(this,e,t)},rt().prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),wa(this,e,t,n,s,r)},rt().prototype.pow=function(e){return this.throwIfDisposed(),va(this,e)},rt().prototype.prelu=function(e){return this.throwIfDisposed(),Ia(this,e)},rt().prototype.prod=function(e,t){return this.throwIfDisposed(),$a(this,e,t)},rt().prototype.reciprocal=function(){return this.throwIfDisposed(),Wa(this)},rt().prototype.relu=function(){return this.throwIfDisposed(),Ua(this)},rt().prototype.relu6=function(){return this.throwIfDisposed(),Va(this)},rt().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Es(this,e.shape)},rt().prototype.reshape=function(e){return this.throwIfDisposed(),Es(this,e)},rt().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),to(this,e,t,n)},rt().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),no(this,e,t,n)},rt().prototype.reverse=function(e){return this.throwIfDisposed(),Ga(this,e)},rt().prototype.rfft=function(){return this.throwIfDisposed(),li(this)},rt().prototype.round=function(){return this.throwIfDisposed(),Ha(this)},rt().prototype.rsqrt=function(){return this.throwIfDisposed(),ja(this)},rt().prototype.selu=function(){return this.throwIfDisposed(),Ka(this)},rt().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Xa(this,e,t,n,s,r,a)},rt().prototype.sigmoid=function(){return this.throwIfDisposed(),Ds(this)},rt().prototype.sign=function(){return this.throwIfDisposed(),Ya(this)},rt().prototype.sin=function(){return this.throwIfDisposed(),Ja(this)},rt().prototype.sinh=function(){return this.throwIfDisposed(),Za(this)},rt().prototype.slice=function(e,t){return this.throwIfDisposed(),_s(this,e,t)},rt().prototype.softmax=function(e){return this.throwIfDisposed(),si(this,e)},rt().prototype.softplus=function(){return this.throwIfDisposed(),Pr(this)},rt().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),ka(this,e,t)},rt().prototype.split=function(e,t){return this.throwIfDisposed(),oi(this,e,t)},rt().prototype.sqrt=function(){return this.throwIfDisposed(),ui(this)},rt().prototype.square=function(){return this.throwIfDisposed(),ga(this)},rt().prototype.squaredDifference=function(e){return this.throwIfDisposed(),ci(this,e)},rt().prototype.squeeze=function(e){return this.throwIfDisposed(),hi(this,e)},rt().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof st?[this,e]:[this,...e];return di(n,t)},rt().prototype.step=function(e){return this.throwIfDisposed(),pi(this,e)},rt().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),fi(this,e,t,n,s,r,a,i,o)},rt().prototype.sub=function(e){return this.throwIfDisposed(),Vr(this,e)},rt().prototype.sum=function(e,t){return this.throwIfDisposed(),Gr(this,e,t)},rt().prototype.tan=function(){return this.throwIfDisposed(),gi(this)},rt().prototype.tanh=function(){return this.throwIfDisposed(),Os(this)},rt().prototype.tile=function(e){return this.throwIfDisposed(),wr(this,e)},rt().prototype.toBool=function(){return this.throwIfDisposed(),pn(this,"bool")},rt().prototype.toFloat=function(){return this.throwIfDisposed(),pn(this,"float32")},rt().prototype.toInt=function(){return this.throwIfDisposed(),pn(this,"int32")},rt().prototype.topk=function(e,t){return this.throwIfDisposed(),xi(this,e,t)},rt().prototype.transpose=function(e){return this.throwIfDisposed(),$n(this,e)},rt().prototype.unique=function(e){return this.throwIfDisposed(),ki(this,e)},rt().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),wi(this,e,t)},rt().prototype.unstack=function(e){return this.throwIfDisposed(),vi(this,e)},rt().prototype.where=function(e,t){return this.throwIfDisposed(),dr(e,this,t)},rt().prototype.zerosLike=function(){return this.throwIfDisposed(),pr(this)};class gu extends Error{constructor(e){super(e),Object.setPrototypeOf(this,gu.prototype)}}class mu extends Error{constructor(e){super(e),Object.setPrototypeOf(this,mu.prototype)}}class bu extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bu.prototype)}}class xu extends Error{constructor(e){super(e),Object.setPrototypeOf(this,xu.prototype)}}class yu extends Error{constructor(e){super(e),Object.setPrototypeOf(this,yu.prototype)}}function ku(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function wu(e,t){if(!e)throw new yu(t)}function vu(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Iu(e){return 1===e.length?e[0]:e}function $u(e){return Array.isArray(e)?e:[e]}function Nu(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Cu(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let Su={};function Tu(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Eu(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>Eu(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Eu(t):e[n]=t.value)}}}function Ru(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Su)a=Su[r];else if(a=t[r],null==a)throw new bu(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new bu(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Su?[o,l]=Su.className:i in t&&([o,l]=t[i]),null==o)throw new bu(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Su))e[t]=Su[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Su);for(const e of Object.keys(n))Su[e]=n[e];Eu(a.config);const s=l(o,a.config,n,r);return Su=Object.assign({},t),s}{const e=Object.assign({},Su);for(const e of Object.keys(n))Su[e]=n[e];const t=new o(a.config);return Su=Object.assign({},e),t}}}function Au(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Fu(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Du(e){if(null==e)throw new bu(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function _u(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new bu(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Ou(e,t,n=0,s=Infinity){return wu(n>=0),wu(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every(e=>typeof e===t)}function Mu(e,t){Array.isArray(e)?(l(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>Mu(e,`element ${n+1} of ${t}`))):l(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${Lu(e)}.`)}function Lu(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>Lu(e)).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function zu(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Bu(e,t){return Yn(()=>ui(Gr(ss(e,e),t,!0)))}class Pu extends Hn{getConfig(){return{}}}class Wu extends Pu{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Yn(()=>{const t=Bu(e,this.axis),n=Gs(t,0,this.maxValue);return ss(e,ns(n,es(fu(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Wu.className="MaxNorm",qn(Wu);class Uu extends Pu{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Yn(()=>ns(e,es(fu(),Bu(e,this.axis))))}getConfig(){return{axis:this.axis}}}Uu.className="UnitNorm",qn(Uu);class Vu extends Pu{apply(e){return Ua(e)}}Vu.className="NonNeg",qn(Vu);class Gu extends Pu{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Yn(()=>{const t=Bu(e,this.axis),n=es(ss(this.rate,Gs(t,this.minValue,this.maxValue)),ss(1-this.rate,t));return ss(e,ns(n,es(fu(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Gu.className="MinMaxNorm",qn(Gu);const Hu={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function ju(e){return Tu(e)}function qu(e,t={}){return Ru(e,jn.getMap().classNameMap,t,"constraint")}function Ku(e){return null==e?null:"string"==typeof e?qu({className:e in Hu?Hu[e]:e,config:{}}):e instanceof Pu?e:qu(e)}const Xu=["channelsFirst","channelsLast"],Yu=["nearest","bilinear"],Ju=["valid","same","causal"],Zu=["max","avg"],Qu=["sum","mul","concat","ave"],ec=new Map;function tc(e){_u(Xu,"DataFormat",e)}function nc(e){_u(Ju,"PaddingMode",e)}function sc(e){_u(Zu,"PoolMode",e)}const rc=[];function ac(e,t){rc.push(e);try{const e=t();return rc.pop(),e}catch(e){throw rc.pop(),e}}function ic(e){if(!uc(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===rc.length?"":rc.join("/")+"/")+e}function oc(e){if(!uc(e))throw new Error("Not a valid tensor name: '"+e+"'");ec.has(e)||ec.set(e,0);const t=ec.get(e);if(ec.set(e,ec.get(e)+1),t>0){const n=`${e}_${t}`;return ec.set(n,1),n}return e}const lc=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function uc(e){return!!e.match(lc)}function cc(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function hc(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function dc(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function pc(e,t){if(t<e)throw new bu(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function fc(e,t){return pn(e,t)}function gc(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Es(e,n)}function mc(e,t,n){return Yn(()=>{switch(e.rank){case 1:return Qa(e,t,n);case 2:return ei(e,[t,0],[n,e.shape[1]]);case 3:return ti(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return ni(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return _s(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return _s(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new bu(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function bc(e,t,n){return Yn(()=>{switch(e.rank){case 1:return Qa(e,t,n);case 2:return ei(e,[0,t],[e.shape[0],n]);case 3:return ti(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return ni(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new bu(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function xc(e,t,n,s){return Yn(()=>{switch(e.rank){case 1:return Qa(e,t,n);case 2:switch(s){case 1:return mc(e,t,n);case 2:return bc(e,t,n);default:throw new bu(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return mc(e,t,n);case 2:return ti(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return bc(e,t,n);default:throw new bu(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return mc(e,t,n);case 2:return ni(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return ni(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return bc(e,t,n);default:throw new bu(`The axis is not within the rank of the tensor ${s}`)}default:throw new bu(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function yc(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Fs(e,t)}function kc(e,t){switch(e.rank){case 1:return Hs([e,t]);case 2:return js([e,t],0);case 3:return qs([e,t],0);case 4:return Ks([e,t],0);default:throw new bu(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function wc(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new bu(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return wr(e,t)}function vc(e,t=0,n=1,s,r){return La(e,t,n,s,r)}function Ic(e,t,n,s){if(e.rank<2||t.rank<2)throw new xu(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new xu(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Mi({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cc(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=Es(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=Es($n(t,c),[l,-1]);const h=[...r,...u];return Es(Mi({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cc(e.rank,s,"channelsLast"):null,activation:n}),h)}}function $c(e,t,n){return Yn(()=>(t=Array.isArray(t)?mi(t,"int32"):pn(t,"int32"),Nr(e,t,n)))}function Nc(e){return ss(e,e)}function Cc(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new bu(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return Es(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return Es(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===e){if("channelsFirst"===n)return Es(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===n)return Es(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===e){if("channelsFirst"===n)return Es(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===n)return Es(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(e<3)return t;throw new bu(`Unsupported input rank by biasAdd: ${t.rank}`)}function Sc(e,t,n){return Yn(()=>(null==n&&(n="channelsLast"),tc(n),es(e,Cc(e.rank,t,n))))}function Tc(e,t,n,s){return Yn(()=>Ci(e,t,n,s))}function Ec(e,t,n=!1){return n?e():t()}const Rc=["fanIn","fanOut","fanAvg"],Ac=["normal","uniform","truncatedNormal"];class Fc extends Hn{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Dc extends Fc{apply(e,t){return ua(e,t)}}Dc.className="Zeros",qn(Dc);class _c extends Fc{apply(e,t){return ca(e,t)}}_c.className="Ones",qn(_c);class Oc extends Fc{constructor(e){if(super(),"object"!=typeof e)throw new bu(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new bu(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Yn(()=>ss(qa(this.value),ca(e,t)))}getConfig(){return{value:this.value}}}Oc.className="Constant",qn(Oc);class Mc extends Fc{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return za(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Mc.className="RandomUniform",qn(Mc);class Lc extends Fc{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new xu(`randomNormal does not support dType ${t}.`);return vc(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Lc.className="RandomNormal",qn(Lc);class zc extends Fc{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new xu(`truncatedNormal does not support dType ${t}.`);return yi(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}zc.className="TruncatedNormal",qn(zc);class Bc extends Fc{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Yn(()=>{if(2!==e.length||e[0]!==e[1])throw new bu("Identity matrix initializer can only be used for 2D square matrices.");return ss(this.gain,vr(e[0]))})}getConfig(){return{gain:this.gain}}}Bc.className="Identity",qn(Bc);class Pc extends Fc{constructor(e){if(super(),e.scale<0)throw new bu(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,_u(Rc,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,_u(Ac,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(tc(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=cc(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=cc(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=cc(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,s):"fanOut"===this.mode?Math.max(1,r):Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new xu(`${this.getClassName()} does not support dType ${t}.`);return yi(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return za(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Pc.className="VarianceScaling",qn(Pc);class Wc extends Pc{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}Wc.className="GlorotUniform",qn(Wc);class Uc extends Pc{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}Uc.className="GlorotNormal",qn(Uc);class Vc extends Pc{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}Vc.className="HeNormal",qn(Vc);class Gc extends Pc{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}Gc.className="HeUniform",qn(Gc);class Hc extends Pc{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}Hc.className="LeCunNormal",qn(Hc);class jc extends Pc{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pc.className}}jc.className="LeCunNormal",qn(jc);class qc extends Fc{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new xu("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Yn(()=>{if(e.length<2)throw new xu("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=vc(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=po.gramSchmidt(t);return e[0]>e[1]&&(n=$n(n)),ss(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}qc.className="Orthogonal",qn(qc);const Kc={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Xc(e,t={}){return Ru(e,jn.getMap().classNameMap,t,"initializer")}function Yc(e){return Tu(e)}function Jc(e){if("string"==typeof e){const t=e in Kc?Kc[e]:e;if("GlorotNormal"===t)return new Uc;if("GlorotUniform"===t)return new Wc;if("HeNormal"===t)return new Vc;if("HeUniform"===t)return new Gc;if("LeCunNormal"===t)return new Hc;if("LeCunUniform"===t)return new jc;{const e={};return e.className=t,e.config={},Xc(e)}}return e instanceof Fc?e:Xc(e)}let Zc=0;function Qc(){return Zc++}const eh={};function th(e=""){return e in eh||(eh[e]=0),eh[e]+=1,e+eh[e].toString()}function nh(e){return Array.isArray(e)&&Array.isArray(e[0])}function sh(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function rh(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new bu(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function ah(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new bu(`Expected exactly 1 Shape; got ${e.length}`)}return e}function ih(e){let t=0;for(const n of e)t+=0===n.shape.length?1:n.shape.reduce((e,t)=>e*t);return t}class oh{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Qc(),this.originalName=ic(n=null==n?"Variable":n),this.name=oc(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return wt.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function lh(e){return e.map(e=>e.read())}function uh(e){e.forEach(e=>{e[0].write(e[1])})}class ch{constructor(e){this.dtype=e.dtype,this.shape=e.shape,this.ndim=null!=e.shape?e.shape.length:e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class hh{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Qc(),null!=a&&(this.originalName=ic(a),this.name=oc(this.originalName)),this.rank=t.length}}let dh=0;class ph{constructor(e,t){this.callArgs=t,this.id=dh++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)e.push(null!=t?t.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let fh=0;class gh extends Hn{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=fh++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Nu(e)+"_"+th(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=e.weights?e.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new mu(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new bu(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Iu(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Iu(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new gu(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new gu(`Layer ${this.name} is not connected, no input to return.`);return Iu(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new gu(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new gu(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Iu(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=$u(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=$u(this.inputSpec);if(e.length!==t.length)throw new bu(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new bu(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new bu(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new bu(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new bu(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new bu(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new bu(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=$u(e);let s=!0;for(const e of n)if(!(e instanceof hh)){s=!1;break}let r=!0;for(const e of n)if(e instanceof hh){r=!1;break}if(s===r)throw new bu("Arguments to apply() must be all SymbolicTensors or all Tensors");return ac(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of $u(e))t.push(n.shape);this.build(Iu(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=$u(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Iu(a),null!=this.activityRegularizer)throw new xu("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=$u(e);const t=[];for(const n of e)t.push(n.shape);return Iu(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new hh(a,n,this,$u(e),t,this.name,s)):new hh(a,s,this,$u(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new xu("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new gu(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new gu(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new mu(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ih(this.weights)}build(e){this.built=!0}getWeights(e=!1){return lh(e?this.trainableWeights:this.weights)}setWeights(e){Yn(()=>{const t=this.weights;if(t.length!==e.length)throw new bu(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=lh(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!p(a.shape,o.shape))throw new bu(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}uh(n)})}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new bu(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Jc("zeros"));const o=s.apply(t,n),l=new oh(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss(()=>r.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=$u(e),null!=this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=$u(e);t=$u(t),n=$u(n),s=$u(s),r=sh(r),a=sh(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new ph({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function mh(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=mh(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class bh extends gh{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:th("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new bu("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new bu("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new bu("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new hh(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new ph({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new bu(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function xh(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Jn(s)}}function yh(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var kh;bh.className="InputLayer",qn(bh),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(kh||(kh={}));class wh{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class vh{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Ih extends wh{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=Yn(()=>es(this.totals[e],ss(s,n)));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Yn(()=>{const n=ss(ns(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Zn(t[e])}))}}class $h extends wh{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)"number"!=typeof r[a]&&(e.push(r[a].data()),t.push(s),n.push(a))}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Nh extends wh{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");S(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=Ve();return(...r)=>{const a=Ve();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await xh(n),s.push(this.yield(e,t,n))),s.push(No()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await xh(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await xh(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(No()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await xh(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await xh(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(No()):S(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await xh(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await xh(e),await this.trainEnd(e))}}function Ch(e,t){return null==e&&(e={}),e instanceof wh?[e]:Array.isArray(e)&&e[0]instanceof wh?e:$u(e).map(e=>new Nh(e,t))}class Sh{constructor(){}static registerCallbackConstructor(e,t){l(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Sh.checkForDuplicate(t),null==Sh.constructors[e]&&(Sh.constructors[e]=[]),Sh.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Sh.constructors)Sh.constructors[+t].forEach(t=>{if(t===e)throw new bu("Duplicate callback constructor.")})}static clear(){Sh.constructors={}}static createCallbacks(e){const t=[];for(const n in Sh.constructors){const s=+n;e>=s&&t.push(...Sh.constructors[s])}return t.map(e=>new e)}}function Th(e,t,n,s,r,a,i,o,l){const u=new $h,c=[new Ih,...Sh.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new vh(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Eh(e,t={},n=!1){return Ru(e,jn.getMap().classNameMap,t,"layer",n)}function Rh(e,t){return Yn(()=>{"float32"!==e.dtype&&(e=pn(e,"float32"));const n=Gr(Nc(e),t,!0),s=Ir(n.shape,fu()),r=ui(oa(n,s));return ns(e,r)})}function Ah(e,t){return Yn(()=>la(Nc(Vr(t,e)),-1))}function Fh(e,t){return Yn(()=>la(rs(Vr(t,e)),-1))}function Dh(e,t){return Yn(()=>{const n=Vr(e,t),s=Gs(rs(e),fu(),Number.MAX_VALUE),r=rs(ns(n,s));return ss(100,la(r,-1))})}function _h(e,t,n=!1){return Yn(()=>{if(n)t=si(t);else{const e=Gr(t,t.shape.length-1,!0);t=ns(t,e)}return t=Gs(t,fu(),1-fu()),Br(Gr(ss(pn(e,"float32"),Mr(t)),t.shape.length-1))})}function Oh(e,t,n=!1){return Yn(()=>{const s=pn($r(function(e){const t=[cc(e.shape)];return Es(e,t)}(e)),"int32"),r=(t=Gs(t,fu(),1-fu())).shape;return _h(Es(In(s,r[r.length-1]),r),t,n)})}function Mh(e,t){return Yn(()=>{let n;return n=Gs(t,fu(),1-fu()),n=Mr(ns(n,Vr(1,n))),la(function(e,t){if(!p(e.shape,t.shape))throw new bu(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Yn(()=>{const n=Ua(t),s=Br(rs(t));return es(Vr(n,ss(t,e)),Lr(xr(s)))})}(e,n),-1)})}function Lh(e,t){return Yn(()=>{const n=Rh(e,-1),s=Rh(t,-1),r=ss(n,s);return Br(Gr(r,-1))})}Sh.constructors={};const zh={meanSquaredError:Ah,meanAbsoluteError:Fh,meanAbsolutePercentageError:Dh,meanSquaredLogarithmicError:function(e,t){return Yn(()=>{const n=Gs(t,fu(),Number.MAX_VALUE),s=Mr(es(1,n)),r=Gs(e,fu(),Number.MAX_VALUE),a=Mr(es(1,r));return la(Nc(Vr(s,a)),-1)})},squaredHinge:function(e,t){return Yn(()=>{const n=oa(0,Vr(1,ss(e,t)));return la(Nc(n),-1)})},hinge:function(e,t){return Yn(()=>{const n=oa(0,Vr(1,ss(e,t)));return la(n,-1)})},categoricalHinge:function(e,t){return Yn(()=>{const n=Gr(ss(e,t),-1),s=Ur(ss(Vr(1,e),t),-1);return oa(0,es(1,Vr(s,n)))})},logcosh:function(e,t){return Yn(()=>{const n=Math.log(2),s=Vr(t,e),r=Vr(es(s,Pr(ss(-2,s))),n);return la(r,-1)})},categoricalCrossentropy:_h,sparseCategoricalCrossentropy:Oh,binaryCrossentropy:Mh,kullbackLeiblerDivergence:function(e,t){return Yn(()=>{const n=Gs(e,fu(),1),s=Gs(t,fu(),1);return Gr(ss(e,Mr(ns(n,s))),-1)})},poisson:function(e,t){return Yn(()=>{const n=Mr(es(fu(),t));return la(Vr(t,ss(e,n)),-1)})},cosineProximity:Lh};function Bh(e){if("string"==typeof e){if(e in zh)return zh[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new bu(t)}return e}function Ph(e,t){return Yn(()=>{const n=ss(.5,xa(t)),s=fc(Cr(t,n),e.dtype);return la(hr(e,s),-1)})}function Wh(e,t){return Yn(()=>fc(hr(us(e,-1),us(t,-1)),"float32"))}function Uh(e,t){return Mh(e,t)}function Vh(e,t){return e.rank===t.rank&&(e=hi(e,[e.rank-1])),(t=us(t,-1)).dtype!==e.dtype&&(t=pn(t,e.dtype)),pn(hr(e,t),"float32")}const Gh=_h,Hh=Oh,jh={binaryAccuracy:Ph,categoricalAccuracy:Wh,precision:function(e,t){return Yn(()=>{const n=function(e,t){return Yn(()=>pn(Gr(ta(hr(e,1),hr(t,1))),"float32"))}(e,t),s=function(e,t){return Yn(()=>pn(Gr(ta(hr(e,0),hr(t,1))),"float32"))}(e,t),r=es(n,s);return pn(dr(Cr(r,0),ns(n,r),0),"float32")})},categoricalCrossentropy:Gh,sparseCategoricalCrossentropy:Hh,mse:Ah,MSE:Ah,mae:Fh,MAE:Fh,mape:Dh,MAPE:Dh,cosine:Lh};function qh(e){if("string"==typeof e&&e in jh)return jh[e];if("string"!=typeof e&&null!=e)return e;throw new bu(`Unknown metric ${e}`)}function Kh(e){if(wu(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(zh))if(zh[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(jh))if(jh[n]===e){t=n;break}return void 0!==t?t:e.name}}function Xh(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Yh(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Yh(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Yh(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Yh(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Jh(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Zh(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Jh([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Qh(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e)a.push(`${t.inboundLayers[e].name}[${t.nodeIndices[e]}][${t.tensorIndices[e]}]`);const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];Jh([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)Jh(["","","",a[e]],t,s)}function ed(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function td(e,t){if(null===e)return null;if("string"==typeof e)return Cu(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];ed(t,r,s)?n.push(s):n.push(td(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Cu(n);t[e]=td(s,e)}}return t}}function nd(e,t){if(null==e)return null;if("string"==typeof e)return Nu(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];ed(t,r,s)?n.push(s):n.push(nd(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Nu(n)]="name"!==n&&"className"!==n||"string"!=typeof s?nd(s,n):s}return t}}class sd{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof sd)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new bu(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return pn(t,e.dtype)}catch(n){throw new bu(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof hh){if(null==this.id2Value[e.id])throw new bu(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new bu(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof hh){if(null==this.id2Value[e.id])throw new bu(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new bu(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Jn(this.id2Mask)}}const rd={},ad={};function id(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map(e=>e.name),u=[],c=t.names();for(const e of o)-1!==c.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=s&&(s.maxNumTensors=-Infinity,s.minNumTensors=Infinity);const h=o.join(",")+"|"+t.names().join(",");let d,p;if(null==rd[h]){const e=function(e,t){l(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=ld(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=ld(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach(t=>s[e].add(t))}}return{sorted:n,recipientCounts:od(s)}}(i,t);d=e.sorted,p=e.recipientCounts,rd[h]=d,ad[h]=p}d=rd[h],p={},r||Object.assign(p,ad[h]);const f=new sd(t);for(let e=0;e<d.length;++e){if(null!=s){const e=Xn().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=d[e],i=a.sourceLayer;if(i instanceof bh)continue;const l=[],c=[],h=[];let g=!1;for(const e of a.inputs){const n=f.getValue(e),s=f.getMask(e);l.push(n),c.push(s),null!=s&&(g=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||h.push(n))}g&&((n=n||{}).mask=c[0]);const m=$u(i.apply(l,n));let b=null;i.supportsMasking&&(b=i.computeMask(l,c));const x=ud(a),y=Array.isArray(x)?x:[x];for(let e=0;e<y.length;++e){f.hasKey(y[e])||f.add(y[e],m[e],Array.isArray(b)?b[0]:b);const t=o.indexOf(y[e].name);-1!==t&&(u[t]=m[e])}r||Jn(h)}return f.disposeMasks(),a?u:u[0]}function od(e){const t={};for(const n in e)t[n]=e[n].size;return t}function ld(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function ud(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class cd extends gh{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=th(e)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],this.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],Fu(this.inputs).length!==this.inputs.length)throw new bu(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);Fu(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.nodeIndex,n=e.tensorIndex;this.outputLayers.push(e.sourceLayer),this.outputLayersNodeIndices.push(t),this.outputLayersTensorIndices.push(n)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;wu(0===n,"input layer has >1 nodes"),wu(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof bh))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new mu(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(cd.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++)o(u.inputTensors[e],t,n,u.inboundLayers[e],u.nodeIndices[e],u.tensorIndices[e]);for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];a=Math.max(a,null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id]),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s].inboundNodes[e.nodeIndices[s]];t[r.id]=Math.max(a+1,null==t[r.id]?0:t[r.id]),n[r.id]=r}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const d={};for(const e in s){const t=s[e];t in d||(d[t]=[]),d[t].push(r[e])}let p=Object.keys(d).map(e=>parseInt(e,10)).sort(Au);this.layers=[];for(const e of p){const t=d[e];t.sort((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0});for(const e of t)e instanceof cd&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map(e=>parseInt(e,10)).sort(Au);const f=this.inputs.slice(),g=[];for(const e of p)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new mu(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${g}`);for(const e of t.outputTensors)f.push(e);g.push(e.name)}}this.nodesByDepth=h;const m=this.layers.map(e=>e.name);for(const e of m){const t=m.filter(t=>t===e).length;if(1!==t)throw new mu(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(m))}this.outboundNodes=[],this.inboundNodes=[],new ph({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new bu("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new bu(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new bu(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new bu(`${e.length} of ${s} weights are not set: ${e}`)}uh(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.8.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=nd(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Yn(()=>{e=$u(e);const n=new sd;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return id(this.outputs,n,t)})}computeMask(e,t){return Yn(()=>{let n;return e=$u(e),n=null==t?ku(null,e.length):$u(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=sh(e);if(t.length!==this.inputLayers.length)throw new bu(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++)n[this.inputLayers[e].name+"_0_0"]=t[e];const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Au);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++)s.push(n[`${e.inboundLayers[t].name}_${e.nodeIndices[t]}_${e.tensorIndices[t]}`]);const r=sh(t.computeOutputShape(Iu(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++)a.push(`${this.outputLayers[e].name}_${this.outputLayersNodeIndices[e]}_${this.outputLayersTensorIndices[e]}`);for(let e=0;e<a.length;e++){const t=a[e];wu(t in n),r.push(n[t])}return Iu(r)}runInternalGraph(e,t){null==t&&(t=ku(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s)n[this.inputs[s].id]=[e[s],t[s]];const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Au);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=$u(t.call(e,u)),l=$u(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map(e=>e[0]),i=a.map(e=>e[1]),null==u.mask&&(u.mask=i),o=$u(t.call(s,u)),l=$u(t.computeMask(s,i));if(t.activityRegularizer)throw new xu("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e)n[r[e].id]=[o[e],l[e]]}}}const r=[],a=[],i=[];for(const e of this.outputs){wu(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof cd?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=cd.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new bu(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new bu("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new bu(`No such layer: ${e}`)}calculateLosses(){return Yn(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=cd.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=cd.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.tensorIndices[n];let o=t[cd.nodeKey(r,s.nodeIndices[n])];null==o&&(o=0),e.push([r.name,o,a,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=cd.nodeKey(n,this.inputLayersNodeIndices[e]);if(!this.containerNodes.has(r))continue;let a=t[r];null==a&&(a=0),s.push([n.name,a,this.inputLayersTensorIndices[e]])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=cd.nodeKey(n,this.outputLayersNodeIndices[e]);if(!this.containerNodes.has(s))continue;let a=t[s];null==a&&(a=0),r.push([n.name,a,this.outputLayersTensorIndices[e]])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);n.push(c.inboundNodes[l].outputTensors[u])}n.length>0&&e.apply(Iu(n),s)}function l(e){const n=e.name,a=Eh(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new bu(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)})}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Du(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],d=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],s=e[2];wu(t in r),h.push(r[t].inboundNodes[n].outputTensors[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];wu(t in r),d.push(r[t].inboundNodes[n].outputTensors[s])}return new e({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new bu("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Yn(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function hd(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided classWeight is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{n.push(t in e?e[t]:null)}),n}throw new Error(`The model has multiple (${s}) outputs, so classWeight must be either an array with ${s} elements or an object with ${t} keys. Provided classWeight not understood: ${JSON.stringify(e)}`)}(e,t)}async function dd(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Yn(()=>{if(1===e.shape.length)return fn(e);if(2===e.shape.length){if(e.shape[1]>1)return us(e,1);if(1===e.shape[1])return Es(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());Jn(t);const r=[];return s.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])}),mi(r,"float32")}return null}function pd(e,t){return ss(e,t)}function fd(e,t){let n,s;n=t.xs,s=t.ys,l(null!=n&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const r=gd("input",e.inputNames,n),a=gd("output",e.outputNames,s),i=r[0].shape[0];l(r.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),l(a.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<r.length;t++)l(r[t].shape[0]===i,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${r[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);for(let t=0;t<a.length;t++)l(a[t].shape[0]===i,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);return{xs:r,ys:a}}function gd(e,t,n){if(n instanceof st)return[n];if(Array.isArray(n))return l(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const s=[];for(const r of t){if(null==n[r])throw new bu(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function md(e){return"function"==typeof e.iterator}function bd(e){l(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function xd(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>mc(e,t,n-t)):mc(e,t,n-t)}function yd(e,t){return Yn(()=>null==e?null:Array.isArray(e)?e.map(e=>yd(e,t)):$c(e,"int32"===t.dtype?t:pn(t,"int32")))}function kd(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function wd(e){const t=[];e instanceof st&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(gc(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function vd(e,t){if(null==e)return;const n=[];if(t instanceof st)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const e in t)n.push(t[e].id);const s=[];if(e instanceof st)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&s.push(e)});else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach(e=>{e.isDisposed||e.dispose()})}function Id(e){return Array.isArray(e)}function $d(e){return!function(e){return e instanceof st}(e)&&!Id(e)}function Nd(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Id(e)&&e.length>0)t=!0;else if($d(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new bu(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);let a;if($d(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new bu(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Id(e)){if((e=e).length!==t.length)throw new bu(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new bu(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=wd(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new bu(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new bu(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function Cd(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new bu(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new bu(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new bu(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new bu(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Sd extends cd{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new bu("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Jh(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?Zh(o[e],n,s):Qh(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=ih(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights),t}(e),u=ih(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Io.adagrad(.01),Adadelta:()=>Io.adadelta(1,.95,fu()),Adam:()=>Io.adam(.001,.9,.999,fu()),Adamax:()=>Io.adamax(.002,.9,.999,fu(),0),RMSProp:()=>Io.rmsprop(.001,.9,0,fu()),SGD:()=>Io.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new bu(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof fo))throw new bu("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new bu(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>Bh(e))}else{const n=Bh(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new bu(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Bh(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e];this.feedOutputNames.push(this.outputNames[e]),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],ac("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};ac("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Mh?-1!==["accuracy","acc"].indexOf(i)?s=Ph:-1!==["crossentropy","ce"].indexOf(i)&&(s=Uh):this.lossFunctions[e]===Oh?-1!==["accuracy","acc"].indexOf(i)?s=Vh:-1!==["crossentropy","ce"].indexOf(i)&&(s=Hh):-1!==["accuracy","acc"].indexOf(i)?s=Wh:-1!==["crossentropy","ce"].indexOf(i)&&(s=Gh),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=qh(i);a=e,n=""+Kh(i)}let t;ac(n,()=>{t=a}),r(e,n,t)}})(s[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;bd(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);return this.makeTestFunction(),Iu(this.testLoop(this.testFunction,a,s,n.verbose,n.steps))}finally{vd(r[0],e),vd(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new xu("Verbose mode is not implemented yet.");l(!s||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);const i="function"==typeof t.next?t:await t.iterator();let o=0,u=0;for(;!s||u<n.batches;){const t=await i.next();if(a=Yn(()=>{if(t.value){const{xs:n,ys:s}=fd(e,t.value),i=n.concat(s),l=Yn(()=>r(i));if(Jn(i),0===u)for(let e=0;e<l.length;++e)a.push(qa(0));const c=i[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=Yn(()=>es(a[e],ss(c,t))),u>0&&Jn(n)}Jn(l),o+=c,++u}return a}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=ns(a[e],o),Jn(t)}return Iu(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new bu(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new bu(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new bu("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=this.retrieveSymbolicTensors(n?t:[t]),r=new sd;if(e instanceof st&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new bu(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new bu(`No value is provided for the model's input ${t.name}`);r.add(t,n)}const a=id(s,r);return n?a:a[0]}retrieveSymbolicTensors(e){const t=ku(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(e=>e.name);for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,s)=>{null==t&&n.push(e[s])}),new bu(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Yn(()=>{const s=this.checkNumSamples(e);if(n)throw new xu("Verbose predictLoop() is not implemented yet.");const r=kd(s,t),a=this.outputs.map(e=>[]);for(let t=0;t<r.length;++t)Yn(()=>{const n=xd(e,r[t][0],r[t][1]),s=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)s.push({key:this.inputs[e],value:n[e]});else s.push({key:this.inputs[0],value:n});const a=new sd(s);return id(this.outputs,a)}).forEach((e,t)=>a[t].push(e));return Iu(a.map(e=>Fs(e,0)))})}predict(e,t={}){const n=wd(e);Cd(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return bd(s),this.predictLoop(n,s)}finally{vd(n,e)}}predictOnBatch(e){Cd(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new mu("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];r.push(this.feedLossFns[e]===Oh?t.slice(0,t.length-1).concat([1]):t)}if(function(e,t,n){const s=Fu(e.map(e=>e.shape[0]));s.sort();const r=Fu(t.map(e=>e.shape[0]));if(r.sort(),s.length>1)throw new bu(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(r.length>1)throw new bu(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(s.length>0&&r.length>0&&!p(s,r))throw new bu(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Nd(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Nd(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[Ah,Mh,_h];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===_h&&1===a.shape[a.shape.length-1])throw new bu(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new bu(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new bu(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=hd(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await dd(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return Yn(()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new xu("Verbose mode is not implemented yet.");if(null!=r)throw new xu("steps mode in testLoop() is not implemented yet");{const s=kd(a,n),r=mi(pc(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=mc(r,a,o-a),u=yd(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(qa(0));for(let e=0;e<c.length;++e)i[e]=es(i[e],ss(o-a,c[e]))}for(let e=0;e<i.length;++e)i[e]=ns(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;vu(e,s)>1&&(r+=`_${vu(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new sd(e),o=id(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=pd(n,r[e]));const a=la(n);t.push(a),l=0===e?n:es(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][1];n=la((0,this.metricsTensors[e][0])(s[t],o[t]))}Zn(n),a.push(n)}return l=la(l),this.calculateLosses().forEach(e=>{l=es(l,e)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Yn(()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new sd(a),o=id(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=la((0,this.lossFunctions[e])(r[e],o[e]));n=0===e?s:es(n,s),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][1],s=la((0,this.metricsTensors[e][0])(r[n],o[n]));t.push(s)}return t})}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;bd(d);const p=!1,f=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,d);a=f[0],i=f[1],h=f[2];let g,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new xu("validationData including sample weights is not supported yet."):new bu(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);o=s.validationData[0],l=s.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,d);u=n[0],c=n[1],g=u.concat(c)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];u=xd(a,e,t),a=xd(a,0,e),c=xd(i,e,t),i=xd(i,0,e),g=u.concat(c)}else null!=s.validationSteps&&(m=!0);const b=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),y=e.getDedupedMetricsNames();let k,w;m?(e.makeTestFunction(),k=e.testFunction,w=y.slice().concat(y.map(e=>"val_"+e))):(k=null,g=[],w=y.slice());const v=Ch(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,a,i,o,l,u,c,h,d,p,f,g){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==p&&(p=0);let m=!1;null!=u&&null!=c&&(m=!0);const b=e.checkNumSamples(n,a,null,"steps_per_epoch");let x;null!=b&&(x=pc(0,b)),null==o&&(o=1);const{callbackList:y,history:k}=Th(l,o,i,p,b,null,a,m,d);y.setModel(e),e.history=k,await y.onTrainBegin(),e.stopTraining_=!1;for(let o=p;o<i;++o){await y.onEpochBegin(o);const i={};{if("batch"===h)throw new xu("batch shuffling is not implemneted yet");h&&r(x);const o=mi(x),l=kd(b,a);for(let r=0;r<l.length;++r){const h={};if(await y.onBatchBegin(r,h),Yn(()=>{const d=l[r][0],p=l[r][1],f=mc(o,d,p-d);h.batch=r,h.size=p-d;const g=yd(n,f),b=t(g);for(let e=0;e<s.length;++e){const t=b[e];h[s[e]]=t,Zn(t)}if(r===l.length-1&&m){const t=e.testLoop(u,c,a);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];Zn(r),i["val_"+n]=r}}}),await y.onBatchEnd(r,h),yh(h),e.stopTraining_)break}o.dispose()}if(await y.onEpochEnd(o,i),e.stopTraining_)break}return await y.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,y,d,s.epochs,s.verbose,v,k,g,s.shuffle,w,s.initialEpoch)}finally{e.isTraining=!1,vd(a,t),vd(i,n),vd(u,o),vd(c,l),null!=h&&Jn(h)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(l(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),l(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),l(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),l(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),l(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(md(n.validationData))l(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{const e=function(e){if(3===e.length)throw new xu("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=r?u.slice().concat(u.map(e=>"val_"+e)):u.slice();const h=Ch(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Th(h,d,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,c);p.setModel(e),e.history=f,await p.onTrainBegin(),e.stopTraining_=!1;let g=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;g<n.epochs;){const l={};await p.onEpochBegin(g);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=fd(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=hd(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await dd(r[e],null,t[e]))}const l=s.concat(r).concat(i),d=o(l);Jn(l);for(let e=0;e<u.length;++e){const t=d[e];a[u[e]]=t,Zn(t)}await p.onBatchEnd(h,a),yh(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=md(n.validationData)?$u(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):$u(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(g,l),g++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Jn(a),Iu(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Xn().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Xn().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Nu(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>Nu(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Nu(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Nu(Kh(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Nu(Kh(e)));{const e={};for(const t in this.metrics)e[t]=Nu(Kh(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Eh(td(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Cu(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>Cu(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Cu(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map(e=>Cu(e));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Cu(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Gt.getSaveHandlers(e);if(0===t.length)throw new bu(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new bu(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new bu("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Mt(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.8.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Mt(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=Pt([n.data,t])}return null!=this.userDefinedMetadata&&(Xh(this.userDefinedMetadata,this.name,!0),s.userDefinedMetadata=this.userDefinedMetadata),s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Xh(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Sd.className="Model",qn(Sd);class Td extends Sd{}Td.className="Functional",qn(Td);class Ed extends Sd{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:th("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new bu(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Ed||e instanceof Sd;let n;if(t){if(n=e,1!==n.outputs.length)throw new bu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new bu("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new bu("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new bu("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new bh({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new bu(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new bu("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=mh(this.outputs[0])}this.inboundNodes=[],new ph({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ku(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(ah(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Sd({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new mu("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new mu("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new mu("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new mu("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new bu("Legacy serialization format not supported yet.");r=t}else l(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Ed))throw new xu(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=Eh(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new bu("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new bu("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Ed.className="Sequential",qn(Ed);class Rd extends Hn{getConfig(){return{}}}class Ad extends Rd{apply(e,t=1){return function(e,t=1){if(1!==t)throw new xu(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return mr(e)}(e,t)}}Ad.className="elu",qn(Ad);class Fd extends Rd{apply(e){return Ka(e)}}Fd.className="selu",qn(Fd);class Dd extends Rd{apply(e){return Ua(e)}}Dd.className="relu",qn(Dd);class _d extends Rd{apply(e){return Yn(()=>da(6,Ua(e)))}}_d.className="relu6",qn(_d);class Od extends Rd{apply(e){return e}}Od.className="linear",qn(Od);class Md extends Rd{apply(e){return Ds(e)}}Md.className="sigmoid",qn(Md);class Ld extends Rd{apply(e){return function(e){return Yn(()=>{const t=es(.5,ss(.2,e));return Gs(t,0,1)})}(e)}}Ld.className="hardSigmoid",qn(Ld);class zd extends Rd{apply(e){return Pr(e)}}zd.className="softplus",qn(zd);class Bd extends Rd{apply(e){return function(e){return Yn(()=>ns(e,es(rs(e),1)))}(e)}}Bd.className="softsign",qn(Bd);class Pd extends Rd{apply(e){return Os(e)}}Pd.className="tanh",qn(Pd);class Wd extends Rd{apply(e,t=-1){return si(e,t)}}Wd.className="softmax",qn(Wd);class Ud extends Rd{apply(e,t=-1){return Hr(e,t)}}Ud.className="logSoftmax",qn(Ud);class Vd extends Rd{apply(e,t=1){return Yn(()=>ss(Ds(ss(e,t)),e))}}Vd.className="swish",qn(Vd);class Gd extends Rd{apply(e){return Yn(()=>ss(e,Os(Pr(e))))}}function Hd(e){return e.getClassName()}function jd(e,t={}){return Ru(e,jn.getMap().classNameMap,t,"activation")}function qd(e){if(null==e)return jd({className:"linear",config:{}});if("string"==typeof e){const t={};return t.className=e,t.config={},jd(t)}return e instanceof Rd?e:jd(e)}Gd.className="mish",qn(Gd);class Kd extends Hn{}class Xd extends Kd{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Yn(()=>{let t=ua([1]);return this.hasL1&&(t=es(t,Gr(ss(this.l1,rs(e))))),this.hasL2&&(t=es(t,Gr(ss(this.l2,Nc(e))))),Es(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Xd.className="L1L2",qn(Xd);const Yd={l1l2:"L1L2"};function Jd(e){return Tu(e)}function Zd(e,t={}){return Ru(e,jn.getMap().classNameMap,t,"regularizer")}function Qd(e){return null==e?null:"string"==typeof e?Zd({className:e in Yd?Yd[e]:e,config:{}}):e instanceof Kd?e:Zd(e)}class ep extends gh{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=rh(e);let n=Ua(e);return null!=this.maxValue&&(n=Gs(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}ep.className="ReLU",qn(ep);class tp extends gh{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=rh(e);return Fr(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}tp.className="LeakyReLU",qn(tp);class np extends gh{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Jc(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Qd(e.alphaRegularizer),this.alphaConstraint=Ku(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new bu(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=ah(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new ch({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=rh(e),Ia(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Yc(this.alphaInitializer),alphaRegularizer:Jd(this.alphaRegularizer),alphaConstraint:ju(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}np.className="PReLU",qn(np);class sp extends gh{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new xu(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=rh(e);return mr(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}sp.className="ELU",qn(sp);class rp extends gh{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=rh(e);return ss(n,pn(Cr(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}rp.className="ThresholdedReLU",qn(rp);class ap extends gh{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Wd).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=rh(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function ip(e,t,n){if("number"==typeof e)return ku(e,t);if(e.length!==t)throw new bu(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new bu(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function op(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function lp(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+dc([n-t,0]);else{if("same"!==s)throw new bu(`Unsupport padding mode: ${s}.`);e*=t}return e}function up(e,t){return Yn(()=>(tc(t),"channelsFirst"===t?$n(e,[0,2,3,1]):e))}function cp(e,t){return Yn(()=>(tc(t),"channelsFirst"===t?$n(e,[0,2,3,4,1]):e))}function hp(e,t,n,s=[1,1],r="valid",a,i,o=null){return Yn(()=>{if(null==a&&(a="channelsLast"),tc(a),3!==e.rank&&4!==e.rank)throw new bu(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new bu(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=up(e,a);if("causal"===r)throw new xu("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Di({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=$n(l,[0,3,1,2])),l})}ap.className="Softmax",qn(ap);class dp extends gh{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",dp.verifyArgs(t),this.rank=e,Mu(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new xu(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ip(t.kernelSize,e,"kernelSize"),this.strides=ip(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,nc(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,tc(this.dataFormat),this.activation=qd(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Jc(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ku(t.biasConstraint),this.biasRegularizer=Qd(t.biasRegularizer),this.activityRegularizer=Qd(t.activityRegularizer),this.dilationRate=ip(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new bu(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new bu(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new bu(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(wu("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Ou(e.kernelSize,"number",1,3))throw new bu(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Hd(this.activation),useBias:this.useBias,biasInitializer:Yc(this.biasInitializer),biasRegularizer:Jd(this.biasRegularizer),activityRegularizer:Jd(this.activityRegularizer),biasConstraint:ju(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class pp extends dp{constructor(e,t){super(e,t),this.kernel=null,pp.verifyArgs(t),this.filters=t.filters,Mu(this.filters,"filters"),this.kernelInitializer=Jc(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ku(t.kernelConstraint),this.kernelRegularizer=Qd(t.kernelRegularizer)}build(e){e=ah(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new bu(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Yn(()=>{let t;e=rh(e);const n=null==this.bias?null:this.bias.read(),s=zu(this.activation.getClassName());if(null!=s&&2===this.rank)t=hp(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return Yn(()=>{if(null==a&&(a="channelsLast"),tc(a),3!==e.shape.length)throw new bu(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new bu(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new bu(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=$n(e,[0,2,1])),"causal"===r)throw new xu("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Ys(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Sc(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=hp(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new xu("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return Yn(()=>{if(null==a&&(a="channelsLast"),tc(a),4!==e.rank&&5!==e.rank)throw new bu(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new bu(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=cp(e,a);if("causal"===r)throw new xu("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Qs(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Sc(o,n)),"channelsFirst"===a&&(o=$n(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=ah(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=op(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Yc(this.kernelInitializer),kernelRegularizer:Jd(this.kernelRegularizer),kernelConstraint:ju(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new bu(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class fp extends pp{constructor(e){super(2,e),fp.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Ou(e.kernelSize,"number",1,2))throw new bu(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}fp.className="Conv2D",qn(fp);class gp extends pp{constructor(e){super(3,e),gp.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new bu(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}gp.className="Conv3D",qn(gp);class mp extends fp{constructor(e){if(super(e),this.inputSpec=[new ch({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new bu(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=ah(e)).length)throw new bu("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new bu("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ch({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Yn(()=>{let t=rh(e);if(4!==t.shape.length)throw new bu(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape;let s,r;"channelsFirst"===this.dataFormat?(s=2,r=3):(s=1,r=2);const a=n[r],i=this.kernelSize[1],o=this.strides[1],l=[n[0],lp(n[s],this.strides[0],this.kernelSize[0],this.padding),lp(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=$n(t,[0,2,3,1]));let u=Zs(t,this.kernel.read(),l,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(u=$n(u,[0,3,1,2])),null!=this.bias&&(u=Sc(u,this.bias.read(),this.dataFormat)),null!=this.activation&&(u=this.activation.apply(u)),u})}computeOutputShape(e){const t=(e=ah(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=lp(t[s],o,a,this.padding),t[r]=lp(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}mp.className="Conv2DTranspose",qn(mp);class bp extends gp{constructor(e){if(super(e),this.inputSpec=[new ch({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new bu(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=ah(e)).length)throw new bu("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new bu("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ch({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Yn(()=>{let t=rh(e);if(5!==t.shape.length)throw new bu(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape;let s,r,a;"channelsFirst"===this.dataFormat?(a=2,s=3,r=4):(a=1,s=2,r=3);const i=n[s],o=n[r],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[1],h=this.strides[2],d=[n[0],lp(n[a],this.strides[0],this.kernelSize[0],this.padding),lp(i,c,l,this.padding),lp(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=$n(t,[0,2,3,4,1]));let p=tr(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=$n(p,[0,4,1,2,3])),null!==this.bias&&(p=Sc(p,this.bias.read(),this.dataFormat)),null!==this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(e){const t=(e=ah(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=lp(t[s],u,i,this.padding),t[r]=lp(t[r],c,o,this.padding),t[a]=lp(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}bp.className="Conv3DTranspose",qn(bp);class xp extends pp{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new bu("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new bu("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new bu(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Jc(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Qd(t.depthwiseRegularizer),this.depthwiseConstraint=Ku(t.depthwiseConstraint),this.pointwiseInitializer=Jc(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Qd(t.pointwiseRegularizer),this.pointwiseConstraint=Ku(t.pointwiseConstraint)}build(e){if((e=ah(e)).length<this.rank+2)throw new bu(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new bu(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):null,this.inputSpec=[new ch({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Yn(()=>{let t;if(e=rh(e),1===this.rank)throw new xu("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=$n(e,[0,2,3,1])),t=Xa(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Sc(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=$n(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Yc(this.depthwiseInitializer),e.pointwiseInitializer=Yc(this.pointwiseInitializer),e.depthwiseRegularizer=Jd(this.depthwiseRegularizer),e.pointwiseRegularizer=Jd(this.pointwiseRegularizer),e.depthwiseConstraint=ju(this.depthwiseConstraint),e.pointwiseConstraint=ju(this.pointwiseConstraint),e}}xp.className="SeparableConv";class yp extends xp{constructor(e){super(2,e)}}yp.className="SeparableConv2D",qn(yp);class kp extends pp{constructor(e){super(1,e),kp.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Ou(e.kernelSize,"number",1,1))throw new bu(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}kp.className="Conv1D",qn(kp);class wp extends gh{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Yn(()=>{if(e=rh(e),"channelsLast"===this.dataFormat){const t=xc(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return xc(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=xc(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return xc(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}wp.className="Cropping2D",qn(wp);class vp extends gh{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,tc(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,_u(Yu,"InterpolationFormat",this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,t){return Yn(()=>{let t=rh(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=$n(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?ho.resizeNearestNeighbor(t,[e,s]):ho.resizeBilinear(t,[e,s]);return $n(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?ho.resizeNearestNeighbor(t,[e,s]):ho.resizeBilinear(t,[e,s])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}vp.className="UpSampling2D",qn(vp);class Ip extends dp{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Jc(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ku(e.depthwiseConstraint),this.depthwiseRegularizer=Qd(e.depthwiseRegularizer)}build(e){if((e=ah(e)).length<4)throw new bu(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new bu(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Yn(()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return Yn(()=>{null==r&&(r="channelsLast"),tc(r);let i=up(e,r);if(4!==e.rank)throw new bu(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new bu(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=ir(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=$n(i,[0,3,1,2])),i})}(e=rh(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Sc(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=ah(e);const t="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=op("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),r=op(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,s,r]:[e[0],s,r,n]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Yc(this.depthwiseInitializer),e.depthwiseRegularizer=Jd(this.depthwiseRegularizer),e.depthwiseConstraint=ju(this.depthwiseRegularizer),e}}function $p(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new bu("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Np(e,t,n,s=!1,r,a,i=!1,o=!1){return Yn(()=>{const l=t.shape.length;if(l<3)throw new bu(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(pc(2,l));if(t=$n(t,u),null!=a)throw new xu("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=pn(pn(r,"bool"),"float32")).rank===l-1&&(r=yr(r,-1)),r=$n(r,u)),s&&(t=Ga(t,0),null!=r&&(r=Ga(r,0)));const c=[];let h,d=n;const p=t.shape[0],f=vi(t);let g,m;null!=r&&(g=vi(r));for(let t=0;t<p;++t){const n=f[t],s=Yn(()=>e(n,d));if(null==r)h=s[0],d=s[1];else{const e=Yn(()=>{const e=g[t],n=Vr(xa(e),e);return{output:es(ss(s[0],e),ss(d[0],n)),newStates:d.map((t,r)=>es(ss(s[1][r],e),ss(t,n)))}});h=e.output,d=e.newStates}o&&c.push(h)}return o&&(m=di(c,1)),[h,m,d]})}Ip.className="DepthwiseConv2D",qn(Ip);class Cp extends gh{constructor(e){let t;if(super(e),null==e.cell)throw new bu("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new _p({cells:e.cell}):e.cell,null==t.stateSize)throw new bu("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new ch({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?pc(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){nh(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return Yn(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new xu("Constants support is not implemented in RNN yet.");nh(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new ch({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!p(this.stateSpec.map(e=>e.shape[e.shape.length-1]),r))throw new bu(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map(e=>new ch({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){Yn(()=>{if(!this.stateful)throw new gu("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new bu("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>ua([n,e])):[ua([n,this.cell.stateSize])];else if(null==e)Jn(this.states_),null!=this.keptStates&&(Jn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>ua([n,e])):this.states_[0]=ua([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new bu(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Jn(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!p(s.shape,a))throw new bu(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>Zn(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=$p(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new ch({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof hh){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Yn(()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=rh(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new bu(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Np((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(e){return Yn(()=>{let t=ua(e.shape);return t=Gr(t,[1,2]),t=gc(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?wc(t,[1,e]):t):this.cell.stateSize>1?[wc(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Cp.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Eh(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Cp.className="RNN",qn(Cp);class Sp extends gh{}class Tp extends Sp{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Mu(this.units,"units"),this.activation=qd(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Jc(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Jc(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Jc(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Qd(e.kernelRegularizer),this.recurrentRegularizer=Qd(e.recurrentRegularizer),this.biasRegularizer=Qd(e.biasRegularizer),this.kernelConstraint=Ku(e.kernelConstraint),this.recurrentConstraint=Ku(e.recurrentConstraint),this.biasConstraint=Ku(e.biasConstraint),this.dropout=hc([1,dc([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=hc([1,dc([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ah(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Yn(()=>{if(2!==(e=e).length)throw new bu(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Op({ones:()=>xa(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Op({ones:()=>xa(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Ic(null!=a?ss(e,a):e,this.kernel.read()),null!=this.bias&&(r=Sc(r,this.bias.read())),null!=i&&(n=ss(n,i));let o=es(r,Ic(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Hd(this.activation),useBias:this.useBias,kernelInitializer:Yc(this.kernelInitializer),recurrentInitializer:Yc(this.recurrentInitializer),biasInitializer:Yc(this.biasInitializer),kernelRegularizer:Jd(this.kernelRegularizer),recurrentRegularizer:Jd(this.recurrentRegularizer),biasRegularizer:Jd(this.biasRegularizer),activityRegularizer:Jd(this.activityRegularizer),kernelConstraint:ju(this.kernelConstraint),recurrentConstraint:ju(this.recurrentConstraint),biasConstraint:ju(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Tp.className="SimpleRNNCell",qn(Tp);class Ep extends Cp{constructor(e){e.cell=new Tp(e),super(e)}call(e,t){return Yn(()=>(null!=this.cell.dropoutMask&&(Jn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Jn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return new e(t)}}Ep.className="SimpleRNN",qn(Ep);class Rp extends Sp{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new bu("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Mu(this.units,"units"),this.activation=qd(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=qd(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Jc(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Jc(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Jc(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Qd(e.kernelRegularizer),this.recurrentRegularizer=Qd(e.recurrentRegularizer),this.biasRegularizer=Qd(e.biasRegularizer),this.kernelConstraint=Ku(e.kernelConstraint),this.recurrentConstraint=Ku(e.recurrentConstraint),this.biasConstraint=Ku(e.biasConstraint),this.dropout=hc([1,dc([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=hc([1,dc([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ah(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return Yn(()=>{if(2!==(e=e).length)throw new bu(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Op({ones:()=>xa(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Op({ones:()=>xa(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(e=ss(e,this.dropoutMask[0]));let l=Ic(e,this.kernel.read());this.useBias&&(l=Sc(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ss(s,r[0]));const u=this.recurrentKernel.read(),[c,h]=oi(u,[2*this.units,this.units],u.rank-1),d=Ic(s,c),[p,f,g]=oi(l,3,l.rank-1),[m,b]=oi(d,2,d.rank-1);a=this.recurrentActivation.apply(es(p,m)),i=this.recurrentActivation.apply(es(f,b));const x=Ic(ss(i,s),h);o=this.activation.apply(es(g,x));const y=es(ss(a,s),ss(es(1,Br(a)),o));return[y,y]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Hd(this.activation),recurrentActivation:Hd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yc(this.kernelInitializer),recurrentInitializer:Yc(this.recurrentInitializer),biasInitializer:Yc(this.biasInitializer),kernelRegularizer:Jd(this.kernelRegularizer),recurrentRegularizer:Jd(this.recurrentRegularizer),biasRegularizer:Jd(this.biasRegularizer),activityRegularizer:Jd(this.activityRegularizer),kernelConstraint:ju(this.kernelConstraint),recurrentConstraint:ju(this.recurrentConstraint),biasConstraint:ju(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Rp.className="GRUCell",qn(Rp);class Ap extends Cp{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Rp(e),super(e)}call(e,t){return Yn(()=>(null!=this.cell.dropoutMask&&(Jn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Jn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Ap.className="GRU",qn(Ap);class Fp extends Sp{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Mu(this.units,"units"),this.activation=qd(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=qd(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Jc(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Jc(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Jc(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Qd(e.kernelRegularizer),this.recurrentRegularizer=Qd(e.recurrentRegularizer),this.biasRegularizer=Qd(e.biasRegularizer),this.kernelConstraint=Ku(e.kernelConstraint),this.recurrentConstraint=Ku(e.recurrentConstraint),this.biasConstraint=Ku(e.biasConstraint),this.dropout=hc([1,dc([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=hc([1,dc([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;if(e=ah(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,s=this.units;n=new((t=class extends Fc{apply(t,n){const r=e.apply([s]),a=(new _c).apply([s]),i=e.apply([2*s]);return kc(kc(r,a),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Yn(()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new bu(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Op({ones:()=>xa(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Op({ones:()=>xa(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.recurrentDropoutMask;let i,o,l,u;0<this.dropout&&this.dropout<1&&(e=ss(e,this.dropoutMask[0]));let c=Ic(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ss(s,a[0])),c=es(c,Ic(s,this.recurrentKernel.read())),this.useBias&&(c=Sc(c,this.bias.read()));const[h,d,p,f]=oi(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(d),l=es(ss(o,r),ss(i,this.activation.apply(p))),u=this.recurrentActivation.apply(f);const g=ss(u,this.activation.apply(l));return[g,g,l]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Hd(this.activation),recurrentActivation:Hd(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yc(this.kernelInitializer),recurrentInitializer:Yc(this.recurrentInitializer),biasInitializer:Yc(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Jd(this.kernelRegularizer),recurrentRegularizer:Jd(this.recurrentRegularizer),biasRegularizer:Jd(this.biasRegularizer),activityRegularizer:Jd(this.activityRegularizer),kernelConstraint:ju(this.kernelConstraint),recurrentConstraint:ju(this.recurrentConstraint),biasConstraint:ju(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Fp.className="LSTMCell",qn(Fp);class Dp extends Cp{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Fp(e),super(e)}call(e,t){return Yn(()=>(null!=this.cell.dropoutMask&&(Jn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Jn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Dp.className="LSTM",qn(Dp);class _p extends Sp{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Yn(()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;nh(e)&&(e=e[0]),e=e,this.cells.forEach((n,s)=>{ac(`RNNCell_${s}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Eh(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return lh(e)}setWeights(e){const t=[];for(const n of this.cells){const s=e.splice(n.weights.length);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}uh(t)}}function Op(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>Tc(t(),n),i=()=>Ec(a,t,s);return!r||r<=1?Zn(i().clone()):Array(r).fill(void 0).map(i).map(e=>Zn(e.clone()))}var Mp,Lp,zp;_p.className="StackedRNNCells",qn(_p);class Bp extends Cp{constructor(e){if(e.unroll)throw new xu("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new xu("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new ch({ndim:5})]}call(e,t){return Yn(()=>{if(null!=this.cell.dropoutMask&&(Jn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Jn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new bu("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Yn(()=>{const{stateSize:t}=this.cell,n=this.computeSingleOutputShape(e.shape),s=ua([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]})}resetStates(e,t=!1){Yn(()=>{if(!this.stateful)throw new gu("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new bu("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>ua(r)):[ua(r)];else if(null==e)Jn(this.states_),null!=this.keptStates&&(Jn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ua(r)):this.states_[0]=ua(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new bu(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Jn(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!p(n.shape,s))throw new bu(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>Zn(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?4:3],u=op(e[o?3:2],s[0],r,a[0],i[0]),c=op(l,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,u,c]:[u,c,n]]}}Bp.className="ConvRNN2D";class Pp extends Fp{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Mu(this.filters,"filters"),this.kernelSize=ip(n,2,"kernelSize"),this.kernelSize.forEach(e=>Mu(e,"kernelSize")),this.strides=ip(s||1,2,"strides"),this.strides.forEach(e=>Mu(e,"strides")),this.padding=r||"valid",nc(this.padding),this.dataFormat=a||"channelsLast",tc(this.dataFormat),this.dilationRate=ip(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>Mu(e,"dilationRate"))}build(e){var t;e=ah(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new bu(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=this.kernelSize.concat([e[n],4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Fc{apply(e,t){return yc([n.apply([s]),ca([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Yn(()=>{if(3!==e.length)throw new bu(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Op({ones:()=>xa(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?ss(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Op({ones:()=>xa(r),rate:this.recurrentDropout,training:n,count:4}));const d=this.recurrentDropoutMask;let p=o(r,d,0),f=o(r,d,1),g=o(r,d,2),m=o(r,d,3);const[b,x,y,k]=oi(this.kernel.read(),4,3),[w,v,I,$]=this.useBias?oi(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,b,w,this.padding),u=this.inputConv(u,x,v,this.padding),c=this.inputConv(c,y,I,this.padding),h=this.inputConv(h,k,$,this.padding);const[N,C,S,T]=oi(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,N),f=this.recurrentConv(f,C),g=this.recurrentConv(g,S),m=this.recurrentConv(m,T);const E=this.recurrentActivation.apply(es(l,p)),R=this.recurrentActivation.apply(es(u,f)),A=es(ss(R,a),ss(E,this.activation.apply(es(c,g)))),F=ss(this.recurrentActivation.apply(es(h,m)),this.activation.apply(A));return[F,F,A]})}getConfig(){const e=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(super.getConfig(),["units"]);return Object.assign({},e,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,s){const r=Xs(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Sc(r,n,this.dataFormat):r}recurrentConv(e,t){return Xs(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Pp.className="ConvLSTM2DCell",qn(Pp);class Wp extends Bp{constructor(e){const t=new Pp(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Wp.className="ConvLSTM2D",qn(Wp);class Up extends gh{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Ec(()=>Tc(n,this.rate,s,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Up.className="Dropout",qn(Up);class Vp extends Up{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Vp.className="SpatialDropout1D",qn(Vp);class Gp extends gh{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Mu(this.units,"units"),this.activation=qd(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Jc(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Jc(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ku(e.kernelConstraint),this.biasConstraint=Ku(e.biasConstraint),this.kernelRegularizer=Qd(e.kernelRegularizer),this.biasRegularizer=Qd(e.biasRegularizer),this.activityRegularizer=Qd(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=ah(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=ah(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e),s=zu(this.activation.getClassName());let r;return null!=s?r=Ic(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Ic(n,this.kernel.read()),null!=this.bias&&(r=Sc(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const e={units:this.units,activation:Hd(this.activation),useBias:this.useBias,kernelInitializer:Yc(this.kernelInitializer),biasInitializer:Yc(this.biasInitializer),kernelRegularizer:Jd(this.kernelRegularizer),biasRegularizer:Jd(this.biasRegularizer),activityRegularizer:Jd(this.activityRegularizer),kernelConstraint:ju(this.kernelConstraint),biasConstraint:ju(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Gp.className="Dense",qn(Gp);class Hp extends gh{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=ah(e);for(const t of e.slice(1))if(null==t)throw new bu(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],cc(e,1)]}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);let n=rh(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=$n(n,e)}return function(e){if(e.rank<=1)throw new bu(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],cc(e.shape,1)];return Es(e,t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Hp.className="Flatten",qn(Hp);class jp extends gh{constructor(e){super(e),this.supportsMasking=!0,this.activation=qd(e.activation)}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e);return this.activation.apply(n)})}getConfig(){const e={activation:Hd(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}jp.className="Activation",qn(jp);class qp extends gh{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Yn(()=>{return e=rh(e),t=e,n=this.n,Yn(()=>{if(2!==t.shape.length)throw new bu(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return wc(gc(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}qp.className="RepeatVector",qn(qp);class Kp extends gh{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new bu("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=cc(e);if(null!==a){if(0===r||i%r!=0)throw new bu(n);s[a]=i/r}else if(i!==r)throw new bu(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return Es(n,r)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Kp.className="Reshape",qn(Kp);class Xp extends gh{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=pc(1,e.dims.length+1);if(!p(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ch({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=ah(e)).slice();return this.dims.forEach((n,s)=>{t[s+1]=e[n]}),t}call(e,t){return $n(rh(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Xp.className="Permute",qn(Xp);class Yp extends gh{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=rh(e);return ls(ba(n,this.maskValue),-1)}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e),s=ls(ba(n,this.maskValue),-1,!0);return ss(n,pn(s,n.dtype))})}}Yp.className="Masking",qn(Yp);class Jp extends gh{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=null==e.inputLength?[t,null]:[t].concat($u(e.inputLength))}this.inputDim=e.inputDim,Mu(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Mu(this.outputDim,"outputDim"),this.embeddingsInitializer=Jc(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Qd(e.embeddingsRegularizer),this.activityRegularizer=Qd(e.activityRegularizer),this.embeddingsConstraint=Ku(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Yn(()=>this.maskZero?(e=rh(e),ba(e,pr(e))):null)}computeOutputShape(e){if(e=ah(e),null==this.inputLength)return[...e,this.outputDim];const t=$u(this.inputLength);if(t.length!==e.length-1)throw new bu(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new bu(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);let n=rh(e);"int32"!==n.dtype&&(n=fc(n,"int32"));const s=$c(this.embeddings.read(),Es(n,[n.size]));return Es(s,ah(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Yc(this.embeddingsInitializer),embeddingsRegularizer:Jd(this.embeddingsRegularizer),activityRegularizer:Jd(this.activityRegularizer),embeddingsConstraint:ju(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Jp.className="Embedding",qn(Jp);class Zp extends gh{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new xu}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new bu("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[ah(e)]),(e=e).length<2)throw new bu(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Fu(t),t.length>1)throw new bu(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map(e=>e.length);this.reshapeRequired=-1!==e.indexOf(null)||1!==Fu(s).length}call(e,t){return Yn(()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const s=dc(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=gc(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=Es(s,[r].concat(cc(e.slice(1))));i=$n(i,[1,0]),i=Es(i,a),t.push(i),n=!0}else if(e>1){const r=pc(1,e).concat([0]);t.push($n(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Es($n(Es(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(pc(0,r-1));s=$n(s,e)}return s}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Fu(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Yn(()=>{if(null==t)return null;if(!Array.isArray(t))throw new bu("`mask` should be an Array");if(!Array.isArray(e))throw new bu("`inputs` should be an Array");if(t.length!==e.length)throw new bu(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:yr(e,0)))[0];for(let e=1;e<t.length-1;++e)n=ta(n,t[e]);return n})}}class Qp extends Zp{constructor(e){super(e)}mergeFunction(e){return Yn(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=es(t,e[n]);return t})}}Qp.className="Add",qn(Qp);class ef extends Zp{constructor(e){super(e)}mergeFunction(e){return Yn(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ss(t,e[n]);return t})}}ef.className="Multiply",qn(ef);class tf extends Zp{constructor(e){super(e)}mergeFunction(e){return Yn(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=es(t,e[n]);return ss(1/e.length,t)})}}tf.className="Average",qn(tf);class nf extends Zp{constructor(e){super(e)}mergeFunction(e){return Yn(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=oa(t,e[n]);return t})}}nf.className="Maximum",qn(nf);class sf extends Zp{constructor(e){super(e)}mergeFunction(e){return Yn(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=da(t,e[n]);return t})}}sf.className="Minimum",qn(sf);class rf extends Zp{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new bu("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(p(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new bu("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Yn(()=>yc(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new bu("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new bu("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new bu("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new bu(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Yn(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const s=[];for(let n=0;n<e.length;++n)s.push(null==t[n]?pn(xa(e[n]),"bool"):t[n].rank<e[n].rank?yr(t[n],-1):t[n]);const r=Fs(s,this.axis);return os(r,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function af(e,t){for(;e<0;)e+=t;return e}rf.className="Concatenate",qn(rf);class of extends Zp{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){l(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new xu("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new bu(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new bu(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>af(t,e[n].shape.length)):[af(this.axes,n.shape.length),af(this.axes,s.shape.length)],this.normalize&&(n=Rh(n,t[0]),s=Rh(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new xu("batchDot is not implemented for tensors of 4D or higher rank yet");if(l(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),l(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new xu("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Yn(()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=Es(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=Es(e,e.shape.concat(t))}else n=0;if(i=2===e.shape.length&&2===t.shape.length?a[0]===a[1]?Gr(ss(e,t),a[0]):Gr(ss($n(e,[1,0]),t),a[1]):vn(e,t,a[0]!==e.shape.length-1,a[1]===t.shape.length-1),n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=hi(i,t)}return 1===i.shape.length&&(i=yr(i,1)),i})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[af(this.axes,e.length),af(this.axes,t.length)],n}computeOutputShape(e){l(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new xu("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}of.className="Dot",qn(of);class lf extends gh{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e);return Ec(()=>es(vc(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}lf.className="GaussianNoise",qn(lf);class uf extends gh{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Yn(()=>{this.invokeCallHook(e,t);const n=rh(e);return this.rate>0&&this.rate<1?Ec(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return ss(n,vc(n.shape,1,e))},()=>n,t.training||!1):n})}}uf.className="GaussianDropout",qn(uf);class cf extends gh{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||rh(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Yn(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Ec(()=>{const t=rh(e),s=-1.7580993408473766;let r=Sr(za(n),this.rate);r=fc(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=es(ss(t,r),ss(es(r,-1),s));return es(ss(o,a),i)},()=>rh(e),t.training||!1)}return e})}}function hf(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=zs(e,t,n,s,r,a);else if(3===e.rank)i=Bs(e,t,n,s,r,a);else{if(4!==e.rank)throw new xu(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Ps(e,t,n,s,r,a)}return i}cf.className="AlphaDropout",qn(cf);class df extends gh{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Jc(e.betaInitializer||"zeros"),this.gammaInitializer=Jc(e.gammaInitializer||"ones"),this.movingMeanInitializer=Jc(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Jc(e.movingVarianceInitializer||"ones"),this.betaConstraint=Ku(e.betaConstraint),this.gammaConstraint=Ku(e.gammaConstraint),this.betaRegularizer=Qd(e.betaRegularizer),this.gammaRegularizer=Qd(e.gammaRegularizer)}build(e){e=ah(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new bu(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new ch({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Yn(()=>{const n=null!=t.training&&t.training,s=rh(e),r=s.shape,a=r.length,i=pc(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=ku(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!p(u,pc(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Es(this.movingMean.read(),l),t=Es(this.movingVariance.read(),l),n=this.center?Es(this.beta.read(),l):null,r=this.scale?Es(this.gamma.read(),l):null;return hf(s,e,t,n,r,this.epsilon)}return hf(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,f]=function(e,t,n,s,r=.001){return p(s.slice().sort(),pc(0,e.rank-1))?function(e,t,n,s,r=.001){return Yn(()=>{const a=ma(e,s),i=a.mean,o=a.variance;return[hf(e,i,o,n,t,r),i,o]})}(e,t,n,s,r):function(e,t,n,s,r=.001){return Yn(()=>{const a=ma(e,s),i=a.mean,o=a.variance,l=[];for(const t of pc(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Es(i,l),c=Es(o,l),h=null==t?null:Es(t,l),d=null==n?null:Es(n,l);return[hf(e,u,c,d,h,r),i,o]})}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),g=(e,t,n)=>{Yn(()=>{const s=1-n,r=e.read(),a=ss(Vr(r,t),s);e.write(Vr(r,a))})};return(()=>{g(this.movingMean,d,this.momentum),g(this.movingVariance,f,this.momentum)})(),h})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yc(this.betaInitializer),gammaInitializer:Yc(this.gammaInitializer),movingMeanInitializer:Yc(this.movingMeanInitializer),movingVarianceInitializer:Yc(this.movingVarianceInitializer),betaRegularizer:Jd(this.betaRegularizer),gammaRegularizer:Jd(this.gammaRegularizer),betaConstraint:ju(this.betaConstraint),gammaConstraint:ju(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}df.className="BatchNormalization",qn(df);class pf extends gh{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Jc(e.betaInitializer||"zeros"),this.gammaInitializer=Jc(e.gammaInitializer||"ones"),this.betaRegularizer=Qd(e.betaRegularizer),this.gammaRegularizer=Qd(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=ah(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Fu(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map(t=>e[t]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,t){const n=rh(e),s=n.shape,r=s.length;return Yn(()=>{let{mean:e,variance:t}=ma(n,this.axis,!0);const a=ku(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?Es(e,a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=wr(e,u),t=wr(t,u),o=wr(o,c),l=wr(l,c),hf(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yc(this.betaInitializer),gammaInitializer:Yc(this.gammaInitializer),betaRegularizer:Jd(this.betaRegularizer),gammaRegularizer:Jd(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}pf.className="LayerNormalization",qn(pf);class ff extends gh{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new bu(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new bu(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new bu(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new ch({ndim:4})]}computeOutputShape(e){let t,n;return e=ah(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Yn(()=>{return t=rh(e),n=this.padding,s=this.dataFormat,Yn(()=>{if(4!==t.rank)throw new bu(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new bu("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new bu(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],ya(t,e)});var t,n,s})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function gf(e,t,n,s,r,a){return Yn(()=>{let i;tc(r),sc(a),nc(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=up(e,r);const o="same"===s?"same":"valid";return i="max"===a?aa(e,t,n,o):Rs(e,t,n,o),"channelsFirst"===r&&(i=$n(i,[0,3,1,2])),i})}function mf(e,t,n,s,r,a){return Yn(()=>{let i;tc(r),sc(a),nc(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=cp(e,r);const o="same"===s?"same":"valid";return i="max"===a?ia(e,t,n,o):As(e,t,n,o),"channelsFirst"===r&&(i=$n(i,[0,4,1,2,3])),i})}ff.className="ZeroPadding2D",qn(ff);class bf extends gh{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new bu(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Mu(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new bu(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Mu(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,nc(this.padding),this.inputSpec=[new ch({ndim:3})]}computeOutputShape(e){const t=op((e=ah(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Yn(()=>{this.invokeCallHook(e,t),e=gc(rh(e),2);const n=this.poolingFunction(rh(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return hi(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class xf extends bf{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),gf(e,t,n,s,r,"max")}}xf.className="MaxPooling1D",qn(xf);class yf extends bf{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),gf(e,t,n,s,r,"avg")}}yf.className="AveragePooling1D",qn(yf);class kf extends gh{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new bu(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Mu(this.poolSize,"poolSize"),Mu(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,tc(this.dataFormat),nc(this.padding),this.inputSpec=[new ch({ndim:4})]}computeOutputShape(e){e=ah(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=op(t,this.poolSize[0],this.padding,this.strides[0]),n=op(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Yn(()=>(this.invokeCallHook(e,t),this.poolingFunction(rh(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class wf extends kf{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),gf(e,t,n,s,r,"max")}}wf.className="MaxPooling2D",qn(wf);class vf extends kf{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),gf(e,t,n,s,r,"avg")}}vf.className="AveragePooling2D",qn(vf);class If extends gh{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new bu(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Mu(this.poolSize,"poolSize"),Mu(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,tc(this.dataFormat),nc(this.padding),this.inputSpec=[new ch({ndim:5})]}computeOutputShape(e){e=ah(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=op(t,this.poolSize[0],this.padding,this.strides[0]),n=op(n,this.poolSize[1],this.padding,this.strides[1]),s=op(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return Yn(()=>(this.invokeCallHook(e,t),this.poolingFunction(rh(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class $f extends If{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),mf(e,t,n,s,r,"max")}}$f.className="MaxPooling3D",qn($f);class Nf extends If{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return tc(r),nc(s),mf(e,t,n,s,r,"avg")}}Nf.className="AveragePooling3D",qn(Nf);class Cf extends gh{constructor(e){super(e),this.inputSpec=[new ch({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new xu}}class Sf extends Cf{constructor(e){super(e||{})}call(e,t){return Yn(()=>{const t=rh(e);return la(t,1)})}}Sf.className="GlobalAveragePooling1D",qn(Sf);class Tf extends Cf{constructor(e){super(e||{})}call(e,t){return Yn(()=>{const t=rh(e);return Ur(t,1)})}}Tf.className="GlobalMaxPooling1D",qn(Tf);class Ef extends gh{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,tc(this.dataFormat),this.inputSpec=[new ch({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new xu}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Rf extends Ef{call(e,t){return Yn(()=>{const t=rh(e);return la(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Rf.className="GlobalAveragePooling2D",qn(Rf);class Af extends Ef{call(e,t){return Yn(()=>{const t=rh(e);return Ur(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Af.className="GlobalMaxPooling2D",qn(Af);class Ff extends gh{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Eh(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Df extends Ff{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=ah(e)).length<3)throw new bu(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=ah(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t);return[n[0],e[1]].concat(n.slice(1))}call(e,t){return Yn(()=>Np((e,n)=>[rh(this.layer.call(e,t)),[]],e=rh(e),[],!1,null,null,!1,!0)[1])}}Df.className="TimeDistributed",qn(Df);class _f extends Ff{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Eh(n),t.goBackwards=!0!==t.goBackwards;const s={};if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Eh(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,_u(Qu,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new xu("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Iu(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=$p(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new bu("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map(e=>new ch({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new xu("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof hh;for(const e of a)if(e instanceof hh!==o)throw new bu("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Yn(()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Ga(r,1)),"concat"===this.mergeMode?i=yc([s,r]):"sum"===this.mergeMode?i=es(s,r):"ave"===this.mergeMode?i=ss(.5,es(s,r)):"mul"===this.mergeMode?i=ss(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){ac(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),ac(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Eh(t.layer);if(delete t.layer,null!=t.numConstants)throw new xu("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function Of(e){return new kp(e)}function Mf(e){return new Up(e)}function Lf(e){return new xf(e)}function zf(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&l("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}_f.className="Bidirectional",qn(_f),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Mp||(Mp={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(Lp||(Lp={})),function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(zp||(zp={}));const Bf=Ii;class Pf extends n{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new t(this,Kn())}nextDataId(){return Pf.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,V().get("IS_NODE")&&Oo("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&C(n[0])){const r=n.map(e=>Ge(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?Mo(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>He(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return dn(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return Kn().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Ve();return e(),{kernelMs:Ve()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){zf([e],"where");const t=this.readSync(e.dataId);return Bf(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Wf(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}Pf.nextDataId=0;const Uf={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;zf(t,"abs");let s=new Float32Array(d(t.shape));return s=Wf(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}};function Vf(e){return(t,n,s,r,a)=>{const i=cr(t,n),o=i.length,l=A(i),u=w(a,d(i)),c=t.length,h=n.length,p=A(t),f=A(n),g=lr(t,i),m=lr(n,i);if(g.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=B(t,o,l),a=n.slice(-c);g.forEach(e=>a[e]=0);const i=z(a,c,p),d=n.slice(-h);m.forEach(e=>d[e]=0);const b=z(d,h,f);u[t]=e(s[i],r[b])}return[u,i]}}function Gf(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Hf={kernelName:"Complex",backendName:"cpu",kernelFunc:Gf};function jf(e,t,n="float32"){if("complex64"===n)return Gf({inputs:{real:jf(e,t,"float32"),imag:jf(e,t,"float32")},backend:e});const s=O(d(t),n);return e.makeTensorInfo(t,n,s)}function qf(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Kf={kernelName:"Identity",backendName:"cpu",kernelFunc:qf};function Xf(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Yf={kernelName:"Real",backendName:"cpu",kernelFunc:Xf};function Jf(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return qf({inputs:{x:r},backend:n});const e=jf(n,r.shape,r.dtype),t=Jf({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Gf({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=Xf({inputs:{input:r},backend:n}),t=Jf({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!I(r.dtype,a)){const e=qf({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=Ue([0],r.dtype),[s,a]=Vf((e,t)=>e!==t?1:0)(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const Zf={kernelName:"Cast",backendName:"cpu",kernelFunc:Jf};function Qf(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;zf([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?tl(l):l,h="string"===a.dtype?tl(u):u,d=s||a.dtype,[p,f]=t(a.shape,i.shape,c,h,d);return o.makeTensorInfo(f,d,p)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Jf({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.imag,r=o.data.get(t.complexTensorInfos.real.dataId).values,l=o.data.get(s.dataId).values,u=Jf({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(u.dataId),h=c.complexTensorInfos.imag,d=o.data.get(c.complexTensorInfos.real.dataId).values,p=o.data.get(h.dataId).values,[f,g,m]=n(a.shape,i.shape,r,l,d,p),b=o.makeTensorInfo(m,"float32",f),x=o.makeTensorInfo(m,"float32",g),y=Gf({inputs:{real:b,imag:x},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(u),o.disposeIntermediateTensorInfo(b),o.disposeIntermediateTensorInfo(x),y}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function eg(e){return(t,n,s,r,a,i)=>{const o=cr(t,n),l=d(o),u=o.length,c=A(o),h=w("float32",l),p=w("float32",l),f=lr(t,o),g=lr(n,o),m=Mo(s,r),b=Mo(a,i),x=t.length,y=A(t),k=n.length,v=A(n);if(f.length+g.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%b.length,r=e(m[2*n],m[2*n+1],b[2*s],b[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=B(t,u,c),s=n.slice(-x);f.forEach(e=>s[e]=0);const r=z(s,x,y),a=n.slice(-k);g.forEach(e=>a[e]=0);const i=z(a,k,v),o=e(m[2*r],m[2*r+1],b[2*i],b[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const tg=Vf((e,t)=>e+t),ng=Qf("Add",tg,eg((e,t,n,s)=>({real:e+n,imag:t+s}))),sg={kernelName:"Add",backendName:"cpu",kernelFunc:ng};function rg(e,t,n,s,r){const a=d(s),i=O(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function ag(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=dn([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(s?1:t.size>0?i.get(o,a)+t.get(o,r):i.get(o,a)+1,o,a)}return i}function ig(e){return(t,n,s)=>{const r=w(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function og(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(zf(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=d(i.shape),c=n||i.dtype,h=v(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function lg(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(zf(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const ug=ig(e=>Math.ceil(e)),cg={kernelName:"Ceil",backendName:"cpu",kernelFunc:lg("Ceil",ug)};function hg(e,t,n,s){const r=v(n,d(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=d(e.shape);r.set(e.vals,t),t+=n})}else{let s=0;e.forEach(e=>{const a="string"===n?tl(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]})}return r}const dg=Vf((e,t)=>e===t?1:0),pg=Qf("Equal",dg,null,"bool"),fg={kernelName:"Equal",backendName:"cpu",kernelFunc:pg},gg=ig(e=>Math.exp(e)),mg=lg("Exp",gg),bg={kernelName:"Exp",backendName:"cpu",kernelFunc:mg},xg=ig(e=>Math.expm1(e)),yg={kernelName:"Expm1",backendName:"cpu",kernelFunc:lg("Expm1",xg)},kg=ig(e=>Math.floor(e)),wg={kernelName:"Floor",backendName:"cpu",kernelFunc:lg("Floor",kg)};function vg(e,t,n,s,r,a,i,o,l){const u=dn([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}function Ig(e,t,n){const s=dn(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=t.locToIndex([r[0],r[2]]);r[2]=t.values[a];const i=e.locToIndex(r);s.values[n]=e.values[i]}return s}const $g=Vf((e,t)=>e>t?1:0),Ng={kernelName:"Greater",backendName:"cpu",kernelFunc:Qf("Greater",$g,null,"bool")},Cg=Vf((e,t)=>e>=t?1:0),Sg={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Qf("GreaterEqual",Cg,null,"bool")},Tg=Vf((e,t)=>e<t?1:0),Eg={kernelName:"Less",backendName:"cpu",kernelFunc:Qf("Less",Tg,null,"bool")},Rg=Vf((e,t)=>e<=t?1:0),Ag={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Qf("LessEqual",Rg,null,"bool")};function Fg(e,t,n){const s=(t-e)/(n-1),r=O(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const Dg=ig(e=>Math.log(e)),_g={kernelName:"Log",backendName:"cpu",kernelFunc:lg("Log",Dg)};function Og(e,t,n,s){const r=w(s,d(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}const Mg=Vf((e,t)=>Math.max(e,t)),Lg={kernelName:"Maximum",backendName:"cpu",kernelFunc:Qf("Maximum",Mg)},zg=Vf((e,t)=>Math.min(e,t)),Bg={kernelName:"Minimum",backendName:"cpu",kernelFunc:Qf("Minimum",zg)},Pg=Vf((e,t)=>e*t),Wg=eg((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n})),Ug=Qf("Multiply",Pg,Wg),Vg={kernelName:"Multiply",backendName:"cpu",kernelFunc:Ug};function Gg(e,t,n){const s=We(-1,n);return Pg([],t,s,e,n)}const Hg={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;zf(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=Gg(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},jg=Vf((e,t)=>e!==t?1:0),qg={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Qf("NotEqual",jg,null,"bool")};function Kg(e,t,n,s,r){const a=t.length,i=d(t),o=A(t),l=A(r),u=w(n,d(r));for(let t=0;t<i;++t){const n=B(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[z(r,a,l)]=e[t]}return u}function Xg(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;zf(r,"transpose");const i=new Array(r.shape.length);for(let e=0;e<i.length;e++)i[e]=r.shape[a[e]];const o=Kg(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(o,i,r.dtype),shape:i,dtype:r.dtype}}const Yg={kernelName:"Transpose",backendName:"cpu",kernelFunc:Xg};function Jg(e,t,n,s){const[r,a]=Kr(e,s),i=dt(t,"int32"),o=O(d(r),i),l=d(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const Zg={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;zf(r,"prod");const o=r.shape.length,l=y(a,r.shape),u=Jr(l,o);let c=l,h=r;const d=[];null!=u&&(h=Xg({inputs:{x:r},backend:n,attrs:{perm:u}}),d.push(h),c=Qr(c.length,o));const p=n.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=Jg(h.shape,h.dtype,p,c);let b=g;return i&&(b=Xr(g,l)),d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(b,m,f)}};function Qg(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return O(0,s);const r=O(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const em=ig(e=>1/Math.sqrt(e)),tm={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:lg("Rsqrt",em)};function nm(e,t,n,s,r){const a=Pn(s,t,n),i=d(n),o=A(s);if(a){const n=Wn(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=dn(s,r,"string"===r?tl(e):e),u=dn(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map((e,n)=>e+t[n]);u.set(l.get(...s),...n)}return"string"===r?nl(u.values):u.values}function sm(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;zf(r,"slice");const[o,l]=Un(r,a,i);Tn(r,o,l);const u=nm(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const rm={kernelName:"Slice",backendName:"cpu",kernelFunc:sm};function am(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${o}`);return[v(n,0),[0,h],v(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=l)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${l}`);++f[n],d=d&&n>=p,p=n}let g=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,g=g&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(g&&d){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=v(n,t*h),d=v(r,t),p=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=(0===n?0:f[n-1])+p[n];p[n]++;for(let n=0;n<h;++n)a[r*h+n]=e[t*h+n];d[r]=s[t],c[t]=r}for(let e=0;e<l;++e)if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=i}return[a,[t,h],d,u,c]}}function im(e,t,n,s,r){const a=d(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,l.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(`Input to reshape is a SparseTensor with ${a}\n          dense values, but the requested shape requires a multiple of ${u}. inputShape=${s} outputShape= ${l}`);l[c]=e}const h=d(l);if(h!==a)throw new Error(`Input to reshape is a tensor with ${a} dense values, but the requested shape has ${h}. inputShape=${s} outputShape=${l}`);const p=s.length,f=[];if(p>0){f[p-1]=1;for(let e=p-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}const g=[];if(o>0){g[o-1]=1;for(let e=o-2;e>=0;--e)g[e]=g[e+1]*l[e+1]}const m=v(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<p;++s)n+=e[t*p+s]*f[s];for(let e=0;e<o;++e)m[t*o+e]=Math.trunc(n/g[e]),n%=g[e]}return[m,[i,o],l]}function om(e,t,n,s,r,a=!1,i=0){const o=s.length;if(o!==r.length)throw new Error("segmentIds and indices should have same size.");const l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=v(n,h.reduce((e,t)=>e*t,1));if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,g=0,m=r[p];for(;;){let t=0;if(f<o){if(t=r[f],m===t){++f;continue}if(m>=t)throw new Error("segment ids are not increasing")}if(m<0||m>=c)throw new Error(`Segment id ${m} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);m>g&&d.fill(i,g*u,m*u);for(let t=p;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(`Bad: indices[${t}] == ${s[t]} out of range [0, ${l[0]})`);for(let t=0;t<u;t++)d[m*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[m*u+e]/=f-p;if(p=f,++f,g=m+1,m=t,f>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const lm=Vf((e,t)=>{const n=e-t;return n*n}),um={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Qf("SquaredDifference",lm)};function cm(e,t,n,s){const r=dn(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}class hm{constructor(e,t,n,s,r,a){this.separator=Ge(e),this.nGramWidths=t,this.leftPad=Ge(n),this.rightPad=Ge(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(d);const p=n[s+i];let f=0;const g=e=>e.forEach(e=>p[f++]=e);for(let e=0;e<l;++e)g(this.leftPad),g(this.separator);for(let t=0;t<c-1;++t)g(e[h+t]),g(this.separator);if(c>0){g(e[h+c-1]);for(let e=0;e<u;++e)g(this.separator),g(this.rightPad)}else{for(let e=0;e<u-1;++e)g(this.rightPad),g(this.separator);g(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=v("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach(e=>{s+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach(a=>{const o=this.getNumNGrams(t[n+1]-t[n],a);this.createNGrams(e,s,i,r,o,a),r+=o}),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;this.createNGrams(e,s,i,r,1,a+2*this.padWidth)}}return[i,a]}}function dm(e,t,n,s,r,a,i,o){return new hm(n,s,r,a,i,o).compute(e,t)}function pm(e,t,n){if(!e.length)return[];if(0===t.length){const t=new Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.subarray(n,n+1);return t}if(1===t.length){const s=t[0],r=[];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return n&&0===e.length||r.push(e),r}const s=[];let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}return s}function fm(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=pm(e[l],t,n),u=s.length;o[l]=u,a+=u,i=Math.max(i,u),r.push(...s)}const l=v("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}function gm(e,t){const n=v("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Pe(e[s]).modulo(t).getLowBitsUnsigned();return n}const mm=Vf((e,t)=>e-t),bm=Qf("Sub",mm,eg((e,t,n,s)=>({real:e-n,imag:t-s}))),xm={kernelName:"Sub",backendName:"cpu",kernelFunc:bm};function ym(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=dn(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const km=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function wm(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);wm(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(o(e,n,t),km(e[s],r)>0&&o(e,n,s);a<i;){for(o(e,a,i),a++,i--;km(e[a],r)<0;)a+=1;for(;km(e[i],r)>0;)i-=1}0===km(e[n],r)?o(e,n,i):(i+=1,o(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function vm(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=w(n,i*s),u=w("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach((e,t)=>i[t]={value:e,index:t}),s<i.length&&(wm(i,s),i=i.slice(0,s)),r&&i.sort(km);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,d[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[dn(c,n,l),dn(c,"int32",u)]}function Im(e,t,n,s){const r=y(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new et(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const d=new et(h,s);u.forEach((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)d.set(l.get(n,e,s),n,t,s)});const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:o}}var $m={__proto__:null,simpleAbsImpl:Wf,addImpl:tg,bincountImpl:rg,bincountReduceImpl:ag,ceilImpl:ug,concatImpl:hg,equalImpl:dg,expImpl:gg,expm1Impl:xg,floorImpl:kg,gatherNdImpl:vg,gatherV2Impl:Ig,greaterImpl:$g,greaterEqualImpl:Cg,lessImpl:Tg,lessEqualImpl:Rg,linSpaceImpl:Fg,logImpl:Dg,maxImpl:Og,maximumImpl:Mg,minimumImpl:zg,multiplyImpl:Pg,negImpl:Gg,notEqualImpl:jg,prodImpl:Jg,rangeImpl:Qg,rsqrtImpl:em,sliceImpl:nm,sparseFillEmptyRowsImpl:am,sparseReshapeImpl:im,sparseSegmentReductionImpl:om,squaredDifferenceImpl:lm,stridedSliceImpl:cm,stringNGramsImpl:dm,stringSplitImpl:fm,stringToHashBucketFastImpl:gm,subImpl:mm,tileImpl:ym,topKImpl:vm,transposeImpl:Kg,uniqueImpl:Im};Qn("cpu",()=>new Pf,1);const Nm=og("Elu",e=>e>=0?e:Math.exp(e)-1),Cm={kernelName:"Elu",backendName:"cpu",kernelFunc:Nm};function Sm(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;zf([r],"leakyRelu");const i=d(r.shape),o=n.data.get(r.dataId).values,l=w("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Tm={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:Sm},Em=Vf((e,t)=>e<0?t*e:e);function Rm(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;zf([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Em(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const Am={kernelName:"Prelu",backendName:"cpu",kernelFunc:Rm},Fm=og("Relu",e=>Math.max(0,e)),Dm={kernelName:"Relu",backendName:"cpu",kernelFunc:Fm},_m=og("Relu6",e=>Math.min(Math.max(0,e),6)),Om={kernelName:"Relu6",backendName:"cpu",kernelFunc:_m},Mm=og("Sigmoid",e=>1/(1+Math.exp(-e))),Lm={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:Mm};function zm(e,t,n,s,r){if("linear"===n)return qf({inputs:{x:t},backend:e});if("relu"===n)return Fm({inputs:{x:t},backend:e});if("elu"===n)return Nm({inputs:{x:t},backend:e});if("relu6"===n)return _m({inputs:{x:t},backend:e});if("prelu"===n)return Rm({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Sm({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return Mm({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Bm(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=d(r.shape),o=x(a,i),u=d(o);l(i===u,()=>`The new shape (${o}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(r.dataId);const c=n.data.get(r.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=o,e.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Pm={kernelName:"Reshape",backendName:"cpu",kernelFunc:Bm};function Wm(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;zf([r,a],"matMul");const u=r.shape.length,c=a.shape.length,h=i?r.shape[u-2]:r.shape[u-1],p=o?a.shape[c-1]:a.shape[c-2],f=i?r.shape[u-1]:r.shape[u-2],g=o?a.shape[c-2]:a.shape[c-1],m=r.shape.slice(0,-2),b=a.shape.slice(0,-2),x=d(m),y=d(b);l(u>=2&&c>=2&&(x===y||1===x||1===y),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${b}).`);const k=(x>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([f,g]);l(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);const w=o?[y,g,p]:[y,p,g],v=Bm({inputs:{x:r},backend:n,attrs:{shape:i?[x,h,f]:[x,f,h]}}),I=Bm({inputs:{x:a},backend:n,attrs:{shape:w}}),$=i?v.shape[1]:v.shape[2],N=i?v.shape[2]:v.shape[1],C=o?I.shape[1]:I.shape[2],S=Math.max(x,y),T=n.data.get(v.dataId).values,E=n.data.get(I.dataId).values,R=A(v.shape),F=A(I.shape),[D,_,O]=i?[R[0],1,R[1]]:[R[0],R[1],1],[M,L,z]=o?[1,F[1],F[0]]:[F[1],1,F[0]],B=N*C,P=dn([S,N,C],v.dtype),W=P.values,U=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<N;t+=U)for(let n=0;n<C;n+=U)for(let s=0;s<$;s+=U){const r=Math.min(t+U,N),a=Math.min(n+U,C),i=Math.min(s+U,$);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,x-1)*D,a=Math.min(e,y-1)*z;n+=T[s+o*_+r*O]*E[r*M+t*L+a]}W[e*B+(o*C+t)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(k,P.dtype,P.values)}const Um={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:Wm},Vm={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=Wm({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=ng({inputs:{a:d,b:i},backend:n}),g.push(d),d=p),c&&(f=zm(n,d,c,o,h),g.push(d),d=f);for(const e of g)n.disposeIntermediateTensorInfo(e);return d}},Gm={kernelName:"Acos",backendName:"cpu",kernelFunc:og("Acos",e=>Math.acos(e))},Hm={kernelName:"Acosh",backendName:"cpu",kernelFunc:og("Acosh",e=>Math.acosh(e))},jm={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;zf(t,"addN");const r=s.map(e=>n.data.get(e.dataId).values),a=dn(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},qm={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;zf(r,"all");const o=y(a,r.shape);let l=o;const u=Jr(l,r.shape.length);let c=r;null!=u&&(c=Xg({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Qr(l.length,r.shape.length)),Yr("all",l,c.shape.length);const[h,p]=Kr(c.shape,l),f=d(p),g=O(d(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=m[t];for(let e=0;e<f;++e){const s=m[t+e];n=n&&s}g[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Bm({inputs:{x:b},backend:n,attrs:{shape:Xr(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Km={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;zf(r,"any");const o=y(a,r.shape);let l=o;const u=Jr(l,r.shape.length);let c=r;null!=u&&(c=Xg({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Qr(l.length,r.shape.length)),Yr("any",l,c.shape.length);const[h,p]=Kr(c.shape,l),f=d(p),g=O(d(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=m[t];for(let e=0;e<f;++e){const s=m[t+e];n=n||s}g[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Bm({inputs:{x:b},backend:n,attrs:{shape:Xr(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Xm={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;zf(r,"argMax");let i=y(a,r.shape);const o=Jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Xg({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Qr(i.length,l.shape.length)),i=[i[0]],Yr("argMax",i,l.shape.length);const[c,h]=Kr(l.shape,i),p=O(d(c),"int32"),f=d(h),g=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*f;let n=g[t],s=0;for(let e=0;e<f;++e){const r=g[t+e];r>n&&(n=r,s=e)}p[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",p)}},Ym={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;zf(r,"argMin");let i=y(a,r.shape);const o=Jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Xg({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Qr(i.length,l.shape.length)),i=[i[0]],Yr("argMin",i,l.shape.length);const[c,h]=Kr(l.shape,i),p=O(d(c),"int32"),f=d(h),g=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*f;let n=g[t],s=0;for(let e=0;e<f;++e){const r=g[t+e];r<n&&(n=r,s=e)}p[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",p)}},Jm={kernelName:"Asin",backendName:"cpu",kernelFunc:og("Asin",e=>Math.asin(e))},Zm={kernelName:"Asinh",backendName:"cpu",kernelFunc:og("Asinh",e=>Math.asinh(e))},Qm={kernelName:"Atan",backendName:"cpu",kernelFunc:og("Atan",e=>Math.atan(e))},eb={kernelName:"Atan2",backendName:"cpu",kernelFunc:Qf("Atan2",Vf((e,t)=>Math.atan2(e,t)))},tb={kernelName:"Atanh",backendName:"cpu",kernelFunc:og("Atanh",e=>Math.atanh(e))};function nb(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=dn(r.outShape,n),m=g.values,b=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],y=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*b,g=t*s[0];for(let t=0;t<r.inChannels;++t)for(let b=0;b<r.outHeight;++b){const k=b*i-d,w=Math.max(0,k),v=Math.min(r.inHeight,c+k),I=n+b*x;for(let n=0;n<r.outWidth;++n){const i=n*o-p,c=Math.max(0,i),d=Math.min(r.inWidth,h+i);let b=f,x=0,k=0;for(let n=w;n<v;n+=l){const r=g+n*s[1];for(let n=c;n<d;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>b?b=i:"avg"===a&&(x+=i,k++)}if(isNaN(b))break}m[I+n*y+t]="avg"===a?x/k:b}}}return g}function sb(e,t,n,s,r=!1,a=!1){const i=dn(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=dn(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const m=n*o-p;let b=m;for(;b<0;)b+=u;const x=Math.min(s.inHeight,h+m);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let k=Number.NEGATIVE_INFINITY,w=-1;for(let n=b;n<x;n+=u){const i=n-m;for(let o=p;o<y;o+=c){const l=o-h,u=g.get(e,n,o,t);u>k&&(k=u,w=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*d+l)}}i.set(w,e,n,o,t)}}return i}function rb(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,b=r.padInfo.left,x="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=dn(r.outShape,n),k=y.values,w=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],$=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*w,y=t*s[0];for(let t=0;t<r.inChannels;++t)for(let w=0;w<r.outDepth;++w){const N=w*i-g;let C=N;for(;C<0;)C+=u;const S=Math.min(r.inDepth,d+N),T=n+w*v;for(let n=0;n<r.outHeight;++n){const i=n*o-m;let d=i;for(;d<0;)d+=c;const g=Math.min(r.inHeight,p+i),w=T+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-b;let o=i;for(;o<0;)o+=h;const p=Math.min(r.inWidth,f+i),m=w+n*$;let v=x,I=0,N=0;for(let n=C;n<S;n+=u){const r=y+n*s[1];for(let n=d;n<g;n+=c){const i=r+n*s[2];for(let n=o;n<p;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,N++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}k[m+t]="avg"===a?I/N:v}}}}return y}const ab={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;zf(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(Ss(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=bs(r.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))h=qf({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=A(r.shape),s=nb(e,0,r.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}},ib={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;zf(r,"avgPool3d");const c=xs(r.shape,a,i,1,o,l,u),h=rb(n.data.get(r.dataId).values,0,r.dtype,A(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},ob={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;zf([r,a],"avgPool3DGrad");const c=xs(a.shape,i,o,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,b=c.dilationDepth,x=c.dilationHeight,y=c.dilationWidth,k=c.effectiveFilterDepth,w=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=k-1-c.padInfo.front,$=v-1-c.padInfo.left,N=w-1-c.padInfo.top,C=dn(a.shape,"float32"),S=1/(f*g*m),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-N,o=r-$;let l=0;for(let n=0;n<k;n+=b){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<w;n+=x){const r=(i+n)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=y){const a=(o+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=T.get(e,s,r,a,t))}}}C.set(l*S,e,n,s,r,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},lb={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;zf([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=bs(i.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,y=x-1-c.padInfo.left,k=b-1-c.padInfo.top,w=dn(i.shape,"float32"),v=1/(p*f),I=n.data.get(r.dataId).values,$=dn(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-k,a=s-y;let i=0;for(let n=0;n<b;n+=g){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<x;n+=m){const r=(a+n)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=$.get(e,s,r,t))}}w.set(i*v,e,n,s,t)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},ub={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:u}=t;l(o.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),l(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),l(null==a||o.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),zf([r,o,u,a,i],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,p=n.data.get(u.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),g=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(h.length),b=g.length,x=f.length,y=p.length,k=d.length;let w=0,v=0,I=0,$=0;for(let e=0;e<h.length;++e)m[e]=g[w++]+(h[e]-d[v++])*f[I++]/Math.sqrt(p[$++]+c),w>=b&&(w=0),v>=k&&(v=0),I>=x&&(I=0),$>=y&&($=0);return n.makeTensorInfo(r.shape,r.dtype,m)}},cb={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;zf([r],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),l=Ro(r.shape,a,o),u=Ao(l.length,a.length),c=Fo(r.shape,a,o),h=Do(i,a.length),d=_o(c,i,a.length),p=Bm({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Xg({inputs:{x:p},backend:n,attrs:{perm:u}}),g=Bm({inputs:{x:f},backend:n,attrs:{shape:c}}),m=sm({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}},hb={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=rg(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},db={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:og("ClipByValue",(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e)},pb={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(d(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.imag,i=n.data.get(r.complexTensorInfos.real.dataId).values,o=n.data.get(a.dataId).values;for(let e=0;e<i.length;e++)s[e]=Math.hypot(i[e],o[e]);return n.makeOutput(s,t.shape,"float32")}};function fb(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const gb={kernelName:"Imag",backendName:"cpu",kernelFunc:fb};function mb(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=y(r,t[0].shape)[0];let i=So(t.map(e=>e.shape),a);if(0===d(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>d(e.shape)>0);if(1===o.length)return qf({inputs:{x:o[0]},backend:n});if(Co(o.map(e=>e.shape),a),"complex64"===o[0].dtype){const e=o.map(e=>Xf({inputs:{input:e},backend:n})),t=o.map(e=>fb({inputs:{input:e},backend:n})),s=mb({inputs:e,backend:n,attrs:{axis:a}}),r=mb({inputs:t,backend:n,attrs:{axis:a}}),i=Gf({inputs:{real:s,imag:r},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map(e=>{const t=d(e.shape.slice(a));return Bm({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),u=l.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));i=So(l.map(e=>e.shape),1);const c=hg(u,i,t[0].dtype,1===l[0].shape[0]),h=So(o.map(e=>e.shape),a),p=n.makeTensorInfo(h,t[0].dtype,c);return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}const bb={kernelName:"Concat",backendName:"cpu",kernelFunc:mb};function xb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;zf([r,a],"conv2d");const h=Ts(l),d=ys(r.shape,a.shape,i,u,o,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,b=d.padInfo.left,x=d.padInfo.top,y="channelsLast"===d.dataFormat,k=new et(d.outShape,r.dtype),w=A(r.shape),v=A(a.shape),I=w[0],$=y?w[1]:w[2],N=y?w[2]:1,C=y?1:w[1],S=k.strides[0],T=y?k.strides[1]:k.strides[2],E=y?k.strides[2]:1,R=y?1:k.strides[1],F=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,_=k.values;for(let e=0;e<d.batchSize;++e){const t=e*I,n=e*S;for(let e=0;e<d.outHeight;++e){const s=n+e*T,r=e*d.strideHeight-x;for(let e=0;e<p;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*v[0],i=t+n*$;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-b;for(let e=0;e<f;++e){const s=n+e*m;if(s<0||s>=d.inWidth)continue;const r=i+s*N;let o=a+e*v[1];for(let e=0;e<d.inChannels;++e){const n=F[r+e*C];for(let e=0;e<d.outChannels;++e)_[t+e*R]+=n*D[o+e];o+=d.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,_)}const yb={kernelName:"Conv2D",backendName:"cpu",kernelFunc:xb},kb={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;zf([r,a],"conv2dBackpropFilter");const h=Ts(l),d=ys(r.shape,c,i,1,o,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,b="channelsLast"===d.dataFormat,x=new et(d.filterShape,"float32"),y=d.padInfo.left,k=d.padInfo.top,w=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new et(r.shape,r.dtype,w),$=new et(a.shape,a.dtype,v);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((k-e)/p)),n=Math.min(d.outHeight,(d.inHeight+k-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/f)),a=Math.min(d.outWidth,(d.inWidth+y-s)/f);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-k;for(let e=r;e<a;++e){const n=s+e*f-y;l+=b?I.get(u,t,n,i)*$.get(u,c,e,o):I.get(u,i,t,n)*$.get(u,o,c,e)}}x.set(l,e,s,i,o)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},wb={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;zf([r,a],"conv2dBackpropInput");const h=A(a.shape),d=A(r.shape);let p=Ts(u);const f=ys(i,a.shape,o,1,l,c,!1,p),g=new et(f.inShape,"float32"),m=g.values,b=n.data.get(r.dataId).values,x=n.data.get(a.dataId).values,[y,k,w]=h,{batchSize:v,filterHeight:I,filterWidth:$,inChannels:N,inHeight:C,inWidth:S,outChannels:T,outHeight:E,outWidth:R,strideHeight:F,strideWidth:D}=f;p=f.dataFormat;const _=I-1-f.padInfo.top,O=$-1-f.padInfo.left,M="channelsLast"===p,L=g.strides[0],z=M?g.strides[1]:g.strides[2],B=M?g.strides[2]:1,P=M?1:g.strides[1],W=d[0],U=M?d[1]:d[2],V=M?d[2]:1,G=M?1:d[1];for(let e=0;e<v;++e)for(let t=0;t<N;++t)for(let n=0;n<C;++n){const s=n-_,r=Math.max(0,Math.ceil(s/F)),a=Math.min(E,(I+s)/F);for(let i=0;i<S;++i){const o=i-O,l=Math.max(0,Math.ceil(o/D)),u=Math.min(R,($+o)/D);let c=0;for(let n=r;n<a;++n){const r=n*F-s;for(let s=l;s<u;++s){const a=W*e+U*n+V*s,i=y*(I-1-r)+k*($-1-(s*D-o))+w*t;for(let e=0;e<T;++e)c+=b[a+G*e]*x[i+e]}}m[L*e+z*n+B*i+P*t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},vb={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;zf([r,a],"conv3d");const u=ks(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,b=m.front,x=m.left,y=m.top,k=new et(u.outShape,r.dtype),w=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=k.values,$=A(r.shape),N=A(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*$[0],n=e*k.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*k.strides[1],r=e*u.strideDepth-b;for(let e=0;e<c;++e){const n=r+e*p;if(n<0||n>=u.inDepth)continue;const a=e*N[0],i=t+n*$[1];for(let e=0;e<u.outHeight;++e){const t=s+e*k.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*N[1],o=i+s*$[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-x;for(let e=0;e<d;++e){const t=s+e*g;if(t<0||t>=u.inWidth)continue;const a=o+t*u.inChannels;let i=r+e*N[2];for(let e=0;e<u.inChannels;++e){const t=w[a+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[i+e];i+=u.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Ib={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;zf([r,a],"conv3dBackpropFilterV2");const u=A(r.shape),c=A(a.shape),h=ks(r.shape,l,i,1,o),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,b=h.filterWidth,x=new et(h.filterShape,"float32"),y=x.values,[k,w,v,I]=x.strides,$=n.data.get(a.dataId).values,[N,C,S,T]=c,E=n.data.get(r.dataId).values,[R,F,D,_]=u,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(h.outDepth,(h.inDepth+O-e)/d),s=e*k;for(let r=0;r<m;++r){const a=Math.max(0,Math.ceil((L-r)/p)),i=Math.min(h.outHeight,(h.inHeight+L-r)/p),o=r*w+s;for(let s=0;s<b;++s){const l=Math.max(0,Math.ceil((M-s)/f)),u=Math.min(h.outWidth,(h.inWidth+M-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const g=o*I+c;for(let c=0;c<h.outChannels;++c){let m=0;for(let g=0;g<h.batchSize;++g){const h=g*R,b=g*N;for(let g=t;g<n;++g){const t=(e+g*d-O)*F+h,n=g*C+b;for(let e=a;e<i;++e){const a=(r+e*p-L)*D+t,i=e*S+n;for(let e=l;e<u;++e)m+=E[(s+e*f-M)*_+a+o]*$[e*T+i+c]}}}y[g+c]=m}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},$b={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;zf([r],"conv3dBackpropInputV2");const u=A(r.shape),c=A(a.shape),h=ks(l,a.shape,o,1,i),d=new et(h.inShape,"float32"),p=d.values,[f,g,m,b]=d.strides,x=n.data.get(r.dataId).values,[y,k,w,v]=u,I=n.data.get(a.dataId).values,[$,N,C,S]=c,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:F,inChannels:D,inDepth:_,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:U,strideWidth:V}=h,G=E-1-h.padInfo.front,H=R-1-h.padInfo.top,j=F-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<D;++t)for(let n=0;n<_;++n){const s=n-G,r=Math.max(0,Math.ceil(s/W)),a=Math.min(z,(E+s)/W);for(let i=0;i<O;++i){const o=i-H,l=Math.max(0,Math.ceil(o/U)),u=Math.min(B,(R+o)/U);for(let c=0;c<M;++c){const h=c-j,d=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(F+h)/V);let A=0;for(let n=r;n<a;++n){const r=n*W-s;for(let s=l;s<u;++s){const a=s*U-o;for(let i=d;i<T;++i){const o=y*e+k*n+w*s+v*i,l=$*(E-1-r)+N*(R-1-a)+C*(F-1-(i*V-h))+S*t;for(let e=0;e<L;++e)A+=x[o+e]*I[l+e]}}}p[f*e+g*n+m*i+b*c+t]=A}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},Nb={kernelName:"Cos",backendName:"cpu",kernelFunc:og("Cos",e=>Math.cos(e))},Cb={kernelName:"Cosh",backendName:"cpu",kernelFunc:og("Cosh",e=>Math.cosh(e))},Sb={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[g,m]=o,b=dn([f,g,m,p],"float32"),x=n.data.get(a.dataId).values,y=n.data.get(i.dataId).values,k=n.data.get(r.dataId).values,w=A(r.shape),v=A(b.shape);for(let e=0;e<f;e++){const t=4*e,n=x[t],s=x[t+1],r=x[t+2],a=x[t+3],i=y[e];if(i>=c)continue;const o=g>1?(r-n)*(h-1)/(g-1):0,f=m>1?(a-s)*(d-1)/(m-1):0;for(let t=0;t<g;t++){const c=g>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<m;n++)for(let s=0;s<p;s++)b.values[s+n*v[2]+t*v[1]+e*v[0]]=u;else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<m;l++){const c=m>1?s*(d-1)+l*f:.5*(s+a)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++)b.values[n+l*v[2]+t*v[1]+e*v[0]]=u;continue}const h=Math.floor(c),g=Math.ceil(c),x=c-h;for(let s=0;s<p;s++){let a=s+h*w[2]+n*w[1]+i*w[0];const u=k[a];a=s+g*w[2]+n*w[1]+i*w[0];const c=k[a];a=s+h*w[2]+r*w[1]+i*w[0];const d=k[a];a=s+g*w[2]+r*w[1]+i*w[0];const p=k[a],f=u+(c-u)*x;a=s+l*v[2]+t*v[1]+e*v[0],b.values[a]=f+(d+(p-d)*x-f)*o}}}else for(let n=0;n<m;++n){const r=m>1?s*(d-1)+n*f:.5*(s+a)*(d-1);if(r<0||r>d-1){for(let s=0;s<p;s++)b.values[s+n*v[2]+t*v[1]+e*v[0]]=u;continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<p;s++)b.values[s+n*v[2]+t*v[1]+e*v[0]]=k[s+o*w[2]+l*w[1]+i*w[0]]}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Tb={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;zf(r,"cumsum");const l=Jr([a],r.shape.length);let u=r;null!=l&&(u=Xg({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Qr(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=dt(u.dtype,"int32"),p=O(d(u.shape),h),f=n.data.get(u.dataId).values,g=u.shape[u.shape.length-1],m=o?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=g)for(let t=0;t<g;t++){const n=m(e,t);if(0===t)p[n]=i?0:f[n];else{const s=m(e,t-1);p[n]=i?f[s]+p[s]:f[n]+p[s]}}const b=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Xg({inputs:{x:b},backend:n,attrs:{perm:Zr(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(u),e}return b}},Eb={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=rg(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=ag(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Rb={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;l("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`),l(a>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`);const o=r.shape[0],u=r.shape[1],c=r.shape[2],h=r.shape[3],d=u*a,p=c*a,f=h/(a*a),g=n.data.get(r.dataId).values,m=new Float32Array(o*d*p*f);let b=0;for(let e=0;e<o;++e)for(let t=0;t<d;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*f;for(let t=0;t<f;++t)m[b++]=g[t+i+h*(r+c*(n+u*e))]}}return n.makeTensorInfo([o,d,p,f],r.dtype,m)}};function Ab(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:c}=s;zf([r,a],"depthwiseConv2DNative");const h=A(r.shape),d=A(a.shape);let p=u;null==p&&(p=[1,1]),l(Ss(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const f=ys(r.shape,a.shape,i,p,o,c,!0),{filterHeight:g,filterWidth:m,dilationHeight:b,dilationWidth:x,padInfo:y}=f,k=y.left,w=y.top,v=f.outChannels/f.inChannels,I=new et(f.outShape,r.dtype),$=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,C=I.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*I.strides[1],r=e*f.strideHeight-w;for(let e=0;e<g;++e){const n=r+e*b;if(n<0||n>=f.inHeight)continue;const a=e*d[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-k;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=f.inWidth)continue;const r=i+s*f.inChannels;let o=t,l=a+e*d[1];for(let e=0;e<f.inChannels;++e){const t=$[r+e];for(let e=0;e<v;++e)C[o+e]+=t*N[l+e];o+=v,l+=v}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Fb={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:Ab},Db={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;zf([r,a],"depthwiseConv2dNativeBackpropFilter");const h=ys(r.shape,c,i,o,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new et(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,y=h.outChannels/h.inChannels,k=n.data.get(r.dataId).values,w=new et(r.shape,r.dtype,k),v=n.data.get(a.dataId).values,I=new et(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((x-e)/d)),n=Math.min(h.outHeight,(h.inHeight+x-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((b-s)/p)),a=Math.min(h.outWidth,(h.inWidth+b-s)/p);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/y),l=i%y;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-x;for(let e=r;e<a;++e)u+=w.get(l,t,s+e*p-b,o)*I.get(l,c,e,i)}m.set(u,e,s,o,l)}}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},_b={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;zf([r,a],"depthwiseConv2DNativeBackpropInput");const h=A(r.shape),d=A(a.shape),p=ys(c,a.shape,i,o,l,u,!0),f=new et(p.inShape,"float32"),g=f.values,[m,b,x]=f.strides,y=n.data.get(r.dataId).values,[k,w,v]=h,I=n.data.get(a.dataId).values,[$,N,C]=d,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:R,inHeight:F,inWidth:D,outChannels:_,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=p,B=T-1-p.padInfo.top,P=E-1-p.padInfo.left,W=_/R;for(let e=0;e<S;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const s=n-B,r=Math.max(0,Math.ceil(s/L)),a=Math.min(O,(T+s)/L);for(let i=0;i<D;++i){const o=i-P,l=Math.max(0,Math.ceil(o/z)),u=Math.min(M,(E+o)/z);let c=0;for(let n=r;n<a;++n){const r=n*L-s;for(let s=l;s<u;++s){const a=k*e+w*n+v*s,i=$*(T-1-r)+N*(E-1-(s*z-o))+C*t;for(let e=0;e<W;++e)c+=y[a+(t*W+e)]*I[i+e]}}g[m*e+b*n+x*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Ob={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=d(s.shape),a=n.data.get(s.dataId).values,i=dn([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Mb={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:f,inHeight:g,inWidth:m,inChannels:b,outHeight:x,outWidth:y,padInfo:k,strideHeight:w,strideWidth:I,filterHeight:$,filterWidth:N,dilationHeight:C,dilationWidth:S,outShape:T}=ms(s.shape,r.shape,a,i,"NHWC",o),E=d(T),R=T.length,F=v(s.dtype,E);for(let e=0;e<f;++e)for(let t=0;t<x;++t){const n=t*w-k.top;for(let a=0;a<y;++a){const i=a*I-k.left;for(let o=0;o<b;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<$;++t){const a=n+t*C;if(a>=0&&a<g)for(let n=0;n<N;++n){const d=i+n*S;if(d>=0&&d<m){const i=z([e,a,d,o],c,A(s.shape)),f=z([t,n,o],p,A(r.shape)),g=u[i]+h[f];g>l&&(l=g)}}}F[z([e,t,a,o],R,A(T))]=l}}}return{dataId:l.write(Ue(F,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},Lb={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:u}=n,c=t,h=D(s.shape,c.data.get(s.dataId).values),d=D(r.shape,c.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:b,outWidth:x,padInfo:y,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:$,dilationWidth:N,outShape:C}=ms(s.shape,r.shape,i,o,"NHWC",u);l(a.rank===C.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${C.length}, but got ${a.rank}`);const S=D(C,c.data.get(a.dataId).values),T=M(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<b;++t){const n=t*k-y.top;for(let s=0;s<x;++s){const r=s*w-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*$;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=r+n*N;if(u>=0&&u<g){const r=h[e][s][u][a]+d[t][n][a];r>i&&(i=r,o=t,l=n)}}}T[o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(Ue(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},zb={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:u}=n,c=t,h=D(s.shape,c.data.get(s.dataId).values),d=D(r.shape,c.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:b,outWidth:x,padInfo:y,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:$,dilationWidth:N,outShape:C}=ms(s.shape,r.shape,i,o,"NHWC",u);l(a.rank===C.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${C.length}, but got ${a.rank}`);const S=D(C,c.data.get(a.dataId).values),T=M(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<b;++t){const n=t*k-y.top;for(let s=0;s<x;++s){const r=s*w-y.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*$;if(s>=0&&s<f)for(let n=0;n<I;++n){const u=r+n*N;if(u>=0&&u<g){const r=h[e][s][u][a]+d[t][n][a];r>i&&(i=r,o=s,l=u)}}}T[e][o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(Ue(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function Bb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;zf(r,"sum"),o="bool"===r.dtype?Jf({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):qf({inputs:{x:r},backend:n});const l=o.shape.length,u=y(a,o.shape),c=Jr(u,l);let h=u,p=o;null!=c&&(p=Xg({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Qr(h.length,l)),Yr("sum",h,p.shape.length);const[f,g]=Kr(p.shape,h);let m=jf(n,f,dt(p.dtype,"int32"));const b=d(g),x=n.data.get(m.dataId).values,k=n.data.get(p.dataId).values;for(let e=0;e<x.length;++e){const t=e*b;let n=0;for(let e=0;e<b;++e)n+=k[t+e];x[e]=n}if(i){const e=m;m=Bm({inputs:{x:m},backend:n,attrs:{shape:Xr(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const Pb={kernelName:"Sum",backendName:"cpu",kernelFunc:Bb},Wb={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Ho(r,a.length);qo(i.length,l,a);const{path:u,steps:c}=Ko(o,l),h=c.length;let d=null,f=i.length;const g=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=jo(f,l[t]);let r;Xo(e)?r=a[t]:(r=Xg({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),g.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);p(r.shape,i)||(r=Bm({inputs:{x:r},backend:n,attrs:{shape:i}}),g.push(r)),null===d?d=r:(d=Ug({inputs:{a:r,b:d},backend:n}),g.push(d))}e<h-1&&(u[e]>=0&&(d=Bb({inputs:{x:d},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),g.push(d)),f--)}for(const e of g)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},Ub={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;zf([s,r],"eluGrad");const a=new Float32Array(d(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},Vb={kernelName:"Erf",backendName:"cpu",kernelFunc:og("Erf",e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})};function Gb(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let u=a;return a<0&&(l(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+a+1),o.splice(u,0,1),Bm({inputs:{x:r},backend:n,attrs:{shape:o}})}const Hb={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:Gb},jb=Qf("RealDiv",Vf((e,t)=>e/t)),qb={kernelName:"RealDiv",backendName:"cpu",kernelFunc:jb};function Kb(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=d(u),h=w("float32",c),p=w("float32",c);for(let e=0;e<r;e++){const s=sm({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=sm({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=Gf({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Xb(i,t,n),d=Mo(u,c);for(let t=0;t<a;t++){const n=Po(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",h),g=n.makeTensorInfo(u,"float32",p),m=Gf({inputs:{real:f,imag:g},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}function Xb(e,t,n){const s=d(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=Yb(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",We(s,"float32")),i=qf({inputs:{x:a},backend:n}),l=qb.kernelFunc({inputs:{a:e,b:a},backend:n}),u=qb.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return Lo(function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Vo(r*s,t,n),l=Po(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Wo(s,a,i,r)}return s}(Mo(a,i),s,t));var o}function Yb(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Mo(e,t),i=n/2,o=zo(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Gf({inputs:{real:h,imag:d},backend:r}),f=Bo(a),g=f.real,m=f.imag,b=[g.length],x=r.makeTensorInfo(b,"float32",g),y=r.makeTensorInfo(b,"float32",m),k=Gf({inputs:{real:x,imag:y},backend:r}),w=Yb(l,u,i,s,r),v=w.real,I=w.imag,$=[v.length],N=r.makeTensorInfo($,"float32",v),C=r.makeTensorInfo($,"float32",I),S=Gf({inputs:{real:N,imag:C},backend:r}),T=Yb(g,m,i,s,r),E=T.real,R=T.imag,A=[E.length],F=r.makeTensorInfo(A,"float32",E),D=r.makeTensorInfo(A,"float32",R),_=Gf({inputs:{real:F,imag:D},backend:r}),O=Uo(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=Gf({inputs:{real:L,imag:z},backend:r}),P=Ug({inputs:{a:B,b:_},backend:r}),W=ng({inputs:{a:S,b:P},backend:r}),U=bm({inputs:{a:S,b:P},backend:r}),V=Xf({inputs:{input:W},backend:r}),G=Xf({inputs:{input:U},backend:r}),H=fb({inputs:{input:W},backend:r}),j=fb({inputs:{input:U},backend:r}),q=mb({inputs:[V,G],backend:r,attrs:{axis:0}}),K=mb({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(k),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Jb={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=d(s.shape),a=s.shape[s.shape.length-1],i=Bm({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Kb(i,!1,n),l=Bm({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Zb(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||T(r),o=v(i,d(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const Qb={kernelName:"Fill",backendName:"cpu",kernelFunc:Zb},ex={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=w(n.dtype,d(n.shape)),[a,i,o,l]=n.shape,u=s.data.get(n.dataId).values;for(let e=0;e<a;e++){const t=e*o*i*l;for(let e=0;e<i;e++){const n=e*(o*l);for(let e=0;e<o;e++){const s=e*l;for(let a=0;a<l;a++){const i=Math.round(o-e-1),c=t+n+s+a;let h=u[c];i>=0&&i<o&&(h=u[t+n+i*l+a]),r[c]=h}}}}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},tx={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Qf("FloorDiv",Vf((e,t)=>Math.floor(e/t)),null,"int32")},nx={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=xb({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=g;g=ng({inputs:{a:g,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=g;g=zm(n,g,p,o,f),n.disposeIntermediateTensorInfo(e)}return g}},sx={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Ab({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=g;g=ng({inputs:{a:g,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=g;g=zm(n,g,p,o,f),n.disposeIntermediateTensorInfo(e)}return g}},rx={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=d(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Nn(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=vg(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}},ax={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;zf([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=d(a.shape),c=el(r,a,y(i,r.shape)[0],l),h=Bm({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=Bm({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),f=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],g=n.bufferSync(p),m=Ig(n.bufferSync(h),g,f);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},ix={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=d(s.shape),a=s.shape[s.shape.length-1],i=Bm({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Kb(i,!0,n),l=Bm({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},ox={kernelName:"IsFinite",backendName:"cpu",kernelFunc:og("IsFinite",e=>Number.isFinite(e)?1:0,"bool")},lx={kernelName:"IsInf",backendName:"cpu",kernelFunc:og("IsInf",e=>Infinity===Math.abs(e)?1:0,"bool")},ux={kernelName:"IsNan",backendName:"cpu",kernelFunc:og("IsNan",e=>Number.isNaN(e)?1:0,"bool")},cx={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=Fg(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},hx={kernelName:"Log1p",backendName:"cpu",kernelFunc:og("Log1p",e=>Math.log1p(e))},dx={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Qf("LogicalAnd",Vf((e,t)=>e&&t),null,"bool")},px={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:og("LogicalNot",e=>e?0:1,"bool")},fx={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Qf("LogicalOr",Vf((e,t)=>e||t),null,"bool")},gx={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;zf(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=d(r.shape),f=new Float32Array(p);function g(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=g(e),n=h[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(r.shape,r.dtype,f)}},mx={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;zf(i,"LRNGrad");const h=d(i.shape),p=i.shape[3],f=n.data.get(i.dataId).values,g=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,b=new Float32Array(h),x=h;for(let e=0;e<x;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(g[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*g[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=f[e],b[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,b)}};function bx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=y(a,l);let h=c;const p=Jr(h,u);let f=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];f=Kg(f,l,r.dtype,p,e),h=Qr(h.length,u),l=e}zf(r,"max"),Yr("max",h,u);const[g,m]=Kr(l,h),b=Og(f,d(m),g,r.dtype),x=o.write(b,g,r.dtype);let k=g;return i&&(k=Xr(g,c)),{dataId:x,shape:k,dtype:r.dtype}}const xx={kernelName:"Max",backendName:"cpu",kernelFunc:bx},yx={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;zf(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(Ss(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=bs(r.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))h=qf({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=A(r.shape),s=nb(e,0,r.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}},kx={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;zf(r,"maxPool3d");const c=xs(r.shape,a,i,1,o,l,u),h=rb(n.data.get(r.dataId).values,0,r.dtype,A(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},wx={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;zf([r,a],"maxPool3DGrad");const c=xs(a.shape,i,o,1,l,u),h=function(e,t){const n=dn(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let b=0;b<t.outDepth;++b){const x=b*s-d;let y=x;for(;y<0;)y+=i;const k=Math.min(t.inDepth,u+x);for(let s=0;s<t.outHeight;++s){const u=s*r-p;let d=u;for(;d<0;)d+=o;const w=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const p=r*a-f;let v=p;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+p);let $=Number.NEGATIVE_INFINITY,N=-1;for(let t=y;t<k;t+=i){const n=t-x;for(let s=d;s<w;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-p,o=e.get(g,t,s,a,m);o>=$&&($=o,N=n*c*h+r*c+i)}}}n.set(N,g,b,s,r,m)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,g=c.dilationDepth,m=c.dilationHeight,b=c.dilationWidth,x=c.effectiveFilterDepth,y=c.effectiveFilterHeight,k=c.effectiveFilterWidth,w=x-1-c.padInfo.front,v=k-1-c.padInfo.left,I=y-1-c.padInfo.top,$=dn(a.shape,"float32"),N=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-w,i=s-I,o=r-v;let l=0;for(let n=0;n<x;n+=g){const s=(a+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<y;r+=m){const a=(i+r)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<k;i+=b){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=x*y*k-1-h.get(e,s,a,u,t)===n*y*k+r*k+i?1:0;0!==d&&(l+=N.get(e,s,a,u,t)*d)}}}$.set(l,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},vx={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;zf([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=bs(o.shape,l,u,1,c,h),p=n.data.get(o.dataId).values,f=dn(d.outShape,o.dtype,sb(p,o.shape,o.dtype,d).values),g=d.strideHeight,m=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,y=d.effectiveFilterHeight,k=d.effectiveFilterWidth,w=k-1-d.padInfo.left,v=y-1-d.padInfo.top,I=dn(o.shape,"float32"),$=n.data.get(r.dataId).values,N=dn(r.shape,"float32",$);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const r=n-v,a=s-w;let i=0;for(let n=0;n<y;n+=b){const s=(r+n)/g;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let r=0;r<k;r+=x){const o=(a+r)/m;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const l=y*k-1-f.get(e,s,o,t)===n*k+r?1:0;0!==l&&(i+=N.get(e,s,o,t)*l)}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},Ix={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;zf(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=bs(s.shape,r,a,[1,1],i),[h,d]=function(e,t,n,s,r){const a=nb(e,0,n,A(t),r,"max"),i=sb(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},$x={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=y(a,r.shape),l=d(Kr(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=Jf({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=jb({inputs:{a:h,b:c},backend:n});u.push(p);const f=Bb({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},Nx={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;zf(r,"min");const o=y(a,r.shape);let l=o;const u=Jr(l,r.shape.length);let c=r;null!=u&&(c=Xg({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Qr(l.length,r.shape.length)),Yr("min",l,c.shape.length);const[h,p]=Kr(c.shape,l),f=d(p),g=O(d(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=m[t];for(let e=0;e<f;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}g[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Bm({inputs:{x:b},backend:n,attrs:{shape:Xr(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Cx={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;zf(r,"mirrorPad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=a.map((e,t)=>e[0]+r.shape[t]),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,f=A(r.shape),g=d(o),m=o.length,b=A(o),x=w(r.dtype,g);for(let e=0;e<g;e++){let t=B(e,m,b);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map((e,t)=>e-l[t]);const n=z(t,p,f);x[e]=h[n]}return{dataId:n.write(x,o,r.dtype),shape:o,dtype:r.dtype}}},Sx={kernelName:"Mod",backendName:"cpu",kernelFunc:Qf("Mod",Vf((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}))};function Tx(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=y([o],r.shape),u=bx({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Xr(u.shape,l),h=Bm({inputs:{x:u},backend:n,attrs:{shape:c}}),d=bm({inputs:{a:r,b:h},backend:n}),p=mg({inputs:{x:d},backend:n}),f=Bb({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),g=Bm({inputs:{x:f},backend:n,attrs:{shape:c}}),m=jb({inputs:{a:p,b:g},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}const Ex={kernelName:"Softmax",backendName:"cpu",kernelFunc:Tx},Rx={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;zf(r,"multinomial");const l=o?r:Tx({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],f=O(d(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=_a.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();f[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",f)}},Ax=ji,Fx={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;zf(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=Ax(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Dx=qi,_x={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;zf(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=Dx(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},Ox=Ki,Mx={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;zf(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,d=i,p=o,f=l,g=u,{selectedIndices:m,selectedScores:b}=Ox(c,h,d,p,f,g);return[n.makeTensorInfo([m.length],"int32",new Int32Array(m)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}},Lx={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;zf(r,"oneHot");const l=d(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function zx(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Xf({inputs:{input:s},backend:n}),t=zx({inputs:{x:e},backend:n}),r=fb({inputs:{input:s},backend:n}),a=zx({inputs:{x:r},backend:n}),i=Gf({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Zb({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Bx={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:zx},Px={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Xf({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=fb({inputs:{input:r},backend:s}),i=zx({inputs:{x:a},backend:s}),o=Gf({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Zb({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function Wx(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return Gb({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{u(a,e.shape,"All tensors passed to stack must have matching shapes"),l(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],c=mb({inputs:t.map(e=>{const t=Gb({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}const Ux={kernelName:"Pack",backendName:"cpu",kernelFunc:Wx},Vx={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;zf(r,"pad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=n.data.get(r.dataId).values,c=d(r.shape),h=r.shape.length,p=A(r.shape),f=d(o),g=o.length,m=A(o),b=w(r.dtype,f);0!==i&&b.fill(i);for(let e=0;e<c;e++)b[z(B(e,h,p).map((e,t)=>e+l[t]),g,m)]=u[e];return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},Gx={kernelName:"Pow",backendName:"cpu",kernelFunc:Qf("Pow",Vf((e,t)=>Math.pow(e,t)))},Hx={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=Qg(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},jx={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:og("Reciprocal",e=>1/e)},qx={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;zf(r,"resizeBilinear");const l=A(r.shape),[u,c]=o,[h,p,f,g]=r.shape,m=n.data.get(r.dataId).values,b=new Float32Array(d([h,u,c,g])),x=[a&&u>1?p-1:p,a&&c>1?f-1:f],y=[a&&u>1?u-1:u,a&&c>1?c-1:c];let k=0;const w=x[0]/y[0],v=x[1]/y[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],d=o+a*l[2],p=u+a*l[2];for(let e=0;e<g;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*s;b[k++]=a+(n+(m[p+e]-n)*s-a)*r}}}return n.makeTensorInfo([h,u,c,g],"float32",b)}},Kx={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;zf([a,r],"resizeBilinearGrad");const o=A(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),g=[i&&d>1?u-1:u,i&&p>1?c-1:c],m=[i&&d>1?d-1:d,i&&p>1?p-1:p],b=g[0]/m[0],x=g[1]/m[1],y=n.data.get(a.dataId).values;let k=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<d;e++){const n=e*b,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*o[2],g=a+s*o[2],m=i+n*o[2],b=i+s*o[2],w=d*u,v=d*r,I=l*u,$=l*r;for(let e=0;e<h;e++){const t=y[k++];f[p+e]+=t*w,f[g+e]+=t*v,f[m+e]+=t*I,f[b+e]+=t*$}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},Xx={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;zf(r,"resizeNearestNeighbor");const l=A(r.shape),[u,c]=o,[h,d,p,f]=r.shape,g=n.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),b=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c],y=b[0]/x[0],k=b[1]/x[1];let w=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?y*(e+.5):y*e;let s=Math.min(d-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?k*(e+.5):k*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++)m[w++]=g[s+e]}}}return n.makeTensorInfo([h,u,c,f],r.dtype,m)}},Yx={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;zf([a,r],"resizeNearestNeighborGrad");const o=A(r.shape),l=A(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,g=new Float32Array(u*c*h*d),m=n.data.get(a.dataId).values,b=[i&&p>1?c-1:c,i&&f>1?h-1:h],x=[i&&p>1?p-1:p,i&&f>1?f-1:f],y=b[0]/x[0],k=b[1]/x[1],w=1/y,v=1/k,I=2*Math.ceil(w)+2,$=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*w),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),b=Math.floor(u-$/2);for(let n=0;n<d;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=p)continue;const d=t+u*l[1],g=u*y;if(e===Math.min(c-1,i?Math.round(g):Math.floor(g)))for(let e=0;e<$;e++){const t=e+b;if(t<0||t>=f)continue;const r=d+t*l[2],a=t*k;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=m[r+n])}}g[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,g)}},Jx={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;zf(r,"reverse");const i=r.shape.length,o=y(a,r.shape);if(0===i)return qf({inputs:{x:r},backend:n});const l=new et(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach(e=>n[e]=r.shape[e]-1-n[e]),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Zx={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=w(s.dtype,d(s.shape)),[u,c,h,p]=s.shape,[f,g]=Eo(i,c,h),m=Math.sin(r),b=Math.cos(r),x=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],d=o[2],y=o[1];let k=(d-f)*b-(y-g)*m,w=(d-f)*m+(y-g)*b;k=Math.round(k+f),w=Math.round(w+g);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),k>=0&&k<h&&w>=0&&w<c&&(v=x[t+w*(h*p)+k*p+i]),l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Qx={kernelName:"Round",backendName:"cpu",kernelFunc:og("Round",e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})};function ey(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,d=t.values;if(0===s)return dn(n,t.dtype);const p=dn(c,t.dtype);p.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?p.values[l*r+n]+=d[e*r+n]:p.values[l*r+n]=0===t.rank?d[0]:d[e*r+n]}return p}const ty={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Sn(0,r,i),d=ey(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}},ny={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;zf([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=dt(r.dtype,a.dtype),h=O(d(r.shape),c);let p=0;const f=0===i||i>1||1===r.shape.length?1:d(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)h[p++]=1===o[e]?l[e]:u[e];return n.makeTensorInfo(r.shape,c,h)}},sy={kernelName:"Selu",backendName:"cpu",kernelFunc:og("Selu",e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1))},ry={kernelName:"Sign",backendName:"cpu",kernelFunc:og("Sign",e=>e<0?-1:e>0?1:0)},ay={kernelName:"Sin",backendName:"cpu",kernelFunc:og("Sin",e=>Math.sin(e))},iy={kernelName:"Sinh",backendName:"cpu",kernelFunc:og("Sinh",e=>Math.sinh(e))},oy=Math.log(1.1920928955078125e-7)+2,ly={kernelName:"Softplus",backendName:"cpu",kernelFunc:og("Softplus",e=>{const t=e>-oy,n=e<oy,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})},uy={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;zf([r],"spaceToBatchND");const o=d(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=Vx.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Ro(u.shape,a,o,!1),h=Ao(c.length,a.length,!1),p=Fo(u.shape,a,o,!1),f=Bm({inputs:{x:u},backend:n,attrs:{shape:c}}),g=Xg({inputs:{x:f},backend:n,attrs:{perm:h}}),m=Bm({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}},cy={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,d,p,f,g]=am(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},hy={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=im(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},dy={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=om(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},py={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=om(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},fy={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Sn(0,r,o),p=ey(n.bufferSync(r),n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,p.dtype,p.values)}},gy={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=y(i,r.shape)[0],l=Jo(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(e=>{const t=[...c];t[o]=e;const s=sm({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s})}},my={kernelName:"Sqrt",backendName:"cpu",kernelFunc:og("Sqrt",e=>Math.sqrt(e))},by={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;zf(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},xy={kernelName:"Step",backendName:"cpu",kernelFunc:og("Step",(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})},yy={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;zf(r,"stridedSlice");const{nonStrided:p,$begin:f,$strides:g,size:m,newShape:b,outShape:x}=Vn(r.shape,a,i,o,l,u,c,h,d),y=Bm({inputs:{x:r},backend:n,attrs:{shape:b}});let k;if(p){const e=sm({inputs:{x:y},backend:n,attrs:{begin:f,size:m}});k=Bm({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,r.dtype,[]);else{const e=cm(x,n.bufferSync(y),g,f);k=n.makeTensorInfo(e.shape,e.dtype,e.values)}const w=Bm({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(k),w}},ky={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,g]=dm(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",g)]}},wy={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=fm(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},vy={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=gm(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},Iy={kernelName:"Tan",backendName:"cpu",kernelFunc:og("Tan",e=>Math.tan(e))},$y=og("Tanh",e=>Math.tanh(e));function Ny(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return a(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;return n<0?t<=1?n=0:n+=t*(Math.trunc(-n/(t-1))+1):n>t-1&&(t<=1?n=0:n-=t*Math.trunc(n/(t-1))),a(0,n,t-1)}(e,t);case"nearest":return function(e,t){return a(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function Cy(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function Sy(e,t,n,s,r,a,i,o,l,u,c){return Cy(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function Ty(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),d=Math.floor(l),p=h+1,f=d+1;return(p-o)*((f-l)*Cy(e,t,n,s,r,a,i,h,d,u,c)+(l-d)*Cy(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*Cy(e,t,n,s,r,a,i,p,d,u,c)+(l-d)*Cy(e,t,n,s,r,a,i,p,f,u,c))}const Ey=[Vm,Uf,Gm,Hm,sg,jm,qm,Km,Xm,Ym,Jm,Zm,Qm,eb,tb,ab,ib,ob,lb,Um,ub,cb,hb,Zf,cg,db,Hf,pb,bb,kb,wb,yb,Ib,$b,vb,Nb,Cb,Sb,Tb,Eb,Rb,Fb,Db,_b,Ob,Mb,zb,Lb,qb,Wb,Cm,Ub,fg,Vb,bg,Hb,yg,Jb,Qb,ex,wg,tx,nx,sx,rx,ax,Ng,Sg,Kf,ix,gb,ox,lx,ux,Tm,Eg,Ag,cx,_g,hx,dx,px,fx,gx,mx,Lg,yx,kx,wx,vx,Ix,xx,$x,Nx,Bg,Cx,Sx,Rx,Vg,Hg,Fx,_x,Mx,qg,Lx,Px,Ux,Vx,Gx,Am,Zg,Hx,Yf,jx,Dm,Om,Pm,qx,Kx,Xx,Yx,Jx,Zx,Qx,tm,ty,ny,sy,Lm,ry,ay,iy,rm,Ex,ly,uy,cy,hy,dy,py,fy,gy,my,by,um,xy,yy,ky,wy,vy,xm,Pb,Iy,{kernelName:"Tanh",backendName:"cpu",kernelFunc:$y},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;zf(r,"tile");const i=ym(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;zf(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=vm(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Yg,{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,f]=r.shape,[g,m]=null!=u?u:[h,p],b=[c,g,m,f],x=A(r.shape),y=x[0],k=x[1],v=x[2],I=w(r.dtype,d(b));I.fill(l);const $=s.data.get(r.dataId).values,N=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?N:N.subarray(8*e,8*e+8);for(let n=0;n<g;++n)for(let s=0;s<m;++s)for(let r=0;r<f;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[3]*s+t[4]*n+t[5])/u,d=Ny((t[0]*s+t[1]*n+t[2])/u,p,o),f=Ny(c,h,o);switch(i){case"nearest":a=Sy($,h,p,y,k,v,e,f,d,r,l);break;case"bilinear":a=Ty($,h,p,y,k,v,e,f,d,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}I[e*y+n*k+s*v+r]=a}return s.makeTensorInfo(b,r.dtype,I)}return{dataId:s.write(I,b,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;zf(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=Im(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(o);for(let e=0;e<d.length;e++){c[a]=e;const t=sm({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});d[e]=Bm({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;zf(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Gb({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=We(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=pg({inputs:{a:s,b:c},backend:n}),i=Jf({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=Ug({inputs:{a:i,b:r},backend:n}),h=Bb({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=Wx({inputs:o,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},Bx];for(const e of Ey)Q(e);const Ry={},Ay={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Fy(e){if(!(e in Ry)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete Ry[e]},!1),1===e?t.getContext("webgl",Ay)||t.getContext("experimental-webgl",Ay):t.getContext("webgl2",Ay)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;Ry[e]=t}const t=Ry[e];return t.isContextLost()?(delete Ry[e],Fy(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),Ry[e])}var Dy,_y,Oy;function My(e,t){return[t,e]}function Ly(e){const t=d(e);return g(Math.ceil(t/4))}function zy(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function By(e,t){const n=e;let s,r,a,i,o,l,u,c,h,d;return 2===V().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function Py(e,t){const n=t();return V().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function Wy(e){return!!(V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Uy(e,t){return Xy(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Dy||(Dy={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(_y||(_y={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Oy||(Oy={}));const Vy=/ERROR: [0-9]+:([0-9]+):/g;function Gy(e,t){if(Py(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Hy(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(Py(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),Py(e,()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i)),Py(e,()=>e.enableVertexAttribArray(o)),!0)}function jy(e,t,n){Py(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),Py(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function qy(e,t){Py(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),Py(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function Ky(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Xy(e,t,n){const s=Py(e,()=>t());if(null==s)throw new Error(n);return s}function Yy(e,t=2){return d(e.slice(0,e.length-t))}function Jy(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Zy(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Yy(e),...Jy(e)]),t}function Qy(e){return e%2==0}function ek(e,t){if(p(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(Qy(n)&&Qy(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Qy(e[0])&&Qy(t[0])}let tk,nk;function sk(e,t){return null!=e.getExtension(t)}function rk(e){try{if(null!=Fy(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ak(e){const t=By(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function ik(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&l("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const ok=V();function lk(){let e,t,n,s,r,a,i,o,l,u;return 2===V().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function uk(e,t,n="index"){const s=A(t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function ck(e,t,n="index"){const s=A(t);return s.map((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`).join("")}function hk(e){const t=A(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}ok.registerFlag("HAS_WEBGL",()=>ok.getNumber("WEBGL_VERSION")>0),ok.registerFlag("WEBGL_VERSION",()=>rk(2)?2:rk(1)?1:0),ok.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ok.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===ok.get("WEBGL_VERSION")),ok.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ok.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ok.registerFlag("WEBGL_PACK",()=>ok.getBool("HAS_WEBGL")),ok.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_CLIP",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_PACK_REDUCE",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_LAZILY_UNPACK",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_CONV_IM2COL",()=>ok.getBool("WEBGL_PACK")),ok.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==tk){const t=Fy(e);tk=t.getParameter(t.MAX_TEXTURE_SIZE)}return tk}(ok.getNumber("WEBGL_VERSION"))),ok.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==nk){const t=Fy(e);nk=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,nk)}(ok.getNumber("WEBGL_VERSION"))),ok.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=ok.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Fy(e);return t=sk(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:sk(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),ok.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ok.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!It()),ok.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=Fy(e);if(1===e){if(!sk(t,"OES_texture_float"))return!1}else if(!sk(t,"EXT_color_buffer_float"))return!1;return ak(t)}(ok.getNumber("WEBGL_VERSION"))),ok.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!ok.getBool("WEBGL_FORCE_F16_TEXTURES")&&ok.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ok.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=Fy(e);if(1!==e){if(sk(t,"EXT_color_buffer_float"))return ak(t);const e="EXT_color_buffer_half_float";if(sk(t,e)){const n=t.getExtension(e);return function(e,t){const n=By(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!sk(t,"OES_texture_float")&&!!sk(t,"WEBGL_color_buffer_float")&&ak(t)}(ok.getNumber("WEBGL_VERSION"))),ok.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=ok.getNumber("WEBGL_VERSION"))&&null!=Fy(e).fenceSync;var e}),ok.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ok.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ok.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),ok.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>It()&&ok.getBool("IS_CHROME")?1:-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),ok.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ok.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ok.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ok.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);const dk="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class pk{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Dy.DENSE;const t=Ly(e),n=lk();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${uk(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class fk{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Dy.DENSE;const t=Ly(e),n=lk();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${uk(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class gk{constructor(e){this.variableNames=["A"],this.outTexUsage=_y.DOWNLOAD;const t=lk();this.outputShape=e,this.userCode=`\n      ${dk}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class mk{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=_y.DOWNLOAD;const t=lk();this.outputShape=e,this.userCode=`\n      ${dk}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class bk{constructor(e,t,n=!1){this.variableNames=["A"];const s=lk(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${hk(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class xk{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=lk(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${hk(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function yk(e,t,n,s,r,a){!function(e,t){const n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return Xy(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return Py(e,()=>e.bindTexture(o,i)),Py(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),Py(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),Py(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),Py(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),Py(e,()=>e.texImage2D(o,0,s,t,n,0,r,a,null)),Py(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function kk(e){return e.internalFormatFloat}function wk(e){return e.internalFormatHalfFloat}function vk(e){return e.downloadTextureFormat}function Ik(e){return e.internalFormatPackedFloat}function $k(e){return e.internalFormatPackedHalfFloat}class Nk{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=V().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Ry[e]=t}(t,e)):this.gl=Fy(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===V().getNumber("WEBGL_VERSION")){const e="OES_texture_half_float";if(this.textureFloatExtension=Uy(this.gl,"OES_texture_float"),sk(this.gl,e))this.textureHalfFloatExtension=Uy(this.gl,e);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),sk(this.gl,s))this.colorBufferHalfFloatExtension=Uy(this.gl,s);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",sk(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!sk(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=Xy(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Py(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Py(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Xy(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Py(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),Py(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Xy(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=By(this.gl,this.textureHalfFloatExtension)}get debug(){return V().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Py(e,()=>e.finish()),Py(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Py(e,()=>e.deleteFramebuffer(this.framebuffer)),Py(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Py(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Py(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=My(t,n);return yk(e,r,a,kk(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=My(t,n);return yk(e,r,a,wk(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=My(t,n);return yk(e,r,a,vk(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Py(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?Py(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):Py(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),Py(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;Py(e,()=>e.bindTexture(e.TEXTURE_2D,t)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),Py(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i)),Py(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=zy(t,n);return yk(e,r,a,$k(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=zy(t,n);return yk(e,r,a,Ik(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(qy(this.gl,this.framebuffer),this.outputTexture=null),Py(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,s){const[r,a]=My(t,n),i=new Uint8Array(t*n*4);return Py(e,()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=zy(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();Py(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r));const a=16*t*n;return Py(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),Py(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),Py(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),r}(this.gl,t,n);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(V().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const s=new Float32Array(t*n*4);return Py(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s)),s}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=Xy(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Py(e,()=>e.shaderSource(n,t)),Py(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=Vy.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map((e,t)=>m((t+1).toString(),a)+e);let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${m(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e);null==this.vertexShader&&(this.vertexShader=function(e){const t=lk();return function(e,t){const n=Xy(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Py(e,()=>e.shaderSource(n,t)),Py(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const s=function(e){return Xy(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return Py(t,()=>t.attachShader(s,this.vertexShader)),Py(t,()=>t.attachShader(s,n)),function(e,t){if(Py(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&Gy(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return Py(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Hy(e,t,"clipSpacePos",n,3,20,0)&&Hy(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Py(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Gy(this.gl,this.program),Py(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Xy(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Py(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){Py(e,()=>function(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}(e,n),Py(e,()=>e.activeTexture(e.TEXTURE0+n)),Py(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,s)),Py(e,()=>e.uniform1i(n,s))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=zy(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Gy(this.gl,this.program),Ky(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Py(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Py(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Uy(this.gl,2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await b(()=>this.disposed||this.isQueryAvailable(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||b(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),jy(this.gl,e,this.framebuffer),this.debug&&Ky(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(jy(this.gl,this.outputTexture,this.framebuffer),this.debug&&Ky(this.gl)):qy(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;jy(s,e,this.framebuffer),this.debug&&Ky(s),this.outputTexture=e,Py(s,()=>s.viewport(0,0,t,n)),Py(s,()=>s.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),Py(this.gl,()=>this.gl.scissor(e,t,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:Ck}=sl;function Sk(e,t,n){const s=[];if(e.forEach(e=>{const t=d(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Lk(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const r=s.join("\n"),a=e.map(e=>function(e,t,n=!1,s){let r="";return r+=n?Ek(e,s):Tk(e,s),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=Ck(e.shapeInfo.logicalShape,t.logicalShape),l=Mk(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", ");let f="return outputValue;";const g=1===d(e.shapeInfo.logicalShape),m=1===d(t.logicalShape);if(1!==a||g||m){if(g&&!m)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length;if(!e.shapeInfo.isUniform&&a===i&&null==e.shapeInfo.flatOffset&&p(e.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const o=Mk(i),l=Ck(e.shapeInfo.logicalShape,t.logicalShape),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&l.length>=1?"coords = 0;":l.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let d="";return d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", "),`\n    float ${r}() {\n      ${o} coords = getOutputCoords();\n      ${c}\n      return get${s}(${d});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),i=t.texShape,o=lk(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Rk}\n    ${Ak}\n    ${Fk}\n  `}(o);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(p(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return p(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${ck(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=uk(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${ck(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=uk(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=uk(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=uk(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=Dk),[h,l,c,r,u,a,n.userCode].join("\n")}function Tk(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=_k(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Ok(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=_k(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&p(n,a))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${a[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:i,keptDims:o}=k(n);if(i.length<n.length){const n=["row","col"];return`\n      ${Tk(zk(e,i),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Bk(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Ok(e)}\n      }\n    `;const l=a[0],u=a[1],c=_k(s);return 1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${c}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===l?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${c}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${c};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=k(n);if(o.length<n.length){const n=["row","col","depth"];return`\n        ${Tk(zk(e,o),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Bk(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${Ok(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(h===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const p=_k(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${a} + col * ${i} + depth + ${p};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${p};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=k(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Tk(zk(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Bk(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${Ok(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const b=_k(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=k(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Tk(zk(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Bk(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${Ok(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];return p===o&&null==c?`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:p===r&&null==c?`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${_k(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=k(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Tk(zk(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Bk(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Ok(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];return f===c&&null==h?`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:f===i&&null==h?`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${_k(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Ek(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${lk().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=lk();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=lk();if(null!=a&&p(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${Ek(zk(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Bk(a,s)});\n        }\n      `}const o=lk();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=lk();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let d=h*Math.ceil(a[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)p=`int b${e}, `+p,d*=a[i-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Rk="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ak="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Fk="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Dk="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function _k(e){return`offset${e}`}function Ok(e){const t=e.name,n=d(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Mk(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Lk(e,t,n){const{newShape:s}=k(t),r=t.length,a=e&&3===r&&1===t[0],i=a?t.slice(1):s,o=!e&&r>1&&!p(t,n)&&s.length<r||a;return{useSqueezeShape:o,uniformShape:o?i:t}}function zk(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Bk(e,t){return t.map(t=>e[t]).join(", ")}function Pk(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!p(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!p(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function Wk(e){return V().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}const{addImpl:Uk,bincountImpl:Vk,bincountReduceImpl:Gk,ceilImpl:Hk,concatImpl:jk,equalImpl:qk,expImpl:Kk,expm1Impl:Xk,floorImpl:Yk,gatherNdImpl:Jk,gatherV2Impl:Zk,greaterImpl:Qk,greaterEqualImpl:ew,lessImpl:tw,lessEqualImpl:nw,linSpaceImpl:sw,logImpl:rw,maxImpl:aw,maximumImpl:iw,minimumImpl:ow,multiplyImpl:lw,negImpl:uw,notEqualImpl:cw,prodImpl:hw,rangeImpl:dw,rsqrtImpl:pw,simpleAbsImpl:fw,sliceImpl:gw,sparseFillEmptyRowsImpl:mw,sparseReshapeImpl:bw,sparseSegmentReductionImpl:xw,stridedSliceImpl:yw,stringNGramsImpl:kw,stringSplitImpl:ww,stringToHashBucketFastImpl:vw,subImpl:Iw,tileImpl:$w,topKImpl:Nw,transposeImpl:Cw,uniqueImpl:Sw}=$m;function Tw(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Ew(e,t){return 1===t?[e]:Tw(e,t)}class Rw{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Ew("rc",t),s=Mk(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class Aw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${uk(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${hk(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Fw{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=_w(t,n),r=Ow(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=Dw(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===Oy.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===Oy.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===Oy.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===Oy.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===Oy.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=_w(n,s),a=Ow(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=Dw(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=V().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Dw(e,t,n,s,r){const a=function(e,t){switch(e){case Oy.PACKED_2X2_FLOAT32:return Ik(t);case Oy.PACKED_2X2_FLOAT16:return $k(t);case Oy.UNPACKED_FLOAT32:return kk(t);case Oy.UNPACKED_FLOAT16:return wk(t);case Oy.PACKED_4X1_UNSIGNED_BYTE:return vk(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=zy(e[0],e[1]);i=t*n}else{const[t,n]=My(e[0],e[1]);i=t*n}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function _w(e,t){if(e===_y.UPLOAD)return Oy.PACKED_2X2_FLOAT32;if(e===_y.RENDER||null==e)return function(e){return V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Oy.PACKED_2X2_FLOAT32:Oy.UNPACKED_FLOAT32:e?Oy.PACKED_2X2_FLOAT16:Oy.UNPACKED_FLOAT16}(t);if(e===_y.DOWNLOAD||e===_y.PIXELS)return Oy.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Ow(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Mw{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Wk(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Lw="return x;";class zw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Wk(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Bw{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=Ew("rc",t),s=Mk(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const Pw=Ii,Ww={},Uw=V().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Vw extends n{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!V().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=Fy(V().getNumber("WEBGL_VERSION"));this.binaryCache=((n=V().getNumber("WEBGL_VERSION"))in Ww||(Ww[n]={}),Ww[n]),this.gpgpu=new Nk(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var n;this.textureManager=new Fw(this.gpgpu),this.numMBBeforeWarning=null==V().global.screen?1024:V().global.screen.height*V().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new t(this,Kn())}nextDataId(){return Vw.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((V().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||V().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:_y.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(V().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:_y.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new zw(i,Lw):new Mw(i,Lw);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=Ve()),c="complex64"===s?Mo(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=Ve()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new zw(s,Lw):new Mw(s,Lw);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===V().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&V().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...Ly(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Mo(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=d(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;Py(e,()=>e.deleteBuffer(c))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(h)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Kn().removeDataId(e,this),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>He(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return dn(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Wy(n)){if(V().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=d(t);if(V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...Ly(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=V().getBool("WEBGL_PACK")&&!0===s,i=a?Zy(t):t,o=a?new mk(i):new gk(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=h(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),a=h(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:a[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ve(),endMs:null}}endTimer(e){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Ve(),e)}async getQueryTime(e){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Uw){return V().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&d(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){Oo("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Pw(e.shape,t)}packedUnaryOp(e,t,n){const s=new zw(e.shape,t),r=this.compileAndRun(s,[e],n);return Kn().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=fw(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(V().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new Mw(e.shape,"return abs(x);"),n=this.compileAndRun(t,[e]);return Kn().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&C(n[0])){const r=n.map(e=>Ge(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return Kn().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new Bw(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Rw(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Yy(e.shape),...Jy(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Yy(t),...Jy(t)],a=new Aw(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=Zy(s);let i;return i=n?new fk(a):new pk(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===Dy.DENSE){const t=Ly(e.outputShape);i.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===d(a.shape))return i.values=w(a.dtype,0),a;const o=[],l=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&d(t.shape)<=V().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!ek(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach(t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o}=Lk(e.packedInputs,t.shape,a);let l="",u="",c="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=A(o);c=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else u=`${o[0]>1}_${o[1]>1}`;const h=t.shape.length,f=2===h&&p(t.shape,a),g=1===d(t.shape),m=lr(t.shape,n.shape),b=!e.packedInputs&&h===n.shape.length&&p(a,n.texData.texShape);s+=`${h}_${b}_${i}_${o.length}_${g}_${m}_${f}_${l}_${u}_${c}_${e.packedInputs||h>2?"":`${a[0]>1}_${a[1]>1}`}_${r}`}else s+=`${t.shape}_${t.isUniform?"uniform":t.texData.texShape}_${r}`});let r=e.constructor.name;return r+="_"+s+"_"+e.userCode+`${V().getNumber("WEBGL_VERSION")}`,r}(e,l,u),h=this.getAndSaveBinary(c,()=>function(e,t,n,s){const r=n.map((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}}),a=r.map(e=>e.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=Sk(r,i,t),l=e.createProgram(o);let u=null;const c=e.getUniformLocation(l,"NAN",!1);1===V().getNumber("WEBGL_VERSION")&&(u=e.getUniformLocation(l,"INFINITY",!1));const h=!1,d={},p={},f={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n];d[s]=e.getUniformLocation(l,s,h),d[`offset${s}`]=e.getUniformLocation(l,`offset${s}`,h),t.enableShapeUniforms&&(p[`${s}Shape`]=e.getUniformLocation(l,`${s}Shape`,h),f[`${s}TexShape`]=e.getUniformLocation(l,`${s}TexShape`,h))}let g,m,b;t.enableShapeUniforms&&(g=e.getUniformLocation(l,"outShape",h),b=e.getUniformLocation(l,"outShapeStrides",h),m=e.getUniformLocation(l,"outTexShape",h));const x=[];return t.customUniforms&&t.customUniforms.forEach((t,n)=>{x[n]=e.getUniformLocation(l,t.name,h)}),{program:t,source:o,webGLProgram:l,uniformLocations:d,customUniformLocations:x,inShapeInfos:a,outShapeInfo:i,infLoc:u,nanLoc:c,inShapesLocations:p,inTexShapesLocations:f,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:m}}(this.gpgpu,e,l,u)),f=null!=this.activeTimers;let g;f&&(g=this.startTimer()),function(e,t,n,s,r){t.program.enableShapeUniforms||(Pk(t.inShapeInfos,n),Pk([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===V().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,Infinity),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`],o=t.inShapesLocations[`${r}Shape`],l=t.inTexShapesLocations[`${r}TexShape`];if(o){const{uniformShape:s}=Lk(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(d(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)});const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=A(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach((n,s)=>{const a=t.customUniformLocations[s],i=r[s];if("float"===n.type)e.gl.uniform1fv(a,i);else if("vec2"===n.type)e.gl.uniform2fv(a,i);else if("vec3"===n.type)e.gl.uniform3fv(a,i);else if("vec4"===n.type)e.gl.uniform4fv(a,i);else if("int"===n.type)e.gl.uniform1iv(a,i);else if("ivec2"===n.type)e.gl.uniform2iv(a,i);else if("ivec3"===n.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,i)}}),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const m=V().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Ve();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!V().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){return this.runWebGLProgram(e,t,n=n||t[0].dtype,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(V().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Yn(()=>{if(!V().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=V().getBool("DEBUG");V().set("DEBUG",!1);const t=this.abs(qa(1e-8)).dataSync()[0];if(V().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:o,isPacked:l}=t;if(null!=a)return;const u=null!=this.activeTimers;let c;u&&(c=Ve());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?i(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=k(e);e=t.newShape}let s=d(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Yy(e);let n=2,r=2;return e.length&&([n,r]=Jy(e)),s=t*(n/2)*(r/2),g(s).map(e=>2*e)}return g(s)}(n,l),t.texShape=h),null!=r){const e=Zy(n);let a,i=h[1],o=h[0];const d=r instanceof Uint8Array;l?([i,o]=zy(h[0],h[1]),a=new xk(e,[o,i],d)):a=new bk(e,[o,i],d);const p=this.makeTensorInfo([o,i],s);this.texData.get(p.dataId).usage=d?_y.PIXELS:_y.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),i,o,r);const f=this.runWebGLProgram(a,[p],s,null,!0),g=this.texData.get(f.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(p),this.texData.delete(f.dataId),t.values=null,u&&(this.uploadWaitMs+=Ve()-c)}else{const e=this.acquireTexture(h,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*N(t)}}Vw.nextDataId=0,$t()&&Qn("webgl",()=>new Vw,2);class Gw{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=cr(t,n),this.enableShapeUniforms=Wk(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class Hw{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=cr(t,n);const r=this.outputShape.length;this.enableShapeUniforms=Wk(r);let a="";if(s)if(0===r||1===d(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${Mk(r)} coords = getOutputCoords();\n        `,1===r)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Ew("coords",r);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function jw(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const qw={kernelName:"Identity",backendName:"webgl",kernelFunc:jw};function Kw(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=jw({inputs:{x:s},backend:n}),l=jw({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const Xw={kernelName:"Complex",backendName:"webgl",kernelFunc:Kw},Yw="return (a < 0.) ? b * a : a;",Jw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Zw={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",We(a,"float32")),o=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Hw(Jw,r.shape,i.shape):new Gw(Yw,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},Qw="return (a < 0.) ? b * a : a;",ev="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",tv={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Hw(ev,s.shape,r.shape):new Gw(Qw,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function nv({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new zw(i.shape,t):new Mw(i.shape,e),o.runWebGLProgram(u,[i],l)}}function sv({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new Gw(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],dt(n.dtype,s.dtype))}),a=Kw({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||dt(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?tl(e):e,s="string"===l.dtype?tl(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let d;return d=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Hw(t,l.shape,u.shape,n):new Gw(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function rv(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?ev:Qw;if("leakyrelu"===e)return t?Jw:Yw;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class av{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=Math.ceil((s?e[1]:e[2])/2),c=s?"i * 2, rc.y":"rc.y, i * 2",h=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",g="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const m=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${p[0]});\n          result += (${d[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class iv{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=cr(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ov="return a * b;";function lv(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=dt(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new iv("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new iv("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=Kw({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=lw(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Hw(ov,s.shape,r.shape):new Gw(ov,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const uv={kernelName:"Multiply",backendName:"webgl",kernelFunc:lv};function cv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=d(r.shape),u=x(a,o),c=d(u);l(o===c,()=>`The new shape (${u}) has ${c} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const h=i.texData.get(r.dataId);return!h.isPacked||ek(r.shape,u)||null!==h.texture&&ek(h.shape,u)?(i.incRef(r.dataId),{dataId:r.dataId,shape:u,dtype:r.dtype}):function(e,t,n){const s=[Yy(e.shape),...Jy(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Yy(t),...Jy(t)],i=new Aw(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,u,i)}const hv={kernelName:"Reshape",backendName:"webgl",kernelFunc:cv};class dv{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${f(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class pv{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function fv(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=To(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new dv({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new dv({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new pv({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class gv{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=Mk(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class mv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=Mk(this.rank),r=Tw("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function bv(e,t,n){const s=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mv(e.shape,t):new gv(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function xv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=e.shape.length,a=y(t,e.shape);let i=a;const o=Jr(i,r),l=null!=o;let u=e;l&&(u=bv(e,o,s),i=Qr(i.length,r)),Yr("sum",i,r);const[c,h]=Kr(u.shape,i);let p=c;n&&(p=Xr(c,a));const f=d(h),g=cv({inputs:{x:u},attrs:{shape:[d(e.shape)/f,f]},backend:s}),m=fv(g,pt(e.dtype),"sum",s),b=cv({inputs:{x:m},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(m),l&&s.disposeIntermediateTensorInfo(u),b}(r,a,i,n)}const yv={kernelName:"Sum",backendName:"webgl",kernelFunc:xv};function kv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=new Array(r.shape.length);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];let l;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId),t=Cw(e.values,r.shape,r.dtype,a,o);l=i.makeTensorInfo(o,r.dtype),i.texData.get(l.dataId).values=t}else l=bv(r,a,i);return l}const wv={kernelName:"Transpose",backendName:"webgl",kernelFunc:kv};function vv({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],f=s?t.shape[h-1]:t.shape[h-2],g=n?e.shape[c-1]:e.shape[c-2],m=s?t.shape[h-2]:t.shape[h-1],b=e.shape.slice(0,-2),x=t.shape.slice(0,-2),y=d(b),k=d(x);l(c>=2&&h>=2&&(y===k||1===y||1===k),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${b}) and (${x}).`);const w=(y>k?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([g,m]);l(p===f,()=>`Error in matMul: inner shapes (${p}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const v=n?[y,p,g]:[y,g,p],I=s?[k,m,f]:[k,f,m],$=cv({inputs:{x:e},backend:r,attrs:{shape:v}}),N=cv({inputs:{x:t},backend:r,attrs:{shape:I}}),C=[$,N],S=Math.max(y,k),T=n?$.shape[1]:$.shape[2],E=null!=a,R=null!=i,A="leakyrelu"===u,F=null!=u?rv(u,!0):null;let D;if((1===g||1===m)&&T>1e3&&!1===(E||R||A||null!=F)){let e=$,t=N;n&&(e=kv({inputs:{x:$},backend:r,attrs:{perm:[0,2,1]}}),C.push(e)),s&&(t=kv({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),C.push(t));const a=1===m;let i=e;1!==m&&(i=cv({inputs:{x:e},backend:r,attrs:{shape:[S,T,1]}}),C.push(i));const o=1===m?2:1;let l=t;a&&(l=cv({inputs:{x:t},backend:r,attrs:{shape:[S,1,T]}}),C.push(l));const u=lv({inputs:{a:i,b:l},backend:r});D=xv({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),C.push(u)}else{const l=dt(e.dtype,t.dtype),u=new av(v,I,[S,g,m],n,s,E,F,R,A),c=[$,N];if(null!=a&&c.push(a),R&&c.push(i),A){const e=r.makeTensorInfo([],"float32",We(o,"float32"));c.push(e),C.push(e)}D=r.runWebGLProgram(u,c,l)}const _=cv({inputs:{x:D},backend:r,attrs:{shape:w}});C.push(D);for(const e of C)r.disposeIntermediateTensorInfo(e);return _}const Iv={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return vv({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},$v="return abs(x);",Nv={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=fw(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new zw(s.shape,$v):new Mw(s.shape,$v),n.runWebGLProgram(r,[s],s.dtype)}},Cv={kernelName:"Acos",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},Sv={kernelName:"Acosh",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},Tv="return a + b;",Ev={kernelName:"Add",backendName:"webgl",kernelFunc:sv({opSnippet:Tv,packedOpSnippet:Tv,supportsComplex:!0,cpuKernelImpl:Uk})};class Rv{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class Av{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const Fv={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return jw({inputs:{x:r[0]},backend:s});if(r.length>V().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map(e=>e.dtype).reduce((e,t)=>dt(e,t)),i=r.map(e=>e.shape),o=V().getBool("WEBGL_PACK")?new Av(r[0].shape,i):new Rv(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},Dv={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=y(a,r.shape);let u=l;const c=Jr(u,o);let h=r;null!=c&&(h=kv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Qr(u.length,o)),Yr("all",u,o);const[p,f]=Kr(h.shape,u),g=cv({inputs:{x:h},backend:n,attrs:{shape:[-1,d(f)]}}),m=fv(g,g.dtype,"all",n);let b;return b=cv(i?{inputs:{x:m},backend:n,attrs:{shape:Xr(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}},_v={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=y(a,r.shape);let u=l;const c=Jr(u,o);let h=r;null!=c&&(h=kv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Qr(u.length,o)),Yr("any",u,o);const[p,f]=Kr(h.shape,u),g=cv({inputs:{x:h},backend:n,attrs:{shape:[-1,d(f)]}}),m=fv(g,g.dtype,"any",n);let b;return b=cv(i?{inputs:{x:m},backend:n,attrs:{shape:Xr(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}};class Ov{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===t?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Mv{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,l(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const r=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const a=this.outputShape,i=a.length,o=Mk(i),u=Ew("coords",i);let c,h;if(1===r){h=i+1;const e=Mk(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else h=i,c=`\n        ${o} sourceLocR = coords;\n        ++${u[i-1]};\n        ${o} sourceLocG = coords;\n        ++${u[i-2]};\n        ${o} sourceLocA = coords;\n        --${u[i-1]};\n        ${o} sourceLocB = coords;\n        --${u[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(e=>"int "+e),g=Ew("sourceLocR",h-1).concat("inIdx.r"),m=Ew("sourceLocG",h-1).concat("inIdx.g"),b=Ew("sourceLocB",h-1).concat("inIdx.b"),x=Ew("sourceLocA",h-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",k=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${m.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${o} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${a[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${a[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Lv(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=To(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new Ov(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=Lv(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function zv(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=To(r[r.length-1]),i=new Mv(r,a,n,null==s),o=e.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(o.shape.length===t.shape.length){const s=zv(e,t,n,o);return e.disposeIntermediateTensorInfo(o),s}return o}function Bv(e,t,n,s){const r=[n];if(Yr("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!V().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=Kr(t.shape,r),o=d(i),l=cv({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=Lv(e,l,s);n.push(u);const c=cv({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),c}return zv(e,t,s)}const Pv={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=y(a,r.shape);const o=Jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=kv({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Qr(i.length,l.shape.length)),Yr("argMax",[i[0]],l.shape.length);const c=Bv(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},Wv={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=y(a,r.shape);const o=Jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=kv({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Qr(i.length,l.shape.length)),Yr("argMin",[i[0]],l.shape.length);const c=Bv(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},Uv={kernelName:"Asin",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},Vv={kernelName:"Asinh",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},Gv={kernelName:"Atan",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},Hv={kernelName:"Atan2",backendName:"webgl",kernelFunc:sv({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},jv={kernelName:"Atanh",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class qv{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t;let g="0.0";if(f||(g="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`:`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let m=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(m="avgValue / count");const b=4*Math.floor(a/4),x=a%4,y=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${g};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${g});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${y}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===x}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${y}\n          } else if (${2===x}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${y}\n          } else if (${3===x}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${y}\n          }\n        }\n        setOutput(${m});\n      }\n    `}}class Kv{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,g=e.padInfo.front,m=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;const x="avg"===t;let y="0.0";if(x||(y="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${g}, ${m}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let k=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(k="avgValue / count");const w=4*Math.floor(a/4),v=a%4,I=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${g}, ${m}, ${b});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${k});\n        }\n      }\n    `}}const Xv={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ik(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(Ss(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=bs(r.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return jw({inputs:{x:r},backend:n});const h=new qv(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}},Yv={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=xs(r.shape,a,i,[1,1,1],o,l,u),h=new Kv(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class Jv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n            wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${e.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,s=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterDepth*e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n            wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${s};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Qv={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=xs(i.shape,o,l,[1,1,1],u,c),d=new Zv(h);return n.runWebGLProgram(d,[r],i.dtype)}},eI={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;ik([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=bs(i.shape,o,l,1,u),h=new Jv(c);return n.runWebGLProgram(h,[r],i.dtype)}},tI={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return vv({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class nI{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],cr(e,t),cr(e,n);let i="0.0";null!=s&&(cr(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(cr(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class sI{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],cr(e,t),cr(e,n);let i="vec4(0.0)";null!=s&&(cr(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(cr(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const rI={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;l(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),l(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),l(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,r,a];let h=null;null!=i&&(h=i.shape,c.push(i));let d=null;null!=o&&(d=o.shape,c.push(o));const p=V().getBool("WEBGL_PACK_NORMALIZATION")?new sI(s.shape,r.shape,a.shape,h,d,u):new nI(s.shape,r.shape,a.shape,h,d,u);return t.runWebGLProgram(p,c,c[0].dtype)}};class aI{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Mk(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return iI.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${iI[t]} = start[${t}] + coords.${iI[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const iI=["x","y","z","w","u","v"];class oI{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Mk(this.rank),n=Ew("coords",this.rank),s=Ew("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function lI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Un(r,a,i);if(Tn(r,o,l),0===d(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=gw(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Pn(r.shape,o,l);if(u||!c){const e=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oI(l):new aI(l);return n.runWebGLProgram(e,[r],r.dtype,[o])}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Wn(t,A(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const uI={kernelName:"Slice",backendName:"webgl",kernelFunc:lI},cI={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;l(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),u=Ro(r.shape,a,o),c=Ao(u.length,a.length),h=Fo(r.shape,a,o),d=Do(i,a.length),p=_o(h,i,a.length),f=[],g=cv({inputs:{x:r},backend:n,attrs:{shape:u}}),m=kv({inputs:{x:g},backend:n,attrs:{perm:c}}),b=cv({inputs:{x:m},backend:n,attrs:{shape:h}}),x=lI({inputs:{x:b},backend:n,attrs:{begin:d,size:p}});return f.push(g),f.push(m),f.push(b),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},hI={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=Vk(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},dI=sv({opSnippet:"return float(a != b);",cpuKernelImpl:cw,dtype:"bool"}),pI={kernelName:"NotEqual",backendName:"webgl",kernelFunc:dI};function fI(e){const{inputs:t,backend:n}=e,{input:s}=t;return jw({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const gI={kernelName:"Real",backendName:"webgl",kernelFunc:fI},mI={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return jw({inputs:{x:a},backend:s});const t=ua(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=Kw({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=fI({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!I(a.dtype,i)){const e=jw({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new Mw(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",w("bool",1)),t=dI({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},bI="return ceil(x);",xI={kernelName:"Ceil",backendName:"webgl",kernelFunc:nv({opSnippet:bI,packedOpSnippet:bI,cpuKernelImpl:Hk})};class yI{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class kI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const wI={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;return o=V().getBool("WEBGL_PACK_CLIP")?new kI(r.shape):new yI(r.shape),n.runWebGLProgram(o,[r],r.dtype,[[a],[i]])}};class vI{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function II(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const $I={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new vI(s.shape),i=[II(s,r.complexTensorInfos.real),II(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class NI{constructor(e){this.outputShape=[],this.outputShape=So(e,1),this.variableNames=e.map((e,t)=>`T${t}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++)n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${t[e-1]}));`);n.push(`else setOutput(getT${t.length}(yR, yC-${t[t.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class CI{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=So(e,t);const n=this.outputShape,s=n.length,r=Mk(s),a=Ew("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>`T${t}`);const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${SI(i,l,t)}),\n            vec2(${SI(u,l,t)}));\n        }`}const d=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${SI(i,l,d)}),\n          vec2(${SI(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function SI(e,t,n){const s=e.indexOf(t);return e.map((e,t)=>t===s?`${e} - ${n}`:e).join()}function TI(e){const{inputs:t,backend:n}=e,{input:s}=t;return jw({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const EI={kernelName:"Imag",backendName:"webgl",kernelFunc:TI};function RI(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map(e=>fI({inputs:{input:e},backend:n})),r=e.map(e=>TI({inputs:{input:e},backend:n})),a=RI(s,t,n),i=RI(r,t,n),o=Kw({inputs:{real:a,imag:i},backend:n});return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),r.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map(e=>{const s=d(e.shape.slice(t));return cv({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})}),a=r.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),i=So(r.map(e=>e.shape),1),o=jk(a,i,s,1===r[0].shape[0]),l=So(e.map(e=>e.shape),t),u=n.makeTensorInfo(l,s,o);return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}if(e.length>V().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=RI(e.slice(0,s),t,n),a=RI(e.slice(s),t,n),i=RI([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new CI(e.map(e=>e.shape),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:a,outShape:i}=function(e,t,n){const s=So(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>cv({inputs:{x:e},attrs:{shape:[-1,d(e.shape.slice(t))]},backend:n})),outShape:s}}(e,t,n),o=new NI(a.map(e=>e.shape)),l=n.runWebGLProgram(o,a,s);a.forEach(e=>n.disposeIntermediateTensorInfo(e));const u=cv({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function AI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=y(r,t[0].shape)[0],i=So(t.map(e=>e.shape),a);if(0===d(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>d(e.shape)>0);return 1===o.length?jw({inputs:{x:o[0]},backend:n}):(Co(o.map(e=>e.shape),a),RI(o,a,n))}const FI={kernelName:"Concat",backendName:"webgl",kernelFunc:AI};class DI{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,g="channelsLast"===e.dataFormat,m=g?1:2,b=g?2:3,x=g?3:1;let y="",k="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,k="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${b}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${k}\n        setOutput(result);\n      }\n    `}}class _I{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OI{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=r*s,g=lk(),m="channelsLast"===h,b=m?0:1,x=m?1:2;let y="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)y+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[b]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[x]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${m}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${y}\n\n        ${g.output} = result;\n      }\n    `}}function MI({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u=e.shape,c=s.texData.get(e.dataId),h="channelsLast"===n.dataFormat;let d;const p=[],f=u[2]%2!=0&&!!c.isPacked;if((1!=u[0]*u[1]*u[2]&&1!==n.outChannels||!(n.inChannels>1e3))&&V().getBool("WEBGL_LAZILY_UNPACK")&&V().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&f){const f={dataId:e.dataId,shape:[1,h?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),n.inChannels],dtype:e.dtype},g=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,l(ek(c.shape,f.shape),()=>`packed reshape ${c.shape} to ${f.shape} isn't free`);const m=cv({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});p.push(m);const b=vv({a:f,b:m,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),x=s.texData.get(b.dataId);l(x.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=g,x.shape=n.outShape,d=jw({inputs:{x:b},backend:s}),d.shape=n.outShape,p.push(b)}else{const l=cv({inputs:{x:e},backend:s,attrs:{shape:[1,h?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=cv({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),f=vv({a:l,b:c,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});d=cv({inputs:{x:f},backend:s,attrs:{shape:n.outShape}}),p.push(l),p.push(c),p.push(f)}for(const e of p)s.disposeIntermediateTensorInfo(e);return d}function LI({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:f}=n,g="channelsLast"===f,m=l*u*c,b=p*h,x=[m,b],y=[],k=cv({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=cv({inputs:{x:t},backend:s,attrs:{shape:[1,m,d(t.shape)/m]}});y.push(k),y.push(w);const v=new OI(x,k.shape,n),I=s.runWebGLProgram(v,[k],"float32"),$=cv({inputs:{x:I},backend:s,attrs:{shape:[1,x[0],x[1]]}});y.push(I),y.push($);const N=null!=r,C=null!=a,S="leakyrelu"===o,T=o?rv(o,!0):null,E=new av($.shape,w.shape,[1,b,n.outChannels],!0,!1,N,T,C,S),R=[$,w];if(r&&R.push(r),C&&R.push(a),S){const e=s.makeTensorInfo([],"float32",We(i,"float32"));R.push(e),y.push(e)}const A=s.runWebGLProgram(E,R,"float32"),F=cv({inputs:{x:A},backend:s,attrs:{shape:g?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});y.push(A);for(const e of y)s.disposeIntermediateTensorInfo(e);return F}const zI={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Ts(l),d=ys(r.shape,a.shape,i,u,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(V().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])p=LI({x:r,filter:a,convInfo:d,backend:n});else{const e=new DI(d);p=n.runWebGLProgram(e,[r,a],"float32")}else p=MI({x:r,filter:a,convInfo:d,backend:n});const f=cv({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class BI{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===e.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PI{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s="channelsLast"===e.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${s?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${s?1:2}], coords[${s?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WI{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${e.strideDepth} - ${e.padInfo.front};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class UI{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${e.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VI={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Ts(l),d=ys(r.shape,c,i,1,o,u,!1,h),p=new BI(d);return n.runWebGLProgram(p,[r,a],"float32")}},GI={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Ts(u),d=ys(i,a.shape,o,1,l,c,!1,h),p=new PI(d);return n.runWebGLProgram(p,[r,a],"float32")}},HI={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=ks(r.shape,a.shape,i,l,o),c=new _I(u);return n.runWebGLProgram(c,[r,a],"float32")}},jI={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=ks(r.shape,l,i,1,o),c=new WI(u);return n.runWebGLProgram(c,[r,a],"float32")}},qI={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=ks(l,a.shape,o,1,i),c=new UI(u);return n.runWebGLProgram(c,[r,a],"float32")}},KI={kernelName:"Cos",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},XI={kernelName:"Cosh",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class YI{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[i-1+".0",o-1+".0"],[g,m,b]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[x,y,k]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${y};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${k};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const JI={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new YI(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class ZI{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${QI(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Mk(s)} coords = getOutputCoords();\n        int end = ${e$(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${e$(s,"coords")} = idx;\n          val += getX(${QI(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function QI(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function e$(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const t$={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=Jr([a],l);let c=r;null!=u&&(c=kv({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=Qr(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const d=c.shape[h];let p=jw({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(d))-1;e++){const t=new ZI(c.shape,!1,o),s=p;p=n.runWebGLProgram(t,[p],p.dtype,[[e]]),n.disposeIntermediateTensorInfo(s)}if(i){const e=new ZI(c.shape,i,o),t=p;p=n.runWebGLProgram(e,[p],p.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=kv({inputs:{x:p},backend:n,attrs:{perm:Zr(u)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),e}return p}},n$={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=Vk(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=Gk(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class s${constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const r$={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;l(a>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`);const o=r.shape[0],u=("NHWC"===i?r.shape[1]:r.shape[2])*a,c=("NHWC"===i?r.shape[2]:r.shape[3])*a,h=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),d=new s$("NHWC"===i?[o,u,c,h]:[o,h,u,c],a,i);return n.runWebGLProgram(d,[r],r.dtype)}};class a${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,d=e.dilationWidth,p=e.filterHeight,f=e.filterWidth,g=e.outChannels/e.inChannels;let m="",b="";n&&(m=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,b="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${g};\n        int q = d2 - d1 * ${g};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}class i${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.outChannels/e.inChannels,o=e.inHeight,l=e.inWidth,u=e.padInfo.top,c=e.padInfo.left,h=e.strideHeight,d=e.strideWidth,p=e.dilationHeight,f=e.dilationWidth,g=e.filterHeight,m=e.filterWidth,b=m;let x="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<m;e++)x+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;for(let e=0;e<g;e++){for(let e=0;e<m;e++)x+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;x+=`\n        xR = xRCorner + ${e*p};\n        if (xR >=0 && xR < ${o}) {\n      `;for(let t=0;t<(b+1)/2;t++){const n=2*t,s=n*f;if(x+=`\n          xC = xCCorner + ${s};\n          `,1===d){if(n<m&&(c%2==1?(x+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,x+=1===f&&s>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${l}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):x+=`\n                if (xC >= 0 && xC < ${l} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,s+1<m)){const e=c%2==0?i(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(x+=`\n                  xCOffset = xC + ${c%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,f>1&&(x+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${n}Ready == 0) {\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${n}Ready = 1;\n                    }\n                    `),x+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                  `):x+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${l}) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else s<m&&(c%2==1?(x+=`\n                xCOffset = xC + 1 - ${d};\n                if(xCOffset >= 0 && xCOffset < ${l} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${l} && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${l}) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,s+1<m&&(x+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${d};\n                  if(xCOffset >= 0 && xCOffset < ${l}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(x+=`\n                if(xC >= 0 && xC < ${l} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + ${d};\n                if(xCOffset >= 0 && xCOffset < ${l} && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,s+1<m&&(x+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<m&&(x+=`\n            wTexel = getW(${e}, ${s}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,s+1<m&&(x+=`\n              wTexel = getW(${e}, ${s+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}x+="\n        }\n      "}let y="",k="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,k="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${h}, ${d});\n      const ivec2 pads = ivec2(${u}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${x}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${w}\n        ${k}\n        setOutput(result);\n      }\n    `}}const o$={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),l(Ss(i,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);const d=ys(r.shape,a.shape,i,h,o,c,!0);let p;return p=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new i$(d):new a$(d),n.runWebGLProgram(p,[r,a],"float32")}};class l${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${e.outChannels/e.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class u${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${s}; dm++) {\n              int d2 = d1 * ${s} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const c$={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=ys(r.shape,c,i,o,l,u,!0),d=new l$(h);return n.runWebGLProgram(d,[r,a],"float32")}},h$={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=ys(c,a.shape,i,o,l,u,!0),d=new u$(h);return n.runWebGLProgram(d,[r,a],"float32")}};class d${constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const p$={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=d(s.shape),i=cv({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new d$(a),l=n.runWebGLProgram(o,[i],i.dtype),u=cv({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class f${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const g$={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=ms(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new f$(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=cv({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},m$={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Ho(r,a.length);qo(i.length,l,a);const{path:u,steps:c}=Ko(o,l),h=c.length;let d=null,f=i.length;const g=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=jo(f,l[t]);let r;Xo(e)?r=a[t]:(r=kv({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),g.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);p(r.shape,i)||(r=cv({inputs:{x:r},backend:n,attrs:{shape:i}}),g.push(r)),null===d?d=r:(d=lv({inputs:{a:r,b:d},backend:n}),g.push(d))}e<h-1&&(u[e]>=0&&(d=xv({inputs:{x:d},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),g.push(d)),f--)}for(const e of g)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},b$={kernelName:"Elu",backendName:"webgl",kernelFunc:nv({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},x$={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Hw("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Gw("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},y$={kernelName:"Equal",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:qk})},k$={kernelName:"Erf",backendName:"webgl",kernelFunc:nv({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'})},w$="return exp(x);",v$=nv({opSnippet:w$,packedOpSnippet:w$,cpuKernelImpl:Kk}),I$={kernelName:"Exp",backendName:"webgl",kernelFunc:v$};function $$(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let u=r;return r<0&&(l(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+r+1),o.splice(u,0,1),cv({inputs:{x:a},backend:s,attrs:{shape:o}})}const N$={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:$$},C$="return exp(x) - 1.0;",S$={kernelName:"Expm1",backendName:"webgl",kernelFunc:nv({opSnippet:C$,packedOpSnippet:C$,cpuKernelImpl:Xk})};class T${constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function E$(e,t,n){const s=n.texData.get(e.dataId),r=d(e.shape),a=e.shape[e.shape.length-1],i=cv({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new T$("real",o,t),u=new T$("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),f=Kw({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const g=cv({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),g}const R$={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return E$(s,!1,n)}};class A${constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function F$(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||T(r),"string"===a){const e=v(a,d(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new A$(s,r);return t.runWebGLProgram(e,[],a,[[r]])}}const D$={kernelName:"Fill",backendName:"webgl",kernelFunc:F$};class _${constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const O$={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new _$(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},M$="return floor(x);",L$={kernelName:"Floor",backendName:"webgl",kernelFunc:nv({opSnippet:M$,packedOpSnippet:M$,cpuKernelImpl:Yk})},z$={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:sv({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class B${constructor(e){this.variableNames=["A"];const t=lk(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class P${constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=lk(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const W$={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==U$&&(U$=document.createElement("canvas").getContext("2d")),U$.canvas.width=l,U$.canvas.height=u,U$.drawImage(r,0,0,l,u),r=U$.canvas);const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=_y.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const p=V().getBool("WEBGL_PACK")?new P$(h):new B$(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let U$;const V$={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=Ts(c),m=ys(r.shape,a.shape,l,h,u,d,!1,g);let b;const x=[];if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(V().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])b=LI({x:r,filter:a,convInfo:m,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===p,l=p?rv(p,!1):null,u=new DI(m,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",We(f,"float32"));c.push(e),x.push(e)}b=n.runWebGLProgram(u,c,"float32")}else b=MI({x:r,filter:a,convInfo:m,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});const y=cv({inputs:{x:b},backend:n,attrs:{shape:m.outShape}});return x.push(b),x.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},G$={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=[];let m=h;null==m&&(m=[1,1]),l(Ss(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);const b=ys(r.shape,a.shape,u,m,c,d,!0),x=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,y=p?rv(p,x):null,k=[r,a],w=null!=i,v=null!=o,I="leakyrelu"===p;if(w&&k.push(i),v&&k.push(o),I){const e=n.makeTensorInfo([],"float32",We(f,"float32"));k.push(e),g.push(e)}let $;$=x?new i$(b,w,y,v,I):new a$(b,w,y,v,I);const N=n.runWebGLProgram($,k,"float32");return g.forEach(e=>n.disposeIntermediateTensorInfo(e)),N}};class H${constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=Mk(t.length),r=Mk(n.length);this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const j$={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=d(s.shape),[l,u,c,h]=Nn(s,r),p=cv({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),f=cv({inputs:{x:s},backend:n,attrs:{shape:[d(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=Jk(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const g=new H$(i,h,[u,c]),m=n.runWebGLProgram(g,[f,p],f.dtype),b=cv({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),b}};class q${constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Mk(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)s.push(2===t?"int(getIndices(resRC.x, resRC.z))":`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function K$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=el(r,a,y(i,r.shape)[0],o),u=d(a.shape),c=[],h=cv({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=cv({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(p);const f=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),s=Zk(t,e,f);return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const g=new q$(h.shape,f),m=n.runWebGLProgram(g,[h,p],h.dtype);c.push(m);const b=cv({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}const X$={kernelName:"GatherV2",backendName:"webgl",kernelFunc:K$},Y$={kernelName:"Greater",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Qk,dtype:"bool"})},J$={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:ew})},Z$={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return E$(s,!0,n)}},Q$={kernelName:"IsFinite",backendName:"webgl",kernelFunc:nv({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},eN={kernelName:"IsInf",backendName:"webgl",kernelFunc:nv({opSnippet:"return float(isinf(x));",dtype:"bool"})},tN={kernelName:"IsNan",backendName:"webgl",kernelFunc:nv({opSnippet:"return float(isnan(x));",dtype:"bool"})},nN={kernelName:"Less",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:tw,dtype:"bool"})},sN={kernelName:"LessEqual",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:nw,dtype:"bool"})},rN={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=sw(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},aN={kernelName:"Log",backendName:"webgl",kernelFunc:nv({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:rw})},iN={kernelName:"Log1p",backendName:"webgl",kernelFunc:nv({opSnippet:"return log(1.0 + x);"})},oN={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},lN={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:nv({opSnippet:"return float(!(x >= 1.0));"})},uN={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:sv({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class cN{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class hN{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const dN={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=V().getBool("WEBGL_PACK_NORMALIZATION")?new hN(r.shape,a,i,o,l):new cN(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class pN{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const fN={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new pN(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function gN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=y(a,r.shape);let u=l;const c=Jr(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let f=r;if(h){if(p){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=Cw(e,r.shape,r.dtype,c,t);f=n.makeTensorInfo(t,r.dtype),n.texData.get(f.dataId).values=s}else f=bv(r,c,n);u=Qr(u.length,o)}Yr("max",u,o);const[g,m]=Kr(f.shape,u);let b,x=g;if(i&&(x=Xr(g,l)),p){const e=n.texData.get(f.dataId),t=aw(e.values,d(m),x,r.dtype);b=n.makeTensorInfo(x,r.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const r=d(t),a=cv({inputs:{x:e},attrs:{shape:[d(e.shape)/r,r]},backend:s}),i=fv(a,e.dtype,"max",s),o=cv({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,m,x,n);return h&&n.disposeIntermediateTensorInfo(f),b}const mN={kernelName:"Max",backendName:"webgl",kernelFunc:gN},bN={kernelName:"Maximum",backendName:"webgl",kernelFunc:sv({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:iw})},xN={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ik(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=s;l(Ss(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const c=bs(r.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return jw({inputs:{x:r},backend:n});const h=new qv(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}},yN={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=xs(r.shape,a,i,[1,1,1],o,u,l),h=new Kv(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class kN{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n          wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${t*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wN{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,s=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${s-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n           wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${s};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${t*n*s-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${s} +\n                  wR * ${s} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const vN={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=xs(i.shape,o,l,[1,1,1],u,c),d=new Kv(h,"max",!0),p=n.runWebGLProgram(d,[i],i.dtype),f=new wN(h),g=n.runWebGLProgram(f,[r,p],i.dtype);return n.disposeIntermediateTensorInfo(p),g}},IN={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;ik([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=bs(o.shape,l,u,1,c,h),p=new qv(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),g=new kN(d),m=n.runWebGLProgram(g,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),m}},$N={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;l(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];l(Ss(a,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=bs(s.shape,r,a,c,i),[d,p]=function(e,t,n,s){let r=new qv(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new qv(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,h,u);return[d,p]}},NN={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=y(a,s.shape);let u=l;const c=Jr(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),f=[];let g=s;if(h){if(p){const e=i.texData.get(g.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=Cw(e,s.shape,s.dtype,c,t);g=i.makeTensorInfo(t,s.dtype),i.texData.get(g.dataId).values=n}else g=bv(s,c,i);f.push(g),u=Qr(u.length,o)}Yr("sum",u,o);const[m,b]=Kr(g.shape,u);let x=m;r&&(x=Xr(m,l));const k=function(e,t,n,s){const r=d(t),a=cv({inputs:{x:e},attrs:{shape:[d(e.shape)/r,r]},backend:s}),i=fv(a,"float32","mean",s),o=cv({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(g,b,x,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return k}},CN={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=y(a,r.shape);let u=l;const c=Jr(u,o);let h=r;null!=c&&(h=kv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Qr(u.length,r.shape.length)),Yr("min",u,o);const[p,f]=Kr(h.shape,u),g=cv({inputs:{x:h},backend:n,attrs:{shape:[-1,d(f)]}}),m=fv(g,g.dtype,"min",n);let b;return b=cv(i?{inputs:{x:m},backend:n,attrs:{shape:Xr(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}},SN={kernelName:"Minimum",backendName:"webgl",kernelFunc:sv({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:ow})};class TN{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=Mk(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class EN{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=Mk(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Ew("rc",s),l=Ew("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const RN={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EN(s.shape,r,a):new TN(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},AN={kernelName:"Mod",backendName:"webgl",kernelFunc:sv({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};class FN{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const DN=sv({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),_N={kernelName:"RealDiv",backendName:"webgl",kernelFunc:DN},ON="return a - b;",MN=sv({opSnippet:ON,packedOpSnippet:ON,supportsComplex:!0,cpuKernelImpl:Iw}),LN={kernelName:"Sub",backendName:"webgl",kernelFunc:MN};function zN(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=y([a],r.shape),o=gN({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Xr(o.shape,i),u=cv({inputs:{x:o},backend:n,attrs:{shape:l}}),c=MN({inputs:{a:r,b:u},backend:n}),h=v$({inputs:{x:c},backend:n}),d=xv({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),p=cv({inputs:{x:d},backend:n,attrs:{shape:l}}),f=DN({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const BN={kernelName:"Softmax",backendName:"webgl",kernelFunc:zN},PN={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:zN({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=new FN(l.shape[0],l.shape[1],a),c=n.runWebGLProgram(u,[l],"int32",[[i]]);return o||n.disposeIntermediateTensorInfo(l),c}},WN="return -x;",UN={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=uw(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new zw(s.shape,WN):new Mw(s.shape,WN),n.runWebGLProgram(r,[s],s.dtype)}},VN=ji,GN={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){Oo("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=VN(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},HN=qi,jN={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){Oo("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=HN(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},qN=Ki,KN={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){Oo("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=i,p=o,f=l,g=u,{selectedIndices:m,selectedScores:b}=qN(c,h,d,p,f,g);return[n.makeTensorInfo([m.length],"int32",new Int32Array(m)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class XN{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const YN={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=d(r.shape),u=new XN(l,a,i,o),c=cv({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=cv({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function JN(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=fI({inputs:{input:s},backend:n}),t=JN({inputs:{x:e},backend:n}),r=TI({inputs:{input:s},backend:n}),a=JN({inputs:{x:r},backend:n}),i=Kw({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return F$({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const ZN={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:JN},QN={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=fI({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=TI({inputs:{input:r},backend:s}),i=JN({inputs:{x:a},backend:s}),o=Kw({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return F$({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},eC={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return $$({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{u(a,e.shape,"All tensors passed to stack must have matching shapes"),l(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],c=AI({inputs:t.map(e=>{const t=$$({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}};class tC{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=Mk(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class nC{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=Mk(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Ew("rc",s),l=Ew("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const sC=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nC(r.shape,a,i):new tC(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype,[[i]])},rC={kernelName:"PadV2",backendName:"webgl",kernelFunc:sC},aC={kernelName:"Pow",backendName:"webgl",kernelFunc:sv({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},iC={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=y(a,r.shape);let c=u;const h=Jr(c,o);let p,f=r;if(null!=h&&(f=kv({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Qr(c.length,o),l.push(f)),Yr("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:r}=hw(f.shape,f.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Kr(f.shape,c),s=d(t),a=cv({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=fv(a,pt(r.dtype),"prod",n);p=cv({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Xr(p.shape,u);p=cv({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},oC=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=dw(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},lC={kernelName:"Range",backendName:"webgl",kernelFunc:oC},uC={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:nv({opSnippet:"return 1.0 / x;"})},cC={kernelName:"Relu",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},hC={kernelName:"Relu6",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class dC{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class pC{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const fC={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=V().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new pC(r.shape,l,u,a,i):new dC(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class gC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const mC={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new gC(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class bC{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class xC{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${s?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const yC={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=V().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new xC(r.shape,l,u,a,i):new bC(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class kC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const wC={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new kC(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class vC{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=Mk(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class IC{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Ew("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Mk(n);function o(n){const s=e.map((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const $C={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=y(a,r.shape);if(0===i)return jw({inputs:{x:r},backend:n});const l=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new IC(r.shape,o):new vC(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class NC{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const CC={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new NC(s.shape,a),[u,c]=Eo(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},SC={kernelName:"Round",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},TC={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:nv({opSnippet:"return inversesqrt(x);",cpuKernelImpl:pw})};class EC{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Mk(r.length),l=Mk(a.length);let u="";1===n?u="i":2===n&&(u="i, j");let c="";1===s?c="i":2===s&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(getIndices(${u}));\n              flattenedIndex += index * ${t>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${c});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const RC={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Sn(0,r,i),d=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const p=cv({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=cv({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),m=new EC(l,o,p.shape.length,f.shape.length,c,d),b=n.runWebGLProgram(m,[f,p,g],f.dtype),x=cv({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class AC{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=Mk(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const FC={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new AC(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],dt(r.dtype,a.dtype))}},DC={kernelName:"Selu",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n"})},_C={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:nv({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"})},OC={kernelName:"Sign",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},MC={kernelName:"Sin",backendName:"webgl",kernelFunc:nv({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},LC={kernelName:"Sinh",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},zC={kernelName:"Softplus",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},BC={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;l(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<r.shape.length;++e)u.push([0,0]);const c=[],h=sC({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),d=Ro(h.shape,a,o,!1),p=Ao(d.length,a.length,!1),f=Fo(h.shape,a,o,!1),g=cv({inputs:{x:h},backend:n,attrs:{shape:d}}),m=kv({inputs:{x:g},backend:n,attrs:{perm:p}}),b=cv({inputs:{x:m},backend:n,attrs:{shape:f}});return c.push(h),c.push(g),c.push(m),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},PC={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,d,p,f,g]=mw(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},WC={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=bw(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},UC={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=xw(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},VC={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=xw(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},GC={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=Sn(0,r,o),d=new EC(u,l,r.shape.length,a.shape.length,c,[h,1],!1),p=n.runWebGLProgram(d,[a,r,i],a.dtype),f=cv({inputs:{x:p},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),f}},HC={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=y(i,r.shape)[0],l=Jo(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(e=>{const t=[...c];t[o]=e;const s=lI({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s})}},jC={kernelName:"Sqrt",backendName:"webgl",kernelFunc:nv({opSnippet:"return sqrt(x);"})},qC={kernelName:"Square",backendName:"webgl",kernelFunc:nv({opSnippet:"return x * x;"})},KC={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:sv({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})},XC={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=new Mw(s.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return n.runWebGLProgram(r,[s],s.dtype)}};class YC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=Mk(n.length),a=Mk(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const JC={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{nonStrided:p,$begin:f,$strides:g,size:m,newShape:b,outShape:x}=Vn(r.shape,a,i,o,l,u,c,h,d),y=cv({inputs:{x:r},backend:n,attrs:{shape:b}});let k;if(p){const e=lI({inputs:{x:y},backend:n,attrs:{begin:f,size:m}});k=cv({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,r.dtype,[]);else if(n.shouldExecuteOnCPU([y])){const e=n.texData.get(y.dataId),t=dn(y.shape,y.dtype,e.values),s=yw(x,t,g,f);k=n.makeTensorInfo(x,y.dtype,s.values)}else{const e=new YC(f,g,x);k=n.runWebGLProgram(e,[y],y.dtype)}const w=cv({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(k),w}},ZC={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,g]=kw(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",g)]}},QC={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=ww(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},eS={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=vw(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},tS={kernelName:"Tan",backendName:"webgl",kernelFunc:nv({opSnippet:"return tan(x);"})},nS={kernelName:"Tanh",backendName:"webgl",kernelFunc:nv({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class sS{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=Mk(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function rS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map(e=>He(e)):e,s=dn(r.shape,r.dtype,t),i=$w(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new sS(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const aS={kernelName:"Tile",backendName:"webgl",kernelFunc:rS};class iS{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class oS{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function lS(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function uS(e){let t=1;for(;t<e;)t*=2;return t}const cS={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=V().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=V().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=Nw(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,F$({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,f=p?n.unpackTensor(r):r,g=d(u)/c,m=cv({inputs:{x:f},attrs:{shape:[g,c]},backend:n});p&&lS(n,f);const b=uS(a),x=uS(c);let y=null;const k=()=>null===y?[m,m]:[m,y],w=(e,t,s)=>{const r=k(),a=new iS(s),i=y;y=n.runWebGLProgram(a,r,"int32",[[c],[null===y?1:0],[Number.NEGATIVE_INFINITY],[e],[t]]),lS(n,i)};for(let e=1;e<b;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[g,x])}for(let e=x;e>b;e/=2){const t=k(),s=new oS([g,e/2]),r=y;y=n.runWebGLProgram(s,t,"int32",[[c],[null===y?1:0],[b]]),lS(n,r);const a=b/2,i=2*a;for(let e=a;e>=1;e/=2)w(i,e,y.shape)}let v=y;y=lI({inputs:{x:y},backend:n,attrs:{begin:0,size:[g,a]}}),lS(n,v);let I=K$({inputs:{x:m,indices:y},backend:n,attrs:{axis:1,batchDims:1}});lS(n,m);const $=u.slice(0,-1);$.push(a),v=y,y=cv({inputs:{x:y},attrs:{shape:$},backend:n}),lS(n,v);const N=I;return I=cv({inputs:{x:I},attrs:{shape:$},backend:n}),lS(n,N),[I,y]}};class hS{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const dS={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=new hS(h,d,i,o,l,[c,f,g,p]);return n.runWebGLProgram(m,[r,a],"float32")}},pS={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ik(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=Sw(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},fS={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[a]=e;const t=lI({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),s=cv({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class gS{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const mS=[dN,fN,Iv,Nv,Cv,Sv,Ev,Fv,Dv,_v,Pv,Wv,Uv,Vv,Hv,Gv,jv,Yv,Xv,Qv,eI,tI,rI,cI,hI,mI,xI,wI,$I,Xw,FI,VI,GI,zI,jI,qI,HI,KI,XI,JI,t$,n$,r$,c$,h$,o$,p$,g$,m$,b$,x$,y$,k$,I$,N$,S$,R$,D$,O$,L$,z$,W$,V$,G$,j$,X$,Y$,J$,qw,Z$,EI,Q$,eN,tN,Zw,nN,sN,rN,iN,aN,oN,lN,uN,mN,yN,xN,vN,IN,$N,bN,NN,CN,SN,RN,AN,PN,uv,UN,GN,jN,KN,pI,YN,QN,eC,rC,aC,tv,iC,lC,gI,_N,uC,hC,cC,hv,fC,mC,yC,wC,$C,CC,SC,TC,RC,FC,DC,_C,OC,MC,LC,uI,BN,zC,BC,PC,WC,UC,VC,GC,HC,jC,qC,KC,XC,JC,ZC,QC,eS,LN,yv,tS,nS,aS,cS,dS,wv,pS,fS,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Jr([u],o);let h=r;null!=c&&(h=kv({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Qr(1,o)[0]);const p=Qo(h.shape,u,i),f=d([h.shape[u]]),g=cv({inputs:{x:h},backend:n,attrs:{shape:[-1,f]}});l.push(g);const m=pt(r.dtype),b=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Zo(o,a),c=new gS({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const d=oC({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=rS({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});return l.push(d),l.push(p),b(h,t,p,r,a)},x=cv({inputs:{x:b(g,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let y=x;if(null!=c){l.push(x);const e=Zr(c);y=kv({inputs:{x:y},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},ZN];for(const e of mS)Q(e);const bS=["worker"],xS={train:async e=>{const{data:t}=e;let n=[];const s=function(e,t,n){if(c(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Ct(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Dt(e,t,s,n)}(t.xData,[t.xData.length,t.model.inputShape[0],t.model.inputShape[1]]),r=In(mi(t.yData,"int32"),t.model.labels.length),{epochs:a,model:i}=function(e,t){const n=new Ed(void 0);return""==t&&(n.add(Of({inputShape:e.inputShape,kernelSize:[4],strides:1,filters:16,activation:"relu"})),n.add(Lf({poolSize:[2]})),n.add(Mf({rate:.1})),n.add(Of({kernelSize:[2],strides:1,filters:16,activation:"relu"})),n.add(Lf({poolSize:[2]})),n.add(Mf({rate:.1})),n.add(Of({kernelSize:[2],strides:1,filters:16,activation:"relu"})),n.add(Mf({rate:.1})),n.add(new Hp(void 0)),n.add(new Gp({units:e.outputShape,activation:"softmax"})),n.compile({loss:"categoricalCrossentropy",optimizer:"adam",metrics:["accuracy"]})),{model:n,epochs:250}}(t.model,t.modelBlockJSON);let o;await i.fit(s,r,{epochs:a,callbacks:{onEpochEnd:yS}}).then(e=>{n=e.history.acc}),await i.save({save:e=>{o=e;const t={modelArtifactsInfo:{dateSaved:new Date,modelTopologyType:"JSON"}};return Promise.resolve(t)}});const l=o.weightData;return o.weightData=null,{modelJSON:JSON.stringify(o),modelWeights:l,trainingInfo:n}},predict:async e=>{const{data:t}=e,n=_t(t.zData),s=JSON.parse(t.model.modelJSON);s.weightData=new Uint32Array(t.model.weights).buffer;const r=await(a={load:()=>Promise.resolve(s)},null==i&&(i={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=Gt.getLoadHandlers(e,t);if(0===n.length)n.push(wn(e,t));else if(n.length>1)throw new bu(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new bu("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=Eh(td(r),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new bu("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=function(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=d(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Ot[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++)u[e]=h[e]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=Vt()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++)u[e]=Math.round(h[e]*n.scale+n.min)}r+=l*o}else if("string"===i){const t=d(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Ot[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=_t(e,o,"float32"),i=_t(s,o,"float32");n[t]=Ft(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=_t(u,o,i))}return n}(e,t),s={},r=[];return t.forEach(e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),Jn(e),Jn(t.map(e=>e.tensor))}return o}(e,0,t)}(a,i));var a,i;const o=await r.predict(n);return{prediction:await o.dataSync()}}};function yS(e,t){self.postMessage({type:"progress",data:t})}self.addEventListener("message",async function(t){const n=t.data,{worker:s}=n,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t.indexOf(n=a[s])>=0||(r[n]=e[n]);return r}(n,bS);if("tf"!==s)return;const a=e({worker:s},r,{data:await async function(e){try{const t=xS[e.type];return await(null==t?void 0:t(e))}catch(e){return void console.error(e)}}(n)});self.postMessage(a)}),console.debug("jacdac tf: worker registered");
//# sourceMappingURL=tf-worker.js.map

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=vendors-src_workers_tf_dist_node_modules_tf-worker_js.render-page.js.map