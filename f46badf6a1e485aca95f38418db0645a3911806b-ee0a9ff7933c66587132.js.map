{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/Add.js","webpack://jacdac-docs/./node_modules/core-js/internals/add-to-unscopables.js","webpack://jacdac-docs/./node_modules/core-js/internals/array-species-create.js","webpack://jacdac-docs/./node_modules/core-js/internals/flatten-into-array.js","webpack://jacdac-docs/./node_modules/core-js/internals/function-bind-context.js","webpack://jacdac-docs/./node_modules/core-js/internals/html.js","webpack://jacdac-docs/./node_modules/core-js/internals/is-array.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-create.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-define-properties.js","webpack://jacdac-docs/./node_modules/core-js/internals/object-keys.js","webpack://jacdac-docs/./node_modules/core-js/internals/to-object.js","webpack://jacdac-docs/./node_modules/core-js/modules/es.array.flat-map.js","webpack://jacdac-docs/./node_modules/core-js/modules/es.array.unscopables.flat-map.js","webpack://jacdac-docs/./jacdac-ts/src/azure-iot/dtdl.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./src/components/hooks/toneContext.ts","webpack://jacdac-docs/./src/components/hooks/useServices.ts","webpack://jacdac-docs/./src/components/ui/PaperBox.tsx","webpack://jacdac-docs/./src/components/vm/fields/fields.ts","webpack://jacdac-docs/./src/components/vm/useToolbox.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts","webpack://jacdac-docs/./src/components/vm/VMBlockEditor.tsx","webpack://jacdac-docs/./src/components/vm/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/azureiothubdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/devicetwindsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/vm/dsl/DslContext.tsx","webpack://jacdac-docs/./src/components/vm/fields/JDomTreeField.tsx","webpack://jacdac-docs/./src/components/vm/fields/KeyboardKeyField.tsx","webpack://jacdac-docs/./src/components/vm/fields/LEDColorField.tsx","webpack://jacdac-docs/./src/components/vm/fields/ReactImageField.tsx","webpack://jacdac-docs/./src/components/vm/fields/LEDMatrixField.tsx","webpack://jacdac-docs/./src/components/vm/fields/NoServiceAlert.tsx","webpack://jacdac-docs/./src/components/vm/fields/NoteField.tsx","webpack://jacdac-docs/./src/components/vm/fields/PointerBoundary.tsx","webpack://jacdac-docs/./src/components/vm/fields/ReactInlineField.tsx","webpack://jacdac-docs/./src/components/vm/fields/SliderField.tsx","webpack://jacdac-docs/./src/components/vm/fields/ServoAngleField.tsx","webpack://jacdac-docs/./src/components/vm/fields/TwinField.tsx","webpack://jacdac-docs/./src/components/vm/fields/WatchValueField.tsx","webpack://jacdac-docs/./src/components/widgets/svg.ts"],"names":["DTDL_REFERENCE_URL","DTDL_NAME","DTDL_CONTEXT","objectSchema","schemas","fields","arraySchema","schema","elementSchema","escapeName","name","trim","replace","test","toLowerCase","slice","escapeDisplayName","DTDLUnits","sort","VMFunctions","id","args","prompt","context","toIdentifier","type","toMemberExpression","root","field","object","property","computed","handlerVisitor","handler","visitITE","visitCommand","commands","forEach","visitBase","base","ite","else","then","compileProgram","prog","newProgram","roles","handlers","map","h","removeIfThenElse","errors","newSequence","labels","labelId","time","end","push","command","callee","arguments","expr","length","assert","pop","cmd","getServiceFromRole","info","role","shortId","find","pair","def","serviceSpecificationFromName","serviceShortId","service","checkProgram","allErrors","goodHandlers","currentId","undefined","errorFun","e","sourceId","message","symbolResolver","SpecSymbolResolver","checker","VMChecker","_","errorCount","c","checkCommand","registers","s","split","fld","register","events","event","VOLUME_GAIN","createToneContext","defaultVolume","console","log","ctx","window","AudioContext","webkitAudioContext","buffer","createBuffer","source","createBufferSource","connect","destination","start","volume","createGain","gain","value","setVolume","v","isNaN","playTone","frequency","duration","tone","createOscillator","stop","currentTime","debug","close","state","warn","useServices","options","useContext","JacdacContext","bus","services","useChange","b","JSON","stringify","PaperBox","props","children","padding","elevation","bgcolor","others","theme","useTheme","spacing","reactFieldShadows","registerFields","registerType","fieldType","key","KEY","Blockly","SHADOW","fieldTypes","KeyboardKeyField","NoteField","LEDMatrixField","ServoAngleField","LEDColorField","TwinField","JDomTreeField","WatchValueField","fieldShadows","highlighted","rendered","addSelect","removeSelect","createBlockTheme","otherColor","palette","main","commandColor","warning","loadBlocks","dsls","shadowBlocks","kind","message0","args0","style","output","min","max","precision","colour","colourOptions","columns","runtimeBlocks","WAIT_BLOCK","check","inputsInline","previousStatement","CODE_STATEMENT_TYPE","nextStatement","tooltip","helpUrl","REPEAT_EVERY_BLOCK","template","dslsBlocks","arrayConcatMany","dsl","createBlocks","blocks","block","jacdacDefinition","init","jsonInit","patchCategoryJSONtoXML","cat","button","contents","unshift","filter","node","exists","Flags","values","blockxml","Object","keys","join","useToolbox","program","liveServices","specification","DslContext","useMemo","commandsCategory","order","interval","logicCategory","A","B","BOOL","variablesCategory","custom","dslsCategories","createCategory","l","r","toolboxConfiguration","newProjectXml","NEW_PROJET_XML","useToolboxButtons","workspace","useEffect","buttons","btn","registerButtonCallback","callbackKey","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","ADD","MULTIPLY","DIVIDE","MINUS","workspaceJSONToVMProgram","variables","BUILTIN_TYPES","EmptyExpression","Error","blockToExpression","ev","blockIn","blockToExpressionInner","inputs","raw","argument","child","op","operator","prefix","left","right","resolveServiceBlockDefinition","d","makeVMBase","processErrors","makeWait","blockToCommand","thenHandler","elseHandler","t","addCommands","exprErrors","ifThenElse","concat","serviceCommand","exprsErrors","a","p","flatMap","nop","top","topEvent","topErrors","definition","dslName","compileToVM","expression","useStyles","makeStyles","createStyles","editor","height","fontFamily","typography","fontWeight","VMBlockEditor","className","onXmlChange","onJSONChange","onVMProgramChange","initialXml","serviceClass","runner","roleManager","workspaceRef","classes","DarkModeContext","darkMode","AppContext","setError","useState","setSource","setProgram","DarkTheme","Theme","gridColor","blocklyRef","useRef","useBlocklyWorkspace","ref","workspaceConfiguration","collapse","disable","comments","css","trashcan","sounds","grid","snap","renderer","oneBasedIndex","move","scrollbars","vertical","horizontal","media","withPrefix","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","pinch","onImportXmlError","xml","current","ws","jacdacServices","WorkspaceServices","useBlocklyPlugins","useBlocklyEvents","isDragging","newSource","domToJSON","error","toMap","getAllBlocks","setWarningText","observer","ResizeObserver","resize","observe","disconnect","clsx","isBooleanField","isStringField","toBlocklyType","isNumericType","enumInfo","srv","enums","ignoredServices","SRV_CONTROL","SRV_LOGGER","SRV_ROLE_MANAGER","SRV_PROTO_TEST","SRV_SETTINGS","SRV_BOOTLOADER","ignoredEvents","SystemEvent","includedRegisters","SystemReg","customMessages","SRV_JOYSTICK","JoystickReg","get","ServicesBlockDomainSpecificLanguage","supportedServices","createServiceColor","sensorColor","success","serviceColor","isSensor","customShadows","SRV_SERVO","identifier","ServoReg","shadow","SRV_BUZZER","BuzzerCmd","lookupCustomShadow","cs","classIdentifier","serviceHelp","fieldsSupported","pkt","every","fieldName","reg","fieldToShadow","unit","defaultValue","typicalMin","absoluteMin","typicalMax","absoluteMax","variableName","humanify","camelName","fieldVariable","variable","variableTypes","defaultType","fieldsToFieldInputs","fieldsToValues","fieldsToMessage","i","isEnabledRegister","customMessage","m","allServices","serviceSpecifications","status","indexOf","resolveService","cls","packets","isRegister","lowLevel","isEvent","kv","isCommand","customBlockDefinitions","SRV_HID_KEYBOARD","SRV_LED","color","speed","SRV_SEVEN_SEGMENT_DISPLAY","digits","SRV_LED_MATRIX","eventBlocks","registerChangeByEventBlocks","some","splitFilter","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimplesGetBlocks","description","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","registerEnumGetBlocks","members","member","registerNumericsGetBlocks","re","f","registerSetBlocks","commandBlocks","_serviceBlocks","_eventFieldBlocks","_runtimeBlocks","CONNECTION_BLOCK","CONNECTED_BLOCK","SET_STATUS_LIGHT_BLOCK","blockServices","usedEvents","Set","eventName","jdBlocks","uniqueMap","toolboxServices","srvid","localeCompare","servicesCategories","serviceBlocks","has","text","commonCategory","toString","servicesDSL","toolsDSL","TWIN_BLOCK","INSPECT_BLOCK","WATCH_BLOCK","AzureIoTHubBlockDomainSpecificLanguage","_blocks","PRIMITIVE_TYPES","azureIoTHubDSL","DEVICE_TWIN_SEND_TELEMETRY","DEVICE_TWIN_DEFINITION_BLOCK","DEVICE_TWIN_PROPERTY_BLOCK","DEVICE_TWIN_PROPERTY_TYPE","DEVICE_TWIN_VALUE_TYPE","deviceTwinContentType","deviceTwinCommonOptionType","deviceTwinPropertyOptionType","deviceTwinStatementType","deviceTwinCommonOptionStatementType","deviceTwinPropertyOptionStatementType","DeviceTwinBlockDomainSpecificLanguage","deviceTwinDSL","mathDSL","extensions","NUM","createContext","displayName","DslProvider","JDomServiceTreeView","lazy","JDomTreeWidget","WorkspaceContext","roleService","flyout","onPointerStopPropagation","stopPropagation","minWidth","cursor","fromJson","renderInlineField","ReactInlineField","EDITABLE","KeyboardKeyInput","getText_","selector","modifiers","renderKeyboardKey","renderField","handleChange","newSelector","newModifiers","ReactField","LEDWidget","LEDColorFieldWidget","ValueContext","onValueChange","width","initCustomView","size_","fieldGroup_","cx","cy","strokeWidth","stroke","updateView","rgbToHtmlColor","circle","view","setAttribute","toShadowDefinition","ReactImageField","setSize","img","imgUri","renderValue","setAttributeNS","getText","alt","LEDMatrixWidget","on","VALUE_CHANGE","rows","leds","columnspadded","ledsBytes","fromHex","cvs","document","createElement","pw","ph","w","getContext","fillStyle","fillRect","x","y","bitindex","byte","bit","dataUri","toDataURL","onChange","newLeds","toHex","Uint8Array","NoServiceAlert","roleServiceShortId","spec","handleStartSimulator","startServiceProviderFromServiceClass","PianoWidget","UNMOUNT","toneContext","handlePlayTone","newFrequency","PointerBoundary","createContainer","display","fo","container","appendChild","resizeObserver","entries","entry","contentRect","forceRerender","ReactDOM","renderBlock","dispose","bindEvents_","getClickTarget_","FieldWithSlider","nv","newValue","Math","round","SliderField","renderWidget","ServoWidget","ServiceFieldWidget","TwinWidget","WatchValueWidget","lookupWatch","setValue","subscribe","VM_WATCH_CHANGE","watchSourceId","valueNumber","step","ceil","abs","log10","roundWithPrecision","background","paper","primary","mkTitle","txt","elt","textContent","title","el","hydrate","k","createElementNS","parent"],"mappings":"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","file":"f46badf6a1e485aca95f38418db0645a3911806b-ee0a9ff7933c66587132.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","var wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar definePropertyModule = require('../internals/object-define-property');\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject -- old IE */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar aFunction = require('../internals/a-function');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flatMap` method\n// https://tc39.es/ecma262/#sec-array.prototype.flatmap\n$({ target: 'Array', proto: true }, {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A;\n    aFunction(callbackfn);\n    A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return A;\n  }\n});\n","// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flatMap');\n","/***\n *  DTDL specification: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md.\n */\nexport const DTDL_REFERENCE_URL =\n    \"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\"\nexport const DTDL_NAME = \"Digital Twins Definition Language\"\nexport const DTDL_CONTEXT = \"dtmi:dtdl:context;2\"\n\n// warps fields into an object\nexport function objectSchema(schemas: DTDLSchema[]): DTDLSchema {\n    return {\n        \"@type\": \"Object\",\n        fields: schemas,\n    }\n}\n\n// wraps a schema into an array\nexport function arraySchema(schema: string | DTDLSchema): DTDLSchema {\n    return {\n        \"@type\": \"Array\",\n        elementSchema: schema,\n    }\n}\n\nexport interface DTDLNode {\n    \"@type\"?: string\n    \"@id\"?: string\n    // 1-64 characters\n    // ^[a-zA-Z](?:[a-zA-Z0-9_]*[a-zA-Z0-9])?$\n    name?: string\n    displayName?: string\n    description?: string\n}\n\nexport interface DTDLSchema extends DTDLNode {\n    fields?: DTDLSchema[]\n    schema?: string | DTDLSchema\n    elementSchema?: string | DTDLSchema\n}\n\nexport interface DTDLContent extends DTDLNode {\n    \"@type\": \"Property\" | \"Command\" | \"Component\" | \"Interface\"\n    unit?: string\n    schema?: string | DTDLSchema\n}\n\nexport interface DTDLInterface extends DTDLContent {\n    contents: DTDLContent[]\n    extends?: string | string[]\n    schemas?: (DTDLSchema | DTDLInterface)[]\n    \"@context\"?: string\n}\n\nexport function escapeName(name: string) {\n    name = name.trim().replace(/[^a-zA-Z0-9_]/g, \"_\")\n    if (!/^[a-zA-Z]/.test(name)) name = \"a\" + name\n    name = name[0].toLowerCase() + name.slice(1)\n    return name.slice(0, 64)\n}\n\nexport function escapeDisplayName(name: string) {\n    return name.slice(0, 64)\n}\n\nexport function DTDLUnits() {\n    return [\n        \"metrePerSecondSquared\",\n        \"centimetrePerSecondSquared\",\n        \"gForce\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"radianPerSecondSquared\",\n        \"radianPerSecond\",\n        \"degreePerSecond\",\n        \"revolutionPerSecond\",\n        \"revolutionPerMinute\",\n        \"squareMetre\",\n        \"squareCentimetre\",\n        \"squareMillimetre\",\n        \"squareKilometre\",\n        \"hectare\",\n        \"squareFoot\",\n        \"squareInch\",\n        \"acre\",\n        \"farad\",\n        \"millifarad\",\n        \"microfarad\",\n        \"nanofarad\",\n        \"picofarad\",\n        \"ampere\",\n        \"microampere\",\n        \"milliampere\",\n        \"bitPerSecond\",\n        \"kibibitPerSecond\",\n        \"mebibitPerSecond\",\n        \"gibibitPerSecond\",\n        \"tebibitPerSecond\",\n        \"exbibitPerSecond\",\n        \"zebibitPerSecond\",\n        \"yobibitPerSecond\",\n        \"bytePerSecond\",\n        \"kibibytePerSecond\",\n        \"mebibytePerSecond\",\n        \"gibibytePerSecond\",\n        \"tebibytePerSecond\",\n        \"exbibytePerSecond\",\n        \"zebibytePerSecond\",\n        \"yobibytePerSecond\",\n        \"bit\",\n        \"kibibit\",\n        \"mebibit\",\n        \"gibibit\",\n        \"tebibit\",\n        \"exbibit\",\n        \"zebibit\",\n        \"yobibit\",\n        \"byte\",\n        \"kibibyte\",\n        \"mebibyte\",\n        \"gibibyte\",\n        \"tebibyte\",\n        \"exbibyte\",\n        \"zebibyte\",\n        \"yobibyte\",\n        \"kilogramPerCubicMetre\",\n        \"gramPerCubicMetre\",\n        \"metre\",\n        \"centimetre\",\n        \"millimetre\",\n        \"micrometre\",\n        \"nanometre\",\n        \"kilometre\",\n        \"foot\",\n        \"inch\",\n        \"mile\",\n        \"nauticalMile\",\n        \"astronomicalUnit\",\n        \"coulomb\",\n        \"joule\",\n        \"kilojoule\",\n        \"megajoule\",\n        \"gigajoule\",\n        \"electronvolt\",\n        \"megaelectronvolt\",\n        \"kilowattHour\",\n        \"newton\",\n        \"pound\",\n        \"ounce\",\n        \"ton\",\n        \"hertz\",\n        \"kilohertz\",\n        \"megahertz\",\n        \"gigahertz\",\n        \"kilogramPerCubicMetre\",\n        \"gramPerCubicMetre\",\n        \"lux\",\n        \"footcandle\",\n        \"henry\",\n        \"millihenry\",\n        \"microhenry\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"radian\",\n        \"degreeOfArc\",\n        \"minuteOfArc\",\n        \"secondOfArc\",\n        \"turn\",\n        \"metre\",\n        \"centimetre\",\n        \"millimetre\",\n        \"micrometre\",\n        \"nanometre\",\n        \"kilometre\",\n        \"foot\",\n        \"inch\",\n        \"mile\",\n        \"nauticalMile\",\n        \"astronomicalUnit\",\n        \"candelaPerSquareMetre\",\n        \"watt\",\n        \"microwatt\",\n        \"milliwatt\",\n        \"kilowatt\",\n        \"megawatt\",\n        \"gigawatt\",\n        \"horsepower\",\n        \"kilowattHourPerYear\",\n        \"lumen\",\n        \"candela\",\n        \"weber\",\n        \"maxwell\",\n        \"tesla\",\n        \"kilogram\",\n        \"gram\",\n        \"milligram\",\n        \"microgram\",\n        \"tonne\",\n        \"slug\",\n        \"gramPerSecond\",\n        \"kilogramPerSecond\",\n        \"gramPerHour\",\n        \"kilogramPerHour\",\n        \"watt\",\n        \"microwatt\",\n        \"milliwatt\",\n        \"kilowatt\",\n        \"megawatt\",\n        \"gigawatt\",\n        \"horsepower\",\n        \"kilowattHourPerYear\",\n        \"pascal\",\n        \"kilopascal\",\n        \"bar\",\n        \"millibar\",\n        \"millimetresOfMercury\",\n        \"poundPerSquareInch\",\n        \"inchesOfMercury\",\n        \"inchesOfWater\",\n        \"unity percent\",\n        \"ohm\",\n        \"milliohm\",\n        \"kiloohm\",\n        \"megaohm\",\n        \"decibel\",\n        \"bel\",\n        \"kelvin\",\n        \"degreeCelsius\",\n        \"degreeFahrenheit\",\n        \"newton\",\n        \"pound\",\n        \"ounce\",\n        \"ton\",\n        \"second\",\n        \"millisecond\",\n        \"microsecond\",\n        \"nanosecond\",\n        \"minute\",\n        \"hour\",\n        \"day\",\n        \"year\",\n        \"newtonMetre\",\n        \"metrePerSecond\",\n        \"centimetrePerSecond\",\n        \"kilometrePerSecond\",\n        \"metrePerHour\",\n        \"kilometrePerHour\",\n        \"milePerHour\",\n        \"milePerSecond\",\n        \"knot\",\n        \"volt\",\n        \"millivolt\",\n        \"microvolt\",\n        \"kilovolt\",\n        \"megavolt\",\n        \"cubicMetre\",\n        \"cubicCentimetre\",\n        \"litre\",\n        \"millilitre\",\n        \"cubicFoot\",\n        \"cubicInch\",\n        \"fluidOunce\",\n        \"gallon\",\n        \"litrePerSecond\",\n        \"millilitrePerSecond\",\n        \"litrePerHour\",\n        \"millilitrePerHour\",\n    ].sort()\n}\n","export interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n}\n\nexport interface VMRole {\n    role: string\n    serviceShortId: string\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"awaitEvent\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitCondition\"\n    | \"wait\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"halt\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"watch\"\n\nexport const VMFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import { serviceSpecificationFromName } from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions\n} from \"./ir\"\nimport {\n    VMChecker,\n    SpecSymbolResolver,\n} from \"../../jacdac-spec/spectool/jdutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram(prog: VMProgram) {\n    let newProgram: VMProgram = { roles: prog.roles.slice(0), handlers: [] }\n    newProgram.handlers = prog.handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    const shortId = info.roles.find(pair => pair.role === role)\n    if (shortId) {\n        // must succeed\n        const def = serviceSpecificationFromName(shortId.serviceShortId)\n        assert(!!def, `service ${shortId.serviceShortId} not resolved`)\n        return def\n    } else {\n        const service = serviceSpecificationFromName(role)\n        return service\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    let currentId: string = undefined\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: currentId, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","const VOLUME_GAIN = 0.4\n\nexport interface ToneContext {\n    close: () => void\n    playTone: (frequency: number, duration: number) => void\n    setVolume: (vol: number) => void\n}\n\nexport function createToneContext(defaultVolume?: number): ToneContext {\n    try {\n        console.log(`create tone context`)\n        const ctx = new (window.AudioContext ||\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (window as any).webkitAudioContext)()\n\n        // play silence sound within onlick to unlock it\n        const buffer = ctx.createBuffer(1, 1, 22050)\n        const source = ctx.createBufferSource()\n        source.buffer = buffer\n        source.connect(ctx.destination)\n        source.start()\n\n        // output node with volume\n        const volume = ctx.createGain()\n        volume.connect(ctx.destination)\n        volume.gain.value =\n            (defaultVolume !== undefined ? defaultVolume : 0.2) * VOLUME_GAIN\n\n        const setVolume = (v: number) => {\n            if (volume && !isNaN(v)) {\n                volume.gain.value = v * VOLUME_GAIN\n            }\n        }\n\n        const playTone = (frequency: number, duration: number) => {\n            try {\n                const tone = ctx.createOscillator()\n                tone.type = \"sawtooth\"\n                tone.connect(volume)\n                tone.frequency.value = frequency // update frequency\n                tone.start() // start and stop\n                tone.stop(ctx.currentTime + duration / 1000)\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n\n        const close = () => {\n            try {\n                if (ctx.state === \"running\") ctx.close()\n            } catch (e) {\n                console.warn(e)\n            }\n        }\n\n        console.log(`tone context created`)\n\n        return {\n            setVolume,\n            playTone,\n            close,\n        }\n    } catch (e) {\n        return undefined\n    }\n}\n","import { useContext } from \"react\";\nimport { DeviceFilter, ServiceFilter } from \"../../../jacdac-ts/src/jdom/bus\";\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\";\nimport useChange from '../../jacdac/useChange';\n\nexport default function useServices(options?: ServiceFilter & DeviceFilter) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, b => b.services(options), [\n        JSON.stringify(options),\n    ])\n    return services\n}","import { Box, BoxProps, Paper, PaperProps, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport default function PaperBox(props: { padding?: number; elevation?: number; bgcolor?: string } & BoxProps) {\n    const { children, padding, elevation, bgcolor, ...others } = props;\n    const theme = useTheme();\n\n    return <Box {...others} bgcolor={bgcolor} mb={theme.spacing(0.25)}>\n        <Paper square elevation={elevation}>\n            {padding !== 0 && <Box p={theme.spacing(padding || 0.25)}>\n                {children}\n            </Box>}\n            {padding === 0 && children}\n        </Paper>\n    </Box>\n}","import Blockly from \"blockly\"\nimport NoteField from \"./NoteField\"\nimport KeyboardKeyField from \"./KeyboardKeyField\"\nimport LEDMatrixField from \"./LEDMatrixField\"\nimport ServoAngleField from \"./ServoAngleField\"\nimport { BlockDefinition } from \"../toolbox\"\nimport { assert } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport LEDColorField from \"./LEDColorField\"\nimport TwinField from \"./TwinField\"\nimport JDomTreeField from \"./JDomTreeField\"\nimport WatchValueField from \"./WatchValueField\"\n\nlet reactFieldShadows: BlockDefinition[]\nexport function registerFields() {\n    if (reactFieldShadows) return\n\n    reactFieldShadows = []\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const registerType = (fieldType: any) => {\n        const key = fieldType.KEY\n        assert(!!key)\n        try {\n            Blockly.fieldRegistry.unregister(key) // hot reload issues\n        } catch (e) {\n            // ignore hot reload issues\n        }\n        Blockly.fieldRegistry.register(key, fieldType)\n        if (fieldType.SHADOW) reactFieldShadows.push(fieldType.SHADOW)\n    }\n    const fieldTypes = [\n        KeyboardKeyField,\n        NoteField,\n        LEDMatrixField,\n        ServoAngleField,\n        LEDColorField,\n        TwinField,\n        JDomTreeField,\n        WatchValueField,\n    ]\n    fieldTypes.forEach(registerType)\n}\n\nexport function fieldShadows() {\n    registerFields()\n    return reactFieldShadows.slice(0)\n}\n","import Blockly from \"blockly\"\nimport { useContext, useEffect, useMemo } from \"react\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../hooks/useServices\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { Theme, useTheme } from \"@material-ui/core\"\nimport { fieldShadows, registerFields } from \"./fields/fields\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    ColorInputDefnition,\n    InputDefinition,\n    NEW_PROJET_XML,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    REPEAT_EVERY_BLOCK,\n    SeparatorDefinition,\n    ServiceBlockDefinitionFactory,\n    ToolboxConfiguration,\n    ValueInputDefinition,\n    WAIT_BLOCK,\n} from \"./toolbox\"\nimport { WorkspaceJSON } from \"./jsongenerator\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport DslContext from \"./dsl/DslContext\"\nimport BlockDomainSpecificLanguage from \"./dsl/dsl\"\n\n// overrides blockly emboss filter for svg elements\nBlockly.BlockSvg.prototype.setHighlighted = function (highlighted) {\n    if (!this.rendered) {\n        return\n    }\n    if (highlighted) {\n        this.addSelect()\n    } else {\n        this.removeSelect()\n    }\n}\n\ntype CachedBlockDefinitions = {\n    blocks: BlockDefinition[]\n}\n\nfunction createBlockTheme(theme: Theme) {\n    const otherColor = theme.palette.info.main\n    const commandColor = theme.palette.warning.main\n    return {\n        commandColor,\n        otherColor,\n    }\n}\n\nfunction loadBlocks(\n    dsls: BlockDomainSpecificLanguage[],\n    theme: Theme,\n    commandColor: string\n): CachedBlockDefinitions {\n    const shadowBlocks: BlockDefinition[] = [\n        ...fieldShadows(),\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ]\n\n    const runtimeBlocks: BlockDefinition[] = [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour: commandColor,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour: commandColor,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            template: \"every\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ]\n\n    const dslsBlocks = arrayConcatMany(\n        dsls.map(dsl =>\n            dsl?.createBlocks({ theme }).map(b => {\n                b.dsl = dsl.id // ensure DSL is set\n                return b\n            })\n        )\n    )\n\n    const blocks: BlockDefinition[] = [\n        ...runtimeBlocks,\n        ...shadowBlocks,\n        ...dslsBlocks,\n    ]\n\n    console.log(`blocks`, { blocks })\n\n    // register field editors\n    registerFields()\n    // re-register blocks with blocklys\n    blocks.forEach(\n        block =>\n            (Blockly.Blocks[block.type] = <ServiceBlockDefinitionFactory>{\n                jacdacDefinition: block,\n                init: function () {\n                    this.jsonInit(block)\n                },\n            })\n    )\n\n    return {\n        blocks,\n    }\n}\n\nfunction patchCategoryJSONtoXML(cat: CategoryDefinition): CategoryDefinition {\n    if (cat.button) {\n        if (!cat.contents) cat.contents = []\n        cat.contents.unshift(cat.button)\n    }\n    cat.contents\n        ?.filter(node => node.kind === \"block\")\n        .map(node => <BlockReference>node)\n        .filter(block => {\n            const exists = Blockly.Blocks[block.type]\n            if (!exists && Flags.diagnostics)\n                console.warn(\n                    `block type '${block.type}' not found, consider refreshing page...`\n                )\n            return !!block.values && exists\n        }) // avoid broken blocks\n        .forEach(block => {\n            // yup, this suck but we have to go through it\n            block.blockxml = `<block type=\"${block.type}\">${Object.keys(\n                block.values\n            )\n                .map(name => {\n                    const { type } = block.values[name]\n                    return `<value name=\"${name}\"><shadow type=\"${type}\" /></value>`\n                })\n                .join(\"\\n\")}</block>`\n            delete block.type\n        })\n    return cat\n}\n\nexport default function useToolbox(props: {\n    blockServices?: string[]\n    source?: WorkspaceJSON\n    program?: VMProgram\n}): {\n    toolboxConfiguration: ToolboxConfiguration\n    newProjectXml: string\n} {\n    const { source, program } = props\n    const liveServices = useServices({ specification: true })\n\n    const { dsls } = useContext(DslContext)\n    const theme = useTheme()\n    const { commandColor } = createBlockTheme(theme)\n    useMemo(() => loadBlocks(dsls, theme, commandColor), [theme, dsls])\n\n    const commandsCategory: CategoryDefinition = {\n        kind: \"category\",\n        name: \"Commands\",\n        order: 4,\n        colour: commandColor,\n        contents: [\n            <BlockDefinition>{\n                kind: \"block\",\n                type: REPEAT_EVERY_BLOCK,\n                values: {\n                    interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                },\n            },\n            <BlockDefinition>{\n                kind: \"block\",\n                type: WAIT_BLOCK,\n                values: {\n                    time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                },\n            },\n        ].filter(b => !!b),\n    }\n\n    const logicCategory: CategoryDefinition = {\n        kind: \"category\",\n        name: \"Logic\",\n        colour: \"%{BKY_LOGIC_HUE}\",\n        contents: [\n            {\n                kind: \"block\",\n                type: \"dynamic_if\",\n            },\n            {\n                kind: \"block\",\n                type: \"logic_compare\",\n                values: {\n                    A: { kind: \"block\", type: \"math_number\" },\n                    B: { kind: \"block\", type: \"math_number\" },\n                },\n            },\n            {\n                kind: \"block\",\n                type: \"logic_operation\",\n                values: {\n                    A: { kind: \"block\", type: \"logic_boolean\" },\n                    B: { kind: \"block\", type: \"logic_boolean\" },\n                },\n            },\n            {\n                kind: \"block\",\n                type: \"logic_negate\",\n                values: {\n                    BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                },\n            },\n            {\n                kind: \"block\",\n                type: \"logic_boolean\",\n            },\n        ],\n    }\n\n    const variablesCategory: CategoryDefinition = {\n        kind: \"category\",\n        name: \"Variables\",\n        colour: \"%{BKY_VARIABLES_HUE}\",\n        custom: \"VARIABLE\",\n    }\n\n    const dslsCategories = arrayConcatMany(\n        dsls.map(dsl =>\n            dsl?.createCategory({ theme, source, program, liveServices })\n        )\n    )\n        .filter(cat => !!cat)\n        .sort((l, r) => -(l.order - r.order))\n\n    const toolboxConfiguration: ToolboxConfiguration = {\n        kind: \"categoryToolbox\",\n        contents: [\n            commandsCategory,\n            logicCategory,\n            variablesCategory,\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n            ...dslsCategories,\n        ]\n            .filter(cat => !!cat)\n            .map(node =>\n                node.kind === \"category\"\n                    ? patchCategoryJSONtoXML(node as CategoryDefinition)\n                    : node\n            ),\n    }\n\n    return {\n        toolboxConfiguration,\n        newProjectXml: NEW_PROJET_XML,\n    }\n}\n\nexport function useToolboxButtons(\n    workspace: Blockly.WorkspaceSvg,\n    toolboxConfiguration: ToolboxConfiguration\n) {\n    // track workspace changes and update callbacks\n    useEffect(() => {\n        if (!workspace) return\n\n        // collect buttons\n        const buttons: ButtonDefinition[] = toolboxConfiguration?.contents\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(cat => (cat as CategoryDefinition).button)\n            .filter(btn => !!btn)\n        buttons?.forEach(button =>\n            workspace.registerButtonCallback(button.callbackKey, () =>\n                Blockly.Variables.createVariableButtonHandler(\n                    workspace,\n                    null,\n                    button.service.shortId\n                )\n            )\n        )\n    }, [workspace, JSON.stringify(toolboxConfiguration)])\n}\n","import { BlockJSON, WorkspaceJSON } from \"./jsongenerator\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n    VMCommand,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    toMemberExpression,\n    toIdentifier,\n    RoleEvent,\n} from \"../../../jacdac-ts/src/vm/compile\"\n\nimport { assert } from \"../../../jacdac-ts/src/jdom/utils\"\nimport {\n    BUILTIN_TYPES,\n    CommandBlockDefinition,\n    EventFieldDefinition,\n    RegisterBlockDefinition,\n    resolveServiceBlockDefinition,\n    WAIT_BLOCK,\n} from \"./toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage from \"./dsl/dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    console.debug(`compile vm`, { workspace, dsls })\n\n    const roles: VMRole[] = workspace.variables\n        .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n        .map(v => ({ role: v.name, serviceShortId: v.type }))\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            switch (type) {\n                case \"jacdac_math_single\": {\n                    const argument = blockToExpressionInner(ev, inputs[0].child)\n                    const op = inputs[0].fields[\"op\"].value as string\n                    return <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO:?\n                    }\n                }\n                case \"jacdac_math_arithmetic\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                case \"logic_operation\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.LogicalExpression>{\n                        type: \"LogicalExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                case \"logic_negate\": {\n                    const argument = blockToExpressionInner(ev, inputs[0].child)\n                    return <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO:?\n                    }\n                }\n                case \"logic_compare\": {\n                    const left = blockToExpressionInner(ev, inputs[0].child)\n                    const right = blockToExpressionInner(ev, inputs[1].child)\n                    const op = inputs[1].fields[\"op\"].value as string\n                    return <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    }\n                }\n                default: {\n                    const def = resolveServiceBlockDefinition(type)\n                    if (!def) {\n                        console.warn(`unknown block ${type}`, {\n                            type,\n                            ev,\n                            block,\n                            d: Blockly.Blocks[type],\n                        })\n                    } else {\n                        const { template } = def\n                        console.log(\"get\", { type, def, template })\n                        switch (template) {\n                            case \"register_get\": {\n                                const { register } =\n                                    def as RegisterBlockDefinition\n                                const { value: role } = inputs[0].fields[\"role\"]\n                                const field = inputs[0].fields[\"field\"]\n                                return toMemberExpression(\n                                    role as string,\n                                    field\n                                        ? toMemberExpression(\n                                              register.name,\n                                              field.value as string\n                                          )\n                                        : register.name\n                                )\n                            }\n                            case \"event_field\": {\n                                const { event } = def as EventFieldDefinition\n                                if (ev.event !== event.name) {\n                                    errors.push({\n                                        sourceId: block.id,\n                                        message: `Event ${event.name} is not available in this handler.`,\n                                    })\n                                }\n                                const field = inputs[0].fields[\"field\"]\n                                return toMemberExpression(\n                                    ev.role,\n                                    toMemberExpression(\n                                        ev.event,\n                                        field.value as string\n                                    )\n                                )\n                            }\n                            case \"shadow\": {\n                                const field = inputs[0].fields[\"value\"]\n                                const { value } = field\n                                return <jsep.Literal>{\n                                    type: \"Literal\",\n                                    value: value,\n                                    raw: value + \"\",\n                                }\n                            }\n                            default: {\n                                console.warn(\n                                    `unsupported block template ${template} for ${type}`,\n                                    { ev, block }\n                                )\n                                break\n                            }\n                        }\n                        break\n                    }\n                }\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    type CmdWithErrors = {\n        cmd: VMBase\n        errors: VMError[]\n    }\n\n    const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n        return {\n            sourceId: block.id,\n            type: \"cmd\",\n            command,\n        } as VMBase\n    }\n\n    const processErrors = (block: BlockJSON, errors: VMError[]) => {\n        return errors.map((e: VMError) => {\n            return {\n                sourceId: e.sourceId ? e.sourceId : block.id,\n                message: e.message,\n            }\n        })\n    }\n\n    const makeWait = (event: RoleEvent, block: BlockJSON) => {\n        const { inputs } = block\n        {\n            const { expr: time, errors } = blockToExpression(\n                event,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [time],\n                    callee: toIdentifier(\"wait\"),\n                }),\n                errors: processErrors(block, errors),\n            }\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case WAIT_BLOCK:\n                return makeWait(event, block)\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const def = resolveServiceBlockDefinition(type)\n                if (def) {\n                    const { template } = def\n                    switch (template) {\n                        case \"register_set\": {\n                            const { register } = def as RegisterBlockDefinition\n                            const { expr, errors } = blockToExpression(\n                                event,\n                                inputs[0].child\n                            )\n                            const { value: role } = inputs[0].fields.role\n                            return {\n                                cmd: makeVMBase(block, {\n                                    type: \"CallExpression\",\n                                    arguments: [\n                                        toMemberExpression(\n                                            role as string,\n                                            register.name\n                                        ),\n                                        expr,\n                                    ],\n                                    callee: toIdentifier(\"writeRegister\"),\n                                }),\n                                errors: processErrors(block, errors),\n                            }\n                        }\n                        case \"command\": {\n                            const { command: serviceCommand } =\n                                def as CommandBlockDefinition\n                            const { value: role } = inputs[0].fields.role\n                            const exprsErrors = inputs.map(a =>\n                                blockToExpression(event, a.child)\n                            )\n                            return {\n                                cmd: makeVMBase(block, {\n                                    type: \"CallExpression\",\n                                    arguments: exprsErrors.map(p => p.expr),\n                                    callee: toMemberExpression(\n                                        role as string,\n                                        serviceCommand.name\n                                    ),\n                                }),\n                                errors: processErrors(\n                                    block,\n                                    exprsErrors.flatMap(p => p.errors)\n                                ),\n                            }\n                        }\n                        default: {\n                            console.warn(\n                                `unsupported block template ${template} for ${type}`,\n                                { block }\n                            )\n                            return {\n                                cmd: undefined,\n                                errors: [],\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks?.forEach(child => {\n            if (child) {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child)\n                    if (cmd) handler.commands.push(cmd)\n                    errors.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    }\n                }\n            }\n        })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression = undefined\n            let topEvent: RoleEvent = undefined\n            let topErrors: VMError[] = []\n            const definition = resolveServiceBlockDefinition(type)\n            assert(!!definition)\n            const { template, dsl: dslName } = definition\n            const dsl = dslName && dsls?.find(d => d.id === dslName)\n\n            try {\n                if (dsl?.compileToVM) {\n                    const { expression, errors, event } =\n                        dsl?.compileToVM({\n                            block: top,\n                            definition,\n                            blockToExpression,\n                        }) || {}\n                    command = expression as jsep.CallExpression\n                    topErrors = errors\n                    topEvent = event\n                }\n\n                // if dsl didn't compile anything try again\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        case \"every\": {\n                            const { cmd, errors } = makeWait(undefined, top)\n                            command = (cmd as VMCommand).command\n                            topErrors = errors\n                            break\n                        }\n                        default: {\n                            console.warn(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        handlers,\n    }\n}\n","import React, {\n    MutableRefObject,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport { useBlocklyWorkspace } from \"react-blockly\"\nimport { WorkspaceSvg } from \"blockly\"\nimport Theme from \"@blockly/theme-modern\"\nimport DarkTheme from \"@blockly/theme-dark\"\nimport useToolbox, { useToolboxButtons } from \"./useToolbox\"\nimport BlocklyModalDialogs from \"./BlocklyModalDialogs\"\nimport { domToJSON, WorkspaceJSON } from \"./jsongenerator\"\nimport DarkModeContext from \"../ui/DarkModeContext\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport AppContext from \"../AppContext\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport clsx from \"clsx\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport useBlocklyEvents from \"./useBlocklyEvents\"\nimport useBlocklyPlugins from \"./useBlocklyPlugins\"\nimport {\n    BlocklyWorkspaceWithServices,\n    WorkspaceServices,\n} from \"./WorkspaceContext\"\nimport RoleManager from \"../../../jacdac-ts/src/servers/rolemanager\"\nimport { arrayConcatMany, toMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { withPrefix } from \"gatsby\"\nimport DslContext from \"./dsl/DslContext\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        editor: {\n            height: \"calc(100vh - 10rem)\",\n            \"& .blocklyTreeLabel\": {\n                fontFamily: theme.typography.fontFamily,\n            },\n            \"& .blocklyText\": {\n                fontWeight: `normal !important`,\n                fontFamily: `${theme.typography.fontFamily} !important`,\n            },\n        },\n    })\n)\n\nexport default function VMBlockEditor(props: {\n    className?: string\n    initialXml?: string\n    onXmlChange?: (xml: string) => void\n    onJSONChange?: (json: WorkspaceJSON) => void\n    onVMProgramChange?: (program: VMProgram) => void\n    runner?: VMProgramRunner\n    roleManager?: RoleManager\n    serviceClass?: number\n    workspaceRef?: MutableRefObject<WorkspaceSvg>\n}) {\n    const {\n        className,\n        onXmlChange,\n        onJSONChange,\n        onVMProgramChange,\n        initialXml,\n        serviceClass,\n        runner,\n        roleManager,\n        workspaceRef,\n    } = props\n    const { dsls } = useContext(DslContext)\n    const classes = useStyles()\n    const { darkMode } = useContext(DarkModeContext)\n    const { setError } = useContext(AppContext)\n    const [source, setSource] = useState<WorkspaceJSON>()\n    const [program, setProgram] = useState<VMProgram>()\n    const { toolboxConfiguration, newProjectXml } = useToolbox({\n        serviceClass,\n        source,\n        program,\n    })\n    const theme = darkMode === \"dark\" ? DarkTheme : Theme\n    const gridColor = darkMode === \"dark\" ? \"#555\" : \"#ccc\"\n\n    // ReactBlockly\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const blocklyRef = useRef(null)\n    const { workspace, xml } = useBlocklyWorkspace({\n        ref: blocklyRef,\n        toolboxConfiguration,\n        workspaceConfiguration: {\n            collapse: false,\n            disable: false,\n            comments: false,\n            css: true,\n            trashcan: false,\n            sounds: false,\n            grid: {\n                spacing: 25,\n                length: 1,\n                colour: gridColor,\n                snap: true,\n            },\n            renderer: \"zelos\",\n            theme,\n            oneBasedIndex: false,\n            move: {\n                scrollbars: {\n                    vertical: true,\n                    horizontal: true,\n                },\n            },\n            media: withPrefix(\"blockly/media/\"),\n            zoom: {\n                controls: true,\n                wheel: true,\n                startScale: 1.0,\n                maxScale: 3,\n                minScale: 0.1,\n                scaleSpeed: 1.2,\n                pinch: true,\n            },\n        },\n        initialXml: initialXml || newProjectXml,\n        onImportXmlError: () => setError(\"Error loading blocks...\"),\n    }) as { workspace: WorkspaceSvg; xml: string }\n\n    // store ref\n    useEffect(() => {\n        if (workspaceRef) {\n            workspaceRef.current = workspace\n            return () => (workspaceRef.current = undefined)\n        }\n    }, [workspace, workspaceRef])\n\n    // surface state to react\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        if (ws) ws.jacdacServices = new WorkspaceServices()\n    }, [workspace])\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        const services = ws?.jacdacServices\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const ws = workspace as any as BlocklyWorkspaceWithServices\n        const services = ws?.jacdacServices\n        if (services) {\n            services.roleManager = roleManager\n        }\n    }, [workspace, roleManager])\n\n    // plugins\n    useBlocklyPlugins(workspace)\n    useBlocklyEvents(workspace)\n    useToolboxButtons(workspace, toolboxConfiguration)\n\n    // blockly did a change\n    useEffect(() => {\n        if (!workspace || workspace.isDragging()) return\n\n        onXmlChange?.(xml)\n\n        // save json\n        if (onJSONChange || onVMProgramChange) {\n            // emit json\n            const newSource = domToJSON(workspace, dsls)\n            if (JSON.stringify(newSource) !== JSON.stringify(source)) {\n                setSource(newSource)\n                onJSONChange?.(newSource)\n                if (onVMProgramChange) {\n                    try {\n                        const newProgram = workspaceJSONToVMProgram(\n                            newSource,\n                            dsls\n                        )\n                        if (\n                            JSON.stringify(newProgram) !==\n                            JSON.stringify(program)\n                        ) {\n                            setProgram(newProgram)\n                            onVMProgramChange(newProgram)\n                        }\n                    } catch (e) {\n                        console.error(e)\n                        onVMProgramChange(undefined)\n                    }\n                }\n            }\n        }\n    }, [dsls, workspace, xml])\n\n    // apply errors\n    useEffect(() => {\n        if (!workspace) return\n        const allErrors = toMap(\n            arrayConcatMany(\n                program?.handlers.map(h => h.errors?.filter(e => !!e.sourceId))\n            ) || [],\n            e => e.sourceId,\n            e => e.message\n        )\n        workspace\n            .getAllBlocks(false)\n            .forEach(b => b.setWarningText(allErrors[b.id] || null))\n    }, [workspace, program])\n\n    // resize blockly\n    useEffect(() => {\n        const observer = new ResizeObserver(() => workspace?.resize())\n        observer.observe(blocklyRef.current)\n        return () => observer.disconnect()\n    }, [workspace, blocklyRef.current])\n\n    return (\n        <>\n            <div className={clsx(classes.editor, className)} ref={blocklyRef} />\n            <BlocklyModalDialogs />\n        </>\n    )\n}\n","import { Theme } from \"@material-ui/core\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_HID_KEYBOARD,\n    SRV_JOYSTICK,\n    SRV_LED,\n    SRV_LED_MATRIX,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SRV_SETTINGS,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n    SystemEvent,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isCommand,\n    isEvent,\n    isRegister,\n    isSensor,\n    serviceSpecifications,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CONNECTED_BLOCK,\n    CONNECTION_BLOCK,\n    CustomBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveServiceBlockDefinition,\n    SeparatorDefinition,\n    ServiceBlockDefinition,\n    SET_STATUS_LIGHT_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CompileToVMOptions,\n    CompileToVMResult,\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return isBooleanField(field)\n        ? \"Boolean\"\n        : isStringField(field)\n        ? \"String\"\n        : isNumericType(field)\n        ? \"Number\"\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_SETTINGS,\n    SRV_BOOTLOADER,\n]\nconst ignoredEvents = [SystemEvent.StatusCodeChanged]\nconst includedRegisters = [\n    SystemReg.Reading,\n    SystemReg.Value,\n    SystemReg.Intensity,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n    private _serviceBlocks: ServiceBlockDefinition[]\n    private _eventFieldBlocks: EventFieldDefinition[]\n    private _runtimeBlocks: BlockDefinition[]\n\n    private createServiceColor(theme: Theme) {\n        const sensorColor = theme.palette.success.main\n        const otherColor = theme.palette.info.main\n        const serviceColor = (srv: jdspec.ServiceSpec) =>\n            isSensor(srv) ? sensorColor : otherColor\n        return serviceColor\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        const serviceColor = this.createServiceColor(theme)\n        // blocks\n        const customShadows = [\n            {\n                serviceClass: SRV_SERVO,\n                kind: \"rw\",\n                identifier: ServoReg.Angle,\n                field: \"_\",\n                shadow: <BlockDefinition>{\n                    kind: \"block\",\n                    type: ServoAngleField.SHADOW.type,\n                },\n            },\n            {\n                serviceClass: SRV_BUZZER,\n                kind: \"command\",\n                identifier: BuzzerCmd.PlayNote,\n                field: \"frequency\",\n                shadow: <BlockDefinition>{\n                    kind: \"block\",\n                    type: NoteField.SHADOW.type,\n                },\n            },\n        ]\n        const lookupCustomShadow = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) =>\n            customShadows.find(\n                cs =>\n                    cs.serviceClass === service.classIdentifier &&\n                    cs.kind == info.kind &&\n                    cs.identifier === info.identifier &&\n                    cs.field == field.name\n            )?.shadow\n\n        const serviceHelp = (service: jdspec.ServiceSpec) =>\n            withPrefix(`/services/${service.shortId}`)\n        const fieldsSupported = (pkt: jdspec.PacketInfo) =>\n            pkt.fields.every(toBlocklyType)\n        const fieldName = (\n            reg: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) => (field.name === \"_\" ? reg.name : field.name)\n        const fieldToShadow = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ): BlockReference =>\n            lookupCustomShadow(service, info, field) ||\n            (isBooleanField(field)\n                ? { kind: \"block\", type: \"jacdac_on_off\" }\n                : isStringField(field)\n                ? { kind: \"block\", type: \"text\" }\n                : field.unit === \"°\"\n                ? {\n                      kind: \"block\",\n                      type: \"jacdac_angle\",\n                  }\n                : field.unit === \"/\"\n                ? { kind: \"block\", type: \"jacdac_ratio\" }\n                : /^%/.test(field.unit)\n                ? { kind: \"block\", type: \"jacdac_percent\" }\n                : field.type === \"u8\"\n                ? { kind: \"block\", type: \"jacdac_byte\" }\n                : {\n                      kind: \"block\",\n                      type: \"math_number\",\n                      value: field.defaultValue || 0,\n                      min: field.typicalMin || field.absoluteMin,\n                      max: field.typicalMax || field.absoluteMax,\n                  })\n        const variableName = (srv: jdspec.ServiceSpec) =>\n            `${humanify(srv.camelName).toLowerCase()} 1`\n        const fieldVariable = (\n            service: jdspec.ServiceSpec\n        ): VariableInputDefinition => ({\n            type: \"field_variable\",\n            name: \"role\",\n            variable: variableName(service),\n            variableTypes: [service.shortId],\n            defaultType: service.shortId,\n        })\n        const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n            info.fields.map(field => ({\n                type: \"input_value\",\n                name: fieldName(info, field),\n                check: toBlocklyType(field),\n            }))\n        const fieldsToValues = (\n            service: jdspec.ServiceSpec,\n            info: jdspec.PacketInfo\n        ) =>\n            toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n                info.fields,\n                field => fieldName(info, field),\n                field => fieldToShadow(service, info, field)\n            )\n        const fieldsToMessage = (info: jdspec.PacketInfo) =>\n            info.fields\n                .map((field, i) => `${humanify(field.name)} %${2 + i}`)\n                .join(\" \")\n        const isEnabledRegister = (info: jdspec.PacketInfo) =>\n            info.fields.length === 1 &&\n            info.fields[0].type === \"bool\" &&\n            info.name === \"enabled\"\n        const customMessage = (\n            srv: jdspec.ServiceSpec,\n            reg: jdspec.PacketInfo,\n            field: jdspec.PacketMember\n        ) =>\n            customMessages.find(\n                m =>\n                    m.service === srv.classIdentifier &&\n                    m.register === reg.identifier &&\n                    m.field === field.name\n            )\n\n        const allServices = serviceSpecifications()\n        this.supportedServices = allServices\n            .filter(\n                service =>\n                    !/^_/.test(service.shortId) &&\n                    service.status !== \"deprecated\"\n            )\n            .filter(\n                service => ignoredServices.indexOf(service.classIdentifier) < 0\n            )\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n        const registers = arrayConcatMany(\n            this.supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isRegister(pkt) &&\n                            !pkt.lowLevel &&\n                            includedRegisters.indexOf(pkt.identifier) > -1\n                    )\n                    .map(register => ({\n                        service,\n                        register,\n                    }))\n            )\n        )\n        const events = this.supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(\n                    pkt =>\n                        isEvent(pkt) &&\n                        !pkt.lowLevel &&\n                        ignoredEvents.indexOf(pkt.identifier) < 0\n                ),\n            }))\n            .filter(kv => !!kv.events.length)\n        const commands = arrayConcatMany(\n            this.supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        )\n\n        const customBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `send %1 key %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                                shadow: true,\n                            },\n                        },\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `_show_leds`,\n                        message0: `show %1 leds %2`,\n                        args0: [\n                            fieldVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"leds\",\n                            },\n                        ],\n                        colour: serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display LEDs on the LED matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    fieldVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventBlocks = registers\n            .filter(\n                ({ service }) =>\n                    !service.packets.some(\n                        pkt =>\n                            isEvent(pkt) &&\n                            ignoredEvents.indexOf(pkt.identifier) < 0\n                    )\n            )\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${register.name}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n\n        const [registerSimples, registerComposites] = splitFilter(\n            registers,\n            reg => reg.register.fields.length == 1\n        )\n        const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n            registerSimples,\n            ({ register }) => !!toBlocklyType(register.fields[0])\n        )\n        const registerSimplesGetBlocks =\n            registerSimpleTypes.map<RegisterBlockDefinition>(\n                ({ service, register }) => ({\n                    kind: \"block\",\n                    type: `jacdac_get_simple_${service.shortId}_${register.name}`,\n                    message0:\n                        customMessage(service, register, register.fields[0])\n                            ?.get || `%1 ${humanify(register.name)}`,\n                    args0: [fieldVariable(service)],\n                    inputsInline: true,\n                    output: toBlocklyType(register.fields[0]),\n                    colour: serviceColor(service),\n                    tooltip: register.description,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    register,\n                    field: register.fields[0],\n\n                    template: \"register_get\",\n                })\n            )\n        const registerSimpleEnumTypes = registerSimpleOthers\n            .filter(\n                ({ service, register }) =>\n                    !!enumInfo(service, register.fields[0])\n            )\n            .map(({ service, register }) => ({\n                service,\n                register,\n                field: register.fields[0],\n                einfo: enumInfo(service, register.fields[0]),\n            }))\n        const registerCompositeEnumTypes = arrayConcatMany(\n            registerComposites.map(({ service, register }) =>\n                register.fields\n                    .map(field => ({\n                        service,\n                        register,\n                        field,\n                        einfo: enumInfo(service, field),\n                    }))\n                    .filter(({ einfo }) => !!einfo)\n            )\n        )\n        const registerEnumGetBlocks = [\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ].map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${field.name}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    fieldVariable(service),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n\n        const registerNumericsGetBlocks = registerComposites\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    fieldVariable(service),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n\n        const registerSetBlocks = registers\n            .filter(({ register }) => register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n\n        const commandBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [\n                    fieldVariable(service),\n                    ...fieldsToFieldInputs(command),\n                ],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventBlocks,\n            ...registerChangeByEventBlocks,\n            ...registerSimplesGetBlocks,\n            ...registerEnumGetBlocks,\n            ...registerNumericsGetBlocks,\n            ...registerSetBlocks,\n            ...customBlockDefinitions,\n            ...commandBlocks,\n        ]\n\n        // generate accessor blocks for event data with numbers\n        this._eventFieldBlocks = arrayConcatMany(\n            events.map(({ service, events }) =>\n                events\n                    .filter(\n                        event => event.fields.filter(isNumericType).length > 0\n                    )\n                    .map(event => ({ service, event }))\n                    .map(\n                        ({ service, event }) =>\n                            <EventFieldDefinition>{\n                                kind: \"block\",\n                                type: `jacdac_event_field_${service.shortId}_${event.name}`,\n                                message0: `${event.name} %1`,\n                                args0: [\n                                    <InputDefinition>{\n                                        type: \"field_dropdown\",\n                                        name: \"field\",\n                                        options: event.fields.map(field => [\n                                            humanify(field.name),\n                                            field.name,\n                                        ]),\n                                    },\n                                ],\n                                colour: serviceColor(service),\n                                inputsInline: true,\n                                tooltip: `Data fields of the ${event.name} event`,\n                                helpUrl: serviceHelp(service),\n                                service,\n                                event,\n                                output: \"Number\",\n                                template: \"event_field\",\n                            }\n                    )\n            )\n        )\n\n        this._runtimeBlocks = [\n            {\n                kind: \"block\",\n                type: CONNECTION_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"connected\", \"connected\"],\n                            [\"disconnected\", \"disconnected\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"connection\",\n            },\n            {\n                kind: \"block\",\n                type: CONNECTED_BLOCK,\n                message0: \"%1 connected\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"connected\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...this.supportedServices.map(\n                                service => service.shortId\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._runtimeBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const { theme, program, source, liveServices } = options\n        const serviceColor = this.createServiceColor(theme)\n\n        const blockServices =\n            program?.roles.map(r => r.serviceShortId) ||\n            source?.variables.map(v => v.type) ||\n            []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveServiceBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition.template === \"event\")\n                .map(({ block, definition }) => {\n                    const eventName = block.inputs[0].fields[\"event\"]\n                        .value as string\n                    return (definition as EventBlockDefinition).events.find(\n                        ev => ev.name === eventName\n                    )\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(srvid =>\n                              services.find(\n                                  service => service.shortId === srvid\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(srv => srv.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const servicesCategories: CategoryDefinition[] = toolboxServices\n            .map(service => ({\n                service,\n                serviceBlocks: this._serviceBlocks.filter(\n                    block => block.service === service\n                ),\n            }))\n            .map<CategoryDefinition>(({ service, serviceBlocks }) => ({\n                kind: \"category\",\n                name: service.name,\n                colour: serviceColor(service),\n                contents: [\n                    ...serviceBlocks.map<BlockDefinition>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...this._eventFieldBlocks\n                        .filter(\n                            ev =>\n                                ev.service === service &&\n                                usedEvents.has(ev.event)\n                        )\n                        .map<BlockDefinition>(block => ({\n                            kind: \"block\",\n                            type: block.type,\n                            values: block.values,\n                        })),\n                ],\n                button: {\n                    kind: \"button\",\n                    text: `Add ${service.name} role`,\n                    callbackKey: `jacdac_add_role_callback_${service.shortId}`,\n                    service,\n                },\n            }))\n            .filter(cat => !!cat.contents?.length)\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Services\",\n            colour: commandColor,\n            contents: [\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: CONNECTION_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: CONNECTED_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        return [\n            ...servicesCategories,\n            commonCategory,\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n        ]\n    }\n\n    compileToVM(options: CompileToVMOptions): CompileToVMResult {\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return <CompileToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(\n                                role.toString(),\n                                eventName.toString()\n                            ),\n                        ],\n                        callee: toIdentifier(\"awaitEvent\"),\n                    },\n                    event: {\n                        role: role.toString(),\n                        event: eventName.toString(),\n                    },\n                }\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n        }\n\n        return undefined\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockDefinition,\n    InputDefinition,\n    INSPECT_BLOCK,\n    TWIN_BLOCK,\n    VariableInputDefinition,\n    WATCH_BLOCK,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport servicesDSL from \"./servicesdsl\"\n\nconst colour = \"#888\"\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: TWIN_BLOCK,\n            message0: `view %1 %2 %3`,\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"role\",\n                    variable: \"none\",\n                    variableTypes: [\n                        \"client\",\n                        ...servicesDSL.supportedServices.map(\n                            service => service.shortId\n                        ),\n                    ],\n                    defaultType: \"client\",\n                },\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: TwinField.KEY,\n                    name: \"twin\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Twin of the selected service`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: INSPECT_BLOCK,\n            message0: `inspect %1 %2 %3`,\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"role\",\n                    variable: \"none\",\n                    variableTypes: [\n                        \"client\",\n                        ...servicesDSL.supportedServices.map(\n                            service => service.shortId\n                        ),\n                    ],\n                    defaultType: \"client\",\n                },\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: JDomTreeField.KEY,\n                    name: \"twin\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Inspect a service`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: [\"Number\", \"Boolean\", \"String\"],\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: colour,\n            contents: [\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n            }\n        }\n\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import {\n    BlockDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst colour = \"#8a57c2\"\nclass AzureIoTHubBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"azureiothub\"\n    private _blocks: BlockDefinition[]\n    createBlocks() {\n        return (this._blocks = [\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry\",\n                message0: \"on receive cloud-to-device message\",\n                args0: [],\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry_number\",\n                message0: \"received number %1\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                ],\n                output: \"Number\",\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_receive_telemetry_string\",\n                message0: \"received string %1\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                ],\n                output: \"String\",\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_send_telemetry\",\n                message0: \"send device-to-cloud message %1 %2\",\n                args0: [\n                    <DummyInputDefinition>{\n                        type: \"input_dummy\",\n                    },\n                    <StatementInputDefinition>{\n                        type: \"input_statement\",\n                        name: \"fields\",\n                    },\n                ],\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: \"device_twin_send_telemetry_value\",\n                message0: \"with %1 = %2\",\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"name\",\n                        text: \"value\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"value\",\n                        check: PRIMITIVE_TYPES,\n                    },\n                ],\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n        ])\n    }\n    createCategory(): CategoryDefinition[] {\n        return [\n            {\n                kind: \"category\",\n                name: \"Azure IoT Hub\",\n                colour,\n                contents: [\n                    ...this._blocks.map(\n                        ({ type }) =>\n                            <BlockDefinition>{\n                                kind: \"block\",\n                                type,\n                            }\n                    ),\n                ],\n            },\n        ]\n    }\n}\n\nconst azureIoTHubDSL: BlockDomainSpecificLanguage =\n    new AzureIoTHubBlockDomainSpecificLanguage()\n\nexport default azureIoTHubDSL\n","import { DTDLUnits } from \"../../../../jacdac-ts/src/azure-iot/dtdl\"\nimport {\n    BlockDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    OptionsInputDefinition,\n    StatementInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nexport const DEVICE_TWIN_SEND_TELEMETRY = \"device_twin_send_telemetry\"\nexport const DEVICE_TWIN_DEFINITION_BLOCK = \"device_twin_definition\"\nexport const DEVICE_TWIN_PROPERTY_BLOCK = \"device_twin_property\"\n\nexport const DEVICE_TWIN_PROPERTY_TYPE = \"DeviceTwinProperty\"\nexport const DEVICE_TWIN_VALUE_TYPE = \"DeviceTwinValue\"\n\nconst colour = \"#843ed0\"\nconst deviceTwinContentType = \"DeviceTwinContent\"\nconst deviceTwinCommonOptionType = \"DeviceTwinCommonOption\"\nconst deviceTwinPropertyOptionType = \"DeviceTwinPropertyOption\"\nconst deviceTwinStatementType = [deviceTwinContentType]\nconst deviceTwinCommonOptionStatementType = [deviceTwinCommonOptionType]\nconst deviceTwinPropertyOptionStatementType = [\n    deviceTwinPropertyOptionType,\n    ...deviceTwinCommonOptionStatementType,\n]\n\nclass DeviceTwinBlockDomainSpecificLanguage\n    implements BlockDomainSpecificLanguage\n{\n    id = \"devicetwin\"\n    private _blocks: BlockDefinition[]\n    createBlocks() {\n        return (this._blocks = [\n            {\n                kind: \"block\",\n                type: DEVICE_TWIN_DEFINITION_BLOCK,\n                message0: \"device twin\",\n                args0: [],\n                inputsInline: true,\n                nextStatement: deviceTwinStatementType,\n                colour,\n            },\n            {\n                kind: \"block\",\n                type: DEVICE_TWIN_PROPERTY_BLOCK,\n                message0: \"property %1 %2 %3\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"name\",\n                        variable: \"property 1\",\n                        variableTypes: [DEVICE_TWIN_PROPERTY_TYPE],\n                        defaultType: DEVICE_TWIN_PROPERTY_TYPE,\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <StatementInputDefinition>{\n                        type: \"input_statement\",\n                        name: \"options\",\n                        check: deviceTwinPropertyOptionStatementType,\n                    },\n                ],\n                previousStatement: deviceTwinStatementType,\n                nextStatement: deviceTwinStatementType,\n                colour,\n                inputsInline: false,\n            },\n            // options\n            {\n                kind: \"block\",\n                type: \"device_twin_option_property_field\",\n                message0: \"field %1 %2 %3\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"variable\",\n                        variable: \"value 1\",\n                        variableTypes: [DEVICE_TWIN_VALUE_TYPE],\n                        defaultType: DEVICE_TWIN_VALUE_TYPE,\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"unit\",\n                        options: DTDLUnits().map(unit => [unit, unit]),\n                    },\n                    {\n                        type: \"input_value\",\n                        name: \"value\",\n                    },\n                ],\n                previousStatement: deviceTwinCommonOptionStatementType,\n                nextStatement: deviceTwinCommonOptionStatementType,\n                colour,\n                inputsInline: false,\n            },\n            // events\n            {\n                kind: \"block\",\n                type: \"device_twin_property_change\",\n                message0: \"on property %1 change\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"name\",\n                        variable: \"property 1\",\n                        variableTypes: [DEVICE_TWIN_PROPERTY_TYPE],\n                        defaultType: DEVICE_TWIN_PROPERTY_TYPE,\n                    },\n                ],\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour,\n            },\n        ])\n    }\n    createCategory(): CategoryDefinition[] {\n        return [\n            {\n                kind: \"category\",\n                name: \"Device Twin\",\n                colour,\n                contents: [\n                    ...this._blocks.map(\n                        ({ type }) =>\n                            <BlockDefinition>{\n                                kind: \"block\",\n                                type,\n                            }\n                    ),\n                ],\n            },\n        ]\n    }\n}\n\nconst deviceTwinDSL: BlockDomainSpecificLanguage =\n    new DeviceTwinBlockDomainSpecificLanguage()\n\nexport default deviceTwinDSL\n","import {\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst mathDSL: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random_range\",\n            message0: \"random from %1 to %2\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"min\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"max\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            inputsInline: true,\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                { kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_random_range\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n}\n\nexport default mathDSL\n","import React, { createContext, useMemo } from \"react\"\nimport toolsDSL from \"./toolsdsl\"\nimport azureIoTHubDSL from \"./azureiothubdsl\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport deviceTwinDSL from \"./devicetwindsl\"\nimport servicesDSL from \"./servicesdsl\"\nimport mathDSL from \"./mathdsl\"\n\nexport interface DslProps {\n    dsls: BlockDomainSpecificLanguage[]\n}\n\nconst DslContext = createContext<DslProps>({\n    dsls: [],\n})\nDslContext.displayName = \"DSL\"\n\nexport default DslContext\n\n// eslint-disable-next-line react/prop-types\nexport const DslProvider = ({ children }) => {\n    const dsls = useMemo(\n        () => [servicesDSL, azureIoTHubDSL, deviceTwinDSL, toolsDSL, mathDSL],\n        []\n    )\n    return (\n        <DslContext.Provider value={{ dsls }}>{children}</DslContext.Provider>\n    )\n}\n","import React, { lazy, useContext, PointerEvent } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport Suspense from \"../../ui/Suspense\"\nimport NoServiceAlert from \"./NoServiceAlert\"\n\nconst JDomServiceTreeView = lazy(\n    () => import(\"../../tools/JDomServiceTreeView\")\n)\n\nfunction JDomTreeWidget() {\n    const { roleService, flyout } = useContext(WorkspaceContext)\n    const onPointerStopPropagation = (event: PointerEvent<HTMLDivElement>) => {\n        // make sure blockly does not handle drags when interacting with UI\n        event.stopPropagation()\n    }\n\n    if (flyout) return null\n    if (!roleService) return <NoServiceAlert />\n\n    return (\n        <div\n            style={{ minWidth: \"12rem\", cursor: \"inherit\" }}\n            onPointerDown={onPointerStopPropagation}\n            onPointerUp={onPointerStopPropagation}\n            onPointerMove={onPointerStopPropagation}\n        >\n            {roleService && (\n                <Suspense>\n                    <JDomServiceTreeView\n                        service={roleService}\n                        defaultExpanded={[roleService.id]}\n                    />\n                </Suspense>\n            )}\n        </div>\n    )\n}\n\nexport default class JDomTreeField extends ReactInlineField {\n    static KEY = \"jacdac_jdom_service_tree\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new JDomTreeField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    renderInlineField() {\n        return <JDomTreeWidget />\n    }\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { HidKeyboardModifiers } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport ReactField, { ReactFieldJSON } from \"./ReactField\"\nimport Suspense from \"../../ui/Suspense\"\nimport { renderKeyboardKey } from \"../../../../jacdac-ts/src/servers/hidkeyboardserver\"\nconst KeyboardKeyInput = lazy(() => import(\"../../ui/KeyboardKeyInput\"))\n\nexport interface KeyboardFieldValue {\n    selector: number\n    modifiers: HidKeyboardModifiers\n}\n\nexport default class KeyboardKeyField extends ReactField<KeyboardFieldValue> {\n    static KEY = \"jacdac_field_keyboard_key\"\n\n    static fromJson(options: ReactFieldJSON) {\n        return new KeyboardKeyField(options?.value, undefined, options)\n    }\n\n    get defaultValue() {\n        return { selector: 4, modifiers: 0 }\n    }\n\n    getText_() {\n        const { selector, modifiers } = this.value\n        return renderKeyboardKey(selector, modifiers, true)\n    }\n\n    renderField(): ReactNode {\n        const { selector, modifiers } = this.value\n        const handleChange = (\n            newSelector: number,\n            newModifiers: HidKeyboardModifiers\n        ) => {\n            this.value = { selector: newSelector, modifiers: newModifiers }\n        }\n        return (\n            <Suspense>\n                <KeyboardKeyInput\n                    initialSelector={selector}\n                    initialModifiers={modifiers}\n                    onChange={handleChange}\n                />\n            </Suspense>\n        )\n    }\n}\n","import React, { lazy, ReactNode, useContext } from \"react\"\nimport Suspense from \"../../ui/Suspense\"\nimport ReactField, { ReactFieldJSON, toShadowDefinition } from \"./ReactField\"\nimport { rgbToHtmlColor } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport { child } from \"../../widgets/svg\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nconst LEDWidget = lazy(() => import(\"../../widgets/LEDWidget\"))\n\nfunction LEDColorFieldWidget() {\n    const { value, onValueChange } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    return (\n        <Suspense>\n            <LEDWidget\n                ledColor={value}\n                onLedColorChange={onValueChange}\n                ledCount={3}\n                color=\"secondary\"\n            />\n        </Suspense>\n    )\n}\n\nexport default class LEDColorField extends ReactField<number> {\n    static KEY = \"jacdac_field_led_color\"\n    static SHADOW = toShadowDefinition(LEDColorField)\n\n    static fromJson(options: ReactFieldJSON) {\n        return new LEDColorField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options, { width: 28, height: 28 })\n    }\n\n    protected initCustomView() {\n        const { width } = this.size_\n        const r = width >> 1\n        return child(this.fieldGroup_, \"circle\", {\n            r: width >> 1,\n            cx: r,\n            cy: r,\n            strokeWidth: 2,\n            stroke: \"#777\",\n        }) as SVGCircleElement\n    }\n\n    updateView() {\n        const c = rgbToHtmlColor(this.value)\n        const circle = this.view as SVGCircleElement\n        if (c) {\n            circle?.setAttribute(\"fill\", c)\n        }\n    }\n\n    getText_() {\n        return rgbToHtmlColor(this.value)\n    }\n\n    renderField(): ReactNode {\n        return <LEDColorFieldWidget />\n    }\n}\n","import ReactField from \"./ReactField\"\nimport Blockly from \"blockly\"\nimport { child } from \"../../widgets/svg\"\n\nexport default class ReactImageField<T> extends ReactField<T> {\n    constructor(value: string, width = 32, height = 32) {\n        super(value, undefined, undefined, { width, height })\n    }\n\n    setSize(width: number, height: number) {\n        this.size_ = new Blockly.utils.Size(width, height)\n        const img = this.view as SVGImageElement\n        if (img) {\n            img.setAttribute(\"width\", width + \"\")\n            img.setAttribute(\"height\", height + \"\")\n        }\n    }\n\n    protected updateView() {\n        const imgUri = this.renderValue()\n        const img = this.view as SVGImageElement\n        if (imgUri) {\n            img?.setAttributeNS(\n                \"http://www.w3.org/1999/xlink\",\n                \"xlink:href\",\n                imgUri\n            )\n            img?.setAttribute(\"alt\", this.getText())\n        }\n    }\n\n    /**\n     * Renders the value to a data uri string\n     */\n    protected renderValue(): string {\n        return undefined\n    }\n\n    protected initCustomView() {\n        const { width, height } = this.size_\n        return child(this.fieldGroup_, \"image\", {\n            height,\n            width,\n            alt: this.getText(),\n        }) as SVGImageElement\n    }\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { fromHex, toHex } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport Suspense from \"../../ui/Suspense\"\nimport { ReactFieldJSON, VALUE_CHANGE } from \"./ReactField\"\nimport ReactImageField from \"./ReactImageField\"\nconst LEDMatrixWidget = lazy(() => import(\"../../widgets/LEDMatrixWidget\"))\n\nexport interface LEDMatrixFieldValue {\n    // hex data\n    leds: string\n    rows: number\n    columns: number\n}\n\nexport default class LEDMatrixField extends ReactImageField<LEDMatrixFieldValue> {\n    static KEY = \"jacdac_field_led_matrix\"\n\n    constructor(value: string) {\n        super(value)\n\n        this.events.on(VALUE_CHANGE, () => {\n            const { rows, columns } = this.value\n            this.setSize(32, (32 / columns) * rows)    \n        })\n    }\n\n    static fromJson(options: ReactFieldJSON) {\n        return new LEDMatrixField(options?.value)\n    }\n\n    get defaultValue() {\n        return {\n            leds: toHex(new Uint8Array(4)),\n            rows: 5,\n            columns: 5,\n        }\n    }\n\n    getText_() {\n        const { leds, rows, columns } = this.value\n        return `${leds} (${rows}x${columns})`\n    }\n\n    renderValue(): string {\n        const { leds, rows, columns } = this.value\n        // render current state to LEDmatrix field\n        const columnspadded = columns + (8 - (columns % 8))\n        const ledsBytes = fromHex(leds)\n        const cvs = document.createElement(\"canvas\")\n        const b = 3\n        const pw = 8\n        const ph = 8\n        const w = rows * pw + (rows - 1) * b\n        const h = columns * ph + (columns - 1) * b\n        cvs.width = w + 2 * b\n        cvs.height = h + 2 * b\n        const ctx = cvs.getContext(\"2d\")\n        ctx.fillStyle = \"#444\"\n        ctx.fillRect(b, b, w, h)\n        ctx.fillStyle = \"blue\"\n        for (let x = 0; x < columns; ++x) {\n            for (let y = 0; y < rows; ++y) {\n                const bitindex = y * columnspadded + x\n                const byte = ledsBytes[bitindex >> 3]\n                const bit = bitindex % 8\n                const on = 1 === ((byte >> bit) & 1)\n                ctx.fillStyle = on ? \"#ffc400\" : \"#000\"\n                ctx.fillRect(x * (pw + b) + b, y * (ph + b) + b, pw, ph)\n            }\n        }\n        const dataUri = cvs.toDataURL(\"image/png\")\n        return dataUri\n    }\n\n    renderField(): ReactNode {\n        const { leds, rows, columns } = this.value\n        const ledsBytes = fromHex(leds)\n        const onChange = (newLeds: Uint8Array) =>\n            (this.value = {\n                leds: toHex(newLeds),\n                rows,\n                columns,\n            })\n        return (\n            <Suspense>\n                <LEDMatrixWidget\n                    color=\"secondary\"\n                    brightness={1}\n                    leds={ledsBytes}\n                    rows={rows}\n                    columns={columns}\n                    onChange={onChange}\n                />\n            </Suspense>\n        )\n    }\n}\n","import React, { useContext } from \"react\"\nimport { Button } from \"@material-ui/core\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport { startServiceProviderFromServiceClass } from \"../../../../jacdac-ts/src/servers/servers\"\nimport JacdacContext, { JacdacContextProps } from \"../../../jacdac/Context\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport { serviceSpecificationFromName } from \"../../../../jacdac-ts/src/jdom/spec\"\nimport { Alert } from \"@material-ui/lab\"\n\nexport default function NoServiceAlert() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { roleService, roleServiceShortId, flyout } =\n        useContext(WorkspaceContext)\n    const spec = serviceSpecificationFromName(roleServiceShortId)\n    const handleStartSimulator = () =>\n        startServiceProviderFromServiceClass(bus, spec.classIdentifier)\n\n    // nothing to do here\n    if (roleService || flyout) return null\n\n    // unresolved, unknown service\n    if (!roleService && !roleServiceShortId) return null\n\n    // unknown spec\n    if (!spec) return <Alert severity=\"warning\">Unknown service</Alert>\n\n    return (\n        <Button\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AddIcon />}\n            onClick={handleStartSimulator}\n        >\n            start {spec.name}\n        </Button>\n    )\n}\n","import React, { lazy, ReactNode } from \"react\"\nimport { createToneContext, ToneContext } from \"../../hooks/toneContext\"\nimport Suspense from \"../../ui/Suspense\"\nimport ReactField, {\n    ReactFieldJSON,\n    toShadowDefinition,\n    UNMOUNT,\n} from \"./ReactField\"\nconst PianoWidget = lazy(() => import(\"../../widgets/PianoWidget\"))\n\nexport default class NoteField extends ReactField<number> {\n    static KEY = \"jacdac_field_note\"\n    static SHADOW = toShadowDefinition(NoteField)\n    toneContext: ToneContext\n\n    static fromJson(options: ReactFieldJSON) {\n        return new NoteField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options)\n        this.events.on(UNMOUNT, () => {\n            this.toneContext?.close()\n            this.toneContext = undefined\n        })\n    }\n\n    get defaultValue() {\n        return 440\n    }\n\n    getText_() {\n        return (this.value | 0) + \"\"\n    }\n\n    renderField(): ReactNode {\n        const handlePlayTone = async (newFrequency: number) => {\n            this.value = newFrequency\n            if (!this.toneContext) this.toneContext = createToneContext()\n            this.toneContext?.playTone(newFrequency, 400)\n        }\n        return (\n            <Suspense>\n                <PianoWidget playTone={handlePlayTone} />\n            </Suspense>\n        )\n    }\n}\n","import React, { PointerEvent, ReactNode } from \"react\"\n\nexport function PointerBoundary(props: {\n    className?: string\n    children: ReactNode\n}) {\n    const { className, children } = props\n    const onPointerStopPropagation = (event: PointerEvent<HTMLDivElement>) => {\n        // make sure blockly does not handle drags when interacting with UI\n        event.stopPropagation()\n    }\n    return (\n        <div\n            className={className}\n            style={{ cursor: \"inherit\" }}\n            onPointerDown={onPointerStopPropagation}\n            onPointerUp={onPointerStopPropagation}\n            onPointerMove={onPointerStopPropagation}\n        >\n            {children}\n        </div>\n    )\n}\n","import React, { ReactNode } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ReactField from \"./ReactField\"\nimport { child } from \"../../widgets/svg\"\nimport DarkModeProvider from \"../../ui/DarkModeProvider\"\nimport { IdProvider } from \"react-use-id-hook\"\nimport JacdacProvider from \"../../../jacdac/Provider\"\nimport AppTheme from \"../../ui/AppTheme\"\nimport Blockly, { Block } from \"blockly\"\nimport { WorkspaceProvider } from \"../WorkspaceContext\"\n\nexport default class ReactInlineField extends ReactField<unknown> {\n    protected container: HTMLDivElement\n    protected resizeObserver: ResizeObserver\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options?.value, undefined, options, { width: 1, height: 1 })\n    }\n\n    protected createContainer(): HTMLDivElement {\n        const c = document.createElement(\"div\")\n        c.style.display = \"inline-block\"\n        c.style.minWidth = \"14rem\"\n        return c\n    }\n\n    protected initCustomView() {\n        const { width, height } = this.size_\n        const fo = child(this.fieldGroup_, \"foreignObject\", {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        }) as SVGForeignObjectElement\n\n        this.container = this.createContainer()\n        fo.appendChild(this.container)\n\n        this.resizeObserver = new ResizeObserver(\n            (entries: ResizeObserverEntry[]) => {\n                const entry = entries[0]\n                const { contentRect } = entry\n                this.size_.width = contentRect.width\n                this.size_.height = contentRect.height\n                fo.setAttribute(\"width\", this.size_.width + \"\")\n                fo.setAttribute(\"height\", this.size_.height + \"\")\n                this.forceRerender()\n            }\n        )\n        this.resizeObserver.observe(this.container)\n\n        ReactDOM.render(this.renderBlock(), this.container)\n        return fo\n    }\n\n    dispose() {\n        if (this.container) {\n            ReactDOM.unmountComponentAtNode(this.container)\n            this.container = undefined\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect()\n            this.resizeObserver = undefined\n        }\n        super.dispose()\n    }\n\n    renderField(): ReactNode {\n        return <div>not used</div>\n    }\n\n    renderInlineField(): ReactNode {\n        return null\n    }\n\n    renderBlock(): ReactNode {\n        return (\n            <WorkspaceProvider field={this}>\n                <DarkModeProvider fixedDarkMode=\"dark\">\n                    <IdProvider>\n                        <JacdacProvider>\n                            <AppTheme>{this.renderInlineField()}</AppTheme>\n                        </JacdacProvider>\n                    </IdProvider>\n                </DarkModeProvider>\n            </WorkspaceProvider>\n        )\n    }\n\n    getText_() {\n        return \"...\"\n    }\n\n    // don't bind any mouse event\n    bindEvents_() {\n        Blockly.Tooltip.bindMouseEvents(this.getClickTarget_())\n    }\n}\n","import { Grid, Slider } from \"@material-ui/core\"\nimport React, { ReactNode, useContext } from \"react\"\nimport ReactField from \"./ReactField\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nfunction FieldWithSlider(props: { children: ReactNode }) {\n    const { children } = props\n    const { value, onValueChange } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    const handleChange = async (ev: unknown, nv: number | number[]) => {\n        const newValue = nv as number\n        onValueChange(newValue)\n    }\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                {children}\n            </Grid>\n            <Grid item xs={12}>\n                <Slider\n                    color=\"secondary\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={`${Math.round(value)}°`}\n                    min={-90}\n                    max={90}\n                    step={5}\n                    value={value}\n                    onChange={handleChange}\n                    aria-label=\"angle\"\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default class SliderField extends ReactField<number> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(value: string, options?: any) {\n        super(value, undefined, options)\n    }\n\n    get defaultValue() {\n        return 0\n    }\n\n    getText_() {\n        return this.value + \"\"\n    }\n\n    renderField(): ReactNode {\n        return <FieldWithSlider>{this.renderWidget()}</FieldWithSlider>\n    }\n\n    renderWidget(): ReactNode {\n        return null\n    }\n}\n","import React, { lazy, ReactNode, useContext } from \"react\"\nimport SliderField from \"./SliderField\"\nimport Suspense from \"../../ui/Suspense\"\nimport { ReactFieldJSON, toShadowDefinition } from \"./ReactField\"\nimport ValueContext, { ValueContextProps } from \"./ValueContext\"\n\nconst ServoWidget = lazy(() => import(\"../../widgets/ServoWidget\"))\n\nfunction ServiceFieldWidget() {\n    const { value } =\n        useContext<ValueContextProps<number>>(ValueContext)\n    return (\n        <Suspense>\n            <ServoWidget\n                angle={value}\n                offset={0}\n                color=\"secondary\"\n                enabled={true}\n            />\n        </Suspense>\n    )\n}\n\nexport default class ServoAngleField extends SliderField {\n    static KEY = \"jacdac_field_servo_angle\"\n    static SHADOW = toShadowDefinition(ServoAngleField)\n\n    static fromJson(options: ReactFieldJSON) {\n        return new ServoAngleField(options?.value, options)\n    }\n\n    getText_() {\n        return this.value + \"°\"\n    }\n\n    renderWidget(): ReactNode {\n        return <ServiceFieldWidget />\n    }\n}\n","import React, { useContext } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport { Grid } from \"@material-ui/core\"\nimport DashboardServiceWidget from \"../../dashboard/DashboardServiceWidget\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport NoServiceAlert from \"./NoServiceAlert\"\nimport { PointerBoundary } from \"./PointerBoundary\"\n\nfunction TwinWidget() {\n    const { roleService, flyout } = useContext(WorkspaceContext)\n    if (flyout) return null\n    if (!roleService) return <NoServiceAlert />\n\n    return (\n        <Grid\n            container\n            alignItems=\"center\"\n            alignContent=\"center\"\n            justify=\"center\"\n            spacing={1}\n        >\n            <Grid item>\n                <PointerBoundary>\n                    <DashboardServiceWidget\n                        service={roleService}\n                        visible={true}\n                        variant=\"icon\"\n                    />\n                </PointerBoundary>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default class TwinField extends ReactInlineField {\n    static KEY = \"jacdac_field_twin\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new TwinField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    renderInlineField() {\n        return <TwinWidget />\n    }\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { ReactFieldJSON } from \"./ReactField\"\nimport { Box, Grid, Switch, Typography, useTheme } from \"@material-ui/core\"\nimport WorkspaceContext from \"../WorkspaceContext\"\nimport ReactInlineField from \"./ReactInlineField\"\nimport { PointerBoundary } from \"./PointerBoundary\"\nimport { WatchValueType } from \"../../../../jacdac-ts/src/vm/runner\"\nimport { VM_WATCH_CHANGE } from \"../../../../jacdac-ts/src/vm/utils\"\nimport { roundWithPrecision } from \"../../../../jacdac-ts/src/jdom/utils\"\n\nfunction WatchValueWidget() {\n    const { runner, sourceId } = useContext(WorkspaceContext)\n    const theme = useTheme()\n\n    // track changes\n    const [value, setValue] = useState<WatchValueType>(\n        runner?.lookupWatch(sourceId)\n    )\n    useEffect(() => {\n        setValue(undefined)\n        return runner?.subscribe(VM_WATCH_CHANGE, watchSourceId => {\n            if (watchSourceId === sourceId) {\n                const newValue = runner.lookupWatch(sourceId)\n                setValue(newValue)\n            }\n        })\n    }, [runner, sourceId])\n\n    let valueNumber = typeof value === \"number\" ? (value as number) : undefined\n    if (!isNaN(valueNumber)) {\n        const step = Math.ceil(Math.abs(valueNumber)) / 10\n        const precision = step < 1 ? Math.ceil(-Math.log10(step)) : 0\n        valueNumber = roundWithPrecision(valueNumber, precision)\n    }\n\n    return (\n        <Box\n            bgcolor={theme.palette.background.paper}\n            borderRadius={theme.spacing(1)}\n            color={theme.palette.text.primary}\n        >\n            <Grid\n                container\n                alignItems=\"flex-end\"\n                alignContent=\"center\"\n                justify=\"center\"\n                spacing={1}\n            >\n                <Grid item>\n                    <PointerBoundary>\n                        {!isNaN(valueNumber) ? (\n                            <Typography variant=\"body1\">\n                                {valueNumber}\n                            </Typography>\n                        ) : typeof value === \"boolean\" ? (\n                            <Switch value={!!value} />\n                        ) : (\n                            <Typography variant=\"body1\">\n                                {value === undefined ? \"...\" : value + \"\"}\n                            </Typography>\n                        )}\n                    </PointerBoundary>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default class WatchValueField extends ReactInlineField {\n    static KEY = \"jacdac_watch_value\"\n    static EDITABLE = false\n\n    static fromJson(options: ReactFieldJSON) {\n        return new WatchValueField(options)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(options?: any) {\n        super(options)\n    }\n\n    protected createContainer(): HTMLDivElement {\n        const c = document.createElement(\"div\")\n        c.style.display = \"inline-block\"\n        c.style.minWidth = \"4rem\"\n        return c\n    }\n\n    renderInlineField() {\n        return <WatchValueWidget />\n    }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction mkTitle(txt: string): SVGTitleElement {\n    const t = <SVGTitleElement>elt(\"title\")\n    t.textContent = txt\n    return t\n}\nexport function title(el: SVGElement, txt: string): SVGTitleElement {\n    const t = mkTitle(txt)\n    el.appendChild(t)\n    return t\n}\n\nexport function hydrate(el: SVGElement, props: any) {\n    for (const k in props) {\n        if (k == \"title\") {\n            title(el, props[k])\n        } else el.setAttributeNS(null, k, props[k])\n    }\n}\n\nexport function elt(name: string, props?: any): SVGElement {\n    const el = document.createElementNS(\"http://www.w3.org/2000/svg\", name)\n    if (props) hydrate(el, props)\n    return el\n}\n\nexport function child(parent: Element, name: string, props?: any): SVGElement {\n    const el = elt(name, props)\n    parent.appendChild(el)\n    return el\n}\n"],"sourceRoot":""}