{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardAccelerometer.tsx","webpack://jacdac-docs/./src/components/ui/SliderWithLabel.tsx"],"names":["CanvasWidget","lazy","valueDisplay","v","roundWithPrecision","Sliders","props","server","register","forces","useRegisterUnpackedValue","handleChangeX","event","newValue","reading","values","y","n","nz","Math","sqrt","setValues","sendGetAsync","handleChangeY","x","length","min","max","step","marks","value","lerp","v0","v1","t","DashboardAccelerometer","service","visible","useRegister","AccelerometerReg","useServiceServer","color","useWidgetTheme","active","rotator","useCallback","delta","rotation","unpackedValue","undefined","z","roll","atan2","pitch","atan","useStyle","makeStyles","theme","arrow","palette","primary","main","tooltip","backgroundColor","ValueLabelComponent","children","open","classes","SliderWithLabel","label","others","labelId","useId","sliderId"],"mappings":"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","file":"7470-12f8d1fd0fdca11516e1.js","sourcesContent":["import React, { lazy, useCallback } from \"react\"\nimport { AccelerometerReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport { JDRegister } from \"../../../jacdac-ts/src/jdom/register\"\nimport { Grid, Mark, NoSsr } from \"@material-ui/core\"\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { Vector } from \"../widgets/threeutils\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport Suspense from \"../ui/Suspense\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport useRegister from \"../hooks/useRegister\"\n\nconst CanvasWidget = lazy(() => import(\"../widgets/CanvasWidget\"))\n\nconst valueDisplay = (v: number) => roundWithPrecision(v, 1)\nfunction Sliders(props: {\n    server: SensorServer<[number, number, number]>\n    register: JDRegister\n    visible?: boolean\n}) {\n    const { server, register } = props\n    const forces = useRegisterUnpackedValue<[number, number, number]>(\n        register,\n        props\n    )\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeX: any = async (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [, y] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        const nz = -Math.sqrt(1 - (n * n + y * y))\n        server.reading.setValues([n, y, nz])\n        await register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeY: any = async (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        const nz = -Math.sqrt(1 - (x * x + n * n))\n        server.reading.setValues([x, n, nz])\n        await register.sendGetAsync()\n    }\n\n    if (!forces?.length) return <LoadingProgress />\n    const [x, y] = forces\n    const min = -2\n    const max = 2\n    const step = 0.1\n    const marks: Mark[] = [\n        {\n            value: 0,\n        },\n        {\n            value: -1,\n        },\n        {\n            value: 1,\n        },\n    ]\n    return (\n        <>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"X\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"x\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={x}\n                    onChange={handleChangeX}\n                    marks={marks}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"Y\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"y\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={y}\n                    onChange={handleChangeY}\n                    marks={marks}\n                />\n            </Grid>\n        </>\n    )\n}\n\nfunction lerp(v0: number, v1: number, t: number) {\n    return v0 * (1 - t) + v1 * t\n}\n\nexport default function DashboardAccelerometer(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const register = useRegister(service, AccelerometerReg.Forces)\n    useRegisterUnpackedValue<[number, number, number]>(register, props)\n    const server =\n        useServiceServer<SensorServer<[number, number, number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback(\n        (delta: number, rotation: Vector) => {\n            const forces = register.unpackedValue\n            if (!forces) return undefined\n            const [x, y, z] = forces\n            const roll = Math.atan2(-y, z)\n            const pitch = Math.atan(x / (y * y + z * z))\n\n            return {\n                x: lerp(rotation.x, roll, 0.1),\n                y: 0,\n                z: lerp(rotation.z, pitch, 0.1),\n            }\n        },\n        [register]\n    )\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item>\n                <NoSsr>\n                    <Suspense>\n                        <CanvasWidget\n                            showAxes={true}\n                            color={active}\n                            rotator={rotator}\n                        />\n                    </Suspense>\n                </NoSsr>\n            </Grid>\n            {server && (\n                <Sliders\n                    server={server}\n                    register={register}\n                    visible={visible}\n                />\n            )}\n        </Grid>\n    )\n}\n","import {\n    makeStyles,\n    Slider,\n    SliderProps,\n    Theme,\n    Tooltip,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\nimport { useId } from \"react-use-id-hook\"\n\nconst useStyle = makeStyles((theme: Theme) => ({\n    arrow: {\n        color: theme.palette.primary.main,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.primary.main,\n    },\n}))\n\nfunction ValueLabelComponent(props: {\n    children: React.ReactElement\n    open: boolean\n    value: number\n}) {\n    const { children, open, value } = props\n    const classes = useStyle()\n\n    return (\n        <Tooltip\n            classes={classes}\n            open={open}\n            arrow={true}\n            color=\"primary\"\n            enterTouchDelay={0}\n            placement=\"top\"\n            title={value}\n        >\n            {children}\n        </Tooltip>\n    )\n}\n\nexport default function SliderWithLabel(\n    props: {\n        label?: string\n    } & SliderProps\n) {\n    const { label, ...others } = props\n    const labelId = useId()\n    const sliderId = useId()\n\n    return (\n        <>\n            <Typography id={labelId} variant=\"caption\" gutterBottom>\n                {label}\n            </Typography>\n            <Slider\n                id={sliderId}\n                aria-labelledby={labelId}\n                aria-label={label}\n                ValueLabelComponent={ValueLabelComponent}\n                {...others}\n            />\n        </>\n    )\n}\n"],"sourceRoot":""}