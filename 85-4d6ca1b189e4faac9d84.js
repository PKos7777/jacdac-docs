(self["webpackChunkjacdac_docs"] = self["webpackChunkjacdac_docs"] || []).push([[85],{

/***/ 67228:
/***/ (function(module) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 22858:
/***/ (function(module) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 23646:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(67228);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 34575:
/***/ (function(module) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 93913:
/***/ (function(module) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 99809:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ _toArray; }
/* harmony export */ });
/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59968);
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96410);
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82961);
/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(28970);




function _toArray(arr) {
  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(arr) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)();
}

/***/ }),

/***/ 46860:
/***/ (function(module) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 13884:
/***/ (function(module) {

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 80521:
/***/ (function(module) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 98206:
/***/ (function(module) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 63038:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(22858);

var iterableToArrayLimit = __webpack_require__(13884);

var unsupportedIterableToArray = __webpack_require__(60379);

var nonIterableRest = __webpack_require__(80521);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 319:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(23646);

var iterableToArray = __webpack_require__(46860);

var unsupportedIterableToArray = __webpack_require__(60379);

var nonIterableSpread = __webpack_require__(98206);

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 60379:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(67228);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports.default = module.exports, module.exports.__esModule = true;

/***/ }),

/***/ 53746:
/***/ (function(module) {

var clone = function () {
  'use strict';

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;

  try {
    nativeMap = Map;
  } catch (_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function nativeMap() {};
  }

  var nativeSet;

  try {
    nativeSet = Set;
  } catch (_) {
    nativeSet = function nativeSet() {};
  }

  var nativePromise;

  try {
    nativePromise = Promise;
  } catch (_) {
    nativePromise = function nativePromise() {};
  }
  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */


  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    } // maintain two arrays for circular references, where corresponding parents
    // and children have the same index


    var allParents = [];
    var allChildren = [];
    var useBuffer = typeof Buffer != 'undefined';
    if (typeof circular == 'undefined') circular = true;
    if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null) return null;
      if (depth === 0) return parent;
      var child;
      var proto;

      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function (value) {
            resolve(_clone(value, depth - 1));
          }, function (err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }

        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        } else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }

        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function (value, key) {
          var keyChild = _clone(key, depth - 1);

          var valueChild = _clone(value, depth - 1);

          child.set(keyChild, valueChild);
        });
      }

      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function (value) {
          var entryChild = _clone(value, depth - 1);

          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;

        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }

        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);

        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }

          child[symbol] = _clone(parent[symbol], depth - 1);

          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);

        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

          if (descriptor && descriptor.enumerable) {
            continue;
          }

          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }
  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */


  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null) return null;

    var c = function c() {};

    c.prototype = parent;
    return new c();
  }; // private utility functions


  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }

  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }

  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }

  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }

  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }

  clone.__getRegExpFlags = __getRegExpFlags;
  return clone;
}();

if ( true && module.exports) {
  module.exports = clone;
}

/***/ }),

/***/ 2412:
/***/ (function(module) {

"use strict";
 // do not edit .js files directly - edit src/index.jst

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    }

    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  } // true if both NaN, false otherwise


  return a !== a && b !== b;
};

/***/ }),

/***/ 16726:
/***/ (function(module) {

"use strict";


module.exports = function (data, opts) {
  if (!opts) opts = {};
  if (typeof opts === 'function') opts = {
    cmp: opts
  };
  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

  var cmp = opts.cmp && function (f) {
    return function (node) {
      return function (a, b) {
        var aobj = {
          key: a,
          value: node[a]
        };
        var bobj = {
          key: b,
          value: node[b]
        };
        return f(aobj, bobj);
      };
    };
  }(opts.cmp);

  var seen = [];
  return function stringify(node) {
    if (node && node.toJSON && typeof node.toJSON === 'function') {
      node = node.toJSON();
    }

    if (node === undefined) return;
    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
    if (typeof node !== 'object') return JSON.stringify(node);
    var i, out;

    if (Array.isArray(node)) {
      out = '[';

      for (i = 0; i < node.length; i++) {
        if (i) out += ',';
        out += stringify(node[i]) || 'null';
      }

      return out + ']';
    }

    if (node === null) return 'null';

    if (seen.indexOf(node) !== -1) {
      if (cycles) return JSON.stringify('__cycle__');
      throw new TypeError('Converting circular structure to JSON');
    }

    var seenIndex = seen.push(node) - 1;
    var keys = Object.keys(node).sort(cmp && cmp(node));
    out = '';

    for (i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = stringify(node[key]);
      if (!value) continue;
      if (out) out += ',';
      out += JSON.stringify(key) + ':' + value;
    }

    seen.splice(seenIndex, 1);
    return '{' + out + '}';
  }(data);
};

/***/ }),

/***/ 70080:
/***/ (function(module) {

"use strict";
 // Note: This regex matches even invalid JSON strings, but since we’re
// working on the output of `JSON.stringify` we know that only valid strings
// are present (unless the user supplied a weird `options.indent` but in
// that case we don’t care since the output would be invalid anyway).

var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;

module.exports = function stringify(passedObj, options) {
  var indent, maxLength, replacer;
  options = options || {};
  indent = JSON.stringify([1], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);
  maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;
  replacer = options.replacer;
  return function _stringify(obj, currentIndent, reserved) {
    // prettier-ignore
    var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;

    if (obj && typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }

    string = JSON.stringify(obj, replacer);

    if (string === undefined) {
      return string;
    }

    length = maxLength - currentIndent.length - reserved;

    if (string.length <= length) {
      prettified = string.replace(stringOrChar, function (match, stringLiteral) {
        return stringLiteral || match + " ";
      });

      if (prettified.length <= length) {
        return prettified;
      }
    }

    if (replacer != null) {
      obj = JSON.parse(string);
      replacer = undefined;
    }

    if (typeof obj === "object" && obj !== null) {
      nextIndent = currentIndent + indent;
      items = [];
      index = 0;

      if (Array.isArray(obj)) {
        start = "[";
        end = "]";
        length = obj.length;

        for (; index < length; index++) {
          items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || "null");
        }
      } else {
        start = "{";
        end = "}";
        keys = Object.keys(obj);
        length = keys.length;

        for (; index < length; index++) {
          key = keys[index];
          keyPart = JSON.stringify(key) + ": ";
          value = _stringify(obj[key], nextIndent, keyPart.length + (index === length - 1 ? 0 : 1));

          if (value !== undefined) {
            items.push(keyPart + value);
          }
        }
      }

      if (items.length > 0) {
        return [start, indent + items.join(",\n" + nextIndent), end].join("\n" + currentIndent);
      }
    }

    return string;
  }(passedObj, "", 0);
};

/***/ }),

/***/ 37006:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _classCallCheck = __webpack_require__(34575);

var _createClass = __webpack_require__(93913);

var ANY = Symbol('SemVer ANY'); // hoisted class for cyclic dependency

var Comparator = /*#__PURE__*/function () {
  "use strict";

  function Comparator(comp, options) {
    _classCallCheck(this, Comparator);

    options = parseOptions(options);

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }

    debug('comparator', comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);

    if (this.semver === ANY) {
      this.value = '';
    } else {
      this.value = this.operator + this.semver.version;
    }

    debug('comp', this);
  }

  _createClass(Comparator, [{
    key: "parse",
    value: function parse(comp) {
      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var m = comp.match(r);

      if (!m) {
        throw new TypeError("Invalid comparator: ".concat(comp));
      }

      this.operator = m[1] !== undefined ? m[1] : '';

      if (this.operator === '=') {
        this.operator = '';
      } // if it literally is just '>' or '' then allow anything.


      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.value;
    }
  }, {
    key: "test",
    value: function test(version) {
      debug('Comparator.test', version, this.options.loose);

      if (this.semver === ANY || version === ANY) {
        return true;
      }

      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }

      return cmp(version, this.operator, this.semver, this.options);
    }
  }, {
    key: "intersects",
    value: function intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required');
      }

      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (this.operator === '') {
        if (this.value === '') {
          return true;
        }

        return new Range(comp.value, options).test(this.value);
      } else if (comp.operator === '') {
        if (comp.value === '') {
          return true;
        }

        return new Range(this.value, options).test(comp.semver);
      }

      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  }], [{
    key: "ANY",
    get: function get() {
      return ANY;
    }
  }]);

  return Comparator;
}();

module.exports = Comparator;

var parseOptions = __webpack_require__(96861);

var _require = __webpack_require__(53641),
    re = _require.re,
    t = _require.t;

var cmp = __webpack_require__(20548);

var debug = __webpack_require__(63251);

var SemVer = __webpack_require__(22748);

var Range = __webpack_require__(40839);

/***/ }),

/***/ 40839:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _toConsumableArray = __webpack_require__(319);

var _classCallCheck = __webpack_require__(34575);

var _createClass = __webpack_require__(93913);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// hoisted class for cyclic dependency
var Range = /*#__PURE__*/function () {
  "use strict";

  function Range(range, options) {
    var _this = this;

    _classCallCheck(this, Range);

    options = parseOptions(options);

    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value;
      this.set = [[range]];
      this.format();
      return this;
    }

    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/) // map the range to a 2d array of comparators
    .map(function (range) {
      return _this.parseRange(range.trim());
    }) // throw out any comparator lists that are empty
    // this generally means that it was not a valid range, which is allowed
    // in loose mode, but will still throw if the WHOLE range is invalid.
    .filter(function (c) {
      return c.length;
    });

    if (!this.set.length) {
      throw new TypeError("Invalid SemVer Range: ".concat(range));
    } // if we have any that are not the null set, throw out null sets.


    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      var first = this.set[0];
      this.set = this.set.filter(function (c) {
        return !isNullSet(c[0]);
      });
      if (this.set.length === 0) this.set = [first];else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        var _iterator = _createForOfIteratorHelper(this.set),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var c = _step.value;

            if (c.length === 1 && isAny(c[0])) {
              this.set = [c];
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }

    this.format();
  }

  _createClass(Range, [{
    key: "format",
    value: function format() {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim();
      }).join('||').trim();
      return this.range;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.range;
    }
  }, {
    key: "parseRange",
    value: function parseRange(range) {
      var _this2 = this;

      range = range.trim(); // memoize range parsing for performance.
      // this is a very hot path, and fully deterministic.

      var memoOpts = Object.keys(this.options).join(',');
      var memoKey = "parseRange:".concat(memoOpts, ":").concat(range);
      var cached = cache.get(memoKey);
      if (cached) return cached;
      var loose = this.options.loose; // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

      range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

      range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces

      range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var rangeList = range.split(' ').map(function (comp) {
        return parseComparator(comp, _this2.options);
      }).join(' ').split(/\s+/) // >=0.0.0 is equivalent to *
      .map(function (comp) {
        return replaceGTE0(comp, _this2.options);
      }) // in loose mode, throw out any that are not valid comparators
      .filter(this.options.loose ? function (comp) {
        return !!comp.match(compRe);
      } : function () {
        return true;
      }).map(function (comp) {
        return new Comparator(comp, _this2.options);
      }); // if any comparators are the null set, then replace with JUST null set
      // if more than one comparator, remove any * comparators
      // also, don't include the same comparator more than once

      var l = rangeList.length;
      var rangeMap = new Map();

      var _iterator2 = _createForOfIteratorHelper(rangeList),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var comp = _step2.value;
          if (isNullSet(comp)) return [comp];
          rangeMap.set(comp.value, comp);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (rangeMap.size > 1 && rangeMap.has('')) rangeMap.delete('');

      var result = _toConsumableArray(rangeMap.values());

      cache.set(memoKey, result);
      return result;
    }
  }, {
    key: "intersects",
    value: function intersects(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required');
      }

      return this.set.some(function (thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    } // if ANY of the sets match ALL of its comparators, then pass

  }, {
    key: "test",
    value: function test(version) {
      if (!version) {
        return false;
      }

      if (typeof version === 'string') {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }

      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }

      return false;
    }
  }]);

  return Range;
}();

module.exports = Range;

var LRU = __webpack_require__(66801);

var cache = new LRU({
  max: 1000
});

var parseOptions = __webpack_require__(96861);

var Comparator = __webpack_require__(37006);

var debug = __webpack_require__(63251);

var SemVer = __webpack_require__(22748);

var _require = __webpack_require__(53641),
    re = _require.re,
    t = _require.t,
    comparatorTrimReplace = _require.comparatorTrimReplace,
    tildeTrimReplace = _require.tildeTrimReplace,
    caretTrimReplace = _require.caretTrimReplace;

var isNullSet = function isNullSet(c) {
  return c.value === '<0.0.0-0';
};

var isAny = function isAny(c) {
  return c.value === '';
}; // take a set of comparators and determine whether there
// exists a version which can satisfy it


var isSatisfiable = function isSatisfiable(comparators, options) {
  var result = true;
  var remainingComparators = comparators.slice();
  var testComparator = remainingComparators.pop();

  while (result && remainingComparators.length) {
    result = remainingComparators.every(function (otherComparator) {
      return testComparator.intersects(otherComparator, options);
    });
    testComparator = remainingComparators.pop();
  }

  return result;
}; // comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.


var parseComparator = function parseComparator(comp, options) {
  debug('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug('caret', comp);
  comp = replaceTildes(comp, options);
  debug('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug('xrange', comp);
  comp = replaceStars(comp, options);
  debug('stars', comp);
  return comp;
};

var isX = function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
}; // ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0


var replaceTildes = function replaceTildes(comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options);
  }).join(' ');
};

var replaceTilde = function replaceTilde(comp, options) {
  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = ">=".concat(M, ".0.0 <").concat(+M + 1, ".0.0-0");
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = ">=".concat(M, ".").concat(m, ".0 <").concat(M, ".").concat(+m + 1, ".0-0");
    } else if (pr) {
      debug('replaceTilde pr', pr);
      ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(M, ".").concat(+m + 1, ".0-0");
    }

    debug('tilde return', ret);
    return ret;
  });
}; // ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0


var replaceCarets = function replaceCarets(comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options);
  }).join(' ');
};

var replaceCaret = function replaceCaret(comp, options) {
  debug('caret', comp, options);
  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
  var z = options.includePrerelease ? '-0' : '';
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M)) {
      ret = '';
    } else if (isX(m)) {
      ret = ">=".concat(M, ".0.0").concat(z, " <").concat(+M + 1, ".0.0-0");
    } else if (isX(p)) {
      if (M === '0') {
        ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
      } else {
        ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(+M + 1, ".0.0-0");
      }
    } else if (pr) {
      debug('replaceCaret pr', pr);

      if (M === '0') {
        if (m === '0') {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
        }
      } else {
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(+M + 1, ".0.0-0");
      }
    } else {
      debug('no pr');

      if (M === '0') {
        if (m === '0') {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
        }
      } else {
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(+M + 1, ".0.0-0");
      }
    }

    debug('caret return', ret);
    return ret;
  });
};

var replaceXRanges = function replaceXRanges(comp, options) {
  debug('replaceXRanges', comp, options);
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options);
  }).join(' ');
};

var replaceXRange = function replaceXRange(comp, options) {
  comp = comp.trim();
  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX) {
      gtlt = '';
    } // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value


    pr = options.includePrerelease ? '-0' : '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0;
      }

      p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>=';

        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';

        if (xm) {
          M = +M + 1;
        } else {
          m = +m + 1;
        }
      }

      if (gtlt === '<') pr = '-0';
      ret = "".concat(gtlt + M, ".").concat(m, ".").concat(p).concat(pr);
    } else if (xm) {
      ret = ">=".concat(M, ".0.0").concat(pr, " <").concat(+M + 1, ".0.0-0");
    } else if (xp) {
      ret = ">=".concat(M, ".").concat(m, ".0").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
    }

    debug('xRange return', ret);
    return ret;
  });
}; // Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.


var replaceStars = function replaceStars(comp, options) {
  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

  return comp.trim().replace(re[t.STAR], '');
};

var replaceGTE0 = function replaceGTE0(comp, options) {
  debug('replaceGTE0', comp, options);
  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');
}; // This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0


var hyphenReplace = function hyphenReplace(incPr) {
  return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = '';
    } else if (isX(fm)) {
      from = ">=".concat(fM, ".0.0").concat(incPr ? '-0' : '');
    } else if (isX(fp)) {
      from = ">=".concat(fM, ".").concat(fm, ".0").concat(incPr ? '-0' : '');
    } else if (fpr) {
      from = ">=".concat(from);
    } else {
      from = ">=".concat(from).concat(incPr ? '-0' : '');
    }

    if (isX(tM)) {
      to = '';
    } else if (isX(tm)) {
      to = "<".concat(+tM + 1, ".0.0-0");
    } else if (isX(tp)) {
      to = "<".concat(tM, ".").concat(+tm + 1, ".0-0");
    } else if (tpr) {
      to = "<=".concat(tM, ".").concat(tm, ".").concat(tp, "-").concat(tpr);
    } else if (incPr) {
      to = "<".concat(tM, ".").concat(tm, ".").concat(+tp + 1, "-0");
    } else {
      to = "<=".concat(to);
    }

    return "".concat(from, " ").concat(to).trim();
  };
};

var testSet = function testSet(set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false;
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (var _i = 0; _i < set.length; _i++) {
      debug(set[_i].semver);

      if (set[_i].semver === Comparator.ANY) {
        continue;
      }

      if (set[_i].semver.prerelease.length > 0) {
        var allowed = set[_i].semver;

        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
          return true;
        }
      }
    } // Version has a -pre, but it's not one of the ones we like.


    return false;
  }

  return true;
};

/***/ }),

/***/ 22748:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _classCallCheck = __webpack_require__(34575);

var _createClass = __webpack_require__(93913);

var debug = __webpack_require__(63251);

var _require = __webpack_require__(17808),
    MAX_LENGTH = _require.MAX_LENGTH,
    MAX_SAFE_INTEGER = _require.MAX_SAFE_INTEGER;

var _require2 = __webpack_require__(53641),
    re = _require2.re,
    t = _require2.t;

var parseOptions = __webpack_require__(96861);

var _require3 = __webpack_require__(77167),
    compareIdentifiers = _require3.compareIdentifiers;

var SemVer = /*#__PURE__*/function () {
  "use strict";

  function SemVer(version, options) {
    _classCallCheck(this, SemVer);

    options = parseOptions(options);

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError("Invalid Version: ".concat(version));
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than ".concat(MAX_LENGTH, " characters"));
    }

    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose; // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.

    this.includePrerelease = !!options.includePrerelease;
    var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

    if (!m) {
      throw new TypeError("Invalid Version: ".concat(version));
    }

    this.raw = version; // these are actually numbers

    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version');
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version');
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version');
    } // numberify any prerelease numeric ids


    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map(function (id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;

          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }

        return id;
      });
    }

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  _createClass(SemVer, [{
    key: "format",
    value: function format() {
      this.version = "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);

      if (this.prerelease.length) {
        this.version += "-".concat(this.prerelease.join('.'));
      }

      return this.version;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.version;
    }
  }, {
    key: "compare",
    value: function compare(other) {
      debug('SemVer.compare', this.version, this.options, other);

      if (!(other instanceof SemVer)) {
        if (typeof other === 'string' && other === this.version) {
          return 0;
        }

        other = new SemVer(other, this.options);
      }

      if (other.version === this.version) {
        return 0;
      }

      return this.compareMain(other) || this.comparePre(other);
    }
  }, {
    key: "compareMain",
    value: function compareMain(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
  }, {
    key: "comparePre",
    value: function comparePre(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      } // NOT having a prerelease is > having one


      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }

      var i = 0;

      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);

        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }
  }, {
    key: "compareBuild",
    value: function compareBuild(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      var i = 0;

      do {
        var a = this.build[i];
        var b = other.build[i];
        debug('prerelease compare', i, a, b);

        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    } // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.

  }, {
    key: "inc",
    value: function inc(release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier);
          break;

        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier);
          break;

        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier);
          this.inc('pre', identifier);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.

        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier);
          }

          this.inc('pre', identifier);
          break;

        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }

          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;

        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }

          this.patch = 0;
          this.prerelease = [];
          break;

        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }

          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.

        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i = this.prerelease.length;

            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }

            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0);
            }
          }

          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }

          break;

        default:
          throw new Error("invalid increment argument: ".concat(release));
      }

      this.format();
      this.raw = this.version;
      return this;
    }
  }]);

  return SemVer;
}();

module.exports = SemVer;

/***/ }),

/***/ 1043:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var parse = __webpack_require__(45661);

var clean = function clean(version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null;
};

module.exports = clean;

/***/ }),

/***/ 20548:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var eq = __webpack_require__(58571);

var neq = __webpack_require__(27070);

var gt = __webpack_require__(46390);

var gte = __webpack_require__(80269);

var lt = __webpack_require__(4686);

var lte = __webpack_require__(461);

var cmp = function cmp(a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      return a === b;

    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      return a !== b;

    case '':
    case '=':
    case '==':
      return eq(a, b, loose);

    case '!=':
      return neq(a, b, loose);

    case '>':
      return gt(a, b, loose);

    case '>=':
      return gte(a, b, loose);

    case '<':
      return lt(a, b, loose);

    case '<=':
      return lte(a, b, loose);

    default:
      throw new TypeError("Invalid operator: ".concat(op));
  }
};

module.exports = cmp;

/***/ }),

/***/ 52208:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var parse = __webpack_require__(45661);

var _require = __webpack_require__(53641),
    re = _require.re,
    t = _require.t;

var coerce = function coerce(version, options) {
  if (version instanceof SemVer) {
    return version;
  }

  if (typeof version === 'number') {
    version = String(version);
  }

  if (typeof version !== 'string') {
    return null;
  }

  options = options || {};
  var match = null;

  if (!options.rtl) {
    match = version.match(re[t.COERCE]);
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    var next;

    while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
      if (!match || next.index + next[0].length !== match.index + match[0].length) {
        match = next;
      }

      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
    } // leave it in a clean state


    re[t.COERCERTL].lastIndex = -1;
  }

  if (match === null) return null;
  return parse("".concat(match[2], ".").concat(match[3] || '0', ".").concat(match[4] || '0'), options);
};

module.exports = coerce;

/***/ }),

/***/ 21656:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var compareBuild = function compareBuild(a, b, loose) {
  var versionA = new SemVer(a, loose);
  var versionB = new SemVer(b, loose);
  return versionA.compare(versionB) || versionA.compareBuild(versionB);
};

module.exports = compareBuild;

/***/ }),

/***/ 34515:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var compareLoose = function compareLoose(a, b) {
  return compare(a, b, true);
};

module.exports = compareLoose;

/***/ }),

/***/ 3757:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var compare = function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
};

module.exports = compare;

/***/ }),

/***/ 44584:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var parse = __webpack_require__(45661);

var eq = __webpack_require__(58571);

var diff = function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    var hasPre = v1.prerelease.length || v2.prerelease.length;
    var prefix = hasPre ? 'pre' : '';
    var defaultResult = hasPre ? 'prerelease' : '';

    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key;
        }
      }
    }

    return defaultResult; // may be undefined
  }
};

module.exports = diff;

/***/ }),

/***/ 58571:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var eq = function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
};

module.exports = eq;

/***/ }),

/***/ 46390:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var gt = function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
};

module.exports = gt;

/***/ }),

/***/ 80269:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var gte = function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
};

module.exports = gte;

/***/ }),

/***/ 99091:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var inc = function inc(version, release, options, identifier) {
  if (typeof options === 'string') {
    identifier = options;
    options = undefined;
  }

  try {
    return new SemVer(version, options).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
};

module.exports = inc;

/***/ }),

/***/ 4686:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var lt = function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
};

module.exports = lt;

/***/ }),

/***/ 461:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var lte = function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
};

module.exports = lte;

/***/ }),

/***/ 38885:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var major = function major(a, loose) {
  return new SemVer(a, loose).major;
};

module.exports = major;

/***/ }),

/***/ 62367:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var minor = function minor(a, loose) {
  return new SemVer(a, loose).minor;
};

module.exports = minor;

/***/ }),

/***/ 27070:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var neq = function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
};

module.exports = neq;

/***/ }),

/***/ 45661:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _require = __webpack_require__(17808),
    MAX_LENGTH = _require.MAX_LENGTH;

var _require2 = __webpack_require__(53641),
    re = _require2.re,
    t = _require2.t;

var SemVer = __webpack_require__(22748);

var parseOptions = __webpack_require__(96861);

var parse = function parse(version, options) {
  options = parseOptions(options);

  if (version instanceof SemVer) {
    return version;
  }

  if (typeof version !== 'string') {
    return null;
  }

  if (version.length > MAX_LENGTH) {
    return null;
  }

  var r = options.loose ? re[t.LOOSE] : re[t.FULL];

  if (!r.test(version)) {
    return null;
  }

  try {
    return new SemVer(version, options);
  } catch (er) {
    return null;
  }
};

module.exports = parse;

/***/ }),

/***/ 68493:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var patch = function patch(a, loose) {
  return new SemVer(a, loose).patch;
};

module.exports = patch;

/***/ }),

/***/ 78081:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var parse = __webpack_require__(45661);

var prerelease = function prerelease(version, options) {
  var parsed = parse(version, options);
  return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};

module.exports = prerelease;

/***/ }),

/***/ 23583:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compare = __webpack_require__(3757);

var rcompare = function rcompare(a, b, loose) {
  return compare(b, a, loose);
};

module.exports = rcompare;

/***/ }),

/***/ 73009:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compareBuild = __webpack_require__(21656);

var rsort = function rsort(list, loose) {
  return list.sort(function (a, b) {
    return compareBuild(b, a, loose);
  });
};

module.exports = rsort;

/***/ }),

/***/ 80911:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Range = __webpack_require__(40839);

var satisfies = function satisfies(version, range, options) {
  try {
    range = new Range(range, options);
  } catch (er) {
    return false;
  }

  return range.test(version);
};

module.exports = satisfies;

/***/ }),

/***/ 95239:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var compareBuild = __webpack_require__(21656);

var sort = function sort(list, loose) {
  return list.sort(function (a, b) {
    return compareBuild(a, b, loose);
  });
};

module.exports = sort;

/***/ }),

/***/ 8495:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var parse = __webpack_require__(45661);

var valid = function valid(version, options) {
  var v = parse(version, options);
  return v ? v.version : null;
};

module.exports = valid;

/***/ }),

/***/ 16023:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// just pre-load all the stuff that index.js lazily exports
var internalRe = __webpack_require__(53641);

module.exports = {
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: __webpack_require__(17808).SEMVER_SPEC_VERSION,
  SemVer: __webpack_require__(22748),
  compareIdentifiers: __webpack_require__(77167).compareIdentifiers,
  rcompareIdentifiers: __webpack_require__(77167).rcompareIdentifiers,
  parse: __webpack_require__(45661),
  valid: __webpack_require__(8495),
  clean: __webpack_require__(1043),
  inc: __webpack_require__(99091),
  diff: __webpack_require__(44584),
  major: __webpack_require__(38885),
  minor: __webpack_require__(62367),
  patch: __webpack_require__(68493),
  prerelease: __webpack_require__(78081),
  compare: __webpack_require__(3757),
  rcompare: __webpack_require__(23583),
  compareLoose: __webpack_require__(34515),
  compareBuild: __webpack_require__(21656),
  sort: __webpack_require__(95239),
  rsort: __webpack_require__(73009),
  gt: __webpack_require__(46390),
  lt: __webpack_require__(4686),
  eq: __webpack_require__(58571),
  neq: __webpack_require__(27070),
  gte: __webpack_require__(80269),
  lte: __webpack_require__(461),
  cmp: __webpack_require__(20548),
  coerce: __webpack_require__(52208),
  Comparator: __webpack_require__(37006),
  Range: __webpack_require__(40839),
  satisfies: __webpack_require__(80911),
  toComparators: __webpack_require__(6231),
  maxSatisfying: __webpack_require__(43848),
  minSatisfying: __webpack_require__(44027),
  minVersion: __webpack_require__(362),
  validRange: __webpack_require__(80508),
  outside: __webpack_require__(41665),
  gtr: __webpack_require__(71362),
  ltr: __webpack_require__(21252),
  intersects: __webpack_require__(24617),
  simplifyRange: __webpack_require__(40379),
  subset: __webpack_require__(62815)
};

/***/ }),

/***/ 17808:
/***/ (function(module) {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
var SEMVER_SPEC_VERSION = '2.0.0';
var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */
9007199254740991; // Max safe segment length for coercion.

var MAX_SAFE_COMPONENT_LENGTH = 16;
module.exports = {
  SEMVER_SPEC_VERSION: SEMVER_SPEC_VERSION,
  MAX_LENGTH: MAX_LENGTH,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
  MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH
};

/***/ }),

/***/ 63251:
/***/ (function(module) {

var debug = typeof process === 'object' && ({}) && ({}).NODE_DEBUG && /\bsemver\b/i.test(({}).NODE_DEBUG) ? function () {
  var _console;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (_console = console).error.apply(_console, ['SEMVER'].concat(args));
} : function () {};
module.exports = debug;

/***/ }),

/***/ 77167:
/***/ (function(module) {

var numeric = /^[0-9]+$/;

var compareIdentifiers = function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};

var rcompareIdentifiers = function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
};

module.exports = {
  compareIdentifiers: compareIdentifiers,
  rcompareIdentifiers: rcompareIdentifiers
};

/***/ }),

/***/ 96861:
/***/ (function(module) {

// parse out just the options we care about so we always get a consistent
// obj with keys in a consistent order.
var opts = ['includePrerelease', 'loose', 'rtl'];

var parseOptions = function parseOptions(options) {
  return !options ? {} : typeof options !== 'object' ? {
    loose: true
  } : opts.filter(function (k) {
    return options[k];
  }).reduce(function (options, k) {
    options[k] = true;
    return options;
  }, {});
};

module.exports = parseOptions;

/***/ }),

/***/ 53641:
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(17808),
    MAX_SAFE_COMPONENT_LENGTH = _require.MAX_SAFE_COMPONENT_LENGTH;

var debug = __webpack_require__(63251);

exports = module.exports = {}; // The actual regexps go on exports.re

var re = exports.re = [];
var src = exports.src = [];
var t = exports.t = {};
var R = 0;

var createToken = function createToken(name, value, isGlobal) {
  var index = R++;
  debug(index, value);
  t[name] = index;
  src[index] = value;
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
}; // The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.


createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+'); // ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*'); // ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")"));
createToken('MAINVERSIONLOOSE', "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")")); // ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', "(?:".concat(src[t.NUMERICIDENTIFIER], "|").concat(src[t.NONNUMERICIDENTIFIER], ")"));
createToken('PRERELEASEIDENTIFIERLOOSE', "(?:".concat(src[t.NUMERICIDENTIFIERLOOSE], "|").concat(src[t.NONNUMERICIDENTIFIER], ")")); // ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', "(?:-(".concat(src[t.PRERELEASEIDENTIFIER], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIER], ")*))"));
createToken('PRERELEASELOOSE', "(?:-?(".concat(src[t.PRERELEASEIDENTIFIERLOOSE], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIERLOOSE], ")*))")); // ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+'); // ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', "(?:\\+(".concat(src[t.BUILDIDENTIFIER], "(?:\\.").concat(src[t.BUILDIDENTIFIER], ")*))")); // ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', "v?".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], "?").concat(src[t.BUILD], "?"));
createToken('FULL', "^".concat(src[t.FULLPLAIN], "$")); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.

createToken('LOOSEPLAIN', "[v=\\s]*".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], "?").concat(src[t.BUILD], "?"));
createToken('LOOSE', "^".concat(src[t.LOOSEPLAIN], "$"));
createToken('GTLT', '((?:<|>)?=?)'); // Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.

createToken('XRANGEIDENTIFIERLOOSE', "".concat(src[t.NUMERICIDENTIFIERLOOSE], "|x|X|\\*"));
createToken('XRANGEIDENTIFIER', "".concat(src[t.NUMERICIDENTIFIER], "|x|X|\\*"));
createToken('XRANGEPLAIN', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:".concat(src[t.PRERELEASE], ")?").concat(src[t.BUILD], "?") + ")?)?");
createToken('XRANGEPLAINLOOSE', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:".concat(src[t.PRERELEASELOOSE], ")?").concat(src[t.BUILD], "?") + ")?)?");
createToken('XRANGE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAIN], "$"));
createToken('XRANGELOOSE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAINLOOSE], "$")); // Coercion.
// Extract anything that could conceivably be a part of a valid semver

createToken('COERCE', "".concat('(^|[^\\d])' + '(\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, "})") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?") + "(?:$|[^\\d])");
createToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.
// Meaning is "reasonably at or greater than"

createToken('LONETILDE', '(?:~>?)');
createToken('TILDETRIM', "(\\s*)".concat(src[t.LONETILDE], "\\s+"), true);
exports.tildeTrimReplace = '$1~';
createToken('TILDE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], "$"));
createToken('TILDELOOSE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], "$")); // Caret ranges.
// Meaning is "at least and backwards compatible with"

createToken('LONECARET', '(?:\\^)');
createToken('CARETTRIM', "(\\s*)".concat(src[t.LONECARET], "\\s+"), true);
exports.caretTrimReplace = '$1^';
createToken('CARET', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], "$"));
createToken('CARETLOOSE', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], "$")); // A simple gt/lt/eq thing, or just "" to indicate "any version"

createToken('COMPARATORLOOSE', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], ")$|^$"));
createToken('COMPARATOR', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.FULLPLAIN], ")$|^$")); // An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`

createToken('COMPARATORTRIM', "(\\s*)".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], "|").concat(src[t.XRANGEPLAIN], ")"), true);
exports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.

createToken('HYPHENRANGE', "^\\s*(".concat(src[t.XRANGEPLAIN], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAIN], ")") + "\\s*$");
createToken('HYPHENRANGELOOSE', "^\\s*(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s*$"); // Star ranges basically just allow anything at all.

createToken('STAR', '(<|>)?=?\\s*\\*'); // >=0.0.0 is like a star

createToken('GTE0', '^\\s*>=\\s*0\.0\.0\\s*$');
createToken('GTE0PRE', '^\\s*>=\\s*0\.0\.0-0\\s*$');

/***/ }),

/***/ 66801:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
 // A linked list to keep track of recently-used-ness

var _classCallCheck = __webpack_require__(34575);

var _createClass = __webpack_require__(93913);

var Yallist = __webpack_require__(34361);

var MAX = Symbol('max');
var LENGTH = Symbol('length');
var LENGTH_CALCULATOR = Symbol('lengthCalculator');
var ALLOW_STALE = Symbol('allowStale');
var MAX_AGE = Symbol('maxAge');
var DISPOSE = Symbol('dispose');
var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
var LRU_LIST = Symbol('lruList');
var CACHE = Symbol('cache');
var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

var naiveLength = function naiveLength() {
  return 1;
}; // lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.


var LRUCache = /*#__PURE__*/function () {
  function LRUCache(options) {
    _classCallCheck(this, LRUCache);

    if (typeof options === 'number') options = {
      max: options
    };
    if (!options) options = {};
    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.

    var max = this[MAX] = options.max || Infinity;
    var lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  } // resize the cache when the max changes.


  _createClass(LRUCache, [{
    key: "max",
    get: function get() {
      return this[MAX];
    },
    set: function set(mL) {
      if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
      this[MAX] = mL || Infinity;
      trim(this);
    }
  }, {
    key: "allowStale",
    get: function get() {
      return this[ALLOW_STALE];
    },
    set: function set(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
  }, {
    key: "maxAge",
    get: function get() {
      return this[MAX_AGE];
    } // resize the cache when the lengthCalculator changes.
    ,
    set: function set(mA) {
      if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
      this[MAX_AGE] = mA;
      trim(this);
    }
  }, {
    key: "lengthCalculator",
    get: function get() {
      return this[LENGTH_CALCULATOR];
    },
    set: function set(lC) {
      var _this = this;

      if (typeof lC !== 'function') lC = naiveLength;

      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach(function (hit) {
          hit.length = _this[LENGTH_CALCULATOR](hit.value, hit.key);
          _this[LENGTH] += hit.length;
        });
      }

      trim(this);
    }
  }, {
    key: "length",
    get: function get() {
      return this[LENGTH];
    }
  }, {
    key: "itemCount",
    get: function get() {
      return this[LRU_LIST].length;
    }
  }, {
    key: "rforEach",
    value: function rforEach(fn, thisp) {
      thisp = thisp || this;

      for (var walker = this[LRU_LIST].tail; walker !== null;) {
        var prev = walker.prev;
        forEachStep(this, fn, walker, thisp);
        walker = prev;
      }
    }
  }, {
    key: "forEach",
    value: function forEach(fn, thisp) {
      thisp = thisp || this;

      for (var walker = this[LRU_LIST].head; walker !== null;) {
        var next = walker.next;
        forEachStep(this, fn, walker, thisp);
        walker = next;
      }
    }
  }, {
    key: "keys",
    value: function keys() {
      return this[LRU_LIST].toArray().map(function (k) {
        return k.key;
      });
    }
  }, {
    key: "values",
    value: function values() {
      return this[LRU_LIST].toArray().map(function (k) {
        return k.value;
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this2 = this;

      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach(function (hit) {
          return _this2[DISPOSE](hit.key, hit.value);
        });
      }

      this[CACHE] = new Map(); // hash of items by key

      this[LRU_LIST] = new Yallist(); // list of items in order of use recency

      this[LENGTH] = 0; // length of items in the list
    }
  }, {
    key: "dump",
    value: function dump() {
      var _this3 = this;

      return this[LRU_LIST].map(function (hit) {
        return isStale(_this3, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        };
      }).toArray().filter(function (h) {
        return h;
      });
    }
  }, {
    key: "dumpLru",
    value: function dumpLru() {
      return this[LRU_LIST];
    }
  }, {
    key: "set",
    value: function set(key, value, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
      var now = maxAge ? Date.now() : 0;
      var len = this[LENGTH_CALCULATOR](value, key);

      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          _del(this, this[CACHE].get(key));

          return false;
        }

        var node = this[CACHE].get(key);
        var item = node.value; // dispose of the old one before overwriting
        // split out into 2 ifs for better coverage tracking

        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
        }

        item.now = now;
        item.maxAge = maxAge;
        item.value = value;
        this[LENGTH] += len - item.length;
        item.length = len;
        this.get(key);
        trim(this);
        return true;
      }

      var hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.

      if (hit.length > this[MAX]) {
        if (this[DISPOSE]) this[DISPOSE](key, value);
        return false;
      }

      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
  }, {
    key: "has",
    value: function has(key) {
      if (!this[CACHE].has(key)) return false;
      var hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
  }, {
    key: "get",
    value: function get(key) {
      return _get(this, key, true);
    }
  }, {
    key: "peek",
    value: function peek(key) {
      return _get(this, key, false);
    }
  }, {
    key: "pop",
    value: function pop() {
      var node = this[LRU_LIST].tail;
      if (!node) return null;

      _del(this, node);

      return node.value;
    }
  }, {
    key: "del",
    value: function del(key) {
      _del(this, this[CACHE].get(key));
    }
  }, {
    key: "load",
    value: function load(arr) {
      // reset the cache
      this.reset();
      var now = Date.now(); // A previous serialized cache has the most recent items first

      for (var l = arr.length - 1; l >= 0; l--) {
        var hit = arr[l];
        var expiresAt = hit.e || 0;
        if (expiresAt === 0) // the item was created without expiration in a non aged cache
          this.set(hit.k, hit.v);else {
          var maxAge = expiresAt - now; // dont add already expired items

          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
  }, {
    key: "prune",
    value: function prune() {
      var _this4 = this;

      this[CACHE].forEach(function (value, key) {
        return _get(_this4, key, false);
      });
    }
  }]);

  return LRUCache;
}();

var _get = function _get(self, key, doUse) {
  var node = self[CACHE].get(key);

  if (node) {
    var hit = node.value;

    if (isStale(self, hit)) {
      _del(self, node);

      if (!self[ALLOW_STALE]) return undefined;
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }

    return hit.value;
  }
};

var isStale = function isStale(self, hit) {
  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
  var diff = Date.now() - hit.now;
  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};

var trim = function trim(self) {
  if (self[LENGTH] > self[MAX]) {
    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      var prev = walker.prev;

      _del(self, walker);

      walker = prev;
    }
  }
};

var _del = function _del(self, node) {
  if (node) {
    var hit = node.value;
    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
    self[LENGTH] -= hit.length;
    self[CACHE].delete(hit.key);
    self[LRU_LIST].removeNode(node);
  }
};

var Entry = function Entry(key, value, length, now, maxAge) {
  _classCallCheck(this, Entry);

  this.key = key;
  this.value = value;
  this.length = length;
  this.now = now;
  this.maxAge = maxAge || 0;
};

var forEachStep = function forEachStep(self, fn, node, thisp) {
  var hit = node.value;

  if (isStale(self, hit)) {
    _del(self, node);

    if (!self[ALLOW_STALE]) hit = undefined;
  }

  if (hit) fn.call(thisp, hit.value, hit.key, self);
};

module.exports = LRUCache;

/***/ }),

/***/ 60965:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var _regeneratorRuntime = __webpack_require__(87757);

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var walker;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            walker = this.head;

          case 1:
            if (!walker) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return walker.value;

          case 4:
            walker = walker.next;
            _context.next = 1;
            break;

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });
};

/***/ }),

/***/ 34361:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;

function Yallist(list) {
  var self = this;

  if (!(self instanceof Yallist)) {
    self = new Yallist();
  }

  self.tail = null;
  self.head = null;
  self.length = 0;

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i]);
    }
  }

  return self;
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list');
  }

  var next = node.next;
  var prev = node.prev;

  if (next) {
    next.prev = prev;
  }

  if (prev) {
    prev.next = next;
  }

  if (node === this.head) {
    this.head = next;
  }

  if (node === this.tail) {
    this.tail = prev;
  }

  node.list.length--;
  node.next = null;
  node.prev = null;
  node.list = null;
  return next;
};

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return;
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var head = this.head;
  node.list = this;
  node.next = head;

  if (head) {
    head.prev = node;
  }

  this.head = node;

  if (!this.tail) {
    this.tail = node;
  }

  this.length++;
};

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return;
  }

  if (node.list) {
    node.list.removeNode(node);
  }

  var tail = this.tail;
  node.list = this;
  node.prev = tail;

  if (tail) {
    tail.next = node;
  }

  this.tail = node;

  if (!this.head) {
    this.head = node;
  }

  this.length++;
};

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i]);
  }

  return this.length;
};

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }

  return this.length;
};

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined;
  }

  var res = this.tail.value;
  this.tail = this.tail.prev;

  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }

  this.length--;
  return res;
};

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined;
  }

  var res = this.head.value;
  this.head = this.head.next;

  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }

  this.length--;
  return res;
};

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this;

  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this;

  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next;
  }

  if (i === n && walker !== null) {
    return walker.value;
  }
};

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev;
  }

  if (i === n && walker !== null) {
    return walker.value;
  }
};

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist();

  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }

  return res;
};

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist();

  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }

  return res;
};

Yallist.prototype.reduce = function (fn, initial) {
  var acc;
  var walker = this.head;

  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value');
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }

  return acc;
};

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc;
  var walker = this.tail;

  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError('Reduce of empty list with no initial value');
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }

  return acc;
};

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length);

  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }

  return arr;
};

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length);

  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }

  return arr;
};

Yallist.prototype.slice = function (from, to) {
  to = to || this.length;

  if (to < 0) {
    to += this.length;
  }

  from = from || 0;

  if (from < 0) {
    from += this.length;
  }

  var ret = new Yallist();

  if (to < from || to < 0) {
    return ret;
  }

  if (from < 0) {
    from = 0;
  }

  if (to > this.length) {
    to = this.length;
  }

  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }

  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }

  return ret;
};

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length;

  if (to < 0) {
    to += this.length;
  }

  from = from || 0;

  if (from < 0) {
    from += this.length;
  }

  var ret = new Yallist();

  if (to < from || to < 0) {
    return ret;
  }

  if (from < 0) {
    from = 0;
  }

  if (to > this.length) {
    to = this.length;
  }

  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }

  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }

  return ret;
};

Yallist.prototype.splice = function (start, deleteCount) {
  if (start > this.length) {
    start = this.length - 1;
  }

  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next;
  }

  var ret = [];

  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value);
    walker = this.removeNode(walker);
  }

  if (walker === null) {
    walker = this.tail;
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev;
  }

  for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    walker = insert(this, walker, i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2]);
  }

  return ret;
};

Yallist.prototype.reverse = function () {
  var head = this.head;
  var tail = this.tail;

  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }

  this.head = tail;
  this.tail = head;
  return this;
};

function insert(self, node, value) {
  var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

  if (inserted.next === null) {
    self.tail = inserted;
  }

  if (inserted.prev === null) {
    self.head = inserted;
  }

  self.length++;
  return inserted;
}

function push(self, item) {
  self.tail = new Node(item, self.tail, null, self);

  if (!self.head) {
    self.head = self.tail;
  }

  self.length++;
}

function unshift(self, item) {
  self.head = new Node(item, null, self.head, self);

  if (!self.tail) {
    self.tail = self.head;
  }

  self.length++;
}

function Node(value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list);
  }

  this.list = list;
  this.value = value;

  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }

  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(60965)(Yallist);
} catch (er) {}

/***/ }),

/***/ 71362:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// Determine if version is greater than all the versions possible in the range.
var outside = __webpack_require__(41665);

var gtr = function gtr(version, range, options) {
  return outside(version, range, '>', options);
};

module.exports = gtr;

/***/ }),

/***/ 24617:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Range = __webpack_require__(40839);

var intersects = function intersects(r1, r2, options) {
  r1 = new Range(r1, options);
  r2 = new Range(r2, options);
  return r1.intersects(r2);
};

module.exports = intersects;

/***/ }),

/***/ 21252:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var outside = __webpack_require__(41665); // Determine if version is less than all the versions possible in the range


var ltr = function ltr(version, range, options) {
  return outside(version, range, '<', options);
};

module.exports = ltr;

/***/ }),

/***/ 43848:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var Range = __webpack_require__(40839);

var maxSatisfying = function maxSatisfying(versions, range, options) {
  var max = null;
  var maxSV = null;
  var rangeObj = null;

  try {
    rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }

  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, options);
      }
    }
  });
  return max;
};

module.exports = maxSatisfying;

/***/ }),

/***/ 44027:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var Range = __webpack_require__(40839);

var minSatisfying = function minSatisfying(versions, range, options) {
  var min = null;
  var minSV = null;
  var rangeObj = null;

  try {
    rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }

  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, options);
      }
    }
  });
  return min;
};

module.exports = minSatisfying;

/***/ }),

/***/ 362:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var Range = __webpack_require__(40839);

var gt = __webpack_require__(46390);

var minVersion = function minVersion(range, loose) {
  range = new Range(range, loose);
  var minver = new SemVer('0.0.0');

  if (range.test(minver)) {
    return minver;
  }

  minver = new SemVer('0.0.0-0');

  if (range.test(minver)) {
    return minver;
  }

  minver = null;

  var _loop = function _loop(i) {
    var comparators = range.set[i];
    var setMin = null;
    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version);

      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++;
          } else {
            compver.prerelease.push(0);
          }

          compver.raw = compver.format();

        /* fallthrough */

        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver;
          }

          break;

        case '<':
        case '<=':
          /* Ignore maximum versions */
          break;

        /* istanbul ignore next */

        default:
          throw new Error("Unexpected operation: ".concat(comparator.operator));
      }
    });
    if (setMin && (!minver || gt(minver, setMin))) minver = setMin;
  };

  for (var i = 0; i < range.set.length; ++i) {
    _loop(i);
  }

  if (minver && range.test(minver)) {
    return minver;
  }

  return null;
};

module.exports = minVersion;

/***/ }),

/***/ 41665:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SemVer = __webpack_require__(22748);

var Comparator = __webpack_require__(37006);

var ANY = Comparator.ANY;

var Range = __webpack_require__(40839);

var satisfies = __webpack_require__(80911);

var gt = __webpack_require__(46390);

var lt = __webpack_require__(4686);

var lte = __webpack_require__(461);

var gte = __webpack_require__(80269);

var outside = function outside(version, range, hilo, options) {
  version = new SemVer(version, options);
  range = new Range(range, options);
  var gtfn, ltefn, ltfn, comp, ecomp;

  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;

    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;

    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  } // If it satisfies the range it is not outside


  if (satisfies(version, range, options)) {
    return false;
  } // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.


  var _loop = function _loop(i) {
    var comparators = range.set[i];
    var high = null;
    var low = null;
    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0');
      }

      high = high || comparator;
      low = low || comparator;

      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    }); // If the edge version comparator has a operator then our version
    // isn't outside it

    if (high.operator === comp || high.operator === ecomp) {
      return {
        v: false
      };
    } // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range


    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
      return {
        v: false
      };
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return {
        v: false
      };
    }
  };

  for (var i = 0; i < range.set.length; ++i) {
    var _ret = _loop(i);

    if (typeof _ret === "object") return _ret.v;
  }

  return true;
};

module.exports = outside;

/***/ }),

/***/ 40379:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var _slicedToArray = __webpack_require__(63038);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
var satisfies = __webpack_require__(80911);

var compare = __webpack_require__(3757);

module.exports = function (versions, range, options) {
  var set = [];
  var min = null;
  var prev = null;
  var v = versions.sort(function (a, b) {
    return compare(a, b, options);
  });

  var _iterator = _createForOfIteratorHelper(v),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var version = _step.value;
      var included = satisfies(version, range, options);

      if (included) {
        prev = version;
        if (!min) min = version;
      } else {
        if (prev) {
          set.push([min, prev]);
        }

        prev = null;
        min = null;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (min) set.push([min, null]);
  var ranges = [];

  for (var _i = 0, _set = set; _i < _set.length; _i++) {
    var _set$_i = _slicedToArray(_set[_i], 2),
        _min = _set$_i[0],
        max = _set$_i[1];

    if (_min === max) ranges.push(_min);else if (!max && _min === v[0]) ranges.push('*');else if (!max) ranges.push(">=".concat(_min));else if (_min === v[0]) ranges.push("<=".concat(max));else ranges.push("".concat(_min, " - ").concat(max));
  }

  var simplified = ranges.join(' || ');
  var original = typeof range.raw === 'string' ? range.raw : String(range);
  return simplified.length < original.length ? simplified : range;
};

/***/ }),

/***/ 62815:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Range = __webpack_require__(40839);

var Comparator = __webpack_require__(37006);

var ANY = Comparator.ANY;

var satisfies = __webpack_require__(80911);

var compare = __webpack_require__(3757); // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true


var subset = function subset(sub, dom) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (sub === dom) return true;
  sub = new Range(sub, options);
  dom = new Range(dom, options);
  var sawNonNull = false;

  var _iterator = _createForOfIteratorHelper(sub.set),
      _step;

  try {
    OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var simpleSub = _step.value;

      var _iterator2 = _createForOfIteratorHelper(dom.set),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var simpleDom = _step2.value;
          var isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) continue OUTER;
        } // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (sawNonNull) return false;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return true;
};

var simpleSubset = function simpleSubset(sub, dom, options) {
  if (sub === dom) return true;

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) return true;else if (options.includePrerelease) sub = [new Comparator('>=0.0.0-0')];else sub = [new Comparator('>=0.0.0')];
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) return true;else dom = [new Comparator('>=0.0.0')];
  }

  var eqSet = new Set();
  var gt, lt;

  var _iterator3 = _createForOfIteratorHelper(sub),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var c = _step3.value;
      if (c.operator === '>' || c.operator === '>=') gt = higherGT(gt, c, options);else if (c.operator === '<' || c.operator === '<=') lt = lowerLT(lt, c, options);else eqSet.add(c.semver);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  if (eqSet.size > 1) return null;
  var gtltComp;

  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options);
    if (gtltComp > 0) return null;else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) return null;
  } // will iterate one or zero times


  var _iterator4 = _createForOfIteratorHelper(eqSet),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var eq = _step4.value;
      if (gt && !satisfies(eq, String(gt), options)) return null;
      if (lt && !satisfies(eq, String(lt), options)) return null;

      var _iterator6 = _createForOfIteratorHelper(dom),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _c = _step6.value;
          if (!satisfies(eq, String(_c), options)) return false;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return true;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  var higher, lower;
  var hasDomLT, hasDomGT; // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset

  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false; // exception: <1.2.3-0 is the same as <1.2.3

  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false;
  }

  var _iterator5 = _createForOfIteratorHelper(dom),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _c2 = _step5.value;
      hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';
      hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';

      if (gt) {
        if (needDomGTPre) {
          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {
            needDomGTPre = false;
          }
        }

        if (_c2.operator === '>' || _c2.operator === '>=') {
          higher = higherGT(gt, _c2, options);
          if (higher === _c2 && higher !== gt) return false;
        } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) return false;
      }

      if (lt) {
        if (needDomLTPre) {
          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {
            needDomLTPre = false;
          }
        }

        if (_c2.operator === '<' || _c2.operator === '<=') {
          lower = lowerLT(lt, _c2, options);
          if (lower === _c2 && lower !== lt) return false;
        } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) return false;
      }

      if (!_c2.operator && (lt || gt) && gtltComp !== 0) return false;
    } // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0

  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
  if (lt && hasDomGT && !gt && gtltComp !== 0) return false; // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple

  if (needDomGTPre || needDomLTPre) return false;
  return true;
}; // >=1.2.3 is lower than >1.2.3


var higherGT = function higherGT(a, b, options) {
  if (!a) return b;
  var comp = compare(a.semver, b.semver, options);
  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;
}; // <=1.2.3 is higher than <1.2.3


var lowerLT = function lowerLT(a, b, options) {
  if (!a) return b;
  var comp = compare(a.semver, b.semver, options);
  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;
};

module.exports = subset;

/***/ }),

/***/ 6231:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Range = __webpack_require__(40839); // Mostly just for testing and legacy API reasons


var toComparators = function toComparators(range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
};

module.exports = toComparators;

/***/ }),

/***/ 80508:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Range = __webpack_require__(40839);

var validRange = function validRange(range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*';
  } catch (er) {
    return null;
  }
};

module.exports = validRange;

/***/ }),

/***/ 25438:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(82109);

// eslint-disable-next-line es/no-math-hypot -- required for testing
var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;

// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

// `Math.hypot` method
// https://tc39.es/ecma262/#sec-math.hypot
$({ target: 'Math', stat: true, forced: BUGGY }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  hypot: function hypot(value1, value2) {
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});


/***/ }),

/***/ 80085:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ fields_VegaLite; }
});

// NAMESPACE OBJECT: ./node_modules/fast-json-patch/module/core.mjs
var core_namespaceObject = {};
__webpack_require__.r(core_namespaceObject);
__webpack_require__.d(core_namespaceObject, {
  "JsonPatchError": function() { return JsonPatchError; },
  "_areEquals": function() { return _areEquals; },
  "applyOperation": function() { return applyOperation; },
  "applyPatch": function() { return applyPatch; },
  "applyReducer": function() { return applyReducer; },
  "deepClone": function() { return deepClone; },
  "getValueByPointer": function() { return getValueByPointer; },
  "validate": function() { return validate; },
  "validator": function() { return validator; }
});

// NAMESPACE OBJECT: ./node_modules/fast-json-patch/module/duplex.mjs
var duplex_namespaceObject = {};
__webpack_require__.r(duplex_namespaceObject);
__webpack_require__.d(duplex_namespaceObject, {
  "compare": function() { return compare; },
  "generate": function() { return generate; },
  "observe": function() { return observe; },
  "unobserve": function() { return unobserve; }
});

// NAMESPACE OBJECT: ./node_modules/vega-transforms/build/vega-transforms.module.js
var vega_transforms_module_namespaceObject = {};
__webpack_require__.r(vega_transforms_module_namespaceObject);
__webpack_require__.d(vega_transforms_module_namespaceObject, {
  "aggregate": function() { return Aggregate; },
  "bin": function() { return Bin; },
  "collect": function() { return Collect; },
  "compare": function() { return Compare; },
  "countpattern": function() { return CountPattern; },
  "cross": function() { return Cross; },
  "density": function() { return Density; },
  "dotbin": function() { return DotBin; },
  "expression": function() { return Expression; },
  "extent": function() { return Extent; },
  "facet": function() { return Facet; },
  "field": function() { return Field; },
  "filter": function() { return Filter; },
  "flatten": function() { return Flatten; },
  "fold": function() { return Fold; },
  "formula": function() { return Formula; },
  "generate": function() { return Generate; },
  "impute": function() { return Impute; },
  "joinaggregate": function() { return JoinAggregate; },
  "kde": function() { return KDE; },
  "key": function() { return Key; },
  "load": function() { return Load; },
  "lookup": function() { return Lookup; },
  "multiextent": function() { return MultiExtent; },
  "multivalues": function() { return MultiValues; },
  "params": function() { return Params; },
  "pivot": function() { return Pivot; },
  "prefacet": function() { return PreFacet; },
  "project": function() { return Project; },
  "proxy": function() { return vega_transforms_module_Proxy; },
  "quantile": function() { return Quantile; },
  "relay": function() { return Relay; },
  "sample": function() { return Sample; },
  "sequence": function() { return Sequence; },
  "sieve": function() { return Sieve; },
  "subflow": function() { return Subflow; },
  "timeunit": function() { return TimeUnit; },
  "tupleindex": function() { return TupleIndex; },
  "values": function() { return Values; },
  "window": function() { return Window; }
});

// NAMESPACE OBJECT: ./node_modules/d3-interpolate/src/index.js
var src_namespaceObject = {};
__webpack_require__.r(src_namespaceObject);
__webpack_require__.d(src_namespaceObject, {
  "interpolate": function() { return value; },
  "interpolateArray": function() { return d3_interpolate_src_array; },
  "interpolateBasis": function() { return src_basis; },
  "interpolateBasisClosed": function() { return src_basisClosed; },
  "interpolateCubehelix": function() { return src_cubehelix; },
  "interpolateCubehelixLong": function() { return cubehelixLong; },
  "interpolateDate": function() { return date; },
  "interpolateDiscrete": function() { return discrete; },
  "interpolateHcl": function() { return src_hcl; },
  "interpolateHclLong": function() { return hclLong; },
  "interpolateHsl": function() { return src_hsl; },
  "interpolateHslLong": function() { return hslLong; },
  "interpolateHue": function() { return src_hue; },
  "interpolateLab": function() { return lab_lab; },
  "interpolateNumber": function() { return d3_interpolate_src_number; },
  "interpolateNumberArray": function() { return numberArray; },
  "interpolateObject": function() { return src_object; },
  "interpolateRgb": function() { return rgb; },
  "interpolateRgbBasis": function() { return rgbBasis; },
  "interpolateRgbBasisClosed": function() { return rgbBasisClosed; },
  "interpolateRound": function() { return src_round; },
  "interpolateString": function() { return string; },
  "interpolateTransformCss": function() { return interpolateTransformCss; },
  "interpolateTransformSvg": function() { return interpolateTransformSvg; },
  "interpolateZoom": function() { return src_zoom; },
  "piecewise": function() { return piecewise; },
  "quantize": function() { return src_quantize; }
});

// NAMESPACE OBJECT: ./node_modules/vega-view-transforms/build/vega-view-transforms.module.js
var vega_view_transforms_module_namespaceObject = {};
__webpack_require__.r(vega_view_transforms_module_namespaceObject);
__webpack_require__.d(vega_view_transforms_module_namespaceObject, {
  "bound": function() { return Bound; },
  "identifier": function() { return Identifier; },
  "mark": function() { return Mark; },
  "overlap": function() { return Overlap; },
  "render": function() { return Render; },
  "viewlayout": function() { return ViewLayout; }
});

// NAMESPACE OBJECT: ./node_modules/vega-encode/build/vega-encode.module.js
var vega_encode_module_namespaceObject = {};
__webpack_require__.r(vega_encode_module_namespaceObject);
__webpack_require__.d(vega_encode_module_namespaceObject, {
  "axisticks": function() { return AxisTicks; },
  "datajoin": function() { return DataJoin; },
  "encode": function() { return Encode; },
  "legendentries": function() { return LegendEntries; },
  "linkpath": function() { return LinkPath; },
  "pie": function() { return Pie; },
  "scale": function() { return Scale; },
  "sortitems": function() { return SortItems; },
  "stack": function() { return Stack; }
});

// NAMESPACE OBJECT: ./node_modules/vega-geo/build/vega-geo.module.js
var vega_geo_module_namespaceObject = {};
__webpack_require__.r(vega_geo_module_namespaceObject);
__webpack_require__.d(vega_geo_module_namespaceObject, {
  "contour": function() { return Contour; },
  "geojson": function() { return GeoJSON; },
  "geopath": function() { return GeoPath; },
  "geopoint": function() { return GeoPoint; },
  "geoshape": function() { return GeoShape; },
  "graticule": function() { return Graticule; },
  "heatmap": function() { return Heatmap; },
  "isocontour": function() { return Isocontour; },
  "kde2d": function() { return KDE2D; },
  "projection": function() { return Projection; }
});

// NAMESPACE OBJECT: ./node_modules/vega-force/build/vega-force.module.js
var vega_force_module_namespaceObject = {};
__webpack_require__.r(vega_force_module_namespaceObject);
__webpack_require__.d(vega_force_module_namespaceObject, {
  "force": function() { return Force; }
});

// NAMESPACE OBJECT: ./node_modules/vega-hierarchy/build/vega-hierarchy.module.js
var vega_hierarchy_module_namespaceObject = {};
__webpack_require__.r(vega_hierarchy_module_namespaceObject);
__webpack_require__.d(vega_hierarchy_module_namespaceObject, {
  "nest": function() { return Nest; },
  "pack": function() { return Pack; },
  "partition": function() { return Partition; },
  "stratify": function() { return Stratify; },
  "tree": function() { return Tree; },
  "treelinks": function() { return TreeLinks; },
  "treemap": function() { return Treemap; }
});

// NAMESPACE OBJECT: ./node_modules/vega-label/build/vega-label.module.js
var vega_label_module_namespaceObject = {};
__webpack_require__.r(vega_label_module_namespaceObject);
__webpack_require__.d(vega_label_module_namespaceObject, {
  "label": function() { return Label; }
});

// NAMESPACE OBJECT: ./node_modules/vega-regression/build/vega-regression.module.js
var vega_regression_module_namespaceObject = {};
__webpack_require__.r(vega_regression_module_namespaceObject);
__webpack_require__.d(vega_regression_module_namespaceObject, {
  "loess": function() { return Loess; },
  "regression": function() { return Regression; }
});

// NAMESPACE OBJECT: ./node_modules/vega-voronoi/build/vega-voronoi.module.js
var vega_voronoi_module_namespaceObject = {};
__webpack_require__.r(vega_voronoi_module_namespaceObject);
__webpack_require__.d(vega_voronoi_module_namespaceObject, {
  "voronoi": function() { return vega_voronoi_module_Voronoi; }
});

// NAMESPACE OBJECT: ./node_modules/vega-wordcloud/build/vega-wordcloud.module.js
var vega_wordcloud_module_namespaceObject = {};
__webpack_require__.r(vega_wordcloud_module_namespaceObject);
__webpack_require__.d(vega_wordcloud_module_namespaceObject, {
  "wordcloud": function() { return Wordcloud; }
});

// NAMESPACE OBJECT: ./node_modules/vega-crossfilter/build/vega-crossfilter.module.js
var vega_crossfilter_module_namespaceObject = {};
__webpack_require__.r(vega_crossfilter_module_namespaceObject);
__webpack_require__.d(vega_crossfilter_module_namespaceObject, {
  "crossfilter": function() { return CrossFilter; },
  "resolvefilter": function() { return ResolveFilter; }
});

// NAMESPACE OBJECT: ./node_modules/vega/build/vega.module.js
var vega_module_namespaceObject = {};
__webpack_require__.r(vega_module_namespaceObject);
__webpack_require__.d(vega_module_namespaceObject, {
  "Bounds": function() { return Bounds; },
  "CanvasHandler": function() { return CanvasHandler; },
  "CanvasRenderer": function() { return CanvasRenderer; },
  "DATE": function() { return DATE; },
  "DAY": function() { return DAY; },
  "DAYOFYEAR": function() { return DAYOFYEAR; },
  "Dataflow": function() { return Dataflow; },
  "Debug": function() { return vega_util_module_Debug; },
  "Error": function() { return Error$1; },
  "EventStream": function() { return EventStream; },
  "Gradient": function() { return Gradient; },
  "GroupItem": function() { return GroupItem; },
  "HOURS": function() { return HOURS; },
  "Handler": function() { return Handler; },
  "Info": function() { return vega_util_module_Info; },
  "Item": function() { return Item; },
  "MILLISECONDS": function() { return MILLISECONDS; },
  "MINUTES": function() { return MINUTES; },
  "MONTH": function() { return MONTH; },
  "Marks": function() { return Marks; },
  "MultiPulse": function() { return MultiPulse; },
  "None": function() { return None; },
  "Operator": function() { return Operator; },
  "Parameters": function() { return Parameters; },
  "Pulse": function() { return Pulse; },
  "QUARTER": function() { return QUARTER; },
  "RenderType": function() { return RenderType; },
  "Renderer": function() { return Renderer; },
  "ResourceLoader": function() { return ResourceLoader; },
  "SECONDS": function() { return SECONDS; },
  "SVGHandler": function() { return SVGHandler; },
  "SVGRenderer": function() { return SVGRenderer; },
  "SVGStringRenderer": function() { return SVGStringRenderer; },
  "Scenegraph": function() { return Scenegraph; },
  "TIME_UNITS": function() { return TIME_UNITS; },
  "Transform": function() { return Transform; },
  "View": function() { return View; },
  "WEEK": function() { return WEEK; },
  "Warn": function() { return vega_util_module_Warn; },
  "YEAR": function() { return YEAR; },
  "accessor": function() { return accessor; },
  "accessorFields": function() { return accessorFields; },
  "accessorName": function() { return accessorName; },
  "array": function() { return array; },
  "ascending": function() { return ascending; },
  "bandwidthNRD": function() { return estimateBandwidth; },
  "bin": function() { return vega_statistics_module_bin; },
  "bootstrapCI": function() { return bootstrapCI; },
  "boundClip": function() { return boundClip; },
  "boundContext": function() { return boundContext; },
  "boundItem": function() { return boundItem; },
  "boundMark": function() { return boundMark; },
  "boundStroke": function() { return boundStroke; },
  "changeset": function() { return changeset; },
  "clampRange": function() { return clampRange; },
  "codegenExpression": function() { return codegen; },
  "compare": function() { return vega_util_module_compare; },
  "constant": function() { return vega_util_module_constant; },
  "cumulativeLogNormal": function() { return cumulativeLogNormal; },
  "cumulativeNormal": function() { return cumulativeNormal; },
  "cumulativeUniform": function() { return cumulativeUniform; },
  "dayofyear": function() { return dayofyear; },
  "debounce": function() { return vega_util_module_debounce; },
  "defaultLocale": function() { return vega_format_module_defaultLocale; },
  "definition": function() { return definition; },
  "densityLogNormal": function() { return densityLogNormal; },
  "densityNormal": function() { return densityNormal; },
  "densityUniform": function() { return densityUniform; },
  "domChild": function() { return domChild; },
  "domClear": function() { return domClear; },
  "domCreate": function() { return domCreate; },
  "domFind": function() { return domFind; },
  "dotbin": function() { return dotbin; },
  "error": function() { return error; },
  "expressionFunction": function() { return expressionFunction; },
  "extend": function() { return extend; },
  "extent": function() { return extent; },
  "extentIndex": function() { return extentIndex; },
  "falsy": function() { return falsy; },
  "fastmap": function() { return fastmap; },
  "field": function() { return field; },
  "flush": function() { return flush; },
  "font": function() { return font; },
  "fontFamily": function() { return fontFamily; },
  "fontSize": function() { return fontSize; },
  "format": function() { return format; },
  "formatLocale": function() { return numberFormatDefaultLocale; },
  "formats": function() { return formats; },
  "hasOwnProperty": function() { return _has; },
  "id": function() { return id; },
  "identity": function() { return identity; },
  "inferType": function() { return inferType; },
  "inferTypes": function() { return inferTypes; },
  "ingest": function() { return ingest$1; },
  "inherits": function() { return vega_util_module_inherits; },
  "inrange": function() { return inrange; },
  "interpolate": function() { return interpolate; },
  "interpolateColors": function() { return interpolateColors; },
  "interpolateRange": function() { return interpolateRange; },
  "intersect": function() { return vega_scenegraph_module_intersect; },
  "intersectBoxLine": function() { return intersectBoxLine; },
  "intersectPath": function() { return intersectPath; },
  "intersectPoint": function() { return intersectPoint; },
  "intersectRule": function() { return intersectRule; },
  "isArray": function() { return isArray; },
  "isBoolean": function() { return isBoolean; },
  "isDate": function() { return isDate; },
  "isFunction": function() { return isFunction; },
  "isIterable": function() { return isIterable; },
  "isNumber": function() { return isNumber; },
  "isObject": function() { return isObject; },
  "isRegExp": function() { return isRegExp; },
  "isString": function() { return isString; },
  "isTuple": function() { return isTuple; },
  "key": function() { return key; },
  "lerp": function() { return lerp; },
  "lineHeight": function() { return lineHeight; },
  "loader": function() { return index_browser_loader; },
  "locale": function() { return vega_format_module_locale; },
  "logger": function() { return logger; },
  "lruCache": function() { return lruCache; },
  "markup": function() { return markup; },
  "merge": function() { return merge; },
  "mergeConfig": function() { return mergeConfig; },
  "multiLineOffset": function() { return multiLineOffset; },
  "one": function() { return one; },
  "pad": function() { return pad; },
  "panLinear": function() { return panLinear; },
  "panLog": function() { return panLog; },
  "panPow": function() { return panPow; },
  "panSymlog": function() { return panSymlog; },
  "parse": function() { return parse$1; },
  "parseExpression": function() { return parser; },
  "parseSelector": function() { return eventSelector; },
  "pathCurves": function() { return curves; },
  "pathEqual": function() { return pathEqual; },
  "pathParse": function() { return pathParse; },
  "pathRectangle": function() { return vg_rect; },
  "pathRender": function() { return pathRender; },
  "pathSymbols": function() { return vega_scenegraph_module_symbols; },
  "pathTrail": function() { return vg_trail; },
  "peek": function() { return peek; },
  "point": function() { return vega_scenegraph_module_point; },
  "projection": function() { return vega_projection_module_projection; },
  "quantileLogNormal": function() { return quantileLogNormal; },
  "quantileNormal": function() { return quantileNormal; },
  "quantileUniform": function() { return quantileUniform; },
  "quantiles": function() { return quantiles; },
  "quantizeInterpolator": function() { return quantizeInterpolator; },
  "quarter": function() { return quarter; },
  "quartiles": function() { return quartiles; },
  "random": function() { return vega_statistics_module_random; },
  "randomInteger": function() { return integer; },
  "randomKDE": function() { return kde; },
  "randomLCG": function() { return lcg; },
  "randomLogNormal": function() { return lognormal; },
  "randomMixture": function() { return mixture; },
  "randomNormal": function() { return gaussian; },
  "randomUniform": function() { return uniform; },
  "read": function() { return read; },
  "regressionExp": function() { return vega_statistics_module_exp; },
  "regressionLinear": function() { return linear; },
  "regressionLoess": function() { return loess; },
  "regressionLog": function() { return vega_statistics_module_log; },
  "regressionPoly": function() { return poly; },
  "regressionPow": function() { return vega_statistics_module_pow; },
  "regressionQuad": function() { return quad; },
  "renderModule": function() { return renderModule; },
  "repeat": function() { return repeat; },
  "resetDefaultLocale": function() { return resetDefaultLocale; },
  "resetSVGClipId": function() { return resetSVGClipId; },
  "resetSVGDefIds": function() { return resetSVGDefIds; },
  "responseType": function() { return responseType; },
  "runtimeContext": function() { return vega_runtime_module_context; },
  "sampleCurve": function() { return sampleCurve; },
  "sampleLogNormal": function() { return sampleLogNormal; },
  "sampleNormal": function() { return sampleNormal; },
  "sampleUniform": function() { return sampleUniform; },
  "scale": function() { return vega_scale_module_scale; },
  "sceneEqual": function() { return sceneEqual; },
  "sceneFromJSON": function() { return sceneFromJSON; },
  "scenePickVisit": function() { return pickVisit; },
  "sceneToJSON": function() { return sceneToJSON; },
  "sceneVisit": function() { return visit; },
  "sceneZOrder": function() { return zorder; },
  "scheme": function() { return scheme; },
  "serializeXML": function() { return serializeXML; },
  "setRandom": function() { return setRandom; },
  "span": function() { return span; },
  "splitAccessPath": function() { return splitAccessPath; },
  "stringValue": function() { return $; },
  "textMetrics": function() { return textMetrics; },
  "timeBin": function() { return bin; },
  "timeFloor": function() { return timeFloor; },
  "timeFormatLocale": function() { return timeFormatDefaultLocale; },
  "timeInterval": function() { return timeInterval; },
  "timeOffset": function() { return timeOffset; },
  "timeSequence": function() { return timeSequence; },
  "timeUnitSpecifier": function() { return timeUnitSpecifier; },
  "timeUnits": function() { return timeUnits; },
  "toBoolean": function() { return toBoolean; },
  "toDate": function() { return toDate; },
  "toNumber": function() { return toNumber; },
  "toSet": function() { return toSet; },
  "toString": function() { return vega_util_module_toString; },
  "transform": function() { return vega_dataflow_module_transform; },
  "transforms": function() { return transforms; },
  "truncate": function() { return truncate; },
  "truthy": function() { return truthy; },
  "tupleid": function() { return tupleid; },
  "typeParsers": function() { return typeParsers; },
  "utcFloor": function() { return utcFloor; },
  "utcInterval": function() { return utcInterval; },
  "utcOffset": function() { return utcOffset; },
  "utcSequence": function() { return utcSequence; },
  "utcdayofyear": function() { return utcdayofyear; },
  "utcquarter": function() { return utcquarter; },
  "utcweek": function() { return utcweek; },
  "version": function() { return version; },
  "visitArray": function() { return visitArray; },
  "week": function() { return week; },
  "writeConfig": function() { return writeConfig; },
  "zero": function() { return zero; },
  "zoomLinear": function() { return zoomLinear; },
  "zoomLog": function() { return zoomLog; },
  "zoomPow": function() { return zoomPow; },
  "zoomSymlog": function() { return zoomSymlog; }
});

// NAMESPACE OBJECT: ./node_modules/vega-lite/build/src/index.js
var build_src_namespaceObject = {};
__webpack_require__.r(build_src_namespaceObject);
__webpack_require__.d(build_src_namespaceObject, {
  "accessPathDepth": function() { return accessPathDepth; },
  "accessPathWithDatum": function() { return accessPathWithDatum; },
  "compile": function() { return compile; },
  "contains": function() { return util_contains; },
  "deepEqual": function() { return deepEqual; },
  "deleteNestedProperty": function() { return deleteNestedProperty; },
  "duplicate": function() { return duplicate; },
  "entries": function() { return entries; },
  "every": function() { return every; },
  "fieldIntersection": function() { return fieldIntersection; },
  "flatAccessWithDatum": function() { return flatAccessWithDatum; },
  "getFirstDefined": function() { return getFirstDefined; },
  "hasIntersection": function() { return hasIntersection; },
  "hash": function() { return util_hash; },
  "internalField": function() { return internalField; },
  "isBoolean": function() { return util_isBoolean; },
  "isEmpty": function() { return isEmpty; },
  "isEqual": function() { return isEqual; },
  "isInternalField": function() { return isInternalField; },
  "isNullOrFalse": function() { return isNullOrFalse; },
  "isNumeric": function() { return isNumeric; },
  "keys": function() { return util_keys; },
  "logicalExpr": function() { return logicalExpr; },
  "mergeDeep": function() { return mergeDeep; },
  "normalize": function() { return normalize_normalize; },
  "normalizeAngle": function() { return normalizeAngle; },
  "omit": function() { return omit; },
  "pick": function() { return util_pick; },
  "prefixGenerator": function() { return prefixGenerator; },
  "removePathFromField": function() { return removePathFromField; },
  "replaceAll": function() { return replaceAll; },
  "replacePathInField": function() { return replacePathInField; },
  "resetIdCounter": function() { return resetIdCounter; },
  "setEqual": function() { return setEqual; },
  "some": function() { return some; },
  "stringify": function() { return stringify; },
  "titleCase": function() { return titleCase; },
  "unique": function() { return unique; },
  "uniqueId": function() { return uniqueId; },
  "vals": function() { return vals; },
  "varName": function() { return varName; },
  "version": function() { return src_version; }
});

// NAMESPACE OBJECT: ./node_modules/vega-themes/build/vega-themes.module.js
var vega_themes_module_namespaceObject = {};
__webpack_require__.r(vega_themes_module_namespaceObject);
__webpack_require__.d(vega_themes_module_namespaceObject, {
  "dark": function() { return darkTheme; },
  "excel": function() { return excelTheme; },
  "fivethirtyeight": function() { return fiveThirtyEightTheme; },
  "ggplot2": function() { return ggplot2Theme; },
  "googlecharts": function() { return googlechartsTheme; },
  "latimes": function() { return latimesTheme; },
  "quartz": function() { return quartzTheme; },
  "urbaninstitute": function() { return urbanInstituteTheme; },
  "version": function() { return vega_themes_module_version$1; },
  "vox": function() { return voxTheme; }
});

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(67294);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
var objectWithoutProperties = __webpack_require__(81253);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
var classCallCheck = __webpack_require__(6610);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
var createClass = __webpack_require__(5991);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(63349);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js
var inherits = __webpack_require__(10379);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(46070);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(77608);
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/shallowEqual.js
var EMPTY = {};
function shallowEqual() {
  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY;
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EMPTY;
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return a === b || aKeys.length === bKeys.length && aKeys.every(function (key) {
    return a[key] === b[key];
  });
}
;// CONCATENATED MODULE: ./node_modules/fast-json-patch/module/helpers.mjs
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017 Joachim Wester
 * MIT license
 */
var __extends = undefined && undefined.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var _hasOwnProperty = Object.prototype.hasOwnProperty;
function helpers_hasOwnProperty(obj, key) {
  return _hasOwnProperty.call(obj, key);
}
function _objectKeys(obj) {
  if (Array.isArray(obj)) {
    var keys = new Array(obj.length);

    for (var k = 0; k < keys.length; k++) {
      keys[k] = "" + k;
    }

    return keys;
  }

  if (Object.keys) {
    return Object.keys(obj);
  }

  var keys = [];

  for (var i in obj) {
    if (helpers_hasOwnProperty(obj, i)) {
      keys.push(i);
    }
  }

  return keys;
}
;
/**
* Deeply clone the object.
* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
* @param  {any} obj value to clone
* @return {any} cloned obj
*/

function _deepClone(obj) {
  switch (typeof obj) {
    case "object":
      return JSON.parse(JSON.stringify(obj));
    //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5

    case "undefined":
      return null;
    //this is how JSON.stringify behaves for array items

    default:
      return obj;
    //no need to clone primitives
  }
} //3x faster than cached /^\d+$/.test(str)

function isInteger(str) {
  var i = 0;
  var len = str.length;
  var charCode;

  while (i < len) {
    charCode = str.charCodeAt(i);

    if (charCode >= 48 && charCode <= 57) {
      i++;
      continue;
    }

    return false;
  }

  return true;
}
/**
* Escapes a json pointer path
* @param path The raw pointer
* @return the Escaped path
*/

function escapePathComponent(path) {
  if (path.indexOf('/') === -1 && path.indexOf('~') === -1) return path;
  return path.replace(/~/g, '~0').replace(/\//g, '~1');
}
/**
 * Unescapes a json pointer path
 * @param path The escaped pointer
 * @return The unescaped path
 */

function unescapePathComponent(path) {
  return path.replace(/~1/g, '/').replace(/~0/g, '~');
}
function _getPathRecursive(root, obj) {
  var found;

  for (var key in root) {
    if (helpers_hasOwnProperty(root, key)) {
      if (root[key] === obj) {
        return escapePathComponent(key) + '/';
      } else if (typeof root[key] === 'object') {
        found = _getPathRecursive(root[key], obj);

        if (found != '') {
          return escapePathComponent(key) + '/' + found;
        }
      }
    }
  }

  return '';
}
function getPath(root, obj) {
  if (root === obj) {
    return '/';
  }

  var path = _getPathRecursive(root, obj);

  if (path === '') {
    throw new Error("Object not found in root");
  }

  return '/' + path;
}
/**
* Recursively checks whether an object has any undefined values inside.
*/

function hasUndefined(obj) {
  if (obj === undefined) {
    return true;
  }

  if (obj) {
    if (Array.isArray(obj)) {
      for (var i = 0, len = obj.length; i < len; i++) {
        if (hasUndefined(obj[i])) {
          return true;
        }
      }
    } else if (typeof obj === "object") {
      var objKeys = _objectKeys(obj);

      var objKeysLength = objKeys.length;

      for (var i = 0; i < objKeysLength; i++) {
        if (hasUndefined(obj[objKeys[i]])) {
          return true;
        }
      }
    }
  }

  return false;
}

function patchErrorMessageFormatter(message, args) {
  var messageParts = [message];

  for (var key in args) {
    var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print

    if (typeof value !== 'undefined') {
      messageParts.push(key + ": " + value);
    }
  }

  return messageParts.join('\n');
}

var PatchError =
/** @class */
function (_super) {
  __extends(PatchError, _super);

  function PatchError(message, name, index, operation, tree) {
    var _newTarget = this.constructor;

    var _this = _super.call(this, patchErrorMessageFormatter(message, {
      name: name,
      index: index,
      operation: operation,
      tree: tree
    })) || this;

    _this.name = name;
    _this.index = index;
    _this.operation = operation;
    _this.tree = tree;
    Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359

    _this.message = patchErrorMessageFormatter(message, {
      name: name,
      index: index,
      operation: operation,
      tree: tree
    });
    return _this;
  }

  return PatchError;
}(Error);


;// CONCATENATED MODULE: ./node_modules/fast-json-patch/module/core.mjs

var JsonPatchError = PatchError;
var deepClone = _deepClone;
/* We use a Javascript hash to store each
 function. Each hash entry (property) uses
 the operation identifiers specified in rfc6902.
 In this way, we can map each patch operation
 to its dedicated function in efficient way.
 */

/* The operations applicable to an object */

var objOps = {
  add: function add(obj, key, document) {
    obj[key] = this.value;
    return {
      newDocument: document
    };
  },
  remove: function remove(obj, key, document) {
    var removed = obj[key];
    delete obj[key];
    return {
      newDocument: document,
      removed: removed
    };
  },
  replace: function replace(obj, key, document) {
    var removed = obj[key];
    obj[key] = this.value;
    return {
      newDocument: document,
      removed: removed
    };
  },
  move: function move(obj, key, document) {
    /* in case move target overwrites an existing value,
    return the removed value, this can be taxing performance-wise,
    and is potentially unneeded */
    var removed = getValueByPointer(document, this.path);

    if (removed) {
      removed = _deepClone(removed);
    }

    var originalValue = applyOperation(document, {
      op: "remove",
      path: this.from
    }).removed;
    applyOperation(document, {
      op: "add",
      path: this.path,
      value: originalValue
    });
    return {
      newDocument: document,
      removed: removed
    };
  },
  copy: function copy(obj, key, document) {
    var valueToCopy = getValueByPointer(document, this.from); // enforce copy by value so further operations don't affect source (see issue #177)

    applyOperation(document, {
      op: "add",
      path: this.path,
      value: _deepClone(valueToCopy)
    });
    return {
      newDocument: document
    };
  },
  test: function test(obj, key, document) {
    return {
      newDocument: document,
      test: _areEquals(obj[key], this.value)
    };
  },
  _get: function _get(obj, key, document) {
    this.value = obj[key];
    return {
      newDocument: document
    };
  }
};
/* The operations applicable to an array. Many are the same as for the object */

var arrOps = {
  add: function add(arr, i, document) {
    if (isInteger(i)) {
      arr.splice(i, 0, this.value);
    } else {
      // array props
      arr[i] = this.value;
    } // this may be needed when using '-' in an array


    return {
      newDocument: document,
      index: i
    };
  },
  remove: function remove(arr, i, document) {
    var removedList = arr.splice(i, 1);
    return {
      newDocument: document,
      removed: removedList[0]
    };
  },
  replace: function replace(arr, i, document) {
    var removed = arr[i];
    arr[i] = this.value;
    return {
      newDocument: document,
      removed: removed
    };
  },
  move: objOps.move,
  copy: objOps.copy,
  test: objOps.test,
  _get: objOps._get
};
/**
 * Retrieves a value from a JSON document by a JSON pointer.
 * Returns the value.
 *
 * @param document The document to get the value from
 * @param pointer an escaped JSON pointer
 * @return The retrieved value
 */

function getValueByPointer(document, pointer) {
  if (pointer == '') {
    return document;
  }

  var getOriginalDestination = {
    op: "_get",
    path: pointer
  };
  applyOperation(document, getOriginalDestination);
  return getOriginalDestination.value;
}
/**
 * Apply a single JSON Patch Operation on a JSON document.
 * Returns the {newDocument, result} of the operation.
 * It modifies the `document` and `operation` objects - it gets the values by reference.
 * If you would like to avoid touching your values, clone them:
 * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
 *
 * @param document The document to patch
 * @param operation The operation to apply
 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
 * @param mutateDocument Whether to mutate the original document or clone it before applying
 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
 * @return `{newDocument, result}` after the operation
 */

function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
  if (validateOperation === void 0) {
    validateOperation = false;
  }

  if (mutateDocument === void 0) {
    mutateDocument = true;
  }

  if (banPrototypeModifications === void 0) {
    banPrototypeModifications = true;
  }

  if (index === void 0) {
    index = 0;
  }

  if (validateOperation) {
    if (typeof validateOperation == 'function') {
      validateOperation(operation, 0, document, operation.path);
    } else {
      validator(operation, 0);
    }
  }
  /* ROOT OPERATIONS */


  if (operation.path === "") {
    var returnValue = {
      newDocument: document
    };

    if (operation.op === 'add') {
      returnValue.newDocument = operation.value;
      return returnValue;
    } else if (operation.op === 'replace') {
      returnValue.newDocument = operation.value;
      returnValue.removed = document; //document we removed

      return returnValue;
    } else if (operation.op === 'move' || operation.op === 'copy') {
      // it's a move or copy to root
      returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field

      if (operation.op === 'move') {
        // report removed item
        returnValue.removed = document;
      }

      return returnValue;
    } else if (operation.op === 'test') {
      returnValue.test = _areEquals(document, operation.value);

      if (returnValue.test === false) {
        throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
      }

      returnValue.newDocument = document;
      return returnValue;
    } else if (operation.op === 'remove') {
      // a remove on root
      returnValue.removed = document;
      returnValue.newDocument = null;
      return returnValue;
    } else if (operation.op === '_get') {
      operation.value = document;
      return returnValue;
    } else {
      /* bad operation */
      if (validateOperation) {
        throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
      } else {
        return returnValue;
      }
    }
  }
  /* END ROOT OPERATIONS */
  else {
      if (!mutateDocument) {
        document = _deepClone(document);
      }

      var path = operation.path || "";
      var keys = path.split('/');
      var obj = document;
      var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift

      var len = keys.length;
      var existingPathFragment = undefined;
      var key = void 0;
      var validateFunction = void 0;

      if (typeof validateOperation == 'function') {
        validateFunction = validateOperation;
      } else {
        validateFunction = validator;
      }

      while (true) {
        key = keys[t];

        if (banPrototypeModifications && key == '__proto__') {
          throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
        }

        if (validateOperation) {
          if (existingPathFragment === undefined) {
            if (obj[key] === undefined) {
              existingPathFragment = keys.slice(0, t).join('/');
            } else if (t == len - 1) {
              existingPathFragment = operation.path;
            }

            if (existingPathFragment !== undefined) {
              validateFunction(operation, 0, document, existingPathFragment);
            }
          }
        }

        t++;

        if (Array.isArray(obj)) {
          if (key === '-') {
            key = obj.length;
          } else {
            if (validateOperation && !isInteger(key)) {
              throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
            } // only parse key when it's an integer for `arr.prop` to work
            else if (isInteger(key)) {
                key = ~~key;
              }
          }

          if (t >= len) {
            if (validateOperation && operation.op === "add" && key > obj.length) {
              throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
            }

            var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch

            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
            }

            return returnValue;
          }
        } else {
          if (key && key.indexOf('~') != -1) {
            key = unescapePathComponent(key);
          }

          if (t >= len) {
            var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch

            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
            }

            return returnValue;
          }
        }

        obj = obj[key];
      }
    }
}
/**
 * Apply a full JSON Patch array on a JSON document.
 * Returns the {newDocument, result} of the patch.
 * It modifies the `document` object and `patch` - it gets the values by reference.
 * If you would like to avoid touching your values, clone them:
 * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
 *
 * @param document The document to patch
 * @param patch The patch to apply
 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
 * @param mutateDocument Whether to mutate the original document or clone it before applying
 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
 * @return An array of `{newDocument, result}` after the patch
 */

function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
  if (mutateDocument === void 0) {
    mutateDocument = true;
  }

  if (banPrototypeModifications === void 0) {
    banPrototypeModifications = true;
  }

  if (validateOperation) {
    if (!Array.isArray(patch)) {
      throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
    }
  }

  if (!mutateDocument) {
    document = _deepClone(document);
  }

  var results = new Array(patch.length);

  for (var i = 0, length_1 = patch.length; i < length_1; i++) {
    // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
    results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);
    document = results[i].newDocument; // in case root was replaced
  }

  results.newDocument = document;
  return results;
}
/**
 * Apply a single JSON Patch Operation on a JSON document.
 * Returns the updated document.
 * Suitable as a reducer.
 *
 * @param document The document to patch
 * @param operation The operation to apply
 * @return The updated document
 */

function applyReducer(document, operation, index) {
  var operationResult = applyOperation(document, operation);

  if (operationResult.test === false) {
    // failed test
    throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
  }

  return operationResult.newDocument;
}
/**
 * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
 * @param {object} operation - operation object (patch)
 * @param {number} index - index of operation in the sequence
 * @param {object} [document] - object where the operation is supposed to be applied
 * @param {string} [existingPathFragment] - comes along with `document`
 */

function validator(operation, index, document, existingPathFragment) {
  if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {
    throw new JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
  } else if (!objOps[operation.op]) {
    throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
  } else if (typeof operation.path !== 'string') {
    throw new JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
  } else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
    // paths that aren't empty string should start with "/"
    throw new JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
  } else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
    throw new JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
  } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
    throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
  } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && hasUndefined(operation.value)) {
    throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
  } else if (document) {
    if (operation.op == "add") {
      var pathLen = operation.path.split("/").length;
      var existingPathLen = existingPathFragment.split("/").length;

      if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
        throw new JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
      }
    } else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
      if (operation.path !== existingPathFragment) {
        throw new JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
      }
    } else if (operation.op === 'move' || operation.op === 'copy') {
      var existingValue = {
        op: "_get",
        path: operation.from,
        value: undefined
      };
      var error = validate([existingValue], document);

      if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
        throw new JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
      }
    }
  }
}
/**
 * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
 * If error is encountered, returns a JsonPatchError object
 * @param sequence
 * @param document
 * @returns {JsonPatchError|undefined}
 */

function validate(sequence, document, externalValidator) {
  try {
    if (!Array.isArray(sequence)) {
      throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
    }

    if (document) {
      //clone document and sequence so that we can safely try applying operations
      applyPatch(_deepClone(document), _deepClone(sequence), externalValidator || true);
    } else {
      externalValidator = externalValidator || validator;

      for (var i = 0; i < sequence.length; i++) {
        externalValidator(sequence[i], i, document, undefined);
      }
    }
  } catch (e) {
    if (e instanceof JsonPatchError) {
      return e;
    } else {
      throw e;
    }
  }
} // based on https://github.com/epoberezkin/fast-deep-equal
// MIT License
// Copyright (c) 2017 Evgeny Poberezkin
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

function _areEquals(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = Array.isArray(a),
        arrB = Array.isArray(b),
        i,
        length,
        key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!_areEquals(a[i], b[i])) return false;
      }

      return true;
    }

    if (arrA != arrB) return false;
    var keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!b.hasOwnProperty(keys[i])) return false;
    }

    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (!_areEquals(a[key], b[key])) return false;
    }

    return true;
  }

  return a !== a && b !== b;
}
;
;// CONCATENATED MODULE: ./node_modules/fast-json-patch/module/duplex.mjs
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017 Joachim Wester
 * MIT license
 */


var beforeDict = new WeakMap();

var Mirror =
/** @class */
function () {
  function Mirror(obj) {
    this.observers = new Map();
    this.obj = obj;
  }

  return Mirror;
}();

var ObserverInfo =
/** @class */
function () {
  function ObserverInfo(callback, observer) {
    this.callback = callback;
    this.observer = observer;
  }

  return ObserverInfo;
}();

function getMirror(obj) {
  return beforeDict.get(obj);
}

function getObserverFromMirror(mirror, callback) {
  return mirror.observers.get(callback);
}

function removeObserverFromMirror(mirror, observer) {
  mirror.observers.delete(observer.callback);
}
/**
 * Detach an observer from an object
 */


function unobserve(root, observer) {
  observer.unobserve();
}
/**
 * Observes changes made to an object, which can then be retrieved using generate
 */

function observe(obj, callback) {
  var patches = [];
  var observer;
  var mirror = getMirror(obj);

  if (!mirror) {
    mirror = new Mirror(obj);
    beforeDict.set(obj, mirror);
  } else {
    var observerInfo = getObserverFromMirror(mirror, callback);
    observer = observerInfo && observerInfo.observer;
  }

  if (observer) {
    return observer;
  }

  observer = {};
  mirror.value = _deepClone(obj);

  if (callback) {
    observer.callback = callback;
    observer.next = null;

    var dirtyCheck = function dirtyCheck() {
      generate(observer);
    };

    var fastCheck = function fastCheck() {
      clearTimeout(observer.next);
      observer.next = setTimeout(dirtyCheck);
    };

    if (typeof window !== 'undefined') {
      //not Node
      window.addEventListener('mouseup', fastCheck);
      window.addEventListener('keyup', fastCheck);
      window.addEventListener('mousedown', fastCheck);
      window.addEventListener('keydown', fastCheck);
      window.addEventListener('change', fastCheck);
    }
  }

  observer.patches = patches;
  observer.object = obj;

  observer.unobserve = function () {
    generate(observer);
    clearTimeout(observer.next);
    removeObserverFromMirror(mirror, observer);

    if (typeof window !== 'undefined') {
      window.removeEventListener('mouseup', fastCheck);
      window.removeEventListener('keyup', fastCheck);
      window.removeEventListener('mousedown', fastCheck);
      window.removeEventListener('keydown', fastCheck);
      window.removeEventListener('change', fastCheck);
    }
  };

  mirror.observers.set(callback, new ObserverInfo(callback, observer));
  return observer;
}
/**
 * Generate an array of patches from an observer
 */

function generate(observer, invertible) {
  if (invertible === void 0) {
    invertible = false;
  }

  var mirror = beforeDict.get(observer.object);

  _generate(mirror.value, observer.object, observer.patches, "", invertible);

  if (observer.patches.length) {
    applyPatch(mirror.value, observer.patches);
  }

  var temp = observer.patches;

  if (temp.length > 0) {
    observer.patches = [];

    if (observer.callback) {
      observer.callback(temp);
    }
  }

  return temp;
} // Dirty check if obj is different from mirror, generate patches and update mirror

function _generate(mirror, obj, patches, path, invertible) {
  if (obj === mirror) {
    return;
  }

  if (typeof obj.toJSON === "function") {
    obj = obj.toJSON();
  }

  var newKeys = _objectKeys(obj);

  var oldKeys = _objectKeys(mirror);

  var changed = false;
  var deleted = false; //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"

  for (var t = oldKeys.length - 1; t >= 0; t--) {
    var key = oldKeys[t];
    var oldVal = mirror[key];

    if (helpers_hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
      var newVal = obj[key];

      if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
        _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key), invertible);
      } else {
        if (oldVal !== newVal) {
          changed = true;

          if (invertible) {
            patches.push({
              op: "test",
              path: path + "/" + escapePathComponent(key),
              value: _deepClone(oldVal)
            });
          }

          patches.push({
            op: "replace",
            path: path + "/" + escapePathComponent(key),
            value: _deepClone(newVal)
          });
        }
      }
    } else if (Array.isArray(mirror) === Array.isArray(obj)) {
      if (invertible) {
        patches.push({
          op: "test",
          path: path + "/" + escapePathComponent(key),
          value: _deepClone(oldVal)
        });
      }

      patches.push({
        op: "remove",
        path: path + "/" + escapePathComponent(key)
      });
      deleted = true; // property has been deleted
    } else {
      if (invertible) {
        patches.push({
          op: "test",
          path: path,
          value: mirror
        });
      }

      patches.push({
        op: "replace",
        path: path,
        value: obj
      });
      changed = true;
    }
  }

  if (!deleted && newKeys.length == oldKeys.length) {
    return;
  }

  for (var t = 0; t < newKeys.length; t++) {
    var key = newKeys[t];

    if (!helpers_hasOwnProperty(mirror, key) && obj[key] !== undefined) {
      patches.push({
        op: "add",
        path: path + "/" + escapePathComponent(key),
        value: _deepClone(obj[key])
      });
    }
  }
}
/**
 * Create an array of patches from the differences in two objects
 */


function compare(tree1, tree2, invertible) {
  if (invertible === void 0) {
    invertible = false;
  }

  var patches = [];

  _generate(tree1, tree2, patches, '', invertible);

  return patches;
}
;// CONCATENATED MODULE: ./node_modules/fast-json-patch/index.mjs



/**
 * Default export for backwards compat
 */




/* harmony default export */ var fast_json_patch = (Object.assign({}, core_namespaceObject, duplex_namespaceObject, {
  JsonPatchError: PatchError,
  deepClone: _deepClone,
  escapePathComponent: escapePathComponent,
  unescapePathComponent: unescapePathComponent
}));
// EXTERNAL MODULE: ./node_modules/json-stringify-pretty-compact/index.js
var json_stringify_pretty_compact = __webpack_require__(70080);
var json_stringify_pretty_compact_default = /*#__PURE__*/__webpack_require__.n(json_stringify_pretty_compact);
// EXTERNAL MODULE: ./node_modules/semver/index.js
var semver = __webpack_require__(16023);
;// CONCATENATED MODULE: ./node_modules/vega-util/build/vega-util.module.js
function accessor(fn, fields, name) {
  fn.fields = fields || [];
  fn.fname = name;
  return fn;
}

function accessorName(fn) {
  return fn == null ? null : fn.fname;
}

function accessorFields(fn) {
  return fn == null ? null : fn.fields;
}

function getter(path) {
  return path.length === 1 ? get1(path[0]) : getN(path);
}

var get1 = function get1(field) {
  return function (obj) {
    return obj[field];
  };
};

var getN = function getN(path) {
  var len = path.length;
  return function (obj) {
    for (var i = 0; i < len; ++i) {
      obj = obj[path[i]];
    }

    return obj;
  };
};

function error(message) {
  throw Error(message);
}

function splitAccessPath(p) {
  var path = [],
      n = p.length;
  var q = null,
      b = 0,
      s = '',
      i,
      j,
      c;
  p = p + '';

  function push() {
    path.push(s + p.substring(i, j));
    s = '';
    i = j + 1;
  }

  for (i = j = 0; j < n; ++j) {
    c = p[j];

    if (c === '\\') {
      s += p.substring(i, j);
      s += p.substring(++j, ++j);
      i = j;
    } else if (c === q) {
      push();
      q = null;
      b = -1;
    } else if (q) {
      continue;
    } else if (i === b && c === '"') {
      i = j + 1;
      q = c;
    } else if (i === b && c === "'") {
      i = j + 1;
      q = c;
    } else if (c === '.' && !b) {
      if (j > i) {
        push();
      } else {
        i = j + 1;
      }
    } else if (c === '[') {
      if (j > i) push();
      b = i = j + 1;
    } else if (c === ']') {
      if (!b) error('Access path missing open bracket: ' + p);
      if (b > 0) push();
      b = 0;
      i = j + 1;
    }
  }

  if (b) error('Access path missing closing bracket: ' + p);
  if (q) error('Access path missing closing quote: ' + p);

  if (j > i) {
    j++;
    push();
  }

  return path;
}

function field(field, name, opt) {
  var path = splitAccessPath(field);
  field = path.length === 1 ? path[0] : field;
  return accessor((opt && opt.get || getter)(path), [field], name || field);
}

var id = field('id');
var identity = accessor(function (_) {
  return _;
}, [], 'identity');
var zero = accessor(function () {
  return 0;
}, [], 'zero');
var one = accessor(function () {
  return 1;
}, [], 'one');
var truthy = accessor(function () {
  return true;
}, [], 'true');
var falsy = accessor(function () {
  return false;
}, [], 'false');

function log$1(method, level, input) {
  var args = [level].concat([].slice.call(input));
  console[method].apply(console, args); // eslint-disable-line no-console
}

var None = 0;
var Error$1 = 1;
var vega_util_module_Warn = 2;
var vega_util_module_Info = 3;
var vega_util_module_Debug = 4;

function logger(_, method) {
  var _level = _ || None;

  return {
    level: function level(_) {
      if (arguments.length) {
        _level = +_;
        return this;
      } else {
        return _level;
      }
    },
    error: function error() {
      if (_level >= Error$1) log$1(method || 'error', 'ERROR', arguments);
      return this;
    },
    warn: function warn() {
      if (_level >= vega_util_module_Warn) log$1(method || 'warn', 'WARN', arguments);
      return this;
    },
    info: function info() {
      if (_level >= vega_util_module_Info) log$1(method || 'log', 'INFO', arguments);
      return this;
    },
    debug: function debug() {
      if (_level >= vega_util_module_Debug) log$1(method || 'log', 'DEBUG', arguments);
      return this;
    }
  };
}

var isArray = Array.isArray;

function isObject(_) {
  return _ === Object(_);
}

var isLegalKey = function isLegalKey(key) {
  return key !== '__proto__';
};

function mergeConfig() {
  for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {
    configs[_key] = arguments[_key];
  }

  return configs.reduce(function (out, source) {
    for (var _key2 in source) {
      if (_key2 === 'signals') {
        // for signals, we merge the signals arrays
        // source signals take precedence over
        // existing signals with the same name
        out.signals = mergeNamed(out.signals, source.signals);
      } else {
        // otherwise, merge objects subject to recursion constraints
        // for legend block, recurse for the layout entry only
        // for style block, recurse for all properties
        // otherwise, no recursion: objects overwrite, no merging
        var r = _key2 === 'legend' ? {
          layout: 1
        } : _key2 === 'style' ? true : null;
        writeConfig(out, _key2, source[_key2], r);
      }
    }

    return out;
  }, {});
}

function writeConfig(output, key, value, recurse) {
  if (!isLegalKey(key)) return;
  var k, o;

  if (isObject(value) && !isArray(value)) {
    o = isObject(output[key]) ? output[key] : output[key] = {};

    for (k in value) {
      if (recurse && (recurse === true || recurse[k])) {
        writeConfig(o, k, value[k]);
      } else if (isLegalKey(k)) {
        o[k] = value[k];
      }
    }
  } else {
    output[key] = value;
  }
}

function mergeNamed(a, b) {
  if (a == null) return b;
  var map = {},
      out = [];

  function add(_) {
    if (!map[_.name]) {
      map[_.name] = 1;
      out.push(_);
    }
  }

  b.forEach(add);
  a.forEach(add);
  return out;
}

function peek(array) {
  return array[array.length - 1];
}

function toNumber(_) {
  return _ == null || _ === '' ? null : +_;
}

var exp = function exp(sign) {
  return function (x) {
    return sign * Math.exp(x);
  };
};

var log = function log(sign) {
  return function (x) {
    return Math.log(sign * x);
  };
};

var symlog = function symlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
};

var symexp = function symexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
};

var pow = function pow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
};

function pan(domain, delta, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift(peek(domain)),
      dd = (d1 - d0) * delta;
  return [ground(d0 - dd), ground(d1 - dd)];
}

function panLinear(domain, delta) {
  return pan(domain, delta, toNumber, identity);
}

function panLog(domain, delta) {
  var sign = Math.sign(domain[0]);
  return pan(domain, delta, log(sign), exp(sign));
}

function panPow(domain, delta, exponent) {
  return pan(domain, delta, pow(exponent), pow(1 / exponent));
}

function panSymlog(domain, delta, constant) {
  return pan(domain, delta, symlog(constant), symexp(constant));
}

function zoom(domain, anchor, scale, lift, ground) {
  var d0 = lift(domain[0]),
      d1 = lift(peek(domain)),
      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
  return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];
}

function zoomLinear(domain, anchor, scale) {
  return zoom(domain, anchor, scale, toNumber, identity);
}

function zoomLog(domain, anchor, scale) {
  var sign = Math.sign(domain[0]);
  return zoom(domain, anchor, scale, log(sign), exp(sign));
}

function zoomPow(domain, anchor, scale, exponent) {
  return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
}

function zoomSymlog(domain, anchor, scale, constant) {
  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
}

function quarter(date) {
  return 1 + ~~(new Date(date).getMonth() / 3);
}

function utcquarter(date) {
  return 1 + ~~(new Date(date).getUTCMonth() / 3);
}

function array(_) {
  return _ != null ? isArray(_) ? _ : [_] : [];
}
/**
 * Span-preserving range clamp. If the span of the input range is less
 * than (max - min) and an endpoint exceeds either the min or max value,
 * the range is translated such that the span is preserved and one
 * endpoint touches the boundary of the min/max range.
 * If the span exceeds (max - min), the range [min, max] is returned.
 */


function clampRange(range, min, max) {
  var lo = range[0],
      hi = range[1],
      span;

  if (hi < lo) {
    span = hi;
    hi = lo;
    lo = span;
  }

  span = hi - lo;
  return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];
}

function isFunction(_) {
  return typeof _ === 'function';
}

var DESCENDING = 'descending';

function vega_util_module_compare(fields, orders, opt) {
  opt = opt || {};
  orders = array(orders) || [];
  var ord = [],
      get = [],
      fmap = {},
      gen = opt.comparator || comparator;
  array(fields).forEach(function (f, i) {
    if (f == null) return;
    ord.push(orders[i] === DESCENDING ? -1 : 1);
    get.push(f = isFunction(f) ? f : field(f, null, opt));
    (accessorFields(f) || []).forEach(function (_) {
      return fmap[_] = 1;
    });
  });
  return get.length === 0 ? null : accessor(gen(get, ord), Object.keys(fmap));
}

var ascending = function ascending(u, v) {
  return (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
};

var comparator = function comparator(fields, orders) {
  return fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);
};

var compare1 = function compare1(field, order) {
  return function (a, b) {
    return ascending(field(a), field(b)) * order;
  };
};

var compareN = function compareN(fields, orders, n) {
  orders.push(0); // pad zero for convenient lookup

  return function (a, b) {
    var f,
        c = 0,
        i = -1;

    while (c === 0 && ++i < n) {
      f = fields[i];
      c = ascending(f(a), f(b));
    }

    return c * orders[i];
  };
};

function vega_util_module_constant(_) {
  return isFunction(_) ? _ : function () {
    return _;
  };
}

function vega_util_module_debounce(delay, handler) {
  var tid;
  return function (e) {
    if (tid) clearTimeout(tid);
    tid = setTimeout(function () {
      return handler(e), tid = null;
    }, delay);
  };
}

function extend(_) {
  for (var x, k, i = 1, len = arguments.length; i < len; ++i) {
    x = arguments[i];

    for (k in x) {
      _[k] = x[k];
    }
  }

  return _;
}
/**
 * Return an array with minimum and maximum values, in the
 * form [min, max]. Ignores null, undefined, and NaN values.
 */


function extent(array, f) {
  var i = 0,
      n,
      v,
      min,
      max;

  if (array && (n = array.length)) {
    if (f == null) {
      // find first valid value
      for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]) {
        ;
      }

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = array[i]; // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    } else {
      // find first valid value
      for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i])) {
        ;
      }

      min = max = v; // visit all other values

      for (; i < n; ++i) {
        v = f(array[i]); // skip null/undefined; NaN will fail all comparisons

        if (v != null) {
          if (v < min) min = v;
          if (v > max) max = v;
        }
      }
    }
  }

  return [min, max];
}

function extentIndex(array, f) {
  var n = array.length;
  var i = -1,
      a,
      b,
      c,
      u,
      v;

  if (f == null) {
    while (++i < n) {
      b = array[i];

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    if (i === n) return [-1, -1];
    u = v = i;

    while (++i < n) {
      b = array[i];

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  } else {
    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null && b >= b) {
        a = c = b;
        break;
      }
    }

    if (i === n) return [-1, -1];
    u = v = i;

    while (++i < n) {
      b = f(array[i], i, array);

      if (b != null) {
        if (a > b) {
          a = b;
          u = i;
        }

        if (c < b) {
          c = b;
          v = i;
        }
      }
    }
  }

  return [u, v];
}

var hop = Object.prototype.hasOwnProperty;

function _has(object, property) {
  return hop.call(object, property);
}

var NULL = {};

function fastmap(input) {
  var obj = {},
      _test;

  function has$1(key) {
    return _has(obj, key) && obj[key] !== NULL;
  }

  var map = {
    size: 0,
    empty: 0,
    object: obj,
    has: has$1,
    get: function get(key) {
      return has$1(key) ? obj[key] : undefined;
    },
    set: function set(key, value) {
      if (!has$1(key)) {
        ++map.size;
        if (obj[key] === NULL) --map.empty;
      }

      obj[key] = value;
      return this;
    },
    delete: function _delete(key) {
      if (has$1(key)) {
        --map.size;
        ++map.empty;
        obj[key] = NULL;
      }

      return this;
    },
    clear: function clear() {
      map.size = map.empty = 0;
      map.object = obj = {};
    },
    test: function test(_) {
      if (arguments.length) {
        _test = _;
        return map;
      } else {
        return _test;
      }
    },
    clean: function clean() {
      var next = {};
      var size = 0;

      for (var _key3 in obj) {
        var value = obj[_key3];

        if (value !== NULL && (!_test || !_test(value))) {
          next[_key3] = value;
          ++size;
        }
      }

      map.size = size;
      map.empty = 0;
      map.object = obj = next;
    }
  };
  if (input) Object.keys(input).forEach(function (key) {
    map.set(key, input[key]);
  });
  return map;
}

function flush(range, value, threshold, left, right, center) {
  if (!threshold && threshold !== 0) return center;
  var t = +threshold;
  var a = range[0],
      b = peek(range),
      l; // swap endpoints if range is reversed

  if (b < a) {
    l = a;
    a = b;
    b = l;
  } // compare value to endpoints


  l = Math.abs(value - a);
  var r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint

  return l < r && l <= t ? left : r <= t ? right : center;
}

function vega_util_module_inherits(child, parent, members) {
  var proto = child.prototype = Object.create(parent.prototype);
  Object.defineProperty(proto, 'constructor', {
    value: child,
    writable: true,
    enumerable: true,
    configurable: true
  });
  return extend(proto, members);
}
/**
 * Predicate that returns true if the value lies within the span
 * of the given range. The left and right flags control the use
 * of inclusive (true) or exclusive (false) comparisons.
 */


function inrange(value, range, left, right) {
  var r0 = range[0],
      r1 = range[range.length - 1],
      t;

  if (r0 > r1) {
    t = r0;
    r0 = r1;
    r1 = t;
  }

  left = left === undefined || left;
  right = right === undefined || right;
  return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
}

function isBoolean(_) {
  return typeof _ === 'boolean';
}

function isDate(_) {
  return Object.prototype.toString.call(_) === '[object Date]';
}

function isIterable(_) {
  return _ && isFunction(_[Symbol.iterator]);
}

function isNumber(_) {
  return typeof _ === 'number';
}

function isRegExp(_) {
  return Object.prototype.toString.call(_) === '[object RegExp]';
}

function isString(_) {
  return typeof _ === 'string';
}

function key(fields, flat, opt) {
  if (fields) {
    fields = flat ? array(fields).map(function (f) {
      return f.replace(/\\(.)/g, '$1');
    }) : array(fields);
  }

  var len = fields && fields.length,
      gen = opt && opt.get || getter,
      map = function map(f) {
    return gen(flat ? [f] : splitAccessPath(f));
  };

  var fn;

  if (!len) {
    fn = function fn() {
      return '';
    };
  } else if (len === 1) {
    var get = map(fields[0]);

    fn = function fn(_) {
      return '' + get(_);
    };
  } else {
    var _get = fields.map(map);

    fn = function fn(_) {
      var s = '' + _get[0](_),
          i = 0;

      while (++i < len) {
        s += '|' + _get[i](_);
      }

      return s;
    };
  }

  return accessor(fn, fields, 'key');
}

function lerp(array, frac) {
  var lo = array[0],
      hi = peek(array),
      f = +frac;
  return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}

var DEFAULT_MAX_SIZE = 10000; // adapted from https://github.com/dominictarr/hashlru/ (MIT License)

function lruCache(maxsize) {
  maxsize = +maxsize || DEFAULT_MAX_SIZE;
  var curr, prev, size;

  var clear = function clear() {
    curr = {};
    prev = {};
    size = 0;
  };

  var update = function update(key, value) {
    if (++size > maxsize) {
      prev = curr;
      curr = {};
      size = 1;
    }

    return curr[key] = value;
  };

  clear();
  return {
    clear: clear,
    has: function has(key) {
      return _has(curr, key) || _has(prev, key);
    },
    get: function get(key) {
      return _has(curr, key) ? curr[key] : _has(prev, key) ? update(key, prev[key]) : undefined;
    },
    set: function set(key, value) {
      return _has(curr, key) ? curr[key] = value : update(key, value);
    }
  };
}

function merge(compare, array0, array1, output) {
  var n0 = array0.length,
      n1 = array1.length;
  if (!n1) return array0;
  if (!n0) return array1;
  var merged = output || new array0.constructor(n0 + n1);
  var i0 = 0,
      i1 = 0,
      i = 0;

  for (; i0 < n0 && i1 < n1; ++i) {
    merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
  }

  for (; i0 < n0; ++i0, ++i) {
    merged[i] = array0[i0];
  }

  for (; i1 < n1; ++i1, ++i) {
    merged[i] = array1[i1];
  }

  return merged;
}

function repeat(str, reps) {
  var s = '';

  while (--reps >= 0) {
    s += str;
  }

  return s;
}

function pad(str, length, padchar, align) {
  var c = padchar || ' ',
      s = str + '',
      n = length - s.length;
  return n <= 0 ? s : align === 'left' ? repeat(c, n) + s : align === 'center' ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);
}
/**
 * Return the numerical span of an array: the difference between
 * the last and first values.
 */


function span(array) {
  return array && peek(array) - array[0] || 0;
}

function $(x) {
  return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.
  // See http://timelessrepo.com/json-isnt-a-javascript-subset
  JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
}

function toBoolean(_) {
  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
}

var defaultParser = function defaultParser(_) {
  return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
};

function toDate(_, parser) {
  parser = parser || defaultParser;
  return _ == null || _ === '' ? null : parser(_);
}

function vega_util_module_toString(_) {
  return _ == null || _ === '' ? null : _ + '';
}

function toSet(_) {
  var s = {},
      n = _.length;

  for (var i = 0; i < n; ++i) {
    s[_[i]] = true;
  }

  return s;
}

function truncate(str, length, align, ellipsis) {
  var e = ellipsis != null ? ellipsis : "\u2026",
      s = str + '',
      n = s.length,
      l = Math.max(0, length - e.length);
  return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
}

function visitArray(array, filter, visitor) {
  if (array) {
    if (filter) {
      var n = array.length;

      for (var i = 0; i < n; ++i) {
        var t = filter(array[i]);
        if (t) visitor(t, i, array);
      }
    } else {
      array.forEach(visitor);
    }
  }
}


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(92137);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(87757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/loader.js


 // Matches absolute URLs with optional protocol
//   https://...    file://...    //...

var protocol_re = /^([A-Za-z]+:)?\/\//; // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://

var allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape

var whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g; // eslint-disable-line no-control-regex
// Special treatment in node.js for the file: protocol

var fileProtocol = 'file://';
/**
 * Factory for a loader constructor that provides methods for requesting
 * files from either the network or disk, and for sanitizing request URIs.
 * @param {function} fetch - The Fetch API for HTTP network requests.
 *   If null or undefined, HTTP loading will be disabled.
 * @param {object} fs - The file system interface for file loading.
 *   If null or undefined, local file loading will be disabled.
 * @return {function} A loader constructor with the following signature:
 *   param {object} [options] - Optional default loading options to use.
 *   return {object} - A new loader instance.
 */

/* harmony default export */ function loader(fetch, fs) {
  return function (options) {
    return {
      options: options || {},
      sanitize: sanitize,
      load: load,
      fileAccess: !!fs,
      file: fileLoader(fs),
      http: httpLoader(fetch)
    };
  };
}
/**
 * Load an external resource, typically either from the web or from the local
 * filesystem. This function uses {@link sanitize} to first sanitize the uri,
 * then calls either {@link http} (for web requests) or {@link file} (for
 * filesystem loading).
 * @param {string} uri - The resource indicator (e.g., URL or filename).
 * @param {object} [options] - Optional loading options. These options will
 *   override any existing default options.
 * @return {Promise} - A promise that resolves to the loaded content.
 */

function load(_x, _x2) {
  return _load.apply(this, arguments);
}
/**
 * URI sanitizer function.
 * @param {string} uri - The uri (url or filename) to sanity check.
 * @param {object} options - An options hash.
 * @return {Promise} - A promise that resolves to an object containing
 *  sanitized uri data, or rejects it the input uri is deemed invalid.
 *  The properties of the resolved object are assumed to be
 *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
 *  provided by the 'href' property of the returned object.
 */


function _load() {
  _load = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2(uri, options) {
    var opt, url;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.sanitize(uri, options);

          case 2:
            opt = _context2.sent;
            url = opt.href;
            return _context2.abrupt("return", opt.localFile ? this.file(url) : this.http(url, options));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _load.apply(this, arguments);
}

function sanitize(_x3, _x4) {
  return _sanitize.apply(this, arguments);
}
/**
 * File system loader factory.
 * @param {object} fs - The file system interface.
 * @return {function} - A file loader with the following signature:
 *   param {string} filename - The file system path to load.
 *   param {string} filename - The file system path to load.
 *   return {Promise} A promise that resolves to the file contents.
 */


function _sanitize() {
  _sanitize = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3(uri, options) {
    var fileAccess, result, isFile, loadFile, base, isAllowed, hasProtocol;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = extend({}, this.options, options);
            fileAccess = this.fileAccess, result = {
              href: null
            };
            isAllowed = allowed_re.test(uri.replace(whitespace_re, ''));

            if (uri == null || typeof uri !== 'string' || !isAllowed) {
              error('Sanitize failure, invalid URI: ' + $(uri));
            }

            hasProtocol = protocol_re.test(uri); // if relative url (no protocol/host), prepend baseURL

            if ((base = options.baseURL) && !hasProtocol) {
              // Ensure that there is a slash between the baseURL (e.g. hostname) and url
              if (!uri.startsWith('/') && base[base.length - 1] !== '/') {
                uri = '/' + uri;
              }

              uri = base + uri;
            } // should we load from file system?


            loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === 'file' || options.mode !== 'http' && !hasProtocol && fileAccess;

            if (isFile) {
              // strip file protocol
              uri = uri.slice(fileProtocol.length);
            } else if (uri.startsWith('//')) {
              if (options.defaultProtocol === 'file') {
                // if is file, strip protocol and set loadFile flag
                uri = uri.slice(2);
                loadFile = true;
              } else {
                // if relative protocol (starts with '//'), prepend default protocol
                uri = (options.defaultProtocol || 'http') + ':' + uri;
              }
            } // set non-enumerable mode flag to indicate local file load


            Object.defineProperty(result, 'localFile', {
              value: !!loadFile
            }); // set uri

            result.href = uri; // set default result target, if specified

            if (options.target) {
              result.target = options.target + '';
            } // set default result rel, if specified (#1542)


            if (options.rel) {
              result.rel = options.rel + '';
            } // provide control over cross-origin image handling (#2238)
            // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image


            if (options.context === 'image' && options.crossOrigin) {
              result.crossOrigin = options.crossOrigin + '';
            } // return


            return _context3.abrupt("return", result);

          case 14:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _sanitize.apply(this, arguments);
}

function fileLoader(fs) {
  return fs ? function (filename) {
    return new Promise(function (accept, reject) {
      fs.readFile(filename, function (error, data) {
        if (error) reject(error);else accept(data);
      });
    });
  } : fileReject;
}
/**
 * Default file system loader that simply rejects.
 */


function fileReject() {
  return _fileReject.apply(this, arguments);
}
/**
 * HTTP request handler factory.
 * @param {function} fetch - The Fetch API method.
 * @return {function} - An http loader with the following signature:
 *   param {string} url - The url to request.
 *   param {object} options - An options hash.
 *   return {Promise} - A promise that resolves to the file contents.
 */


function _fileReject() {
  _fileReject = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee4() {
    return regenerator_default().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            error('No file system access.');

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _fileReject.apply(this, arguments);
}

function httpLoader(fetch) {
  return fetch ? /*#__PURE__*/function () {
    var _ref = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee(url, options) {
      var opt, type, response;
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              opt = extend({}, this.options.http, options);
              type = options && options.response;
              _context.next = 4;
              return fetch(url, opt);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", !response.ok ? error(response.status + '' + response.statusText) : isFunction(response[type]) ? response[type]() : response.text());

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x5, _x6) {
      return _ref.apply(this, arguments);
    };
  }() : httpReject;
}
/**
 * Default http request handler that simply rejects.
 */


function httpReject() {
  return _httpReject.apply(this, arguments);
}

function _httpReject() {
  _httpReject = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee5() {
    return regenerator_default().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            error('No HTTP fetch method available.');

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _httpReject.apply(this, arguments);
}
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/type.js


var isValid = function isValid(_) {
  return _ != null && _ === _;
};

var type_isBoolean = function isBoolean(_) {
  return _ === 'true' || _ === 'false' || _ === true || _ === false;
};

var type_isDate = function isDate(_) {
  return !Number.isNaN(Date.parse(_));
};

var type_isNumber = function isNumber(_) {
  return !Number.isNaN(+_) && !(_ instanceof Date);
};

var type_isInteger = function isInteger(_) {
  return type_isNumber(_) && Number.isInteger(+_);
};

var typeParsers = {
  boolean: toBoolean,
  integer: toNumber,
  number: toNumber,
  date: toDate,
  string: vega_util_module_toString,
  unknown: identity
};
var typeTests = [type_isBoolean, type_isInteger, type_isNumber, type_isDate];
var typeList = ['boolean', 'integer', 'number', 'date'];
function inferType(values, field) {
  if (!values || !values.length) return 'unknown';
  var n = values.length,
      m = typeTests.length,
      a = typeTests.map(function (_, i) {
    return i + 1;
  });

  for (var i = 0, t = 0, j, value; i < n; ++i) {
    value = field ? values[i][field] : values[i];

    for (j = 0; j < m; ++j) {
      if (a[j] && isValid(value) && !typeTests[j](value)) {
        a[j] = 0;
        ++t;
        if (t === typeTests.length) return 'string';
      }
    }
  }

  return typeList[a.reduce(function (u, v) {
    return u === 0 ? v : u;
  }, 0) - 1];
}
function inferTypes(data, fields) {
  return fields.reduce(function (types, field) {
    types[field] = inferType(data, field);
    return types;
  }, {});
}
;// CONCATENATED MODULE: ./node_modules/d3-dsv/src/dsv.js
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "] || \"\"";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function dsv_pad(value, width) {
  var s = value + "",
      length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + dsv_pad(-year, 6) : year > 9999 ? "+" + dsv_pad(year, 6) : dsv_pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + dsv_pad(date.getUTCMonth() + 1, 2) + "-" + dsv_pad(date.getUTCDate(), 2) + (milliseconds ? "T" + dsv_pad(hours, 2) + ":" + dsv_pad(minutes, 2) + ":" + dsv_pad(seconds, 2) + "." + dsv_pad(milliseconds, 3) + "Z" : seconds ? "T" + dsv_pad(hours, 2) + ":" + dsv_pad(minutes, 2) + ":" + dsv_pad(seconds, 2) + "Z" : minutes || hours ? "T" + dsv_pad(hours, 2) + ":" + dsv_pad(minutes, 2) + "Z" : "");
}

/* harmony default export */ function dsv(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) {
          ;
        }

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) {
        row.push(t), t = token();
      }

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows,
    formatRow: formatRow,
    formatValue: formatValue
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/formats/dsv.js


function delimitedFormat(delimiter) {
  var parse = function parse(data, format) {
    var delim = {
      delimiter: delimiter
    };
    return dsv_dsv(data, format ? extend(format, delim) : delim);
  };

  parse.responseType = 'text';
  return parse;
}
function dsv_dsv(data, format) {
  if (format.header) {
    data = format.header.map($).join(format.delimiter) + '\n' + data;
  }

  return dsv(format.delimiter).parse(data + '');
}
dsv_dsv.responseType = 'text';
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules
var toConsumableArray = __webpack_require__(85061);
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/formats/json.js



function isBuffer(_) {
  return typeof Buffer === 'function' && isFunction(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
}

function json(data, format) {
  var prop = format && format.property ? field(format.property) : identity;
  return isObject(data) && !isBuffer(data) ? parseJSON(prop(data), format) : prop(JSON.parse(data));
}
json.responseType = 'json';

function parseJSON(data, format) {
  if (!isArray(data) && isIterable(data)) {
    data = (0,toConsumableArray/* default */.Z)(data);
  }

  return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/reverse.js
/* harmony default export */ function reverse(array, n) {
  var t,
      j = array.length,
      i = j - n;

  while (i < --j) {
    t = array[i], array[i++] = array[j], array[j] = t;
  }
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/identity.js
/* harmony default export */ function src_identity(x) {
  return x;
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/transform.js

/* harmony default export */ function transform(transform) {
  if (transform == null) return src_identity;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function (input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;

    while (j < n) {
      output[j] = input[j], ++j;
    }

    return output;
  };
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/feature.js


/* harmony default export */ function feature(topology, o) {
  if (typeof o === "string") o = topology.objects[o];
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function (o) {
      return feature_feature(topology, o);
    })
  } : feature_feature(topology, o);
}

function feature_feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {
    type: "Feature",
    properties: properties,
    geometry: geometry
  } : bbox == null ? {
    type: "Feature",
    id: id,
    properties: properties,
    geometry: geometry
  } : {
    type: "Feature",
    id: id,
    bbox: bbox,
    properties: properties,
    geometry: geometry
  };
}

function object(topology, o) {
  var transformPoint = transform(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();

    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }

    if (i < 0) reverse(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];

    for (var i = 0, n = arcs.length; i < n; ++i) {
      arc(arcs[i], points);
    }

    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

    return points;
  }

  function ring(arcs) {
    var points = line(arcs);

    while (points.length < 4) {
      points.push(points[0]);
    } // This may happen if an arc has only two points.


    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type,
        coordinates;

    switch (type) {
      case "GeometryCollection":
        return {
          type: type,
          geometries: o.geometries.map(geometry)
        };

      case "Point":
        coordinates = point(o.coordinates);
        break;

      case "MultiPoint":
        coordinates = o.coordinates.map(point);
        break;

      case "LineString":
        coordinates = line(o.arcs);
        break;

      case "MultiLineString":
        coordinates = o.arcs.map(line);
        break;

      case "Polygon":
        coordinates = polygon(o.arcs);
        break;

      case "MultiPolygon":
        coordinates = o.arcs.map(polygon);
        break;

      default:
        return null;
    }

    return {
      type: type,
      coordinates: coordinates
    };
  }

  return geometry(o);
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/stitch.js
/* harmony default export */ function stitch(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

  arcs.forEach(function (i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        t;

    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });
  arcs.forEach(function (i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f,
        g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;

      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;

      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i],
        p0 = arc[0],
        p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
      p1[0] += dp[0], p1[1] += dp[1];
    });else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function (i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function (i) {
    if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
  });
  return fragments;
}
;// CONCATENATED MODULE: ./node_modules/topojson-client/src/mesh.js


/* harmony default export */ function mesh(topology) {
  return object(topology, meshArcs.apply(this, arguments));
}
function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) {
    arcs[i] = i;
  }
  return {
    type: "MultiLineString",
    arcs: stitch(topology, arcs)
  };
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({
      i: i,
      g: geom
    });
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;

      case "LineString":
        extract1(o.arcs);
        break;

      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;

      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }

  geometry(object);
  geomsByArc.forEach(filter == null ? function (geoms) {
    arcs.push(geoms[0].i);
  } : function (geoms) {
    if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
  });
  return arcs;
}
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/formats/topojson.js



var filters = {
  interior: function interior(a, b) {
    return a !== b;
  },
  exterior: function exterior(a, b) {
    return a === b;
  }
};
function topojson(data, format) {
  var method, object, property, filter;
  data = json(data, format);

  if (format && format.feature) {
    method = feature;
    property = format.feature;
  } else if (format && format.mesh) {
    method = mesh;
    property = format.mesh;
    filter = filters[format.filter];
  } else {
    error('Missing TopoJSON feature or mesh parameter.');
  }

  object = (object = data.objects[property]) ? method(data, object, filter) : error('Invalid TopoJSON object: ' + property);
  return object && object.features || [object];
}
topojson.responseType = 'json';
;// CONCATENATED MODULE: ./node_modules/vega-loader/src/formats/index.js




var format = {
  dsv: dsv_dsv,
  csv: delimitedFormat(','),
  tsv: delimitedFormat('\t'),
  json: json,
  topojson: topojson
};
function formats(name, reader) {
  if (arguments.length > 1) {
    format[name] = reader;
    return this;
  } else {
    return _has(format, name) ? format[name] : null;
  }
}
function responseType(type) {
  var f = formats(type);
  return f && f.responseType || 'text';
}
;// CONCATENATED MODULE: ./node_modules/vega-format/node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);
/* harmony default export */ function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatSpecifier.js
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatDecimal.js
/* harmony default export */ function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
} // Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].

function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/exponent.js

/* harmony default export */ function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionPrefix.js

/* harmony default export */ function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionRound.js

/* harmony default export */ function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionFixed.js

/* harmony default export */ function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatGroup.js
/* harmony default export */ function formatGroup(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatNumerals.js
/* harmony default export */ function formatNumerals(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatTrim.js
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
/* harmony default export */ function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatPrefixAuto.js

var prefixExponent;
/* harmony default export */ function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatRounded.js

/* harmony default export */ function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/formatTypes.js



/* harmony default export */ var formatTypes = ({
  "%": function _(x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function b(x) {
    return Math.round(x).toString(2);
  },
  "c": function c(x) {
    return x + "";
  },
  "d": formatDecimal,
  "e": function e(x, p) {
    return x.toExponential(p);
  },
  "f": function f(x, p) {
    return x.toFixed(p);
  },
  "g": function g(x, p) {
    return x.toPrecision(p);
  },
  "o": function o(x) {
    return Math.round(x).toString(8);
  },
  "p": function p(x, _p) {
    return formatRounded(x * 100, _p);
  },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function X(x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function x(_x) {
    return Math.round(_x).toString(16);
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-format/src/identity.js
/* harmony default export */ function d3_format_src_identity(x) {
  return x;
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/locale.js








var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
/* harmony default export */ function locale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? d3_format_src_identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? d3_format_src_identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-format/src/defaultLocale.js

var defaultLocale_locale;
var defaultLocale_format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  defaultLocale_locale = locale(definition);
  defaultLocale_format = defaultLocale_locale.format;
  formatPrefix = defaultLocale_locale.formatPrefix;
  return defaultLocale_locale;
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
var defineProperty = __webpack_require__(96156);
;// CONCATENATED MODULE: ./node_modules/d3-time/src/interval.js
var t0 = new Date(),
    t1 = new Date();
function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do {
      range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    } while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) {
        date.setTime(date - 1);
      }
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
;// CONCATENATED MODULE: ./node_modules/d3-time/src/duration.js
var durationSecond = 1000;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/day.js


var day = newInterval(function (date) {
  return date.setHours(0, 0, 0, 0);
}, function (date, step) {
  return date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function (date) {
  return date.getDate() - 1;
});
/* harmony default export */ var src_day = (day);
var days = day.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/week.js



function weekday(i) {
  return newInterval(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcDay.js


var utcDay = newInterval(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
/* harmony default export */ var src_utcDay = (utcDay);
var utcDays = utcDay.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcWeek.js



function utcWeekday(i) {
  return newInterval(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/year.js

var year = newInterval(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

/* harmony default export */ var src_year = (year);
var years = year.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/month.js

var month = newInterval(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
/* harmony default export */ var src_month = (month);
var months = month.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/hour.js


var hour = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getHours();
});
/* harmony default export */ var src_hour = (hour);
var hours = hour.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/minute.js


var minute = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getMinutes();
});
/* harmony default export */ var src_minute = (minute);
var minutes = minute.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/second.js


var second = newInterval(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * durationSecond);
}, function (start, end) {
  return (end - start) / durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
/* harmony default export */ var src_second = (second);
var seconds = second.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/millisecond.js

var millisecond = newInterval(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

/* harmony default export */ var src_millisecond = (millisecond);
var milliseconds = millisecond.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcYear.js

var utcYear = newInterval(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

/* harmony default export */ var src_utcYear = (utcYear);
var utcYears = utcYear.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcMonth.js

var utcMonth = newInterval(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
/* harmony default export */ var src_utcMonth = (utcMonth);
var utcMonths = utcMonth.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcHour.js


var utcHour = newInterval(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getUTCHours();
});
/* harmony default export */ var src_utcHour = (utcHour);
var utcHours = utcHour.range;
;// CONCATENATED MODULE: ./node_modules/d3-time/src/utcMinute.js


var utcMinute = newInterval(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
/* harmony default export */ var src_utcMinute = (utcMinute);
var utcMinutes = utcMinute.range;
;// CONCATENATED MODULE: ./node_modules/vega-time/node_modules/d3-array/src/ascending.js
/* harmony default export */ function src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/vega-time/node_modules/d3-array/src/bisector.js

/* harmony default export */ function bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-time/node_modules/d3-array/src/ticks.js
var ticks_e10 = Math.sqrt(50),
    ticks_e5 = Math.sqrt(10),
    ticks_e2 = Math.sqrt(2);
/* harmony default export */ function src_ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = ticks_tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function ticks_tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= ticks_e10 ? 10 : error >= ticks_e5 ? 5 : error >= ticks_e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= ticks_e10 ? 10 : error >= ticks_e5 ? 5 : error >= ticks_e2 ? 2 : 1);
}
function ticks_tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= ticks_e10) step1 *= 10;else if (error >= ticks_e5) step1 *= 5;else if (error >= ticks_e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/vega-time/build/vega-time.module.js


var _defaultSpecifiers, _localGet, _localInv, _utcGet, _utcInv, _timeIntervals, _utcIntervals;




var YEAR = 'year';
var QUARTER = 'quarter';
var MONTH = 'month';
var WEEK = 'week';
var DATE = 'date';
var DAY = 'day';
var DAYOFYEAR = 'dayofyear';
var HOURS = 'hours';
var MINUTES = 'minutes';
var SECONDS = 'seconds';
var MILLISECONDS = 'milliseconds';
var TIME_UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, DAYOFYEAR, HOURS, MINUTES, SECONDS, MILLISECONDS];
var UNITS = TIME_UNITS.reduce(function (o, u, i) {
  return o[u] = 1 + i, o;
}, {});

function timeUnits(units) {
  var u = array(units).slice(),
      m = {}; // check validity

  if (!u.length) error('Missing time unit.');
  u.forEach(function (unit) {
    if (_has(UNITS, unit)) {
      m[unit] = 1;
    } else {
      error("Invalid time unit: ".concat(unit, "."));
    }
  });
  var numTypes = (m[WEEK] || m[DAY] ? 1 : 0) + (m[QUARTER] || m[MONTH] || m[DATE] ? 1 : 0) + (m[DAYOFYEAR] ? 1 : 0);

  if (numTypes > 1) {
    error("Incompatible time units: ".concat(units));
  } // ensure proper sort order


  u.sort(function (a, b) {
    return UNITS[a] - UNITS[b];
  });
  return u;
}

var defaultSpecifiers = (_defaultSpecifiers = {}, (0,defineProperty/* default */.Z)(_defaultSpecifiers, YEAR, '%Y '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, QUARTER, 'Q%q '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, MONTH, '%b '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, DATE, '%d '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, WEEK, 'W%U '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, DAY, '%a '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, DAYOFYEAR, '%j '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, HOURS, '%H:00'), (0,defineProperty/* default */.Z)(_defaultSpecifiers, MINUTES, '00:%M'), (0,defineProperty/* default */.Z)(_defaultSpecifiers, SECONDS, ':%S'), (0,defineProperty/* default */.Z)(_defaultSpecifiers, MILLISECONDS, '.%L'), (0,defineProperty/* default */.Z)(_defaultSpecifiers, "".concat(YEAR, "-").concat(MONTH), '%Y-%m '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, "".concat(YEAR, "-").concat(MONTH, "-").concat(DATE), '%Y-%m-%d '), (0,defineProperty/* default */.Z)(_defaultSpecifiers, "".concat(HOURS, "-").concat(MINUTES), '%H:%M'), _defaultSpecifiers);

function timeUnitSpecifier(units, specifiers) {
  var s = extend({}, defaultSpecifiers, specifiers),
      u = timeUnits(units),
      n = u.length;
  var fmt = '',
      start = 0,
      end,
      key;

  for (start = 0; start < n;) {
    for (end = u.length; end > start; --end) {
      key = u.slice(start, end).join('-');

      if (s[key] != null) {
        fmt += s[key];
        start = end;
        break;
      }
    }
  }

  return fmt.trim();
}

var vega_time_module_t0 = new Date();

function localYear(y) {
  vega_time_module_t0.setFullYear(y);
  vega_time_module_t0.setMonth(0);
  vega_time_module_t0.setDate(1);
  vega_time_module_t0.setHours(0, 0, 0, 0);
  return vega_time_module_t0;
}

function dayofyear(d) {
  return localDayOfYear(new Date(d));
}

function week(d) {
  return localWeekNum(new Date(d));
}

function localDayOfYear(d) {
  return src_day.count(localYear(d.getFullYear()) - 1, d);
}

function localWeekNum(d) {
  return sunday.count(localYear(d.getFullYear()) - 1, d);
}

function localFirst(y) {
  return localYear(y).getDay();
}

function localDate(y, m, d, H, M, S, L) {
  if (0 <= y && y < 100) {
    var date = new Date(-1, m, d, H, M, S, L);
    date.setFullYear(y);
    return date;
  }

  return new Date(y, m, d, H, M, S, L);
}

function utcdayofyear(d) {
  return utcDayOfYear(new Date(d));
}

function utcweek(d) {
  return utcWeekNum(new Date(d));
}

function utcDayOfYear(d) {
  var y = Date.UTC(d.getUTCFullYear(), 0, 1);
  return src_utcDay.count(y - 1, d);
}

function utcWeekNum(d) {
  var y = Date.UTC(d.getUTCFullYear(), 0, 1);
  return utcSunday.count(y - 1, d);
}

function utcFirst(y) {
  vega_time_module_t0.setTime(Date.UTC(y, 0, 1));
  return vega_time_module_t0.getUTCDay();
}

function utcDate(y, m, d, H, M, S, L) {
  if (0 <= y && y < 100) {
    var date = new Date(Date.UTC(-1, m, d, H, M, S, L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(y, m, d, H, M, S, L));
}

function floor(units, step, get, inv, newDate) {
  var s = step || 1,
      b = peek(units),
      _ = function _(unit, p, key) {
    key = key || unit;
    return getUnit(get[key], inv[key], unit === b && s, p);
  };

  var t = new Date(),
      u = toSet(units),
      y = u[YEAR] ? _(YEAR) : vega_util_module_constant(2012),
      m = u[MONTH] ? _(MONTH) : u[QUARTER] ? _(QUARTER) : zero,
      d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY) : u[WEEK] ? _(WEEK, 1) : u[DAY] ? _(DAY, 1) : u[DATE] ? _(DATE, 1) : u[DAYOFYEAR] ? _(DAYOFYEAR, 1) : one,
      H = u[HOURS] ? _(HOURS) : zero,
      M = u[MINUTES] ? _(MINUTES) : zero,
      S = u[SECONDS] ? _(SECONDS) : zero,
      L = u[MILLISECONDS] ? _(MILLISECONDS) : zero;
  return function (v) {
    t.setTime(+v);
    var year = y(t);
    return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));
  };
}

function getUnit(f, inv, step, phase) {
  var u = step <= 1 ? f : phase ? function (d, y) {
    return phase + step * Math.floor((f(d, y) - phase) / step);
  } : function (d, y) {
    return step * Math.floor(f(d, y) / step);
  };
  return inv ? function (d, y) {
    return inv(u(d, y), y);
  } : u;
} // returns the day of the year based on week number, day of week,
// and the day of the week for the first day of the year


function vega_time_module_weekday(week, day, firstDay) {
  return day + week * 7 - (firstDay + 6) % 7;
} // -- LOCAL TIME --


var localGet = (_localGet = {}, (0,defineProperty/* default */.Z)(_localGet, YEAR, function (d) {
  return d.getFullYear();
}), (0,defineProperty/* default */.Z)(_localGet, QUARTER, function (d) {
  return Math.floor(d.getMonth() / 3);
}), (0,defineProperty/* default */.Z)(_localGet, MONTH, function (d) {
  return d.getMonth();
}), (0,defineProperty/* default */.Z)(_localGet, DATE, function (d) {
  return d.getDate();
}), (0,defineProperty/* default */.Z)(_localGet, HOURS, function (d) {
  return d.getHours();
}), (0,defineProperty/* default */.Z)(_localGet, MINUTES, function (d) {
  return d.getMinutes();
}), (0,defineProperty/* default */.Z)(_localGet, SECONDS, function (d) {
  return d.getSeconds();
}), (0,defineProperty/* default */.Z)(_localGet, MILLISECONDS, function (d) {
  return d.getMilliseconds();
}), (0,defineProperty/* default */.Z)(_localGet, DAYOFYEAR, function (d) {
  return localDayOfYear(d);
}), (0,defineProperty/* default */.Z)(_localGet, WEEK, function (d) {
  return localWeekNum(d);
}), (0,defineProperty/* default */.Z)(_localGet, WEEK + DAY, function (d, y) {
  return vega_time_module_weekday(localWeekNum(d), d.getDay(), localFirst(y));
}), (0,defineProperty/* default */.Z)(_localGet, DAY, function (d, y) {
  return vega_time_module_weekday(1, d.getDay(), localFirst(y));
}), _localGet);
var localInv = (_localInv = {}, (0,defineProperty/* default */.Z)(_localInv, QUARTER, function (q) {
  return 3 * q;
}), (0,defineProperty/* default */.Z)(_localInv, WEEK, function (w, y) {
  return vega_time_module_weekday(w, 0, localFirst(y));
}), _localInv);

function timeFloor(units, step) {
  return floor(units, step || 1, localGet, localInv, localDate);
} // -- UTC TIME --


var utcGet = (_utcGet = {}, (0,defineProperty/* default */.Z)(_utcGet, YEAR, function (d) {
  return d.getUTCFullYear();
}), (0,defineProperty/* default */.Z)(_utcGet, QUARTER, function (d) {
  return Math.floor(d.getUTCMonth() / 3);
}), (0,defineProperty/* default */.Z)(_utcGet, MONTH, function (d) {
  return d.getUTCMonth();
}), (0,defineProperty/* default */.Z)(_utcGet, DATE, function (d) {
  return d.getUTCDate();
}), (0,defineProperty/* default */.Z)(_utcGet, HOURS, function (d) {
  return d.getUTCHours();
}), (0,defineProperty/* default */.Z)(_utcGet, MINUTES, function (d) {
  return d.getUTCMinutes();
}), (0,defineProperty/* default */.Z)(_utcGet, SECONDS, function (d) {
  return d.getUTCSeconds();
}), (0,defineProperty/* default */.Z)(_utcGet, MILLISECONDS, function (d) {
  return d.getUTCMilliseconds();
}), (0,defineProperty/* default */.Z)(_utcGet, DAYOFYEAR, function (d) {
  return utcDayOfYear(d);
}), (0,defineProperty/* default */.Z)(_utcGet, WEEK, function (d) {
  return utcWeekNum(d);
}), (0,defineProperty/* default */.Z)(_utcGet, DAY, function (d, y) {
  return vega_time_module_weekday(1, d.getUTCDay(), utcFirst(y));
}), (0,defineProperty/* default */.Z)(_utcGet, WEEK + DAY, function (d, y) {
  return vega_time_module_weekday(utcWeekNum(d), d.getUTCDay(), utcFirst(y));
}), _utcGet);
var utcInv = (_utcInv = {}, (0,defineProperty/* default */.Z)(_utcInv, QUARTER, function (q) {
  return 3 * q;
}), (0,defineProperty/* default */.Z)(_utcInv, WEEK, function (w, y) {
  return vega_time_module_weekday(w, 0, utcFirst(y));
}), _utcInv);

function utcFloor(units, step) {
  return floor(units, step || 1, utcGet, utcInv, utcDate);
}

var timeIntervals = (_timeIntervals = {}, (0,defineProperty/* default */.Z)(_timeIntervals, YEAR, src_year), (0,defineProperty/* default */.Z)(_timeIntervals, QUARTER, src_month.every(3)), (0,defineProperty/* default */.Z)(_timeIntervals, MONTH, src_month), (0,defineProperty/* default */.Z)(_timeIntervals, WEEK, sunday), (0,defineProperty/* default */.Z)(_timeIntervals, DATE, src_day), (0,defineProperty/* default */.Z)(_timeIntervals, DAY, src_day), (0,defineProperty/* default */.Z)(_timeIntervals, DAYOFYEAR, src_day), (0,defineProperty/* default */.Z)(_timeIntervals, HOURS, src_hour), (0,defineProperty/* default */.Z)(_timeIntervals, MINUTES, src_minute), (0,defineProperty/* default */.Z)(_timeIntervals, SECONDS, src_second), (0,defineProperty/* default */.Z)(_timeIntervals, MILLISECONDS, src_millisecond), _timeIntervals);
var utcIntervals = (_utcIntervals = {}, (0,defineProperty/* default */.Z)(_utcIntervals, YEAR, src_utcYear), (0,defineProperty/* default */.Z)(_utcIntervals, QUARTER, src_utcMonth.every(3)), (0,defineProperty/* default */.Z)(_utcIntervals, MONTH, src_utcMonth), (0,defineProperty/* default */.Z)(_utcIntervals, WEEK, utcSunday), (0,defineProperty/* default */.Z)(_utcIntervals, DATE, src_utcDay), (0,defineProperty/* default */.Z)(_utcIntervals, DAY, src_utcDay), (0,defineProperty/* default */.Z)(_utcIntervals, DAYOFYEAR, src_utcDay), (0,defineProperty/* default */.Z)(_utcIntervals, HOURS, src_utcHour), (0,defineProperty/* default */.Z)(_utcIntervals, MINUTES, src_utcMinute), (0,defineProperty/* default */.Z)(_utcIntervals, SECONDS, src_second), (0,defineProperty/* default */.Z)(_utcIntervals, MILLISECONDS, src_millisecond), _utcIntervals);

function timeInterval(unit) {
  return timeIntervals[unit];
}

function utcInterval(unit) {
  return utcIntervals[unit];
}

function offset(ival, date, step) {
  return ival ? ival.offset(date, step) : undefined;
}

function timeOffset(unit, date, step) {
  return offset(timeInterval(unit), date, step);
}

function utcOffset(unit, date, step) {
  return offset(utcInterval(unit), date, step);
}

function sequence(ival, start, stop, step) {
  return ival ? ival.range(start, stop, step) : undefined;
}

function timeSequence(unit, start, stop, step) {
  return sequence(timeInterval(unit), start, stop, step);
}

function utcSequence(unit, start, stop, step) {
  return sequence(utcInterval(unit), start, stop, step);
}

var vega_time_module_durationSecond = 1000,
    vega_time_module_durationMinute = vega_time_module_durationSecond * 60,
    vega_time_module_durationHour = vega_time_module_durationMinute * 60,
    vega_time_module_durationDay = vega_time_module_durationHour * 24,
    vega_time_module_durationWeek = vega_time_module_durationDay * 7,
    vega_time_module_durationMonth = vega_time_module_durationDay * 30,
    vega_time_module_durationYear = vega_time_module_durationDay * 365;
var Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],
    Seconds = Milli.slice(0, -1),
    Minutes = Seconds.slice(0, -1),
    Hours = Minutes.slice(0, -1),
    Day = Hours.slice(0, -1),
    Week = [YEAR, WEEK],
    Month = [YEAR, MONTH],
    Year = [YEAR];
var intervals = [[Seconds, 1, vega_time_module_durationSecond], [Seconds, 5, 5 * vega_time_module_durationSecond], [Seconds, 15, 15 * vega_time_module_durationSecond], [Seconds, 30, 30 * vega_time_module_durationSecond], [Minutes, 1, vega_time_module_durationMinute], [Minutes, 5, 5 * vega_time_module_durationMinute], [Minutes, 15, 15 * vega_time_module_durationMinute], [Minutes, 30, 30 * vega_time_module_durationMinute], [Hours, 1, vega_time_module_durationHour], [Hours, 3, 3 * vega_time_module_durationHour], [Hours, 6, 6 * vega_time_module_durationHour], [Hours, 12, 12 * vega_time_module_durationHour], [Day, 1, vega_time_module_durationDay], [Week, 1, vega_time_module_durationWeek], [Month, 1, vega_time_module_durationMonth], [Month, 3, 3 * vega_time_module_durationMonth], [Year, 1, vega_time_module_durationYear]];

function bin(opt) {
  var ext = opt.extent,
      max = opt.maxbins || 40,
      target = Math.abs(span(ext)) / max;
  var i = bisector(function (i) {
    return i[2];
  }).right(intervals, target),
      units,
      step;

  if (i === intervals.length) {
    units = Year, step = ticks_tickStep(ext[0] / vega_time_module_durationYear, ext[1] / vega_time_module_durationYear, max);
  } else if (i) {
    i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];
    units = i[0];
    step = i[1];
  } else {
    units = Milli;
    step = Math.max(ticks_tickStep(ext[0], ext[1], max), 1);
  }

  return {
    units: units,
    step: step
  };
}


;// CONCATENATED MODULE: ./node_modules/d3-time-format/src/locale.js


function locale_localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function locale_utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": locale_formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = locale_utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = src_utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = locale_localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? monday.ceil(week) : monday(week);
          week = src_day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? locale_utcDate(newDate(d.y, 0, 1)).getUTCDay() : locale_localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return locale_utcDate(d);
      } // Otherwise, all fields are in local time.


      return locale_localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function format(specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function parse(specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function utcFormat(specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function utcParse(specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}
var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function locale_pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  return new Map(names.map(function (name, i) {
    return [name.toLowerCase(), i];
  }));
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return locale_pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return locale_pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return locale_pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return locale_pad(1 + src_day.count(src_year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return locale_pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return locale_pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return locale_pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return locale_pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return locale_pad(sunday.count(src_year(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return locale_pad(thursday.count(src_year(d), d) + (src_year(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return locale_pad(monday.count(src_year(d) - 1, d), p, 2);
}

function locale_formatYear(d, p) {
  return locale_pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return locale_pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return locale_pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
  return locale_pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + locale_pad(z / 60 | 0, "0", 2) + locale_pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return locale_pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return locale_pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return locale_pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return locale_pad(1 + src_utcDay.count(src_utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return locale_pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return locale_pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return locale_pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return locale_pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return locale_pad(utcSunday.count(src_utcYear(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return locale_pad(utcThursday.count(src_utcYear(d), d) + (src_utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return locale_pad(utcMonday.count(src_utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return locale_pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return locale_pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return locale_pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return locale_pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
;// CONCATENATED MODULE: ./node_modules/d3-time-format/src/defaultLocale.js

var src_defaultLocale_locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale_defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale_defaultLocale(definition) {
  src_defaultLocale_locale = formatLocale(definition);
  timeFormat = src_defaultLocale_locale.format;
  timeParse = src_defaultLocale_locale.parse;
  utcFormat = src_defaultLocale_locale.utcFormat;
  utcParse = src_defaultLocale_locale.utcParse;
  return src_defaultLocale_locale;
}
;// CONCATENATED MODULE: ./node_modules/vega-format/build/vega-format.module.js






function memoize(method) {
  var cache = {};
  return function (spec) {
    return cache[spec] || (cache[spec] = method(spec));
  };
}

function trimZeroes(numberFormat, decimalChar) {
  return function (x) {
    var str = numberFormat(x),
        dec = str.indexOf(decimalChar);
    if (dec < 0) return str;
    var idx = rightmostDigit(str, dec);
    var end = idx < str.length ? str.slice(idx) : '';

    while (--idx > dec) {
      if (str[idx] !== '0') {
        ++idx;
        break;
      }
    }

    return str.slice(0, idx) + end;
  };
}

function rightmostDigit(str, dec) {
  var i = str.lastIndexOf('e'),
      c;
  if (i > 0) return i;

  for (i = str.length; --i > dec;) {
    c = str.charCodeAt(i);
    if (c >= 48 && c <= 57) return i + 1; // is digit
  }
}

function numberLocale(locale) {
  var format = memoize(locale.format),
      formatPrefix = locale.formatPrefix;
  return {
    format: format,
    formatPrefix: formatPrefix,
    formatFloat: function formatFloat(spec) {
      var s = formatSpecifier(spec || ',');

      if (s.precision == null) {
        s.precision = 12;

        switch (s.type) {
          case '%':
            s.precision -= 2;
            break;

          case 'e':
            s.precision -= 1;
            break;
        }

        return trimZeroes(format(s), // number format
        format('.1f')(1)[1] // decimal point character
        );
      } else {
        return format(s);
      }
    },
    formatSpan: function formatSpan(start, stop, count, specifier) {
      specifier = formatSpecifier(specifier == null ? ',f' : specifier);
      var step = tickStep(start, stop, count),
          value = Math.max(Math.abs(start), Math.abs(stop));
      var precision;

      if (specifier.precision == null) {
        switch (specifier.type) {
          case 's':
            {
              if (!isNaN(precision = precisionPrefix(step, value))) {
                specifier.precision = precision;
              }

              return formatPrefix(specifier, value);
            }

          case '':
          case 'e':
          case 'g':
          case 'p':
          case 'r':
            {
              if (!isNaN(precision = precisionRound(step, value))) {
                specifier.precision = precision - (specifier.type === 'e');
              }

              break;
            }

          case 'f':
          case '%':
            {
              if (!isNaN(precision = precisionFixed(step))) {
                specifier.precision = precision - (specifier.type === '%') * 2;
              }

              break;
            }
        }
      }

      return format(specifier);
    }
  };
}

var defaultNumberLocale;
resetNumberFormatDefaultLocale();

function resetNumberFormatDefaultLocale() {
  return defaultNumberLocale = numberLocale({
    format: defaultLocale_format,
    formatPrefix: formatPrefix
  });
}

function numberFormatLocale(definition) {
  return numberLocale(locale(definition));
}

function numberFormatDefaultLocale(definition) {
  return arguments.length ? defaultNumberLocale = numberFormatLocale(definition) : defaultNumberLocale;
}

function timeMultiFormat(format, interval, spec) {
  spec = spec || {};

  if (!isObject(spec)) {
    error("Invalid time multi-format specifier: ".concat(spec));
  }

  var second = interval(SECONDS),
      minute = interval(MINUTES),
      hour = interval(HOURS),
      day = interval(DATE),
      week = interval(WEEK),
      month = interval(MONTH),
      quarter = interval(QUARTER),
      year = interval(YEAR),
      L = format(spec[MILLISECONDS] || '.%L'),
      S = format(spec[SECONDS] || ':%S'),
      M = format(spec[MINUTES] || '%I:%M'),
      H = format(spec[HOURS] || '%I %p'),
      d = format(spec[DATE] || spec[DAY] || '%a %d'),
      w = format(spec[WEEK] || '%b %d'),
      m = format(spec[MONTH] || '%B'),
      q = format(spec[QUARTER] || '%B'),
      y = format(spec[YEAR] || '%Y');
  return function (date) {
    return (second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);
  };
}

function timeLocale(locale) {
  var _timeFormat = memoize(locale.format),
      _utcFormat = memoize(locale.utcFormat);

  return {
    timeFormat: function timeFormat(spec) {
      return isString(spec) ? _timeFormat(spec) : timeMultiFormat(_timeFormat, timeInterval, spec);
    },
    utcFormat: function utcFormat(spec) {
      return isString(spec) ? _utcFormat(spec) : timeMultiFormat(_utcFormat, utcInterval, spec);
    },
    timeParse: memoize(locale.parse),
    utcParse: memoize(locale.utcParse)
  };
}

var defaultTimeLocale;
resetTimeFormatDefaultLocale();

function resetTimeFormatDefaultLocale() {
  return defaultTimeLocale = timeLocale({
    format: timeFormat,
    parse: timeParse,
    utcFormat: utcFormat,
    utcParse: utcParse
  });
}

function timeFormatLocale(definition) {
  return timeLocale(formatLocale(definition));
}

function timeFormatDefaultLocale(definition) {
  return arguments.length ? defaultTimeLocale = timeFormatLocale(definition) : defaultTimeLocale;
}

var createLocale = function createLocale(number, time) {
  return extend({}, number, time);
};

function vega_format_module_locale(numberSpec, timeSpec) {
  var number = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();
  var time = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();
  return createLocale(number, time);
}

function vega_format_module_defaultLocale(numberSpec, timeSpec) {
  var args = arguments.length;

  if (args && args !== 2) {
    error('defaultLocale expects either zero or two arguments.');
  }

  return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());
}

function resetDefaultLocale() {
  resetNumberFormatDefaultLocale();
  resetTimeFormatDefaultLocale();
  return vega_format_module_defaultLocale();
}


;// CONCATENATED MODULE: ./node_modules/vega-loader/src/read.js




/* harmony default export */ function read(data, schema, timeParser, utcParser) {
  schema = schema || {};
  var reader = formats(schema.type || 'json');
  if (!reader) error('Unknown data format type: ' + schema.type);
  data = reader(data, schema);
  if (schema.parse) parse(data, schema.parse, timeParser, utcParser);
  if (_has(data, 'columns')) delete data.columns;
  return data;
}

function parse(data, types, timeParser, utcParser) {
  if (!data.length) return; // early exit for empty data

  var locale = timeFormatDefaultLocale();
  timeParser = timeParser || locale.timeParse;
  utcParser = utcParser || locale.utcParse;
  var fields = data.columns || Object.keys(data[0]),
      datum,
      field,
      i,
      j,
      n,
      m;
  if (types === 'auto') types = inferTypes(data, fields);
  fields = Object.keys(types);
  var parsers = fields.map(function (field) {
    var type = types[field];
    var parts, pattern;

    if (type && (type.startsWith('date:') || type.startsWith('utc:'))) {
      parts = type.split(/:(.+)?/, 2); // split on first :

      pattern = parts[1];

      if (pattern[0] === '\'' && pattern[pattern.length - 1] === '\'' || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
        pattern = pattern.slice(1, -1);
      }

      var _parse = parts[0] === 'utc' ? utcParser : timeParser;

      return _parse(pattern);
    }

    if (!typeParsers[type]) {
      throw Error('Illegal format pattern: ' + field + ':' + type);
    }

    return typeParsers[type];
  });

  for (i = 0, n = data.length, m = fields.length; i < n; ++i) {
    datum = data[i];

    for (j = 0; j < m; ++j) {
      field = fields[j];
      datum[field] = parsers[j](datum[field]);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-loader/index.browser.js

var index_browser_loader = loader(typeof fetch !== 'undefined' && fetch, // use built-in fetch API
null // no file system access
);



;// CONCATENATED MODULE: ./node_modules/vega-dataflow/build/vega-dataflow.module.js






function UniqueList(idFunc) {
  var $ = idFunc || identity,
      list = [],
      ids = {};

  list.add = function (_) {
    var id = $(_);

    if (!ids[id]) {
      ids[id] = 1;
      list.push(_);
    }

    return list;
  };

  list.remove = function (_) {
    var id = $(_);

    if (ids[id]) {
      ids[id] = 0;
      var idx = list.indexOf(_);
      if (idx >= 0) list.splice(idx, 1);
    }

    return list;
  };

  return list;
}
/**
 * Invoke and await a potentially async callback function. If
 * an error occurs, trap it and route to Dataflow.error.
 * @param {Dataflow} df - The dataflow instance
 * @param {function} callback - A callback function to invoke
 *   and then await. The dataflow will be passed as the single
 *   argument to the function.
 */


function asyncCallback(_x, _x2) {
  return _asyncCallback.apply(this, arguments);
}

function _asyncCallback() {
  _asyncCallback = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee(df, callback) {
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return callback(df);

          case 3:
            _context.next = 8;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](0);
            df.error(_context.t0);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 5]]);
  }));
  return _asyncCallback.apply(this, arguments);
}

var TUPLE_ID_KEY = Symbol('vega_id');
var TUPLE_ID = 1;
/**
 * Checks if an input value is a registered tuple.
 * @param {*} t - The value to check.
 * @return {boolean} True if the input is a tuple, false otherwise.
 */

function isTuple(t) {
  return !!(t && tupleid(t));
}
/**
 * Returns the id of a tuple.
 * @param {object} t - The input tuple.
 * @return {*} the tuple id.
 */


function tupleid(t) {
  return t[TUPLE_ID_KEY];
}
/**
 * Sets the id of a tuple.
 * @param {object} t - The input tuple.
 * @param {*} id - The id value to set.
 * @return {object} the input tuple.
 */


function setid(t, id) {
  t[TUPLE_ID_KEY] = id;
  return t;
}
/**
 * Ingest an object or value as a data tuple.
 * If the input value is an object, an id field will be added to it. For
 * efficiency, the input object is modified directly. A copy is not made.
 * If the input value is a literal, it will be wrapped in a new object
 * instance, with the value accessible as the 'data' property.
 * @param datum - The value to ingest.
 * @return {object} The ingested data tuple.
 */


function ingest$1(datum) {
  var t = datum === Object(datum) ? datum : {
    data: datum
  };
  return tupleid(t) ? t : setid(t, TUPLE_ID++);
}
/**
 * Given a source tuple, return a derived copy.
 * @param {object} t - The source tuple.
 * @return {object} The derived tuple.
 */


function derive(t) {
  return rederive(t, ingest$1({}));
}
/**
 * Rederive a derived tuple by copying values from the source tuple.
 * @param {object} t - The source tuple.
 * @param {object} d - The derived tuple.
 * @return {object} The derived tuple.
 */


function rederive(t, d) {
  for (var k in t) {
    d[k] = t[k];
  }

  return d;
}
/**
 * Replace an existing tuple with a new tuple.
 * @param {object} t - The existing data tuple.
 * @param {object} d - The new tuple that replaces the old.
 * @return {object} The new tuple.
 */


function replace(t, d) {
  return setid(d, tupleid(t));
}
/**
 * Generate an augmented comparator function that provides stable
 * sorting by tuple id when the given comparator produces ties.
 * @param {function} cmp - The comparator to augment.
 * @param {function} [f] - Optional tuple accessor function.
 * @return {function} An augmented comparator function.
 */


function stableCompare(cmp, f) {
  return !cmp ? null : f ? function (a, b) {
    return cmp(a, b) || tupleid(f(a)) - tupleid(f(b));
  } : function (a, b) {
    return cmp(a, b) || tupleid(a) - tupleid(b);
  };
}

function isChangeSet(v) {
  return v && v.constructor === changeset;
}

function changeset() {
  var add = [],
      // insert tuples
  rem = [],
      // remove tuples
  mod = [],
      // modify tuples
  remp = [],
      // remove by predicate
  modp = []; // modify by predicate

  var _clean = null,
      _reflow = false;
  return {
    constructor: changeset,
    insert: function insert(t) {
      var d = array(t),
          n = d.length;

      for (var i = 0; i < n; ++i) {
        add.push(d[i]);
      }

      return this;
    },
    remove: function remove(t) {
      var a = isFunction(t) ? remp : rem,
          d = array(t),
          n = d.length;

      for (var i = 0; i < n; ++i) {
        a.push(d[i]);
      }

      return this;
    },
    modify: function modify(t, field, value) {
      var m = {
        field: field,
        value: vega_util_module_constant(value)
      };

      if (isFunction(t)) {
        m.filter = t;
        modp.push(m);
      } else {
        m.tuple = t;
        mod.push(m);
      }

      return this;
    },
    encode: function encode(t, set) {
      if (isFunction(t)) modp.push({
        filter: t,
        field: set
      });else mod.push({
        tuple: t,
        field: set
      });
      return this;
    },
    clean: function clean(value) {
      _clean = value;
      return this;
    },
    reflow: function reflow() {
      _reflow = true;
      return this;
    },
    pulse: function pulse(_pulse, tuples) {
      var cur = {},
          out = {};
      var i, n, m, f, t, id; // build lookup table of current tuples

      for (i = 0, n = tuples.length; i < n; ++i) {
        cur[tupleid(tuples[i])] = 1;
      } // process individual tuples to remove


      for (i = 0, n = rem.length; i < n; ++i) {
        t = rem[i];
        cur[tupleid(t)] = -1;
      } // process predicate-based removals


      for (i = 0, n = remp.length; i < n; ++i) {
        f = remp[i];
        tuples.forEach(function (t) {
          if (f(t)) cur[tupleid(t)] = -1;
        });
      } // process all add tuples


      for (i = 0, n = add.length; i < n; ++i) {
        t = add[i];
        id = tupleid(t);

        if (cur[id]) {
          // tuple already resides in dataset
          // if flagged for both add and remove, cancel
          cur[id] = 1;
        } else {
          // tuple does not reside in dataset, add
          _pulse.add.push(ingest$1(add[i]));
        }
      } // populate pulse rem list


      for (i = 0, n = tuples.length; i < n; ++i) {
        t = tuples[i];
        if (cur[tupleid(t)] < 0) _pulse.rem.push(t);
      } // modify helper method


      function modify(t, f, v) {
        if (v) {
          t[f] = v(t);
        } else {
          _pulse.encode = f;
        }

        if (!_reflow) out[tupleid(t)] = t;
      } // process individual tuples to modify


      for (i = 0, n = mod.length; i < n; ++i) {
        m = mod[i];
        t = m.tuple;
        f = m.field;
        id = cur[tupleid(t)];

        if (id > 0) {
          modify(t, f, m.value);

          _pulse.modifies(f);
        }
      } // process predicate-based modifications


      for (i = 0, n = modp.length; i < n; ++i) {
        m = modp[i];
        f = m.filter;
        tuples.forEach(function (t) {
          if (f(t) && cur[tupleid(t)] > 0) {
            modify(t, m.field, m.value);
          }
        });

        _pulse.modifies(m.field);
      } // upon reflow request, populate mod with all non-removed tuples
      // otherwise, populate mod with modified tuples only


      if (_reflow) {
        _pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {
          return cur[tupleid(t)] > 0;
        }) : tuples.slice();
      } else {
        for (id in out) {
          _pulse.mod.push(out[id]);
        }
      } // set pulse garbage collection request


      if (_clean || _clean == null && (rem.length || remp.length)) {
        _pulse.clean(true);
      }

      return _pulse;
    }
  };
}

var CACHE = '_:mod:_';
/**
 * Hash that tracks modifications to assigned values.
 * Callers *must* use the set method to update values.
 */

function Parameters() {
  Object.defineProperty(this, CACHE, {
    writable: true,
    value: {}
  });
}

Parameters.prototype = {
  /**
   * Set a parameter value. If the parameter value changes, the parameter
   * will be recorded as modified.
   * @param {string} name - The parameter name.
   * @param {number} index - The index into an array-value parameter. Ignored if
   *   the argument is undefined, null or less than zero.
   * @param {*} value - The parameter value to set.
   * @param {boolean} [force=false] - If true, records the parameter as modified
   *   even if the value is unchanged.
   * @return {Parameters} - This parameter object.
   */
  set: function set(name, index, value, force) {
    var o = this,
        v = o[name],
        mod = o[CACHE];

    if (index != null && index >= 0) {
      if (v[index] !== value || force) {
        v[index] = value;
        mod[index + ':' + name] = -1;
        mod[name] = -1;
      }
    } else if (v !== value || force) {
      o[name] = value;
      mod[name] = isArray(value) ? 1 + value.length : -1;
    }

    return o;
  },

  /**
   * Tests if one or more parameters has been modified. If invoked with no
   * arguments, returns true if any parameter value has changed. If the first
   * argument is array, returns trues if any parameter name in the array has
   * changed. Otherwise, tests if the given name and optional array index has
   * changed.
   * @param {string} name - The parameter name to test.
   * @param {number} [index=undefined] - The parameter array index to test.
   * @return {boolean} - Returns true if a queried parameter was modified.
   */
  modified: function modified(name, index) {
    var mod = this[CACHE];

    if (!arguments.length) {
      for (var k in mod) {
        if (mod[k]) return true;
      }

      return false;
    } else if (isArray(name)) {
      for (var _k = 0; _k < name.length; ++_k) {
        if (mod[name[_k]]) return true;
      }

      return false;
    }

    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];
  },

  /**
   * Clears the modification records. After calling this method,
   * all parameters are considered unmodified.
   */
  clear: function clear() {
    this[CACHE] = {};
    return this;
  }
};
var OP_ID = 0;
var PULSE = 'pulse',
    NO_PARAMS = new Parameters(); // Boolean Flags

var SKIP$1 = 1,
    MODIFIED = 2;
/**
 * An Operator is a processing node in a dataflow graph.
 * Each operator stores a value and an optional value update function.
 * Operators can accept a hash of named parameters. Parameter values can
 * either be direct (JavaScript literals, arrays, objects) or indirect
 * (other operators whose values will be pulled dynamically). Operators
 * included as parameters will have this operator added as a dependency.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {function(object, Pulse)} [update] - An update function. Upon
 *   evaluation of this operator, the update function will be invoked and the
 *   return value will be used as the new value of this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @see parameters
 */

function Operator(init, update, params, react) {
  this.id = ++OP_ID;
  this.value = init;
  this.stamp = -1;
  this.rank = -1;
  this.qrank = -1;
  this.flags = 0;

  if (update) {
    this._update = update;
  }

  if (params) this.parameters(params, react);
}

function flag(bit) {
  return function (state) {
    var f = this.flags;
    if (arguments.length === 0) return !!(f & bit);
    this.flags = state ? f | bit : f & ~bit;
    return this;
  };
}

Operator.prototype = {
  /**
   * Returns a list of target operators dependent on this operator.
   * If this list does not exist, it is created and then returned.
   * @return {UniqueList}
   */
  targets: function targets() {
    return this._targets || (this._targets = UniqueList(id));
  },

  /**
   * Sets the value of this operator.
   * @param {*} value - the value to set.
   * @return {Number} Returns 1 if the operator value has changed
   *   according to strict equality, returns 0 otherwise.
   */
  set: function set(value) {
    if (this.value !== value) {
      this.value = value;
      return 1;
    } else {
      return 0;
    }
  },

  /**
   * Indicates that operator evaluation should be skipped on the next pulse.
   * This operator will still propagate incoming pulses, but its update function
   * will not be invoked. The skip flag is reset after every pulse, so calling
   * this method will affect processing of the next pulse only.
   */
  skip: flag(SKIP$1),

  /**
   * Indicates that this operator's value has been modified on its most recent
   * pulse. Normally modification is checked via strict equality; however, in
   * some cases it is more efficient to update the internal state of an object.
   * In those cases, the modified flag can be used to trigger propagation. Once
   * set, the modification flag persists across pulses until unset. The flag can
   * be used with the last timestamp to test if a modification is recent.
   */
  modified: flag(MODIFIED),

  /**
   * Sets the parameters for this operator. The parameter values are analyzed for
   * operator instances. If found, this operator will be added as a dependency
   * of the parameterizing operator. Operator values are dynamically marshalled
   * from each operator parameter prior to evaluation. If a parameter value is
   * an array, the array will also be searched for Operator instances. However,
   * the search does not recurse into sub-arrays or object properties.
   * @param {object} params - A hash of operator parameters.
   * @param {boolean} [react=true] - A flag indicating if this operator should
   *   automatically update (react) when parameter values change. In other words,
   *   this flag determines if the operator registers itself as a listener on
   *   any upstream operators included in the parameters.
   * @param {boolean} [initonly=false] - A flag indicating if this operator
   *   should calculate an update only upon its initiatal evaluation, then
   *   deregister dependencies and suppress all future update invocations.
   * @return {Operator[]} - An array of upstream dependencies.
   */
  parameters: function parameters(params, react, initonly) {
    var _this = this;

    react = react !== false;
    var argval = this._argval = this._argval || new Parameters(),
        argops = this._argops = this._argops || [],
        deps = [];
    var name, value, n, i;

    var add = function add(name, index, value) {
      if (value instanceof Operator) {
        if (value !== _this) {
          if (react) value.targets().add(_this);
          deps.push(value);
        }

        argops.push({
          op: value,
          name: name,
          index: index
        });
      } else {
        argval.set(name, index, value);
      }
    };

    for (name in params) {
      value = params[name];

      if (name === PULSE) {
        array(value).forEach(function (op) {
          if (!(op instanceof Operator)) {
            error('Pulse parameters must be operator instances.');
          } else if (op !== _this) {
            op.targets().add(_this);
            deps.push(op);
          }
        });
        this.source = value;
      } else if (isArray(value)) {
        argval.set(name, -1, Array(n = value.length));

        for (i = 0; i < n; ++i) {
          add(name, i, value[i]);
        }
      } else {
        add(name, -1, value);
      }
    }

    this.marshall().clear(); // initialize values

    if (initonly) argops.initonly = true;
    return deps;
  },

  /**
   * Internal method for marshalling parameter values.
   * Visits each operator dependency to pull the latest value.
   * @return {Parameters} A Parameters object to pass to the update function.
   */
  marshall: function marshall(stamp) {
    var argval = this._argval || NO_PARAMS,
        argops = this._argops;
    var item, i, op, mod;

    if (argops) {
      var n = argops.length;

      for (i = 0; i < n; ++i) {
        item = argops[i];
        op = item.op;
        mod = op.modified() && op.stamp === stamp;
        argval.set(item.name, item.index, op.value, mod);
      }

      if (argops.initonly) {
        for (i = 0; i < n; ++i) {
          item = argops[i];
          item.op.targets().remove(this);
        }

        this._argops = null;
        this._update = null;
      }
    }

    return argval;
  },

  /**
   * Detach this operator from the dataflow.
   * Unregisters listeners on upstream dependencies.
   */
  detach: function detach() {
    var argops = this._argops;
    var i, n, item, op;

    if (argops) {
      for (i = 0, n = argops.length; i < n; ++i) {
        item = argops[i];
        op = item.op;

        if (op._targets) {
          op._targets.remove(this);
        }
      }
    } // remove references to the source and pulse object,
    // if present, to prevent memory leaks of old data.


    this.pulse = null;
    this.source = null;
  },

  /**
   * Delegate method to perform operator processing.
   * Subclasses can override this method to perform custom processing.
   * By default, it marshalls parameters and calls the update function
   * if that function is defined. If the update function does not
   * change the operator value then StopPropagation is returned.
   * If no update function is defined, this method does nothing.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return The output pulse or StopPropagation. A falsy return value
   *   (including undefined) will let the input pulse pass through.
   */
  evaluate: function evaluate(pulse) {
    var update = this._update;

    if (update) {
      var params = this.marshall(pulse.stamp),
          v = update.call(this, params, pulse);
      params.clear();

      if (v !== this.value) {
        this.value = v;
      } else if (!this.modified()) {
        return pulse.StopPropagation;
      }
    }
  },

  /**
   * Run this operator for the current pulse. If this operator has already
   * been run at (or after) the pulse timestamp, returns StopPropagation.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */
  run: function run(pulse) {
    if (pulse.stamp < this.stamp) return pulse.StopPropagation;
    var rv;

    if (this.skip()) {
      this.skip(false);
      rv = 0;
    } else {
      rv = this.evaluate(pulse);
    }

    return this.pulse = rv || pulse;
  }
};
/**
 * Add an operator to the dataflow graph. This function accepts a
 * variety of input argument types. The basic signature supports an
 * initial value, update function and parameters. If the first parameter
 * is an Operator instance, it will be added directly. If it is a
 * constructor for an Operator subclass, a new instance will be instantiated.
 * Otherwise, if the first parameter is a function instance, it will be used
 * as the update function and a null initial value is assumed.
 * @param {*} init - One of: the operator to add, the initial value of
 *   the operator, an operator class to instantiate, or an update function.
 * @param {function} [update] - The operator update function.
 * @param {object} [params] - The operator parameters.
 * @param {boolean} [react=true] - Flag indicating if this operator should
 *   listen for changes to upstream operators included as parameters.
 * @return {Operator} - The added operator.
 */

function add(init, update, params, react) {
  var shift = 1,
      op;

  if (init instanceof Operator) {
    op = init;
  } else if (init && init.prototype instanceof Operator) {
    op = new init();
  } else if (isFunction(init)) {
    op = new Operator(null, init);
  } else {
    shift = 0;
    op = new Operator(init, update);
  }

  this.rank(op);

  if (shift) {
    react = params;
    params = update;
  }

  if (params) this.connect(op, op.parameters(params, react));
  this.touch(op);
  return op;
}
/**
 * Connect a target operator as a dependent of source operators.
 * If necessary, this method will rerank the target operator and its
 * dependents to ensure propagation proceeds in a topologically sorted order.
 * @param {Operator} target - The target operator.
 * @param {Array<Operator>} - The source operators that should propagate
 *   to the target operator.
 */


function connect(target, sources) {
  var targetRank = target.rank,
      n = sources.length;

  for (var i = 0; i < n; ++i) {
    if (targetRank < sources[i].rank) {
      this.rerank(target);
      return;
    }
  }
}

var STREAM_ID = 0;
/**
 * Models an event stream.
 * @constructor
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @param {function(Object)} [receive] - Event callback function to invoke
 *   upon receipt of a new event. Use to override standard event processing.
 */

function EventStream(filter, apply, receive) {
  this.id = ++STREAM_ID;
  this.value = null;
  if (receive) this.receive = receive;
  if (filter) this._filter = filter;
  if (apply) this._apply = apply;
}
/**
 * Creates a new event stream instance with the provided
 * (optional) filter, apply and receive functions.
 * @param {function(Object, number): boolean} [filter] - Filter predicate.
 *   Events pass through when truthy, events are suppressed when falsy.
 * @param {function(Object): *} [apply] - Applied to input events to produce
 *   new event values.
 * @see EventStream
 */


function stream(filter, apply, receive) {
  return new EventStream(filter, apply, receive);
}

EventStream.prototype = {
  _filter: truthy,
  _apply: identity,
  targets: function targets() {
    return this._targets || (this._targets = UniqueList(id));
  },
  consume: function consume(_) {
    if (!arguments.length) return !!this._consume;
    this._consume = !!_;
    return this;
  },
  receive: function receive(evt) {
    if (this._filter(evt)) {
      var val = this.value = this._apply(evt),
          trg = this._targets,
          n = trg ? trg.length : 0;

      for (var i = 0; i < n; ++i) {
        trg[i].receive(val);
      }

      if (this._consume) {
        evt.preventDefault();
        evt.stopPropagation();
      }
    }
  },
  filter: function filter(_filter) {
    var s = stream(_filter);
    this.targets().add(s);
    return s;
  },
  apply: function apply(_apply) {
    var s = stream(null, _apply);
    this.targets().add(s);
    return s;
  },
  merge: function merge() {
    var s = stream();
    this.targets().add(s);

    for (var i = 0, n = arguments.length; i < n; ++i) {
      arguments[i].targets().add(s);
    }

    return s;
  },
  throttle: function throttle(pause) {
    var t = -1;
    return this.filter(function () {
      var now = Date.now();

      if (now - t > pause) {
        t = now;
        return 1;
      } else {
        return 0;
      }
    });
  },
  debounce: function debounce(delay) {
    var s = stream();
    this.targets().add(stream(null, null, vega_util_module_debounce(delay, function (e) {
      var df = e.dataflow;
      s.receive(e);
      if (df && df.run) df.run();
    })));
    return s;
  },
  between: function between(a, b) {
    var active = false;
    a.targets().add(stream(null, null, function () {
      return active = true;
    }));
    b.targets().add(stream(null, null, function () {
      return active = false;
    }));
    return this.filter(function () {
      return active;
    });
  },
  detach: function detach() {
    // ensures compatibility with operators (#2753)
    // remove references to other streams and filter functions that may
    // be bound to subcontexts that need to be garbage collected.
    this._filter = truthy;
    this._targets = null;
  }
};
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor. The input must
 *  support the addEventListener method.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @param {function(object): *} [apply] - Event application function.
 *   If provided, this function will be invoked and the result will be
 *   used as the downstream event value.
 * @return {EventStream}
 */

function events(source, type, filter, apply) {
  var df = this,
      s = stream(filter, apply),
      send = function send(e) {
    e.dataflow = df;

    try {
      s.receive(e);
    } catch (error) {
      df.error(error);
    } finally {
      df.run();
    }
  };

  var sources;

  if (typeof source === 'string' && typeof document !== 'undefined') {
    sources = document.querySelectorAll(source);
  } else {
    sources = array(source);
  }

  var n = sources.length;

  for (var i = 0; i < n; ++i) {
    sources[i].addEventListener(type, send);
  }

  return s;
}

function vega_dataflow_module_parse(data, format) {
  var locale = this.locale();
  return read(data, format, locale.timeParse, locale.utcParse);
}
/**
 * Ingests new data into the dataflow. First parses the data using the
 * vega-loader read method, then pulses a changeset to the target operator.
 * @param {Operator} target - The Operator to target with ingested data,
 *   typically a Collect transform instance.
 * @param {*} data - The input data, prior to parsing. For JSON this may
 *   be a string or an object. For CSV, TSV, etc should be a string.
 * @param {object} format - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @returns {Dataflow}
 */


function ingest(target, data, format) {
  data = this.parse(data, format);
  return this.pulse(target, this.changeset().insert(data));
}
/**
 * Request data from an external source, parse it, and return a Promise.
 * @param {string} url - The URL from which to load the data. This string
 *   is passed to the vega-loader load method.
 * @param {object} [format] - The data format description for parsing
 *   loaded data. This object is passed to the vega-loader read method.
 * @return {Promise} A Promise that resolves upon completion of the request.
 *   The resolved object contains the following properties:
 *   - data: an array of parsed data (or null upon error)
 *   - status: a code for success (0), load fail (-1), or parse fail (-2)
 */


function request(_x3, _x4) {
  return _request.apply(this, arguments);
}

function _request() {
  _request = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2(url, format) {
    var df, status, data;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            df = this;
            status = 0;
            _context2.prev = 2;
            _context2.next = 5;
            return df.loader().load(url, {
              context: 'dataflow',
              response: responseType(format && format.type)
            });

          case 5:
            data = _context2.sent;

            try {
              data = df.parse(data, format);
            } catch (err) {
              status = -2;
              df.warn('Data ingestion failed', url, err);
            }

            _context2.next = 13;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](2);
            status = -1;
            df.warn('Loading failed', url, _context2.t0);

          case 13:
            return _context2.abrupt("return", {
              data: data,
              status: status
            });

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[2, 9]]);
  }));
  return _request.apply(this, arguments);
}

function preload(_x5, _x6, _x7) {
  return _preload.apply(this, arguments);
}

function _preload() {
  _preload = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3(target, url, format) {
    var df, pending, res;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            df = this, pending = df._pending || loadPending(df);
            pending.requests += 1;
            _context3.next = 4;
            return df.request(url, format);

          case 4:
            res = _context3.sent;
            df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));
            pending.done();
            return _context3.abrupt("return", res);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _preload.apply(this, arguments);
}

function loadPending(df) {
  var accept;
  var pending = new Promise(function (a) {
    return accept = a;
  });
  pending.requests = 0;

  pending.done = function () {
    if (--pending.requests === 0) {
      df._pending = null;
      accept(df);
    }
  };

  return df._pending = pending;
}

var SKIP = {
  skip: true
};
/**
 * Perform operator updates in response to events. Applies an
 * update function to compute a new operator value. If the update function
 * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
 * changes. Otherwise, the operator value will be updated to the return value.
 * @param {EventStream|Operator} source - The event source to react to.
 *   This argument can be either an EventStream or an Operator.
 * @param {Operator|function(object):Operator} target - The operator to update.
 *   This argument can either be an Operator instance or (if the source
 *   argument is an EventStream), a function that accepts an event object as
 *   input and returns an Operator to target.
 * @param {function(Parameters,Event): *} [update] - Optional update function
 *   to compute the new operator value, or a literal value to set. Update
 *   functions expect to receive a parameter object and event as arguments.
 *   This function can either return a new operator value or (if the source
 *   argument is an EventStream) a {@link ChangeSet} instance to pulse
 *   the target operator with tuple changes.
 * @param {object} [params] - The update function parameters.
 * @param {object} [options] - Additional options hash. If not overridden,
 *   updated operators will be skipped by default.
 * @param {boolean} [options.skip] - If true, the operator will
 *  be skipped: it will not be evaluated, but its dependents will be.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @return {Dataflow}
 */

function on(source, target, update, params, options) {
  var fn = source instanceof Operator ? onOperator : onStream;
  fn(this, source, target, update, params, options);
  return this;
}

function onStream(df, stream, target, update, params, options) {
  var opt = extend({}, options, SKIP);
  var func, op;
  if (!isFunction(target)) target = vega_util_module_constant(target);

  if (update === undefined) {
    func = function func(e) {
      return df.touch(target(e));
    };
  } else if (isFunction(update)) {
    op = new Operator(null, update, params, false);

    func = function func(e) {
      op.evaluate(e);
      var t = target(e),
          v = op.value;
      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
    };
  } else {
    func = function func(e) {
      return df.update(target(e), update, opt);
    };
  }

  stream.apply(func);
}

function onOperator(df, source, target, update, params, options) {
  if (update === undefined) {
    source.targets().add(target);
  } else {
    var opt = options || {},
        op = new Operator(null, updater(target, update), params, false);
    op.modified(opt.force);
    op.rank = source.rank; // immediately follow source

    source.targets().add(op); // add dependency

    if (target) {
      op.skip(true); // skip first invocation

      op.value = target.value; // initialize value

      op.targets().add(target); // chain dependencies

      df.connect(target, [op]); // rerank as needed, #1672
    }
  }
}

function updater(target, update) {
  update = isFunction(update) ? update : vega_util_module_constant(update);
  return target ? function (_, pulse) {
    var value = update(_, pulse);

    if (!target.skip()) {
      target.skip(value !== this.value).value = value;
    }

    return value;
  } : update;
}
/**
 * Assigns a rank to an operator. Ranks are assigned in increasing order
 * by incrementing an internal rank counter.
 * @param {Operator} op - The operator to assign a rank.
 */


function rank(op) {
  op.rank = ++this._rank;
}
/**
 * Re-ranks an operator and all downstream target dependencies. This
 * is necessary when upstream dependencies of higher rank are added to
 * a target operator.
 * @param {Operator} op - The operator to re-rank.
 */


function rerank(op) {
  var queue = [op];
  var cur, list, i;

  while (queue.length) {
    this.rank(cur = queue.pop());

    if (list = cur._targets) {
      for (i = list.length; --i >= 0;) {
        queue.push(cur = list[i]);
        if (cur === op) error('Cycle detected in dataflow graph.');
      }
    }
  }
}
/**
 * Sentinel value indicating pulse propagation should stop.
 */


var StopPropagation = {}; // Pulse visit type flags

var ADD = 1 << 0,
    REM = 1 << 1,
    MOD = 1 << 2,
    ADD_REM = ADD | REM,
    ADD_MOD = ADD | MOD,
    ALL = ADD | REM | MOD,
    REFLOW = 1 << 3,
    SOURCE = 1 << 4,
    NO_SOURCE = 1 << 5,
    NO_FIELDS = 1 << 6;
/**
 * A Pulse enables inter-operator communication during a run of the
 * dataflow graph. In addition to the current timestamp, a pulse may also
 * contain a change-set of added, removed or modified data tuples, as well as
 * a pointer to a full backing data source. Tuple change sets may not
 * be fully materialized; for example, to prevent needless array creation
 * a change set may include larger arrays and corresponding filter functions.
 * The pulse provides a {@link visit} method to enable proper and efficient
 * iteration over requested data tuples.
 *
 * In addition, each pulse can track modification flags for data tuple fields.
 * Responsible transform operators should call the {@link modifies} method to
 * indicate changes to data fields. The {@link modified} method enables
 * querying of this modification state.
 *
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The current propagation timestamp.
 * @param {string} [encode] - An optional encoding set name, which is then
 *   accessible as Pulse.encode. Operators can respond to (or ignore) this
 *   setting as appropriate. This parameter can be used in conjunction with
 *   the Encode transform in the vega-encode module.
 */

function Pulse(dataflow, stamp, encode) {
  this.dataflow = dataflow;
  this.stamp = stamp == null ? -1 : stamp;
  this.add = [];
  this.rem = [];
  this.mod = [];
  this.fields = null;
  this.encode = encode || null;
}

function _materialize(data, filter) {
  var out = [];
  visitArray(data, filter, function (_) {
    return out.push(_);
  });
  return out;
}

function filter(pulse, flags) {
  var map = {};
  pulse.visit(flags, function (t) {
    map[tupleid(t)] = 1;
  });
  return function (t) {
    return map[tupleid(t)] ? null : t;
  };
}

function addFilter(a, b) {
  return a ? function (t, i) {
    return a(t, i) && b(t, i);
  } : b;
}

Pulse.prototype = {
  /**
   * Sentinel value indicating pulse propagation should stop.
   */
  StopPropagation: StopPropagation,

  /**
   * Boolean flag indicating ADD (added) tuples.
   */
  ADD: ADD,

  /**
   * Boolean flag indicating REM (removed) tuples.
   */
  REM: REM,

  /**
   * Boolean flag indicating MOD (modified) tuples.
   */
  MOD: MOD,

  /**
   * Boolean flag indicating ADD (added) and REM (removed) tuples.
   */
  ADD_REM: ADD_REM,

  /**
   * Boolean flag indicating ADD (added) and MOD (modified) tuples.
   */
  ADD_MOD: ADD_MOD,

  /**
   * Boolean flag indicating ADD, REM and MOD tuples.
   */
  ALL: ALL,

  /**
   * Boolean flag indicating all tuples in a data source
   * except for the ADD, REM and MOD tuples.
   */
  REFLOW: REFLOW,

  /**
   * Boolean flag indicating a 'pass-through' to a
   * backing data source, ignoring ADD, REM and MOD tuples.
   */
  SOURCE: SOURCE,

  /**
   * Boolean flag indicating that source data should be
   * suppressed when creating a forked pulse.
   */
  NO_SOURCE: NO_SOURCE,

  /**
   * Boolean flag indicating that field modifications should be
   * suppressed when creating a forked pulse.
   */
  NO_FIELDS: NO_FIELDS,

  /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created.
   * @return {Pulse} - The forked pulse instance.
   * @see init
   */
  fork: function fork(flags) {
    return new Pulse(this.dataflow).init(this, flags);
  },

  /**
   * Creates a copy of this pulse with new materialized array
   * instances for the ADD, REM, MOD, and SOURCE arrays.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse} - The cloned pulse instance.
   * @see init
   */
  clone: function clone() {
    var p = this.fork(ALL);
    p.add = p.add.slice();
    p.rem = p.rem.slice();
    p.mod = p.mod.slice();
    if (p.source) p.source = p.source.slice();
    return p.materialize(ALL | SOURCE);
  },

  /**
   * Returns a pulse that adds all tuples from a backing source. This is
   * useful for cases where operators are added to a dataflow after an
   * upstream data pipeline has already been processed, ensuring that
   * new operators can observe all tuples within a stream.
   * @return {Pulse} - A pulse instance with all source tuples included
   *   in the add array. If the current pulse already has all source
   *   tuples in its add array, it is returned directly. If the current
   *   pulse does not have a backing source, it is returned directly.
   */
  addAll: function addAll() {
    var p = this;
    var reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)
    || !p.rem.length && p.source.length === p.add.length;

    if (reuse) {
      return p;
    } else {
      p = new Pulse(this.dataflow).init(this);
      p.add = p.source;
      p.rem = []; // new operators can ignore rem #2769

      return p;
    }
  },

  /**
   * Initialize this pulse based on the values of another pulse. This method
   * is used internally by {@link fork} to initialize a new forked tuple.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {Pulse} src - The source pulse to copy from.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created. By default, source data arrays are copied
   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
   * @return {Pulse} - Returns this Pulse instance.
   */
  init: function init(src, flags) {
    var p = this;
    p.stamp = src.stamp;
    p.encode = src.encode;

    if (src.fields && !(flags & NO_FIELDS)) {
      p.fields = src.fields;
    }

    if (flags & ADD) {
      p.addF = src.addF;
      p.add = src.add;
    } else {
      p.addF = null;
      p.add = [];
    }

    if (flags & REM) {
      p.remF = src.remF;
      p.rem = src.rem;
    } else {
      p.remF = null;
      p.rem = [];
    }

    if (flags & MOD) {
      p.modF = src.modF;
      p.mod = src.mod;
    } else {
      p.modF = null;
      p.mod = [];
    }

    if (flags & NO_SOURCE) {
      p.srcF = null;
      p.source = null;
    } else {
      p.srcF = src.srcF;
      p.source = src.source;
      if (src.cleans) p.cleans = src.cleans;
    }

    return p;
  },

  /**
   * Schedules a function to run after pulse propagation completes.
   * @param {function} func - The function to run.
   */
  runAfter: function runAfter(func) {
    this.dataflow.runAfter(func);
  },

  /**
   * Indicates if tuples have been added, removed or modified.
   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
   *   Defaults to ALL, returning true if any tuple type has changed.
   * @return {boolean} - Returns true if one or more queried tuple types have
   *   changed, false otherwise.
   */
  changed: function changed(flags) {
    var f = flags || ALL;
    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
  },

  /**
   * Forces a "reflow" of tuple values, such that all tuples in the backing
   * source are added to the MOD set, unless already present in the ADD set.
   * @param {boolean} [fork=false] - If true, returns a forked copy of this
   *   pulse, and invokes reflow on that derived pulse.
   * @return {Pulse} - The reflowed pulse instance.
   */
  reflow: function reflow(fork) {
    if (fork) return this.fork(ALL).reflow();
    var len = this.add.length,
        src = this.source && this.source.length;

    if (src && src !== len) {
      this.mod = this.source;
      if (len) this.filter(MOD, filter(this, ADD));
    }

    return this;
  },

  /**
   * Get/set metadata to pulse requesting garbage collection
   * to reclaim currently unused resources.
   */
  clean: function clean(value) {
    if (arguments.length) {
      this.cleans = !!value;
      return this;
    } else {
      return this.cleans;
    }
  },

  /**
   * Marks one or more data field names as modified to assist dependency
   * tracking and incremental processing by transform operators.
   * @param {string|Array<string>} _ - The field(s) to mark as modified.
   * @return {Pulse} - This pulse instance.
   */
  modifies: function modifies(_) {
    var hash = this.fields || (this.fields = {});

    if (isArray(_)) {
      _.forEach(function (f) {
        return hash[f] = true;
      });
    } else {
      hash[_] = true;
    }

    return this;
  },

  /**
   * Checks if one or more data fields have been modified during this pulse
   * propagation timestamp.
   * @param {string|Array<string>} _ - The field(s) to check for modified.
   * @param {boolean} nomod - If true, will check the modified flag even if
   *   no mod tuples exist. If false (default), mod tuples must be present.
   * @return {boolean} - Returns true if any of the provided fields has been
   *   marked as modified, false otherwise.
   */
  modified: function modified(_, nomod) {
    var fields = this.fields;
    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(function (f) {
      return fields[f];
    }) : fields[_];
  },

  /**
   * Adds a filter function to one more tuple sets. Filters are applied to
   * backing tuple arrays, to determine the actual set of tuples considered
   * added, removed or modified. They can be used to delay materialization of
   * a tuple set in order to avoid expensive array copies. In addition, the
   * filter functions can serve as value transformers: unlike standard predicate
   * function (which return boolean values), Pulse filters should return the
   * actual tuple value to process. If a tuple set is already filtered, the
   * new filter function will be appended into a conjuntive ('and') query.
   * @param {number} flags - Flags indicating the tuple set(s) to filter.
   * @param {function(*):object} filter - Filter function that will be applied
   *   to the tuple set array, and should return a data tuple if the value
   *   should be included in the tuple set, and falsy (or null) otherwise.
   * @return {Pulse} - Returns this pulse instance.
   */
  filter: function filter(flags, _filter2) {
    var p = this;
    if (flags & ADD) p.addF = addFilter(p.addF, _filter2);
    if (flags & REM) p.remF = addFilter(p.remF, _filter2);
    if (flags & MOD) p.modF = addFilter(p.modF, _filter2);
    if (flags & SOURCE) p.srcF = addFilter(p.srcF, _filter2);
    return p;
  },

  /**
   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
   * a registered filter function, it will be applied and the tuple set(s) will
   * be replaced with materialized tuple arrays.
   * @param {number} flags - Flags indicating the tuple set(s) to materialize.
   * @return {Pulse} - Returns this pulse instance.
   */
  materialize: function materialize(flags) {
    flags = flags || ALL;
    var p = this;

    if (flags & ADD && p.addF) {
      p.add = _materialize(p.add, p.addF);
      p.addF = null;
    }

    if (flags & REM && p.remF) {
      p.rem = _materialize(p.rem, p.remF);
      p.remF = null;
    }

    if (flags & MOD && p.modF) {
      p.mod = _materialize(p.mod, p.modF);
      p.modF = null;
    }

    if (flags & SOURCE && p.srcF) {
      p.source = p.source.filter(p.srcF);
      p.srcF = null;
    }

    return p;
  },

  /**
   * Visit one or more tuple sets in this pulse.
   * @param {number} flags - Flags indicating the tuple set(s) to visit.
   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
   *   has been set).
   * @param {function(object):*} - Visitor function invoked per-tuple.
   * @return {Pulse} - Returns this pulse instance.
   */
  visit: function visit(flags, visitor) {
    var p = this,
        v = visitor;

    if (flags & SOURCE) {
      visitArray(p.source, p.srcF, v);
      return p;
    }

    if (flags & ADD) visitArray(p.add, p.addF, v);
    if (flags & REM) visitArray(p.rem, p.remF, v);
    if (flags & MOD) visitArray(p.mod, p.modF, v);
    var src = p.source;

    if (flags & REFLOW && src) {
      var sum = p.add.length + p.mod.length;
      if (sum === src.length) ;else if (sum) {
        visitArray(src, filter(p, ADD_MOD), v);
      } else {
        // if no add/rem/mod tuples, visit source
        visitArray(src, p.srcF, v);
      }
    }

    return p;
  }
};
/**
 * Represents a set of multiple pulses. Used as input for operators
 * that accept multiple pulses at a time. Contained pulses are
 * accessible via the public "pulses" array property. This pulse doe
 * not carry added, removed or modified tuples directly. However,
 * the visit method can be used to traverse all such tuples contained
 * in sub-pulses with a timestamp matching this parent multi-pulse.
 * @constructor
 * @param {Dataflow} dataflow - The backing dataflow instance.
 * @param {number} stamp - The timestamp.
 * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
 */

function MultiPulse(dataflow, stamp, pulses, encode) {
  var p = this,
      n = pulses.length;
  var c = 0;
  this.dataflow = dataflow;
  this.stamp = stamp;
  this.fields = null;
  this.encode = encode || null;
  this.pulses = pulses;

  for (var i = 0; i < n; ++i) {
    var _pulse2 = pulses[i];
    if (_pulse2.stamp !== stamp) continue;

    if (_pulse2.fields) {
      var hash = p.fields || (p.fields = {});

      for (var f in _pulse2.fields) {
        hash[f] = 1;
      }
    }

    if (_pulse2.changed(p.ADD)) c |= p.ADD;
    if (_pulse2.changed(p.REM)) c |= p.REM;
    if (_pulse2.changed(p.MOD)) c |= p.MOD;
  }

  this.changes = c;
}

vega_util_module_inherits(MultiPulse, Pulse, {
  /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse}
   */
  fork: function fork(flags) {
    var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);

    if (flags !== undefined) {
      if (flags & p.ADD) this.visit(p.ADD, function (t) {
        return p.add.push(t);
      });
      if (flags & p.REM) this.visit(p.REM, function (t) {
        return p.rem.push(t);
      });
      if (flags & p.MOD) this.visit(p.MOD, function (t) {
        return p.mod.push(t);
      });
    }

    return p;
  },
  changed: function changed(flags) {
    return this.changes & flags;
  },
  modified: function modified(_) {
    var p = this,
        fields = p.fields;
    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(function (f) {
      return fields[f];
    }) : fields[_];
  },
  filter: function filter() {
    error('MultiPulse does not support filtering.');
  },
  materialize: function materialize() {
    error('MultiPulse does not support materialization.');
  },
  visit: function visit(flags, visitor) {
    var p = this,
        pulses = p.pulses,
        n = pulses.length;
    var i = 0;

    if (flags & p.SOURCE) {
      for (; i < n; ++i) {
        pulses[i].visit(flags, visitor);
      }
    } else {
      for (; i < n; ++i) {
        if (pulses[i].stamp === p.stamp) {
          pulses[i].visit(flags, visitor);
        }
      }
    }

    return p;
  }
});
/* eslint-disable require-atomic-updates */

/**
 * Evaluates the dataflow and returns a Promise that resolves when pulse
 * propagation completes. This method will increment the current timestamp
 * and process all updated, pulsed and touched operators. When invoked for
 * the first time, all registered operators will be processed. This method
 * should not be invoked by third-party clients, use {@link runAsync} or
 * {@link run} instead.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */

function evaluate(_x8, _x9, _x10) {
  return _evaluate.apply(this, arguments);
}
/**
 * Queues dataflow evaluation to run once any other queued evaluations have
 * completed and returns a Promise that resolves when the queued pulse
 * propagation completes. If provided, a callback function will be invoked
 * immediately before evaluation commences. This method will ensure a
 * separate evaluation is invoked for each time it is called.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode package.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Promise} - A promise that resolves to this dataflow after
 *   evaluation completes.
 */


function _evaluate() {
  _evaluate = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee4(encode, prerun, postrun) {
    var df, async, stamp, count, op, next, error, pr, i;
    return regenerator_default().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            df = this, async = []; // if the pulse value is set, this is a re-entrant call

            if (!df._pulse) {
              _context4.next = 3;
              break;
            }

            return _context4.abrupt("return", reentrant(df));

          case 3:
            if (!df._pending) {
              _context4.next = 6;
              break;
            }

            _context4.next = 6;
            return df._pending;

          case 6:
            if (!prerun) {
              _context4.next = 9;
              break;
            }

            _context4.next = 9;
            return asyncCallback(df, prerun);

          case 9:
            if (df._touched.length) {
              _context4.next = 12;
              break;
            }

            df.debug('Dataflow invoked, but nothing to do.');
            return _context4.abrupt("return", df);

          case 12:
            // increment timestamp clock
            stamp = ++df._clock; // set the current pulse

            df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators

            df._touched.forEach(function (op) {
              return df._enqueue(op, true);
            });

            df._touched = UniqueList(id);
            count = 0;
            _context4.prev = 17;

          case 18:
            if (!(df._heap.size() > 0)) {
              _context4.next = 35;
              break;
            }

            // dequeue operator with highest priority
            op = df._heap.pop(); // re-queue if rank changed

            if (!(op.rank !== op.qrank)) {
              _context4.next = 23;
              break;
            }

            df._enqueue(op, true);

            return _context4.abrupt("continue", 18);

          case 23:
            // otherwise, evaluate the operator
            next = op.run(df._getPulse(op, encode));

            if (!next.then) {
              _context4.next = 30;
              break;
            }

            _context4.next = 27;
            return next;

          case 27:
            next = _context4.sent;
            _context4.next = 31;
            break;

          case 30:
            if (next.async) {
              // queue parallel asynchronous execution
              async.push(next.async);
              next = StopPropagation;
            }

          case 31:
            // propagate evaluation, enqueue dependent operators
            if (next !== StopPropagation) {
              if (op._targets) op._targets.forEach(function (op) {
                return df._enqueue(op);
              });
            } // increment visit counter


            ++count;
            _context4.next = 18;
            break;

          case 35:
            _context4.next = 41;
            break;

          case 37:
            _context4.prev = 37;
            _context4.t0 = _context4["catch"](17);

            df._heap.clear();

            error = _context4.t0;

          case 41:
            // reset pulse map
            df._input = {};
            df._pulse = null;
            df.debug("Pulse ".concat(stamp, ": ").concat(count, " operators"));

            if (error) {
              df._postrun = [];
              df.error(error);
            } // invoke callbacks queued via runAfter


            if (!df._postrun.length) {
              _context4.next = 55;
              break;
            }

            pr = df._postrun.sort(function (a, b) {
              return b.priority - a.priority;
            });
            df._postrun = [];
            i = 0;

          case 49:
            if (!(i < pr.length)) {
              _context4.next = 55;
              break;
            }

            _context4.next = 52;
            return asyncCallback(df, pr[i].callback);

          case 52:
            ++i;
            _context4.next = 49;
            break;

          case 55:
            if (!postrun) {
              _context4.next = 58;
              break;
            }

            _context4.next = 58;
            return asyncCallback(df, postrun);

          case 58:
            // handle non-blocking asynchronous callbacks
            if (async.length) {
              Promise.all(async).then(function (cb) {
                return df.runAsync(null, function () {
                  cb.forEach(function (f) {
                    try {
                      f(df);
                    } catch (err) {
                      df.error(err);
                    }
                  });
                });
              });
            }

            return _context4.abrupt("return", df);

          case 60:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[17, 37]]);
  }));
  return _evaluate.apply(this, arguments);
}

function runAsync(_x11, _x12, _x13) {
  return _runAsync.apply(this, arguments);
}
/**
 * Requests dataflow evaluation and the immediately returns this dataflow
 * instance. If there are pending data loading or other asynchronous
 * operations, the dataflow will evaluate asynchronously after this method
 * has been invoked. To track when dataflow evaluation completes, use the
 * {@link runAsync} method instead. This method will raise an error if
 * invoked while the dataflow is already in the midst of evaluation.
 * @param {string} [encode] - The name of an encoding set to invoke during
 *   propagation. This value is added to generated Pulse instances;
 *   operators can then respond to (or ignore) this setting as appropriate.
 *   This parameter can be used in conjunction with the Encode transform in
 *   the vega-encode module.
 * @param {function} [prerun] - An optional callback function to invoke
 *   immediately before dataflow evaluation commences.
 * @param {function} [postrun] - An optional callback function to invoke
 *   after dataflow evaluation completes. The callback will be invoked
 *   after those registered via {@link runAfter}.
 * @return {Dataflow} - This dataflow instance.
 */


function _runAsync() {
  _runAsync = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee5(encode, prerun, postrun) {
    var _this3 = this;

    var clear;
    return regenerator_default().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!this._running) {
              _context5.next = 5;
              break;
            }

            _context5.next = 3;
            return this._running;

          case 3:
            _context5.next = 0;
            break;

          case 5:
            // run dataflow, manage running promise
            clear = function clear() {
              return _this3._running = null;
            };

            (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
            return _context5.abrupt("return", this._running);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _runAsync.apply(this, arguments);
}

function run(encode, prerun, postrun) {
  return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
}
/**
 * Schedules a callback function to be invoked after the current pulse
 * propagation completes. If no propagation is currently occurring,
 * the function is invoked immediately. Callbacks scheduled via runAfter
 * are invoked immediately upon completion of the current cycle, before
 * any request queued via runAsync. This method is primarily intended for
 * internal use. Third-party callers using runAfter to schedule a callback
 * that invokes {@link run} or {@link runAsync} should not use this method,
 * but instead use {@link runAsync} with prerun or postrun arguments.
 * @param {function(Dataflow)} callback - The callback function to run.
 *   The callback will be invoked with this Dataflow instance as its
 *   sole argument.
 * @param {boolean} enqueue - A boolean flag indicating that the
 *   callback should be queued up to run after the next propagation
 *   cycle, suppressing immediate invocation when propagation is not
 *   currently occurring.
 * @param {number} [priority] - A priority value used to sort registered
 *   callbacks to determine execution order. This argument is intended
 *   for internal Vega use only.
 */


function runAfter(callback, enqueue, priority) {
  if (this._pulse || enqueue) {
    // pulse propagation is currently running, queue to run after
    this._postrun.push({
      priority: priority || 0,
      callback: callback
    });
  } else {
    // pulse propagation already complete, invoke immediately
    try {
      callback(this);
    } catch (err) {
      this.error(err);
    }
  }
}
/**
 * Raise an error for re-entrant dataflow evaluation.
 */


function reentrant(df) {
  df.error('Dataflow already running. Use runAsync() to chain invocations.');
  return df;
}
/**
 * Enqueue an operator into the priority queue for evaluation. The operator
 * will be enqueued if it has no registered pulse for the current cycle, or if
 * the force argument is true. Upon enqueue, this method also sets the
 * operator's qrank to the current rank value.
 * @param {Operator} op - The operator to enqueue.
 * @param {boolean} [force] - A flag indicating if the operator should be
 *   forceably added to the queue, even if it has already been previously
 *   enqueued during the current pulse propagation. This is useful when the
 *   dataflow graph is dynamically modified and the operator rank changes.
 */


function enqueue(op, force) {
  var q = op.stamp < this._clock;
  if (q) op.stamp = this._clock;

  if (q || force) {
    op.qrank = op.rank;

    this._heap.push(op);
  }
}
/**
 * Provide a correct pulse for evaluating an operator. If the operator has an
 * explicit source operator, we will try to pull the pulse(s) from it.
 * If there is an array of source operators, we build a multi-pulse.
 * Otherwise, we return a current pulse with correct source data.
 * If the pulse is the pulse map has an explicit target set, we use that.
 * Else if the pulse on the upstream source operator is current, we use that.
 * Else we use the pulse from the pulse map, but copy the source tuple array.
 * @param {Operator} op - The operator for which to get an input pulse.
 * @param {string} [encode] - An (optional) encoding set name with which to
 *   annotate the returned pulse. See {@link run} for more information.
 */


function getPulse(op, encode) {
  var s = op.source,
      stamp = this._clock;
  return s && isArray(s) ? new MultiPulse(this, stamp, s.map(function (_) {
    return _.pulse;
  }), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
}

function singlePulse(p, s) {
  if (s && s.stamp === p.stamp) {
    return s;
  }

  p = p.fork();

  if (s && s !== StopPropagation) {
    p.source = s.source;
  }

  return p;
}

var NO_OPT = {
  skip: false,
  force: false
};
/**
 * Touches an operator, scheduling it to be evaluated. If invoked outside of
 * a pulse propagation, the operator will be evaluated the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the operator
 * will be queued for evaluation if and only if the operator has not yet been
 * evaluated on the current propagation timestamp.
 * @param {Operator} op - The operator to touch.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */

function touch(op, options) {
  var opt = options || NO_OPT;

  if (this._pulse) {
    // if in midst of propagation, add to priority queue
    this._enqueue(op);
  } else {
    // otherwise, queue for next propagation
    this._touched.add(op);
  }

  if (opt.skip) op.skip(true);
  return this;
}
/**
 * Updates the value of the given operator.
 * @param {Operator} op - The operator to update.
 * @param {*} value - The value to set.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.force] - If true, the operator will
 *   be re-evaluated even if its value has not changed.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */


function update(op, value, options) {
  var opt = options || NO_OPT;

  if (op.set(value) || opt.force) {
    this.touch(op, opt);
  }

  return this;
}
/**
 * Pulses an operator with a changeset of tuples. If invoked outside of
 * a pulse propagation, the pulse will be applied the next time this
 * dataflow is run. If invoked in the midst of pulse propagation, the pulse
 * will be added to the set of active pulses and will be applied if and
 * only if the target operator has not yet been evaluated on the current
 * propagation timestamp.
 * @param {Operator} op - The operator to pulse.
 * @param {ChangeSet} value - The tuple changeset to apply.
 * @param {object} [options] - Additional options hash.
 * @param {boolean} [options.skip] - If true, the operator will
 *   be skipped: it will not be evaluated, but its dependents will be.
 * @return {Dataflow}
 */


function pulse(op, changeset, options) {
  this.touch(op, options || NO_OPT);
  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),
      t = op.pulse && op.pulse.source || [];
  p.target = op;
  this._input[op.id] = changeset.pulse(p, t);
  return this;
}

function Heap(cmp) {
  var nodes = [];
  return {
    clear: function clear() {
      return nodes = [];
    },
    size: function size() {
      return nodes.length;
    },
    peek: function peek() {
      return nodes[0];
    },
    push: function push(x) {
      nodes.push(x);
      return siftdown(nodes, 0, nodes.length - 1, cmp);
    },
    pop: function pop() {
      var last = nodes.pop();
      var item;

      if (nodes.length) {
        item = nodes[0];
        nodes[0] = last;
        siftup(nodes, 0, cmp);
      } else {
        item = last;
      }

      return item;
    }
  };
}

function siftdown(array, start, idx, cmp) {
  var parent, pidx;
  var item = array[idx];

  while (idx > start) {
    pidx = idx - 1 >> 1;
    parent = array[pidx];

    if (cmp(item, parent) < 0) {
      array[idx] = parent;
      idx = pidx;
      continue;
    }

    break;
  }

  return array[idx] = item;
}

function siftup(array, idx, cmp) {
  var start = idx,
      end = array.length,
      item = array[idx];
  var cidx = (idx << 1) + 1,
      ridx;

  while (cidx < end) {
    ridx = cidx + 1;

    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
      cidx = ridx;
    }

    array[idx] = array[cidx];
    idx = cidx;
    cidx = (idx << 1) + 1;
  }

  array[idx] = item;
  return siftdown(array, start, idx, cmp);
}
/**
 * A dataflow graph for reactive processing of data streams.
 * @constructor
 */


function Dataflow() {
  this.logger(logger());
  this.logLevel(Error$1);
  this._clock = 0;
  this._rank = 0;
  this._locale = vega_format_module_defaultLocale();

  try {
    this._loader = index_browser_loader();
  } catch (e) {// do nothing if loader module is unavailable
  }

  this._touched = UniqueList(id);
  this._input = {};
  this._pulse = null;
  this._heap = Heap(function (a, b) {
    return a.qrank - b.qrank;
  });
  this._postrun = [];
}

function logMethod(method) {
  return function () {
    return this._log[method].apply(this, arguments);
  };
}

Dataflow.prototype = {
  /**
   * The current timestamp of this dataflow. This value reflects the
   * timestamp of the previous dataflow run. The dataflow is initialized
   * with a stamp value of 0. The initial run of the dataflow will have
   * a timestap of 1, and so on. This value will match the
   * {@link Pulse.stamp} property.
   * @return {number} - The current timestamp value.
   */
  stamp: function stamp() {
    return this._clock;
  },

  /**
   * Gets or sets the loader instance to use for data file loading. A
   * loader object must provide a "load" method for loading files and a
   * "sanitize" method for checking URL/filename validity. Both methods
   * should accept a URI and options hash as arguments, and return a Promise
   * that resolves to the loaded file contents (load) or a hash containing
   * sanitized URI data with the sanitized url assigned to the "href" property
   * (sanitize).
   * @param {object} _ - The loader instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current loader instance. Otherwise returns this Dataflow instance.
   */
  loader: function loader(_) {
    if (arguments.length) {
      this._loader = _;
      return this;
    } else {
      return this._loader;
    }
  },

  /**
   * Gets or sets the locale instance to use for formatting and parsing
   * string values. The locale object should be provided by the
   * vega-format library, and include methods such as format, timeFormat,
   * utcFormat, timeParse, and utcParse.
   * @param {object} _ - The locale instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current locale instance. Otherwise returns this Dataflow instance.
   */
  locale: function locale(_) {
    if (arguments.length) {
      this._locale = _;
      return this;
    } else {
      return this._locale;
    }
  },

  /**
   * Get or set the logger instance used to log messages. If no arguments are
   * provided, returns the current logger instance. Otherwise, sets the logger
   * and return this Dataflow instance. Provided loggers must support the full
   * API of logger objects generated by the vega-util logger method. Note that
   * by default the log level of the new logger will be used; use the logLevel
   * method to adjust the log level as needed.
   */
  logger: function logger(_logger) {
    if (arguments.length) {
      this._log = _logger;
      return this;
    } else {
      return this._log;
    }
  },

  /**
   * Logs an error message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit error messages.
   */
  error: logMethod('error'),

  /**
   * Logs a warning message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit warning messages.
   */
  warn: logMethod('warn'),

  /**
   * Logs a information message. By default, logged messages are written to
   * console output. The message will only be logged if the current log level is
   * high enough to permit information messages.
   */
  info: logMethod('info'),

  /**
   * Logs a debug message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit debug messages.
   */
  debug: logMethod('debug'),

  /**
   * Get or set the current log level. If an argument is provided, it
   * will be used as the new log level.
   * @param {number} [level] - Should be one of None, Warn, Info
   * @return {number} - The current log level.
   */
  logLevel: logMethod('level'),

  /**
   * Empty entry threshold for garbage cleaning. Map data structures will
   * perform cleaning once the number of empty entries exceeds this value.
   */
  cleanThreshold: 1e4,
  // OPERATOR REGISTRATION
  add: add,
  connect: connect,
  rank: rank,
  rerank: rerank,
  // OPERATOR UPDATES
  pulse: pulse,
  touch: touch,
  update: update,
  changeset: changeset,
  // DATA LOADING
  ingest: ingest,
  parse: vega_dataflow_module_parse,
  preload: preload,
  request: request,
  // EVENT HANDLING
  events: events,
  on: on,
  // PULSE PROPAGATION
  evaluate: evaluate,
  run: run,
  runAsync: runAsync,
  runAfter: runAfter,
  _enqueue: enqueue,
  _getPulse: getPulse
};
/**
 * Abstract class for operators that process data tuples.
 * Subclasses must provide a {@link transform} method for operator processing.
 * @constructor
 * @param {*} [init] - The initial value for this operator.
 * @param {object} [params] - The parameters for this operator.
 * @param {Operator} [source] - The operator from which to receive pulses.
 */

function Transform(init, params) {
  Operator.call(this, init, null, params);
}

vega_util_module_inherits(Transform, Operator, {
  /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */
  run: function run(pulse) {
    var _this2 = this;

    if (pulse.stamp < this.stamp) return pulse.StopPropagation;
    var rv;

    if (this.skip()) {
      this.skip(false);
    } else {
      rv = this.evaluate(pulse);
    }

    rv = rv || pulse;

    if (rv.then) {
      rv = rv.then(function (_) {
        return _this2.pulse = _;
      });
    } else if (rv !== pulse.StopPropagation) {
      this.pulse = rv;
    }

    return rv;
  },

  /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Marshalls parameter values and then invokes {@link transform}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
       value (including undefined) will let the input pulse pass through.
  */
  evaluate: function evaluate(pulse) {
    var params = this.marshall(pulse.stamp),
        out = this.transform(params, pulse);
    params.clear();
    return out;
  },

  /**
   * Process incoming pulses.
   * Subclasses should override this method to implement transforms.
   * @param {Parameters} _ - The operator parameter values.
   * @param {Pulse} pulse - The current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
   *   value (including undefined) will let the input pulse pass through.
   */
  transform: function transform() {}
});
var transforms = {};

function definition(type) {
  var t = vega_dataflow_module_transform(type);
  return t && t.Definition || null;
}

function vega_dataflow_module_transform(type) {
  type = type && type.toLowerCase();
  return _has(transforms, type) ? transforms[type] : null;
}


// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.flat.js
var es_array_flat = __webpack_require__(84944);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules
var slicedToArray = __webpack_require__(28481);
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/ascending.js
/* harmony default export */ function d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/max.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function max_max(values, valueof) {
  var max;

  if (valueof === undefined) {
    var _iterator = _createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (max < value || max === undefined && value >= value)) {
          max = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = _createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {
          max = _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return max;
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/min.js
function min_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = min_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function min_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return min_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return min_arrayLikeToArray(o, minLen); }

function min_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function min_min(values, valueof) {
  var min;

  if (valueof === undefined) {
    var _iterator = min_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (min > value || min === undefined && value >= value)) {
          min = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = min_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (min > _value || min === undefined && _value >= _value)) {
          min = _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return min;
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/quickselect.js
 // Based on https://github.com/mourner/quickselect
// ISC license, Copyright 2018 Vladimir Agafonkin.

function quickselect_quickselect(array, k) {
  var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;
  var compare = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : d3_array_src_ascending;

  while (right > left) {
    if (right - left > 600) {
      var n = right - left + 1;
      var m = k - left + 1;
      var z = Math.log(n);
      var s = 0.5 * Math.exp(2 * z / 3);
      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      quickselect_quickselect(array, k, newLeft, newRight, compare);
    }

    var t = array[k];
    var i = left;
    var j = right;
    swap(array, left, k);
    if (compare(array[right], t) > 0) swap(array, left, right);

    while (i < j) {
      swap(array, i, j), ++i, --j;

      while (compare(array[i], t) < 0) {
        ++i;
      }

      while (compare(array[j], t) > 0) {
        --j;
      }
    }

    if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);
    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }

  return array;
}

function swap(array, i, j) {
  var t = array[i];
  array[i] = array[j];
  array[j] = t;
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/number.js


var _marked = /*#__PURE__*/regenerator_default().mark(number_numbers);

function number_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = number_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function number_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return number_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return number_arrayLikeToArray(o, minLen); }

function number_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function src_number(x) {
  return x === null ? NaN : +x;
}
function number_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof === undefined)) {
            _context.next = 21;
            break;
          }

          _iterator = number_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 40;
          break;

        case 21:
          index = -1;
          _iterator2 = number_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 32;
            break;
          }

          _value = _step2.value;

          if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
            _context.next = 30;
            break;
          }

          _context.next = 30;
          return _value;

        case 30:
          _context.next = 25;
          break;

        case 32:
          _context.next = 37;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 37:
          _context.prev = 37;

          _iterator2.f();

          return _context.finish(37);

        case 40:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/quantile.js




function quantile(values, p, valueof) {
  values = Float64Array.from(number_numbers(values, valueof));
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return min_min(values);
  if (p >= 1) return max_max(values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = max_max(quickselect_quickselect(values, i0).subarray(0, i0 + 1)),
      value1 = min_min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}
function quantileSorted(values, p) {
  var valueof = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : src_number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/variance.js
function variance_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = variance_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function variance_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return variance_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return variance_arrayLikeToArray(o, minLen); }

function variance_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function variance(values, valueof) {
  var count = 0;
  var delta;
  var mean = 0;
  var sum = 0;

  if (valueof === undefined) {
    var _iterator = variance_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (value = +value) >= value) {
          delta = value - mean;
          mean += delta / ++count;
          sum += delta * (value - mean);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = variance_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
          delta = _value - mean;
          mean += delta / ++count;
          sum += delta * (_value - mean);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  if (count > 1) return sum / (count - 1);
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/deviation.js

function deviation(values, valueof) {
  var v = variance(values, valueof);
  return v ? Math.sqrt(v) : v;
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/node_modules/d3-array/src/median.js

/* harmony default export */ function median(values, valueof) {
  return quantile(values, 0.5, valueof);
}
;// CONCATENATED MODULE: ./node_modules/vega-statistics/build/vega-statistics.module.js



var vega_statistics_module_marked = /*#__PURE__*/regenerator_default().mark(vega_statistics_module_numbers);

function vega_statistics_module_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = vega_statistics_module_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function vega_statistics_module_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return vega_statistics_module_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vega_statistics_module_arrayLikeToArray(o, minLen); }

function vega_statistics_module_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function vega_statistics_module_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof == null)) {
            _context.next = 21;
            break;
          }

          _iterator = vega_statistics_module_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && value !== '' && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 41;
          break;

        case 21:
          index = -1;
          _iterator2 = vega_statistics_module_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 33;
            break;
          }

          _value = _step2.value;
          _value = valueof(_value, ++index, values);

          if (!(_value != null && _value !== '' && (_value = +_value) >= _value)) {
            _context.next = 31;
            break;
          }

          _context.next = 31;
          return _value;

        case 31:
          _context.next = 25;
          break;

        case 33:
          _context.next = 38;
          break;

        case 35:
          _context.prev = 35;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 38:
          _context.prev = 38;

          _iterator2.f();

          return _context.finish(38);

        case 41:
        case "end":
          return _context.stop();
      }
    }
  }, vega_statistics_module_marked, null, [[2, 13, 16, 19], [23, 35, 38, 41]]);
}

function quantiles(array, p, f) {
  var values = Float64Array.from(vega_statistics_module_numbers(array, f)); // don't depend on return value from typed array sort call
  // protects against undefined sort results in Safari (vega/vega-lite#4964)

  values.sort(d3_array_src_ascending);
  return p.map(function (_) {
    return quantileSorted(values, _);
  });
}

function quartiles(array, f) {
  return quantiles(array, [0.25, 0.50, 0.75], f);
} // Theory, Practice, and Visualization. Wiley.


function estimateBandwidth(array, f) {
  var n = array.length,
      d = deviation(array, f),
      q = quartiles(array, f),
      h = (q[2] - q[0]) / 1.34,
      v = Math.min(d, h) || d || Math.abs(q[0]) || 1;
  return 1.06 * v * Math.pow(n, -0.2);
}

function vega_statistics_module_bin(_) {
  // determine range
  var maxb = _.maxbins || 20,
      base = _.base || 10,
      logb = Math.log(base),
      div = _.divide || [5, 2];
  var min = _.extent[0],
      max = _.extent[1],
      step,
      level,
      minstep,
      v,
      i,
      n;
  var span = _.span || max - min || Math.abs(min) || 1;

  if (_.step) {
    // if step size is explicitly given, use that
    step = _.step;
  } else if (_.steps) {
    // if provided, limit choice to acceptable step sizes
    v = span / maxb;

    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i) {
      ;
    }

    step = _.steps[Math.max(0, i - 1)];
  } else {
    // else use span to determine step size
    level = Math.ceil(Math.log(maxb) / logb);
    minstep = _.minstep || 0;
    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins

    while (Math.ceil(span / step) > maxb) {
      step *= base;
    } // decrease step size if allowed


    for (i = 0, n = div.length; i < n; ++i) {
      v = step / div[i];
      if (v >= minstep && span / v <= maxb) step = v;
    }
  } // update precision, min and max


  v = Math.log(step);
  var precision = v >= 0 ? 0 : ~~(-v / logb) + 1,
      eps = Math.pow(base, -precision - 1);

  if (_.nice || _.nice === undefined) {
    v = Math.floor(min / step + eps) * step;
    min = min < v ? v - step : v;
    max = Math.ceil(max / step) * step;
  }

  return {
    start: min,
    stop: max === min ? min + step : max,
    step: step
  };
}

var vega_statistics_module_random = Math.random;

function setRandom(r) {
  vega_statistics_module_random = r;
}

function bootstrapCI(array, samples, alpha, f) {
  if (!array.length) return [undefined, undefined];
  var values = Float64Array.from(vega_statistics_module_numbers(array, f)),
      n = values.length,
      m = samples;
  var a, i, j, mu;

  for (j = 0, mu = Array(m); j < m; ++j) {
    for (a = 0, i = 0; i < n; ++i) {
      a += values[~~(vega_statistics_module_random() * n)];
    }

    mu[j] = a / n;
  }

  mu.sort(d3_array_src_ascending);
  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];
} // Dot density binning for dot plot construction.
// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf


function dotbin(array, step, smooth, f) {
  f = f || function (_) {
    return _;
  };

  var n = array.length,
      v = new Float64Array(n);
  var i = 0,
      j = 1,
      a = f(array[0]),
      b = a,
      w = a + step,
      x;

  for (; j < n; ++j) {
    x = f(array[j]);

    if (x >= w) {
      b = (a + b) / 2;

      for (; i < j; ++i) {
        v[i] = b;
      }

      w = x + step;
      a = x;
    }

    b = x;
  }

  b = (a + b) / 2;

  for (; i < j; ++i) {
    v[i] = b;
  }

  return smooth ? smoothing(v, step + step / 4) : v;
} // perform smoothing to reduce variance
// swap points between "adjacent" stacks
// Wilkinson defines adjacent as within step/4 units


function smoothing(v, thresh) {
  var n = v.length;
  var a = 0,
      b = 1,
      c,
      d; // get left stack

  while (v[a] === v[b]) {
    ++b;
  }

  while (b < n) {
    // get right stack
    c = b + 1;

    while (v[b] === v[c]) {
      ++c;
    } // are stacks adjacent?
    // if so, compare sizes and swap as needed


    if (v[b] - v[b - 1] < thresh) {
      d = b + (a + c - b - b >> 1);

      while (d < b) {
        v[d++] = v[b];
      }

      while (d > b) {
        v[d--] = v[a];
      }
    } // update left stack indices


    a = b;
    b = c;
  }

  return v;
}

function lcg(seed) {
  // Random numbers using a Linear Congruential Generator with seed value
  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
  return function () {
    seed = (1103515245 * seed + 12345) % 2147483647;
    return seed / 2147483647;
  };
}

function integer(min, max) {
  if (max == null) {
    max = min;
    min = 0;
  }

  var a, b, d;
  var dist = {
    min: function min(_) {
      if (arguments.length) {
        a = _ || 0;
        d = b - a;
        return dist;
      } else {
        return a;
      }
    },
    max: function max(_) {
      if (arguments.length) {
        b = _ || 0;
        d = b - a;
        return dist;
      } else {
        return b;
      }
    },
    sample: function sample() {
      return a + Math.floor(d * vega_statistics_module_random());
    },
    pdf: function pdf(x) {
      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
    },
    cdf: function cdf(x) {
      var v = Math.floor(x);
      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
    },
    icdf: function icdf(p) {
      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
    }
  };
  return dist.min(min).max(max);
}

var SQRT2PI = Math.sqrt(2 * Math.PI);
var SQRT2 = Math.SQRT2;
var nextSample = NaN;

function sampleNormal(mean, stdev) {
  mean = mean || 0;
  stdev = stdev == null ? 1 : stdev;
  var x = 0,
      y = 0,
      rds,
      c;

  if (nextSample === nextSample) {
    x = nextSample;
    nextSample = NaN;
  } else {
    do {
      x = vega_statistics_module_random() * 2 - 1;
      y = vega_statistics_module_random() * 2 - 1;
      rds = x * x + y * y;
    } while (rds === 0 || rds > 1);

    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform

    x *= c;
    nextSample = y * c;
  }

  return mean + x * stdev;
}

function densityNormal(value, mean, stdev) {
  stdev = stdev == null ? 1 : stdev;
  var z = (value - (mean || 0)) / stdev;
  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
} // Approximation from West (2009)
// Better Approximations to Cumulative Normal Functions


function cumulativeNormal(value, mean, stdev) {
  mean = mean || 0;
  stdev = stdev == null ? 1 : stdev;
  var z = (value - mean) / stdev,
      Z = Math.abs(z);
  var cd;

  if (Z > 37) {
    cd = 0;
  } else {
    var _exp = Math.exp(-Z * Z / 2);

    var sum;

    if (Z < 7.07106781186547) {
      sum = 3.52624965998911e-02 * Z + 0.700383064443688;
      sum = sum * Z + 6.37396220353165;
      sum = sum * Z + 33.912866078383;
      sum = sum * Z + 112.079291497871;
      sum = sum * Z + 221.213596169931;
      sum = sum * Z + 220.206867912376;
      cd = _exp * sum;
      sum = 8.83883476483184e-02 * Z + 1.75566716318264;
      sum = sum * Z + 16.064177579207;
      sum = sum * Z + 86.7807322029461;
      sum = sum * Z + 296.564248779674;
      sum = sum * Z + 637.333633378831;
      sum = sum * Z + 793.826512519948;
      sum = sum * Z + 440.413735824752;
      cd = cd / sum;
    } else {
      sum = Z + 0.65;
      sum = Z + 4 / sum;
      sum = Z + 3 / sum;
      sum = Z + 2 / sum;
      sum = Z + 1 / sum;
      cd = _exp / sum / 2.506628274631;
    }
  }

  return z > 0 ? 1 - cd : cd;
} // Approximation of Probit function using inverse error function.


function quantileNormal(p, mean, stdev) {
  if (p < 0 || p > 1) return NaN;
  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
} // Approximate inverse error function. Implementation from "Approximating
// the erfinv function" by Mike Giles, GPU Computing Gems, volume 2, 2010.
// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0


function erfinv(x) {
  // beware that the logarithm argument must be
  // commputed as (1.0 - x) * (1.0 + x),
  // it must NOT be simplified as 1.0 - x * x as this
  // would induce rounding errors near the boundaries +/-1
  var w = -Math.log((1 - x) * (1 + x)),
      p;

  if (w < 6.25) {
    w -= 3.125;
    p = -3.6444120640178196996e-21;
    p = -1.685059138182016589e-19 + p * w;
    p = 1.2858480715256400167e-18 + p * w;
    p = 1.115787767802518096e-17 + p * w;
    p = -1.333171662854620906e-16 + p * w;
    p = 2.0972767875968561637e-17 + p * w;
    p = 6.6376381343583238325e-15 + p * w;
    p = -4.0545662729752068639e-14 + p * w;
    p = -8.1519341976054721522e-14 + p * w;
    p = 2.6335093153082322977e-12 + p * w;
    p = -1.2975133253453532498e-11 + p * w;
    p = -5.4154120542946279317e-11 + p * w;
    p = 1.051212273321532285e-09 + p * w;
    p = -4.1126339803469836976e-09 + p * w;
    p = -2.9070369957882005086e-08 + p * w;
    p = 4.2347877827932403518e-07 + p * w;
    p = -1.3654692000834678645e-06 + p * w;
    p = -1.3882523362786468719e-05 + p * w;
    p = 0.0001867342080340571352 + p * w;
    p = -0.00074070253416626697512 + p * w;
    p = -0.0060336708714301490533 + p * w;
    p = 0.24015818242558961693 + p * w;
    p = 1.6536545626831027356 + p * w;
  } else if (w < 16.0) {
    w = Math.sqrt(w) - 3.25;
    p = 2.2137376921775787049e-09;
    p = 9.0756561938885390979e-08 + p * w;
    p = -2.7517406297064545428e-07 + p * w;
    p = 1.8239629214389227755e-08 + p * w;
    p = 1.5027403968909827627e-06 + p * w;
    p = -4.013867526981545969e-06 + p * w;
    p = 2.9234449089955446044e-06 + p * w;
    p = 1.2475304481671778723e-05 + p * w;
    p = -4.7318229009055733981e-05 + p * w;
    p = 6.8284851459573175448e-05 + p * w;
    p = 2.4031110387097893999e-05 + p * w;
    p = -0.0003550375203628474796 + p * w;
    p = 0.00095328937973738049703 + p * w;
    p = -0.0016882755560235047313 + p * w;
    p = 0.0024914420961078508066 + p * w;
    p = -0.0037512085075692412107 + p * w;
    p = 0.005370914553590063617 + p * w;
    p = 1.0052589676941592334 + p * w;
    p = 3.0838856104922207635 + p * w;
  } else if (Number.isFinite(w)) {
    w = Math.sqrt(w) - 5.0;
    p = -2.7109920616438573243e-11;
    p = -2.5556418169965252055e-10 + p * w;
    p = 1.5076572693500548083e-09 + p * w;
    p = -3.7894654401267369937e-09 + p * w;
    p = 7.6157012080783393804e-09 + p * w;
    p = -1.4960026627149240478e-08 + p * w;
    p = 2.9147953450901080826e-08 + p * w;
    p = -6.7711997758452339498e-08 + p * w;
    p = 2.2900482228026654717e-07 + p * w;
    p = -9.9298272942317002539e-07 + p * w;
    p = 4.5260625972231537039e-06 + p * w;
    p = -1.9681778105531670567e-05 + p * w;
    p = 7.5995277030017761139e-05 + p * w;
    p = -0.00021503011930044477347 + p * w;
    p = -0.00013871931833623122026 + p * w;
    p = 1.0103004648645343977 + p * w;
    p = 4.8499064014085844221 + p * w;
  } else {
    p = Infinity;
  }

  return p * x;
}

function gaussian(mean, stdev) {
  var mu, sigma;
  var dist = {
    mean: function mean(_) {
      if (arguments.length) {
        mu = _ || 0;
        return dist;
      } else {
        return mu;
      }
    },
    stdev: function stdev(_) {
      if (arguments.length) {
        sigma = _ == null ? 1 : _;
        return dist;
      } else {
        return sigma;
      }
    },
    sample: function sample() {
      return sampleNormal(mu, sigma);
    },
    pdf: function pdf(value) {
      return densityNormal(value, mu, sigma);
    },
    cdf: function cdf(value) {
      return cumulativeNormal(value, mu, sigma);
    },
    icdf: function icdf(p) {
      return quantileNormal(p, mu, sigma);
    }
  };
  return dist.mean(mean).stdev(stdev);
}

function kde(support, _bandwidth) {
  var kernel = gaussian();
  var n = 0;
  var dist = {
    data: function data(_) {
      if (arguments.length) {
        support = _;
        n = _ ? _.length : 0;
        return dist.bandwidth(_bandwidth);
      } else {
        return support;
      }
    },
    bandwidth: function bandwidth(_) {
      if (!arguments.length) return _bandwidth;
      _bandwidth = _;
      if (!_bandwidth && support) _bandwidth = estimateBandwidth(support);
      return dist;
    },
    sample: function sample() {
      return support[~~(vega_statistics_module_random() * n)] + _bandwidth * kernel.sample();
    },
    pdf: function pdf(x) {
      var y = 0,
          i = 0;

      for (; i < n; ++i) {
        y += kernel.pdf((x - support[i]) / _bandwidth);
      }

      return y / _bandwidth / n;
    },
    cdf: function cdf(x) {
      var y = 0,
          i = 0;

      for (; i < n; ++i) {
        y += kernel.cdf((x - support[i]) / _bandwidth);
      }

      return y / n;
    },
    icdf: function icdf() {
      throw Error('KDE icdf not supported.');
    }
  };
  return dist.data(support);
}

function sampleLogNormal(mean, stdev) {
  mean = mean || 0;
  stdev = stdev == null ? 1 : stdev;
  return Math.exp(mean + sampleNormal() * stdev);
}

function densityLogNormal(value, mean, stdev) {
  if (value <= 0) return 0;
  mean = mean || 0;
  stdev = stdev == null ? 1 : stdev;
  var z = (Math.log(value) - mean) / stdev;
  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);
}

function cumulativeLogNormal(value, mean, stdev) {
  return cumulativeNormal(Math.log(value), mean, stdev);
}

function quantileLogNormal(p, mean, stdev) {
  return Math.exp(quantileNormal(p, mean, stdev));
}

function lognormal(mean, stdev) {
  var mu, sigma;
  var dist = {
    mean: function mean(_) {
      if (arguments.length) {
        mu = _ || 0;
        return dist;
      } else {
        return mu;
      }
    },
    stdev: function stdev(_) {
      if (arguments.length) {
        sigma = _ == null ? 1 : _;
        return dist;
      } else {
        return sigma;
      }
    },
    sample: function sample() {
      return sampleLogNormal(mu, sigma);
    },
    pdf: function pdf(value) {
      return densityLogNormal(value, mu, sigma);
    },
    cdf: function cdf(value) {
      return cumulativeLogNormal(value, mu, sigma);
    },
    icdf: function icdf(p) {
      return quantileLogNormal(p, mu, sigma);
    }
  };
  return dist.mean(mean).stdev(stdev);
}

function mixture(dists, _weights) {
  var m = 0,
      w;

  function normalize(x) {
    var w = [];
    var sum = 0,
        i;

    for (i = 0; i < m; ++i) {
      sum += w[i] = x[i] == null ? 1 : +x[i];
    }

    for (i = 0; i < m; ++i) {
      w[i] /= sum;
    }

    return w;
  }

  var dist = {
    weights: function weights(_) {
      if (arguments.length) {
        w = normalize(_weights = _ || []);
        return dist;
      }

      return _weights;
    },
    distributions: function distributions(_) {
      if (arguments.length) {
        if (_) {
          m = _.length;
          dists = _;
        } else {
          m = 0;
          dists = [];
        }

        return dist.weights(_weights);
      }

      return dists;
    },
    sample: function sample() {
      var r = vega_statistics_module_random();
      var d = dists[m - 1],
          v = w[0],
          i = 0; // first select distribution

      for (; i < m - 1; v += w[++i]) {
        if (r < v) {
          d = dists[i];
          break;
        }
      } // then sample from it


      return d.sample();
    },
    pdf: function pdf(x) {
      var p = 0,
          i = 0;

      for (; i < m; ++i) {
        p += w[i] * dists[i].pdf(x);
      }

      return p;
    },
    cdf: function cdf(x) {
      var p = 0,
          i = 0;

      for (; i < m; ++i) {
        p += w[i] * dists[i].cdf(x);
      }

      return p;
    },
    icdf: function icdf() {
      throw Error('Mixture icdf not supported.');
    }
  };
  return dist.distributions(dists).weights(_weights);
}

function sampleUniform(min, max) {
  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  return min + (max - min) * vega_statistics_module_random();
}

function densityUniform(value, min, max) {
  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  return value >= min && value <= max ? 1 / (max - min) : 0;
}

function cumulativeUniform(value, min, max) {
  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);
}

function quantileUniform(p, min, max) {
  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;
}

function uniform(min, max) {
  var a, b;
  var dist = {
    min: function min(_) {
      if (arguments.length) {
        a = _ || 0;
        return dist;
      } else {
        return a;
      }
    },
    max: function max(_) {
      if (arguments.length) {
        b = _ == null ? 1 : _;
        return dist;
      } else {
        return b;
      }
    },
    sample: function sample() {
      return sampleUniform(a, b);
    },
    pdf: function pdf(value) {
      return densityUniform(value, a, b);
    },
    cdf: function cdf(value) {
      return cumulativeUniform(value, a, b);
    },
    icdf: function icdf(p) {
      return quantileUniform(p, a, b);
    }
  };

  if (max == null) {
    max = min == null ? 1 : min;
    min = 0;
  }

  return dist.min(min).max(max);
} // Ordinary Least Squares


function ols(uX, uY, uXY, uX2) {
  var delta = uX2 - uX * uX,
      slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,
      intercept = uY - slope * uX;
  return [intercept, slope];
}

function points(data, x, y, sort) {
  data = data.filter(function (d) {
    var u = x(d),
        v = y(d);
    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
  });

  if (sort) {
    data.sort(function (a, b) {
      return x(a) - x(b);
    });
  }

  var n = data.length,
      X = new Float64Array(n),
      Y = new Float64Array(n); // extract values, calculate means

  var i = 0,
      ux = 0,
      uy = 0,
      xv,
      yv,
      d;

  var _iterator3 = vega_statistics_module_createForOfIteratorHelper(data),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      d = _step3.value;
      X[i] = xv = +x(d);
      Y[i] = yv = +y(d);
      ++i;
      ux += (xv - ux) / i;
      uy += (yv - uy) / i;
    } // mean center the data

  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  for (i = 0; i < n; ++i) {
    X[i] -= ux;
    Y[i] -= uy;
  }

  return [X, Y, ux, uy];
}

function visitPoints(data, x, y, callback) {
  var i = -1,
      u,
      v;

  var _iterator4 = vega_statistics_module_createForOfIteratorHelper(data),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var d = _step4.value;
      u = x(d);
      v = y(d);

      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {
        callback(u, v, ++i);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE


function rSquared(data, x, y, uY, predict) {
  var SSE = 0,
      SST = 0;
  visitPoints(data, x, y, function (dx, dy) {
    var sse = dy - predict(dx),
        sst = dy - uY;
    SSE += sse * sse;
    SST += sst * sst;
  });
  return 1 - SSE / SST;
} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE


function linear(data, x, y) {
  var X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      n = 0;
  visitPoints(data, x, y, function (dx, dy) {
    ++n;
    X += (dx - X) / n;
    Y += (dy - Y) / n;
    XY += (dx * dy - XY) / n;
    X2 += (dx * dx - X2) / n;
  });

  var coef = ols(X, Y, XY, X2),
      predict = function predict(x) {
    return coef[0] + coef[1] * x;
  };

  return {
    coef: coef,
    predict: predict,
    rSquared: rSquared(data, x, y, Y, predict)
  };
} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE


function vega_statistics_module_log(data, x, y) {
  var X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      n = 0;
  visitPoints(data, x, y, function (dx, dy) {
    ++n;
    dx = Math.log(dx);
    X += (dx - X) / n;
    Y += (dy - Y) / n;
    XY += (dx * dy - XY) / n;
    X2 += (dx * dx - X2) / n;
  });

  var coef = ols(X, Y, XY, X2),
      predict = function predict(x) {
    return coef[0] + coef[1] * Math.log(x);
  };

  return {
    coef: coef,
    predict: predict,
    rSquared: rSquared(data, x, y, Y, predict)
  };
}

function vega_statistics_module_exp(data, x, y) {
  // eslint-disable-next-line no-unused-vars
  var _points = points(data, x, y),
      _points2 = (0,slicedToArray/* default */.Z)(_points, 4),
      xv = _points2[0],
      yv = _points2[1],
      ux = _points2[2],
      uy = _points2[3];

  var YL = 0,
      XY = 0,
      XYL = 0,
      X2Y = 0,
      n = 0,
      dx,
      ly,
      xy;
  visitPoints(data, x, y, function (_, dy) {
    dx = xv[n++];
    ly = Math.log(dy);
    xy = dx * dy;
    YL += (dy * ly - YL) / n;
    XY += (xy - XY) / n;
    XYL += (xy * ly - XYL) / n;
    X2Y += (dx * xy - X2Y) / n;
  });

  var _ols = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),
      _ols2 = (0,slicedToArray/* default */.Z)(_ols, 2),
      c0 = _ols2[0],
      c1 = _ols2[1],
      predict = function predict(x) {
    return Math.exp(c0 + c1 * (x - ux));
  };

  return {
    coef: [Math.exp(c0 - c1 * ux), c1],
    predict: predict,
    rSquared: rSquared(data, x, y, uy, predict)
  };
} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE


function vega_statistics_module_pow(data, x, y) {
  var X = 0,
      Y = 0,
      XY = 0,
      X2 = 0,
      YS = 0,
      n = 0;
  visitPoints(data, x, y, function (dx, dy) {
    var lx = Math.log(dx),
        ly = Math.log(dy);
    ++n;
    X += (lx - X) / n;
    Y += (ly - Y) / n;
    XY += (lx * ly - XY) / n;
    X2 += (lx * lx - X2) / n;
    YS += (dy - YS) / n;
  });

  var coef = ols(X, Y, XY, X2),
      predict = function predict(x) {
    return coef[0] * Math.pow(x, coef[1]);
  };

  coef[0] = Math.exp(coef[0]);
  return {
    coef: coef,
    predict: predict,
    rSquared: rSquared(data, x, y, YS, predict)
  };
}

function quad(data, x, y) {
  var _points3 = points(data, x, y),
      _points4 = (0,slicedToArray/* default */.Z)(_points3, 4),
      xv = _points4[0],
      yv = _points4[1],
      ux = _points4[2],
      uy = _points4[3],
      n = xv.length;

  var X2 = 0,
      X3 = 0,
      X4 = 0,
      XY = 0,
      X2Y = 0,
      i,
      dx,
      dy,
      x2;

  for (i = 0; i < n;) {
    dx = xv[i];
    dy = yv[i++];
    x2 = dx * dx;
    X2 += (x2 - X2) / i;
    X3 += (x2 * dx - X3) / i;
    X4 += (x2 * x2 - X4) / i;
    XY += (dx * dy - XY) / i;
    X2Y += (x2 * dy - X2Y) / i;
  }

  var X2X2 = X4 - X2 * X2,
      d = X2 * X2X2 - X3 * X3,
      a = (X2Y * X2 - XY * X3) / d,
      b = (XY * X2X2 - X2Y * X3) / d,
      c = -a * X2,
      predict = function predict(x) {
    x = x - ux;
    return a * x * x + b * x + c + uy;
  }; // transform coefficients back from mean-centered space


  return {
    coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],
    predict: predict,
    rSquared: rSquared(data, x, y, uy, predict)
  };
} // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
// ... which was adapted from regression-js by Tom Alexander
// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE


function poly(data, x, y, order) {
  // use more efficient methods for lower orders
  if (order === 1) return linear(data, x, y);
  if (order === 2) return quad(data, x, y);

  var _points5 = points(data, x, y),
      _points6 = (0,slicedToArray/* default */.Z)(_points5, 4),
      xv = _points6[0],
      yv = _points6[1],
      ux = _points6[2],
      uy = _points6[3],
      n = xv.length,
      lhs = [],
      rhs = [],
      k = order + 1;

  var i, j, l, v, c;

  for (i = 0; i < k; ++i) {
    for (l = 0, v = 0; l < n; ++l) {
      v += Math.pow(xv[l], i) * yv[l];
    }

    lhs.push(v);
    c = new Float64Array(k);

    for (j = 0; j < k; ++j) {
      for (l = 0, v = 0; l < n; ++l) {
        v += Math.pow(xv[l], i + j);
      }

      c[j] = v;
    }

    rhs.push(c);
  }

  rhs.push(lhs);

  var coef = gaussianElimination(rhs),
      predict = function predict(x) {
    x -= ux;
    var y = uy + coef[0] + coef[1] * x + coef[2] * x * x;

    for (i = 3; i < k; ++i) {
      y += coef[i] * Math.pow(x, i);
    }

    return y;
  };

  return {
    coef: uncenter(k, coef, -ux, uy),
    predict: predict,
    rSquared: rSquared(data, x, y, uy, predict)
  };
}

function uncenter(k, a, x, y) {
  var z = Array(k);
  var i, j, v, c; // initialize to zero

  for (i = 0; i < k; ++i) {
    z[i] = 0;
  } // polynomial expansion


  for (i = k - 1; i >= 0; --i) {
    v = a[i];
    c = 1;
    z[i] += v;

    for (j = 1; j <= i; ++j) {
      c *= (i + 1 - j) / j; // binomial coefficent

      z[i - j] += v * Math.pow(x, j) * c;
    }
  } // bias term


  z[0] += y;
  return z;
} // Given an array for a two-dimensional matrix and the polynomial order,
// solve A * x = b using Gaussian elimination.


function gaussianElimination(matrix) {
  var n = matrix.length - 1,
      coef = [];
  var i, j, k, r, t;

  for (i = 0; i < n; ++i) {
    r = i; // max row

    for (j = i + 1; j < n; ++j) {
      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
        r = j;
      }
    }

    for (k = i; k < n + 1; ++k) {
      t = matrix[k][i];
      matrix[k][i] = matrix[k][r];
      matrix[k][r] = t;
    }

    for (j = i + 1; j < n; ++j) {
      for (k = n; k >= i; k--) {
        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
      }
    }
  }

  for (j = n - 1; j >= 0; --j) {
    t = 0;

    for (k = j + 1; k < n; ++k) {
      t += matrix[k][j] * coef[k];
    }

    coef[j] = (matrix[n][j] - t) / matrix[j][j];
  }

  return coef;
}

var maxiters = 2,
    epsilon = 1e-12; // Adapted from science.js by Jason Davies
// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
// License: https://github.com/jasondavies/science.js/blob/master/LICENSE

function loess(data, x, y, bandwidth) {
  var _points7 = points(data, x, y, true),
      _points8 = (0,slicedToArray/* default */.Z)(_points7, 4),
      xv = _points8[0],
      yv = _points8[1],
      ux = _points8[2],
      uy = _points8[3],
      n = xv.length,
      bw = Math.max(2, ~~(bandwidth * n)),
      yhat = new Float64Array(n),
      residuals = new Float64Array(n),
      robustWeights = new Float64Array(n).fill(1);

  for (var iter = -1; ++iter <= maxiters;) {
    var interval = [0, bw - 1];

    for (var i = 0; i < n; ++i) {
      var dx = xv[i],
          i0 = interval[0],
          i1 = interval[1],
          edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
      var W = 0,
          X = 0,
          Y = 0,
          XY = 0,
          X2 = 0;
      var denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!

      for (var k = i0; k <= i1; ++k) {
        var xk = xv[k],
            yk = yv[k],
            w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],
            xkw = xk * w;
        W += w;
        X += xkw;
        Y += yk * w;
        XY += yk * xkw;
        X2 += xk * xkw;
      } // linear regression fit


      var _ols3 = ols(X / W, Y / W, XY / W, X2 / W),
          _ols4 = (0,slicedToArray/* default */.Z)(_ols3, 2),
          a = _ols4[0],
          b = _ols4[1];

      yhat[i] = a + b * dx;
      residuals[i] = Math.abs(yv[i] - yhat[i]);
      updateInterval(xv, i + 1, interval);
    }

    if (iter === maxiters) {
      break;
    }

    var medianResidual = median(residuals);
    if (Math.abs(medianResidual) < epsilon) break;

    for (var _i = 0, arg, _w; _i < n; ++_i) {
      arg = residuals[_i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations
      // keeping weights tiny but non-zero prevents singularites

      robustWeights[_i] = arg >= 1 ? epsilon : (_w = 1 - arg * arg) * _w;
    }
  }

  return output(xv, yhat, ux, uy);
} // weighting kernel for local regression


function tricube(x) {
  return (x = 1 - x * x * x) * x * x;
} // advance sliding window interval of nearest neighbors


function updateInterval(xv, i, interval) {
  var val = xv[i];
  var left = interval[0],
      right = interval[1] + 1;
  if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge
  // step when distance is equal to ensure movement over duplicate x values

  while (i > left && xv[right] - val <= val - xv[left]) {
    interval[0] = ++left;
    interval[1] = right;
    ++right;
  }
} // generate smoothed output points
// average points with repeated x values


function output(xv, yhat, ux, uy) {
  var n = xv.length,
      out = [];
  var i = 0,
      cnt = 0,
      prev = [],
      v;

  for (; i < n; ++i) {
    v = xv[i] + ux;

    if (prev[0] === v) {
      // average output values via online update
      prev[1] += (yhat[i] - prev[1]) / ++cnt;
    } else {
      // add new output point
      cnt = 0;
      prev[1] += uy;
      prev = [v, yhat[i]];
      out.push(prev);
    }
  }

  prev[1] += uy;
  return out;
} // subdivide up to accuracy of 0.1 degrees


var MIN_RADIANS = 0.1 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent

function sampleCurve(f, extent, minSteps, maxSteps) {
  minSteps = minSteps || 25;
  maxSteps = Math.max(minSteps, maxSteps || 200);

  var point = function point(x) {
    return [x, f(x)];
  },
      minX = extent[0],
      maxX = extent[1],
      span = maxX - minX,
      stop = span / maxSteps,
      prev = [point(minX)],
      next = [];

  if (minSteps === maxSteps) {
    // no adaptation, sample uniform grid directly and return
    for (var i = 1; i < maxSteps; ++i) {
      prev.push(point(minX + i / minSteps * span));
    }

    prev.push(point(maxX));
    return prev;
  } else {
    // sample minimum points on uniform grid
    // then move on to perform adaptive refinement
    next.push(point(maxX));

    for (var _i2 = minSteps; --_i2 > 0;) {
      next.push(point(minX + _i2 / minSteps * span));
    }
  }

  var p0 = prev[0],
      p1 = next[next.length - 1];

  while (p1) {
    // midpoint for potential curve subdivision
    var pm = point((p0[0] + p1[0]) / 2);

    if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {
      // maximum resolution has not yet been met, and
      // subdivision midpoint sufficiently different from endpoint
      // save subdivision, push midpoint onto the visitation stack
      next.push(pm);
    } else {
      // subdivision midpoint sufficiently similar to endpoint
      // skip subdivision, store endpoint, move to next point on the stack
      p0 = p1;
      prev.push(p1);
      next.pop();
    }

    p1 = next[next.length - 1];
  }

  return prev;
}

function angleDelta(p, q, r) {
  var a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),
      a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);
  return Math.abs(a0 - a1);
}


;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/max.js
function max_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = max_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function max_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return max_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return max_arrayLikeToArray(o, minLen); }

function max_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function src_max_max(values, valueof) {
  var max;

  if (valueof === undefined) {
    var _iterator = max_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (max < value || max === undefined && value >= value)) {
          max = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = max_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {
          max = _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return max;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/min.js
function src_min_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_min_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function src_min_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_min_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_min_arrayLikeToArray(o, minLen); }

function src_min_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function src_min_min(values, valueof) {
  var min;

  if (valueof === undefined) {
    var _iterator = src_min_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (min > value || min === undefined && value >= value)) {
          min = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = src_min_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (min > _value || min === undefined && _value >= _value)) {
          min = _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return min;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/ascending.js
/* harmony default export */ function node_modules_d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/quickselect.js
 // Based on https://github.com/mourner/quickselect
// ISC license, Copyright 2018 Vladimir Agafonkin.

function src_quickselect_quickselect(array, k) {
  var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;
  var compare = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : node_modules_d3_array_src_ascending;

  while (right > left) {
    if (right - left > 600) {
      var n = right - left + 1;
      var m = k - left + 1;
      var z = Math.log(n);
      var s = 0.5 * Math.exp(2 * z / 3);
      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      src_quickselect_quickselect(array, k, newLeft, newRight, compare);
    }

    var t = array[k];
    var i = left;
    var j = right;
    quickselect_swap(array, left, k);
    if (compare(array[right], t) > 0) quickselect_swap(array, left, right);

    while (i < j) {
      quickselect_swap(array, i, j), ++i, --j;

      while (compare(array[i], t) < 0) {
        ++i;
      }

      while (compare(array[j], t) > 0) {
        --j;
      }
    }

    if (compare(array[left], t) === 0) quickselect_swap(array, left, j);else ++j, quickselect_swap(array, j, right);
    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }

  return array;
}

function quickselect_swap(array, i, j) {
  var t = array[i];
  array[i] = array[j];
  array[j] = t;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/number.js


var number_marked = /*#__PURE__*/regenerator_default().mark(src_number_numbers);

function src_number_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_number_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function src_number_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_number_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_number_arrayLikeToArray(o, minLen); }

function src_number_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function d3_array_src_number(x) {
  return x === null ? NaN : +x;
}
function src_number_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof === undefined)) {
            _context.next = 21;
            break;
          }

          _iterator = src_number_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 40;
          break;

        case 21:
          index = -1;
          _iterator2 = src_number_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 32;
            break;
          }

          _value = _step2.value;

          if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
            _context.next = 30;
            break;
          }

          _context.next = 30;
          return _value;

        case 30:
          _context.next = 25;
          break;

        case 32:
          _context.next = 37;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 37:
          _context.prev = 37;

          _iterator2.f();

          return _context.finish(37);

        case 40:
        case "end":
          return _context.stop();
      }
    }
  }, number_marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/quantile.js




function quantile_quantile(values, p, valueof) {
  values = Float64Array.from(src_number_numbers(values, valueof));
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return src_min_min(values);
  if (p >= 1) return src_max_max(values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = src_max_max(src_quickselect_quickselect(values, i0).subarray(0, i0 + 1)),
      value1 = src_min_min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}
function quantile_quantileSorted(values, p) {
  var valueof = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/median.js

/* harmony default export */ function src_median(values, valueof) {
  return quantile_quantile(values, 0.5, valueof);
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/mean.js
function mean_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mean_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function mean_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mean_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mean_arrayLikeToArray(o, minLen); }

function mean_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function mean(values, valueof) {
  var count = 0;
  var sum = 0;

  if (valueof === undefined) {
    var _iterator = mean_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (value = +value) >= value) {
          ++count, sum += value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = mean_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
          ++count, sum += _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  if (count) return sum / count;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/range.js
/* harmony default export */ function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/node_modules/d3-array/src/bisector.js

/* harmony default export */ function src_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = bisector_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function bisector_ascendingComparator(f) {
  return function (d, x) {
    return node_modules_d3_array_src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-transforms/build/vega-transforms.module.js


function vega_transforms_module_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = vega_transforms_module_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function vega_transforms_module_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return vega_transforms_module_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vega_transforms_module_arrayLikeToArray(o, minLen); }

function vega_transforms_module_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







function multikey(f) {
  return function (x) {
    var n = f.length;
    var i = 1,
        k = String(f[0](x));

    for (; i < n; ++i) {
      k += '|' + f[i](x);
    }

    return k;
  };
}

function groupkey(fields) {
  return !fields || !fields.length ? function () {
    return '';
  } : fields.length === 1 ? fields[0] : multikey(fields);
}

function measureName(op, field, as) {
  return as || op + (!field ? '' : '_' + field);
}

var noop = function noop() {};

var base_op = {
  init: noop,
  add: noop,
  rem: noop,
  idx: 0
};
var AggregateOps = {
  values: {
    init: function init(m) {
      return m.cell.store = true;
    },
    value: function value(m) {
      return m.cell.data.values();
    },
    idx: -1
  },
  count: {
    value: function value(m) {
      return m.cell.num;
    }
  },
  __count__: {
    value: function value(m) {
      return m.missing + m.valid;
    }
  },
  missing: {
    value: function value(m) {
      return m.missing;
    }
  },
  valid: {
    value: function value(m) {
      return m.valid;
    }
  },
  sum: {
    init: function init(m) {
      return m.sum = 0;
    },
    value: function value(m) {
      return m.sum;
    },
    add: function add(m, v) {
      return m.sum += +v;
    },
    rem: function rem(m, v) {
      return m.sum -= v;
    }
  },
  product: {
    init: function init(m) {
      return m.product = 1;
    },
    value: function value(m) {
      return m.valid ? m.product : undefined;
    },
    add: function add(m, v) {
      return m.product *= v;
    },
    rem: function rem(m, v) {
      return m.product /= v;
    }
  },
  mean: {
    init: function init(m) {
      return m.mean = 0;
    },
    value: function value(m) {
      return m.valid ? m.mean : undefined;
    },
    add: function add(m, v) {
      return m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid;
    },
    rem: function rem(m, v) {
      return m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean;
    }
  },
  average: {
    value: function value(m) {
      return m.valid ? m.mean : undefined;
    },
    req: ['mean'],
    idx: 1
  },
  variance: {
    init: function init(m) {
      return m.dev = 0;
    },
    value: function value(m) {
      return m.valid > 1 ? m.dev / (m.valid - 1) : undefined;
    },
    add: function add(m, v) {
      return m.dev += m.mean_d * (v - m.mean);
    },
    rem: function rem(m, v) {
      return m.dev -= m.mean_d * (v - m.mean);
    },
    req: ['mean'],
    idx: 1
  },
  variancep: {
    value: function value(m) {
      return m.valid > 1 ? m.dev / m.valid : undefined;
    },
    req: ['variance'],
    idx: 2
  },
  stdev: {
    value: function value(m) {
      return m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined;
    },
    req: ['variance'],
    idx: 2
  },
  stdevp: {
    value: function value(m) {
      return m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined;
    },
    req: ['variance'],
    idx: 2
  },
  stderr: {
    value: function value(m) {
      return m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined;
    },
    req: ['variance'],
    idx: 2
  },
  distinct: {
    value: function value(m) {
      return m.cell.data.distinct(m.get);
    },
    req: ['values'],
    idx: 3
  },
  ci0: {
    value: function value(m) {
      return m.cell.data.ci0(m.get);
    },
    req: ['values'],
    idx: 3
  },
  ci1: {
    value: function value(m) {
      return m.cell.data.ci1(m.get);
    },
    req: ['values'],
    idx: 3
  },
  median: {
    value: function value(m) {
      return m.cell.data.q2(m.get);
    },
    req: ['values'],
    idx: 3
  },
  q1: {
    value: function value(m) {
      return m.cell.data.q1(m.get);
    },
    req: ['values'],
    idx: 3
  },
  q3: {
    value: function value(m) {
      return m.cell.data.q3(m.get);
    },
    req: ['values'],
    idx: 3
  },
  min: {
    init: function init(m) {
      return m.min = undefined;
    },
    value: function value(m) {
      return m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min;
    },
    add: function add(m, v) {
      if (v < m.min || m.min === undefined) m.min = v;
    },
    rem: function rem(m, v) {
      if (v <= m.min) m.min = NaN;
    },
    req: ['values'],
    idx: 4
  },
  max: {
    init: function init(m) {
      return m.max = undefined;
    },
    value: function value(m) {
      return m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max;
    },
    add: function add(m, v) {
      if (v > m.max || m.max === undefined) m.max = v;
    },
    rem: function rem(m, v) {
      if (v >= m.max) m.max = NaN;
    },
    req: ['values'],
    idx: 4
  },
  argmin: {
    init: function init(m) {
      return m.argmin = undefined;
    },
    value: function value(m) {
      return m.argmin || m.cell.data.argmin(m.get);
    },
    add: function add(m, v, t) {
      if (v < m.min) m.argmin = t;
    },
    rem: function rem(m, v) {
      if (v <= m.min) m.argmin = undefined;
    },
    req: ['min', 'values'],
    idx: 3
  },
  argmax: {
    init: function init(m) {
      return m.argmax = undefined;
    },
    value: function value(m) {
      return m.argmax || m.cell.data.argmax(m.get);
    },
    add: function add(m, v, t) {
      if (v > m.max) m.argmax = t;
    },
    rem: function rem(m, v) {
      if (v >= m.max) m.argmax = undefined;
    },
    req: ['max', 'values'],
    idx: 3
  }
};
var ValidAggregateOps = Object.keys(AggregateOps);

function measure(key, value) {
  return function (out) {
    return extend({
      name: key,
      out: out || key
    }, base_op, value);
  };
}

ValidAggregateOps.forEach(function (key) {
  AggregateOps[key] = measure(key, AggregateOps[key]);
});

function createMeasure(op, name) {
  return AggregateOps[op](name);
}

function compareIndex(a, b) {
  return a.idx - b.idx;
}

function resolve(agg) {
  var map = {};
  agg.forEach(function (a) {
    return map[a.name] = a;
  });

  var getreqs = function getreqs(a) {
    if (!a.req) return;
    a.req.forEach(function (key) {
      if (!map[key]) getreqs(map[key] = AggregateOps[key]());
    });
  };

  agg.forEach(getreqs);
  return Object.values(map).sort(compareIndex);
}

function init() {
  var _this = this;

  this.valid = 0;
  this.missing = 0;

  this._ops.forEach(function (op) {
    return op.init(_this);
  });
}

function vega_transforms_module_add(v, t) {
  var _this2 = this;

  if (v == null || v === '') {
    ++this.missing;
    return;
  }

  if (v !== v) return;
  ++this.valid;

  this._ops.forEach(function (op) {
    return op.add(_this2, v, t);
  });
}

function rem(v, t) {
  var _this3 = this;

  if (v == null || v === '') {
    --this.missing;
    return;
  }

  if (v !== v) return;
  --this.valid;

  this._ops.forEach(function (op) {
    return op.rem(_this3, v, t);
  });
}

function set(t) {
  var _this4 = this;

  this._out.forEach(function (op) {
    return t[op.out] = op.value(_this4);
  });

  return t;
}

function compileMeasures(agg, field) {
  var get = field || identity,
      ops = resolve(agg),
      out = agg.slice().sort(compareIndex);

  function ctr(cell) {
    this._ops = ops;
    this._out = out;
    this.cell = cell;
    this.init();
  }

  ctr.prototype.init = init;
  ctr.prototype.add = vega_transforms_module_add;
  ctr.prototype.rem = rem;
  ctr.prototype.set = set;
  ctr.prototype.get = get;
  ctr.fields = agg.map(function (op) {
    return op.out;
  });
  return ctr;
}

function TupleStore(key) {
  this._key = key ? field(key) : tupleid;
  this.reset();
}

var prototype$1 = TupleStore.prototype;

prototype$1.reset = function () {
  this._add = [];
  this._rem = [];
  this._ext = null;
  this._get = null;
  this._q = null;
};

prototype$1.add = function (v) {
  this._add.push(v);
};

prototype$1.rem = function (v) {
  this._rem.push(v);
};

prototype$1.values = function () {
  this._get = null;
  if (this._rem.length === 0) return this._add;
  var a = this._add,
      r = this._rem,
      k = this._key,
      n = a.length,
      m = r.length,
      x = Array(n - m),
      map = {};
  var i, j, v; // use unique key field to clear removed values

  for (i = 0; i < m; ++i) {
    map[k(r[i])] = 1;
  }

  for (i = 0, j = 0; i < n; ++i) {
    if (map[k(v = a[i])]) {
      map[k(v)] = 0;
    } else {
      x[j++] = v;
    }
  }

  this._rem = [];
  return this._add = x;
}; // memoizing statistics methods


prototype$1.distinct = function (get) {
  var v = this.values(),
      map = {};
  var n = v.length,
      count = 0,
      s;

  while (--n >= 0) {
    s = get(v[n]) + '';

    if (!_has(map, s)) {
      map[s] = 1;
      ++count;
    }
  }

  return count;
};

prototype$1.extent = function (get) {
  if (this._get !== get || !this._ext) {
    var v = this.values(),
        i = extentIndex(v, get);
    this._ext = [v[i[0]], v[i[1]]];
    this._get = get;
  }

  return this._ext;
};

prototype$1.argmin = function (get) {
  return this.extent(get)[0] || {};
};

prototype$1.argmax = function (get) {
  return this.extent(get)[1] || {};
};

prototype$1.min = function (get) {
  var m = this.extent(get)[0];
  return m != null ? get(m) : undefined;
};

prototype$1.max = function (get) {
  var m = this.extent(get)[1];
  return m != null ? get(m) : undefined;
};

prototype$1.quartile = function (get) {
  if (this._get !== get || !this._q) {
    this._q = quartiles(this.values(), get);
    this._get = get;
  }

  return this._q;
};

prototype$1.q1 = function (get) {
  return this.quartile(get)[0];
};

prototype$1.q2 = function (get) {
  return this.quartile(get)[1];
};

prototype$1.q3 = function (get) {
  return this.quartile(get)[2];
};

prototype$1.ci = function (get) {
  if (this._get !== get || !this._ci) {
    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);
    this._get = get;
  }

  return this._ci;
};

prototype$1.ci0 = function (get) {
  return this.ci(get)[0];
};

prototype$1.ci1 = function (get) {
  return this.ci(get)[1];
};
/**
 * Group-by aggregation operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
 * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
 * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
 * @param {boolean} [params.cross=false] - A flag indicating that the full
 *   cross-product of groupby values should be generated, including empty cells.
 *   If true, the drop parameter is ignored and empty cells are retained.
 * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
 */


function Aggregate(params) {
  Transform.call(this, null, params);
  this._adds = []; // array of added output tuples

  this._mods = []; // array of modified output tuples

  this._alen = 0; // number of active added tuples

  this._mlen = 0; // number of active modified tuples

  this._drop = true; // should empty aggregation cells be removed

  this._cross = false; // produce full cross-product of group-by values

  this._dims = []; // group-by dimension accessors

  this._dnames = []; // group-by dimension names

  this._measures = []; // collection of aggregation monoids

  this._countOnly = false; // flag indicating only count aggregation

  this._counts = null; // collection of count fields

  this._prev = null; // previous aggregation cells

  this._inputs = null; // array of dependent input tuple field names

  this._outputs = null; // array of output tuple field names
}

Aggregate.Definition = {
  'type': 'Aggregate',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'ops',
    'type': 'enum',
    'array': true,
    'values': ValidAggregateOps
  }, {
    'name': 'fields',
    'type': 'field',
    'null': true,
    'array': true
  }, {
    'name': 'as',
    'type': 'string',
    'null': true,
    'array': true
  }, {
    'name': 'drop',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'cross',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'key',
    'type': 'field'
  }]
};
vega_util_module_inherits(Aggregate, Transform, {
  transform: function transform(_, pulse) {
    var _this5 = this;

    var aggr = this,
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        mod = _.modified();

    aggr.stamp = out.stamp;

    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
      aggr._prev = aggr.value;
      aggr.value = mod ? aggr.init(_) : {};
      pulse.visit(pulse.SOURCE, function (t) {
        return aggr.add(t);
      });
    } else {
      aggr.value = aggr.value || aggr.init(_);
      pulse.visit(pulse.REM, function (t) {
        return aggr.rem(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        return aggr.add(t);
      });
    } // Indicate output fields and return aggregate tuples.


    out.modifies(aggr._outputs); // Should empty cells be dropped?

    aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed
    // and ensure that empty cells are not dropped

    if (_.cross && aggr._dims.length > 1) {
      aggr._drop = false;
      aggr.cross();
    }

    if (pulse.clean() && aggr._drop) {
      out.clean(true).runAfter(function () {
        return _this5.clean();
      });
    }

    return aggr.changes(out);
  },
  cross: function cross() {
    var aggr = this,
        curr = aggr.value,
        dims = aggr._dnames,
        vals = dims.map(function () {
      return {};
    }),
        n = dims.length; // collect all group-by domain values

    function collect(cells) {
      var key, i, t, v;

      for (key in cells) {
        t = cells[key].tuple;

        for (i = 0; i < n; ++i) {
          vals[i][v = t[dims[i]]] = v;
        }
      }
    }

    collect(aggr._prev);
    collect(curr); // iterate over key cross-product, create cells as needed

    function generate(base, tuple, index) {
      var name = dims[index],
          v = vals[index++];

      for (var k in v) {
        var _key = base ? base + '|' + k : k;

        tuple[name] = v[k];
        if (index < n) generate(_key, tuple, index);else if (!curr[_key]) aggr.cell(_key, tuple);
      }
    }

    generate('', {}, 0);
  },
  init: function init(_) {
    // initialize input and output fields
    var inputs = this._inputs = [],
        outputs = this._outputs = [],
        inputMap = {};

    function inputVisit(get) {
      var fields = array(accessorFields(get)),
          n = fields.length;
      var i = 0,
          f;

      for (; i < n; ++i) {
        if (!inputMap[f = fields[i]]) {
          inputMap[f] = 1;
          inputs.push(f);
        }
      }
    } // initialize group-by dimensions


    this._dims = array(_.groupby);
    this._dnames = this._dims.map(function (d) {
      var dname = accessorName(d);
      inputVisit(d);
      outputs.push(dname);
      return dname;
    });
    this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures

    this._countOnly = true;
    this._counts = [];
    this._measures = [];
    var fields = _.fields || [null],
        ops = _.ops || ['count'],
        as = _.as || [],
        n = fields.length,
        map = {};
    var field, op, m, mname, outname, i;

    if (n !== ops.length) {
      error('Unmatched number of fields and aggregate ops.');
    }

    for (i = 0; i < n; ++i) {
      field = fields[i];
      op = ops[i];

      if (field == null && op !== 'count') {
        error('Null aggregate field specified.');
      }

      mname = accessorName(field);
      outname = measureName(op, mname, as[i]);
      outputs.push(outname);

      if (op === 'count') {
        this._counts.push(outname);

        continue;
      }

      m = map[mname];

      if (!m) {
        inputVisit(field);
        m = map[mname] = [];
        m.field = field;

        this._measures.push(m);
      }

      if (op !== 'count') this._countOnly = false;
      m.push(createMeasure(op, outname));
    }

    this._measures = this._measures.map(function (m) {
      return compileMeasures(m, m.field);
    });
    return {}; // aggregation cells (this.value)
  },
  // -- Cell Management -----
  cellkey: groupkey(),
  cell: function cell(key, t) {
    var cell = this.value[key];

    if (!cell) {
      cell = this.value[key] = this.newcell(key, t);
      this._adds[this._alen++] = cell;
    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
      cell.stamp = this.stamp;
      this._adds[this._alen++] = cell;
    } else if (cell.stamp < this.stamp) {
      cell.stamp = this.stamp;
      this._mods[this._mlen++] = cell;
    }

    return cell;
  },
  newcell: function newcell(key, t) {
    var cell = {
      key: key,
      num: 0,
      agg: null,
      tuple: this.newtuple(t, this._prev && this._prev[key]),
      stamp: this.stamp,
      store: false
    };

    if (!this._countOnly) {
      var measures = this._measures,
          n = measures.length;
      cell.agg = Array(n);

      for (var i = 0; i < n; ++i) {
        cell.agg[i] = new measures[i](cell);
      }
    }

    if (cell.store) {
      cell.data = new TupleStore();
    }

    return cell;
  },
  newtuple: function newtuple(t, p) {
    var names = this._dnames,
        dims = this._dims,
        n = dims.length,
        x = {};

    for (var i = 0; i < n; ++i) {
      x[names[i]] = dims[i](t);
    }

    return p ? replace(p.tuple, x) : ingest$1(x);
  },
  clean: function clean() {
    var cells = this.value;

    for (var _key2 in cells) {
      if (cells[_key2].num === 0) {
        delete cells[_key2];
      }
    }
  },
  // -- Process Tuples -----
  add: function add(t) {
    var key = this.cellkey(t),
        cell = this.cell(key, t);
    cell.num += 1;
    if (this._countOnly) return;
    if (cell.store) cell.data.add(t);
    var agg = cell.agg;

    for (var i = 0, n = agg.length; i < n; ++i) {
      agg[i].add(agg[i].get(t), t);
    }
  },
  rem: function rem(t) {
    var key = this.cellkey(t),
        cell = this.cell(key, t);
    cell.num -= 1;
    if (this._countOnly) return;
    if (cell.store) cell.data.rem(t);
    var agg = cell.agg;

    for (var i = 0, n = agg.length; i < n; ++i) {
      agg[i].rem(agg[i].get(t), t);
    }
  },
  celltuple: function celltuple(cell) {
    var tuple = cell.tuple,
        counts = this._counts; // consolidate stored values

    if (cell.store) {
      cell.data.values();
    } // update tuple properties


    for (var i = 0, n = counts.length; i < n; ++i) {
      tuple[counts[i]] = cell.num;
    }

    if (!this._countOnly) {
      var agg = cell.agg;

      for (var _i = 0, _n = agg.length; _i < _n; ++_i) {
        agg[_i].set(tuple);
      }
    }

    return tuple;
  },
  changes: function changes(out) {
    var adds = this._adds,
        mods = this._mods,
        prev = this._prev,
        drop = this._drop,
        add = out.add,
        rem = out.rem,
        mod = out.mod;
    var cell, key, i, n;
    if (prev) for (key in prev) {
      cell = prev[key];
      if (!drop || cell.num) rem.push(cell.tuple);
    }

    for (i = 0, n = this._alen; i < n; ++i) {
      add.push(this.celltuple(adds[i]));
      adds[i] = null; // for garbage collection
    }

    for (i = 0, n = this._mlen; i < n; ++i) {
      cell = mods[i];
      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
      mods[i] = null; // for garbage collection
    }

    this._alen = this._mlen = 0; // reset list of active cells

    this._prev = null;
    return out;
  }
});
var EPSILON$1 = 1e-14;
/**
 * Generates a binning function for discretizing data.
 * @constructor
 * @param {object} params - The parameters for this operator. The
 *   provided values should be valid options for the {@link bin} function.
 * @param {function(object): *} params.field - The data field to bin.
 */

function Bin(params) {
  Transform.call(this, null, params);
}

Bin.Definition = {
  'type': 'Bin',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'interval',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'anchor',
    'type': 'number'
  }, {
    'name': 'maxbins',
    'type': 'number',
    'default': 20
  }, {
    'name': 'base',
    'type': 'number',
    'default': 10
  }, {
    'name': 'divide',
    'type': 'number',
    'array': true,
    'default': [5, 2]
  }, {
    'name': 'extent',
    'type': 'number',
    'array': true,
    'length': 2,
    'required': true
  }, {
    'name': 'span',
    'type': 'number'
  }, {
    'name': 'step',
    'type': 'number'
  }, {
    'name': 'steps',
    'type': 'number',
    'array': true
  }, {
    'name': 'minstep',
    'type': 'number',
    'default': 0
  }, {
    'name': 'nice',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'name',
    'type': 'string'
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['bin0', 'bin1']
  }]
};
vega_util_module_inherits(Bin, Transform, {
  transform: function transform(_, pulse) {
    var band = _.interval !== false,
        bins = this._bins(_),
        start = bins.start,
        step = bins.step,
        as = _.as || ['bin0', 'bin1'],
        b0 = as[0],
        b1 = as[1];

    var flag;

    if (_.modified()) {
      pulse = pulse.reflow(true);
      flag = pulse.SOURCE;
    } else {
      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;
    }

    pulse.visit(flag, band ? function (t) {
      var v = bins(t); // minimum bin value (inclusive)

      t[b0] = v; // maximum bin value (exclusive)
      // use convoluted math for better floating point agreement
      // see https://github.com/vega/vega/issues/830
      // infinite values propagate through this formula! #2227

      t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
    } : function (t) {
      return t[b0] = bins(t);
    });
    return pulse.modifies(band ? as : b0);
  },
  _bins: function _bins(_) {
    if (this.value && !_.modified()) {
      return this.value;
    }

    var field = _.field,
        bins = vega_statistics_module_bin(_),
        step = bins.step;
    var start = bins.start,
        stop = start + Math.ceil((bins.stop - start) / step) * step,
        a,
        d;

    if ((a = _.anchor) != null) {
      d = a - (start + step * Math.floor((a - start) / step));
      start += d;
      stop += d;
    }

    var f = function f(t) {
      var v = toNumber(field(t));
      return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));
    };

    f.start = start;
    f.stop = bins.stop;
    f.step = step;
    return this.value = accessor(f, accessorFields(field), _.name || 'bin_' + accessorName(field));
  }
});

function SortedList(idFunc, source, input) {
  var $ = idFunc;

  var _data = source || [],
      _add = input || [],
      rem = {},
      cnt = 0;

  return {
    add: function add(t) {
      return _add.push(t);
    },
    remove: function remove(t) {
      return rem[$(t)] = ++cnt;
    },
    size: function size() {
      return _data.length;
    },
    data: function data(compare, resort) {
      if (cnt) {
        _data = _data.filter(function (t) {
          return !rem[$(t)];
        });
        rem = {};
        cnt = 0;
      }

      if (resort && compare) {
        _data.sort(compare);
      }

      if (_add.length) {
        _data = compare ? merge(compare, _data, _add.sort(compare)) : _data.concat(_add);
        _add = [];
      }

      return _data;
    }
  };
}
/**
 * Collects all data tuples that pass through this operator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for additionally sorting the collected tuples.
 */


function Collect(params) {
  Transform.call(this, [], params);
}

Collect.Definition = {
  'type': 'Collect',
  'metadata': {
    'source': true
  },
  'params': [{
    'name': 'sort',
    'type': 'compare'
  }]
};
vega_util_module_inherits(Collect, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ALL),
        list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),
        sort = _.sort,
        mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));
    out.visit(out.REM, list.remove);
    this.modified(mod);
    this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined

    if (pulse.source && pulse.source.root) {
      this.value.root = pulse.source.root;
    }

    return out;
  }
});
/**
 * Generates a comparator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string|function>} params.fields - The fields to compare.
 * @param {Array<string>} [params.orders] - The sort orders.
 *   Each entry should be one of "ascending" (default) or "descending".
 */

function Compare(params) {
  Operator.call(this, null, update$5, params);
}

vega_util_module_inherits(Compare, Operator);

function update$5(_) {
  return this.value && !_.modified() ? this.value : vega_util_module_compare(_.fields, _.orders);
}
/**
 * Count regexp-defined pattern occurrences in a text field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the text field.
 * @param {string} [params.pattern] - RegExp string defining the text pattern.
 * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
 * @param {string} [params.stopwords] - RegExp string of words to ignore.
 */


function CountPattern(params) {
  Transform.call(this, null, params);
}

CountPattern.Definition = {
  'type': 'CountPattern',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'case',
    'type': 'enum',
    'values': ['upper', 'lower', 'mixed'],
    'default': 'mixed'
  }, {
    'name': 'pattern',
    'type': 'string',
    'default': '[\\w"]+'
  }, {
    'name': 'stopwords',
    'type': 'string',
    'default': ''
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['text', 'count']
  }]
};

function tokenize(text, tcase, match) {
  switch (tcase) {
    case 'upper':
      text = text.toUpperCase();
      break;

    case 'lower':
      text = text.toLowerCase();
      break;
  }

  return text.match(match);
}

vega_util_module_inherits(CountPattern, Transform, {
  transform: function transform(_, pulse) {
    var process = function process(update) {
      return function (tuple) {
        var tokens = tokenize(get(tuple), _.case, match) || [],
            t;

        for (var i = 0, n = tokens.length; i < n; ++i) {
          if (!stop.test(t = tokens[i])) update(t);
        }
      };
    };

    var init = this._parameterCheck(_, pulse),
        counts = this._counts,
        match = this._match,
        stop = this._stop,
        get = _.field,
        as = _.as || ['text', 'count'],
        add = process(function (t) {
      return counts[t] = 1 + (counts[t] || 0);
    }),
        rem = process(function (t) {
      return counts[t] -= 1;
    });

    if (init) {
      pulse.visit(pulse.SOURCE, add);
    } else {
      pulse.visit(pulse.ADD, add);
      pulse.visit(pulse.REM, rem);
    }

    return this._finish(pulse, as); // generate output tuples
  },
  _parameterCheck: function _parameterCheck(_, pulse) {
    var init = false;

    if (_.modified('stopwords') || !this._stop) {
      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
      init = true;
    }

    if (_.modified('pattern') || !this._match) {
      this._match = new RegExp(_.pattern || '[\\w\']+', 'g');
      init = true;
    }

    if (_.modified('field') || pulse.modified(_.field.fields)) {
      init = true;
    }

    if (init) this._counts = {};
    return init;
  },
  _finish: function _finish(pulse, as) {
    var counts = this._counts,
        tuples = this._tuples || (this._tuples = {}),
        text = as[0],
        count = as[1],
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    var w, t, c;

    for (w in counts) {
      t = tuples[w];
      c = counts[w] || 0;

      if (!t && c) {
        tuples[w] = t = ingest$1({});
        t[text] = w;
        t[count] = c;
        out.add.push(t);
      } else if (c === 0) {
        if (t) out.rem.push(t);
        counts[w] = null;
        tuples[w] = null;
      } else if (t[count] !== c) {
        t[count] = c;
        out.mod.push(t);
      }
    }

    return out.modifies(as);
  }
});
/**
 * Perform a cross-product of a tuple stream with itself.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object):boolean} [params.filter] - An optional filter
 *   function for selectively including tuples in the cross product.
 * @param {Array<string>} [params.as] - The names of the output fields.
 */

function Cross(params) {
  Transform.call(this, null, params);
}

Cross.Definition = {
  'type': 'Cross',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'filter',
    'type': 'expr'
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['a', 'b']
  }]
};
vega_util_module_inherits(Cross, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        as = _.as || ['a', 'b'],
        a = as[0],
        b = as[1],
        reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');

    var data = this.value;

    if (reset) {
      if (data) out.rem = data;
      data = pulse.materialize(pulse.SOURCE).source;
      out.add = this.value = cross(data, a, b, _.filter || truthy);
    } else {
      out.mod = data;
    }

    out.source = this.value;
    return out.modifies(as);
  }
});

function cross(input, a, b, filter) {
  var data = [],
      t = {},
      n = input.length,
      i = 0,
      j,
      left;

  for (; i < n; ++i) {
    t[a] = left = input[i];

    for (j = 0; j < n; ++j) {
      t[b] = input[j];

      if (filter(t)) {
        data.push(ingest$1(t));
        t = {};
        t[a] = left;
      }
    }
  }

  return data;
}

var Distributions = {
  kde: kde,
  mixture: mixture,
  normal: gaussian,
  lognormal: lognormal,
  uniform: uniform
};
var DISTRIBUTIONS = 'distributions',
    FUNCTION = 'function',
    FIELD = 'field';
/**
 * Parse a parameter object for a probability distribution.
 * @param {object} def - The distribution parameter object.
 * @param {function():Array<object>} - A method for requesting
 *   source data. Used for distributions (such as KDE) that
 *   require sample data points. This method will only be
 *   invoked if the 'from' parameter for a target data source
 *   is not provided. Typically this method returns backing
 *   source data for a Pulse object.
 * @return {object} - The output distribution object.
 */

function vega_transforms_module_parse(def, data) {
  var func = def[FUNCTION];

  if (!_has(Distributions, func)) {
    error('Unknown distribution function: ' + func);
  }

  var d = Distributions[func]();

  for (var name in def) {
    // if data field, extract values
    if (name === FIELD) {
      d.data((def.from || data()).map(def[name]));
    } // if distribution mixture, recurse to parse each definition
    else if (name === DISTRIBUTIONS) {
        d[name](def[name].map(function (_) {
          return vega_transforms_module_parse(_, data);
        }));
      } // otherwise, simply set the parameter
      else if (typeof d[name] === FUNCTION) {
          d[name](def[name]);
        }
  }

  return d;
}
/**
 * Grid sample points for a probability density. Given a distribution and
 * a sampling extent, will generate points suitable for plotting either
 * PDF (probability density function) or CDF (cumulative distribution
 * function) curves.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.distribution - The probability distribution. This
 *   is an object parameter dependent on the distribution type.
 * @param {string} [params.method='pdf'] - The distribution method to sample.
 *   One of 'pdf' or 'cdf'.
 * @param {Array<number>} [params.extent] - The [min, max] extent over which
 *   to sample the distribution. This argument is required in most cases, but
 *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
 *   that returns numerical sample points from which the extent can be deduced.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */


function Density(params) {
  Transform.call(this, null, params);
}

var distributions = [{
  'key': {
    'function': 'normal'
  },
  'params': [{
    'name': 'mean',
    'type': 'number',
    'default': 0
  }, {
    'name': 'stdev',
    'type': 'number',
    'default': 1
  }]
}, {
  'key': {
    'function': 'lognormal'
  },
  'params': [{
    'name': 'mean',
    'type': 'number',
    'default': 0
  }, {
    'name': 'stdev',
    'type': 'number',
    'default': 1
  }]
}, {
  'key': {
    'function': 'uniform'
  },
  'params': [{
    'name': 'min',
    'type': 'number',
    'default': 0
  }, {
    'name': 'max',
    'type': 'number',
    'default': 1
  }]
}, {
  'key': {
    'function': 'kde'
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'from',
    'type': 'data'
  }, {
    'name': 'bandwidth',
    'type': 'number',
    'default': 0
  }]
}];
var vega_transforms_module_mixture = {
  'key': {
    'function': 'mixture'
  },
  'params': [{
    'name': 'distributions',
    'type': 'param',
    'array': true,
    'params': distributions
  }, {
    'name': 'weights',
    'type': 'number',
    'array': true
  }]
};
Density.Definition = {
  'type': 'Density',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'extent',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'steps',
    'type': 'number'
  }, {
    'name': 'minsteps',
    'type': 'number',
    'default': 25
  }, {
    'name': 'maxsteps',
    'type': 'number',
    'default': 200
  }, {
    'name': 'method',
    'type': 'string',
    'default': 'pdf',
    'values': ['pdf', 'cdf']
  }, {
    'name': 'distribution',
    'type': 'param',
    'params': distributions.concat(vega_transforms_module_mixture)
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'default': ['value', 'density']
  }]
};
vega_util_module_inherits(Density, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var dist = vega_transforms_module_parse(_.distribution, source(pulse)),
          minsteps = _.steps || _.minsteps || 25,
          maxsteps = _.steps || _.maxsteps || 200;
      var method = _.method || 'pdf';

      if (method !== 'pdf' && method !== 'cdf') {
        error('Invalid density method: ' + method);
      }

      if (!_.extent && !dist.data) {
        error('Missing density extent parameter.');
      }

      method = dist[method];
      var as = _.as || ['value', 'density'],
          domain = _.extent || extent(dist.data()),
          values = sampleCurve(method, domain, minsteps, maxsteps).map(function (v) {
        var tuple = {};
        tuple[as[0]] = v[0];
        tuple[as[1]] = v[1];
        return ingest$1(tuple);
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  }
});

function source(pulse) {
  return function () {
    return pulse.materialize(pulse.SOURCE).source;
  };
}

function fieldNames(fields, as) {
  if (!fields) return null;
  return fields.map(function (f, i) {
    return as[i] || accessorName(f);
  });
}

function partition$1(data, groupby, field) {
  var groups = [],
      get = function get(f) {
    return f(t);
  };

  var map, i, n, t, k, g; // partition data points into groups

  if (groupby == null) {
    groups.push(data.map(field));
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        g.dims = k;
        groups.push(g);
      }

      g.push(field(t));
    }
  }

  return groups;
}

var Output = 'bin';
/**
 * Dot density binning for dot plot construction.
 * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
 * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to bin.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.step] - The step size (bin width) within which dots should be
 *   stacked. Defaults to 1/30 of the extent of the data *field*.
 * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density
 *   stacks should be smoothed to reduce variance.
 */

function DotBin(params) {
  Transform.call(this, null, params);
}

DotBin.Definition = {
  'type': 'DotBin',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'step',
    'type': 'number'
  }, {
    'name': 'smooth',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'as',
    'type': 'string',
    'default': Output
  }]
};

var autostep = function autostep(data, field) {
  return span(extent(data, field)) / 30;
};

vega_util_module_inherits(DotBin, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !(_.modified() || pulse.changed())) {
      return pulse; // early exit
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        groups = partition$1(pulse.source, _.groupby, identity),
        smooth = _.smooth || false,
        field = _.field,
        step = _.step || autostep(source, field),
        sort = stableCompare(function (a, b) {
      return field(a) - field(b);
    }),
        as = _.as || Output,
        n = groups.length; // compute dotplot bins per group

    var min = Infinity,
        max = -Infinity,
        i = 0,
        j;

    for (; i < n; ++i) {
      var g = groups[i].sort(sort);
      j = -1;

      var _iterator = vega_transforms_module_createForOfIteratorHelper(dotbin(g, step, smooth, field)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var v = _step.value;
          if (v < min) min = v;
          if (v > max) max = v;
          g[++j][as] = v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    this.value = {
      start: min,
      stop: max,
      step: step
    };
    return pulse.reflow(true).modifies(as);
  }
});
/**
 * Wraps an expression function with access to external parameters.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function} params.expr - The expression function. The
 *  function should accept both a datum and a parameter object.
 *  This operator's value will be a new function that wraps the
 *  expression function with access to this operator's parameters.
 */

function Expression(params) {
  Operator.call(this, null, update$4, params);
  this.modified(true);
}

vega_util_module_inherits(Expression, Operator);

function update$4(_) {
  var expr = _.expr;
  return this.value && !_.modified('expr') ? this.value : accessor(function (datum) {
    return expr(datum, _);
  }, accessorFields(expr), accessorName(expr));
}
/**
 * Computes extents (min/max) for a data field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field over which to compute extends.
 */


function Extent(params) {
  Transform.call(this, [undefined, undefined], params);
}

Extent.Definition = {
  'type': 'Extent',
  'metadata': {},
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }]
};
vega_util_module_inherits(Extent, Transform, {
  transform: function transform(_, pulse) {
    var extent = this.value,
        field = _.field,
        mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');

    var min = extent[0],
        max = extent[1];

    if (mod || min == null) {
      min = +Infinity;
      max = -Infinity;
    }

    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function (t) {
      var v = toNumber(field(t));

      if (v != null) {
        // NaNs will fail all comparisons!
        if (v < min) min = v;
        if (v > max) max = v;
      }
    });

    if (!Number.isFinite(min) || !Number.isFinite(max)) {
      var name = accessorName(field);
      if (name) name = " for field \"".concat(name, "\"");
      pulse.dataflow.warn("Infinite extent".concat(name, ": [").concat(min, ", ").concat(max, "]"));
      min = max = undefined;
    }

    this.value = [min, max];
  }
});
/**
 * Provides a bridge between a parent transform and a target subflow that
 * consumes only a subset of the tuples that pass through the parent.
 * @constructor
 * @param {Pulse} pulse - A pulse to use as the value of this operator.
 * @param {Transform} parent - The parent transform (typically a Facet instance).
 */

function Subflow(pulse, parent) {
  Operator.call(this, pulse);
  this.parent = parent;
  this.count = 0;
}

vega_util_module_inherits(Subflow, Operator, {
  /**
   * Routes pulses from this subflow to a target transform.
   * @param {Transform} target - A transform that receives the subflow of tuples.
   */
  connect: function connect(target) {
    this.detachSubflow = target.detachSubflow;
    this.targets().add(target);
    return target.source = this;
  },

  /**
   * Add an 'add' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being added.
   */
  add: function add(t) {
    this.count += 1;
    this.value.add.push(t);
  },

  /**
   * Add a 'rem' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being removed.
   */
  rem: function rem(t) {
    this.count -= 1;
    this.value.rem.push(t);
  },

  /**
   * Add a 'mod' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being modified.
   */
  mod: function mod(t) {
    this.value.mod.push(t);
  },

  /**
   * Re-initialize this operator's pulse value.
   * @param {Pulse} pulse - The pulse to copy from.
   * @see Pulse.init
   */
  init: function init(pulse) {
    this.value.init(pulse, pulse.NO_SOURCE);
  },

  /**
   * Evaluate this operator. This method overrides the
   * default behavior to simply return the contained pulse value.
   * @return {Pulse}
   */
  evaluate: function evaluate() {
    // assert: this.value.stamp === pulse.stamp
    return this.value;
  }
});
/**
 * Facets a dataflow into a set of subflows based on a key.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): *} params.key - The key field to facet by.
 */

function Facet(params) {
  Transform.call(this, {}, params);
  this._keys = fastmap(); // cache previously calculated key values
  // keep track of active subflows, use as targets array for listeners
  // this allows us to limit propagation to only updated subflows

  var a = this._targets = [];
  a.active = 0;

  a.forEach = function (f) {
    for (var i = 0, n = a.active; i < n; ++i) {
      f(a[i], i, a);
    }
  };
}

vega_util_module_inherits(Facet, Transform, {
  activate: function activate(flow) {
    this._targets[this._targets.active++] = flow;
  },
  // parent argument provided by PreFacet subclass
  subflow: function subflow(key, flow, pulse, parent) {
    var flows = this.value;
    var sf = _has(flows, key) && flows[key],
        df,
        p;

    if (!sf) {
      p = parent || (p = this._group[key]) && p.tuple;
      df = pulse.dataflow;
      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);
      df.add(sf).connect(flow(df, key, p));
      flows[key] = sf;
      this.activate(sf);
    } else if (sf.value.stamp < pulse.stamp) {
      sf.init(pulse);
      this.activate(sf);
    }

    return sf;
  },
  clean: function clean() {
    var flows = this.value;
    var detached = 0;

    for (var _key3 in flows) {
      if (flows[_key3].count === 0) {
        var detach = flows[_key3].detachSubflow;
        if (detach) detach();
        delete flows[_key3];
        ++detached;
      }
    } // remove inactive targets from the active targets array


    if (detached) {
      var active = this._targets.filter(function (sf) {
        return sf && sf.count > 0;
      });

      this.initTargets(active);
    }
  },
  initTargets: function initTargets(act) {
    var a = this._targets,
        n = a.length,
        m = act ? act.length : 0;
    var i = 0;

    for (; i < m; ++i) {
      a[i] = act[i];
    }

    for (; i < n && a[i] != null; ++i) {
      a[i] = null; // ensure old flows can be garbage collected
    }

    a.active = m;
  },
  transform: function transform(_, pulse) {
    var _this6 = this;

    var df = pulse.dataflow,
        key = _.key,
        flow = _.subflow,
        cache = this._keys,
        rekey = _.modified('key'),
        subflow = function subflow(key) {
      return _this6.subflow(key, flow, pulse);
    };

    this._group = _.group || {};
    this.initTargets(); // reset list of active subflows

    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t),
          k = cache.get(id);

      if (k !== undefined) {
        cache.delete(id);
        subflow(k).rem(t);
      }
    });
    pulse.visit(pulse.ADD, function (t) {
      var k = key(t);
      cache.set(tupleid(t), k);
      subflow(k).add(t);
    });

    if (rekey || pulse.modified(key.fields)) {
      pulse.visit(pulse.MOD, function (t) {
        var id = tupleid(t),
            k0 = cache.get(id),
            k1 = key(t);

        if (k0 === k1) {
          subflow(k1).mod(t);
        } else {
          cache.set(id, k1);
          subflow(k0).rem(t);
          subflow(k1).add(t);
        }
      });
    } else if (pulse.changed(pulse.MOD)) {
      pulse.visit(pulse.MOD, function (t) {
        subflow(cache.get(tupleid(t))).mod(t);
      });
    }

    if (rekey) {
      pulse.visit(pulse.REFLOW, function (t) {
        var id = tupleid(t),
            k0 = cache.get(id),
            k1 = key(t);

        if (k0 !== k1) {
          cache.set(id, k1);
          subflow(k0).rem(t);
          subflow(k1).add(t);
        }
      });
    }

    if (pulse.clean()) {
      df.runAfter(function () {
        _this6.clean();

        cache.clean();
      });
    } else if (cache.empty > df.cleanThreshold) {
      df.runAfter(cache.clean);
    }

    return pulse;
  }
});
/**
 * Generates one or more field accessor functions.
 * If the 'name' parameter is an array, an array of field accessors
 * will be created and the 'as' parameter will be ignored.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.name - The field name(s) to access.
 * @param {string} params.as - The accessor function name.
 */

function Field(params) {
  Operator.call(this, null, update$3, params);
}

vega_util_module_inherits(Field, Operator);

function update$3(_) {
  return this.value && !_.modified() ? this.value : isArray(_.name) ? array(_.name).map(function (f) {
    return field(f);
  }) : field(_.name, _.as);
}
/**
 * Filters data tuples according to a predicate function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The predicate expression function
 *   that determines a tuple's filter status. Truthy values pass the filter.
 */


function Filter(params) {
  Transform.call(this, fastmap(), params);
}

Filter.Definition = {
  'type': 'Filter',
  'metadata': {
    'changes': true
  },
  'params': [{
    'name': 'expr',
    'type': 'expr',
    'required': true
  }]
};
vega_util_module_inherits(Filter, Transform, {
  transform: function transform(_, pulse) {
    var df = pulse.dataflow,
        cache = this.value,
        // cache ids of filtered tuples
    output = pulse.fork(),
        add = output.add,
        rem = output.rem,
        mod = output.mod,
        test = _.expr;
    var isMod = true;
    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t);
      if (!cache.has(id)) rem.push(t);else cache.delete(id);
    });
    pulse.visit(pulse.ADD, function (t) {
      if (test(t, _)) add.push(t);else cache.set(tupleid(t), 1);
    });

    function revisit(t) {
      var id = tupleid(t),
          b = test(t, _),
          s = cache.get(id);

      if (b && s) {
        cache.delete(id);
        add.push(t);
      } else if (!b && !s) {
        cache.set(id, 1);
        rem.push(t);
      } else if (isMod && b && !s) {
        mod.push(t);
      }
    }

    pulse.visit(pulse.MOD, revisit);

    if (_.modified()) {
      isMod = false;
      pulse.visit(pulse.REFLOW, revisit);
    }

    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
    return output;
  }
});
/**
 * Flattens array-typed field values into new data objects.
 * If multiple fields are specified, they are treated as parallel arrays,
 * with output values included for each matching index (or null if missing).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of field
 *   accessors for the tuple fields that should be flattened.
 * @param {string} [params.index] - Optional output field name for index
 *   value. If unspecified, no index field is included in the output.
 * @param {Array<string>} [params.as] - Output field names for flattened
 *   array fields. Any unspecified fields will use the field name provided
 *   by the fields accessors.
 */

function Flatten(params) {
  Transform.call(this, [], params);
}

Flatten.Definition = {
  'type': 'Flatten',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'fields',
    'type': 'field',
    'array': true,
    'required': true
  }, {
    'name': 'index',
    'type': 'string'
  }, {
    'name': 'as',
    'type': 'string',
    'array': true
  }]
};
vega_util_module_inherits(Flatten, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        fields = _.fields,
        as = fieldNames(fields, _.as || []),
        index = _.index || null,
        m = as.length; // remove any previous results

    out.rem = this.value; // generate flattened tuples

    pulse.visit(pulse.SOURCE, function (t) {
      var arrays = fields.map(function (f) {
        return f(t);
      }),
          maxlen = arrays.reduce(function (l, a) {
        return Math.max(l, a.length);
      }, 0);
      var i = 0,
          j,
          d,
          v;

      for (; i < maxlen; ++i) {
        d = derive(t);

        for (j = 0; j < m; ++j) {
          d[as[j]] = (v = arrays[j][i]) == null ? null : v;
        }

        if (index) {
          d[index] = i;
        }

        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    if (index) out.modifies(index);
    return out.modifies(as);
  }
});
/**
 * Folds one more tuple fields into multiple tuples in which the field
 * name and values are available under new 'key' and 'value' fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.fields - An array of field accessors
 *   for the tuple fields that should be folded.
 * @param {Array<string>} [params.as] - Output field names for folded key
 *   and value fields, defaults to ['key', 'value'].
 */

function Fold(params) {
  Transform.call(this, [], params);
}

Fold.Definition = {
  'type': 'Fold',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'fields',
    'type': 'field',
    'array': true,
    'required': true
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['key', 'value']
  }]
};
vega_util_module_inherits(Fold, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        fields = _.fields,
        fnames = fields.map(accessorName),
        as = _.as || ['key', 'value'],
        k = as[0],
        v = as[1],
        n = fields.length;
    out.rem = this.value;
    pulse.visit(pulse.SOURCE, function (t) {
      for (var i = 0, d; i < n; ++i) {
        d = derive(t);
        d[k] = fnames[i];
        d[v] = fields[i](t);
        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    return out.modifies(as);
  }
});
/**
 * Invokes a function for each data tuple and saves the results as a new field.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
 * @param {string} params.as - The field name under which to save the result.
 * @param {boolean} [params.initonly=false] - If true, the formula is applied to
 *   added tuples only, and does not update in response to modifications.
 */

function Formula(params) {
  Transform.call(this, null, params);
}

Formula.Definition = {
  'type': 'Formula',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'expr',
    'type': 'expr',
    'required': true
  }, {
    'name': 'as',
    'type': 'string',
    'required': true
  }, {
    'name': 'initonly',
    'type': 'boolean'
  }]
};
vega_util_module_inherits(Formula, Transform, {
  transform: function transform(_, pulse) {
    var func = _.expr,
        as = _.as,
        mod = _.modified(),
        flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;

    if (mod) {
      // parameters updated, need to reflow
      pulse = pulse.materialize().reflow(true);
    }

    if (!_.initonly) {
      pulse.modifies(as);
    }

    return pulse.visit(flag, function (t) {
      return t[as] = func(t, _);
    });
  }
});
/**
 * Generates data tuples using a provided generator function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Parameters): object} params.generator - A tuple generator
 *   function. This function is given the operator parameters as input.
 *   Changes to any additional parameters will not trigger re-calculation
 *   of previously generated tuples. Only future tuples are affected.
 * @param {number} params.size - The number of tuples to produce.
 */

function Generate(params) {
  Transform.call(this, [], params);
}

vega_util_module_inherits(Generate, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ALL),
        gen = _.generator;
    var data = this.value,
        num = _.size - data.length,
        add,
        rem,
        t;

    if (num > 0) {
      // need more tuples, generate and add
      for (add = []; --num >= 0;) {
        add.push(t = ingest$1(gen(_)));
        data.push(t);
      }

      out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
    } else {
      // need fewer tuples, remove
      rem = data.slice(0, -num);
      out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
      data = data.slice(-num);
    }

    out.source = this.value = data;
    return out;
  }
});
var Methods = {
  value: 'value',
  median: src_median,
  mean: mean,
  min: src_min_min,
  max: src_max_max
};
var Empty = [];
/**
 * Impute missing values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to impute.
 * @param {Array<function(object): *>} [params.groupby] - An array of
 *   accessors to determine series within which to perform imputation.
 * @param {function(object): *} params.key - An accessor for a key value.
 *   Each key value should be unique within a group. New tuples will be
 *   imputed for any key values that are not found within a group.
 * @param {Array<*>} [params.keyvals] - Optional array of required key
 *   values. New tuples will be imputed for any key values that are not
 *   found within a group. In addition, these values will be automatically
 *   augmented with the key values observed in the input data.
 * @param {string} [method='value'] - The imputation method to use. One of
 *   'value', 'mean', 'median', 'max', 'min'.
 * @param {*} [value=0] - The constant value to use for imputation
 *   when using method 'value'.
 */

function Impute(params) {
  Transform.call(this, [], params);
}

Impute.Definition = {
  'type': 'Impute',
  'metadata': {
    'changes': true
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'key',
    'type': 'field',
    'required': true
  }, {
    'name': 'keyvals',
    'array': true
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'method',
    'type': 'enum',
    'default': 'value',
    'values': ['value', 'mean', 'median', 'max', 'min']
  }, {
    'name': 'value',
    'default': 0
  }]
};

function getValue(_) {
  var m = _.method || Methods.value,
      v;

  if (Methods[m] == null) {
    error('Unrecognized imputation method: ' + m);
  } else if (m === Methods.value) {
    v = _.value !== undefined ? _.value : 0;
    return function () {
      return v;
    };
  } else {
    return Methods[m];
  }
}

function getField(_) {
  var f = _.field;
  return function (t) {
    return t ? f(t) : NaN;
  };
}

vega_util_module_inherits(Impute, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ALL),
        impute = getValue(_),
        field = getField(_),
        fName = accessorName(_.field),
        kName = accessorName(_.key),
        gNames = (_.groupby || []).map(accessorName),
        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),
        curr = [],
        prev = this.value,
        m = groups.domain.length,
        group,
        value,
        gVals,
        kVal,
        g,
        i,
        j,
        l,
        n,
        t;

    for (g = 0, l = groups.length; g < l; ++g) {
      group = groups[g];
      gVals = group.values;
      value = NaN; // add tuples for missing values

      for (j = 0; j < m; ++j) {
        if (group[j] != null) continue;
        kVal = groups.domain[j];
        t = {
          _impute: true
        };

        for (i = 0, n = gVals.length; i < n; ++i) {
          t[gNames[i]] = gVals[i];
        }

        t[kName] = kVal;
        t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;
        curr.push(ingest$1(t));
      }
    } // update pulse with imputed tuples


    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
    this.value = curr;
    return out;
  }
});

function partition(data, groupby, key, keyvals) {
  var get = function get(f) {
    return f(t);
  },
      groups = [],
      domain = keyvals ? keyvals.slice() : [],
      kMap = {},
      gMap = {},
      gVals,
      gKey,
      group,
      i,
      j,
      k,
      n,
      t;

  domain.forEach(function (k, i) {
    return kMap[k] = i + 1;
  });

  for (i = 0, n = data.length; i < n; ++i) {
    t = data[i];
    k = key(t);
    j = kMap[k] || (kMap[k] = domain.push(k));
    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';

    if (!(group = gMap[gKey])) {
      group = gMap[gKey] = [];
      groups.push(group);
      group.values = gVals;
    }

    group[j - 1] = t;
  }

  groups.domain = domain;
  return groups;
}
/**
 * Extend input tuples with aggregate values.
 * Calcuates aggregate values and joins them with the input stream.
 * @constructor
 */


function JoinAggregate(params) {
  Aggregate.call(this, params);
}

JoinAggregate.Definition = {
  'type': 'JoinAggregate',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'fields',
    'type': 'field',
    'null': true,
    'array': true
  }, {
    'name': 'ops',
    'type': 'enum',
    'array': true,
    'values': ValidAggregateOps
  }, {
    'name': 'as',
    'type': 'string',
    'null': true,
    'array': true
  }, {
    'name': 'key',
    'type': 'field'
  }]
};
vega_util_module_inherits(JoinAggregate, Aggregate, {
  transform: function transform(_, pulse) {
    var aggr = this,
        mod = _.modified();

    var cells; // process all input tuples to calculate aggregates

    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
      cells = aggr.value = mod ? aggr.init(_) : {};
      pulse.visit(pulse.SOURCE, function (t) {
        return aggr.add(t);
      });
    } else {
      cells = aggr.value = aggr.value || this.init(_);
      pulse.visit(pulse.REM, function (t) {
        return aggr.rem(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        return aggr.add(t);
      });
    } // update aggregation cells


    aggr.changes(); // write aggregate values to input tuples

    pulse.visit(pulse.SOURCE, function (t) {
      extend(t, cells[aggr.cellkey(t)].tuple);
    });
    return pulse.reflow(mod).modifies(this._outputs);
  },
  changes: function changes() {
    var adds = this._adds,
        mods = this._mods;
    var i, n;

    for (i = 0, n = this._alen; i < n; ++i) {
      this.celltuple(adds[i]);
      adds[i] = null; // for garbage collection
    }

    for (i = 0, n = this._mlen; i < n; ++i) {
      this.celltuple(mods[i]);
      mods[i] = null; // for garbage collection
    }

    this._alen = this._mlen = 0; // reset list of active cells
  }
});
/**
 * Compute kernel density estimates (KDE) for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {function(object): *} params.field - An accessor for the data field
 *   to estimate.
 * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
 *   If zero or unspecified, the bandwidth is automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.cumulative=false] - A boolean flag indicating if a
 *   density (false) or cumulative distribution (true) should be generated.
 * @param {Array<number>} [params.extent] - The domain extent over which to
 *   plot the density. If unspecified, the [min, max] data extent is used.
 * @param {string} [params.resolve='independent'] - Indicates how parameters for
 *   multiple densities should be resolved. If "independent" (the default), each
 *   density may have its own domain extent and dynamic number of curve sample
 *   steps. If "shared", the KDE transform will ensure that all densities are
 *   defined over a shared domain and curve steps, enabling stacking.
 * @param {number} [params.minsteps=25] - The minimum number of curve samples
 *   for plotting the density.
 * @param {number} [params.maxsteps=200] - The maximum number of curve samples
 *   for plotting the density.
 * @param {number} [params.steps] - The exact number of curve samples for
 *   plotting the density. If specified, overrides both minsteps and maxsteps
 *   to set an exact number of uniform samples. Useful in conjunction with
 *   a fixed extent to ensure consistent sample points for stacked densities.
 */

function KDE(params) {
  Transform.call(this, null, params);
}

KDE.Definition = {
  'type': 'KDE',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'cumulative',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'counts',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'bandwidth',
    'type': 'number',
    'default': 0
  }, {
    'name': 'extent',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'resolve',
    'type': 'enum',
    'values': ['shared', 'independent'],
    'default': 'independent'
  }, {
    'name': 'steps',
    'type': 'number'
  }, {
    'name': 'minsteps',
    'type': 'number',
    'default': 25
  }, {
    'name': 'maxsteps',
    'type': 'number',
    'default': 200
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'default': ['value', 'density']
  }]
};
vega_util_module_inherits(KDE, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var _source = pulse.materialize(pulse.SOURCE).source,
          groups = partition$1(_source, _.groupby, _.field),
          names = (_.groupby || []).map(accessorName),
          bandwidth = _.bandwidth,
          method = _.cumulative ? 'cdf' : 'pdf',
          as = _.as || ['value', 'density'],
          values = [];
      var domain = _.extent,
          minsteps = _.steps || _.minsteps || 25,
          maxsteps = _.steps || _.maxsteps || 200;

      if (method !== 'pdf' && method !== 'cdf') {
        error('Invalid density method: ' + method);
      }

      if (_.resolve === 'shared') {
        if (!domain) domain = extent(_source, _.field);
        minsteps = maxsteps = _.steps || maxsteps;
      }

      groups.forEach(function (g) {
        var density = kde(g, bandwidth)[method],
            scale = _.counts ? g.length : 1,
            local = domain || extent(g);
        sampleCurve(density, local, minsteps, maxsteps).forEach(function (v) {
          var t = {};

          for (var i = 0; i < names.length; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = v[0];
          t[as[1]] = v[1] * scale;
          values.push(ingest$1(t));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  }
});
/**
 * Generates a key function.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<string>} params.fields - The field name(s) for the key function.
 * @param {boolean} params.flat - A boolean flag indicating if the field names
 *  should be treated as flat property names, side-stepping nested field
 *  lookups normally indicated by dot or bracket notation.
 */

function Key(params) {
  Operator.call(this, null, update$2, params);
}

vega_util_module_inherits(Key, Operator);

function update$2(_) {
  return this.value && !_.modified() ? this.value : key(_.fields, _.flat);
}
/**
 * Load and parse data from an external source. Marshalls parameter
 * values and then invokes the Dataflow request method.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.url - The URL to load from.
 * @param {object} params.format - The data format options.
 */


function Load(params) {
  Transform.call(this, [], params);
  this._pending = null;
}

vega_util_module_inherits(Load, Transform, {
  transform: function transform(_, pulse) {
    var _this7 = this;

    var df = pulse.dataflow;

    if (this._pending) {
      // update state and return pulse
      return vega_transforms_module_output(this, pulse, this._pending);
    }

    if (stop(_)) return pulse.StopPropagation;

    if (_.values) {
      // parse and ingest values, return output pulse
      return vega_transforms_module_output(this, pulse, df.parse(_.values, _.format));
    } else if (_.async) {
      // return promise for non-blocking async loading
      var p = df.request(_.url, _.format).then(function (res) {
        _this7._pending = array(res.data);
        return function (df) {
          return df.touch(_this7);
        };
      });
      return {
        async: p
      };
    } else {
      // return promise for synchronous loading
      return df.request(_.url, _.format).then(function (res) {
        return vega_transforms_module_output(_this7, pulse, array(res.data));
      });
    }
  }
});

function stop(_) {
  return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));
}

function vega_transforms_module_output(op, pulse, data) {
  data.forEach(ingest$1);
  var out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
  out.rem = op.value;
  op.value = out.source = out.add = data;
  op._pending = null;
  if (out.rem.length) out.clean(true);
  return out;
}
/**
 * Extend tuples by joining them with values from a lookup table.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Map} params.index - The lookup table map.
 * @param {Array<function(object): *} params.fields - The fields to lookup.
 * @param {Array<string>} params.as - Output field names for each lookup value.
 * @param {*} [params.default] - A default value to use if lookup fails.
 */


function Lookup(params) {
  Transform.call(this, {}, params);
}

Lookup.Definition = {
  'type': 'Lookup',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'index',
    'type': 'index',
    'params': [{
      'name': 'from',
      'type': 'data',
      'required': true
    }, {
      'name': 'key',
      'type': 'field',
      'required': true
    }]
  }, {
    'name': 'values',
    'type': 'field',
    'array': true
  }, {
    'name': 'fields',
    'type': 'field',
    'array': true,
    'required': true
  }, {
    'name': 'as',
    'type': 'string',
    'array': true
  }, {
    'name': 'default',
    'default': null
  }]
};
vega_util_module_inherits(Lookup, Transform, {
  transform: function transform(_, pulse) {
    var keys = _.fields,
        index = _.index,
        values = _.values,
        defaultValue = _.default == null ? null : _.default,
        reset = _.modified(),
        n = keys.length;

    var flag = reset ? pulse.SOURCE : pulse.ADD,
        out = pulse,
        as = _.as,
        set,
        m,
        mods;

    if (values) {
      m = values.length;

      if (n > 1 && !as) {
        error('Multi-field lookup requires explicit "as" parameter.');
      }

      if (as && as.length !== n * m) {
        error('The "as" parameter has too few output field names.');
      }

      as = as || values.map(accessorName);

      set = function set(t) {
        for (var i = 0, k = 0, j, v; i < n; ++i) {
          v = index.get(keys[i](t));
          if (v == null) for (j = 0; j < m; ++j, ++k) {
            t[as[k]] = defaultValue;
          } else for (j = 0; j < m; ++j, ++k) {
            t[as[k]] = values[j](v);
          }
        }
      };
    } else {
      if (!as) {
        error('Missing output field names.');
      }

      set = function set(t) {
        for (var i = 0, v; i < n; ++i) {
          v = index.get(keys[i](t));
          t[as[i]] = v == null ? defaultValue : v;
        }
      };
    }

    if (reset) {
      out = pulse.reflow(true);
    } else {
      mods = keys.some(function (k) {
        return pulse.modified(k.fields);
      });
      flag |= mods ? pulse.MOD : 0;
    }

    pulse.visit(flag, set);
    return out.modifies(as);
  }
});
/**
 * Computes global min/max extents over a collection of extents.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<number>>} params.extents - The input extents.
 */

function MultiExtent(params) {
  Operator.call(this, null, update$1, params);
}

vega_util_module_inherits(MultiExtent, Operator);

function update$1(_) {
  if (this.value && !_.modified()) {
    return this.value;
  }

  var ext = _.extents,
      n = ext.length;
  var min = +Infinity,
      max = -Infinity,
      i,
      e;

  for (i = 0; i < n; ++i) {
    e = ext[i];
    if (e[0] < min) min = e[0];
    if (e[1] > max) max = e[1];
  }

  return [min, max];
}
/**
 * Merge a collection of value arrays.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<Array<*>>} params.values - The input value arrrays.
 */


function MultiValues(params) {
  Operator.call(this, null, vega_transforms_module_update, params);
}

vega_util_module_inherits(MultiValues, Operator);

function vega_transforms_module_update(_) {
  return this.value && !_.modified() ? this.value : _.values.reduce(function (data, _) {
    return data.concat(_);
  }, []);
}
/**
 * Operator whose value is simply its parameter hash. This operator is
 * useful for enabling reactive updates to values of nested objects.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */


function Params(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Params, Transform, {
  transform: function transform(_, pulse) {
    this.modified(_.modified());
    this.value = _;
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
  }
});
/**
 * Aggregate and pivot selected field values to become new fields.
 * This operator is useful to construction cross-tabulations.
 * @constructor
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *  to groupby. These fields act just like groupby fields of an Aggregate transform.
 * @param {function(object): *} params.field - The field to pivot on. The unique
 *  values of this field become new field names in the output stream.
 * @param {function(object): *} params.value - The field to populate pivoted fields.
 *  The aggregate values of this field become the values of the new pivoted fields.
 * @param {string} [params.op] - The aggregation operation for the value field,
 *  applied per cell in the output stream. The default is "sum".
 * @param {number} [params.limit] - An optional parameter indicating the maximum
 *  number of pivoted fields to generate. The pivoted field names are sorted in
 *  ascending order prior to enforcing the limit.
 */

function Pivot(params) {
  Aggregate.call(this, params);
}

Pivot.Definition = {
  'type': 'Pivot',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'value',
    'type': 'field',
    'required': true
  }, {
    'name': 'op',
    'type': 'enum',
    'values': ValidAggregateOps,
    'default': 'sum'
  }, {
    'name': 'limit',
    'type': 'number',
    'default': 0
  }, {
    'name': 'key',
    'type': 'field'
  }]
};
vega_util_module_inherits(Pivot, Aggregate, {
  _transform: Aggregate.prototype.transform,
  transform: function transform(_, pulse) {
    return this._transform(aggregateParams(_, pulse), pulse);
  }
}); // Shoehorn a pivot transform into an aggregate transform!
// First collect all unique pivot field values.
// Then generate aggregate fields for each output pivot field.

function aggregateParams(_, pulse) {
  var key = _.field,
      value = _.value,
      op = (_.op === 'count' ? '__count__' : _.op) || 'sum',
      fields = accessorFields(key).concat(accessorFields(value)),
      keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change
  // flag parameter modification to ensure re-initialization

  if (pulse.changed()) _.set('__pivot__', null, null, true);
  return {
    key: _.key,
    groupby: _.groupby,
    ops: keys.map(function () {
      return op;
    }),
    fields: keys.map(function (k) {
      return get(k, key, value, fields);
    }),
    as: keys.map(function (k) {
      return k + '';
    }),
    modified: _.modified.bind(_)
  };
} // Generate aggregate field accessor.
// Output NaN for non-existent values; aggregator will ignore!


function get(k, key, value, fields) {
  return accessor(function (d) {
    return key(d) === k ? value(d) : NaN;
  }, fields, k + '');
} // Collect (and optionally limit) all unique pivot values.


function pivotKeys(key, limit, pulse) {
  var map = {},
      list = [];
  pulse.visit(pulse.SOURCE, function (t) {
    var k = key(t);

    if (!map[k]) {
      map[k] = 1;
      list.push(k);
    }
  });
  list.sort(ascending);
  return limit ? list.slice(0, limit) : list;
}
/**
 * Partitions pre-faceted data into tuple subflows.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(Dataflow, string): Operator} params.subflow - A function
 *   that generates a subflow of operators and returns its root operator.
 * @param {function(object): Array<object>} params.field - The field
 *   accessor for an array of subflow tuple objects.
 */


function PreFacet(params) {
  Facet.call(this, params);
}

vega_util_module_inherits(PreFacet, Facet, {
  transform: function transform(_, pulse) {
    var _this8 = this;

    var flow = _.subflow,
        field = _.field,
        subflow = function subflow(t) {
      return _this8.subflow(tupleid(t), flow, pulse, t);
    };

    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {
      error('PreFacet does not support field modification.');
    }

    this.initTargets(); // reset list of active subflows

    if (field) {
      pulse.visit(pulse.MOD, function (t) {
        var sf = subflow(t);
        field(t).forEach(function (_) {
          return sf.mod(_);
        });
      });
      pulse.visit(pulse.ADD, function (t) {
        var sf = subflow(t);
        field(t).forEach(function (_) {
          return sf.add(ingest$1(_));
        });
      });
      pulse.visit(pulse.REM, function (t) {
        var sf = subflow(t);
        field(t).forEach(function (_) {
          return sf.rem(_);
        });
      });
    } else {
      pulse.visit(pulse.MOD, function (t) {
        return subflow(t).mod(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        return subflow(t).add(t);
      });
      pulse.visit(pulse.REM, function (t) {
        return subflow(t).rem(t);
      });
    }

    if (pulse.clean()) {
      pulse.runAfter(function () {
        return _this8.clean();
      });
    }

    return pulse;
  }
});
/**
 * Performs a relational projection, copying selected fields from source
 * tuples to a new set of derived tuples.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *} params.fields - The fields to project,
 *   as an array of field accessors. If unspecified, all fields will be
 *   copied with names unchanged.
 * @param {Array<string>} [params.as] - Output field names for each projected
 *   field. Any unspecified fields will use the field name provided by
 *   the field accessor.
 */

function Project(params) {
  Transform.call(this, null, params);
}

Project.Definition = {
  'type': 'Project',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'fields',
    'type': 'field',
    'array': true
  }, {
    'name': 'as',
    'type': 'string',
    'null': true,
    'array': true
  }]
};
vega_util_module_inherits(Project, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        fields = _.fields,
        as = fieldNames(_.fields, _.as || []),
        derive = fields ? function (s, t) {
      return project(s, t, fields, as);
    } : rederive;
    var lut;

    if (this.value) {
      lut = this.value;
    } else {
      pulse = pulse.addAll();
      lut = this.value = {};
    }

    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t);
      out.rem.push(lut[id]);
      lut[id] = null;
    });
    pulse.visit(pulse.ADD, function (t) {
      var dt = derive(t, ingest$1({}));
      lut[tupleid(t)] = dt;
      out.add.push(dt);
    });
    pulse.visit(pulse.MOD, function (t) {
      out.mod.push(derive(t, lut[tupleid(t)]));
    });
    return out;
  }
});

function project(s, t, fields, as) {
  for (var i = 0, n = fields.length; i < n; ++i) {
    t[as[i]] = fields[i](s);
  }

  return t;
}
/**
 * Proxy the value of another operator as a pure signal value.
 * Ensures no tuples are propagated.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {*} params.value - The value to proxy, becomes the value of this operator.
 */


function vega_transforms_module_Proxy(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(vega_transforms_module_Proxy, Transform, {
  transform: function transform(_, pulse) {
    this.value = _.value;
    return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
  }
});
/**
 * Generates sample quantile values from an input data stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - An accessor for the data field
 *   over which to calculate quantile values.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {Array<number>} [params.probs] - An array of probabilities in
 *   the range (0, 1) for which to compute quantile values. If not specified,
 *   the *step* parameter will be used.
 * @param {Array<number>} [params.step=0.01] - A probability step size for
 *   sampling quantile values. All values from one-half the step size up to
 *   1 (exclusive) will be sampled. This parameter is only used if the
 *   *quantiles* parameter is not provided.
 */

function Quantile(params) {
  Transform.call(this, null, params);
}

Quantile.Definition = {
  'type': 'Quantile',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'probs',
    'type': 'number',
    'array': true
  }, {
    'name': 'step',
    'type': 'number',
    'default': 0.01
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'default': ['prob', 'value']
  }]
};
var EPSILON = 1e-14;
vega_util_module_inherits(Quantile, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        as = _.as || ['prob', 'value'];

    if (this.value && !_.modified() && !pulse.changed()) {
      out.source = this.value;
      return out;
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        groups = partition$1(source, _.groupby, _.field),
        names = (_.groupby || []).map(accessorName),
        values = [],
        step = _.step || 0.01,
        p = _.probs || range(step / 2, 1 - EPSILON, step),
        n = p.length;
    groups.forEach(function (g) {
      var q = quantiles(g, p);

      for (var i = 0; i < n; ++i) {
        var t = {};

        for (var _i2 = 0; _i2 < names.length; ++_i2) {
          t[names[_i2]] = g.dims[_i2];
        }

        t[as[0]] = p[i];
        t[as[1]] = q[i];
        values.push(ingest$1(t));
      }
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
    return out;
  }
});
/**
 * Relays a data stream between data processing pipelines.
 * If the derive parameter is set, this transform will create derived
 * copies of observed tuples. This provides derived data streams in which
 * modifications to the tuples do not pollute an upstream data source.
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.derive=false] - Boolean flag indicating if
 *   the transform should make derived copies of incoming tuples.
 * @constructor
 */

function Relay(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Relay, Transform, {
  transform: function transform(_, pulse) {
    var out, lut;

    if (this.value) {
      lut = this.value;
    } else {
      out = pulse = pulse.addAll();
      lut = this.value = {};
    }

    if (_.derive) {
      out = pulse.fork(pulse.NO_SOURCE);
      pulse.visit(pulse.REM, function (t) {
        var id = tupleid(t);
        out.rem.push(lut[id]);
        lut[id] = null;
      });
      pulse.visit(pulse.ADD, function (t) {
        var dt = derive(t);
        lut[tupleid(t)] = dt;
        out.add.push(dt);
      });
      pulse.visit(pulse.MOD, function (t) {
        var dt = lut[tupleid(t)];

        for (var k in t) {
          dt[k] = t[k]; // down stream writes may overwrite re-derived tuples
          // conservatively mark all source fields as modified

          out.modifies(k);
        }

        out.mod.push(dt);
      });
    }

    return out;
  }
});
/**
 * Samples tuples passing through this operator.
 * Uses reservoir sampling to maintain a representative sample.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} [params.size=1000] - The maximum number of samples.
 */

function Sample(params) {
  Transform.call(this, [], params);
  this.count = 0;
}

Sample.Definition = {
  'type': 'Sample',
  'metadata': {},
  'params': [{
    'name': 'size',
    'type': 'number',
    'default': 1000
  }]
};
vega_util_module_inherits(Sample, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        mod = _.modified('size'),
        num = _.size,
        map = this.value.reduce(function (m, t) {
      return m[tupleid(t)] = 1, m;
    }, {});

    var res = this.value,
        cnt = this.count,
        cap = 0; // sample reservoir update function

    function update(t) {
      var p, idx;

      if (res.length < num) {
        res.push(t);
      } else {
        idx = ~~((cnt + 1) * vega_statistics_module_random());

        if (idx < res.length && idx >= cap) {
          p = res[idx];
          if (map[tupleid(p)]) out.rem.push(p); // eviction

          res[idx] = t;
        }
      }

      ++cnt;
    }

    if (pulse.rem.length) {
      // find all tuples that should be removed, add to output
      pulse.visit(pulse.REM, function (t) {
        var id = tupleid(t);

        if (map[id]) {
          map[id] = -1;
          out.rem.push(t);
        }

        --cnt;
      }); // filter removed tuples out of the sample reservoir

      res = res.filter(function (t) {
        return map[tupleid(t)] !== -1;
      });
    }

    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
      // replenish sample if backing data source is available
      cap = cnt = res.length;
      pulse.visit(pulse.SOURCE, function (t) {
        // update, but skip previously sampled tuples
        if (!map[tupleid(t)]) update(t);
      });
      cap = -1;
    }

    if (mod && res.length > num) {
      var n = res.length - num;

      for (var i = 0; i < n; ++i) {
        map[tupleid(res[i])] = -1;
        out.rem.push(res[i]);
      }

      res = res.slice(n);
    }

    if (pulse.mod.length) {
      // propagate modified tuples in the sample reservoir
      pulse.visit(pulse.MOD, function (t) {
        if (map[tupleid(t)]) out.mod.push(t);
      });
    }

    if (pulse.add.length) {
      // update sample reservoir
      pulse.visit(pulse.ADD, update);
    }

    if (pulse.add.length || cap < 0) {
      // output newly added tuples
      out.add = res.filter(function (t) {
        return !map[tupleid(t)];
      });
    }

    this.count = cnt;
    this.value = out.source = res;
    return out;
  }
});
/**
 * Generates data tuples for a specified sequence range of numbers.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {number} params.start - The first number in the sequence.
 * @param {number} params.stop - The last number (exclusive) in the sequence.
 * @param {number} [params.step=1] - The step size between numbers in the sequence.
 */

function Sequence(params) {
  Transform.call(this, null, params);
}

Sequence.Definition = {
  'type': 'Sequence',
  'metadata': {
    'generates': true,
    'changes': true
  },
  'params': [{
    'name': 'start',
    'type': 'number',
    'required': true
  }, {
    'name': 'stop',
    'type': 'number',
    'required': true
  }, {
    'name': 'step',
    'type': 'number',
    'default': 1
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'data'
  }]
};
vega_util_module_inherits(Sequence, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !_.modified()) return;
    var out = pulse.materialize().fork(pulse.MOD),
        as = _.as || 'data';
    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
    this.value = range(_.start, _.stop, _.step || 1).map(function (v) {
      var t = {};
      t[as] = v;
      return ingest$1(t);
    });
    out.add = pulse.add.concat(this.value);
    return out;
  }
});
/**
 * Propagates a new pulse without any tuples so long as the input
 * pulse contains some added, removed or modified tuples.
 * @param {object} params - The parameters for this operator.
 * @constructor
 */

function Sieve(params) {
  Transform.call(this, null, params);
  this.modified(true); // always treat as modified
}

vega_util_module_inherits(Sieve, Transform, {
  transform: function transform(_, pulse) {
    this.value = pulse.source;
    return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
  }
});
/**
 * Discretize dates to specific time units.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The data field containing date/time values.
 */

function TimeUnit(params) {
  Transform.call(this, null, params);
}

var OUTPUT = ['unit0', 'unit1'];
TimeUnit.Definition = {
  'type': 'TimeUnit',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field',
    'required': true
  }, {
    'name': 'interval',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'units',
    'type': 'enum',
    'values': TIME_UNITS,
    'array': true
  }, {
    'name': 'step',
    'type': 'number',
    'default': 1
  }, {
    'name': 'maxbins',
    'type': 'number',
    'default': 40
  }, {
    'name': 'extent',
    'type': 'date',
    'array': true
  }, {
    'name': 'timezone',
    'type': 'enum',
    'default': 'local',
    'values': ['local', 'utc']
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': OUTPUT
  }]
};
vega_util_module_inherits(TimeUnit, Transform, {
  transform: function transform(_, pulse) {
    var field = _.field,
        band = _.interval !== false,
        utc = _.timezone === 'utc',
        floor = this._floor(_, pulse),
        offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,
        as = _.as || OUTPUT,
        u0 = as[0],
        u1 = as[1],
        step = floor.step;

    var min = floor.start || Infinity,
        max = floor.stop || -Infinity,
        flag = pulse.ADD;

    if (_.modified() || pulse.modified(accessorFields(field))) {
      pulse = pulse.reflow(true);
      flag = pulse.SOURCE;
      min = Infinity;
      max = -Infinity;
    }

    pulse.visit(flag, function (t) {
      var v = field(t);
      var a, b;

      if (v == null) {
        t[u0] = null;
        if (band) t[u1] = null;
      } else {
        t[u0] = a = b = floor(v);
        if (band) t[u1] = b = offset(a, step);
        if (a < min) min = a;
        if (b > max) max = b;
      }
    });
    floor.start = min;
    floor.stop = max;
    return pulse.modifies(band ? as : u0);
  },
  _floor: function _floor(_, pulse) {
    var utc = _.timezone === 'utc'; // get parameters

    var _ref = _.units ? {
      units: _.units,
      step: _.step || 1
    } : bin({
      extent: _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),
      maxbins: _.maxbins
    }),
        units = _ref.units,
        step = _ref.step; // check / standardize time units


    var tunits = timeUnits(units),
        prev = this.value || {},
        floor = (utc ? utcFloor : timeFloor)(tunits, step);
    floor.unit = peek(tunits);
    floor.units = tunits;
    floor.step = step;
    floor.start = prev.start;
    floor.stop = prev.stop;
    return this.value = floor;
  }
});
/**
 * An index that maps from unique, string-coerced, field values to tuples.
 * Assumes that the field serves as a unique key with no duplicate values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The field accessor to index.
 */

function TupleIndex(params) {
  Transform.call(this, fastmap(), params);
}

vega_util_module_inherits(TupleIndex, Transform, {
  transform: function transform(_, pulse) {
    var df = pulse.dataflow,
        field = _.field,
        index = this.value,
        set = function set(t) {
      return index.set(field(t), t);
    };

    var mod = true;

    if (_.modified('field') || pulse.modified(field.fields)) {
      index.clear();
      pulse.visit(pulse.SOURCE, set);
    } else if (pulse.changed()) {
      pulse.visit(pulse.REM, function (t) {
        return index.delete(field(t));
      });
      pulse.visit(pulse.ADD, set);
    } else {
      mod = false;
    }

    this.modified(mod);
    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
    return pulse.fork();
  }
});
/**
 * Extracts an array of values. Assumes the source data has already been
 * reduced as needed (e.g., by an upstream Aggregate transform).
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The domain field to extract.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting the values. The comparator will be
 *   applied to backing tuples prior to value extraction.
 */

function Values(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Values, Transform, {
  transform: function transform(_, pulse) {
    var run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);

    if (run) {
      this.value = (_.sort ? pulse.source.slice().sort(stableCompare(_.sort)) : pulse.source).map(_.field);
    }
  }
});

function WindowOp(op, field, param, as) {
  var fn = WindowOps[op](field, param);
  return {
    init: fn.init || zero,
    update: function update(w, t) {
      t[as] = fn.next(w);
    }
  };
}

var WindowOps = {
  row_number: function row_number() {
    return {
      next: function next(w) {
        return w.index + 1;
      }
    };
  },
  rank: function rank() {
    var rank;
    return {
      init: function init() {
        return rank = 1;
      },
      next: function next(w) {
        var i = w.index,
            data = w.data;
        return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
      }
    };
  },
  dense_rank: function dense_rank() {
    var drank;
    return {
      init: function init() {
        return drank = 1;
      },
      next: function next(w) {
        var i = w.index,
            d = w.data;
        return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
      }
    };
  },
  percent_rank: function percent_rank() {
    var rank = WindowOps.rank(),
        _next = rank.next;
    return {
      init: rank.init,
      next: function next(w) {
        return (_next(w) - 1) / (w.data.length - 1);
      }
    };
  },
  cume_dist: function cume_dist() {
    var cume;
    return {
      init: function init() {
        return cume = 0;
      },
      next: function next(w) {
        var d = w.data,
            c = w.compare;
        var i = w.index;

        if (cume < i) {
          while (i + 1 < d.length && !c(d[i], d[i + 1])) {
            ++i;
          }

          cume = i;
        }

        return (1 + cume) / d.length;
      }
    };
  },
  ntile: function ntile(field, num) {
    num = +num;
    if (!(num > 0)) error('ntile num must be greater than zero.');
    var cume = WindowOps.cume_dist(),
        _next2 = cume.next;
    return {
      init: cume.init,
      next: function next(w) {
        return Math.ceil(num * _next2(w));
      }
    };
  },
  lag: function lag(field, offset) {
    offset = +offset || 1;
    return {
      next: function next(w) {
        var i = w.index - offset;
        return i >= 0 ? field(w.data[i]) : null;
      }
    };
  },
  lead: function lead(field, offset) {
    offset = +offset || 1;
    return {
      next: function next(w) {
        var i = w.index + offset,
            d = w.data;
        return i < d.length ? field(d[i]) : null;
      }
    };
  },
  first_value: function first_value(field) {
    return {
      next: function next(w) {
        return field(w.data[w.i0]);
      }
    };
  },
  last_value: function last_value(field) {
    return {
      next: function next(w) {
        return field(w.data[w.i1 - 1]);
      }
    };
  },
  nth_value: function nth_value(field, nth) {
    nth = +nth;
    if (!(nth > 0)) error('nth_value nth must be greater than zero.');
    return {
      next: function next(w) {
        var i = w.i0 + (nth - 1);
        return i < w.i1 ? field(w.data[i]) : null;
      }
    };
  },
  prev_value: function prev_value(field) {
    var prev;
    return {
      init: function init() {
        return prev = null;
      },
      next: function next(w) {
        var v = field(w.data[w.index]);
        return v != null ? prev = v : prev;
      }
    };
  },
  next_value: function next_value(field) {
    var v, i;
    return {
      init: function init() {
        return v = null, i = -1;
      },
      next: function next(w) {
        var d = w.data;
        return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
      }
    };
  }
};

function find(field, data, index) {
  for (var n = data.length; index < n; ++index) {
    var v = field(data[index]);
    if (v != null) return index;
  }

  return -1;
}

var ValidWindowOps = Object.keys(WindowOps);

function WindowState(_) {
  var ops = array(_.ops),
      fields = array(_.fields),
      params = array(_.params),
      as = array(_.as),
      outputs = this.outputs = [],
      windows = this.windows = [],
      inputs = {},
      map = {},
      counts = [],
      measures = [];
  var countOnly = true;

  function visitInputs(f) {
    array(accessorFields(f)).forEach(function (_) {
      return inputs[_] = 1;
    });
  }

  visitInputs(_.sort);
  ops.forEach(function (op, i) {
    var field = fields[i],
        mname = accessorName(field),
        name = measureName(op, mname, as[i]);
    visitInputs(field);
    outputs.push(name); // Window operation

    if (_has(WindowOps, op)) {
      windows.push(WindowOp(op, fields[i], params[i], name));
    } // Aggregate operation
    else {
        if (field == null && op !== 'count') {
          error('Null aggregate field specified.');
        }

        if (op === 'count') {
          counts.push(name);
          return;
        }

        countOnly = false;
        var m = map[mname];

        if (!m) {
          m = map[mname] = [];
          m.field = field;
          measures.push(m);
        }

        m.push(createMeasure(op, name));
      }
  });

  if (counts.length || measures.length) {
    this.cell = cell(measures, counts, countOnly);
  }

  this.inputs = Object.keys(inputs);
}

var vega_transforms_module_prototype = WindowState.prototype;

vega_transforms_module_prototype.init = function () {
  this.windows.forEach(function (_) {
    return _.init();
  });
  if (this.cell) this.cell.init();
};

vega_transforms_module_prototype.update = function (w, t) {
  var cell = this.cell,
      wind = this.windows,
      data = w.data,
      m = wind && wind.length;
  var j;

  if (cell) {
    for (j = w.p0; j < w.i0; ++j) {
      cell.rem(data[j]);
    }

    for (j = w.p1; j < w.i1; ++j) {
      cell.add(data[j]);
    }

    cell.set(t);
  }

  for (j = 0; j < m; ++j) {
    wind[j].update(w, t);
  }
};

function cell(measures, counts, countOnly) {
  measures = measures.map(function (m) {
    return compileMeasures(m, m.field);
  });
  var cell = {
    num: 0,
    agg: null,
    store: false,
    count: counts
  };

  if (!countOnly) {
    var n = measures.length,
        a = cell.agg = Array(n),
        i = 0;

    for (; i < n; ++i) {
      a[i] = new measures[i](cell);
    }
  }

  if (cell.store) {
    var store = cell.data = new TupleStore();
  }

  cell.add = function (t) {
    cell.num += 1;
    if (countOnly) return;
    if (store) store.add(t);

    for (var _i3 = 0; _i3 < n; ++_i3) {
      a[_i3].add(a[_i3].get(t), t);
    }
  };

  cell.rem = function (t) {
    cell.num -= 1;
    if (countOnly) return;
    if (store) store.rem(t);

    for (var _i4 = 0; _i4 < n; ++_i4) {
      a[_i4].rem(a[_i4].get(t), t);
    }
  };

  cell.set = function (t) {
    var i, n; // consolidate stored values

    if (store) store.values(); // update tuple properties

    for (i = 0, n = counts.length; i < n; ++i) {
      t[counts[i]] = cell.num;
    }

    if (!countOnly) for (i = 0, n = a.length; i < n; ++i) {
      a[i].set(t);
    }
  };

  cell.init = function () {
    cell.num = 0;
    if (store) store.reset();

    for (var _i5 = 0; _i5 < n; ++_i5) {
      a[_i5].init();
    }
  };

  return cell;
}
/**
 * Perform window calculations and write results to the input stream.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
 * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
 * @param {Array<function(object): *>} [params.fields] - An array of accessors
 *   for data fields to use as inputs to window operations.
 * @param {Array<*>} [params.params] - An array of parameter values for window operations.
 * @param {Array<string>} [params.as] - An array of output field names for window operations.
 * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
 * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
 *   number alone, ignoring peers with identical sort values. If false (default),
 *   the window boundaries will be adjusted to include peer values.
 */


function Window(params) {
  Transform.call(this, {}, params);
  this._mlen = 0;
  this._mods = [];
}

Window.Definition = {
  'type': 'Window',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'ops',
    'type': 'enum',
    'array': true,
    'values': ValidWindowOps.concat(ValidAggregateOps)
  }, {
    'name': 'params',
    'type': 'number',
    'null': true,
    'array': true
  }, {
    'name': 'fields',
    'type': 'field',
    'null': true,
    'array': true
  }, {
    'name': 'as',
    'type': 'string',
    'null': true,
    'array': true
  }, {
    'name': 'frame',
    'type': 'number',
    'null': true,
    'array': true,
    'length': 2,
    'default': [null, 0]
  }, {
    'name': 'ignorePeers',
    'type': 'boolean',
    'default': false
  }]
};
vega_util_module_inherits(Window, Transform, {
  transform: function transform(_, pulse) {
    var _this9 = this;

    this.stamp = pulse.stamp;

    var mod = _.modified(),
        cmp = stableCompare(_.sort),
        key = groupkey(_.groupby),
        group = function group(t) {
      return _this9.group(key(t));
    }; // initialize window state


    var state = this.state;

    if (!state || mod) {
      state = this.state = new WindowState(_);
    } // partition input tuples


    if (mod || pulse.modified(state.inputs)) {
      this.value = {};
      pulse.visit(pulse.SOURCE, function (t) {
        return group(t).add(t);
      });
    } else {
      pulse.visit(pulse.REM, function (t) {
        return group(t).remove(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        return group(t).add(t);
      });
    } // perform window calculations for each modified partition


    for (var i = 0, n = this._mlen; i < n; ++i) {
      processPartition(this._mods[i], state, cmp, _);
    }

    this._mlen = 0;
    this._mods = []; // TODO don't reflow everything?

    return pulse.reflow(mod).modifies(state.outputs);
  },
  group: function group(key) {
    var group = this.value[key];

    if (!group) {
      group = this.value[key] = SortedList(tupleid);
      group.stamp = -1;
    }

    if (group.stamp < this.stamp) {
      group.stamp = this.stamp;
      this._mods[this._mlen++] = group;
    }

    return group;
  }
});

function processPartition(list, state, cmp, _) {
  var sort = _.sort,
      range = sort && !_.ignorePeers,
      frame = _.frame || [null, 0],
      data = list.data(cmp),
      // use cmp for stable sort
  n = data.length,
      b = range ? src_bisector(sort) : null,
      w = {
    i0: 0,
    i1: 0,
    p0: 0,
    p1: 0,
    index: 0,
    data: data,
    compare: sort || vega_util_module_constant(-1)
  };
  state.init();

  for (var i = 0; i < n; ++i) {
    setWindow(w, frame, i, n);
    if (range) adjustRange(w, b);
    state.update(w, data[i]);
  }
}

function setWindow(w, f, i, n) {
  w.p0 = w.i0;
  w.p1 = w.i1;
  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
  w.index = i;
} // if frame type is 'range', adjust window for peer values


function adjustRange(w, bisect) {
  var r0 = w.i0,
      r1 = w.i1 - 1,
      c = w.compare,
      d = w.data,
      n = d.length - 1;
  if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
  if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
}


;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basis.js
function _point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}


function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 3:
        _point(this, this._x1, this._y1);

      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        _point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};
/* harmony default export */ function basis(context) {
  return new Basis(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/noop.js
/* harmony default export */ function src_noop() {}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basisClosed.js



function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: src_noop,
  areaEnd: src_noop,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        _point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};
/* harmony default export */ function basisClosed(context) {
  return new BasisClosed(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basisOpen.js


function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        _point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};
/* harmony default export */ function basisOpen(context) {
  return new BasisOpen(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/bundle.js


function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function lineStart() {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function lineEnd() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function point(x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};
/* harmony default export */ var bundle = ((function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinal.js
function cardinal_point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}


function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        cardinal_point(this, this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        cardinal_point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var cardinal = ((function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
})(0));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinalOpen.js

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        cardinal_point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var cardinalOpen = ((function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
})(0));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinalClosed.js


function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: src_noop,
  areaEnd: src_noop,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        cardinal_point(this, x, y);

        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var cardinalClosed = ((function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
})(0));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var math_max = Math.max;
var math_min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var math_epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRom.js



function catmullRom_point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > math_epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > math_epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}



function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        catmullRom_point(this, x, y);

        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var catmullRom = ((function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRomClosed.js




function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: src_noop,
  areaEnd: src_noop,
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        catmullRom_point(this, x, y);

        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var catmullRomClosed = ((function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRomOpen.js



function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        catmullRom_point(this, x, y);

        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};
/* harmony default export */ var catmullRomOpen = ((function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5));
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};
/* harmony default export */ function curve_linear(context) {
  return new Linear(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/linearClosed.js


function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: src_noop,
  areaEnd: src_noop,
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._point) this._context.closePath();
  },
  point: function point(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};
/* harmony default export */ function linearClosed(context) {
  return new LinearClosed(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/monotone.js
function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function monotone_point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        monotone_point(this, this._t0, slope2(this, this._t0));

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        monotone_point(this, slope2(this, t1 = slope3(this, x, y)), t1);

        break;

      default:
        monotone_point(this, this._t0, t1 = slope3(this, x, y));

        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function moveTo(x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function closePath() {
    this._context.closePath();
  },
  lineTo: function lineTo(x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function lineEnd() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function point(x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) {
    a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  }

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) {
    m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  }

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) {
    a[i] = (r[i] - a[i + 1]) / b[i];
  }

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) {
    b[i] = 2 * x[i + 1] - a[i + 1];
  }

  return [a, b];
}

/* harmony default export */ function natural(context) {
  return new Natural(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};
/* harmony default export */ function step(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
;// CONCATENATED MODULE: ./node_modules/d3-path/src/path.js
var path_pi = Math.PI,
    path_tau = 2 * path_pi,
    path_epsilon = 1e-6,
    tauEpsilon = path_tau - path_epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function moveTo(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function lineTo(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > path_epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > path_epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((path_pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > path_epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function arc(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > path_epsilon || Math.abs(this._y1 - y0) > path_epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % path_tau + path_tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > path_epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= path_pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function rect(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function toString() {
    return this._;
  }
};
/* harmony default export */ var src_path = (path);
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/constant.js
/* harmony default export */ function src_constant(x) {
  return function constant() {
    return x;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/arc.js




function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < math_epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(math_max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

/* harmony default export */ function arc() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = src_constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;
    if (!context) context = buffer = src_path(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > math_epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > tau - math_epsilon) {
        context.moveTo(r1 * cos(a0), r1 * sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > math_epsilon) {
          context.moveTo(r0 * cos(a1), r0 * sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > math_epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = math_min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > math_epsilon) {
            var p0 = asin(rp / r0 * sin(ap)),
                p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > math_epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > math_epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10); // Apply rounded corners?

          if (rc > math_epsilon) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc; // Restrict the corner radius according to the sector angle.

            if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                  lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = math_min(rc, (r0 - lc) / (kc - 1));
              rc1 = math_min(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > math_epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > math_epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > math_epsilon) || !(da0 > math_epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > math_epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : src_constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : src_constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : src_constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : src_constant(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : src_constant(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : src_constant(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : src_constant(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;
/* harmony default export */ function src_array(x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/point.js
function point_x(p) {
  return p[0];
}
function point_y(p) {
  return p[1];
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/line.js





/* harmony default export */ function line(x, y) {
  var defined = src_constant(true),
      context = null,
      curve = curve_linear,
      output = null;
  x = typeof x === "function" ? x : x === undefined ? point_x : src_constant(x);
  y = typeof y === "function" ? y : y === undefined ? point_y : src_constant(y);

  function line(data) {
    var i,
        n = (data = src_array(data)).length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = src_path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : src_constant(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : src_constant(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : src_constant(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/area.js






/* harmony default export */ function src_area(x0, y0, y1) {
  var x1 = null,
      defined = src_constant(true),
      context = null,
      curve = curve_linear,
      output = null;
  x0 = typeof x0 === "function" ? x0 : x0 === undefined ? point_x : src_constant(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === undefined ? src_constant(0) : src_constant(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === undefined ? point_y : src_constant(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = src_array(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = src_path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : src_constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : src_constant(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : src_constant(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : src_constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : src_constant(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : src_constant(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : src_constant(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/circle.js

/* harmony default export */ var circle = ({
  draw: function draw(context, size) {
    var r = Math.sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/cross.js
/* harmony default export */ var symbol_cross = ({
  draw: function draw(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
/* harmony default export */ var diamond = ({
  draw: function draw(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/star.js

var ka = 0.89081309152928522810,
    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),
    kx = Math.sin(tau / 10) * kr,
    ky = -Math.cos(tau / 10) * kr;
/* harmony default export */ var star = ({
  draw: function draw(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/square.js
/* harmony default export */ var square = ({
  draw: function draw(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);
/* harmony default export */ var triangle = ({
  draw: function draw(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/wye.js
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
/* harmony default export */ var wye = ({
  draw: function draw(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
});
;// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol.js









var symbols = [circle, symbol_cross, diamond, square, star, triangle, wye];
/* harmony default export */ function symbol(type, size) {
  var context = null;
  type = typeof type === "function" ? type : src_constant(type || circle);
  size = typeof size === "function" ? size : src_constant(size === undefined ? 64 : +size);

  function symbol() {
    var buffer;
    if (!context) context = buffer = src_path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : src_constant(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : src_constant(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
;// CONCATENATED MODULE: ./node_modules/vega-canvas/src/domCanvas.js
function domCanvas(w, h) {
  if (typeof document !== 'undefined' && document.createElement) {
    var c = document.createElement('canvas');

    if (c && c.getContext) {
      c.width = w;
      c.height = h;
      return c;
    }
  }

  return null;
}
var domImage = function domImage() {
  return typeof Image !== 'undefined' ? Image : null;
};
;// CONCATENATED MODULE: ./node_modules/vega-scale/node_modules/d3-array/src/range.js
/* harmony default export */ function src_range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/vega-scale/node_modules/d3-array/src/ascending.js
/* harmony default export */ function vega_scale_node_modules_d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/vega-scale/node_modules/d3-array/src/bisector.js

/* harmony default export */ function d3_array_src_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = src_bisector_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function src_bisector_ascendingComparator(f) {
  return function (d, x) {
    return vega_scale_node_modules_d3_array_src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-scale/node_modules/d3-array/src/number.js


var src_number_marked = /*#__PURE__*/regenerator_default().mark(d3_array_src_number_numbers);

function d3_array_src_number_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = d3_array_src_number_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function d3_array_src_number_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return d3_array_src_number_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return d3_array_src_number_arrayLikeToArray(o, minLen); }

function d3_array_src_number_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function node_modules_d3_array_src_number(x) {
  return x === null ? NaN : +x;
}
function d3_array_src_number_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof === undefined)) {
            _context.next = 21;
            break;
          }

          _iterator = d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 40;
          break;

        case 21:
          index = -1;
          _iterator2 = d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 32;
            break;
          }

          _value = _step2.value;

          if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
            _context.next = 30;
            break;
          }

          _context.next = 30;
          return _value;

        case 30:
          _context.next = 25;
          break;

        case 32:
          _context.next = 37;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 37:
          _context.prev = 37;

          _iterator2.f();

          return _context.finish(37);

        case 40:
        case "end":
          return _context.stop();
      }
    }
  }, src_number_marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
}
;// CONCATENATED MODULE: ./node_modules/vega-scale/node_modules/d3-array/src/bisect.js



var ascendingBisect = d3_array_src_bisector(vega_scale_node_modules_d3_array_src_ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = d3_array_src_bisector(node_modules_d3_array_src_number).center;
/* harmony default export */ var bisect = (bisectRight);
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      {
        if (typeof domain === "function") this.interpolator(domain);else this.range(domain);
        break;
      }

    default:
      {
        this.domain(domain);
        if (typeof interpolator === "function") this.interpolator(interpolator);else this.range(interpolator);
        break;
      }
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/ordinal.js
function ordinal_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = ordinal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ordinal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ordinal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ordinal_arrayLikeToArray(o, minLen); }

function ordinal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var implicit = Symbol("implicit");
function ordinal() {
  var index = new Map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new Map();

    var _iterator = ordinal_createForOfIteratorHelper(_),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;
        var key = value + "";
        if (index.has(key)) continue;
        index.set(key, domain.push(value));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);
  return scale;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/ticks.js
var src_ticks_e10 = Math.sqrt(50),
    src_ticks_e5 = Math.sqrt(10),
    src_ticks_e2 = Math.sqrt(2);
/* harmony default export */ function d3_array_src_ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = src_ticks_tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function src_ticks_tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= src_ticks_e10 ? 10 : error >= src_ticks_e5 ? 5 : error >= src_ticks_e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= src_ticks_e10 ? 10 : error >= src_ticks_e5 ? 5 : error >= src_ticks_e2 ? 2 : 1);
}
function src_ticks_tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= src_ticks_e10) step1 *= 10;else if (error >= src_ticks_e5) step1 *= 5;else if (error >= src_ticks_e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/tickFormat.js


function tickFormat(start, stop, count, specifier) {
  var step = src_ticks_tickStep(start, stop, count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return defaultLocale_format(specifier);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/ascending.js
/* harmony default export */ function d3_scale_node_modules_d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/bisector.js

/* harmony default export */ function node_modules_d3_array_src_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = d3_array_src_bisector_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function d3_array_src_bisector_ascendingComparator(f) {
  return function (d, x) {
    return d3_scale_node_modules_d3_array_src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/number.js


var d3_array_src_number_marked = /*#__PURE__*/regenerator_default().mark(node_modules_d3_array_src_number_numbers);

function node_modules_d3_array_src_number_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = node_modules_d3_array_src_number_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function node_modules_d3_array_src_number_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return node_modules_d3_array_src_number_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return node_modules_d3_array_src_number_arrayLikeToArray(o, minLen); }

function node_modules_d3_array_src_number_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function d3_scale_node_modules_d3_array_src_number(x) {
  return x === null ? NaN : +x;
}
function node_modules_d3_array_src_number_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof === undefined)) {
            _context.next = 21;
            break;
          }

          _iterator = node_modules_d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 40;
          break;

        case 21:
          index = -1;
          _iterator2 = node_modules_d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 32;
            break;
          }

          _value = _step2.value;

          if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
            _context.next = 30;
            break;
          }

          _context.next = 30;
          return _value;

        case 30:
          _context.next = 25;
          break;

        case 32:
          _context.next = 37;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 37:
          _context.prev = 37;

          _iterator2.f();

          return _context.finish(37);

        case 40:
        case "end":
          return _context.stop();
      }
    }
  }, d3_array_src_number_marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/bisect.js



var bisect_ascendingBisect = node_modules_d3_array_src_bisector(d3_scale_node_modules_d3_array_src_ascending);
var bisect_bisectRight = bisect_ascendingBisect.right;
var bisect_bisectLeft = bisect_ascendingBisect.left;
var bisect_bisectCenter = node_modules_d3_array_src_bisector(d3_scale_node_modules_d3_array_src_number).center;
/* harmony default export */ var src_bisect = (bisect_bisectRight);
;// CONCATENATED MODULE: ./node_modules/d3-color/src/define.js
/* harmony default export */ function src_define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function define_extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) {
    prototype[key] = definition[key];
  }

  return prototype;
}
;// CONCATENATED MODULE: ./node_modules/d3-color/src/color.js

function Color() {}
var _darker = 0.7;


var _brighter = 1 / _darker;


var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
src_define(Color, color, {
  copy: function copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function color_rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
src_define(Rgb, color_rgb, define_extend(Color, {
  brighter: function brighter(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function darker(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function rgb() {
    return this;
  },
  displayable: function displayable() {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

src_define(Hsl, hsl, define_extend(Color, {
  brighter: function brighter(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function darker(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },
  formatHsl: function formatHsl() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basis.js
function basis_basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
/* harmony default export */ function src_basis(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis_basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basisClosed.js

/* harmony default export */ function src_basisClosed(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis_basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/constant.js
/* harmony default export */ var d3_interpolate_src_constant = (function (x) {
  return function () {
    return x;
  };
});
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/color.js


function color_linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? color_linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : d3_interpolate_src_constant(isNaN(a) ? b : a);
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : d3_interpolate_src_constant(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? color_linear(a, d) : d3_interpolate_src_constant(isNaN(a) ? b : a);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/rgb.js




/* harmony default export */ var rgb = ((function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = color_rgb(start)).r, (end = color_rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
})(1));

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = color_rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(src_basis);
var rgbBasisClosed = rgbSpline(src_basisClosed);
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/numberArray.js
/* harmony default export */ function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) {
      c[i] = a[i] * (1 - t) + b[i] * t;
    }

    return c;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/array.js


/* harmony default export */ function d3_interpolate_src_array(a, b) {
  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
}
function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) {
    x[i] = value(a[i], b[i]);
  }

  for (; i < nb; ++i) {
    c[i] = b[i];
  }

  return function (t) {
    for (i = 0; i < na; ++i) {
      c[i] = x[i](t);
    }

    return c;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/date.js
/* harmony default export */ function date(a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/number.js
/* harmony default export */ function d3_interpolate_src_number(a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/object.js

/* harmony default export */ function src_object(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) {
      c[k] = i[k](t);
    }

    return c;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/string.js

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function string_zero(b) {
  return function () {
    return b;
  };
}

function string_one(b) {
  return function (t) {
    return b(t) + "";
  };
}

/* harmony default export */ function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: d3_interpolate_src_number(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? string_one(q[0].x) : string_zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) {
      s[(o = q[i]).i] = o.x(t);
    }

    return s.join("");
  });
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/value.js









/* harmony default export */ function value(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? d3_interpolate_src_constant(b) : (t === "number" ? d3_interpolate_src_number : t === "string" ? (c = color(b)) ? (b = c, rgb) : string : b instanceof color ? rgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? src_object : d3_interpolate_src_number)(a, b);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/round.js
/* harmony default export */ function src_round(a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/constant.js
function constants(x) {
  return function () {
    return x;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/number.js
function number_number(x) {
  return +x;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/continuous.js




var unit = [0, 1];
function continuous_identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = src_bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit,
      range = unit,
      interpolate = value,
      transform,
      untransform,
      unknown,
      clamp = continuous_identity,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== continuous_identity) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3_interpolate_src_number)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_, number_number), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = Array.from(_), interpolate = src_round, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? true : continuous_identity, rescale()) : clamp !== continuous_identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(continuous_identity, continuous_identity);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/linear.js




function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return d3_array_src_ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    while (maxIter-- > 0) {
      step = src_ticks_tickIncrement(start, stop, count);

      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }

      prestep = step;
    }

    return scale;
  };

  return scale;
}
function linear_linear() {
  var scale = continuous();

  scale.copy = function () {
    return copy(scale, linear_linear());
  };

  initRange.apply(scale, arguments);
  return linearish(scale);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/identity.js


function identity_identity(domain) {
  var unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = Array.from(_, number_number), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity_identity(domain).unknown(unknown);
  };

  domain = arguments.length ? Array.from(domain, number_number) : [0, 1];
  return linearish(scale);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/nice.js
function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/log.js






function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = d3_array_src_ticks(u, v, n);
    } else {
      z = d3_array_src_ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = defaultLocale_format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain(nice(domain(), {
      floor: function floor(x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function ceil(x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}
function log_log() {
  var scale = loggish(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, log_log()).base(scale.base());
  };

  initRange.apply(scale, arguments);
  return scale;
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/pow.js




function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(continuous_identity, continuous_identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(continuous_identity, continuous_identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}
function pow_pow() {
  var scale = powish(transformer());

  scale.copy = function () {
    return copy(scale, pow_pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);
  return scale;
}
function pow_sqrt() {
  return pow_pow.apply(null, arguments).exponent(0.5);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/symlog.js




function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}
function symlog_symlog() {
  var scale = symlogish(transformer());

  scale.copy = function () {
    return copy(scale, symlog_symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-time/node_modules/d3-array/src/ascending.js
/* harmony default export */ function d3_time_node_modules_d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/d3-time/node_modules/d3-array/src/bisector.js

/* harmony default export */ function d3_time_node_modules_d3_array_src_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = node_modules_d3_array_src_bisector_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function node_modules_d3_array_src_bisector_ascendingComparator(f) {
  return function (d, x) {
    return d3_time_node_modules_d3_array_src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-time/node_modules/d3-array/src/ticks.js
var d3_array_src_ticks_e10 = Math.sqrt(50),
    d3_array_src_ticks_e5 = Math.sqrt(10),
    d3_array_src_ticks_e2 = Math.sqrt(2);
/* harmony default export */ function node_modules_d3_array_src_ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = d3_array_src_ticks_tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function d3_array_src_ticks_tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= d3_array_src_ticks_e10 ? 10 : error >= d3_array_src_ticks_e5 ? 5 : error >= d3_array_src_ticks_e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= d3_array_src_ticks_e10 ? 10 : error >= d3_array_src_ticks_e5 ? 5 : error >= d3_array_src_ticks_e2 ? 2 : 1);
}
function d3_array_src_ticks_tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= d3_array_src_ticks_e10) step1 *= 10;else if (error >= d3_array_src_ticks_e5) step1 *= 5;else if (error >= d3_array_src_ticks_e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/d3-time/src/ticks.js


















function ticker(year, month, week, day, hour, minute) {
  var tickIntervals = [[src_second, 1, durationSecond], [src_second, 5, 5 * durationSecond], [src_second, 15, 15 * durationSecond], [src_second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function ticks(start, stop, count) {
    var reverse = stop < start;

    if (reverse) {
      var _ref = [stop, start];
      start = _ref[0];
      stop = _ref[1];
    }

    var interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    var ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop

    return reverse ? ticks.reverse() : ticks;
  }

  function tickInterval(start, stop, count) {
    var target = Math.abs(stop - start) / count;
    var i = d3_time_node_modules_d3_array_src_bisector(function (_ref2) {
      var _ref3 = (0,slicedToArray/* default */.Z)(_ref2, 3),
          step = _ref3[2];

      return step;
    }).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every(d3_array_src_ticks_tickStep(start / durationYear, stop / durationYear, count));
    if (i === 0) return src_millisecond.every(Math.max(d3_array_src_ticks_tickStep(start, stop, count), 1));

    var _tickIntervals = (0,slicedToArray/* default */.Z)(tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i], 2),
        t = _tickIntervals[0],
        step = _tickIntervals[1];

    return t.every(step);
  }

  return [ticks, tickInterval];
}

var _ticker = ticker(src_utcYear, src_utcMonth, utcSunday, src_utcDay, src_utcHour, src_utcMinute),
    _ticker2 = (0,slicedToArray/* default */.Z)(_ticker, 2),
    utcTicks = _ticker2[0],
    utcTickInterval = _ticker2[1];

var _ticker3 = ticker(src_year, src_month, sunday, src_day, src_hour, src_minute),
    _ticker4 = (0,slicedToArray/* default */.Z)(_ticker3, 2),
    timeTicks = _ticker4[0],
    timeTickInterval = _ticker4[1];


;// CONCATENATED MODULE: ./node_modules/d3-scale/src/time.js






function time_date(t) {
  return new Date(t);
}

function time_number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
  var scale = continuous(),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(Array.from(_, time_number)) : domain().map(time_date);
  };

  scale.ticks = function (interval) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d, interval)) : scale;
  };

  scale.copy = function () {
    return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
  };

  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, src_year, src_month, sunday, src_day, src_hour, src_minute, src_second, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/utcTime.js




function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, src_utcYear, src_utcMonth, utcSunday, src_utcDay, src_utcHour, src_utcMinute, src_second, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/sequential.js









function sequential_transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = continuous_identity,
      clamp = false,
      unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    var _ref, _ref2;

    return arguments.length ? ((_ref = _, _ref2 = (0,slicedToArray/* default */.Z)(_ref, 2), x0 = _ref2[0], x1 = _ref2[1], _ref), t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function (_) {
      var _ref3, _ref4;

      var r0, r1;
      return arguments.length ? ((_ref3 = _, _ref4 = (0,slicedToArray/* default */.Z)(_ref3, 2), r0 = _ref4[0], r1 = _ref4[1], _ref3), interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }

  scale.range = range(value);
  scale.rangeRound = range(src_round);

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function sequential_copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(sequential_transformer()(continuous_identity));

  scale.copy = function () {
    return sequential_copy(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}
function sequentialLog() {
  var scale = loggish(sequential_transformer()).domain([1, 10]);

  scale.copy = function () {
    return sequential_copy(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}
function sequentialSymlog() {
  var scale = symlogish(sequential_transformer());

  scale.copy = function () {
    return sequential_copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
  var scale = powish(sequential_transformer());

  scale.copy = function () {
    return sequential_copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}
function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/piecewise.js

function piecewise(interpolate, values) {
  if (values === undefined) values = interpolate, interpolate = value;
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) {
    I[i] = interpolate(v, v = values[++i]);
  }

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/diverging.js










function diverging_transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      s = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = continuous_identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    var _ref, _ref2;

    return arguments.length ? ((_ref = _, _ref2 = (0,slicedToArray/* default */.Z)(_ref, 3), x0 = _ref2[0], x1 = _ref2[1], x2 = _ref2[2], _ref), t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function (_) {
      var _ref3, _ref4;

      var r0, r1, r2;
      return arguments.length ? ((_ref3 = _, _ref4 = (0,slicedToArray/* default */.Z)(_ref3, 3), r0 = _ref4[0], r1 = _ref4[1], r2 = _ref4[2], _ref3), interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }

  scale.range = range(value);
  scale.rangeRound = range(src_round);

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
    return scale;
  };
}

function diverging() {
  var scale = linearish(diverging_transformer()(continuous_identity));

  scale.copy = function () {
    return sequential_copy(scale, diverging());
  };

  return initInterpolator.apply(scale, arguments);
}
function divergingLog() {
  var scale = loggish(diverging_transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return sequential_copy(scale, divergingLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}
function divergingSymlog() {
  var scale = symlogish(diverging_transformer());

  scale.copy = function () {
    return sequential_copy(scale, divergingSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}
function divergingPow() {
  var scale = powish(diverging_transformer());

  scale.copy = function () {
    return sequential_copy(scale, divergingPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}
function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/node_modules/d3-array/src/quantile.js




function src_quantile_quantile(values, p, valueof) {
  values = Float64Array.from(numbers(values, valueof));
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return min(values);
  if (p >= 1) return max(values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
      value1 = min(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}
function src_quantile_quantileSorted(values, p) {
  var valueof = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : d3_scale_node_modules_d3_array_src_number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/quantile.js
function quantile_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = quantile_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function quantile_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return quantile_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return quantile_arrayLikeToArray(o, minLen); }

function quantile_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function d3_scale_src_quantile_quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) {
      thresholds[i - 1] = src_quantile_quantileSorted(domain, i / n);
    }

    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : range[src_bisect(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    var _iterator = quantile_createForOfIteratorHelper(_),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var d = _step.value;
        if (d != null && !isNaN(d = +d)) domain.push(d);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    domain.sort(d3_scale_node_modules_d3_array_src_ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return d3_scale_src_quantile_quantile().domain(domain).range(range).unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/quantize.js




function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x != null && x <= x ? range[src_bisect(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) {
      domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    }

    return scale;
  }

  scale.domain = function (_) {
    var _ref, _ref2;

    return arguments.length ? ((_ref = _, _ref2 = (0,slicedToArray/* default */.Z)(_ref, 2), x0 = _ref2[0], x1 = _ref2[1], _ref), x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return initRange.apply(linearish(scale), arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-scale/src/threshold.js


function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x != null && x <= x ? range[src_bisect(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/discrete.js
/* harmony default export */ function discrete(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/hue.js

/* harmony default export */ function src_hue(a, b) {
  var i = hue(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/decompose.js
var decompose_degrees = 180 / Math.PI;
var decompose_identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
/* harmony default export */ function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * decompose_degrees,
    skewX: Math.atan(skewX) * decompose_degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/parse.js

var svgNode;
/* eslint-disable no-undef */

function parseCss(value) {
  var m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? decompose_identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return decompose_identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return decompose_identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/index.js



function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: d3_interpolate_src_number(xa, xb)
      }, {
        i: i - 2,
        x: d3_interpolate_src_number(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: d3_interpolate_src_number(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: d3_interpolate_src_number(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolate_src_number(xa, xb)
      }, {
        i: i - 2,
        x: d3_interpolate_src_number(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) {
        s[(o = q[i]).i] = o.x(t);
      }

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

/* harmony default export */ var src_zoom = ((function zoomRho(rho, rho2, rho4) {
  // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]
  function zoom(p0, p1) {
    var ux0 = p0[0],
        uy0 = p0[1],
        w0 = p0[2],
        ux1 = p1[0],
        uy1 = p1[1],
        w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S; // Special case for u0 ≅ u1.

    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;

      i = function i(t) {
        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
      };
    } // General case.
    else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
            b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;

        i = function i(t) {
          var s = t * S,
              coshr0 = cosh(r0),
              u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }

    i.duration = S * 1000 * rho / Math.SQRT2;
    return i;
  }

  zoom.rho = function (_) {
    var _1 = Math.max(1e-3, +_),
        _2 = _1 * _1,
        _4 = _2 * _2;

    return zoomRho(_1, _2, _4);
  };

  return zoom;
})(Math.SQRT2, 2, 4));
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/hsl.js



function hsl_hsl(hue) {
  return function (start, end) {
    var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

/* harmony default export */ var src_hsl = (hsl_hsl(hue));
var hslLong = hsl_hsl(nogamma);
;// CONCATENATED MODULE: ./node_modules/d3-color/src/math.js
var math_radians = Math.PI / 180;
var math_degrees = 180 / Math.PI;
;// CONCATENATED MODULE: ./node_modules/d3-color/src/lab.js


 // https://observablehq.com/@mbostock/lab-and-rgb

var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    lab_t0 = 4 / 29,
    lab_t1 = 6 / 29,
    t2 = 3 * lab_t1 * lab_t1,
    t3 = lab_t1 * lab_t1 * lab_t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}
function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}
src_define(Lab, lab, define_extend(Color, {
  brighter: function brighter(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function darker(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function rgb() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + lab_t0;
}

function lab2xyz(t) {
  return t > lab_t1 ? t * t * t : t2 * (t - lab_t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * math_degrees;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * math_radians;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

src_define(Hcl, hcl, define_extend(Color, {
  brighter: function brighter(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function darker(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function rgb() {
    return hcl2lab(this).rgb();
  }
}));
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/lab.js


function lab_lab(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/hcl.js



function hcl_hcl(hue) {
  return function (start, end) {
    var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

/* harmony default export */ var src_hcl = (hcl_hcl(hue));
var hclLong = hcl_hcl(nogamma);
;// CONCATENATED MODULE: ./node_modules/d3-color/src/cubehelix.js



var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * math_degrees - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix_cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
src_define(Cubehelix, cubehelix_cubehelix, define_extend(Color, {
  brighter: function brighter(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function darker(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function rgb() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * math_radians,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/cubehelix.js



function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = cubehelix_cubehelix(start)).h, (end = cubehelix_cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

/* harmony default export */ var src_cubehelix = (cubehelix(hue));
var cubehelixLong = cubehelix(nogamma);
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/quantize.js
/* harmony default export */ function src_quantize(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) {
    samples[i] = interpolator(i / (n - 1));
  }

  return samples;
}
;// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/index.js





















;// CONCATENATED MODULE: ./node_modules/vega-scale/build/vega-scale.module.js


var _symbols, _formats;









function bandSpace(count, paddingInner, paddingOuter) {
  var space = count - paddingInner + paddingOuter * 2;
  return count ? space > 0 ? space : 1 : 0;
}

var Identity = 'identity';
var vega_scale_module_Linear = 'linear';
var Log = 'log';
var Pow = 'pow';
var Sqrt = 'sqrt';
var Symlog = 'symlog';
var Time = 'time';
var UTC = 'utc';
var Sequential = 'sequential';
var Diverging = 'diverging';
var vega_scale_module_Quantile = 'quantile';
var Quantize = 'quantize';
var Threshold = 'threshold';
var Ordinal = 'ordinal';
var Point = 'point';
var Band = 'band';
var BinOrdinal = 'bin-ordinal'; // categories

var Continuous = 'continuous';
var Discrete = 'discrete';
var Discretizing = 'discretizing';
var Interpolating = 'interpolating';
var Temporal = 'temporal';

function invertRange(scale) {
  return function (_) {
    var lo = _[0],
        hi = _[1],
        t;

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    return [scale.invert(lo), scale.invert(hi)];
  };
}

function invertRangeExtent(scale) {
  return function (_) {
    var range = scale.range();
    var lo = _[0],
        hi = _[1],
        min = -1,
        max,
        t,
        i,
        n;

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    for (i = 0, n = range.length; i < n; ++i) {
      if (range[i] >= lo && range[i] <= hi) {
        if (min < 0) min = i;
        max = i;
      }
    }

    if (min < 0) return undefined;
    lo = scale.invertExtent(range[min]);
    hi = scale.invertExtent(range[max]);
    return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];
  };
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range;
  var range$1 = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range$1[1] < range$1[0],
        stop = range$1[1 - reverse],
        space = bandSpace(n, paddingInner, paddingOuter);
    var start = range$1[reverse - 0];
    step = (stop - start) / (space || 1);

    if (round) {
      step = Math.floor(step);
    }

    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);

    if (round) {
      start = Math.round(start);
      bandwidth = Math.round(bandwidth);
    }

    var values = src_range(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    if (arguments.length) {
      domain(_);
      return rescale();
    } else {
      return domain();
    }
  };

  scale.range = function (_) {
    if (arguments.length) {
      range$1 = [+_[0], +_[1]];
      return rescale();
    } else {
      return range$1.slice();
    }
  };

  scale.rangeRound = function (_) {
    range$1 = [+_[0], +_[1]];
    round = true;
    return rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    if (arguments.length) {
      round = !!_;
      return rescale();
    } else {
      return round;
    }
  };

  scale.padding = function (_) {
    if (arguments.length) {
      paddingOuter = Math.max(0, Math.min(1, _));
      paddingInner = paddingOuter;
      return rescale();
    } else {
      return paddingInner;
    }
  };

  scale.paddingInner = function (_) {
    if (arguments.length) {
      paddingInner = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingInner;
    }
  };

  scale.paddingOuter = function (_) {
    if (arguments.length) {
      paddingOuter = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingOuter;
    }
  };

  scale.align = function (_) {
    if (arguments.length) {
      align = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return align;
    }
  };

  scale.invertRange = function (_) {
    // bail if range has null or undefined values
    if (_[0] == null || _[1] == null) return;
    var reverse = range$1[1] < range$1[0],
        values = reverse ? ordinalRange().reverse() : ordinalRange(),
        n = values.length - 1;
    var lo = +_[0],
        hi = +_[1],
        a,
        b,
        t; // bail if either range endpoint is invalid

    if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range

    if (hi < lo) {
      t = lo;
      lo = hi;
      hi = t;
    }

    if (hi < values[0] || lo > range$1[1 - reverse]) return; // binary search to index into scale range

    a = Math.max(0, bisectRight(values, lo) - 1);
    b = lo === hi ? a : bisectRight(values, hi) - 1; // increment index a if lo is within padding gap

    if (lo - values[a] > bandwidth + 1e-10) ++a;

    if (reverse) {
      // map + swap
      t = a;
      a = n - b;
      b = n - t;
    }

    return a > b ? undefined : domain().slice(a, b + 1);
  };

  scale.invert = function (_) {
    var value = scale.invertRange([_, _]);
    return value ? value[0] : value;
  };

  scale.copy = function () {
    return band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band().paddingInner(1));
}

var vega_scale_module_map = Array.prototype.map;

function vega_scale_module_numbers(_) {
  return vega_scale_module_map.call(_, toNumber);
}

var vega_scale_module_slice = Array.prototype.slice;

function scaleBinOrdinal() {
  var domain = [],
      range = [];

  function scale(x) {
    return x == null || x !== x ? undefined : range[(bisect(domain, x) - 1) % range.length];
  }

  scale.domain = function (_) {
    if (arguments.length) {
      domain = vega_scale_module_numbers(_);
      return scale;
    } else {
      return domain.slice();
    }
  };

  scale.range = function (_) {
    if (arguments.length) {
      range = vega_scale_module_slice.call(_);
      return scale;
    } else {
      return range.slice();
    }
  };

  scale.tickFormat = function (count, specifier) {
    return tickFormat(domain[0], peek(domain), count == null ? 10 : count, specifier);
  };

  scale.copy = function () {
    return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
  };

  return scale;
}

var scales = {};
/**
 * Augment scales with their type and needed inverse methods.
 */

function create(type, constructor, metadata) {
  var ctr = function scale() {
    var s = constructor();

    if (!s.invertRange) {
      s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;
    }

    s.type = type;
    return s;
  };

  ctr.metadata = toSet(array(metadata));
  return ctr;
}

function vega_scale_module_scale(type, scale, metadata) {
  if (arguments.length > 1) {
    scales[type] = create(type, scale, metadata);
    return this;
  } else {
    return isValidScaleType(type) ? scales[type] : undefined;
  }
} // identity scale


vega_scale_module_scale(Identity, identity_identity); // continuous scales

vega_scale_module_scale(vega_scale_module_Linear, linear_linear, Continuous);
vega_scale_module_scale(Log, log_log, [Continuous, Log]);
vega_scale_module_scale(Pow, pow_pow, Continuous);
vega_scale_module_scale(Sqrt, pow_sqrt, Continuous);
vega_scale_module_scale(Symlog, symlog_symlog, Continuous);
vega_scale_module_scale(Time, time, [Continuous, Temporal]);
vega_scale_module_scale(UTC, utcTime, [Continuous, Temporal]); // sequential scales

vega_scale_module_scale(Sequential, sequential, [Continuous, Interpolating]); // backwards compat

vega_scale_module_scale("".concat(Sequential, "-").concat(vega_scale_module_Linear), sequential, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Sequential, "-").concat(Log), sequentialLog, [Continuous, Interpolating, Log]);
vega_scale_module_scale("".concat(Sequential, "-").concat(Pow), sequentialPow, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Sequential, "-").concat(Sqrt), sequentialSqrt, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Sequential, "-").concat(Symlog), sequentialSymlog, [Continuous, Interpolating]); // diverging scales

vega_scale_module_scale("".concat(Diverging, "-").concat(vega_scale_module_Linear), diverging, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Diverging, "-").concat(Log), divergingLog, [Continuous, Interpolating, Log]);
vega_scale_module_scale("".concat(Diverging, "-").concat(Pow), divergingPow, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Diverging, "-").concat(Sqrt), divergingSqrt, [Continuous, Interpolating]);
vega_scale_module_scale("".concat(Diverging, "-").concat(Symlog), divergingSymlog, [Continuous, Interpolating]); // discretizing scales

vega_scale_module_scale(vega_scale_module_Quantile, d3_scale_src_quantile_quantile, [Discretizing, vega_scale_module_Quantile]);
vega_scale_module_scale(Quantize, quantize, Discretizing);
vega_scale_module_scale(Threshold, threshold, Discretizing); // discrete scales

vega_scale_module_scale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);
vega_scale_module_scale(Ordinal, ordinal, Discrete);
vega_scale_module_scale(Band, band, Discrete);
vega_scale_module_scale(Point, point, Discrete);

function isValidScaleType(type) {
  return _has(scales, type);
}

function hasType(key, type) {
  var s = scales[key];
  return s && s.metadata[type];
}

function isContinuous(key) {
  return hasType(key, Continuous);
}

function isDiscrete(key) {
  return hasType(key, Discrete);
}

function isDiscretizing(key) {
  return hasType(key, Discretizing);
}

function isLogarithmic(key) {
  return hasType(key, Log);
}

function isTemporal(key) {
  return hasType(key, Temporal);
}

function isInterpolating(key) {
  return hasType(key, Interpolating);
}

function isQuantile(key) {
  return hasType(key, vega_scale_module_Quantile);
}

var scaleProps = ['clamp', 'base', 'constant', 'exponent'];

function interpolateRange(interpolator, range) {
  var start = range[0],
      span = peek(range) - start;
  return function (i) {
    return interpolator(start + i * span);
  };
}

function interpolateColors(colors, type, gamma) {
  return piecewise(interpolate(type || 'rgb', gamma), colors);
}

function quantizeInterpolator(interpolator, count) {
  var samples = new Array(count),
      n = count + 1;

  for (var i = 0; i < count;) {
    samples[i] = interpolator(++i / n);
  }

  return samples;
}

function scaleCopy(scale) {
  var t = scale.type,
      s = scale.copy();
  s.type = t;
  return s;
}

function scaleFraction(scale$1, min, max) {
  var delta = max - min;
  var i, t, s;

  if (!delta || !Number.isFinite(delta)) {
    return vega_util_module_constant(0.5);
  } else {
    i = (t = scale$1.type).indexOf('-');
    t = i < 0 ? t : t.slice(i + 1);
    s = vega_scale_module_scale(t)().domain([min, max]).range([0, 1]);
    scaleProps.forEach(function (m) {
      return scale$1[m] ? s[m](scale$1[m]()) : 0;
    });
    return s;
  }
}

function interpolate(type, gamma) {
  var interp = src_namespaceObject[method(type)];
  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
}

function method(type) {
  return 'interpolate' + type.toLowerCase().split('-').map(function (s) {
    return s[0].toUpperCase() + s.slice(1);
  }).join('');
}

var vega_scale_module_continuous = {
  blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',
  greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',
  greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',
  oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',
  purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',
  reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',
  blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',
  bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',
  greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',
  orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',
  purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',
  purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',
  purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',
  redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',
  yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',
  yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',
  yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',
  blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',
  brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',
  purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',
  purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',
  redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',
  redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',
  yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',
  redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',
  redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',
  pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',
  spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',
  viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',
  magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',
  inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',
  plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',
  cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',
  rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',
  sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',
  turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',
  browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',
  tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',
  teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',
  warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',
  goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',
  goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',
  goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',
  lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',
  lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',
  lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',
  lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',
  lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',
  darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',
  darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',
  darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',
  darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',
  darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'
};
var vega_scale_module_discrete = {
  category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',
  category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',
  category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',
  category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',
  tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',
  tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',
  accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',
  dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',
  paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',
  pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',
  pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',
  set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',
  set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',
  set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'
};

function colors(palette) {
  var n = palette.length / 6 | 0,
      c = new Array(n);

  for (var i = 0; i < n;) {
    c[i] = '#' + palette.slice(i * 6, ++i * 6);
  }

  return c;
}

function apply(_, f) {
  for (var k in _) {
    scheme(k, f(_[k]));
  }
}

var schemes = {};
apply(vega_scale_module_discrete, colors);
apply(vega_scale_module_continuous, function (_) {
  return interpolateColors(colors(_));
});

function scheme(name, scheme) {
  name = name && name.toLowerCase();

  if (arguments.length > 1) {
    schemes[name] = scheme;
    return this;
  } else {
    return schemes[name];
  }
}

var SymbolLegend = 'symbol';
var DiscreteLegend = 'discrete';
var GradientLegend = 'gradient';

var defaultFormatter = function defaultFormatter(value) {
  return isArray(value) ? value.map(function (v) {
    return String(v);
  }) : String(value);
};

var vega_scale_module_ascending = function ascending(a, b) {
  return a[1] - b[1];
};

var descending = function descending(a, b) {
  return b[1] - a[1];
};
/**
 * Determine the tick count or interval function.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} count - The desired tick count or interval specifier.
 * @param {number} minStep - The desired minimum step between tick values.
 * @return {*} - The tick count or interval function.
 */


function tickCount(scale, count, minStep) {
  var step;

  if (isNumber(count)) {
    if (scale.bins) {
      count = Math.max(count, scale.bins.length);
    }

    if (minStep != null) {
      count = Math.min(count, Math.floor(span(scale.domain()) / minStep || 1));
    }
  }

  if (isObject(count)) {
    step = count.step;
    count = count.interval;
  }

  if (isString(count)) {
    count = scale.type === Time ? timeInterval(count) : scale.type == UTC ? utcInterval(count) : error('Only time and utc scales accept interval strings.');
    if (step) count = count.every(step);
  }

  return count;
}
/**
 * Filter a set of candidate tick values, ensuring that only tick values
 * that lie within the scale range are included.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {Array<*>} ticks - The candidate tick values.
 * @param {*} count - The tick count or interval function.
 * @return {Array<*>} - The filtered tick values.
 */


function validTicks(scale, ticks, count) {
  var range = scale.range(),
      lo = range[0],
      hi = peek(range),
      cmp = vega_scale_module_ascending;

  if (lo > hi) {
    range = hi;
    hi = lo;
    lo = range;
    cmp = descending;
  }

  lo = Math.floor(lo);
  hi = Math.ceil(hi); // filter ticks to valid values within the range
  // additionally sort ticks in range order (#2579)

  ticks = ticks.map(function (v) {
    return [v, scale(v)];
  }).filter(function (_) {
    return lo <= _[1] && _[1] <= hi;
  }).sort(cmp).map(function (_) {
    return _[0];
  });

  if (count > 0 && ticks.length > 1) {
    var endpoints = [ticks[0], peek(ticks)];

    while (ticks.length > count && ticks.length >= 3) {
      ticks = ticks.filter(function (_, i) {
        return !(i % 2);
      });
    }

    if (ticks.length < 3) {
      ticks = endpoints;
    }
  }

  return ticks;
}
/**
 * Generate tick values for the given scale and approximate tick count or
 * interval value. If the scale has a 'ticks' method, it will be used to
 * generate the ticks, with the count argument passed as a parameter. If the
 * scale lacks a 'ticks' method, the full scale domain will be returned.
 * @param {Scale} scale - The scale for which to generate tick values.
 * @param {*} [count] - The approximate number of desired ticks.
 * @return {Array<*>} - The generated tick values.
 */


function tickValues(scale, count) {
  return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
}
/**
 * Generate a label format function for a scale. If the scale has a
 * 'tickFormat' method, it will be used to generate the formatter, with the
 * count and specifier arguments passed as parameters. If the scale lacks a
 * 'tickFormat' method, the returned formatter performs simple string coercion.
 * If the input scale is a logarithmic scale and the format specifier does not
 * indicate a desired decimal precision, a special variable precision formatter
 * that automatically trims trailing zeroes will be generated.
 * @param {Scale} scale - The scale for which to generate the label formatter.
 * @param {*} [count] - The approximate number of desired ticks.
 * @param {string} [specifier] - The format specifier. Must be a legal d3
 *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or
 *   time multi-format specifier object.
 * @return {function(*):string} - The generated label formatter.
 */


function vega_scale_module_tickFormat(locale, scale, count, specifier, formatType, noSkip) {
  var type = scale.type;
  var format = defaultFormatter;

  if (type === Time || formatType === Time) {
    format = locale.timeFormat(specifier);
  } else if (type === UTC || formatType === UTC) {
    format = locale.utcFormat(specifier);
  } else if (isLogarithmic(type)) {
    var varfmt = locale.formatFloat(specifier);

    if (noSkip || scale.bins) {
      format = varfmt;
    } else {
      var test = tickLog(scale, count, false);

      format = function format(_) {
        return test(_) ? varfmt(_) : '';
      };
    }
  } else if (scale.tickFormat) {
    // if d3 scale has tickFormat, it must be continuous
    var d = scale.domain();
    format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);
  } else if (specifier) {
    format = locale.format(specifier);
  }

  return format;
}

function tickLog(scale, count, values) {
  var ticks = tickValues(scale, count),
      base = scale.base(),
      logb = Math.log(base),
      k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria

  var test = function test(d) {
    var i = d / Math.pow(base, Math.round(Math.log(d) / logb));
    if (i * base < base - 0.5) i *= base;
    return i <= k;
  };

  return values ? ticks.filter(test) : test;
}

var vega_scale_module_symbols = (_symbols = {}, (0,defineProperty/* default */.Z)(_symbols, vega_scale_module_Quantile, 'quantiles'), (0,defineProperty/* default */.Z)(_symbols, Quantize, 'thresholds'), (0,defineProperty/* default */.Z)(_symbols, Threshold, 'domain'), _symbols);
var vega_scale_module_formats = (_formats = {}, (0,defineProperty/* default */.Z)(_formats, vega_scale_module_Quantile, 'quantiles'), (0,defineProperty/* default */.Z)(_formats, Quantize, 'domain'), _formats);

function labelValues(scale, count) {
  return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : vega_scale_module_symbols[scale.type] ? thresholdValues(scale[vega_scale_module_symbols[scale.type]]()) : tickValues(scale, count);
}

function thresholdFormat(locale, scale, specifier) {
  var _ = scale[vega_scale_module_formats[scale.type]](),
      n = _.length;

  var d = n > 1 ? _[1] - _[0] : _[0],
      i;

  for (i = 1; i < n; ++i) {
    d = Math.min(d, _[i] - _[i - 1]);
  } // tickCount = 3 ticks times 10 for increased resolution


  return locale.formatSpan(0, d, 3 * 10, specifier);
}

function thresholdValues(thresholds) {
  var values = [-Infinity].concat(thresholds);
  values.max = +Infinity;
  return values;
}

function binValues(bins) {
  var values = bins.slice(0, -1);
  values.max = peek(bins);
  return values;
}

var isDiscreteRange = function isDiscreteRange(scale) {
  return vega_scale_module_symbols[scale.type] || scale.bins;
};

function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {
  var format = vega_scale_module_formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : vega_scale_module_tickFormat(locale, scale, count, specifier, formatType, noSkip);
  return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);
}

var formatRange = function formatRange(format) {
  return function (value, index, array) {
    var limit = vega_scale_module_get(array[index + 1], vega_scale_module_get(array.max, +Infinity)),
        lo = formatValue(value, format),
        hi = formatValue(limit, format);
    return lo && hi ? lo + " \u2013 " + hi : hi ? '< ' + hi : "\u2265 " + lo;
  };
};

var vega_scale_module_get = function get(value, dflt) {
  return value != null ? value : dflt;
};

var formatDiscrete = function formatDiscrete(format) {
  return function (value, index) {
    return index ? format(value) : null;
  };
};

var formatPoint = function formatPoint(format) {
  return function (value) {
    return format(value);
  };
};

var formatValue = function formatValue(value, format) {
  return Number.isFinite(value) ? format(value) : null;
};

function labelFraction(scale) {
  var domain = scale.domain(),
      count = domain.length - 1;
  var lo = +domain[0],
      hi = +peek(domain),
      span = hi - lo;

  if (scale.type === Threshold) {
    var adjust = count ? span / count : 0.1;
    lo -= adjust;
    hi += adjust;
    span = hi - lo;
  }

  return function (value) {
    return (value - lo) / span;
  };
}

function vega_scale_module_format(locale, scale, specifier, formatType) {
  var type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience

  if (isString(specifier) && isTemporal(type)) {
    specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');
  }

  return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);
}

function domainCaption(locale, scale, opt) {
  opt = opt || {};
  var max = Math.max(3, opt.maxlen || 7),
      fmt = vega_scale_module_format(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries

  if (isDiscretizing(scale.type)) {
    var v = labelValues(scale).slice(1).map(fmt),
        n = v.length;
    return "".concat(n, " boundar").concat(n === 1 ? 'y' : 'ies', ": ").concat(v.join(', '));
  } // if scale domain is discrete, list values
  else if (isDiscrete(scale.type)) {
      var d = scale.domain(),
          _n = d.length,
          _v = _n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');

      return "".concat(_n, " value").concat(_n === 1 ? '' : 's', ": ").concat(_v);
    } // if scale domain is continuous, describe value range
    else {
        var _d = scale.domain();

        return "values from ".concat(fmt(_d[0]), " to ").concat(fmt(peek(_d)));
      }
}


;// CONCATENATED MODULE: ./node_modules/vega-scenegraph/build/vega-scenegraph.module.js








var gradient_id = 0;

function resetSVGGradientId() {
  gradient_id = 0;
}

var patternPrefix = 'p_';

function isGradient(value) {
  return value && value.gradient;
}

function gradientRef(g, defs, base) {
  var type = g.gradient;
  var id = g.id,
      prefix = type === 'radial' ? patternPrefix : ''; // check id, assign default values as needed

  if (!id) {
    id = g.id = 'gradient_' + gradient_id++;

    if (type === 'radial') {
      g.x1 = vega_scenegraph_module_get(g.x1, 0.5);
      g.y1 = vega_scenegraph_module_get(g.y1, 0.5);
      g.r1 = vega_scenegraph_module_get(g.r1, 0);
      g.x2 = vega_scenegraph_module_get(g.x2, 0.5);
      g.y2 = vega_scenegraph_module_get(g.y2, 0.5);
      g.r2 = vega_scenegraph_module_get(g.r2, 0.5);
      prefix = patternPrefix;
    } else {
      g.x1 = vega_scenegraph_module_get(g.x1, 0);
      g.y1 = vega_scenegraph_module_get(g.y1, 0);
      g.x2 = vega_scenegraph_module_get(g.x2, 1);
      g.y2 = vega_scenegraph_module_get(g.y2, 0);
    }
  } // register definition


  defs[id] = g; // return url reference

  return 'url(' + (base || '') + '#' + prefix + id + ')';
}

function vega_scenegraph_module_get(val, def) {
  return val != null ? val : def;
}

function Gradient(p0, p1) {
  var stops = [],
      gradient;
  return gradient = {
    gradient: 'linear',
    x1: p0 ? p0[0] : 0,
    y1: p0 ? p0[1] : 0,
    x2: p1 ? p1[0] : 1,
    y2: p1 ? p1[1] : 0,
    stops: stops,
    stop: function stop(offset, color) {
      stops.push({
        offset: offset,
        color: color
      });
      return gradient;
    }
  };
}

var lookup = {
  'basis': {
    curve: basis
  },
  'basis-closed': {
    curve: basisClosed
  },
  'basis-open': {
    curve: basisOpen
  },
  'bundle': {
    curve: bundle,
    tension: 'beta',
    value: 0.85
  },
  'cardinal': {
    curve: cardinal,
    tension: 'tension',
    value: 0
  },
  'cardinal-open': {
    curve: cardinalOpen,
    tension: 'tension',
    value: 0
  },
  'cardinal-closed': {
    curve: cardinalClosed,
    tension: 'tension',
    value: 0
  },
  'catmull-rom': {
    curve: catmullRom,
    tension: 'alpha',
    value: 0.5
  },
  'catmull-rom-closed': {
    curve: catmullRomClosed,
    tension: 'alpha',
    value: 0.5
  },
  'catmull-rom-open': {
    curve: catmullRomOpen,
    tension: 'alpha',
    value: 0.5
  },
  'linear': {
    curve: curve_linear
  },
  'linear-closed': {
    curve: linearClosed
  },
  'monotone': {
    horizontal: monotoneY,
    vertical: monotoneX
  },
  'natural': {
    curve: natural
  },
  'step': {
    curve: step
  },
  'step-after': {
    curve: stepAfter
  },
  'step-before': {
    curve: stepBefore
  }
};

function curves(type, orientation, tension) {
  var entry = _has(lookup, type) && lookup[type],
      curve = null;

  if (entry) {
    curve = entry.curve || entry[orientation || 'vertical'];

    if (entry.tension && tension != null) {
      curve = curve[entry.tension](tension);
    }
  }

  return curve;
} // Path parsing and rendering code adapted from fabric.js -- Thanks!


var cmdlen = {
  m: 2,
  l: 2,
  h: 1,
  v: 1,
  c: 6,
  s: 4,
  q: 4,
  t: 2,
  a: 7
},
    regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\.\d+)(\.\d)/g, /(\d)([-+])/g, /\s|,|###/];

function pathParse(pathstr) {
  var result = [];
  var curr, chunks, parsed, param, cmd, len, i, j, n, m; // First, break path into command sequence

  var path = pathstr.slice().replace(regexp[0], '###$1').split(regexp[1]).slice(1); // Next, parse each command in turn

  for (i = 0, n = path.length; i < n; ++i) {
    curr = path[i];
    chunks = curr.slice(1).trim().replace(regexp[2], '$1###$2').replace(regexp[3], '$1###$2').split(regexp[4]);
    cmd = curr.charAt(0);
    parsed = [cmd];

    for (j = 0, m = chunks.length; j < m; ++j) {
      if ((param = +chunks[j]) === param) {
        // not NaN
        parsed.push(param);
      }
    }

    len = cmdlen[cmd.toLowerCase()];

    if (parsed.length - 1 > len) {
      var _m = parsed.length;
      j = 1;
      result.push([cmd].concat(parsed.slice(j, j += len))); // handle implicit lineTo (#2803)

      cmd = cmd === 'M' ? 'L' : cmd === 'm' ? 'l' : cmd;

      for (; j < _m; j += len) {
        result.push([cmd].concat(parsed.slice(j, j + len)));
      }
    } else {
      result.push(parsed);
    }
  }

  return result;
}

var DegToRad = Math.PI / 180;
var Epsilon = 1e-14;
var HalfPi = Math.PI / 2;
var Tau = Math.PI * 2;
var HalfSqrt3 = Math.sqrt(3) / 2;
var segmentCache = {};
var bezierCache = {};
var join = [].join; // Copied from Inkscape svgtopdf, thanks!

function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  var key = join.call(arguments);

  if (segmentCache[key]) {
    return segmentCache[key];
  }

  var th = rotateX * DegToRad;
  var sin_th = Math.sin(th);
  var cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  var pl = px * px / (rx * rx) + py * py / (ry * ry);

  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }

  var a00 = cos_th / rx;
  var a01 = sin_th / rx;
  var a10 = -sin_th / ry;
  var a11 = cos_th / ry;
  var x0 = a00 * ox + a01 * oy;
  var y0 = a10 * ox + a11 * oy;
  var x1 = a00 * x + a01 * y;
  var y1 = a10 * x + a11 * y;
  var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
  var sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0) sfactor_sq = 0;
  var sfactor = Math.sqrt(sfactor_sq);
  if (sweep == large) sfactor = -sfactor;
  var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
  var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
  var th0 = Math.atan2(y0 - yc, x0 - xc);
  var th1 = Math.atan2(y1 - yc, x1 - xc);
  var th_arc = th1 - th0;

  if (th_arc < 0 && sweep === 1) {
    th_arc += Tau;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= Tau;
  }

  var segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));
  var result = [];

  for (var i = 0; i < segs; ++i) {
    var th2 = th0 + i * th_arc / segs;
    var th3 = th0 + (i + 1) * th_arc / segs;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }

  return segmentCache[key] = result;
}

function bezier(params) {
  var key = join.call(params);

  if (bezierCache[key]) {
    return bezierCache[key];
  }

  var cx = params[0],
      cy = params[1],
      th0 = params[2],
      th1 = params[3],
      rx = params[4],
      ry = params[5],
      sin_th = params[6],
      cos_th = params[7];
  var a00 = cos_th * rx;
  var a01 = -sin_th * ry;
  var a10 = sin_th * rx;
  var a11 = cos_th * ry;
  var cos_th0 = Math.cos(th0);
  var sin_th0 = Math.sin(th0);
  var cos_th1 = Math.cos(th1);
  var sin_th1 = Math.sin(th1);
  var th_half = 0.5 * (th1 - th0);
  var sin_th_h2 = Math.sin(th_half * 0.5);
  var t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
  var x1 = cx + cos_th0 - t * sin_th0;
  var y1 = cy + sin_th0 + t * cos_th0;
  var x3 = cx + cos_th1;
  var y3 = cy + sin_th1;
  var x2 = x3 + t * sin_th1;
  var y2 = y3 - t * cos_th1;
  return bezierCache[key] = [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
}

var temp = ['l', 0, 0, 0, 0, 0, 0, 0];

function scale$1(current, sX, sY) {
  var c = temp[0] = current[0];

  if (c === 'a' || c === 'A') {
    temp[1] = sX * current[1];
    temp[2] = sY * current[2];
    temp[3] = current[3];
    temp[4] = current[4];
    temp[5] = current[5];
    temp[6] = sX * current[6];
    temp[7] = sY * current[7];
  } else if (c === 'h' || c === 'H') {
    temp[1] = sX * current[1];
  } else if (c === 'v' || c === 'V') {
    temp[1] = sY * current[1];
  } else {
    for (var i = 1, n = current.length; i < n; ++i) {
      temp[i] = (i % 2 == 1 ? sX : sY) * current[i];
    }
  }

  return temp;
}

function pathRender(context, path, l, t, sX, sY) {
  var current,
      // current instruction
  previous = null,
      x = 0,
      // current x
  y = 0,
      // current y
  controlX = 0,
      // current control point x
  controlY = 0,
      // current control point y
  tempX,
      tempY,
      tempControlX,
      tempControlY;
  if (l == null) l = 0;
  if (t == null) t = 0;
  if (sX == null) sX = 1;
  if (sY == null) sY = sX;
  if (context.beginPath) context.beginPath();

  for (var i = 0, len = path.length; i < len; ++i) {
    current = path[i];

    if (sX !== 1 || sY !== 1) {
      current = scale$1(current, sX, sY);
    }

    switch (current[0]) {
      // first letter
      case 'l':
        // lineto, relative
        x += current[1];
        y += current[2];
        context.lineTo(x + l, y + t);
        break;

      case 'L':
        // lineto, absolute
        x = current[1];
        y = current[2];
        context.lineTo(x + l, y + t);
        break;

      case 'h':
        // horizontal lineto, relative
        x += current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'H':
        // horizontal lineto, absolute
        x = current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'v':
        // vertical lineto, relative
        y += current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'V':
        // verical lineto, absolute
        y = current[1];
        context.lineTo(x + l, y + t);
        break;

      case 'm':
        // moveTo, relative
        x += current[1];
        y += current[2];
        context.moveTo(x + l, y + t);
        break;

      case 'M':
        // moveTo, absolute
        x = current[1];
        y = current[2];
        context.moveTo(x + l, y + t);
        break;

      case 'c':
        // bezierCurveTo, relative
        tempX = x + current[5];
        tempY = y + current[6];
        controlX = x + current[3];
        controlY = y + current[4];
        context.bezierCurveTo(x + current[1] + l, // x1
        y + current[2] + t, // y1
        controlX + l, // x2
        controlY + t, // y2
        tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'C':
        // bezierCurveTo, absolute
        x = current[5];
        y = current[6];
        controlX = current[3];
        controlY = current[4];
        context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
        break;

      case 's':
        // shorthand cubic bezierCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t); // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.

        controlX = x + current[1];
        controlY = y + current[2];
        x = tempX;
        y = tempY;
        break;

      case 'S':
        // shorthand cubic bezierCurveTo, absolute
        tempX = current[3];
        tempY = current[4]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY; // set control point to 2nd one of this command
        // the first control point is assumed to be the reflection of
        // the second control point on the previous command relative
        // to the current point.

        controlX = current[1];
        controlY = current[2];
        break;

      case 'q':
        // quadraticCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[3];
        tempY = y + current[4];
        controlX = x + current[1];
        controlY = y + current[2];
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'Q':
        // quadraticCurveTo, absolute
        tempX = current[3];
        tempY = current[4];
        context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        controlX = current[1];
        controlY = current[2];
        break;

      case 't':
        // shorthand quadraticCurveTo, relative
        // transform to absolute x,y
        tempX = x + current[1];
        tempY = y + current[2];

        if (previous[0].match(/[QqTt]/) === null) {
          // If there is no previous command or if the previous command was not a Q, q, T or t,
          // assume the control point is coincident with the current point
          controlX = x;
          controlY = y;
        } else if (previous[0] === 't') {
          // calculate reflection of previous control points for t
          controlX = 2 * x - tempControlX;
          controlY = 2 * y - tempControlY;
        } else if (previous[0] === 'q') {
          // calculate reflection of previous control points for q
          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
        }

        tempControlX = controlX;
        tempControlY = controlY;
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        controlX = x + current[1];
        controlY = y + current[2];
        break;

      case 'T':
        tempX = current[1];
        tempY = current[2]; // calculate reflection of previous control points

        controlX = 2 * x - controlX;
        controlY = 2 * y - controlY;
        context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
        x = tempX;
        y = tempY;
        break;

      case 'a':
        drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + x + l, current[7] + y + t]);
        x += current[6];
        y += current[7];
        break;

      case 'A':
        drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + l, current[7] + t]);
        x = current[6];
        y = current[7];
        break;

      case 'z':
      case 'Z':
        context.closePath();
        break;
    }

    previous = current;
  }
}

function drawArc(context, x, y, coords) {
  var seg = segments(coords[5], // end x
  coords[6], // end y
  coords[0], // radius x
  coords[1], // radius y
  coords[3], // large flag
  coords[4], // sweep flag
  coords[2], // rotation
  x, y);

  for (var i = 0; i < seg.length; ++i) {
    var bez = bezier(seg[i]);
    context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
  }
}

var Tan30 = 0.5773502691896257;
var builtins = {
  'circle': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, Tau);
    }
  },
  'cross': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          s = r / 2.5;
      context.moveTo(-r, -s);
      context.lineTo(-r, s);
      context.lineTo(-s, s);
      context.lineTo(-s, r);
      context.lineTo(s, r);
      context.lineTo(s, s);
      context.lineTo(r, s);
      context.lineTo(r, -s);
      context.lineTo(s, -s);
      context.lineTo(s, -r);
      context.lineTo(-s, -r);
      context.lineTo(-s, -s);
      context.closePath();
    }
  },
  'diamond': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(-r, 0);
      context.lineTo(0, -r);
      context.lineTo(r, 0);
      context.lineTo(0, r);
      context.closePath();
    }
  },
  'square': {
    draw: function draw(context, size) {
      var w = Math.sqrt(size),
          x = -w / 2;
      context.rect(x, x, w, w);
    }
  },
  'arrow': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          s = r / 7,
          t = r / 2.5,
          v = r / 8;
      context.moveTo(-s, r);
      context.lineTo(s, r);
      context.lineTo(s, -v);
      context.lineTo(t, -v);
      context.lineTo(0, -r);
      context.lineTo(-t, -v);
      context.lineTo(-s, -v);
      context.closePath();
    }
  },
  'wedge': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r,
          o = h - r * Tan30,
          b = r / 4;
      context.moveTo(0, -h - o);
      context.lineTo(-b, h - o);
      context.lineTo(b, h - o);
      context.closePath();
    }
  },
  'triangle': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r,
          o = h - r * Tan30;
      context.moveTo(0, -h - o);
      context.lineTo(-r, h - o);
      context.lineTo(r, h - o);
      context.closePath();
    }
  },
  'triangle-up': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r;
      context.moveTo(0, -h);
      context.lineTo(-r, h);
      context.lineTo(r, h);
      context.closePath();
    }
  },
  'triangle-down': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r;
      context.moveTo(0, h);
      context.lineTo(-r, -h);
      context.lineTo(r, -h);
      context.closePath();
    }
  },
  'triangle-right': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r;
      context.moveTo(h, 0);
      context.lineTo(-h, -r);
      context.lineTo(-h, r);
      context.closePath();
    }
  },
  'triangle-left': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2,
          h = HalfSqrt3 * r;
      context.moveTo(-h, 0);
      context.lineTo(h, -r);
      context.lineTo(h, r);
      context.closePath();
    }
  },
  'stroke': {
    draw: function draw(context, size) {
      var r = Math.sqrt(size) / 2;
      context.moveTo(-r, 0);
      context.lineTo(r, 0);
    }
  }
};

function vega_scenegraph_module_symbols(_) {
  return _has(builtins, _) ? builtins[_] : customSymbol(_);
}

var custom = {};

function customSymbol(path) {
  if (!_has(custom, path)) {
    var parsed = pathParse(path);
    custom[path] = {
      draw: function draw(context, size) {
        pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
      }
    };
  }

  return custom[path];
}

var vega_scenegraph_module_C = 0.448084975506; // C = 1 - c

function rectangleX(d) {
  return d.x;
}

function rectangleY(d) {
  return d.y;
}

function rectangleWidth(d) {
  return d.width;
}

function rectangleHeight(d) {
  return d.height;
}

function vega_scenegraph_module_number(_) {
  return typeof _ === 'function' ? _ : function () {
    return +_;
  };
}

function clamp(value, min, max) {
  return Math.max(min, Math.min(value, max));
}

function vg_rect() {
  var x = rectangleX,
      y = rectangleY,
      width = rectangleWidth,
      height = rectangleHeight,
      crTL = vega_scenegraph_module_number(0),
      crTR = crTL,
      crBL = crTL,
      crBR = crTL,
      context = null;

  function rectangle(_, x0, y0) {
    var buffer,
        x1 = x0 != null ? x0 : +x.call(this, _),
        y1 = y0 != null ? y0 : +y.call(this, _),
        w = +width.call(this, _),
        h = +height.call(this, _),
        s = Math.min(w, h) / 2,
        tl = clamp(+crTL.call(this, _), 0, s),
        tr = clamp(+crTR.call(this, _), 0, s),
        bl = clamp(+crBL.call(this, _), 0, s),
        br = clamp(+crBR.call(this, _), 0, s);
    if (!context) context = buffer = src_path();

    if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) {
      context.rect(x1, y1, w, h);
    } else {
      var x2 = x1 + w,
          y2 = y1 + h;
      context.moveTo(x1 + tl, y1);
      context.lineTo(x2 - tr, y1);
      context.bezierCurveTo(x2 - vega_scenegraph_module_C * tr, y1, x2, y1 + vega_scenegraph_module_C * tr, x2, y1 + tr);
      context.lineTo(x2, y2 - br);
      context.bezierCurveTo(x2, y2 - vega_scenegraph_module_C * br, x2 - vega_scenegraph_module_C * br, y2, x2 - br, y2);
      context.lineTo(x1 + bl, y2);
      context.bezierCurveTo(x1 + vega_scenegraph_module_C * bl, y2, x1, y2 - vega_scenegraph_module_C * bl, x1, y2 - bl);
      context.lineTo(x1, y1 + tl);
      context.bezierCurveTo(x1, y1 + vega_scenegraph_module_C * tl, x1 + vega_scenegraph_module_C * tl, y1, x1 + tl, y1);
      context.closePath();
    }

    if (buffer) {
      context = null;
      return buffer + '' || null;
    }
  }

  rectangle.x = function (_) {
    if (arguments.length) {
      x = vega_scenegraph_module_number(_);
      return rectangle;
    } else {
      return x;
    }
  };

  rectangle.y = function (_) {
    if (arguments.length) {
      y = vega_scenegraph_module_number(_);
      return rectangle;
    } else {
      return y;
    }
  };

  rectangle.width = function (_) {
    if (arguments.length) {
      width = vega_scenegraph_module_number(_);
      return rectangle;
    } else {
      return width;
    }
  };

  rectangle.height = function (_) {
    if (arguments.length) {
      height = vega_scenegraph_module_number(_);
      return rectangle;
    } else {
      return height;
    }
  };

  rectangle.cornerRadius = function (tl, tr, br, bl) {
    if (arguments.length) {
      crTL = vega_scenegraph_module_number(tl);
      crTR = tr != null ? vega_scenegraph_module_number(tr) : crTL;
      crBR = br != null ? vega_scenegraph_module_number(br) : crTL;
      crBL = bl != null ? vega_scenegraph_module_number(bl) : crTR;
      return rectangle;
    } else {
      return crTL;
    }
  };

  rectangle.context = function (_) {
    if (arguments.length) {
      context = _ == null ? null : _;
      return rectangle;
    } else {
      return context;
    }
  };

  return rectangle;
}

function vg_trail() {
  var x,
      y,
      size,
      defined,
      context = null,
      ready,
      x1,
      y1,
      r1;

  function point(x2, y2, w2) {
    var r2 = w2 / 2;

    if (ready) {
      var ux = y1 - y2,
          uy = x2 - x1;

      if (ux || uy) {
        // get normal vector
        var ud = Math.sqrt(ux * ux + uy * uy),
            rx = (ux /= ud) * r1,
            ry = (uy /= ud) * r1,
            t = Math.atan2(uy, ux); // draw segment

        context.moveTo(x1 - rx, y1 - ry);
        context.lineTo(x2 - ux * r2, y2 - uy * r2);
        context.arc(x2, y2, r2, t - Math.PI, t);
        context.lineTo(x1 + rx, y1 + ry);
        context.arc(x1, y1, r1, t, t + Math.PI);
      } else {
        context.arc(x2, y2, r2, 0, Tau);
      }

      context.closePath();
    } else {
      ready = 1;
    }

    x1 = x2;
    y1 = y2;
    r1 = r2;
  }

  function trail(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) context = buffer = src_path();

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) ready = 0;
      }

      if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
    }

    if (buffer) {
      context = null;
      return buffer + '' || null;
    }
  }

  trail.x = function (_) {
    if (arguments.length) {
      x = _;
      return trail;
    } else {
      return x;
    }
  };

  trail.y = function (_) {
    if (arguments.length) {
      y = _;
      return trail;
    } else {
      return y;
    }
  };

  trail.size = function (_) {
    if (arguments.length) {
      size = _;
      return trail;
    } else {
      return size;
    }
  };

  trail.defined = function (_) {
    if (arguments.length) {
      defined = _;
      return trail;
    } else {
      return defined;
    }
  };

  trail.context = function (_) {
    if (arguments.length) {
      if (_ == null) {
        context = null;
      } else {
        context = _;
      }

      return trail;
    } else {
      return context;
    }
  };

  return trail;
}

function value$1(a, b) {
  return a != null ? a : b;
}

var x = function x(item) {
  return item.x || 0;
},
    y = function y(item) {
  return item.y || 0;
},
    w = function w(item) {
  return item.width || 0;
},
    h = function h(item) {
  return item.height || 0;
},
    xw = function xw(item) {
  return (item.x || 0) + (item.width || 0);
},
    yh = function yh(item) {
  return (item.y || 0) + (item.height || 0);
},
    sa = function sa(item) {
  return item.startAngle || 0;
},
    ea = function ea(item) {
  return item.endAngle || 0;
},
    pa = function pa(item) {
  return item.padAngle || 0;
},
    ir = function ir(item) {
  return item.innerRadius || 0;
},
    or = function or(item) {
  return item.outerRadius || 0;
},
    cr = function cr(item) {
  return item.cornerRadius || 0;
},
    tl = function tl(item) {
  return value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0;
},
    tr = function tr(item) {
  return value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0;
},
    br = function br(item) {
  return value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0;
},
    bl = function bl(item) {
  return value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0;
},
    sz = function sz(item) {
  return value$1(item.size, 64);
},
    ts = function ts(item) {
  return item.size || 1;
},
    def = function def(item) {
  return !(item.defined === false);
},
    type = function type(item) {
  return vega_scenegraph_module_symbols(item.shape || 'circle');
};

var arcShape = arc().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr),
    areavShape = src_area().x(x).y1(y).y0(yh).defined(def),
    areahShape = src_area().y(y).x1(x).x0(xw).defined(def),
    lineShape = line().x(x).y(y).defined(def),
    rectShape = vg_rect().x(x).y(y).width(w).height(h).cornerRadius(tl, tr, br, bl),
    symbolShape = symbol().type(type).size(sz),
    trailShape = vg_trail().x(x).y(y).defined(def).size(ts);

function hasCornerRadius(item) {
  return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
}

function arc$1(context, item) {
  return arcShape.context(context)(item);
}

function area$1(context, items) {
  var item = items[0],
      interp = item.interpolate || 'linear';
  return (item.orient === 'horizontal' ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context)(items);
}

function line$1(context, items) {
  var item = items[0],
      interp = item.interpolate || 'linear';
  return lineShape.curve(curves(interp, item.orient, item.tension)).context(context)(items);
}

function rectangle(context, item, x, y) {
  return rectShape.context(context)(item, x, y);
}

function shape$1(context, item) {
  return (item.mark.shape || item.shape).context(context)(item);
}

function symbol$1(context, item) {
  return symbolShape.context(context)(item);
}

function trail$1(context, items) {
  return trailShape.context(context)(items);
}

var clip_id = 1;

function resetSVGClipId() {
  clip_id = 1;
}

function clip$1(renderer, item, size) {
  var clip = item.clip,
      defs = renderer._defs,
      id = item.clip_id || (item.clip_id = 'clip' + clip_id++),
      c = defs.clipping[id] || (defs.clipping[id] = {
    id: id
  });

  if (isFunction(clip)) {
    c.path = clip(null);
  } else if (hasCornerRadius(size)) {
    c.path = rectangle(null, size, 0, 0);
  } else {
    c.width = size.width || 0;
    c.height = size.height || 0;
  }

  return 'url(#' + id + ')';
}

function Bounds(b) {
  this.clear();
  if (b) this.union(b);
}

Bounds.prototype = {
  clone: function clone() {
    return new Bounds(this);
  },
  clear: function clear() {
    this.x1 = +Number.MAX_VALUE;
    this.y1 = +Number.MAX_VALUE;
    this.x2 = -Number.MAX_VALUE;
    this.y2 = -Number.MAX_VALUE;
    return this;
  },
  empty: function empty() {
    return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
  },
  equals: function equals(b) {
    return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
  },
  set: function set(x1, y1, x2, y2) {
    if (x2 < x1) {
      this.x2 = x1;
      this.x1 = x2;
    } else {
      this.x1 = x1;
      this.x2 = x2;
    }

    if (y2 < y1) {
      this.y2 = y1;
      this.y1 = y2;
    } else {
      this.y1 = y1;
      this.y2 = y2;
    }

    return this;
  },
  add: function add(x, y) {
    if (x < this.x1) this.x1 = x;
    if (y < this.y1) this.y1 = y;
    if (x > this.x2) this.x2 = x;
    if (y > this.y2) this.y2 = y;
    return this;
  },
  expand: function expand(d) {
    this.x1 -= d;
    this.y1 -= d;
    this.x2 += d;
    this.y2 += d;
    return this;
  },
  round: function round() {
    this.x1 = Math.floor(this.x1);
    this.y1 = Math.floor(this.y1);
    this.x2 = Math.ceil(this.x2);
    this.y2 = Math.ceil(this.y2);
    return this;
  },
  scale: function scale(s) {
    this.x1 *= s;
    this.y1 *= s;
    this.x2 *= s;
    this.y2 *= s;
    return this;
  },
  translate: function translate(dx, dy) {
    this.x1 += dx;
    this.x2 += dx;
    this.y1 += dy;
    this.y2 += dy;
    return this;
  },
  rotate: function rotate(angle, x, y) {
    var p = this.rotatedPoints(angle, x, y);
    return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
  },
  rotatedPoints: function rotatedPoints(angle, x, y) {
    var x1 = this.x1,
        y1 = this.y1,
        x2 = this.x2,
        y2 = this.y2,
        cos = Math.cos(angle),
        sin = Math.sin(angle),
        cx = x - x * cos + y * sin,
        cy = y - x * sin - y * cos;
    return [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy, cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy, cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy, cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy];
  },
  union: function union(b) {
    if (b.x1 < this.x1) this.x1 = b.x1;
    if (b.y1 < this.y1) this.y1 = b.y1;
    if (b.x2 > this.x2) this.x2 = b.x2;
    if (b.y2 > this.y2) this.y2 = b.y2;
    return this;
  },
  intersect: function intersect(b) {
    if (b.x1 > this.x1) this.x1 = b.x1;
    if (b.y1 > this.y1) this.y1 = b.y1;
    if (b.x2 < this.x2) this.x2 = b.x2;
    if (b.y2 < this.y2) this.y2 = b.y2;
    return this;
  },
  encloses: function encloses(b) {
    return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
  },
  alignsWith: function alignsWith(b) {
    return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
  },
  intersects: function intersects(b) {
    return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
  },
  contains: function contains(x, y) {
    return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
  },
  width: function width() {
    return this.x2 - this.x1;
  },
  height: function height() {
    return this.y2 - this.y1;
  }
};

function Item(mark) {
  this.mark = mark;
  this.bounds = this.bounds || new Bounds();
}

function GroupItem(mark) {
  Item.call(this, mark);
  this.items = this.items || [];
}

vega_util_module_inherits(GroupItem, Item);

function ResourceLoader(customLoader) {
  this._pending = 0;
  this._loader = customLoader || index_browser_loader();
}

function increment(loader) {
  loader._pending += 1;
}

function decrement(loader) {
  loader._pending -= 1;
}

ResourceLoader.prototype = {
  pending: function pending() {
    return this._pending;
  },
  sanitizeURL: function sanitizeURL(uri) {
    var loader = this;
    increment(loader);
    return loader._loader.sanitize(uri, {
      context: 'href'
    }).then(function (opt) {
      decrement(loader);
      return opt;
    }).catch(function () {
      decrement(loader);
      return null;
    });
  },
  loadImage: function loadImage(uri) {
    var loader = this,
        Image = domImage();
    increment(loader);
    return loader._loader.sanitize(uri, {
      context: 'image'
    }).then(function (opt) {
      var url = opt.href;
      if (!url || !Image) throw {
        url: url
      };
      var img = new Image(); // set crossOrigin only if cors is defined; empty string sets anonymous mode
      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin

      var cors = _has(opt, 'crossOrigin') ? opt.crossOrigin : 'anonymous';
      if (cors != null) img.crossOrigin = cors; // attempt to load image resource

      img.onload = function () {
        return decrement(loader);
      };

      img.onerror = function () {
        return decrement(loader);
      };

      img.src = url;
      return img;
    }).catch(function (e) {
      decrement(loader);
      return {
        complete: false,
        width: 0,
        height: 0,
        src: e && e.url || ''
      };
    });
  },
  ready: function ready() {
    var loader = this;
    return new Promise(function (accept) {
      function poll(value) {
        if (!loader.pending()) accept(value);else setTimeout(function () {
          poll(true);
        }, 10);
      }

      poll(false);
    });
  }
};

function boundStroke(bounds, item, miter) {
  if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
    var sw = item.strokeWidth != null ? +item.strokeWidth : 1;
    bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
  }

  return bounds;
}

function miterAdjustment(item, strokeWidth) {
  // TODO: more sophisticated adjustment? Or miter support in boundContext?
  return item.strokeJoin && item.strokeJoin !== 'miter' ? 0 : strokeWidth;
}

var circleThreshold = Tau - 1e-8;
var bounds, lx, ly, rot, ma, mb, mc, md;

var vega_scenegraph_module_add = function add(x, y) {
  return bounds.add(x, y);
};

var addL = function addL(x, y) {
  return vega_scenegraph_module_add(lx = x, ly = y);
};

var addX = function addX(x) {
  return vega_scenegraph_module_add(x, bounds.y1);
};

var addY = function addY(y) {
  return vega_scenegraph_module_add(bounds.x1, y);
};

var px = function px(x, y) {
  return ma * x + mc * y;
};

var py = function py(x, y) {
  return mb * x + md * y;
};

var addp = function addp(x, y) {
  return vega_scenegraph_module_add(px(x, y), py(x, y));
};

var addpL = function addpL(x, y) {
  return addL(px(x, y), py(x, y));
};

function boundContext(_, deg) {
  bounds = _;

  if (deg) {
    rot = deg * DegToRad;
    ma = md = Math.cos(rot);
    mb = Math.sin(rot);
    mc = -mb;
  } else {
    ma = md = 1;
    rot = mb = mc = 0;
  }

  return context$1;
}

var context$1 = {
  beginPath: function beginPath() {},
  closePath: function closePath() {},
  moveTo: addpL,
  lineTo: addpL,
  rect: function rect(x, y, w, h) {
    if (rot) {
      addp(x + w, y);
      addp(x + w, y + h);
      addp(x, y + h);
      addpL(x, y);
    } else {
      vega_scenegraph_module_add(x + w, y + h);
      addL(x, y);
    }
  },
  quadraticCurveTo: function quadraticCurveTo(x1, y1, x2, y2) {
    var px1 = px(x1, y1),
        py1 = py(x1, y1),
        px2 = px(x2, y2),
        py2 = py(x2, y2);
    quadExtrema(lx, px1, px2, addX);
    quadExtrema(ly, py1, py2, addY);
    addL(px2, py2);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x3, y3) {
    var px1 = px(x1, y1),
        py1 = py(x1, y1),
        px2 = px(x2, y2),
        py2 = py(x2, y2),
        px3 = px(x3, y3),
        py3 = py(x3, y3);
    cubicExtrema(lx, px1, px2, px3, addX);
    cubicExtrema(ly, py1, py2, py3, addY);
    addL(px3, py3);
  },
  arc: function arc(cx, cy, r, sa, ea, ccw) {
    sa += rot;
    ea += rot; // store last point on path

    lx = r * Math.cos(ea) + cx;
    ly = r * Math.sin(ea) + cy;

    if (Math.abs(ea - sa) > circleThreshold) {
      // treat as full circle
      vega_scenegraph_module_add(cx - r, cy - r);
      vega_scenegraph_module_add(cx + r, cy + r);
    } else {
      var update = function update(a) {
        return vega_scenegraph_module_add(r * Math.cos(a) + cx, r * Math.sin(a) + cy);
      };

      var s, i; // sample end points

      update(sa);
      update(ea); // sample interior points aligned with 90 degrees

      if (ea !== sa) {
        sa = sa % Tau;
        if (sa < 0) sa += Tau;
        ea = ea % Tau;
        if (ea < 0) ea += Tau;

        if (ea < sa) {
          ccw = !ccw; // flip direction

          s = sa;
          sa = ea;
          ea = s; // swap end-points
        }

        if (ccw) {
          ea -= Tau;
          s = sa - sa % HalfPi;

          for (i = 0; i < 4 && s > ea; ++i, s -= HalfPi) {
            update(s);
          }
        } else {
          s = sa - sa % HalfPi + HalfPi;

          for (i = 0; i < 4 && s < ea; ++i, s = s + HalfPi) {
            update(s);
          }
        }
      }
    }
  }
};

function quadExtrema(x0, x1, x2, cb) {
  var t = (x0 - x1) / (x0 + x2 - 2 * x1);
  if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);
}

function cubicExtrema(x0, x1, x2, x3, cb) {
  var a = x3 - x0 + 3 * x1 - 3 * x2,
      b = x0 + x2 - 2 * x1,
      c = x0 - x1;
  var t0 = 0,
      t1 = 0,
      r; // solve for parameter t

  if (Math.abs(a) > Epsilon) {
    // quadratic equation
    r = b * b + c * a;

    if (r >= 0) {
      r = Math.sqrt(r);
      t0 = (-b + r) / a;
      t1 = (-b - r) / a;
    }
  } else {
    // linear equation
    t0 = 0.5 * c / b;
  } // calculate position


  if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));
  if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));
}

function cubic(t, x0, x1, x2, x3) {
  var s = 1 - t,
      s2 = s * s,
      t2 = t * t;
  return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;
}

var context = (context = domCanvas(1, 1)) ? context.getContext('2d') : null;
var b = new Bounds();

function intersectPath(draw) {
  return function (item, brush) {
    // rely on (inaccurate) bounds intersection if no context
    if (!context) return true; // add path to offscreen graphics context

    draw(context, item); // get bounds intersection region

    b.clear().union(item.bounds).intersect(brush).round();
    var x1 = b.x1,
        y1 = b.y1,
        x2 = b.x2,
        y2 = b.y2; // iterate over intersection region
    // perform fine grained inclusion test

    for (var _y = y1; _y <= y2; ++_y) {
      for (var _x = x1; _x <= x2; ++_x) {
        if (context.isPointInPath(_x, _y)) {
          return true;
        }
      }
    } // false if no hits in intersection region


    return false;
  };
}

function intersectPoint(item, box) {
  return box.contains(item.x || 0, item.y || 0);
}

function intersectRect(item, box) {
  var x = item.x || 0,
      y = item.y || 0,
      w = item.width || 0,
      h = item.height || 0;
  return box.intersects(b.set(x, y, x + w, y + h));
}

function intersectRule(item, box) {
  var x = item.x || 0,
      y = item.y || 0,
      x2 = item.x2 != null ? item.x2 : x,
      y2 = item.y2 != null ? item.y2 : y;
  return intersectBoxLine(box, x, y, x2, y2);
}

function intersectBoxLine(box, x, y, u, v) {
  var x1 = box.x1,
      y1 = box.y1,
      x2 = box.x2,
      y2 = box.y2,
      dx = u - x,
      dy = v - y;
  var t0 = 0,
      t1 = 1,
      p,
      q,
      r,
      e;

  for (e = 0; e < 4; ++e) {
    if (e === 0) {
      p = -dx;
      q = -(x1 - x);
    }

    if (e === 1) {
      p = dx;
      q = x2 - x;
    }

    if (e === 2) {
      p = -dy;
      q = -(y1 - y);
    }

    if (e === 3) {
      p = dy;
      q = y2 - y;
    }

    if (Math.abs(p) < 1e-10 && q < 0) return false;
    r = q / p;

    if (p < 0) {
      if (r > t1) return false;else if (r > t0) t0 = r;
    } else if (p > 0) {
      if (r < t0) return false;else if (r < t1) t1 = r;
    }
  }

  return true;
}

function blend(context, item) {
  context.globalCompositeOperation = item.blend || 'source-over';
}

function vega_scenegraph_module_value(value, dflt) {
  return value == null ? dflt : value;
}

function addStops(gradient, stops) {
  var n = stops.length;

  for (var i = 0; i < n; ++i) {
    gradient.addColorStop(stops[i].offset, stops[i].color);
  }

  return gradient;
}

function gradient(context, spec, bounds) {
  var w = bounds.width(),
      h = bounds.height();
  var gradient;

  if (spec.gradient === 'radial') {
    gradient = context.createRadialGradient(bounds.x1 + vega_scenegraph_module_value(spec.x1, 0.5) * w, bounds.y1 + vega_scenegraph_module_value(spec.y1, 0.5) * h, Math.max(w, h) * vega_scenegraph_module_value(spec.r1, 0), bounds.x1 + vega_scenegraph_module_value(spec.x2, 0.5) * w, bounds.y1 + vega_scenegraph_module_value(spec.y2, 0.5) * h, Math.max(w, h) * vega_scenegraph_module_value(spec.r2, 0.5));
  } else {
    // linear gradient
    var x1 = vega_scenegraph_module_value(spec.x1, 0),
        y1 = vega_scenegraph_module_value(spec.y1, 0),
        x2 = vega_scenegraph_module_value(spec.x2, 1),
        y2 = vega_scenegraph_module_value(spec.y2, 0);

    if (x1 === x2 || y1 === y2 || w === h) {
      // axis aligned: use normal gradient
      gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);
    } else {
      // not axis aligned: render gradient into a pattern (#2365)
      // this allows us to use normalized bounding box coordinates
      var _image = domCanvas(Math.ceil(w), Math.ceil(h)),
          ictx = _image.getContext('2d');

      ictx.scale(w, h);
      ictx.fillStyle = addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);
      ictx.fillRect(0, 0, w, h);
      return context.createPattern(_image, 'no-repeat');
    }
  }

  return addStops(gradient, spec.stops);
}

function vega_scenegraph_module_color(context, item, value) {
  return isGradient(value) ? gradient(context, value, item.bounds) : value;
}

function fill(context, item, opacity) {
  opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;

  if (opacity > 0) {
    context.globalAlpha = opacity;
    context.fillStyle = vega_scenegraph_module_color(context, item, item.fill);
    return true;
  } else {
    return false;
  }
}

var vega_scenegraph_module_Empty = [];

function stroke(context, item, opacity) {
  var lw = (lw = item.strokeWidth) != null ? lw : 1;
  if (lw <= 0) return false;
  opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;

  if (opacity > 0) {
    context.globalAlpha = opacity;
    context.strokeStyle = vega_scenegraph_module_color(context, item, item.stroke);
    context.lineWidth = lw;
    context.lineCap = item.strokeCap || 'butt';
    context.lineJoin = item.strokeJoin || 'miter';
    context.miterLimit = item.strokeMiterLimit || 10;

    if (context.setLineDash) {
      context.setLineDash(item.strokeDash || vega_scenegraph_module_Empty);
      context.lineDashOffset = item.strokeDashOffset || 0;
    }

    return true;
  } else {
    return false;
  }
}

function vega_scenegraph_module_compare(a, b) {
  return a.zindex - b.zindex || a.index - b.index;
}

function zorder(scene) {
  if (!scene.zdirty) return scene.zitems;
  var items = scene.items,
      output = [],
      item,
      i,
      n;

  for (i = 0, n = items.length; i < n; ++i) {
    item = items[i];
    item.index = i;
    if (item.zindex) output.push(item);
  }

  scene.zdirty = false;
  return scene.zitems = output.sort(vega_scenegraph_module_compare);
}

function visit(scene, visitor) {
  var items = scene.items,
      i,
      n;
  if (!items || !items.length) return;
  var zitems = zorder(scene);

  if (zitems && zitems.length) {
    for (i = 0, n = items.length; i < n; ++i) {
      if (!items[i].zindex) visitor(items[i]);
    }

    items = zitems;
  }

  for (i = 0, n = items.length; i < n; ++i) {
    visitor(items[i]);
  }
}

function pickVisit(scene, visitor) {
  var items = scene.items,
      hit,
      i;
  if (!items || !items.length) return null;
  var zitems = zorder(scene);
  if (zitems && zitems.length) items = zitems;

  for (i = items.length; --i >= 0;) {
    if (hit = visitor(items[i])) return hit;
  }

  if (items === zitems) {
    for (items = scene.items, i = items.length; --i >= 0;) {
      if (!items[i].zindex) {
        if (hit = visitor(items[i])) return hit;
      }
    }
  }

  return null;
}

function drawAll(path) {
  return function (context, scene, bounds) {
    visit(scene, function (item) {
      if (!bounds || bounds.intersects(item.bounds)) {
        drawPath(path, context, item, item);
      }
    });
  };
}

function drawOne(path) {
  return function (context, scene, bounds) {
    if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
      drawPath(path, context, scene.items[0], scene.items);
    }
  };
}

function drawPath(path, context, item, items) {
  var opacity = item.opacity == null ? 1 : item.opacity;
  if (opacity === 0) return;
  if (path(context, items)) return;
  blend(context, item);

  if (item.fill && fill(context, item, opacity)) {
    context.fill();
  }

  if (item.stroke && stroke(context, item, opacity)) {
    context.stroke();
  }
}

function pick$1(test) {
  test = test || truthy;
  return function (context, scene, x, y, gx, gy) {
    x *= context.pixelRatio;
    y *= context.pixelRatio;
    return pickVisit(scene, function (item) {
      var b = item.bounds; // first hit test against bounding box

      if (b && !b.contains(gx, gy) || !b) return; // if in bounding box, perform more careful test

      if (test(context, item, x, y, gx, gy)) return item;
    });
  };
}

function hitPath(path, filled) {
  return function (context, o, x, y) {
    var item = Array.isArray(o) ? o[0] : o,
        fill = filled == null ? item.fill : filled,
        stroke = item.stroke && context.isPointInStroke,
        lw,
        lc;

    if (stroke) {
      lw = item.strokeWidth;
      lc = item.strokeCap;
      context.lineWidth = lw != null ? lw : 1;
      context.lineCap = lc != null ? lc : 'butt';
    }

    return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
  };
}

function pickPath(path) {
  return pick$1(hitPath(path));
}

function translate(x, y) {
  return 'translate(' + x + ',' + y + ')';
}

function rotate(a) {
  return 'rotate(' + a + ')';
}

function scale(scaleX, scaleY) {
  return 'scale(' + scaleX + ',' + scaleY + ')';
}

function translateItem(item) {
  return translate(item.x || 0, item.y || 0);
}

function rotateItem(item) {
  return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '');
}

function transformItem(item) {
  return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '') + (item.scaleX || item.scaleY ? ' ' + scale(item.scaleX || 1, item.scaleY || 1) : '');
}

function markItemPath(type, shape, isect) {
  function attr(emit, item) {
    emit('transform', rotateItem(item));
    emit('d', shape(null, item));
  }

  function bound(bounds, item) {
    shape(boundContext(bounds, item.angle), item);
    return boundStroke(bounds, item).translate(item.x || 0, item.y || 0);
  }

  function draw(context, item) {
    var x = item.x || 0,
        y = item.y || 0,
        a = item.angle || 0;
    context.translate(x, y);
    if (a) context.rotate(a *= DegToRad);
    context.beginPath();
    shape(context, item);
    if (a) context.rotate(-a);
    context.translate(-x, -y);
  }

  return {
    type: type,
    tag: 'path',
    nested: false,
    attr: attr,
    bound: bound,
    draw: drawAll(draw),
    pick: pickPath(draw),
    isect: isect || intersectPath(draw)
  };
}

var vega_scenegraph_module_arc = markItemPath('arc', arc$1);

function pickArea(a, p) {
  var v = a[0].orient === 'horizontal' ? p[1] : p[0],
      z = a[0].orient === 'horizontal' ? 'y' : 'x',
      i = a.length,
      min = +Infinity,
      hit,
      d;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    d = Math.abs(a[i][z] - v);

    if (d < min) {
      min = d;
      hit = a[i];
    }
  }

  return hit;
}

function pickLine(a, p) {
  var t = Math.pow(a[0].strokeWidth || 1, 2),
      i = a.length,
      dx,
      dy,
      dd;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    dx = a[i].x - p[0];
    dy = a[i].y - p[1];
    dd = dx * dx + dy * dy;
    if (dd < t) return a[i];
  }

  return null;
}

function pickTrail(a, p) {
  var i = a.length,
      dx,
      dy,
      dd;

  while (--i >= 0) {
    if (a[i].defined === false) continue;
    dx = a[i].x - p[0];
    dy = a[i].y - p[1];
    dd = dx * dx + dy * dy;
    dx = a[i].size || 1;
    if (dd < dx * dx) return a[i];
  }

  return null;
}

function markMultiItemPath(type, shape, tip) {
  function attr(emit, item) {
    var items = item.mark.items;
    if (items.length) emit('d', shape(null, items));
  }

  function bound(bounds, mark) {
    var items = mark.items;

    if (items.length === 0) {
      return bounds;
    } else {
      shape(boundContext(bounds), items);
      return boundStroke(bounds, items[0]);
    }
  }

  function draw(context, items) {
    context.beginPath();
    shape(context, items);
  }

  var hit = hitPath(draw);

  function pick(context, scene, x, y, gx, gy) {
    var items = scene.items,
        b = scene.bounds;

    if (!items || !items.length || b && !b.contains(gx, gy)) {
      return null;
    }

    x *= context.pixelRatio;
    y *= context.pixelRatio;
    return hit(context, items, x, y) ? items[0] : null;
  }

  return {
    type: type,
    tag: 'path',
    nested: true,
    attr: attr,
    bound: bound,
    draw: drawOne(draw),
    pick: pick,
    isect: intersectPoint,
    tip: tip
  };
}

var vega_scenegraph_module_area = markMultiItemPath('area', area$1, pickArea);

function clip(context, scene) {
  var clip = scene.clip;
  context.save();

  if (isFunction(clip)) {
    context.beginPath();
    clip(context);
    context.clip();
  } else {
    clipGroup(context, scene.group);
  }
}

function clipGroup(context, group) {
  context.beginPath();
  hasCornerRadius(group) ? rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);
  context.clip();
}

function offset$1(item) {
  var sw = vega_scenegraph_module_value(item.strokeWidth, 1);
  return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
}

function attr$5(emit, item) {
  emit('transform', translateItem(item));
}

function emitRectangle(emit, item) {
  var off = offset$1(item);
  emit('d', rectangle(null, item, off, off));
}

function background(emit, item) {
  emit('class', 'background');
  emit('aria-hidden', true);
  emitRectangle(emit, item);
}

function foreground(emit, item) {
  emit('class', 'foreground');
  emit('aria-hidden', true);

  if (item.strokeForeground) {
    emitRectangle(emit, item);
  } else {
    emit('d', '');
  }
}

function content(emit, item, renderer) {
  var url = item.clip ? clip$1(renderer, item, item) : null;
  emit('clip-path', url);
}

function bound$5(bounds, group) {
  if (!group.clip && group.items) {
    var items = group.items,
        m = items.length;

    for (var j = 0; j < m; ++j) {
      bounds.union(items[j].bounds);
    }
  }

  if ((group.clip || group.width || group.height) && !group.noBound) {
    bounds.add(0, 0).add(group.width || 0, group.height || 0);
  }

  boundStroke(bounds, group);
  return bounds.translate(group.x || 0, group.y || 0);
}

function rectanglePath(context, group, x, y) {
  var off = offset$1(group);
  context.beginPath();
  rectangle(context, group, (x || 0) + off, (y || 0) + off);
}

var hitBackground = hitPath(rectanglePath);
var hitForeground = hitPath(rectanglePath, false);
var hitCorner = hitPath(rectanglePath, true);

function draw$4(context, scene, bounds) {
  var _this = this;

  visit(scene, function (group) {
    var gx = group.x || 0,
        gy = group.y || 0,
        fore = group.strokeForeground,
        opacity = group.opacity == null ? 1 : group.opacity; // draw group background

    if ((group.stroke || group.fill) && opacity) {
      rectanglePath(context, group, gx, gy);
      blend(context, group);

      if (group.fill && fill(context, group, opacity)) {
        context.fill();
      }

      if (group.stroke && !fore && stroke(context, group, opacity)) {
        context.stroke();
      }
    } // setup graphics context, set clip and bounds


    context.save();
    context.translate(gx, gy);
    if (group.clip) clipGroup(context, group);
    if (bounds) bounds.translate(-gx, -gy); // draw group contents

    visit(group, function (item) {
      _this.draw(context, item, bounds);
    }); // restore graphics context

    if (bounds) bounds.translate(gx, gy);
    context.restore(); // draw group foreground

    if (fore && group.stroke && opacity) {
      rectanglePath(context, group, gx, gy);
      blend(context, group);

      if (stroke(context, group, opacity)) {
        context.stroke();
      }
    }
  });
}

function pick(context, scene, x, y, gx, gy) {
  var _this2 = this;

  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
    return null;
  }

  var cx = x * context.pixelRatio,
      cy = y * context.pixelRatio;
  return pickVisit(scene, function (group) {
    var hit, dx, dy; // first hit test bounding box

    var b = group.bounds;
    if (b && !b.contains(gx, gy)) return; // passed bounds check, test rectangular clip

    dx = group.x || 0;
    dy = group.y || 0;
    var dw = dx + (group.width || 0),
        dh = dy + (group.height || 0),
        c = group.clip;
    if (c && (gx < dx || gx > dw || gy < dy || gy > dh)) return; // adjust coordinate system

    context.save();
    context.translate(dx, dy);
    dx = gx - dx;
    dy = gy - dy; // test background for rounded corner clip

    if (c && hasCornerRadius(group) && !hitCorner(context, group, cx, cy)) {
      context.restore();
      return null;
    }

    var fore = group.strokeForeground,
        ix = scene.interactive !== false; // hit test against group foreground

    if (ix && fore && group.stroke && hitForeground(context, group, cx, cy)) {
      context.restore();
      return group;
    } // hit test against contained marks


    hit = pickVisit(group, function (mark) {
      return pickMark(mark, dx, dy) ? _this2.pick(mark, x, y, dx, dy) : null;
    }); // hit test against group background

    if (!hit && ix && (group.fill || !fore && group.stroke) && hitBackground(context, group, cx, cy)) {
      hit = group;
    } // restore state and return


    context.restore();
    return hit || null;
  });
}

function pickMark(mark, x, y) {
  return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);
}

var group = {
  type: 'group',
  tag: 'g',
  nested: false,
  attr: attr$5,
  bound: bound$5,
  draw: draw$4,
  pick: pick,
  isect: intersectRect,
  content: content,
  background: background,
  foreground: foreground
};
var metadata = {
  'xmlns': 'http://www.w3.org/2000/svg',
  'xmlns:xlink': 'http://www.w3.org/1999/xlink',
  'version': '1.1'
};

function getImage(item, renderer) {
  var image = item.image;

  if (!image || item.url && item.url !== image.url) {
    image = {
      complete: false,
      width: 0,
      height: 0
    };
    renderer.loadImage(item.url).then(function (image) {
      item.image = image;
      item.image.url = item.url;
    });
  }

  return image;
}

function imageWidth(item, image) {
  return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;
}

function imageHeight(item, image) {
  return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;
}

function imageXOffset(align, w) {
  return align === 'center' ? w / 2 : align === 'right' ? w : 0;
}

function imageYOffset(baseline, h) {
  return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
}

function attr$4(emit, item, renderer) {
  var img = getImage(item, renderer),
      w = imageWidth(item, img),
      h = imageHeight(item, img),
      x = (item.x || 0) - imageXOffset(item.align, w),
      y = (item.y || 0) - imageYOffset(item.baseline, h),
      i = !img.src && img.toDataURL ? img.toDataURL() : img.src || '';
  emit('href', i, metadata['xmlns:xlink'], 'xlink:href');
  emit('transform', translate(x, y));
  emit('width', w);
  emit('height', h);
  emit('preserveAspectRatio', item.aspect === false ? 'none' : 'xMidYMid');
}

function bound$4(bounds, item) {
  var img = item.image,
      w = imageWidth(item, img),
      h = imageHeight(item, img),
      x = (item.x || 0) - imageXOffset(item.align, w),
      y = (item.y || 0) - imageYOffset(item.baseline, h);
  return bounds.set(x, y, x + w, y + h);
}

function draw$3(context, scene, bounds) {
  var _this3 = this;

  visit(scene, function (item) {
    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

    var img = getImage(item, _this3);
    var w = imageWidth(item, img);
    var h = imageHeight(item, img);
    if (w === 0 || h === 0) return; // early exit

    var x = (item.x || 0) - imageXOffset(item.align, w),
        y = (item.y || 0) - imageYOffset(item.baseline, h),
        opacity,
        ar0,
        ar1,
        t;

    if (item.aspect !== false) {
      ar0 = img.width / img.height;
      ar1 = item.width / item.height;

      if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
        if (ar1 < ar0) {
          t = w / ar0;
          y += (h - t) / 2;
          h = t;
        } else {
          t = h * ar0;
          x += (w - t) / 2;
          w = t;
        }
      }
    }

    if (img.complete || img.toDataURL) {
      blend(context, item);
      context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
      context.imageSmoothingEnabled = item.smooth !== false;
      context.drawImage(img, x, y, w, h);
    }
  });
}

var vega_scenegraph_module_image = {
  type: 'image',
  tag: 'image',
  nested: false,
  attr: attr$4,
  bound: bound$4,
  draw: draw$3,
  pick: pick$1(),
  isect: truthy,
  // bounds check is sufficient
  get: getImage,
  xOffset: imageXOffset,
  yOffset: imageYOffset
};
var vega_scenegraph_module_line = markMultiItemPath('line', line$1, pickLine);

function attr$3(emit, item) {
  var sx = item.scaleX || 1,
      sy = item.scaleY || 1;

  if (sx !== 1 || sy !== 1) {
    emit('vector-effect', 'non-scaling-stroke');
  }

  emit('transform', transformItem(item));
  emit('d', item.path);
}

function path$1(context, item) {
  var path = item.path;
  if (path == null) return true;
  var x = item.x || 0,
      y = item.y || 0,
      sx = item.scaleX || 1,
      sy = item.scaleY || 1,
      a = (item.angle || 0) * DegToRad,
      cache = item.pathCache;

  if (!cache || cache.path !== path) {
    (item.pathCache = cache = pathParse(path)).path = path;
  }

  if (a && context.rotate && context.translate) {
    context.translate(x, y);
    context.rotate(a);
    pathRender(context, cache, 0, 0, sx, sy);
    context.rotate(-a);
    context.translate(-x, -y);
  } else {
    pathRender(context, cache, x, y, sx, sy);
  }
}

function bound$3(bounds, item) {
  return path$1(boundContext(bounds, item.angle), item) ? bounds.set(0, 0, 0, 0) : boundStroke(bounds, item, true);
}

var path$2 = {
  type: 'path',
  tag: 'path',
  nested: false,
  attr: attr$3,
  bound: bound$3,
  draw: drawAll(path$1),
  pick: pickPath(path$1),
  isect: intersectPath(path$1)
};

function attr$2(emit, item) {
  emit('d', rectangle(null, item));
}

function bound$2(bounds, item) {
  var x, y;
  return boundStroke(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
}

function draw$2(context, item) {
  context.beginPath();
  rectangle(context, item);
}

var rect = {
  type: 'rect',
  tag: 'path',
  nested: false,
  attr: attr$2,
  bound: bound$2,
  draw: drawAll(draw$2),
  pick: pickPath(draw$2),
  isect: intersectRect
};

function attr$1(emit, item) {
  emit('transform', translateItem(item));
  emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
  emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
}

function bound$1(bounds, item) {
  var x1, y1;
  return boundStroke(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
}

function vega_scenegraph_module_path(context, item, opacity) {
  var x1, y1, x2, y2;

  if (item.stroke && stroke(context, item, opacity)) {
    x1 = item.x || 0;
    y1 = item.y || 0;
    x2 = item.x2 != null ? item.x2 : x1;
    y2 = item.y2 != null ? item.y2 : y1;
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    return true;
  }

  return false;
}

function draw$1(context, scene, bounds) {
  visit(scene, function (item) {
    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

    var opacity = item.opacity == null ? 1 : item.opacity;

    if (opacity && vega_scenegraph_module_path(context, item, opacity)) {
      blend(context, item);
      context.stroke();
    }
  });
}

function hit$1(context, item, x, y) {
  if (!context.isPointInStroke) return false;
  return vega_scenegraph_module_path(context, item, 1) && context.isPointInStroke(x, y);
}

var rule = {
  type: 'rule',
  tag: 'line',
  nested: false,
  attr: attr$1,
  bound: bound$1,
  draw: draw$1,
  pick: pick$1(hit$1),
  isect: intersectRule
};
var shape = markItemPath('shape', shape$1);
var vega_scenegraph_module_symbol = markItemPath('symbol', symbol$1, intersectPoint);
var widthCache = lruCache();
var textMetrics = {
  height: fontSize,
  measureWidth: measureWidth,
  estimateWidth: estimateWidth,
  width: estimateWidth,
  canvas: useCanvas
};
useCanvas(true);

function useCanvas(use) {
  textMetrics.width = use && context ? measureWidth : estimateWidth;
} // make simple estimate if no canvas is available


function estimateWidth(item, text) {
  return _estimateWidth(textValue(item, text), fontSize(item));
}

function _estimateWidth(text, currentFontHeight) {
  return ~~(0.8 * text.length * currentFontHeight);
} // measure text width if canvas is available


function measureWidth(item, text) {
  return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0 : _measureWidth(text, font(item));
}

function _measureWidth(text, currentFont) {
  var key = "(".concat(currentFont, ") ").concat(text);
  var width = widthCache.get(key);

  if (width === undefined) {
    context.font = currentFont;
    width = context.measureText(text).width;
    widthCache.set(key, width);
  }

  return width;
}

function fontSize(item) {
  return item.fontSize != null ? +item.fontSize || 0 : 11;
}

function lineHeight(item) {
  return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
}

function lineArray(_) {
  return isArray(_) ? _.length > 1 ? _ : _[0] : _;
}

function textLines(item) {
  return lineArray(item.lineBreak && item.text && !isArray(item.text) ? item.text.split(item.lineBreak) : item.text);
}

function multiLineOffset(item) {
  var tl = textLines(item);
  return (isArray(tl) ? tl.length - 1 : 0) * lineHeight(item);
}

function textValue(item, line) {
  var text = line == null ? '' : (line + '').trim();
  return item.limit > 0 && text.length ? vega_scenegraph_module_truncate(item, text) : text;
}

function widthGetter(item) {
  if (textMetrics.width === measureWidth) {
    // we are using canvas
    var currentFont = font(item);
    return function (text) {
      return _measureWidth(text, currentFont);
    };
  } else {
    // we are relying on estimates
    var currentFontHeight = fontSize(item);
    return function (text) {
      return _estimateWidth(text, currentFontHeight);
    };
  }
}

function vega_scenegraph_module_truncate(item, text) {
  var limit = +item.limit,
      width = widthGetter(item);
  if (width(text) < limit) return text;
  var ellipsis = item.ellipsis || "\u2026",
      rtl = item.dir === 'rtl',
      lo = 0,
      hi = text.length,
      mid;
  limit -= width(ellipsis);

  if (rtl) {
    while (lo < hi) {
      mid = lo + hi >>> 1;
      if (width(text.slice(mid)) > limit) lo = mid + 1;else hi = mid;
    }

    return ellipsis + text.slice(lo);
  } else {
    while (lo < hi) {
      mid = 1 + (lo + hi >>> 1);
      if (width(text.slice(0, mid)) < limit) lo = mid;else hi = mid - 1;
    }

    return text.slice(0, lo) + ellipsis;
  }
}

function fontFamily(item, quote) {
  var font = item.font;
  return (quote && font ? String(font).replace(/"/g, '\'') : font) || 'sans-serif';
}

function font(item, quote) {
  return '' + (item.fontStyle ? item.fontStyle + ' ' : '') + (item.fontVariant ? item.fontVariant + ' ' : '') + (item.fontWeight ? item.fontWeight + ' ' : '') + fontSize(item) + 'px ' + fontFamily(item, quote);
}

function vega_scenegraph_module_offset(item) {
  // perform our own font baseline calculation
  // why? not all browsers support SVG 1.1 'alignment-baseline' :(
  // this also ensures consistent layout across renderers
  var baseline = item.baseline,
      h = fontSize(item);
  return Math.round(baseline === 'top' ? 0.79 * h : baseline === 'middle' ? 0.30 * h : baseline === 'bottom' ? -0.21 * h : baseline === 'line-top' ? 0.29 * h + 0.5 * lineHeight(item) : baseline === 'line-bottom' ? 0.29 * h - 0.5 * lineHeight(item) : 0);
}

var textAlign = {
  'left': 'start',
  'center': 'middle',
  'right': 'end'
};
var tempBounds = new Bounds();

function anchorPoint(item) {
  var x = item.x || 0,
      y = item.y || 0,
      r = item.radius || 0,
      t;

  if (r) {
    t = (item.theta || 0) - HalfPi;
    x += r * Math.cos(t);
    y += r * Math.sin(t);
  }

  tempBounds.x1 = x;
  tempBounds.y1 = y;
  return tempBounds;
}

function attr(emit, item) {
  var dx = item.dx || 0,
      dy = (item.dy || 0) + vega_scenegraph_module_offset(item),
      p = anchorPoint(item),
      x = p.x1,
      y = p.y1,
      a = item.angle || 0,
      t;
  emit('text-anchor', textAlign[item.align] || 'start');

  if (a) {
    t = translate(x, y) + ' ' + rotate(a);
    if (dx || dy) t += ' ' + translate(dx, dy);
  } else {
    t = translate(x + dx, y + dy);
  }

  emit('transform', t);
}

function bound(bounds, item, mode) {
  var h = textMetrics.height(item),
      a = item.align,
      p = anchorPoint(item),
      x = p.x1,
      y = p.y1,
      dx = item.dx || 0,
      dy = (item.dy || 0) + vega_scenegraph_module_offset(item) - Math.round(0.8 * h),
      // use 4/5 offset
  tl = textLines(item),
      w; // get dimensions

  if (isArray(tl)) {
    // multi-line text
    h += lineHeight(item) * (tl.length - 1);
    w = tl.reduce(function (w, t) {
      return Math.max(w, textMetrics.width(item, t));
    }, 0);
  } else {
    // single-line text
    w = textMetrics.width(item, tl);
  } // horizontal alignment


  if (a === 'center') {
    dx -= w / 2;
  } else if (a === 'right') {
    dx -= w;
  } else ;

  bounds.set(dx += x, dy += y, dx + w, dy + h);

  if (item.angle && !mode) {
    bounds.rotate(item.angle * DegToRad, x, y);
  } else if (mode === 2) {
    return bounds.rotatedPoints(item.angle * DegToRad, x, y);
  }

  return bounds;
}

function draw(context, scene, bounds) {
  visit(scene, function (item) {
    var opacity = item.opacity == null ? 1 : item.opacity,
        p,
        x,
        y,
        i,
        lh,
        tl,
        str;
    if (bounds && !bounds.intersects(item.bounds) || // bounds check
    opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
    context.font = font(item);
    context.textAlign = item.align || 'left';
    p = anchorPoint(item);
    x = p.x1, y = p.y1;

    if (item.angle) {
      context.save();
      context.translate(x, y);
      context.rotate(item.angle * DegToRad);
      x = y = 0; // reset x, y
    }

    x += item.dx || 0;
    y += (item.dy || 0) + vega_scenegraph_module_offset(item);
    tl = textLines(item);
    blend(context, item);

    if (isArray(tl)) {
      lh = lineHeight(item);

      for (i = 0; i < tl.length; ++i) {
        str = textValue(item, tl[i]);

        if (item.fill && fill(context, item, opacity)) {
          context.fillText(str, x, y);
        }

        if (item.stroke && stroke(context, item, opacity)) {
          context.strokeText(str, x, y);
        }

        y += lh;
      }
    } else {
      str = textValue(item, tl);

      if (item.fill && fill(context, item, opacity)) {
        context.fillText(str, x, y);
      }

      if (item.stroke && stroke(context, item, opacity)) {
        context.strokeText(str, x, y);
      }
    }

    if (item.angle) context.restore();
  });
}

function hit(context, item, x, y, gx, gy) {
  if (item.fontSize <= 0) return false;
  if (!item.angle) return true; // bounds sufficient if no rotation
  // project point into space of unrotated bounds

  var p = anchorPoint(item),
      ax = p.x1,
      ay = p.y1,
      b = bound(tempBounds, item, 1),
      a = -item.angle * DegToRad,
      cos = Math.cos(a),
      sin = Math.sin(a),
      px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),
      py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
  return b.contains(px, py);
}

function intersectText(item, box) {
  var p = bound(tempBounds, item, 2);
  return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
}

var vega_scenegraph_module_text = {
  type: 'text',
  tag: 'text',
  nested: false,
  attr: attr,
  bound: bound,
  draw: draw,
  pick: pick$1(hit),
  isect: intersectText
};
var trail = markMultiItemPath('trail', trail$1, pickTrail);
var Marks = {
  arc: vega_scenegraph_module_arc,
  area: vega_scenegraph_module_area,
  group: group,
  image: vega_scenegraph_module_image,
  line: vega_scenegraph_module_line,
  path: path$2,
  rect: rect,
  rule: rule,
  shape: shape,
  symbol: vega_scenegraph_module_symbol,
  text: vega_scenegraph_module_text,
  trail: trail
};

function boundItem(item, func, opt) {
  var type = Marks[item.mark.marktype],
      bound = func || type.bound;
  if (type.nested) item = item.mark;
  return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
}

var DUMMY = {
  mark: null
};

function boundMark(mark, bounds, opt) {
  var type = Marks[mark.marktype],
      bound = type.bound,
      items = mark.items,
      hasItems = items && items.length,
      i,
      n,
      item,
      b;

  if (type.nested) {
    if (hasItems) {
      item = items[0];
    } else {
      // no items, fake it
      DUMMY.mark = mark;
      item = DUMMY;
    }

    b = boundItem(item, bound, opt);
    bounds = bounds && bounds.union(b) || b;
    return bounds;
  }

  bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();

  if (hasItems) {
    for (i = 0, n = items.length; i < n; ++i) {
      bounds.union(boundItem(items[i], bound, opt));
    }
  }

  return mark.bounds = bounds;
}

var keys = ['marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex', 'x', 'y', 'width', 'height', 'align', 'baseline', // layout
'fill', 'fillOpacity', 'opacity', 'blend', // fill
'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap', // stroke
'strokeDash', 'strokeDashOffset', // stroke dash
'strokeForeground', 'strokeOffset', // group
'startAngle', 'endAngle', 'innerRadius', 'outerRadius', // arc
'cornerRadius', 'padAngle', // arc, rect
'cornerRadiusTopLeft', 'cornerRadiusTopRight', // rect, group
'cornerRadiusBottomLeft', 'cornerRadiusBottomRight', 'interpolate', 'tension', 'orient', 'defined', // area, line
'url', 'aspect', 'smooth', // image
'path', 'scaleX', 'scaleY', // path
'x2', 'y2', // rule
'size', 'shape', // symbol
'text', 'angle', 'theta', 'radius', 'dir', 'dx', 'dy', // text
'ellipsis', 'limit', 'lineBreak', 'lineHeight', 'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant', // font
'description', 'aria', 'ariaRole', 'ariaRoleDescription' // aria
];

function sceneToJSON(scene, indent) {
  return JSON.stringify(scene, keys, indent);
}

function sceneFromJSON(json) {
  var scene = typeof json === 'string' ? JSON.parse(json) : json;
  return initialize(scene);
}

function initialize(scene) {
  var type = scene.marktype,
      items = scene.items,
      parent,
      i,
      n;

  if (items) {
    for (i = 0, n = items.length; i < n; ++i) {
      parent = type ? 'mark' : 'group';
      items[i][parent] = scene;
      if (items[i].zindex) items[i][parent].zdirty = true;
      if ('group' === (type || parent)) initialize(items[i]);
    }
  }

  if (type) boundMark(scene);
  return scene;
}

function Scenegraph(scene) {
  if (arguments.length) {
    this.root = sceneFromJSON(scene);
  } else {
    this.root = createMark({
      marktype: 'group',
      name: 'root',
      role: 'frame'
    });
    this.root.items = [new GroupItem(this.root)];
  }
}

Scenegraph.prototype = {
  toJSON: function toJSON(indent) {
    return sceneToJSON(this.root, indent || 0);
  },
  mark: function mark(markdef, group, index) {
    group = group || this.root.items[0];
    var mark = createMark(markdef, group);
    group.items[index] = mark;
    if (mark.zindex) mark.group.zdirty = true;
    return mark;
  }
};

function createMark(def, group) {
  var mark = {
    bounds: new Bounds(),
    clip: !!def.clip,
    group: group,
    interactive: def.interactive === false ? false : true,
    items: [],
    marktype: def.marktype,
    name: def.name || undefined,
    role: def.role || undefined,
    zindex: def.zindex || 0
  }; // add accessibility properties if defined

  if (def.aria != null) {
    mark.aria = def.aria;
  }

  if (def.description) {
    mark.description = def.description;
  }

  return mark;
} // create a new DOM element


function domCreate(doc, tag, ns) {
  if (!doc && typeof document !== 'undefined' && document.createElement) {
    doc = document;
  }

  return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
} // find first child element with matching tag


function domFind(el, tag) {
  tag = tag.toLowerCase();
  var nodes = el.childNodes,
      i = 0,
      n = nodes.length;

  for (; i < n; ++i) {
    if (nodes[i].tagName.toLowerCase() === tag) {
      return nodes[i];
    }
  }
} // retrieve child element at given index
// create & insert if doesn't exist or if tags do not match


function domChild(el, index, tag, ns) {
  var a = el.childNodes[index],
      b;

  if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
    b = a || null;
    a = domCreate(el.ownerDocument, tag, ns);
    el.insertBefore(a, b);
  }

  return a;
} // remove all child elements at or above the given index


function domClear(el, index) {
  var nodes = el.childNodes,
      curr = nodes.length;

  while (curr > index) {
    el.removeChild(nodes[--curr]);
  }

  return el;
} // generate css class name for mark


function cssClass(mark) {
  return 'mark-' + mark.marktype + (mark.role ? ' role-' + mark.role : '') + (mark.name ? ' ' + mark.name : '');
}

function vega_scenegraph_module_point(event, el) {
  var rect = el.getBoundingClientRect();
  return [event.clientX - rect.left - (el.clientLeft || 0), event.clientY - rect.top - (el.clientTop || 0)];
}

function resolveItem(item, event, el, origin) {
  var mark = item && item.mark,
      mdef,
      p;

  if (mark && (mdef = Marks[mark.marktype]).tip) {
    p = vega_scenegraph_module_point(event, el);
    p[0] -= origin[0];
    p[1] -= origin[1];

    while (item = item.mark.group) {
      p[0] -= item.x || 0;
      p[1] -= item.y || 0;
    }

    item = mdef.tip(mark.items, p);
  }

  return item;
}
/**
 * Create a new Handler instance.
 * @param {object} [customLoader] - Optional loader instance for
 *   href URL sanitization. If not specified, a standard loader
 *   instance will be generated.
 * @param {function} [customTooltip] - Optional tooltip handler
 *   function for custom tooltip display.
 * @constructor
 */


function Handler(customLoader, customTooltip) {
  this._active = null;
  this._handlers = {};
  this._loader = customLoader || index_browser_loader();
  this._tooltip = customTooltip || defaultTooltip;
} // The default tooltip display handler.
// Sets the HTML title attribute on the visualization container.


function defaultTooltip(handler, event, item, value) {
  handler.element().setAttribute('title', value || '');
}

Handler.prototype = {
  /**
   * Initialize a new Handler instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {object} [obj] - Optional context object that should serve as
   *   the "this" context for event callbacks.
   * @return {Handler} - This handler instance.
   */
  initialize: function initialize(el, origin, obj) {
    this._el = el;
    this._obj = obj || null;
    return this.origin(origin);
  },

  /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */
  element: function element() {
    return this._el;
  },

  /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */
  canvas: function canvas() {
    return this._el && this._el.firstChild;
  },

  /**
   * Get / set the origin coordinates of the visualization.
   */
  origin: function origin(_origin) {
    if (arguments.length) {
      this._origin = _origin || [0, 0];
      return this;
    } else {
      return this._origin.slice();
    }
  },

  /**
   * Get / set the scenegraph root.
   */
  scene: function scene(_scene) {
    if (!arguments.length) return this._scene;
    this._scene = _scene;
    return this;
  },

  /**
   * Add an event handler. Subclasses should override this method.
   */
  on: function on()
  /*type, handler*/
  {},

  /**
   * Remove an event handler. Subclasses should override this method.
   */
  off: function off()
  /*type, handler*/
  {},

  /**
   * Utility method for finding the array index of an event handler.
   * @param {Array} h - An array of registered event handlers.
   * @param {string} type - The event type.
   * @param {function} handler - The event handler instance to find.
   * @return {number} - The handler's array index or -1 if not registered.
   */
  _handlerIndex: function _handlerIndex(h, type, handler) {
    for (var i = h ? h.length : 0; --i >= 0;) {
      if (h[i].type === type && (!handler || h[i].handler === handler)) {
        return i;
      }
    }

    return -1;
  },

  /**
   * Returns an array with registered event handlers.
   * @param {string} [type] - The event type to query. Any annotations
   *   are ignored; for example, for the argument "click.foo", ".foo" will
   *   be ignored and the method returns all "click" handlers. If type is
   *   null or unspecified, this method returns handlers for all types.
   * @return {Array} - A new array containing all registered event handlers.
   */
  handlers: function handlers(type) {
    var h = this._handlers,
        a = [];

    if (type) {
      a.push.apply(a, (0,toConsumableArray/* default */.Z)(h[this.eventName(type)]));
    } else {
      for (var k in h) {
        a.push.apply(a, (0,toConsumableArray/* default */.Z)(h[k]));
      }
    }

    return a;
  },

  /**
   * Parses an event name string to return the specific event type.
   * For example, given "click.foo" returns "click"
   * @param {string} name - The input event type string.
   * @return {string} - A string with the event type only.
   */
  eventName: function eventName(name) {
    var i = name.indexOf('.');
    return i < 0 ? name : name.slice(0, i);
  },

  /**
   * Handle hyperlink navigation in response to an item.href value.
   * @param {Event} event - The event triggering hyperlink navigation.
   * @param {Item} item - The scenegraph item.
   * @param {string} href - The URL to navigate to.
   */
  handleHref: function handleHref(event, item, href) {
    this._loader.sanitize(href, {
      context: 'href'
    }).then(function (opt) {
      var e = new MouseEvent(event.type, event),
          a = domCreate(null, 'a');

      for (var name in opt) {
        a.setAttribute(name, opt[name]);
      }

      a.dispatchEvent(e);
    }).catch(function () {
      /* do nothing */
    });
  },

  /**
   * Handle tooltip display in response to an item.tooltip value.
   * @param {Event} event - The event triggering tooltip display.
   * @param {Item} item - The scenegraph item.
   * @param {boolean} show - A boolean flag indicating whether
   *   to show or hide a tooltip for the given item.
   */
  handleTooltip: function handleTooltip(event, item, show) {
    if (item && item.tooltip != null) {
      item = resolveItem(item, event, this.canvas(), this._origin);

      var _value = show && item && item.tooltip || null;

      this._tooltip.call(this._obj, this, event, item, _value);
    }
  },

  /**
   * Returns the size of a scenegraph item and its position relative
   * to the viewport.
   * @param {Item} item - The scenegraph item.
   * @return {object} - A bounding box object (compatible with the
   *   DOMRect type) consisting of x, y, width, heigh, top, left,
   *   right, and bottom properties.
   */
  getItemBoundingClientRect: function getItemBoundingClientRect(item) {
    var el = this.canvas();
    if (!el) return;
    var rect = el.getBoundingClientRect(),
        origin = this._origin,
        bounds = item.bounds,
        width = bounds.width(),
        height = bounds.height();
    var x = bounds.x1 + origin[0] + rect.left,
        y = bounds.y1 + origin[1] + rect.top; // translate coordinate for each parent group

    while (item.mark && (item = item.mark.group)) {
      x += item.x || 0;
      y += item.y || 0;
    } // return DOMRect-compatible bounding box


    return {
      x: x,
      y: y,
      width: width,
      height: height,
      left: x,
      top: y,
      right: x + width,
      bottom: y + height
    };
  }
};
/**
 * Create a new Renderer instance.
 * @param {object} [loader] - Optional loader instance for
 *   image and href URL sanitization. If not specified, a
 *   standard loader instance will be generated.
 * @constructor
 */

function Renderer(loader) {
  this._el = null;
  this._bgcolor = null;
  this._loader = new ResourceLoader(loader);
}

Renderer.prototype = {
  /**
   * Initialize a new Renderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance.
   */
  initialize: function initialize(el, width, height, origin, scaleFactor) {
    this._el = el;
    return this.resize(width, height, origin, scaleFactor);
  },

  /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */
  element: function element() {
    return this._el;
  },

  /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */
  canvas: function canvas() {
    return this._el && this._el.firstChild;
  },

  /**
   * Get / set the background color.
   */
  background: function background(bgcolor) {
    if (arguments.length === 0) return this._bgcolor;
    this._bgcolor = bgcolor;
    return this;
  },

  /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance;
   */
  resize: function resize(width, height, origin, scaleFactor) {
    this._width = width;
    this._height = height;
    this._origin = origin || [0, 0];
    this._scale = scaleFactor || 1;
    return this;
  },

  /**
   * Report a dirty item whose bounds should be redrawn.
   * This base class method does nothing. Subclasses that perform
   * incremental should implement this method.
   * @param {Item} item - The dirty item whose bounds should be redrawn.
   */
  dirty: function dirty()
  /*item*/
  {},

  /**
   * Render an input scenegraph, potentially with a set of dirty items.
   * This method will perform an immediate rendering with available resources.
   * The renderer may also need to perform image loading to perform a complete
   * render. This process can lead to asynchronous re-rendering of the scene
   * after this method returns. To receive notification when rendering is
   * complete, use the renderAsync method instead.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Renderer} - This renderer instance.
   */
  render: function render(scene) {
    var r = this; // bind arguments into a render call, and cache it
    // this function may be subsequently called for async redraw

    r._call = function () {
      r._render(scene);
    }; // invoke the renderer


    r._call(); // clear the cached call for garbage collection
    // async redraws will stash their own copy


    r._call = null;
    return r;
  },

  /**
   * Internal rendering method. Renderer subclasses should override this
   * method to actually perform rendering.
   * @param {object} scene - The root mark of a scenegraph to render.
   */
  _render: function _render()
  /*scene*/
  {// subclasses to override
  },

  /**
   * Asynchronous rendering method. Similar to render, but returns a Promise
   * that resolves when all rendering is completed. Sometimes a renderer must
   * perform image loading to get a complete rendering. The returned
   * Promise will not resolve until this process completes.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Promise} - A Promise that resolves when rendering is complete.
   */
  renderAsync: function renderAsync(scene) {
    var r = this.render(scene);
    return this._ready ? this._ready.then(function () {
      return r;
    }) : Promise.resolve(r);
  },

  /**
   * Internal method for asynchronous resource loading.
   * Proxies method calls to the ImageLoader, and tracks loading
   * progress to invoke a re-render once complete.
   * @param {string} method - The method name to invoke on the ImageLoader.
   * @param {string} uri - The URI for the requested resource.
   * @return {Promise} - A Promise that resolves to the requested resource.
   */
  _load: function _load(method, uri) {
    var r = this,
        p = r._loader[method](uri);

    if (!r._ready) {
      // re-render the scene when loading completes
      var call = r._call;
      r._ready = r._loader.ready().then(function (redraw) {
        if (redraw) call();
        r._ready = null;
      });
    }

    return p;
  },

  /**
   * Sanitize a URL to include as a hyperlink in the rendered scene.
   * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string to sanitize.
   * @return {Promise} - A Promise that resolves to the sanitized URL.
   */
  sanitizeURL: function sanitizeURL(uri) {
    return this._load('sanitizeURL', uri);
  },

  /**
   * Requests an image to include in the rendered scene.
   * This method proxies a call to ImageLoader.loadImage, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string of the image.
   * @return {Promise} - A Promise that resolves to the loaded Image.
   */
  loadImage: function loadImage(uri) {
    return this._load('loadImage', uri);
  }
};
var KeyDownEvent = 'keydown';
var KeyPressEvent = 'keypress';
var KeyUpEvent = 'keyup';
var DragEnterEvent = 'dragenter';
var DragLeaveEvent = 'dragleave';
var DragOverEvent = 'dragover';
var MouseDownEvent = 'mousedown';
var MouseUpEvent = 'mouseup';
var MouseMoveEvent = 'mousemove';
var MouseOutEvent = 'mouseout';
var MouseOverEvent = 'mouseover';
var ClickEvent = 'click';
var DoubleClickEvent = 'dblclick';
var WheelEvent = 'wheel';
var MouseWheelEvent = 'mousewheel';
var TouchStartEvent = 'touchstart';
var TouchMoveEvent = 'touchmove';
var TouchEndEvent = 'touchend';
var Events = [KeyDownEvent, KeyPressEvent, KeyUpEvent, DragEnterEvent, DragLeaveEvent, DragOverEvent, MouseDownEvent, MouseUpEvent, MouseMoveEvent, MouseOutEvent, MouseOverEvent, ClickEvent, DoubleClickEvent, WheelEvent, MouseWheelEvent, TouchStartEvent, TouchMoveEvent, TouchEndEvent];
var TooltipShowEvent = MouseMoveEvent;
var TooltipHideEvent = MouseOutEvent;
var HrefEvent = ClickEvent;

function CanvasHandler(loader, tooltip) {
  Handler.call(this, loader, tooltip);
  this._down = null;
  this._touch = null;
  this._first = true;
  this._events = {};
}

var eventBundle = function eventBundle(type) {
  return type === TouchStartEvent || type === TouchMoveEvent || type === TouchEndEvent ? [TouchStartEvent, TouchMoveEvent, TouchEndEvent] : [type];
}; // lazily add listeners to the canvas as needed


function eventListenerCheck(handler, type) {
  eventBundle(type).forEach(function (_) {
    return addEventListener(handler, _);
  });
}

function addEventListener(handler, type) {
  var canvas = handler.canvas();

  if (canvas && !handler._events[type]) {
    handler._events[type] = 1;
    canvas.addEventListener(type, handler[type] ? function (evt) {
      return handler[type](evt);
    } : function (evt) {
      return handler.fire(type, evt);
    });
  }
}

function move(moveEvent, overEvent, outEvent) {
  return function (evt) {
    var a = this._active,
        p = this.pickEvent(evt);

    if (p === a) {
      // active item and picked item are the same
      this.fire(moveEvent, evt); // fire move
    } else {
      // active item and picked item are different
      if (!a || !a.exit) {
        // fire out for prior active item
        // suppress if active item was removed from scene
        this.fire(outEvent, evt);
      }

      this._active = p; // set new active item

      this.fire(overEvent, evt); // fire over for new active item

      this.fire(moveEvent, evt); // fire move for new active item
    }
  };
}

function inactive(type) {
  return function (evt) {
    this.fire(type, evt);
    this._active = null;
  };
}

vega_util_module_inherits(CanvasHandler, Handler, {
  initialize: function initialize(el, origin, obj) {
    var _this4 = this;

    this._canvas = el && domFind(el, 'canvas'); // add minimal events required for proper state management

    [ClickEvent, MouseDownEvent, MouseMoveEvent, MouseOutEvent, DragLeaveEvent].forEach(function (type) {
      return eventListenerCheck(_this4, type);
    });
    return Handler.prototype.initialize.call(this, el, origin, obj);
  },
  // return the backing canvas instance
  canvas: function canvas() {
    return this._canvas;
  },
  // retrieve the current canvas context
  context: function context() {
    return this._canvas.getContext('2d');
  },
  // supported events
  events: Events,
  // to keep old versions of firefox happy
  DOMMouseScroll: function DOMMouseScroll(evt) {
    this.fire(MouseWheelEvent, evt);
  },
  mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),
  dragover: move(DragOverEvent, DragEnterEvent, DragLeaveEvent),
  mouseout: inactive(MouseOutEvent),
  dragleave: inactive(DragLeaveEvent),
  mousedown: function mousedown(evt) {
    this._down = this._active;
    this.fire(MouseDownEvent, evt);
  },
  click: function click(evt) {
    if (this._down === this._active) {
      this.fire(ClickEvent, evt);
      this._down = null;
    }
  },
  touchstart: function touchstart(evt) {
    this._touch = this.pickEvent(evt.changedTouches[0]);

    if (this._first) {
      this._active = this._touch;
      this._first = false;
    }

    this.fire(TouchStartEvent, evt, true);
  },
  touchmove: function touchmove(evt) {
    this.fire(TouchMoveEvent, evt, true);
  },
  touchend: function touchend(evt) {
    this.fire(TouchEndEvent, evt, true);
    this._touch = null;
  },
  // fire an event
  fire: function fire(type, evt, touch) {
    var a = touch ? this._touch : this._active,
        h = this._handlers[type]; // set event type relative to scenegraph items

    evt.vegaType = type; // handle hyperlinks and tooltips first

    if (type === HrefEvent && a && a.href) {
      this.handleHref(evt, a, a.href);
    } else if (type === TooltipShowEvent || type === TooltipHideEvent) {
      this.handleTooltip(evt, a, type !== TooltipHideEvent);
    } // invoke all registered handlers


    if (h) {
      for (var i = 0, len = h.length; i < len; ++i) {
        h[i].handler.call(this._obj, evt, a);
      }
    }
  },
  // add an event handler
  on: function on(type, handler) {
    var name = this.eventName(type),
        h = this._handlers,
        i = this._handlerIndex(h[name], type, handler);

    if (i < 0) {
      eventListenerCheck(this, type);
      (h[name] || (h[name] = [])).push({
        type: type,
        handler: handler
      });
    }

    return this;
  },
  // remove an event handler
  off: function off(type, handler) {
    var name = this.eventName(type),
        h = this._handlers[name],
        i = this._handlerIndex(h, type, handler);

    if (i >= 0) {
      h.splice(i, 1);
    }

    return this;
  },
  pickEvent: function pickEvent(evt) {
    var p = vega_scenegraph_module_point(evt, this._canvas),
        o = this._origin;
    return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
  },
  // find the scenegraph item at the current mouse position
  // x, y -- the absolute x, y mouse coordinates on the canvas element
  // gx, gy -- the relative coordinates within the current group
  pick: function pick(scene, x, y, gx, gy) {
    var g = this.context(),
        mark = Marks[scene.marktype];
    return mark.pick.call(this, g, scene, x, y, gx, gy);
  }
});

function devicePixelRatio() {
  return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
}

var pixelRatio = devicePixelRatio();

function _resize(canvas, width, height, origin, scaleFactor, opt) {
  var inDOM = typeof HTMLElement !== 'undefined' && canvas instanceof HTMLElement && canvas.parentNode != null,
      context = canvas.getContext('2d'),
      ratio = inDOM ? pixelRatio : scaleFactor;
  canvas.width = width * ratio;
  canvas.height = height * ratio;

  for (var key in opt) {
    context[key] = opt[key];
  }

  if (inDOM && ratio !== 1) {
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
  }

  context.pixelRatio = ratio;
  context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
  return canvas;
}

function CanvasRenderer(loader) {
  Renderer.call(this, loader);
  this._options = {};
  this._redraw = false;
  this._dirty = new Bounds();
  this._tempb = new Bounds();
}

var base$1 = Renderer.prototype;

var viewBounds = function viewBounds(origin, width, height) {
  return new Bounds().set(0, 0, width, height).translate(-origin[0], -origin[1]);
};

function clipToBounds(g, b, origin) {
  // expand bounds by 1 pixel, then round to pixel boundaries
  b.expand(1).round(); // align to base pixel grid in case of non-integer scaling (#2425)

  if (g.pixelRatio % 1) {
    b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
  } // to avoid artifacts translate if origin has fractional pixels


  b.translate(-(origin[0] % 1), -(origin[1] % 1)); // set clip path

  g.beginPath();
  g.rect(b.x1, b.y1, b.width(), b.height());
  g.clip();
  return b;
}

vega_util_module_inherits(CanvasRenderer, Renderer, {
  initialize: function initialize(el, width, height, origin, scaleFactor, options) {
    this._options = options || {};
    this._canvas = this._options.externalContext ? null : domCanvas(1, 1, this._options.type); // instantiate a small canvas

    if (el && this._canvas) {
      domClear(el, 0).appendChild(this._canvas);

      this._canvas.setAttribute('class', 'marks');
    } // this method will invoke resize to size the canvas appropriately


    return base$1.initialize.call(this, el, width, height, origin, scaleFactor);
  },
  resize: function resize(width, height, origin, scaleFactor) {
    base$1.resize.call(this, width, height, origin, scaleFactor);

    if (this._canvas) {
      // configure canvas size and transform
      _resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
    } else {
      // external context needs to be scaled and positioned to origin
      var ctx = this._options.externalContext;
      if (!ctx) error('CanvasRenderer is missing a valid canvas or context');
      ctx.scale(this._scale, this._scale);
      ctx.translate(this._origin[0], this._origin[1]);
    }

    this._redraw = true;
    return this;
  },
  canvas: function canvas() {
    return this._canvas;
  },
  context: function context() {
    return this._options.externalContext || (this._canvas ? this._canvas.getContext('2d') : null);
  },
  dirty: function dirty(item) {
    var b = this._tempb.clear().union(item.bounds);

    var g = item.mark.group;

    while (g) {
      b.translate(g.x || 0, g.y || 0);
      g = g.mark.group;
    }

    this._dirty.union(b);
  },
  _render: function _render(scene) {
    var g = this.context(),
        o = this._origin,
        w = this._width,
        h = this._height,
        db = this._dirty,
        vb = viewBounds(o, w, h); // setup

    g.save();
    var b = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);
    this.clear(-o[0], -o[1], w, h); // render

    this.draw(g, scene, b); // takedown

    g.restore();
    db.clear();
    return this;
  },
  draw: function draw(ctx, scene, bounds) {
    var mark = Marks[scene.marktype];
    if (scene.clip) clip(ctx, scene);
    mark.draw.call(this, ctx, scene, bounds);
    if (scene.clip) ctx.restore();
  },
  clear: function clear(x, y, w, h) {
    var opt = this._options,
        g = this.context();

    if (opt.type !== 'pdf' && !opt.externalContext) {
      // calling clear rect voids vector output in pdf mode
      // and could remove external context content (#2615)
      g.clearRect(x, y, w, h);
    }

    if (this._bgcolor != null) {
      g.fillStyle = this._bgcolor;
      g.fillRect(x, y, w, h);
    }
  }
});

function SVGHandler(loader, tooltip) {
  Handler.call(this, loader, tooltip);
  var h = this;
  h._hrefHandler = listener(h, function (evt, item) {
    if (item && item.href) h.handleHref(evt, item, item.href);
  });
  h._tooltipHandler = listener(h, function (evt, item) {
    h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
  });
} // wrap an event listener for the SVG DOM


var listener = function listener(context, handler) {
  return function (evt) {
    var item = evt.target.__data__;
    item = Array.isArray(item) ? item[0] : item;
    evt.vegaType = evt.type;
    handler.call(context._obj, evt, item);
  };
};

vega_util_module_inherits(SVGHandler, Handler, {
  initialize: function initialize(el, origin, obj) {
    var svg = this._svg;

    if (svg) {
      svg.removeEventListener(HrefEvent, this._hrefHandler);
      svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
    }

    this._svg = svg = el && domFind(el, 'svg');

    if (svg) {
      svg.addEventListener(HrefEvent, this._hrefHandler);
      svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
    }

    return Handler.prototype.initialize.call(this, el, origin, obj);
  },
  canvas: function canvas() {
    return this._svg;
  },
  // add an event handler
  on: function on(type, handler) {
    var name = this.eventName(type),
        h = this._handlers,
        i = this._handlerIndex(h[name], type, handler);

    if (i < 0) {
      var _x2 = {
        type: type,
        handler: handler,
        listener: listener(this, handler)
      };
      (h[name] || (h[name] = [])).push(_x2);

      if (this._svg) {
        this._svg.addEventListener(name, _x2.listener);
      }
    }

    return this;
  },
  // remove an event handler
  off: function off(type, handler) {
    var name = this.eventName(type),
        h = this._handlers[name],
        i = this._handlerIndex(h, type, handler);

    if (i >= 0) {
      if (this._svg) {
        this._svg.removeEventListener(name, h[i].listener);
      }

      h.splice(i, 1);
    }

    return this;
  }
});
var ARIA_HIDDEN = 'aria-hidden';
var ARIA_LABEL = 'aria-label';
var ARIA_ROLE = 'role';
var ARIA_ROLEDESCRIPTION = 'aria-roledescription';
var GRAPHICS_OBJECT = 'graphics-object';
var GRAPHICS_SYMBOL = 'graphics-symbol';

var vega_scenegraph_module_bundle = function bundle(role, roledesc, label) {
  var _ref;

  return _ref = {}, (0,defineProperty/* default */.Z)(_ref, ARIA_ROLE, role), (0,defineProperty/* default */.Z)(_ref, ARIA_ROLEDESCRIPTION, roledesc), (0,defineProperty/* default */.Z)(_ref, ARIA_LABEL, label || undefined), _ref;
}; // these roles are covered by related roles
// we can ignore them, no need to generate attributes


var AriaIgnore = toSet(['axis-domain', 'axis-grid', 'axis-label', 'axis-tick', 'axis-title', 'legend-band', 'legend-entry', 'legend-gradient', 'legend-label', 'legend-title', 'legend-symbol', 'title']); // aria attribute generators for guide roles

var AriaGuides = {
  'axis': {
    desc: 'axis',
    caption: axisCaption
  },
  'legend': {
    desc: 'legend',
    caption: legendCaption
  },
  'title-text': {
    desc: 'title',
    caption: function caption(item) {
      return "Title text '".concat(titleCaption(item), "'");
    }
  },
  'title-subtitle': {
    desc: 'subtitle',
    caption: function caption(item) {
      return "Subtitle text '".concat(titleCaption(item), "'");
    }
  }
}; // aria properties generated for mark item encoding channels

var AriaEncode = {
  ariaRole: ARIA_ROLE,
  ariaRoleDescription: ARIA_ROLEDESCRIPTION,
  description: ARIA_LABEL
};

function ariaItemAttributes(emit, item) {
  var hide = item.aria === false;
  emit(ARIA_HIDDEN, hide || undefined);

  if (hide || item.description == null) {
    for (var prop in AriaEncode) {
      emit(AriaEncode[prop], undefined);
    }
  } else {
    var _type = item.mark.marktype;
    emit(ARIA_LABEL, item.description);
    emit(ARIA_ROLE, item.ariaRole || (_type === 'group' ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));
    emit(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || "".concat(_type, " mark"));
  }
}

function ariaMarkAttributes(mark) {
  return mark.aria === false ? (0,defineProperty/* default */.Z)({}, ARIA_HIDDEN, true) : AriaIgnore[mark.role] ? null : AriaGuides[mark.role] ? ariaGuide(mark, AriaGuides[mark.role]) : ariaMark(mark);
}

function ariaMark(mark) {
  var type = mark.marktype;
  var recurse = type === 'group' || type === 'text' || mark.items.some(function (_) {
    return _.description != null && _.aria !== false;
  });
  return vega_scenegraph_module_bundle(recurse ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, "".concat(type, " mark container"), mark.description);
}

function ariaGuide(mark, opt) {
  try {
    var item = mark.items[0],
        caption = opt.caption || function () {
      return '';
    };

    return vega_scenegraph_module_bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
  } catch (err) {
    return null;
  }
}

function titleCaption(item) {
  return array(item.text).join(' ');
}

function axisCaption(item) {
  var datum = item.datum,
      orient = item.orient,
      title = datum.title ? extractTitle(item) : null,
      ctx = item.context,
      scale = ctx.scales[datum.scale].value,
      locale = ctx.dataflow.locale(),
      type = scale.type,
      xy = orient === 'left' || orient === 'right' ? 'Y' : 'X';
  return "".concat(xy, "-axis") + (title ? " titled '".concat(title, "'") : '') + " for a ".concat(isDiscrete(type) ? 'discrete' : type, " scale") + " with ".concat(domainCaption(locale, scale, item));
}

function legendCaption(item) {
  var datum = item.datum,
      title = datum.title ? extractTitle(item) : null,
      type = "".concat(datum.type || '', " legend").trim(),
      scales = datum.scales,
      props = Object.keys(scales),
      ctx = item.context,
      scale = ctx.scales[scales[props[0]]].value,
      locale = ctx.dataflow.locale();
  return capitalize(type) + (title ? " titled '".concat(title, "'") : '') + " for ".concat(channelCaption(props)) + " with ".concat(domainCaption(locale, scale, item));
}

function extractTitle(item) {
  try {
    return array(peek(item.items).items[0].text).join(' ');
  } catch (err) {
    return null;
  }
}

function channelCaption(props) {
  props = props.map(function (p) {
    return p + (p === 'fill' || p === 'stroke' ? ' color' : '');
  });
  return props.length < 2 ? props[0] : props.slice(0, -1).join(', ') + ' and ' + peek(props);
}

function capitalize(s) {
  return s.length ? s[0].toUpperCase() + s.slice(1) : s;
}

var innerText = function innerText(val) {
  return (val + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

var attrText = function attrText(val) {
  return innerText(val).replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
};

function markup() {
  var buf = '',
      outer = '',
      inner = '';

  var stack = [],
      clear = function clear() {
    return outer = inner = '';
  },
      push = function push(tag) {
    if (outer) {
      buf += "".concat(outer, ">").concat(inner);
      clear();
    }

    stack.push(tag);
  },
      attr = function attr(name, value) {
    if (value != null) outer += " ".concat(name, "=\"").concat(attrText(value), "\"");
    return m;
  },
      m = {
    open: function open(tag) {
      push(tag);
      outer = '<' + tag;

      for (var _len = arguments.length, attrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        attrs[_key - 1] = arguments[_key];
      }

      for (var _i = 0, _attrs = attrs; _i < _attrs.length; _i++) {
        var set = _attrs[_i];

        for (var key in set) {
          attr(key, set[key]);
        }
      }

      return m;
    },
    close: function close() {
      var tag = stack.pop();

      if (outer) {
        buf += outer + (inner ? ">".concat(inner, "</").concat(tag, ">") : '/>');
      } else {
        buf += "</".concat(tag, ">");
      }

      clear();
      return m;
    },
    attr: attr,
    text: function text(t) {
      return inner += innerText(t), m;
    },
    toString: function toString() {
      return buf;
    }
  };

  return m;
}

var serializeXML = function serializeXML(node) {
  return _serialize(markup(), node) + '';
};

function _serialize(m, node) {
  m.open(node.tagName);

  if (node.hasAttributes()) {
    var attrs = node.attributes,
        n = attrs.length;

    for (var i = 0; i < n; ++i) {
      m.attr(attrs[i].name, attrs[i].value);
    }
  }

  if (node.hasChildNodes()) {
    var children = node.childNodes,
        _n = children.length;

    for (var _i2 = 0; _i2 < _n; _i2++) {
      var child = children[_i2];
      child.nodeType === 3 // text node
      ? m.text(child.nodeValue) : _serialize(m, child);
    }
  }

  return m.close();
}

var styles = {
  fill: 'fill',
  fillOpacity: 'fill-opacity',
  stroke: 'stroke',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  strokeCap: 'stroke-linecap',
  strokeJoin: 'stroke-linejoin',
  strokeDash: 'stroke-dasharray',
  strokeDashOffset: 'stroke-dashoffset',
  strokeMiterLimit: 'stroke-miterlimit',
  opacity: 'opacity',
  blend: 'mix-blend-mode'
}; // ensure miter limit default is consistent with canvas (#2498)

var rootAttributes = {
  'fill': 'none',
  'stroke-miterlimit': 10
};
var RootIndex = 0,
    xmlns = 'http://www.w3.org/2000/xmlns/',
    svgns = metadata.xmlns;

function SVGRenderer(loader) {
  Renderer.call(this, loader);
  this._dirtyID = 0;
  this._dirty = [];
  this._svg = null;
  this._root = null;
  this._defs = null;
}

var base = Renderer.prototype;
vega_util_module_inherits(SVGRenderer, Renderer, {
  /**
   * Initialize a new SVGRenderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance.
   */
  initialize: function initialize(el, width, height, origin, scaleFactor) {
    // create the svg definitions cache
    this._defs = {};

    this._clearDefs();

    if (el) {
      this._svg = domChild(el, 0, 'svg', svgns);

      this._svg.setAttributeNS(xmlns, 'xmlns', svgns);

      this._svg.setAttributeNS(xmlns, 'xmlns:xlink', metadata['xmlns:xlink']);

      this._svg.setAttribute('version', metadata['version']);

      this._svg.setAttribute('class', 'marks');

      domClear(el, 1); // set the svg root group

      this._root = domChild(this._svg, RootIndex, 'g', svgns);
      setAttributes(this._root, rootAttributes); // ensure no additional child elements

      domClear(this._svg, RootIndex + 1);
    } // set background color if defined


    this.background(this._bgcolor);
    return base.initialize.call(this, el, width, height, origin, scaleFactor);
  },

  /**
   * Get / set the background color.
   */
  background: function background(bgcolor) {
    if (arguments.length && this._svg) {
      this._svg.style.setProperty('background-color', bgcolor);
    }

    return base.background.apply(this, arguments);
  },

  /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {SVGRenderer} - This renderer instance;
   */
  resize: function resize(width, height, origin, scaleFactor) {
    base.resize.call(this, width, height, origin, scaleFactor);

    if (this._svg) {
      setAttributes(this._svg, {
        width: this._width * this._scale,
        height: this._height * this._scale,
        viewBox: "0 0 ".concat(this._width, " ").concat(this._height)
      });

      this._root.setAttribute('transform', "translate(".concat(this._origin, ")"));
    }

    this._dirty = [];
    return this;
  },

  /**
   * Returns the SVG element of the visualization.
   * @return {DOMElement} - The SVG element.
   */
  canvas: function canvas() {
    return this._svg;
  },

  /**
   * Returns an SVG text string for the rendered content,
   * or null if this renderer is currently headless.
   */
  svg: function svg() {
    var svg = this._svg,
        bg = this._bgcolor;
    if (!svg) return null;
    var node;

    if (bg) {
      svg.removeAttribute('style');
      node = domChild(svg, RootIndex, 'rect', svgns);
      setAttributes(node, {
        width: this._width,
        height: this._height,
        fill: bg
      });
    }

    var text = serializeXML(svg);

    if (bg) {
      svg.removeChild(node);

      this._svg.style.setProperty('background-color', bg);
    }

    return text;
  },

  /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */
  _render: function _render(scene) {
    // perform spot updates and re-render markup
    if (this._dirtyCheck()) {
      if (this._dirtyAll) this._clearDefs();
      this.mark(this._root, scene);
      domClear(this._root, 1);
    }

    this.defs();
    this._dirty = [];
    ++this._dirtyID;
    return this;
  },
  // -- Manage rendering of items marked as dirty --

  /**
   * Flag a mark item as dirty.
   * @param {Item} item - The mark item.
   */
  dirty: function dirty(item) {
    if (item.dirty !== this._dirtyID) {
      item.dirty = this._dirtyID;

      this._dirty.push(item);
    }
  },

  /**
   * Check if a mark item is considered dirty.
   * @param {Item} item - The mark item.
   */
  isDirty: function isDirty(item) {
    return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;
  },

  /**
   * Internal method to check dirty status and, if possible,
   * make targetted updates without a full rendering pass.
   */
  _dirtyCheck: function _dirtyCheck() {
    this._dirtyAll = true;
    var items = this._dirty;
    if (!items.length || !this._dirtyID) return true;
    var id = ++this._dirtyID;
    var item, mark, type, mdef, i, n, o;

    for (i = 0, n = items.length; i < n; ++i) {
      item = items[i];
      mark = item.mark;

      if (mark.marktype !== type) {
        // memoize mark instance lookup
        type = mark.marktype;
        mdef = Marks[type];
      }

      if (mark.zdirty && mark.dirty !== id) {
        this._dirtyAll = false;
        dirtyParents(item, id);
        mark.items.forEach(function (i) {
          i.dirty = id;
        });
      }

      if (mark.zdirty) continue; // handle in standard drawing pass

      if (item.exit) {
        // EXIT
        if (mdef.nested && mark.items.length) {
          // if nested mark with remaining points, update instead
          o = mark.items[0];
          if (o._svg) this._update(mdef, o._svg, o);
        } else if (item._svg) {
          // otherwise remove from DOM
          o = item._svg.parentNode;
          if (o) o.removeChild(item._svg);
        }

        item._svg = null;
        continue;
      }

      item = mdef.nested ? mark.items[0] : item;
      if (item._update === id) continue; // already visited

      if (!item._svg || !item._svg.ownerSVGElement) {
        // ENTER
        this._dirtyAll = false;
        dirtyParents(item, id);
      } else {
        // IN-PLACE UPDATE
        this._update(mdef, item._svg, item);
      }

      item._update = id;
    }

    return !this._dirtyAll;
  },
  // -- Construct & maintain scenegraph to SVG mapping ---

  /**
   * Render a set of mark items.
   * @param {SVGElement} el - The parent element in the SVG tree.
   * @param {object} scene - The mark parent to render.
   * @param {SVGElement} prev - The previous sibling in the SVG tree.
   */
  mark: function mark(el, scene, prev) {
    var _this5 = this;

    if (!this.isDirty(scene)) return scene._svg;
    var svg = this._svg,
        mdef = Marks[scene.marktype],
        events = scene.interactive === false ? 'none' : null,
        isGroup = mdef.tag === 'g';
    var sibling = null,
        i = 0;
    var parent = bind(scene, el, prev, 'g', svg);
    parent.setAttribute('class', cssClass(scene)); // apply aria attributes to parent container element

    var aria = ariaMarkAttributes(scene);

    for (var key in aria) {
      setAttribute(parent, key, aria[key]);
    }

    if (!isGroup) {
      setAttribute(parent, 'pointer-events', events);
    }

    setAttribute(parent, 'clip-path', scene.clip ? clip$1(this, scene, scene.group) : null);

    var process = function process(item) {
      var dirty = _this5.isDirty(item),
          node = bind(item, parent, sibling, mdef.tag, svg);

      if (dirty) {
        _this5._update(mdef, node, item);

        if (isGroup) recurse(_this5, node, item);
      }

      sibling = node;
      ++i;
    };

    if (mdef.nested) {
      if (scene.items.length) process(scene.items[0]);
    } else {
      visit(scene, process);
    }

    domClear(parent, i);
    return parent;
  },

  /**
   * Update the attributes of an SVG element for a mark item.
   * @param {object} mdef - The mark definition object
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */
  _update: function _update(mdef, el, item) {
    // set dom element and values cache
    // provides access to emit method
    vega_scenegraph_module_element = el;
    values = el.__values__; // apply aria-specific properties

    ariaItemAttributes(emit, item); // apply svg attributes

    mdef.attr(emit, item, this); // some marks need special treatment

    var extra = mark_extras[mdef.type];
    if (extra) extra.call(this, mdef, el, item); // apply svg style attributes
    // note: element state may have been modified by 'extra' method

    if (vega_scenegraph_module_element) this.style(vega_scenegraph_module_element, item);
  },

  /**
   * Update the presentation attributes of an SVG element for a mark item.
   * @param {SVGElement} el - The SVG element.
   * @param {Item} item - The mark item.
   */
  style: function style(el, item) {
    if (item == null) return;

    for (var prop in styles) {
      var _value2 = prop === 'font' ? fontFamily(item) : item[prop];

      if (_value2 === values[prop]) continue;
      var name = styles[prop];

      if (_value2 == null) {
        el.removeAttribute(name);
      } else {
        if (isGradient(_value2)) {
          _value2 = gradientRef(_value2, this._defs.gradient, href());
        }

        el.setAttribute(name, _value2 + '');
      }

      values[prop] = _value2;
    }
  },

  /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   */
  defs: function defs() {
    var svg = this._svg,
        defs = this._defs;
    var el = defs.el,
        index = 0;

    for (var id in defs.gradient) {
      if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);
      index = updateGradient(el, defs.gradient[id], index);
    }

    for (var _id in defs.clipping) {
      if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);
      index = updateClipping(el, defs.clipping[_id], index);
    } // clean-up


    if (el) {
      index === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index);
    }
  },

  /**
   * Clear defs caches.
   */
  _clearDefs: function _clearDefs() {
    var def = this._defs;
    def.gradient = {};
    def.clipping = {};
  }
}); // mark ancestor chain with a dirty id

function dirtyParents(item, id) {
  for (; item && item.dirty !== id; item = item.mark.group) {
    item.dirty = id;

    if (item.mark && item.mark.dirty !== id) {
      item.mark.dirty = id;
    } else return;
  }
} // update gradient definitions


function updateGradient(el, grad, index) {
  var i, n, stop;

  if (grad.gradient === 'radial') {
    // SVG radial gradients automatically transform to normalized bbox
    // coordinates, in a way that is cumbersome to replicate in canvas.
    // We wrap the radial gradient in a pattern element, allowing us to
    // maintain a circular gradient that matches what canvas provides.
    var pt = domChild(el, index++, 'pattern', svgns);
    setAttributes(pt, {
      id: patternPrefix + grad.id,
      viewBox: '0,0,1,1',
      width: '100%',
      height: '100%',
      preserveAspectRatio: 'xMidYMid slice'
    });
    pt = domChild(pt, 0, 'rect', svgns);
    setAttributes(pt, {
      width: 1,
      height: 1,
      fill: "url(".concat(href(), "#").concat(grad.id, ")")
    });
    el = domChild(el, index++, 'radialGradient', svgns);
    setAttributes(el, {
      id: grad.id,
      fx: grad.x1,
      fy: grad.y1,
      fr: grad.r1,
      cx: grad.x2,
      cy: grad.y2,
      r: grad.r2
    });
  } else {
    el = domChild(el, index++, 'linearGradient', svgns);
    setAttributes(el, {
      id: grad.id,
      x1: grad.x1,
      x2: grad.x2,
      y1: grad.y1,
      y2: grad.y2
    });
  }

  for (i = 0, n = grad.stops.length; i < n; ++i) {
    stop = domChild(el, i, 'stop', svgns);
    stop.setAttribute('offset', grad.stops[i].offset);
    stop.setAttribute('stop-color', grad.stops[i].color);
  }

  domClear(el, i);
  return index;
} // update clipping path definitions


function updateClipping(el, clip, index) {
  var mask;
  el = domChild(el, index, 'clipPath', svgns);
  el.setAttribute('id', clip.id);

  if (clip.path) {
    mask = domChild(el, 0, 'path', svgns);
    mask.setAttribute('d', clip.path);
  } else {
    mask = domChild(el, 0, 'rect', svgns);
    setAttributes(mask, {
      x: 0,
      y: 0,
      width: clip.width,
      height: clip.height
    });
  }

  domClear(el, 1);
  return index + 1;
} // Recursively process group contents.


function recurse(renderer, el, group) {
  el = el.lastChild.previousSibling;
  var prev,
      idx = 0;
  visit(group, function (item) {
    prev = renderer.mark(el, item, prev);
    ++idx;
  }); // remove any extraneous DOM elements

  domClear(el, 1 + idx);
} // Bind a scenegraph item to an SVG DOM element.
// Create new SVG elements as needed.


function bind(item, el, sibling, tag, svg) {
  var node = item._svg,
      doc; // create a new dom node if needed

  if (!node) {
    doc = el.ownerDocument;
    node = domCreate(doc, tag, svgns);
    item._svg = node;

    if (item.mark) {
      node.__data__ = item;
      node.__values__ = {
        fill: 'default'
      }; // if group, create background, content, and foreground elements

      if (tag === 'g') {
        var bg = domCreate(doc, 'path', svgns);
        node.appendChild(bg);
        bg.__data__ = item;
        var cg = domCreate(doc, 'g', svgns);
        node.appendChild(cg);
        cg.__data__ = item;
        var fg = domCreate(doc, 'path', svgns);
        node.appendChild(fg);
        fg.__data__ = item;
        fg.__values__ = {
          fill: 'default'
        };
      }
    }
  } // (re-)insert if (a) not contained in SVG or (b) sibling order has changed


  if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {
    el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
  }

  return node;
} // check if two nodes are ordered siblings


function siblingCheck(node, sibling) {
  return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling; // treat null/undefined the same
} // -- Set attributes & styles on SVG elements ---


var vega_scenegraph_module_element = null,
    // temp var for current SVG element
values = null; // temp var for current values hash
// Extra configuration for certain mark types

var mark_extras = {
  group: function group(mdef, el, item) {
    var fg = vega_scenegraph_module_element = el.childNodes[2];
    values = fg.__values__;
    mdef.foreground(emit, item, this);
    values = el.__values__; // use parent's values hash

    vega_scenegraph_module_element = el.childNodes[1];
    mdef.content(emit, item, this);
    var bg = vega_scenegraph_module_element = el.childNodes[0];
    mdef.background(emit, item, this);
    var value = item.mark.interactive === false ? 'none' : null;

    if (value !== values.events) {
      setAttribute(fg, 'pointer-events', value);
      setAttribute(bg, 'pointer-events', value);
      values.events = value;
    }

    if (item.strokeForeground && item.stroke) {
      var _fill = item.fill;
      setAttribute(fg, 'display', null); // set style of background

      this.style(bg, item);
      setAttribute(bg, 'stroke', null); // set style of foreground

      if (_fill) item.fill = null;
      values = fg.__values__;
      this.style(fg, item);
      if (_fill) item.fill = _fill; // leave element null to prevent downstream styling

      vega_scenegraph_module_element = null;
    } else {
      // ensure foreground is ignored
      setAttribute(fg, 'display', 'none');
    }
  },
  image: function image(mdef, el, item) {
    if (item.smooth === false) {
      setStyle(el, 'image-rendering', 'optimizeSpeed');
      setStyle(el, 'image-rendering', 'pixelated');
    } else {
      setStyle(el, 'image-rendering', null);
    }
  },
  text: function text(mdef, el, item) {
    var tl = textLines(item);
    var key, value, doc, lh;

    if (isArray(tl)) {
      // multi-line text
      value = tl.map(function (_) {
        return textValue(item, _);
      });
      key = value.join('\n'); // content cache key

      if (key !== values.text) {
        domClear(el, 0);
        doc = el.ownerDocument;
        lh = lineHeight(item);
        value.forEach(function (t, i) {
          var ts = domCreate(doc, 'tspan', svgns);
          ts.__data__ = item; // data binding

          ts.textContent = t;

          if (i) {
            ts.setAttribute('x', 0);
            ts.setAttribute('dy', lh);
          }

          el.appendChild(ts);
        });
        values.text = key;
      }
    } else {
      // single-line text
      value = textValue(item, tl);

      if (value !== values.text) {
        el.textContent = value;
        values.text = value;
      }
    }

    setAttribute(el, 'font-family', fontFamily(item));
    setAttribute(el, 'font-size', fontSize(item) + 'px');
    setAttribute(el, 'font-style', item.fontStyle);
    setAttribute(el, 'font-variant', item.fontVariant);
    setAttribute(el, 'font-weight', item.fontWeight);
  }
};

function emit(name, value, ns) {
  // early exit if value is unchanged
  if (value === values[name]) return; // use appropriate method given namespace (ns)

  if (ns) {
    setAttributeNS(vega_scenegraph_module_element, name, value, ns);
  } else {
    setAttribute(vega_scenegraph_module_element, name, value);
  } // note current value for future comparison


  values[name] = value;
}

function setStyle(el, name, value) {
  if (value !== values[name]) {
    if (value == null) {
      el.style.removeProperty(name);
    } else {
      el.style.setProperty(name, value + '');
    }

    values[name] = value;
  }
}

function setAttributes(el, attrs) {
  for (var key in attrs) {
    setAttribute(el, key, attrs[key]);
  }
}

function setAttribute(el, name, value) {
  if (value != null) {
    // if value is provided, update DOM attribute
    el.setAttribute(name, value);
  } else {
    // else remove DOM attribute
    el.removeAttribute(name);
  }
}

function setAttributeNS(el, name, value, ns) {
  if (value != null) {
    // if value is provided, update DOM attribute
    el.setAttributeNS(ns, name, value);
  } else {
    // else remove DOM attribute
    el.removeAttributeNS(ns, name);
  }
}

function href() {
  var loc;
  return typeof window === 'undefined' ? '' : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
}

function SVGStringRenderer(loader) {
  Renderer.call(this, loader);
  this._text = null;
  this._defs = {
    gradient: {},
    clipping: {}
  };
}

vega_util_module_inherits(SVGStringRenderer, Renderer, {
  /**
   * Returns the rendered SVG text string,
   * or null if rendering has not yet occurred.
   */
  svg: function svg() {
    return this._text;
  },

  /**
   * Internal rendering method.
   * @param {object} scene - The root mark of a scenegraph to render.
   */
  _render: function _render(scene) {
    var m = markup(); // svg tag

    m.open('svg', extend({}, metadata, {
      class: 'marks',
      width: this._width * this._scale,
      height: this._height * this._scale,
      viewBox: "0 0 ".concat(this._width, " ").concat(this._height)
    })); // background, if defined

    var bg = this._bgcolor;

    if (bg && bg !== 'transparent' && bg !== 'none') {
      m.open('rect', {
        width: this._width,
        height: this._height,
        fill: bg
      }).close();
    } // root content group


    m.open('g', rootAttributes, {
      transform: 'translate(' + this._origin + ')'
    });
    this.mark(m, scene);
    m.close(); // </g>
    // defs

    this.defs(m); // get SVG text string

    this._text = m.close() + '';
    return this;
  },

  /**
   * Render a set of mark items.
   * @param {object} m - The markup context.
   * @param {object} scene - The mark parent to render.
   */
  mark: function mark(m, scene) {
    var _this6 = this;

    var mdef = Marks[scene.marktype],
        tag = mdef.tag,
        attrList = [ariaItemAttributes, mdef.attr]; // render opening group tag

    m.open('g', {
      'class': cssClass(scene),
      'clip-path': scene.clip ? clip$1(this, scene, scene.group) : null
    }, ariaMarkAttributes(scene), {
      'pointer-events': tag !== 'g' && scene.interactive === false ? 'none' : null
    }); // render contained elements

    var process = function process(item) {
      var href = _this6.href(item);

      if (href) m.open('a', href);
      m.open(tag, _this6.attr(scene, item, attrList, tag !== 'g' ? tag : null));

      if (tag === 'text') {
        var _tl = textLines(item);

        if (isArray(_tl)) {
          // multi-line text
          var attrs = {
            x: 0,
            dy: lineHeight(item)
          };

          for (var i = 0; i < _tl.length; ++i) {
            m.open('tspan', i ? attrs : null).text(textValue(item, _tl[i])).close();
          }
        } else {
          // single-line text
          m.text(textValue(item, _tl));
        }
      } else if (tag === 'g') {
        var fore = item.strokeForeground,
            _fill2 = item.fill,
            _stroke = item.stroke;

        if (fore && _stroke) {
          item.stroke = null;
        }

        m.open('path', _this6.attr(scene, item, mdef.background, 'bgrect')).close(); // recurse for group content

        m.open('g', _this6.attr(scene, item, mdef.content));
        visit(item, function (scene) {
          return _this6.mark(m, scene);
        });
        m.close();

        if (fore && _stroke) {
          if (_fill2) item.fill = null;
          item.stroke = _stroke;
          m.open('path', _this6.attr(scene, item, mdef.foreground, 'bgrect')).close();
          if (_fill2) item.fill = _fill2;
        } else {
          m.open('path', _this6.attr(scene, item, mdef.foreground, 'bgfore')).close();
        }
      }

      m.close(); // </tag>

      if (href) m.close(); // </a>
    };

    if (mdef.nested) {
      if (scene.items && scene.items.length) process(scene.items[0]);
    } else {
      visit(scene, process);
    } // render closing group tag


    return m.close(); // </g>
  },

  /**
   * Get href attributes for a hyperlinked mark item.
   * @param {Item} item - The mark item.
   */
  href: function href(item) {
    var _this7 = this;

    var href = item.href;
    var attr;

    if (href) {
      if (attr = this._hrefs && this._hrefs[href]) {
        return attr;
      } else {
        this.sanitizeURL(href).then(function (attr) {
          // rewrite to use xlink namespace
          attr['xlink:href'] = attr.href;
          attr.href = null;
          (_this7._hrefs || (_this7._hrefs = {}))[href] = attr;
        });
      }
    }

    return null;
  },

  /**
   * Get an object of SVG attributes for a mark item.
   * @param {object} scene - The mark parent.
   * @param {Item} item - The mark item.
   * @param {array|function} attrs - One or more attribute emitters.
   * @param {string} tag - The tag being rendered.
   */
  attr: function attr(scene, item, attrs, tag) {
    var _this8 = this;

    var object = {},
        emit = function emit(name, value, ns, prefixed) {
      object[prefixed || name] = value;
    }; // apply mark specific attributes


    if (Array.isArray(attrs)) {
      attrs.forEach(function (fn) {
        return fn(emit, item, _this8);
      });
    } else {
      attrs(emit, item, this);
    } // apply style attributes


    if (tag) {
      style(object, item, scene, tag, this._defs);
    }

    return object;
  },

  /**
   * Render SVG defs, as needed.
   * Must be called *after* marks have been processed to ensure the
   * collected state is current and accurate.
   * @param {object} m - The markup context.
   */
  defs: function defs(m) {
    var gradient = this._defs.gradient,
        clipping = this._defs.clipping,
        count = Object.keys(gradient).length + Object.keys(clipping).length;
    if (count === 0) return; // nothing to do

    m.open('defs');

    for (var id in gradient) {
      var _def = gradient[id],
          stops = _def.stops;

      if (_def.gradient === 'radial') {
        // SVG radial gradients automatically transform to normalized bbox
        // coordinates, in a way that is cumbersome to replicate in canvas.
        // We wrap the radial gradient in a pattern element, allowing us to
        // maintain a circular gradient that matches what canvas provides.
        m.open('pattern', {
          id: patternPrefix + id,
          viewBox: '0,0,1,1',
          width: '100%',
          height: '100%',
          preserveAspectRatio: 'xMidYMid slice'
        });
        m.open('rect', {
          width: '1',
          height: '1',
          fill: 'url(#' + id + ')'
        }).close();
        m.close(); // </pattern>

        m.open('radialGradient', {
          id: id,
          fx: _def.x1,
          fy: _def.y1,
          fr: _def.r1,
          cx: _def.x2,
          cy: _def.y2,
          r: _def.r2
        });
      } else {
        m.open('linearGradient', {
          id: id,
          x1: _def.x1,
          x2: _def.x2,
          y1: _def.y1,
          y2: _def.y2
        });
      }

      for (var i = 0; i < stops.length; ++i) {
        m.open('stop', {
          offset: stops[i].offset,
          'stop-color': stops[i].color
        }).close();
      }

      m.close();
    }

    for (var _id2 in clipping) {
      var _def2 = clipping[_id2];
      m.open('clipPath', {
        id: _id2
      });

      if (_def2.path) {
        m.open('path', {
          d: _def2.path
        }).close();
      } else {
        m.open('rect', {
          x: 0,
          y: 0,
          width: _def2.width,
          height: _def2.height
        }).close();
      }

      m.close();
    }

    m.close();
  }
}); // Helper function for attr for style presentation attributes

function style(s, item, scene, tag, defs) {
  if (item == null) return s;

  if (tag === 'bgrect' && scene.interactive === false) {
    s['pointer-events'] = 'none';
  }

  if (tag === 'bgfore') {
    if (scene.interactive === false) {
      s['pointer-events'] = 'none';
    }

    s.display = 'none';
    if (item.fill !== null) return s;
  }

  if (tag === 'image' && item.smooth === false) {
    s.style = 'image-rendering: optimizeSpeed; image-rendering: pixelated;';
  }

  if (tag === 'text') {
    s['font-family'] = fontFamily(item);
    s['font-size'] = fontSize(item) + 'px';
    s['font-style'] = item.fontStyle;
    s['font-variant'] = item.fontVariant;
    s['font-weight'] = item.fontWeight;
  }

  for (var prop in styles) {
    var _value3 = item[prop];
    var name = styles[prop];
    if (_value3 === 'transparent' && (name === 'fill' || name === 'stroke')) ;else if (_value3 != null) {
      if (isGradient(_value3)) {
        _value3 = gradientRef(_value3, defs.gradient, '');
      }

      s[name] = _value3;
    }
  }

  return s;
}

var Canvas = 'canvas';
var PNG = 'png';
var SVG = 'svg';
var vega_scenegraph_module_None = 'none';
var RenderType = {
  Canvas: Canvas,
  PNG: PNG,
  SVG: SVG,
  None: vega_scenegraph_module_None
};
var modules = {};
modules[Canvas] = modules[PNG] = {
  renderer: CanvasRenderer,
  headless: CanvasRenderer,
  handler: CanvasHandler
};
modules[SVG] = {
  renderer: SVGRenderer,
  headless: SVGStringRenderer,
  handler: SVGHandler
};
modules[vega_scenegraph_module_None] = {};

function renderModule(name, _) {
  name = String(name || '').toLowerCase();

  if (arguments.length > 1) {
    modules[name] = _;
    return this;
  } else {
    return modules[name];
  }
}

function vega_scenegraph_module_intersect(scene, bounds, filter) {
  var hits = [],
      // intersection results
  box = new Bounds().union(bounds),
      // defensive copy
  type = scene.marktype;
  return type ? intersectMark(scene, box, filter, hits) : type === 'group' ? intersectGroup(scene, box, filter, hits) : error('Intersect scene must be mark node or group item.');
}

function intersectMark(mark, box, filter, hits) {
  if (visitMark(mark, box, filter)) {
    var items = mark.items,
        _type2 = mark.marktype,
        n = items.length;
    var i = 0;

    if (_type2 === 'group') {
      for (; i < n; ++i) {
        intersectGroup(items[i], box, filter, hits);
      }
    } else {
      for (var test = Marks[_type2].isect; i < n; ++i) {
        var item = items[i];
        if (intersectItem(item, box, test)) hits.push(item);
      }
    }
  }

  return hits;
}

function visitMark(mark, box, filter) {
  // process if bounds intersect and if
  // (1) mark is a group mark (so we must recurse), or
  // (2) mark is interactive and passes filter
  return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === 'group' || mark.interactive !== false && (!filter || filter(mark)));
}

function intersectGroup(group, box, filter, hits) {
  // test intersect against group
  // skip groups by default unless filter says otherwise
  if (filter && filter(group.mark) && intersectItem(group, box, Marks.group.isect)) {
    hits.push(group);
  } // recursively test children marks
  // translate box to group coordinate space


  var marks = group.items,
      n = marks && marks.length;

  if (n) {
    var _x3 = group.x || 0,
        _y2 = group.y || 0;

    box.translate(-_x3, -_y2);

    for (var i = 0; i < n; ++i) {
      intersectMark(marks[i], box, filter, hits);
    }

    box.translate(_x3, _y2);
  }

  return hits;
}

function intersectItem(item, box, test) {
  // test bounds enclosure, bounds intersection, then detailed test
  var bounds = item.bounds;
  return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
}

var clipBounds = new Bounds();

function boundClip(mark) {
  var clip = mark.clip;

  if (isFunction(clip)) {
    clip(boundContext(clipBounds.clear()));
  } else if (clip) {
    clipBounds.set(0, 0, mark.group.width, mark.group.height);
  } else return;

  mark.bounds.intersect(clipBounds);
}

var TOLERANCE = 1e-9;

function sceneEqual(a, b, key) {
  return a === b ? true : key === 'path' ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : isNumber(a) && isNumber(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !isObject(a) && !isObject(b) ? a == b : objectEqual(a, b);
}

function pathEqual(a, b) {
  return sceneEqual(pathParse(a), pathParse(b));
}

function objectEqual(a, b) {
  var ka = Object.keys(a),
      kb = Object.keys(b),
      key,
      i;
  if (ka.length !== kb.length) return false;
  ka.sort();
  kb.sort();

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) return false;
  }

  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!sceneEqual(a[key], b[key], key)) return false;
  }

  return typeof a === typeof b;
}

function resetSVGDefIds() {
  resetSVGClipId();
  resetSVGGradientId();
}


;// CONCATENATED MODULE: ./node_modules/vega-view-transforms/build/vega-view-transforms.module.js




var Top = 'top';
var Left = 'left';
var Right = 'right';
var Bottom = 'bottom';
var TopLeft = 'top-left';
var TopRight = 'top-right';
var BottomLeft = 'bottom-left';
var BottomRight = 'bottom-right';
var Start = 'start';
var Middle = 'middle';
var End = 'end';
var X = 'x';
var Y = 'y';
var Group = 'group';
var AxisRole = 'axis';
var TitleRole = 'title';
var FrameRole = 'frame';
var ScopeRole = 'scope';
var LegendRole = 'legend';
var RowHeader = 'row-header';
var RowFooter = 'row-footer';
var RowTitle = 'row-title';
var ColHeader = 'column-header';
var ColFooter = 'column-footer';
var ColTitle = 'column-title';
var Padding = 'padding';
var Symbols = 'symbol';
var Fit = 'fit';
var FitX = 'fit-x';
var FitY = 'fit-y';
var Pad = 'pad';
var vega_view_transforms_module_None = 'none';
var All = 'all';
var Each = 'each';
var Flush = 'flush';
var Column = 'column';
var Row = 'row';
/**
 * Calculate bounding boxes for scenegraph items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - The scenegraph mark instance to bound.
 */

function Bound(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Bound, Transform, {
  transform: function transform(_, pulse) {
    var view = pulse.dataflow,
        mark = _.mark,
        type = mark.marktype,
        entry = Marks[type],
        bound = entry.bound;
    var markBounds = mark.bounds,
        rebound;

    if (entry.nested) {
      // multi-item marks have a single bounds instance
      if (mark.items.length) view.dirty(mark.items[0]);
      markBounds = vega_view_transforms_module_boundItem(mark, bound);
      mark.items.forEach(function (item) {
        item.bounds.clear().union(markBounds);
      });
    } else if (type === Group || _.modified()) {
      // operator parameters modified -> re-bound all items
      // updates group bounds in response to modified group content
      pulse.visit(pulse.MOD, function (item) {
        return view.dirty(item);
      });
      markBounds.clear();
      mark.items.forEach(function (item) {
        return markBounds.union(vega_view_transforms_module_boundItem(item, bound));
      }); // force reflow for axes/legends/titles to propagate any layout changes

      switch (mark.role) {
        case AxisRole:
        case LegendRole:
        case TitleRole:
          pulse.reflow();
      }
    } else {
      // incrementally update bounds, re-bound mark as needed
      rebound = pulse.changed(pulse.REM);
      pulse.visit(pulse.ADD, function (item) {
        markBounds.union(vega_view_transforms_module_boundItem(item, bound));
      });
      pulse.visit(pulse.MOD, function (item) {
        rebound = rebound || markBounds.alignsWith(item.bounds);
        view.dirty(item);
        markBounds.union(vega_view_transforms_module_boundItem(item, bound));
      });

      if (rebound) {
        markBounds.clear();
        mark.items.forEach(function (item) {
          return markBounds.union(item.bounds);
        });
      }
    } // ensure mark bounds do not exceed any clipping region


    boundClip(mark);
    return pulse.modifies('bounds');
  }
});

function vega_view_transforms_module_boundItem(item, bound, opt) {
  return bound(item.bounds.clear(), item, opt);
}

var COUNTER_NAME = ':vega_identifier:';
/**
 * Adds a unique identifier to all added tuples.
 * This transform creates a new signal that serves as an id counter.
 * As a result, the id counter is shared across all instances of this
 * transform, generating unique ids across multiple data streams. In
 * addition, this signal value can be included in a snapshot of the
 * dataflow state, enabling correct resumption of id allocation.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {string} params.as - The field name for the generated identifier.
 */

function Identifier(params) {
  Transform.call(this, 0, params);
}

Identifier.Definition = {
  'type': 'Identifier',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'as',
    'type': 'string',
    'required': true
  }]
};
vega_util_module_inherits(Identifier, Transform, {
  transform: function transform(_, pulse) {
    var counter = getCounter(pulse.dataflow),
        as = _.as;
    var id = counter.value;
    pulse.visit(pulse.ADD, function (t) {
      return t[as] = t[as] || ++id;
    });
    counter.set(this.value = id);
    return pulse;
  }
});

function getCounter(view) {
  return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));
}
/**
 * Bind scenegraph items to a scenegraph mark instance.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.markdef - The mark definition for creating the mark.
 *   This is an object of legal scenegraph mark properties which *must* include
 *   the 'marktype' property.
 */


function Mark(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Mark, Transform, {
  transform: function transform(_, pulse) {
    var mark = this.value; // acquire mark on first invocation, bind context and group

    if (!mark) {
      mark = pulse.dataflow.scenegraph().mark(_.markdef, vega_view_transforms_module_lookup(_), _.index);
      mark.group.context = _.context;
      if (!_.context.group) _.context.group = mark.group;
      mark.source = this.source; // point to upstream collector

      mark.clip = _.clip;
      mark.interactive = _.interactive;
      this.value = mark;
    } // initialize entering items


    var Init = mark.marktype === Group ? GroupItem : Item;
    pulse.visit(pulse.ADD, function (item) {
      return Init.call(item, mark);
    }); // update clipping and/or interactive status

    if (_.modified('clip') || _.modified('interactive')) {
      mark.clip = _.clip;
      mark.interactive = !!_.interactive;
      mark.zdirty = true; // force scenegraph re-eval

      pulse.reflow();
    } // bind items array to scenegraph mark


    mark.items = pulse.source;
    return pulse;
  }
});

function vega_view_transforms_module_lookup(_) {
  var g = _.groups,
      p = _.parent;
  return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
}
/**
 * Analyze items for overlap, changing opacity to hide items with
 * overlapping bounding boxes. This transform will preserve at least
 * two items (e.g., first and last) even if overlap persists.
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting items.
 * @param {object} [params.method] - The overlap removal method to apply.
 *   One of 'parity' (default, hide every other item until there is no
 *   more overlap) or 'greedy' (sequentially scan and hide and items that
 *   overlap with the last visible item).
 * @param {object} [params.boundScale] - A scale whose range should be used
 *   to bound the items. Items exceeding the bounds of the scale range
 *   will be treated as overlapping. If null or undefined, no bounds check
 *   will be applied.
 * @param {object} [params.boundOrient] - The orientation of the scale
 *   (top, bottom, left, or right) used to bound items. This parameter is
 *   ignored if boundScale is null or undefined.
 * @param {object} [params.boundTolerance] - The tolerance in pixels for
 *   bound inclusion testing (default 1). This specifies by how many pixels
 *   an item's bounds may exceed the scale range bounds and not be culled.
 * @constructor
 */


function Overlap(params) {
  Transform.call(this, null, params);
}

var methods = {
  parity: function parity(items) {
    return items.filter(function (item, i) {
      return i % 2 ? item.opacity = 0 : 1;
    });
  },
  greedy: function greedy(items, sep) {
    var a;
    return items.filter(function (b, i) {
      return !i || !vega_view_transforms_module_intersect(a.bounds, b.bounds, sep) ? (a = b, 1) : b.opacity = 0;
    });
  }
}; // compute bounding box intersection
// including padding pixels of separation

var vega_view_transforms_module_intersect = function intersect(a, b, sep) {
  return sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
};

var hasOverlap = function hasOverlap(items, pad) {
  for (var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i) {
    if (vega_view_transforms_module_intersect(a, b = items[i].bounds, pad)) return true;
  }
};

var hasBounds = function hasBounds(item) {
  var b = item.bounds;
  return b.width() > 1 && b.height() > 1;
};

var boundTest = function boundTest(scale, orient, tolerance) {
  var range = scale.range(),
      b = new Bounds();

  if (orient === Top || orient === Bottom) {
    b.set(range[0], -Infinity, range[1], +Infinity);
  } else {
    b.set(-Infinity, range[0], +Infinity, range[1]);
  }

  b.expand(tolerance || 1);
  return function (item) {
    return b.encloses(item.bounds);
  };
}; // reset all items to be fully opaque


var vega_view_transforms_module_reset = function reset(source) {
  source.forEach(function (item) {
    return item.opacity = 1;
  });
  return source;
}; // add all tuples to mod, fork pulse if parameters were modified
// fork prevents cross-stream tuple pollution (e.g., pulse from scale)


var reflow = function reflow(pulse, _) {
  return pulse.reflow(_.modified()).modifies('opacity');
};

vega_util_module_inherits(Overlap, Transform, {
  transform: function transform(_, pulse) {
    var reduce = methods[_.method] || methods.parity,
        sep = _.separation || 0;
    var source = pulse.materialize(pulse.SOURCE).source,
        items,
        test;
    if (!source || !source.length) return;

    if (!_.method) {
      // early exit if method is falsy
      if (_.modified('method')) {
        vega_view_transforms_module_reset(source);
        pulse = reflow(pulse, _);
      }

      return pulse;
    } // skip labels with no content


    source = source.filter(hasBounds); // early exit, nothing to do

    if (!source.length) return;

    if (_.sort) {
      source = source.slice().sort(_.sort);
    }

    items = vega_view_transforms_module_reset(source);
    pulse = reflow(pulse, _);

    if (items.length >= 3 && hasOverlap(items, sep)) {
      do {
        items = reduce(items, sep);
      } while (items.length >= 3 && hasOverlap(items, sep));

      if (items.length < 3 && !peek(source).opacity) {
        if (items.length > 1) peek(items).opacity = 0;
        peek(source).opacity = 1;
      }
    }

    if (_.boundScale && _.boundTolerance >= 0) {
      test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
      source.forEach(function (item) {
        if (!test(item)) item.opacity = 0;
      });
    } // re-calculate mark bounds


    var bounds = items[0].mark.bounds.clear();
    source.forEach(function (item) {
      if (item.opacity) bounds.union(item.bounds);
    });
    return pulse;
  }
});
/**
 * Queue modified scenegraph items for rendering.
 * @constructor
 */

function Render(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Render, Transform, {
  transform: function transform(_, pulse) {
    var view = pulse.dataflow;
    pulse.visit(pulse.ALL, function (item) {
      return view.dirty(item);
    }); // set z-index dirty flag as needed

    if (pulse.fields && pulse.fields['zindex']) {
      var item = pulse.source && pulse.source[0];
      if (item) item.mark.zdirty = true;
    }
  }
});
var vega_view_transforms_module_tempBounds = new Bounds();

function vega_view_transforms_module_set(item, property, value) {
  return item[property] === value ? 0 : (item[property] = value, 1);
}

function isYAxis(mark) {
  var orient = mark.items[0].orient;
  return orient === Left || orient === Right;
}

function axisIndices(datum) {
  var index = +datum.grid;
  return [datum.ticks ? index++ : -1, // ticks index
  datum.labels ? index++ : -1, // labels index
  index + +datum.domain // title index
  ];
}

function axisLayout(view, axis, width, height) {
  var item = axis.items[0],
      datum = item.datum,
      delta = item.translate != null ? item.translate : 0.5,
      orient = item.orient,
      indices = axisIndices(datum),
      range = item.range,
      offset = item.offset,
      position = item.position,
      minExtent = item.minExtent,
      maxExtent = item.maxExtent,
      title = datum.title && item.items[indices[2]].items[0],
      titlePadding = item.titlePadding,
      bounds = item.bounds,
      dl = title && multiLineOffset(title),
      x = 0,
      y = 0,
      i,
      s;
  vega_view_transforms_module_tempBounds.clear().union(bounds);
  bounds.clear();
  if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
  if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds); // position axis group and title

  switch (orient) {
    case Top:
      x = position || 0;
      y = -offset;
      s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
      bounds.add(0, -s).add(range, 0);
      if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);
      break;

    case Left:
      x = -offset;
      y = position || 0;
      s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
      bounds.add(-s, 0).add(0, range);
      if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);
      break;

    case Right:
      x = width + offset;
      y = position || 0;
      s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
      bounds.add(0, 0).add(s, range);
      if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);
      break;

    case Bottom:
      x = position || 0;
      y = height + offset;
      s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
      bounds.add(0, 0).add(range, s);
      if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);
      break;

    default:
      x = item.x;
      y = item.y;
  } // update bounds


  boundStroke(bounds.translate(x, y), item);

  if (vega_view_transforms_module_set(item, 'x', x + delta) | vega_view_transforms_module_set(item, 'y', y + delta)) {
    item.bounds = vega_view_transforms_module_tempBounds;
    view.dirty(item);
    item.bounds = bounds;
    view.dirty(item);
  }

  return item.mark.bounds.clear().union(bounds);
}

function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {
  var b = title.bounds;

  if (title.auto) {
    var v = sign * (offset + dl + pad);
    var dx = 0,
        dy = 0;
    view.dirty(title);
    isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);
    title.mark.bounds.clear().union(b.translate(-dx, -dy));
    view.dirty(title);
  }

  bounds.union(b);
}

var vega_view_transforms_module_min = function min(a, b) {
  return Math.floor(Math.min(a, b));
};

var vega_view_transforms_module_max = function max(a, b) {
  return Math.ceil(Math.max(a, b));
};

function gridLayoutGroups(group) {
  var _views$rowheaders, _views$rowfooters, _views$colheaders, _views$colfooters, _views$marks;

  var groups = group.items,
      n = groups.length,
      i = 0,
      mark,
      items;
  var views = {
    marks: [],
    rowheaders: [],
    rowfooters: [],
    colheaders: [],
    colfooters: [],
    rowtitle: null,
    coltitle: null
  }; // layout axes, gather legends, collect bounds

  for (; i < n; ++i) {
    mark = groups[i];
    items = mark.items;

    if (mark.marktype === Group) {
      switch (mark.role) {
        case AxisRole:
        case LegendRole:
        case TitleRole:
          break;

        case RowHeader:
          (_views$rowheaders = views.rowheaders).push.apply(_views$rowheaders, (0,toConsumableArray/* default */.Z)(items));

          break;

        case RowFooter:
          (_views$rowfooters = views.rowfooters).push.apply(_views$rowfooters, (0,toConsumableArray/* default */.Z)(items));

          break;

        case ColHeader:
          (_views$colheaders = views.colheaders).push.apply(_views$colheaders, (0,toConsumableArray/* default */.Z)(items));

          break;

        case ColFooter:
          (_views$colfooters = views.colfooters).push.apply(_views$colfooters, (0,toConsumableArray/* default */.Z)(items));

          break;

        case RowTitle:
          views.rowtitle = items[0];
          break;

        case ColTitle:
          views.coltitle = items[0];
          break;

        default:
          (_views$marks = views.marks).push.apply(_views$marks, (0,toConsumableArray/* default */.Z)(items));

      }
    }
  }

  return views;
}

function bboxFlush(item) {
  return new Bounds().set(0, 0, item.width || 0, item.height || 0);
}

function bboxFull(item) {
  var b = item.bounds.clone();
  return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
}

function vega_view_transforms_module_get(opt, key, d) {
  var v = isObject(opt) ? opt[key] : opt;
  return v != null ? v : d !== undefined ? d : 0;
}

function offsetValue(v) {
  return v < 0 ? Math.ceil(-v) : 0;
}

function gridLayout(view, groups, opt) {
  var dirty = !opt.nodirty,
      bbox = opt.bounds === Flush ? bboxFlush : bboxFull,
      bounds = vega_view_transforms_module_tempBounds.set(0, 0, 0, 0),
      alignCol = vega_view_transforms_module_get(opt.align, Column),
      alignRow = vega_view_transforms_module_get(opt.align, Row),
      padCol = vega_view_transforms_module_get(opt.padding, Column),
      padRow = vega_view_transforms_module_get(opt.padding, Row),
      ncols = opt.columns || groups.length,
      nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols),
      n = groups.length,
      xOffset = Array(n),
      xExtent = Array(ncols),
      xMax = 0,
      yOffset = Array(n),
      yExtent = Array(nrows),
      yMax = 0,
      dx = Array(n),
      dy = Array(n),
      boxes = Array(n),
      m,
      i,
      c,
      r,
      b,
      g,
      px,
      py,
      x,
      y,
      offset;

  for (i = 0; i < ncols; ++i) {
    xExtent[i] = 0;
  }

  for (i = 0; i < nrows; ++i) {
    yExtent[i] = 0;
  } // determine offsets for each group


  for (i = 0; i < n; ++i) {
    g = groups[i];
    b = boxes[i] = bbox(g);
    g.x = g.x || 0;
    dx[i] = 0;
    g.y = g.y || 0;
    dy[i] = 0;
    c = i % ncols;
    r = ~~(i / ncols);
    xMax = Math.max(xMax, px = Math.ceil(b.x2));
    yMax = Math.max(yMax, py = Math.ceil(b.y2));
    xExtent[c] = Math.max(xExtent[c], px);
    yExtent[r] = Math.max(yExtent[r], py);
    xOffset[i] = padCol + offsetValue(b.x1);
    yOffset[i] = padRow + offsetValue(b.y1);
    if (dirty) view.dirty(groups[i]);
  } // set initial alignment offsets


  for (i = 0; i < n; ++i) {
    if (i % ncols === 0) xOffset[i] = 0;
    if (i < ncols) yOffset[i] = 0;
  } // enforce column alignment constraints


  if (alignCol === Each) {
    for (c = 1; c < ncols; ++c) {
      for (offset = 0, i = c; i < n; i += ncols) {
        if (offset < xOffset[i]) offset = xOffset[i];
      }

      for (i = c; i < n; i += ncols) {
        xOffset[i] = offset + xExtent[c - 1];
      }
    }
  } else if (alignCol === All) {
    for (offset = 0, i = 0; i < n; ++i) {
      if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
    }

    for (i = 0; i < n; ++i) {
      if (i % ncols) xOffset[i] = offset + xMax;
    }
  } else {
    for (alignCol = false, c = 1; c < ncols; ++c) {
      for (i = c; i < n; i += ncols) {
        xOffset[i] += xExtent[c - 1];
      }
    }
  } // enforce row alignment constraints


  if (alignRow === Each) {
    for (r = 1; r < nrows; ++r) {
      for (offset = 0, i = r * ncols, m = i + ncols; i < m; ++i) {
        if (offset < yOffset[i]) offset = yOffset[i];
      }

      for (i = r * ncols; i < m; ++i) {
        yOffset[i] = offset + yExtent[r - 1];
      }
    }
  } else if (alignRow === All) {
    for (offset = 0, i = ncols; i < n; ++i) {
      if (offset < yOffset[i]) offset = yOffset[i];
    }

    for (i = ncols; i < n; ++i) {
      yOffset[i] = offset + yMax;
    }
  } else {
    for (alignRow = false, r = 1; r < nrows; ++r) {
      for (i = r * ncols, m = i + ncols; i < m; ++i) {
        yOffset[i] += yExtent[r - 1];
      }
    }
  } // perform horizontal grid layout


  for (x = 0, i = 0; i < n; ++i) {
    x = xOffset[i] + (i % ncols ? x : 0);
    dx[i] += x - groups[i].x;
  } // perform vertical grid layout


  for (c = 0; c < ncols; ++c) {
    for (y = 0, i = c; i < n; i += ncols) {
      y += yOffset[i];
      dy[i] += y - groups[i].y;
    }
  } // perform horizontal centering


  if (alignCol && vega_view_transforms_module_get(opt.center, Column) && nrows > 1) {
    for (i = 0; i < n; ++i) {
      b = alignCol === All ? xMax : xExtent[i % ncols];
      x = b - boxes[i].x2 - groups[i].x - dx[i];
      if (x > 0) dx[i] += x / 2;
    }
  } // perform vertical centering


  if (alignRow && vega_view_transforms_module_get(opt.center, Row) && ncols !== 1) {
    for (i = 0; i < n; ++i) {
      b = alignRow === All ? yMax : yExtent[~~(i / ncols)];
      y = b - boxes[i].y2 - groups[i].y - dy[i];
      if (y > 0) dy[i] += y / 2;
    }
  } // position grid relative to anchor


  for (i = 0; i < n; ++i) {
    bounds.union(boxes[i].translate(dx[i], dy[i]));
  }

  x = vega_view_transforms_module_get(opt.anchor, X);
  y = vega_view_transforms_module_get(opt.anchor, Y);

  switch (vega_view_transforms_module_get(opt.anchor, Column)) {
    case End:
      x -= bounds.width();
      break;

    case Middle:
      x -= bounds.width() / 2;
  }

  switch (vega_view_transforms_module_get(opt.anchor, Row)) {
    case End:
      y -= bounds.height();
      break;

    case Middle:
      y -= bounds.height() / 2;
  }

  x = Math.round(x);
  y = Math.round(y); // update mark positions, bounds, dirty

  bounds.clear();

  for (i = 0; i < n; ++i) {
    groups[i].mark.bounds.clear();
  }

  for (i = 0; i < n; ++i) {
    g = groups[i];
    g.x += dx[i] += x;
    g.y += dy[i] += y;
    bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
    if (dirty) view.dirty(g);
  }

  return bounds;
}

function trellisLayout(view, group, opt) {
  var views = gridLayoutGroups(group),
      groups = views.marks,
      bbox = opt.bounds === Flush ? boundFlush : boundFull,
      off = opt.offset,
      ncols = opt.columns || groups.length,
      nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols),
      cells = nrows * ncols,
      x,
      y,
      x2,
      y2,
      anchor,
      band,
      offset; // -- initial grid layout

  var bounds = gridLayout(view, groups, opt);
  if (bounds.empty()) bounds.set(0, 0, 0, 0); // empty grid
  // -- layout grid headers and footers --
  // perform row header layout

  if (views.rowheaders) {
    band = vega_view_transforms_module_get(opt.headerBand, Row, null);
    x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -vega_view_transforms_module_get(off, 'rowHeader'), vega_view_transforms_module_min, 0, bbox, 'x1', 0, ncols, 1, band);
  } // perform column header layout


  if (views.colheaders) {
    band = vega_view_transforms_module_get(opt.headerBand, Column, null);
    y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -vega_view_transforms_module_get(off, 'columnHeader'), vega_view_transforms_module_min, 1, bbox, 'y1', 0, 1, ncols, band);
  } // perform row footer layout


  if (views.rowfooters) {
    band = vega_view_transforms_module_get(opt.footerBand, Row, null);
    x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, vega_view_transforms_module_get(off, 'rowFooter'), vega_view_transforms_module_max, 0, bbox, 'x2', ncols - 1, ncols, 1, band);
  } // perform column footer layout


  if (views.colfooters) {
    band = vega_view_transforms_module_get(opt.footerBand, Column, null);
    y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, vega_view_transforms_module_get(off, 'columnFooter'), vega_view_transforms_module_max, 1, bbox, 'y2', cells - ncols, 1, ncols, band);
  } // perform row title layout


  if (views.rowtitle) {
    anchor = vega_view_transforms_module_get(opt.titleAnchor, Row);
    offset = vega_view_transforms_module_get(off, 'rowTitle');
    offset = anchor === End ? x2 + offset : x - offset;
    band = vega_view_transforms_module_get(opt.titleBand, Row, 0.5);
    layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
  } // perform column title layout


  if (views.coltitle) {
    anchor = vega_view_transforms_module_get(opt.titleAnchor, Column);
    offset = vega_view_transforms_module_get(off, 'columnTitle');
    offset = anchor === End ? y2 + offset : y - offset;
    band = vega_view_transforms_module_get(opt.titleBand, Column, 0.5);
    layoutTitle(view, views.coltitle, offset, 1, bounds, band);
  }
}

function boundFlush(item, field) {
  return field === 'x1' ? item.x || 0 : field === 'y1' ? item.y || 0 : field === 'x2' ? (item.x || 0) + (item.width || 0) : field === 'y2' ? (item.y || 0) + (item.height || 0) : undefined;
}

function boundFull(item, field) {
  return item.bounds[field];
}

function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
  var n = groups.length,
      init = 0,
      edge = 0,
      i,
      j,
      k,
      m,
      b,
      h,
      g,
      x,
      y; // if no groups, early exit and return 0

  if (!n) return init; // compute margin

  for (i = start; i < n; i += stride) {
    if (groups[i]) init = agg(init, bound(groups[i], bf));
  } // if no headers, return margin calculation


  if (!headers.length) return init; // check if number of headers exceeds number of rows or columns

  if (headers.length > limit) {
    view.warn('Grid headers exceed limit: ' + limit);
    headers = headers.slice(0, limit);
  } // apply offset


  init += offset; // clear mark bounds for all headers

  for (j = 0, m = headers.length; j < m; ++j) {
    view.dirty(headers[j]);
    headers[j].mark.bounds.clear();
  } // layout each header


  for (i = start, j = 0, m = headers.length; j < m; ++j, i += stride) {
    h = headers[j];
    b = h.mark.bounds; // search for nearest group to align to
    // necessary if table has empty cells

    for (k = i; k >= 0 && (g = groups[k]) == null; k -= back) {
      ;
    } // assign coordinates and update bounds


    if (isX) {
      x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
      y = init;
    } else {
      x = init;
      y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
    }

    b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
    h.x = x;
    h.y = y;
    view.dirty(h); // update current edge of layout bounds

    edge = agg(edge, b[bf]);
  }

  return edge;
}

function layoutTitle(view, g, offset, isX, bounds, band) {
  if (!g) return;
  view.dirty(g); // compute title coordinates

  var x = offset,
      y = offset;
  isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height()); // assign coordinates and update bounds

  g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
  g.mark.bounds.clear().union(g.bounds);
  g.x = x;
  g.y = y; // queue title for redraw

  view.dirty(g);
}

function lookup$1(config, orient) {
  var opt = config[orient] || {};
  return function (key, d) {
    return opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
  };
} // if legends specify offset directly, use the maximum specified value


function offsets(legends, value) {
  var max = -Infinity;
  legends.forEach(function (item) {
    if (item.offset != null) max = Math.max(max, item.offset);
  });
  return max > -Infinity ? max : value;
}

function legendParams(g, orient, config, xb, yb, w, h) {
  var _ = lookup$1(config, orient),
      offset = offsets(g, _('offset', 0)),
      anchor = _('anchor', Start),
      mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;

  var p = {
    align: Each,
    bounds: _('bounds', Flush),
    columns: _('direction') === 'vertical' ? 1 : g.length,
    padding: _('margin', 8),
    center: _('center'),
    nodirty: true
  };

  switch (orient) {
    case Left:
      p.anchor = {
        x: Math.floor(xb.x1) - offset,
        column: End,
        y: mult * (h || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;

    case Right:
      p.anchor = {
        x: Math.ceil(xb.x2) + offset,
        y: mult * (h || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;

    case Top:
      p.anchor = {
        y: Math.floor(yb.y1) - offset,
        row: End,
        x: mult * (w || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;

    case Bottom:
      p.anchor = {
        y: Math.ceil(yb.y2) + offset,
        x: mult * (w || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;

    case TopLeft:
      p.anchor = {
        x: offset,
        y: offset
      };
      break;

    case TopRight:
      p.anchor = {
        x: w - offset,
        y: offset,
        column: End
      };
      break;

    case BottomLeft:
      p.anchor = {
        x: offset,
        y: h - offset,
        row: End
      };
      break;

    case BottomRight:
      p.anchor = {
        x: w - offset,
        y: h - offset,
        column: End,
        row: End
      };
      break;
  }

  return p;
}

function legendLayout(view, legend) {
  var item = legend.items[0],
      datum = item.datum,
      orient = item.orient,
      bounds = item.bounds,
      x = item.x,
      y = item.y,
      w,
      h; // cache current bounds for later comparison

  item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
  bounds.clear(); // adjust legend to accommodate padding and title

  legendGroupLayout(view, item, item.items[0].items[0]); // aggregate bounds to determine size, and include origin

  bounds = legendBounds(item, bounds);
  w = 2 * item.padding;
  h = 2 * item.padding;

  if (!bounds.empty()) {
    w = Math.ceil(bounds.width() + w);
    h = Math.ceil(bounds.height() + h);
  }

  if (datum.type === Symbols) {
    legendEntryLayout(item.items[0].items[0].items[0].items);
  }

  if (orient !== vega_view_transforms_module_None) {
    item.x = x = 0;
    item.y = y = 0;
  }

  item.width = w;
  item.height = h;
  boundStroke(bounds.set(x, y, x + w, y + h), item);
  item.mark.bounds.clear().union(bounds);
  return item;
}

function legendBounds(item, b) {
  // aggregate item bounds
  item.items.forEach(function (_) {
    return b.union(_.bounds);
  }); // anchor to legend origin

  b.x1 = item.padding;
  b.y1 = item.padding;
  return b;
}

function legendGroupLayout(view, item, entry) {
  var pad = item.padding,
      ex = pad - entry.x,
      ey = pad - entry.y;

  if (!item.datum.title) {
    if (ex || ey) vega_view_transforms_module_translate(view, entry, ex, ey);
  } else {
    var title = item.items[1].items[0],
        anchor = title.anchor,
        tpad = item.titlePadding || 0,
        tx = pad - title.x,
        ty = pad - title.y;

    switch (title.orient) {
      case Left:
        ex += Math.ceil(title.bounds.width()) + tpad;
        break;

      case Right:
      case Bottom:
        break;

      default:
        ey += title.bounds.height() + tpad;
    }

    if (ex || ey) vega_view_transforms_module_translate(view, entry, ex, ey);

    switch (title.orient) {
      case Left:
        ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
        break;

      case Right:
        tx += legendTitleOffset(item, entry, title, End, 0, 0) + tpad;
        ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
        break;

      case Bottom:
        tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
        ty += legendTitleOffset(item, entry, title, End, -1, 0, 1) + tpad;
        break;

      default:
        tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
    }

    if (tx || ty) vega_view_transforms_module_translate(view, title, tx, ty); // translate legend if title pushes into negative coordinates

    if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
      vega_view_transforms_module_translate(view, entry, -tx, 0);
      vega_view_transforms_module_translate(view, title, -tx, 0);
    }
  }
}

function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {
  var grad = item.datum.type !== 'symbol',
      vgrad = title.datum.vgrad,
      e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,
      s = e.bounds[y ? 'y2' : 'x2'] - item.padding,
      u = vgrad && lr ? s : 0,
      v = vgrad && lr ? 0 : s,
      o = y <= 0 ? 0 : multiLineOffset(title);
  return Math.round(anchor === Start ? u : anchor === End ? v - o : 0.5 * (s - o));
}

function vega_view_transforms_module_translate(view, item, dx, dy) {
  item.x += dx;
  item.y += dy;
  item.bounds.translate(dx, dy);
  item.mark.bounds.translate(dx, dy);
  view.dirty(item);
}

function legendEntryLayout(entries) {
  // get max widths for each column
  var widths = entries.reduce(function (w, g) {
    w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
    return w;
  }, {}); // set dimensions of legend entry groups

  entries.forEach(function (g) {
    g.width = widths[g.column];
    g.height = g.bounds.y2 - g.y;
  });
}

function titleLayout(view, mark, width, height, viewBounds) {
  var group = mark.items[0],
      frame = group.frame,
      orient = group.orient,
      anchor = group.anchor,
      offset = group.offset,
      padding = group.padding,
      title = group.items[0].items[0],
      subtitle = group.items[1] && group.items[1].items[0],
      end = orient === Left || orient === Right ? height : width,
      start = 0,
      x = 0,
      y = 0,
      sx = 0,
      sy = 0,
      pos;

  if (frame !== Group) {
    orient === Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
  } else if (orient === Left) {
    start = height, end = 0;
  }

  pos = anchor === Start ? start : anchor === End ? end : (start + end) / 2;

  if (subtitle && subtitle.text) {
    // position subtitle
    switch (orient) {
      case Top:
      case Bottom:
        sy = title.bounds.height() + padding;
        break;

      case Left:
        sx = title.bounds.width() + padding;
        break;

      case Right:
        sx = -title.bounds.width() - padding;
        break;
    }

    vega_view_transforms_module_tempBounds.clear().union(subtitle.bounds);
    vega_view_transforms_module_tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));

    if (vega_view_transforms_module_set(subtitle, 'x', sx) | vega_view_transforms_module_set(subtitle, 'y', sy)) {
      view.dirty(subtitle);
      subtitle.bounds.clear().union(vega_view_transforms_module_tempBounds);
      subtitle.mark.bounds.clear().union(vega_view_transforms_module_tempBounds);
      view.dirty(subtitle);
    }

    vega_view_transforms_module_tempBounds.clear().union(subtitle.bounds);
  } else {
    vega_view_transforms_module_tempBounds.clear();
  }

  vega_view_transforms_module_tempBounds.union(title.bounds); // position title group

  switch (orient) {
    case Top:
      x = pos;
      y = viewBounds.y1 - vega_view_transforms_module_tempBounds.height() - offset;
      break;

    case Left:
      x = viewBounds.x1 - vega_view_transforms_module_tempBounds.width() - offset;
      y = pos;
      break;

    case Right:
      x = viewBounds.x2 + vega_view_transforms_module_tempBounds.width() + offset;
      y = pos;
      break;

    case Bottom:
      x = pos;
      y = viewBounds.y2 + offset;
      break;

    default:
      x = group.x;
      y = group.y;
  }

  if (vega_view_transforms_module_set(group, 'x', x) | vega_view_transforms_module_set(group, 'y', y)) {
    vega_view_transforms_module_tempBounds.translate(x, y);
    view.dirty(group);
    group.bounds.clear().union(vega_view_transforms_module_tempBounds);
    mark.bounds.clear().union(vega_view_transforms_module_tempBounds);
    view.dirty(group);
  }

  return group.bounds;
}
/**
 * Layout view elements such as axes and legends.
 * Also performs size adjustments.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.mark - Scenegraph mark of groups to layout.
 */


function ViewLayout(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(ViewLayout, Transform, {
  transform: function transform(_, pulse) {
    var view = pulse.dataflow;

    _.mark.items.forEach(function (group) {
      if (_.layout) trellisLayout(view, group, _.layout);
      layoutGroup(view, group, _);
    });

    return shouldReflow(_.mark.group) ? pulse.reflow() : pulse;
  }
});

function shouldReflow(group) {
  // We typically should reflow if layout is invoked (#2568), as child items
  // may have resized and reflow ensures group bounds are re-calculated.
  // However, legend entries have a special exception to avoid instability.
  // For example, if a selected legend symbol gains a stroke on hover,
  // we don't want to re-position subsequent elements in the legend.
  return group && group.mark.role !== 'legend-entry';
}

function layoutGroup(view, group, _) {
  var items = group.items,
      width = Math.max(0, group.width || 0),
      height = Math.max(0, group.height || 0),
      viewBounds = new Bounds().set(0, 0, width, height),
      xBounds = viewBounds.clone(),
      yBounds = viewBounds.clone(),
      legends = [],
      title,
      mark,
      orient,
      b,
      i,
      n; // layout axes, gather legends, collect bounds

  for (i = 0, n = items.length; i < n; ++i) {
    mark = items[i];

    switch (mark.role) {
      case AxisRole:
        b = isYAxis(mark) ? xBounds : yBounds;
        b.union(axisLayout(view, mark, width, height));
        break;

      case TitleRole:
        title = mark;
        break;

      case LegendRole:
        legends.push(legendLayout(view, mark));
        break;

      case FrameRole:
      case ScopeRole:
      case RowHeader:
      case RowFooter:
      case RowTitle:
      case ColHeader:
      case ColFooter:
      case ColTitle:
        xBounds.union(mark.bounds);
        yBounds.union(mark.bounds);
        break;

      default:
        viewBounds.union(mark.bounds);
    }
  } // layout legends, adjust viewBounds


  if (legends.length) {
    // group legends by orient
    var l = {};
    legends.forEach(function (item) {
      orient = item.orient || Right;
      if (orient !== vega_view_transforms_module_None) (l[orient] || (l[orient] = [])).push(item);
    }); // perform grid layout for each orient group

    for (var _orient in l) {
      var g = l[_orient];
      gridLayout(view, g, legendParams(g, _orient, _.legends, xBounds, yBounds, width, height));
    } // update view bounds


    legends.forEach(function (item) {
      var b = item.bounds;

      if (!b.equals(item._bounds)) {
        item.bounds = item._bounds;
        view.dirty(item); // dirty previous location

        item.bounds = b;
        view.dirty(item);
      }

      if (_.autosize && _.autosize.type === Fit) {
        // For autosize fit, incorporate the orthogonal dimension only.
        // Legends that overrun the chart area will then be clipped;
        // otherwise the chart area gets reduced to nothing!
        switch (item.orient) {
          case Left:
          case Right:
            viewBounds.add(b.x1, 0).add(b.x2, 0);
            break;

          case Top:
          case Bottom:
            viewBounds.add(0, b.y1).add(0, b.y2);
        }
      } else {
        viewBounds.union(b);
      }
    });
  } // combine bounding boxes


  viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds

  if (title) {
    viewBounds.union(titleLayout(view, title, width, height, viewBounds));
  } // override aggregated view bounds if content is clipped


  if (group.clip) {
    viewBounds.set(0, 0, group.width || 0, group.height || 0);
  } // perform size adjustment


  viewSizeLayout(view, group, viewBounds, _);
}

function viewSizeLayout(view, group, viewBounds, _) {
  var auto = _.autosize || {},
      type = auto.type;
  if (view._autosize < 1 || !type) return;
  var viewWidth = view._width,
      viewHeight = view._height,
      width = Math.max(0, group.width || 0),
      left = Math.max(0, Math.ceil(-viewBounds.x1)),
      height = Math.max(0, group.height || 0),
      top = Math.max(0, Math.ceil(-viewBounds.y1));
  var right = Math.max(0, Math.ceil(viewBounds.x2 - width)),
      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));

  if (auto.contains === Padding) {
    var padding = view.padding();
    viewWidth -= padding.left + padding.right;
    viewHeight -= padding.top + padding.bottom;
  }

  if (type === vega_view_transforms_module_None) {
    left = 0;
    top = 0;
    width = viewWidth;
    height = viewHeight;
  } else if (type === Fit) {
    width = Math.max(0, viewWidth - left - right);
    height = Math.max(0, viewHeight - top - bottom);
  } else if (type === FitX) {
    width = Math.max(0, viewWidth - left - right);
    viewHeight = height + top + bottom;
  } else if (type === FitY) {
    viewWidth = width + left + right;
    height = Math.max(0, viewHeight - top - bottom);
  } else if (type === Pad) {
    viewWidth = width + left + right;
    viewHeight = height + top + bottom;
  }

  view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);
}


;// CONCATENATED MODULE: ./node_modules/vega-encode/node_modules/d3-array/src/sum.js
function sum_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = sum_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function sum_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return sum_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return sum_arrayLikeToArray(o, minLen); }

function sum_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sum(values, valueof) {
  var sum = 0;

  if (valueof === undefined) {
    var _iterator = sum_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value = +value) {
          sum += value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = sum_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if (_value = +valueof(_value, ++index, values)) {
          sum += _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return sum;
}
;// CONCATENATED MODULE: ./node_modules/vega-encode/node_modules/d3-array/src/range.js
/* harmony default export */ function d3_array_src_range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/vega-encode/build/vega-encode.module.js





/**
 * Generates axis ticks for visualizing a spatial scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate ticks for.
 * @param {*} [params.count=10] - The approximate number of ticks, or
 *   desired tick interval, to use.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {function(*):string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid d3 4.0 format specifier.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */

function AxisTicks(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(AxisTicks, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !_.modified()) {
      return pulse.StopPropagation;
    }

    var locale = pulse.dataflow.locale(),
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        ticks = this.value,
        scale = _.scale,
        tally = _.count == null ? _.values ? _.values.length : 10 : _.count,
        count = tickCount(scale, tally, _.minstep),
        format = _.format || vega_scale_module_tickFormat(locale, scale, count, _.formatSpecifier, _.formatType, !!_.values),
        values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);
    if (ticks) out.rem = ticks;
    ticks = values.map(function (value, i) {
      return ingest$1({
        index: i / (values.length - 1 || 1),
        value: value,
        label: format(value)
      });
    });

    if (_.extra && ticks.length) {
      // add an extra tick pegged to the initial domain value
      // this is used to generate axes with 'binned' domains
      ticks.push(ingest$1({
        index: -1,
        extra: {
          value: ticks[0].value
        },
        label: ''
      }));
    }

    out.source = ticks;
    out.add = ticks;
    this.value = ticks;
    return out;
  }
});
/**
 * Joins a set of data elements against a set of visual items.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): object} [params.item] - An item generator function.
 * @param {function(object): *} [params.key] - The key field associating data and visual items.
 */

function DataJoin(params) {
  Transform.call(this, null, params);
}

function defaultItemCreate() {
  return ingest$1({});
}

function newMap(key) {
  var map = fastmap().test(function (t) {
    return t.exit;
  });

  map.lookup = function (t) {
    return map.get(key(t));
  };

  return map;
}

vega_util_module_inherits(DataJoin, Transform, {
  transform: function transform(_, pulse) {
    var df = pulse.dataflow,
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        item = _.item || defaultItemCreate,
        key = _.key || tupleid,
        map = this.value; // prevent transient (e.g., hover) requests from
    // cascading across marks derived from marks

    if (isArray(out.encode)) {
      out.encode = null;
    }

    if (map && (_.modified('key') || pulse.modified(key))) {
      error('DataJoin does not support modified key function or fields.');
    }

    if (!map) {
      pulse = pulse.addAll();
      this.value = map = newMap(key);
    }

    pulse.visit(pulse.ADD, function (t) {
      var k = key(t);
      var x = map.get(k);

      if (x) {
        if (x.exit) {
          map.empty--;
          out.add.push(x);
        } else {
          out.mod.push(x);
        }
      } else {
        x = item(t);
        map.set(k, x);
        out.add.push(x);
      }

      x.datum = t;
      x.exit = false;
    });
    pulse.visit(pulse.MOD, function (t) {
      var k = key(t),
          x = map.get(k);

      if (x) {
        x.datum = t;
        out.mod.push(x);
      }
    });
    pulse.visit(pulse.REM, function (t) {
      var k = key(t),
          x = map.get(k);

      if (t === x.datum && !x.exit) {
        out.rem.push(x);
        x.exit = true;
        ++map.empty;
      }
    });
    if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');

    if (pulse.clean() || _.clean && map.empty > df.cleanThreshold) {
      df.runAfter(map.clean);
    }

    return out;
  }
});
/**
 * Invokes encoding functions for visual items.
 * @constructor
 * @param {object} params - The parameters to the encoding functions. This
 *   parameter object will be passed through to all invoked encoding functions.
 * @param {object} [params.mod=false] - Flag indicating if tuples in the input
 *   mod set that are unmodified by encoders should be included in the output.
 * @param {object} param.encoders - The encoding functions
 * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
 * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
 * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
 */

function Encode(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(Encode, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ADD_REM),
        fmod = _.mod || false,
        encoders = _.encoders,
        encode = pulse.encode; // if an array, the encode directive includes additional sets
    // that must be defined in order for the primary set to be invoked
    // e.g., only run the update set if the hover set is defined

    if (isArray(encode)) {
      if (out.changed() || encode.every(function (e) {
        return encoders[e];
      })) {
        encode = encode[0];
        out.encode = null; // consume targeted encode directive
      } else {
        return pulse.StopPropagation;
      }
    } // marshall encoder functions


    var reenter = encode === 'enter',
        update = encoders.update || falsy,
        enter = encoders.enter || falsy,
        exit = encoders.exit || falsy,
        set = (encode && !reenter ? encoders[encode] : update) || falsy;

    if (pulse.changed(pulse.ADD)) {
      pulse.visit(pulse.ADD, function (t) {
        enter(t, _);
        update(t, _);
      });
      out.modifies(enter.output);
      out.modifies(update.output);

      if (set !== falsy && set !== update) {
        pulse.visit(pulse.ADD, function (t) {
          set(t, _);
        });
        out.modifies(set.output);
      }
    }

    if (pulse.changed(pulse.REM) && exit !== falsy) {
      pulse.visit(pulse.REM, function (t) {
        exit(t, _);
      });
      out.modifies(exit.output);
    }

    if (reenter || set !== falsy) {
      var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);

      if (reenter) {
        pulse.visit(flag, function (t) {
          var mod = enter(t, _) || fmod;
          if (set(t, _) || mod) out.mod.push(t);
        });
        if (out.mod.length) out.modifies(enter.output);
      } else {
        pulse.visit(flag, function (t) {
          if (set(t, _) || fmod) out.mod.push(t);
        });
      }

      if (out.mod.length) out.modifies(set.output);
    }

    return out.changed() ? out : pulse.StopPropagation;
  }
});
/**
 * Generates legend entries for visualizing a scale.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Scale} params.scale - The scale to generate items for.
 * @param {*} [params.count=5] - The approximate number of items, or
 *   desired tick interval, to use.
 * @param {*} [params.limit] - The maximum number of entries to
 *   include in a symbol legend.
 * @param {Array<*>} [params.values] - The exact tick values to use.
 *   These must be legal domain values for the provided scale.
 *   If provided, the count argument is ignored.
 * @param {string} [params.formatSpecifier] - A format specifier
 *   to use in conjunction with scale.tickFormat. Legal values are
 *   any valid D3 format specifier string.
 * @param {function(*):string} [params.format] - The format function to use.
 *   If provided, the formatSpecifier argument is ignored.
 */

function LegendEntries(params) {
  Transform.call(this, [], params);
}

vega_util_module_inherits(LegendEntries, Transform, {
  transform: function transform(_, pulse) {
    if (this.value != null && !_.modified()) {
      return pulse.StopPropagation;
    }

    var locale = pulse.dataflow.locale(),
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        items = this.value,
        type = _.type || SymbolLegend,
        scale = _.scale,
        limit = +_.limit,
        count = tickCount(scale, _.count == null ? 5 : _.count, _.minstep),
        lskip = !!_.values || type === SymbolLegend,
        format = _.format || labelFormat(locale, scale, count, type, _.formatSpecifier, _.formatType, lskip),
        values = _.values || labelValues(scale, count),
        domain,
        fraction,
        size,
        offset,
        ellipsis;
    if (items) out.rem = items;

    if (type === SymbolLegend) {
      if (limit && values.length > limit) {
        pulse.dataflow.warn('Symbol legend count exceeds limit, filtering items.');
        items = values.slice(0, limit - 1);
        ellipsis = true;
      } else {
        items = values;
      }

      if (isFunction(size = _.size)) {
        // if first value maps to size zero, remove from list (vega#717)
        if (!_.values && scale(items[0]) === 0) {
          items = items.slice(1);
        } // compute size offset for legend entries


        offset = items.reduce(function (max, value) {
          return Math.max(max, size(value, _));
        }, 0);
      } else {
        size = vega_util_module_constant(offset = size || 8);
      }

      items = items.map(function (value, index) {
        return ingest$1({
          index: index,
          label: format(value, index, items),
          value: value,
          offset: offset,
          size: size(value, _)
        });
      });

      if (ellipsis) {
        ellipsis = values[items.length];
        items.push(ingest$1({
          index: items.length,
          label: "\u2026".concat(values.length - items.length, " entries"),
          value: ellipsis,
          offset: offset,
          size: size(ellipsis, _)
        }));
      }
    } else if (type === GradientLegend) {
      domain = scale.domain(), fraction = scaleFraction(scale, domain[0], peek(domain)); // if automatic label generation produces 2 or fewer values,
      // use the domain end points instead (fixes vega/vega#1364)

      if (values.length < 3 && !_.values && domain[0] !== peek(domain)) {
        values = [domain[0], peek(domain)];
      }

      items = values.map(function (value, index) {
        return ingest$1({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: fraction(value)
        });
      });
    } else {
      size = values.length - 1;
      fraction = labelFraction(scale);
      items = values.map(function (value, index) {
        return ingest$1({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: index ? fraction(value) : 0,
          perc2: index === size ? 1 : fraction(values[index + 1])
        });
      });
    }

    out.source = items;
    out.add = items;
    this.value = items;
    return out;
  }
});

var sourceX = function sourceX(t) {
  return t.source.x;
};

var sourceY = function sourceY(t) {
  return t.source.y;
};

var targetX = function targetX(t) {
  return t.target.x;
};

var targetY = function targetY(t) {
  return t.target.y;
};
/**
 * Layout paths linking source and target elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */


function LinkPath(params) {
  Transform.call(this, {}, params);
}

LinkPath.Definition = {
  'type': 'LinkPath',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'sourceX',
    'type': 'field',
    'default': 'source.x'
  }, {
    'name': 'sourceY',
    'type': 'field',
    'default': 'source.y'
  }, {
    'name': 'targetX',
    'type': 'field',
    'default': 'target.x'
  }, {
    'name': 'targetY',
    'type': 'field',
    'default': 'target.y'
  }, {
    'name': 'orient',
    'type': 'enum',
    'default': 'vertical',
    'values': ['horizontal', 'vertical', 'radial']
  }, {
    'name': 'shape',
    'type': 'enum',
    'default': 'line',
    'values': ['line', 'arc', 'curve', 'diagonal', 'orthogonal']
  }, {
    'name': 'require',
    'type': 'signal'
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'path'
  }]
};
vega_util_module_inherits(LinkPath, Transform, {
  transform: function transform(_, pulse) {
    var sx = _.sourceX || sourceX,
        sy = _.sourceY || sourceY,
        tx = _.targetX || targetX,
        ty = _.targetY || targetY,
        as = _.as || 'path',
        orient = _.orient || 'vertical',
        shape = _.shape || 'line',
        path = Paths.get(shape + '-' + orient) || Paths.get(shape);

    if (!path) {
      error('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));
    }

    pulse.visit(pulse.SOURCE, function (t) {
      t[as] = path(sx(t), sy(t), tx(t), ty(t));
    });
    return pulse.reflow(_.modified()).modifies(as);
  }
});

var vega_encode_module_line = function line(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;
};

var lineR = function lineR(sa, sr, ta, tr) {
  return vega_encode_module_line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
};

var vega_encode_module_arc = function arc(sx, sy, tx, ty) {
  var dx = tx - sx,
      dy = ty - sy,
      rr = Math.sqrt(dx * dx + dy * dy) / 2,
      ra = 180 * Math.atan2(dy, dx) / Math.PI;
  return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;
};

var arcR = function arcR(sa, sr, ta, tr) {
  return vega_encode_module_arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
};

var curve = function curve(sx, sy, tx, ty) {
  var dx = tx - sx,
      dy = ty - sy,
      ix = 0.2 * (dx + dy),
      iy = 0.2 * (dy - dx);
  return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;
};

var curveR = function curveR(sa, sr, ta, tr) {
  return curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
};

var orthoX = function orthoX(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;
};

var orthoY = function orthoY(sx, sy, tx, ty) {
  return 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;
};

var orthoR = function orthoR(sa, sr, ta, tr) {
  var sc = Math.cos(sa),
      ss = Math.sin(sa),
      tc = Math.cos(ta),
      ts = Math.sin(ta),
      sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
  return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;
};

var diagonalX = function diagonalX(sx, sy, tx, ty) {
  var m = (sx + tx) / 2;
  return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;
};

var diagonalY = function diagonalY(sx, sy, tx, ty) {
  var m = (sy + ty) / 2;
  return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;
};

var diagonalR = function diagonalR(sa, sr, ta, tr) {
  var sc = Math.cos(sa),
      ss = Math.sin(sa),
      tc = Math.cos(ta),
      ts = Math.sin(ta),
      mr = (sr + tr) / 2;
  return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;
};

var Paths = fastmap({
  'line': vega_encode_module_line,
  'line-radial': lineR,
  'arc': vega_encode_module_arc,
  'arc-radial': arcR,
  'curve': curve,
  'curve-radial': curveR,
  'orthogonal-horizontal': orthoX,
  'orthogonal-vertical': orthoY,
  'orthogonal-radial': orthoR,
  'diagonal-horizontal': diagonalX,
  'diagonal-vertical': diagonalY,
  'diagonal-radial': diagonalR
});
/**
 * Pie and donut chart layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size pie segments.
 * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
 * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
 * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
 */

function Pie(params) {
  Transform.call(this, null, params);
}

Pie.Definition = {
  'type': 'Pie',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'startAngle',
    'type': 'number',
    'default': 0
  }, {
    'name': 'endAngle',
    'type': 'number',
    'default': 6.283185307179586
  }, {
    'name': 'sort',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['startAngle', 'endAngle']
  }]
};
vega_util_module_inherits(Pie, Transform, {
  transform: function transform(_, pulse) {
    var as = _.as || ['startAngle', 'endAngle'],
        startAngle = as[0],
        endAngle = as[1],
        field = _.field || one,
        start = _.startAngle || 0,
        stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,
        data = pulse.source,
        values = data.map(field),
        n = values.length,
        a = start,
        k = (stop - start) / sum(values),
        index = d3_array_src_range(n),
        i,
        t,
        v;

    if (_.sort) {
      index.sort(function (a, b) {
        return values[a] - values[b];
      });
    }

    for (i = 0; i < n; ++i) {
      v = values[index[i]];
      t = data[index[i]];
      t[startAngle] = a;
      t[endAngle] = a += v * k;
    }

    this.value = values;
    return pulse.reflow(_.modified()).modifies(as);
  }
});
var DEFAULT_COUNT = 5;

function includeZero(scale) {
  var type = scale.type;
  return !scale.bins && (type === vega_scale_module_Linear || type === Pow || type === Sqrt);
}

function includePad(type) {
  return isContinuous(type) && type !== Sequential;
}

var vega_encode_module_SKIP = toSet(['set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount', 'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins', 'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma']);
/**
 * Maintains a scale function mapping data values to visual channels.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */

function Scale(params) {
  Transform.call(this, null, params);
  this.modified(true); // always treat as modified
}

vega_util_module_inherits(Scale, Transform, {
  transform: function transform(_, pulse) {
    var df = pulse.dataflow,
        scale$1 = this.value,
        key = scaleKey(_);

    if (!scale$1 || key !== scale$1.type) {
      this.value = scale$1 = vega_scale_module_scale(key)();
    }

    for (key in _) {
      if (!vega_encode_module_SKIP[key]) {
        // padding is a scale property for band/point but not others
        if (key === 'padding' && includePad(scale$1.type)) continue; // invoke scale property setter, raise warning if not found

        isFunction(scale$1[key]) ? scale$1[key](_[key]) : df.warn('Unsupported scale property: ' + key);
      }
    }

    configureRange(scale$1, _, configureBins(scale$1, _, configureDomain(scale$1, _, df)));
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
  }
});

function scaleKey(_) {
  var t = _.type,
      d = '',
      n; // backwards compatibility pre Vega 5.

  if (t === Sequential) return Sequential + '-' + vega_scale_module_Linear;

  if (isContinuousColor(_)) {
    n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
    d = n === 2 ? Sequential + '-' : n === 3 ? Diverging + '-' : '';
  }

  return (d + t || vega_scale_module_Linear).toLowerCase();
}

function isContinuousColor(_) {
  var t = _.type;
  return isContinuous(t) && t !== Time && t !== UTC && (_.scheme || _.range && _.range.length && _.range.every(isString));
}

function configureDomain(scale, _, df) {
  // check raw domain, if provided use that and exit early
  var raw = rawDomain(scale, _.domainRaw, df);
  if (raw > -1) return raw;
  var domain = _.domain,
      type = scale.type,
      zero = _.zero || _.zero === undefined && includeZero(scale),
      n,
      mid;
  if (!domain) return 0; // adjust continuous domain for minimum pixel padding

  if (includePad(type) && _.padding && domain[0] !== peek(domain)) {
    domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
  } // adjust domain based on zero, min, max settings


  if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
    n = (domain = domain.slice()).length - 1 || 1;

    if (zero) {
      if (domain[0] > 0) domain[0] = 0;
      if (domain[n] < 0) domain[n] = 0;
    }

    if (_.domainMin != null) domain[0] = _.domainMin;
    if (_.domainMax != null) domain[n] = _.domainMax;

    if (_.domainMid != null) {
      mid = _.domainMid;
      var i = mid > domain[n] ? n + 1 : mid < domain[0] ? 0 : n;
      if (i !== n) df.warn('Scale domainMid exceeds domain min or max.', mid);
      domain.splice(i, 0, mid);
    }
  } // set the scale domain


  scale.domain(domainCheck(type, domain, df)); // if ordinal scale domain is defined, prevent implicit
  // domain construction as side-effect of scale lookup

  if (type === Ordinal) {
    scale.unknown(_.domainImplicit ? implicit : undefined);
  } // perform 'nice' adjustment as requested


  if (_.nice && scale.nice) {
    scale.nice(_.nice !== true && tickCount(scale, _.nice) || null);
  } // return the cardinality of the domain


  return domain.length;
}

function rawDomain(scale, raw, df) {
  if (raw) {
    scale.domain(domainCheck(scale.type, raw, df));
    return raw.length;
  } else {
    return -1;
  }
}

function padDomain(type, domain, range, pad, exponent, constant) {
  var span = Math.abs(peek(range) - range[0]),
      frac = span / (span - 2 * pad),
      d = type === Log ? zoomLog(domain, null, frac) : type === Sqrt ? zoomPow(domain, null, frac, 0.5) : type === Pow ? zoomPow(domain, null, frac, exponent || 1) : type === Symlog ? zoomSymlog(domain, null, frac, constant || 1) : zoomLinear(domain, null, frac);
  domain = domain.slice();
  domain[0] = d[0];
  domain[domain.length - 1] = d[1];
  return domain;
}

function domainCheck(type, domain, df) {
  if (isLogarithmic(type)) {
    // sum signs of domain values
    // if all pos or all neg, abs(sum) === domain.length
    var s = Math.abs(domain.reduce(function (s, v) {
      return s + (v < 0 ? -1 : v > 0 ? 1 : 0);
    }, 0));

    if (s !== domain.length) {
      df.warn('Log scale domain includes zero: ' + $(domain));
    }
  }

  return domain;
}

function configureBins(scale, _, count) {
  var bins = _.bins;

  if (bins && !isArray(bins)) {
    // generate bin boundary array
    var domain = scale.domain(),
        lo = domain[0],
        hi = peek(domain),
        step = bins.step;
    var start = bins.start == null ? lo : bins.start,
        stop = bins.stop == null ? hi : bins.stop;
    if (!step) error('Scale bins parameter missing step property.');
    if (start < lo) start = step * Math.ceil(lo / step);
    if (stop > hi) stop = step * Math.floor(hi / step);
    bins = d3_array_src_range(start, stop + step / 2, step);
  }

  if (bins) {
    // assign bin boundaries to scale instance
    scale.bins = bins;
  } else if (scale.bins) {
    // no current bins, remove bins if previously set
    delete scale.bins;
  } // special handling for bin-ordinal scales


  if (scale.type === BinOrdinal) {
    if (!bins) {
      // the domain specifies the bins
      scale.bins = scale.domain();
    } else if (!_.domain && !_.domainRaw) {
      // the bins specify the domain
      scale.domain(bins);
      count = bins.length;
    }
  } // return domain cardinality


  return count;
}

function configureRange(scale, _, count) {
  var type = scale.type,
      round = _.round || false,
      range = _.range; // if range step specified, calculate full range extent

  if (_.rangeStep != null) {
    range = configureRangeStep(type, _, count);
  } // else if a range scheme is defined, use that
  else if (_.scheme) {
      range = configureScheme(type, _, count);

      if (isFunction(range)) {
        if (scale.interpolator) {
          return scale.interpolator(range);
        } else {
          error("Scale type ".concat(type, " does not support interpolating color schemes."));
        }
      }
    } // given a range array for an interpolating scale, convert to interpolator


  if (range && isInterpolating(type)) {
    return scale.interpolator(interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma));
  } // configure rounding / interpolation


  if (range && _.interpolate && scale.interpolate) {
    scale.interpolate(interpolate(_.interpolate, _.interpolateGamma));
  } else if (isFunction(scale.round)) {
    scale.round(round);
  } else if (isFunction(scale.rangeRound)) {
    scale.interpolate(round ? src_round : value);
  }

  if (range) scale.range(flip(range, _.reverse));
}

function configureRangeStep(type, _, count) {
  if (type !== Band && type !== Point) {
    error('Only band and point scales support rangeStep.');
  } // calculate full range based on requested step size and padding


  var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,
      inner = type === Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
  return [0, _.rangeStep * bandSpace(count, inner, outer)];
}

function configureScheme(type, _, count) {
  var extent = _.schemeExtent,
      name,
      scheme$1;

  if (isArray(_.scheme)) {
    scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
  } else {
    name = _.scheme.toLowerCase();
    scheme$1 = scheme(name);
    if (!scheme$1) error("Unrecognized scheme name: ".concat(_.scheme));
  } // determine size for potential discrete range


  count = type === Threshold ? count + 1 : type === BinOrdinal ? count - 1 : type === vega_scale_module_Quantile || type === Quantize ? +_.schemeCount || DEFAULT_COUNT : count; // adjust and/or quantize scheme as appropriate

  return isInterpolating(type) ? adjustScheme(scheme$1, extent, _.reverse) : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent), count) : type === Ordinal ? scheme$1 : scheme$1.slice(0, count);
}

function adjustScheme(scheme, extent, reverse) {
  return isFunction(scheme) && (extent || reverse) ? interpolateRange(scheme, flip(extent || [0, 1], reverse)) : scheme;
}

function flip(array, reverse) {
  return reverse ? array.slice().reverse() : array;
}
/**
 * Sorts scenegraph items in the pulse source array.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(*,*): number} [params.sort] - A comparator
 *   function for sorting tuples.
 */


function SortItems(params) {
  Transform.call(this, null, params);
}

vega_util_module_inherits(SortItems, Transform, {
  transform: function transform(_, pulse) {
    var mod = _.modified('sort') || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified('datum');
    if (mod) pulse.source.sort(stableCompare(_.sort));
    this.modified(mod);
    return pulse;
  }
});
var Zero = 'zero',
    Center = 'center',
    Normalize = 'normalize',
    DefOutput = ['y0', 'y1'];
/**
 * Stack layout for visualization elements.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to stack.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
 * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.
 */

function Stack(params) {
  Transform.call(this, null, params);
}

Stack.Definition = {
  'type': 'Stack',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'offset',
    'type': 'enum',
    'default': Zero,
    'values': [Zero, Center, Normalize]
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': DefOutput
  }]
};
vega_util_module_inherits(Stack, Transform, {
  transform: function transform(_, pulse) {
    var as = _.as || DefOutput,
        y0 = as[0],
        y1 = as[1],
        sort = stableCompare(_.sort),
        field = _.field || one,
        stack = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero,
        groups,
        i,
        n,
        max; // partition, sum, and sort the stack groups

    groups = vega_encode_module_partition(pulse.source, _.groupby, sort, field); // compute stack layouts per group

    for (i = 0, n = groups.length, max = groups.max; i < n; ++i) {
      stack(groups[i], max, field, y0, y1);
    }

    return pulse.reflow(_.modified()).modifies(as);
  }
});

function stackCenter(group, max, field, y0, y1) {
  var last = (max - group.sum) / 2,
      m = group.length,
      j = 0,
      t;

  for (; j < m; ++j) {
    t = group[j];
    t[y0] = last;
    t[y1] = last += Math.abs(field(t));
  }
}

function stackNormalize(group, max, field, y0, y1) {
  var scale = 1 / group.sum,
      last = 0,
      m = group.length,
      j = 0,
      v = 0,
      t;

  for (; j < m; ++j) {
    t = group[j];
    t[y0] = last;
    t[y1] = last = scale * (v += Math.abs(field(t)));
  }
}

function stackZero(group, max, field, y0, y1) {
  var lastPos = 0,
      lastNeg = 0,
      m = group.length,
      j = 0,
      v,
      t;

  for (; j < m; ++j) {
    t = group[j];
    v = +field(t);

    if (v < 0) {
      t[y0] = lastNeg;
      t[y1] = lastNeg += v;
    } else {
      t[y0] = lastPos;
      t[y1] = lastPos += v;
    }
  }
}

function vega_encode_module_partition(data, groupby, sort, field) {
  var groups = [],
      get = function get(f) {
    return f(t);
  },
      map,
      i,
      n,
      m,
      t,
      k,
      g,
      s,
      max; // partition data points into stack groups


  if (groupby == null) {
    groups.push(data.slice());
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        groups.push(g);
      }

      g.push(t);
    }
  } // compute sums of groups, sort groups as needed


  for (k = 0, max = 0, m = groups.length; k < m; ++k) {
    g = groups[k];

    for (i = 0, s = 0, n = g.length; i < n; ++i) {
      s += Math.abs(field(g[i]));
    }

    g.sum = s;
    if (s > max) max = s;
    if (sort) g.sort(sort);
  }

  groups.max = max;
  return groups;
}


;// CONCATENATED MODULE: ./node_modules/vega-geo/node_modules/d3-array/src/ticks.js
var node_modules_d3_array_src_ticks_e10 = Math.sqrt(50),
    node_modules_d3_array_src_ticks_e5 = Math.sqrt(10),
    node_modules_d3_array_src_ticks_e2 = Math.sqrt(2);
/* harmony default export */ function vega_geo_node_modules_d3_array_src_ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = node_modules_d3_array_src_ticks_tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function node_modules_d3_array_src_ticks_tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= node_modules_d3_array_src_ticks_e10 ? 10 : error >= node_modules_d3_array_src_ticks_e5 ? 5 : error >= node_modules_d3_array_src_ticks_e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= node_modules_d3_array_src_ticks_e10 ? 10 : error >= node_modules_d3_array_src_ticks_e5 ? 5 : error >= node_modules_d3_array_src_ticks_e2 ? 2 : 1);
}
function node_modules_d3_array_src_ticks_tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= node_modules_d3_array_src_ticks_e10) step1 *= 10;else if (error >= node_modules_d3_array_src_ticks_e5) step1 *= 5;else if (error >= node_modules_d3_array_src_ticks_e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/vega-geo/node_modules/d3-array/src/range.js
/* harmony default export */ function node_modules_d3_array_src_range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/vega-geo/node_modules/d3-array/src/max.js
function src_max_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_max_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function src_max_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_max_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_max_arrayLikeToArray(o, minLen); }

function src_max_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function d3_array_src_max_max(values, valueof) {
  var max;

  if (valueof === undefined) {
    var _iterator = src_max_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value != null && (max < value || max === undefined && value >= value)) {
          max = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = src_max_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {
          max = _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return max;
}
;// CONCATENATED MODULE: ./node_modules/vega-geo/node_modules/d3-array/src/sum.js
function src_sum_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_sum_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function src_sum_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_sum_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_sum_arrayLikeToArray(o, minLen); }

function src_sum_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sum_sum(values, valueof) {
  var sum = 0;

  if (valueof === undefined) {
    var _iterator = src_sum_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value = +value) {
          sum += value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = src_sum_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if (_value = +valueof(_value, ++index, values)) {
          sum += _value;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return sum;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/identity.js
/* harmony default export */ var d3_geo_src_identity = (function (x) {
  return x;
});
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function Feature(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function FeatureCollection(object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) {
      streamGeometry(features[i].geometry, stream);
    }
  }
};
var streamGeometryType = {
  Sphere: function Sphere(object, stream) {
    stream.sphere();
  },
  Point: function Point(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function MultiPoint(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) {
      object = coordinates[i], stream.point(object[0], object[1], object[2]);
    }
  },
  LineString: function LineString(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function MultiLineString(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) {
      streamLine(coordinates[i], stream, 0);
    }
  },
  Polygon: function Polygon(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function MultiPolygon(object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) {
      streamPolygon(coordinates[i], stream);
    }
  },
  GeometryCollection: function GeometryCollection(object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) {
      streamGeometry(geometries[i], stream);
    }
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) {
    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  }

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) {
    streamLine(coordinates[i], stream, 1);
  }

  stream.polygonEnd();
}

/* harmony default export */ function src_stream(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/node_modules/d3-array/src/fsum.js



function fsum_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = fsum_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function fsum_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return fsum_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return fsum_arrayLikeToArray(o, minLen); }

function fsum_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
var Adder = /*#__PURE__*/function () {
  function Adder() {
    (0,classCallCheck/* default */.Z)(this, Adder);

    this._partials = new Float64Array(32);
    this._n = 0;
  }

  (0,createClass/* default */.Z)(Adder, [{
    key: "add",
    value: function add(x) {
      var p = this._partials;
      var i = 0;

      for (var j = 0; j < this._n && j < 32; j++) {
        var y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
        if (lo) p[i++] = lo;
        x = hi;
      }

      p[i] = x;
      this._n = i + 1;
      return this;
    }
  }, {
    key: "valueOf",
    value: function valueOf() {
      var p = this._partials;
      var n = this._n,
          x,
          y,
          lo,
          hi = 0;

      if (n > 0) {
        hi = p[--n];

        while (n > 0) {
          x = hi;
          y = p[--n];
          hi = x + y;
          lo = y - (hi - x);
          if (lo) break;
        }

        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
          y = lo * 2;
          x = hi + y;
          if (y == x - hi) hi = x;
        }
      }

      return hi;
    }
  }]);

  return Adder;
}();
function fsum(values, valueof) {
  var adder = new Adder();

  if (valueof === undefined) {
    var _iterator = fsum_createForOfIteratorHelper(values),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var value = _step.value;

        if (value = +value) {
          adder.add(value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    var index = -1;

    var _iterator2 = fsum_createForOfIteratorHelper(values),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _value = _step2.value;

        if (_value = +valueof(_value, ++index, values)) {
          adder.add(_value);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return +adder;
}
function fcumsum(values, valueof) {
  var adder = new Adder();
  var index = -1;
  return Float64Array.from(values, valueof === undefined ? function (v) {
    return adder.add(+v || 0);
  } : function (v) {
    return adder.add(+valueof(v, ++index, values) || 0);
  });
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.hypot.js
var es_math_hypot = __webpack_require__(25438);
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/math.js

var src_math_epsilon = 1e-6;
var math_epsilon2 = 1e-12;
var math_pi = Math.PI;
var math_halfPi = math_pi / 2;
var quarterPi = math_pi / 4;
var math_tau = math_pi * 2;
var src_math_degrees = 180 / math_pi;
var src_math_radians = math_pi / 180;
var math_abs = Math.abs;
var atan = Math.atan;
var math_atan2 = Math.atan2;
var math_cos = Math.cos;
var ceil = Math.ceil;
var math_exp = Math.exp;
var math_floor = Math.floor;
var hypot = Math.hypot;
var math_log = Math.log;
var math_pow = Math.pow;
var math_sin = Math.sin;
var math_sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var math_sqrt = Math.sqrt;
var tan = Math.tan;
function math_acos(x) {
  return x > 1 ? 0 : x < -1 ? math_pi : Math.acos(x);
}
function math_asin(x) {
  return x > 1 ? math_halfPi : x < -1 ? -math_halfPi : Math.asin(x);
}
function haversin(x) {
  return (x = math_sin(x / 2)) * x;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/noop.js
function noop_noop() {}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/area.js



var areaSum = new Adder(),
    areaRingSum = new Adder(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: noop_noop,
  lineStart: noop_noop,
  lineEnd: noop_noop,
  polygonStart: function polygonStart() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop_noop;
    areaSum.add(math_abs(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function result() {
    var area = areaSum / 2;
    areaSum = new Adder();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

/* harmony default export */ var path_area = (areaStream);
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/bounds.js

var bounds_x0 = Infinity,
    bounds_y0 = bounds_x0,
    x1 = -bounds_x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop_noop,
  lineEnd: noop_noop,
  polygonStart: noop_noop,
  polygonEnd: noop_noop,
  result: function result() {
    var bounds = [[bounds_x0, bounds_y0], [x1, y1]];
    x1 = y1 = -(bounds_y0 = bounds_x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < bounds_x0) bounds_x0 = x;
  if (x > x1) x1 = x;
  if (y < bounds_y0) bounds_y0 = y;
  if (y > y1) y1 = y;
}

/* harmony default export */ var path_bounds = (boundsStream);
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/centroid.js
 // TODO Enforce positive area for exterior, negative area for interior?

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    centroid_x00,
    centroid_y00,
    centroid_x0,
    centroid_y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function polygonStart() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function result() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(centroid_x0 = x, centroid_y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - centroid_x0,
      dy = y - centroid_y0,
      z = math_sqrt(dx * dx + dy * dy);
  X1 += z * (centroid_x0 + x) / 2;
  Y1 += z * (centroid_y0 + y) / 2;
  Z1 += z;
  centroidPoint(centroid_x0 = x, centroid_y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(centroid_x00, centroid_y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(centroid_x00 = centroid_x0 = x, centroid_y00 = centroid_y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - centroid_x0,
      dy = y - centroid_y0,
      z = math_sqrt(dx * dx + dy * dy);
  X1 += z * (centroid_x0 + x) / 2;
  Y1 += z * (centroid_y0 + y) / 2;
  Z1 += z;
  z = centroid_y0 * x - centroid_x0 * y;
  X2 += z * (centroid_x0 + x);
  Y2 += z * (centroid_y0 + y);
  Z2 += z * 3;
  centroidPoint(centroid_x0 = x, centroid_y0 = y);
}

/* harmony default export */ var centroid = (centroidStream);
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/context.js


function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function pointRadius(_) {
    return this._radius = _, this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, math_tau);

          break;
        }
    }
  },
  result: noop_noop
};
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/measure.js



var lengthSum = new Adder(),
    lengthRing,
    measure_x00,
    measure_y00,
    measure_x0,
    measure_y0;
var lengthStream = {
  point: noop_noop,
  lineStart: function lineStart() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function lineEnd() {
    if (lengthRing) lengthPoint(measure_x00, measure_y00);
    lengthStream.point = noop_noop;
  },
  polygonStart: function polygonStart() {
    lengthRing = true;
  },
  polygonEnd: function polygonEnd() {
    lengthRing = null;
  },
  result: function result() {
    var length = +lengthSum;
    lengthSum = new Adder();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  measure_x00 = measure_x0 = x, measure_y00 = measure_y0 = y;
}

function lengthPoint(x, y) {
  measure_x0 -= x, measure_y0 -= y;
  lengthSum.add(math_sqrt(measure_x0 * measure_x0 + measure_y0 * measure_y0));
  measure_x0 = x, measure_y0 = y;
}

/* harmony default export */ var path_measure = (lengthStream);
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: string_circle(4.5),
  pointRadius: function pointRadius(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function polygonStart() {
    this._line = 0;
  },
  polygonEnd: function polygonEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function point(x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = string_circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function result() {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function string_circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/index.js








/* harmony default export */ function d3_geo_src_path(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      src_stream(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    src_stream(object, projectionStream(path_area));
    return path_area.result();
  };

  path.measure = function (object) {
    src_stream(object, projectionStream(path_measure));
    return path_measure.result();
  };

  path.bounds = function (object) {
    src_stream(object, projectionStream(path_bounds));
    return path_bounds.result();
  };

  path.centroid = function (object) {
    src_stream(object, projectionStream(centroid));
    return centroid.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, d3_geo_src_identity) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/buffer.js

/* harmony default export */ function buffer() {
  var lines = [],
      line;
  return {
    point: function point(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function lineStart() {
      lines.push(line = []);
    },
    lineEnd: noop_noop,
    rejoin: function rejoin() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function result() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/pointEqual.js

/* harmony default export */ function pointEqual(a, b) {
  return math_abs(a[0] - b[0]) < src_math_epsilon && math_abs(a[1] - b[1]) < src_math_epsilon;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rejoin.js



function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


/* harmony default export */ function rejoin(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x;

    if (pointEqual(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();

        for (i = 0; i < n; ++i) {
          stream.point((p0 = segment[i])[0], p0[1]);
        }

        stream.lineEnd();
        return;
      } // handle degenerate cases by moving the point


      p1[0] += 2 * src_math_epsilon;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  rejoin_link(subject);
  rejoin_link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) {
      if ((current = current.n) === start) return;
    }

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) {
            stream.point((point = points[i])[0], point[1]);
          }
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function rejoin_link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/cartesian.js

function spherical(cartesian) {
  return [math_atan2(cartesian[1], cartesian[0]), math_asin(cartesian[2])];
}
function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = math_cos(phi);
  return [cosPhi * math_cos(lambda), cosPhi * math_sin(lambda), math_sin(phi)];
}
function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a

function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d

function cartesianNormalizeInPlace(d) {
  var l = math_sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/polygonContains.js




function longitude(point) {
  if (math_abs(point[0]) <= math_pi) return point[0];else return math_sign(point[0]) * ((math_abs(point[0]) + math_pi) % math_tau - math_pi);
}

/* harmony default export */ function polygonContains(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = math_sin(phi),
      normal = [math_sin(lambda), -math_cos(lambda), 0],
      angle = 0,
      winding = 0;
  var sum = new Adder();
  if (sinPhi === 1) phi = math_halfPi + src_math_epsilon;else if (sinPhi === -1) phi = -math_halfPi - src_math_epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = math_sin(phi0),
        cosPhi0 = math_cos(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = math_sin(phi1),
          cosPhi1 = math_cos(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > math_pi,
          k = sinPhi0 * sinPhi1;
      sum.add(math_atan2(k * sign * math_sin(absDelta), cosPhi0 * cosPhi1 + k * math_cos(absDelta)));
      angle += antimeridian ? delta + sign * math_tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * math_asin(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -src_math_epsilon || angle < src_math_epsilon && sum < -math_epsilon2) ^ winding & 1;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/node_modules/d3-array/src/merge.js


var merge_marked = /*#__PURE__*/regenerator_default().mark(flatten);

function merge_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = merge_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function merge_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return merge_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return merge_arrayLikeToArray(o, minLen); }

function merge_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function flatten(arrays) {
  var _iterator, _step, array;

  return regenerator_default().wrap(function flatten$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _iterator = merge_createForOfIteratorHelper(arrays);
          _context.prev = 1;

          _iterator.s();

        case 3:
          if ((_step = _iterator.n()).done) {
            _context.next = 8;
            break;
          }

          array = _step.value;
          return _context.delegateYield(array, "t0", 6);

        case 6:
          _context.next = 3;
          break;

        case 8:
          _context.next = 13;
          break;

        case 10:
          _context.prev = 10;
          _context.t1 = _context["catch"](1);

          _iterator.e(_context.t1);

        case 13:
          _context.prev = 13;

          _iterator.f();

          return _context.finish(13);

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, merge_marked, null, [[1, 10, 13, 16]]);
}

function merge_merge(arrays) {
  return Array.from(flatten(arrays));
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/index.js





/* harmony default export */ function src_clip(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = buffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function polygonEnd() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge_merge(segments);
        var startInside = polygonContains(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          rejoin(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function sphere() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) {
            sink.point((point = segment[i])[0], point[1]);
          }

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - math_halfPi - src_math_epsilon : math_halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - math_halfPi - src_math_epsilon : math_halfPi - b[1]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/antimeridian.js


/* harmony default export */ var antimeridian = (src_clip(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-math_pi, -math_halfPi])); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      _clean; // no intersections


  return {
    lineStart: function lineStart() {
      stream.lineStart();
      _clean = 1;
    },
    point: function point(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? math_pi : -math_pi,
          delta = math_abs(lambda1 - lambda0);

      if (math_abs(delta - math_pi) < src_math_epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? math_halfPi : -math_halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        _clean = 0;
      } else if (sign0 !== sign1 && delta >= math_pi) {
        // line crosses antimeridian
        if (math_abs(lambda0 - sign0) < src_math_epsilon) lambda0 -= sign0 * src_math_epsilon; // handle degeneracies

        if (math_abs(lambda1 - sign1) < src_math_epsilon) lambda1 -= sign1 * src_math_epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        _clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function lineEnd() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function clean() {
      return 2 - _clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = math_sin(lambda0 - lambda1);
  return math_abs(sinLambda0Lambda1) > src_math_epsilon ? atan((math_sin(phi0) * (cosPhi1 = math_cos(phi1)) * math_sin(lambda1) - math_sin(phi1) * (cosPhi0 = math_cos(phi0)) * math_sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * math_halfPi;
    stream.point(-math_pi, phi);
    stream.point(0, phi);
    stream.point(math_pi, phi);
    stream.point(math_pi, 0);
    stream.point(math_pi, -phi);
    stream.point(0, -phi);
    stream.point(-math_pi, -phi);
    stream.point(-math_pi, 0);
    stream.point(-math_pi, phi);
  } else if (math_abs(from[0] - to[0]) > src_math_epsilon) {
    var lambda = from[0] < to[0] ? math_pi : -math_pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/circle.js



 // Generates a circle centered at [0°, 0°], with a given radius and precision.

function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = math_cos(radius),
      sinRadius = math_sin(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * math_tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * math_tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * math_cos(t), -sinRadius * math_sin(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = math_acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + math_tau - src_math_epsilon) % math_tau;
}

/* harmony default export */ function src_circle() {
  var center = constant([0, 0]),
      radius = constant(90),
      precision = constant(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees, x[1] *= degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * radians,
        p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
  };

  return circle;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/circle.js





/* harmony default export */ function clip_circle(radius) {
  var cr = math_cos(radius),
      delta = 6 * src_math_radians,
      smallRadius = cr > 0,
      notHemisphere = math_abs(cr) > src_math_epsilon; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return math_cos(lambda) * math_cos(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    _clean; // no intersections


    return {
      lineStart: function lineStart() {
        v00 = v0 = false;
        _clean = 1;
      },
      point: function point(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? math_pi : -math_pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();

        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;
        }

        if (v !== v0) {
          _clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            _clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }

        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function lineEnd() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function clean() {
        return _clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);
    if (t2 < 0) return;
    var t = math_sqrt(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
    var delta = lambda1 - lambda0,
        polar = math_abs(delta - math_pi) < src_math_epsilon,
        meridian = polar || delta < src_math_epsilon;
    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (math_abs(q[0] - lambda0) < src_math_epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > math_pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : math_pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return src_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-math_pi, radius - math_pi]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/line.js
/* harmony default export */ function clip_line(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rectangle.js





var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do {
        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      } while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return math_abs(p[0] - x0) < src_math_epsilon ? direction > 0 ? 0 : 3 : math_abs(p[0] - x1) < src_math_epsilon ? direction > 0 ? 2 : 1 : math_abs(p[1] - y0) < src_math_epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = buffer(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = merge_merge(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          rejoin(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if (clip_line(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/compose.js
/* harmony default export */ function compose(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/rotation.js



function rotationIdentity(lambda, phi) {
  return [math_abs(lambda) > math_pi ? lambda + Math.round(-lambda / math_tau) * math_tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;
function rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= math_tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > math_pi ? lambda - math_tau : lambda < -math_pi ? lambda + math_tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = math_cos(deltaPhi),
      sinDeltaPhi = math_sin(deltaPhi),
      cosDeltaGamma = math_cos(deltaGamma),
      sinDeltaGamma = math_sin(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = math_cos(phi),
        x = math_cos(lambda) * cosPhi,
        y = math_sin(lambda) * cosPhi,
        z = math_sin(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [math_atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), math_asin(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = math_cos(phi),
        x = math_cos(lambda) * cosPhi,
        y = math_sin(lambda) * cosPhi,
        z = math_sin(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [math_atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), math_asin(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

/* harmony default export */ function rotation(rotate) {
  rotate = rotation_rotateRadians(rotate[0] * src_math_radians, rotate[1] * src_math_radians, rotate.length > 2 ? rotate[2] * src_math_radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * src_math_radians, coordinates[1] * src_math_radians);
    return coordinates[0] *= src_math_degrees, coordinates[1] *= src_math_degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * src_math_radians, coordinates[1] * src_math_radians);
    return coordinates[0] *= src_math_degrees, coordinates[1] *= src_math_degrees, coordinates;
  };

  return forward;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/transform.js
/* harmony default export */ function src_transform(methods) {
  return {
    stream: transform_transformer(methods)
  };
}
function transform_transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) {
      s[key] = methods[key];
    }

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function point(x, y) {
    this.stream.point(x, y);
  },
  sphere: function sphere() {
    this.stream.sphere();
  },
  lineStart: function lineStart() {
    this.stream.lineStart();
  },
  lineEnd: function lineEnd() {
    this.stream.lineEnd();
  },
  polygonStart: function polygonStart() {
    this.stream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    this.stream.polygonEnd();
  }
};
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/fit.js



function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  src_stream(object, projection.stream(path_bounds));
  fitBounds(path_bounds.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}
function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/resample.js



var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = math_cos(30 * src_math_radians); // cos(minimum angular distance)

/* harmony default export */ function resample(project, delta2) {
  return +delta2 ? resample_resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return transform_transformer({
    point: function point(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample_resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = math_sqrt(a * a + b * b + c * c),
          phi2 = math_asin(c /= m),
          lambda2 = math_abs(math_abs(c) - 1) < src_math_epsilon || math_abs(lambda0 - lambda1) < src_math_epsilon ? (lambda0 + lambda1) / 2 : math_atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || math_abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function polygonStart() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function polygonEnd() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/index.js










var transformRadians = transform_transformer({
  point: function point(x, y) {
    this.stream.point(x * src_math_radians, y * src_math_radians);
  }
});

function transformRotate(rotate) {
  return transform_transformer({
    point: function point(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
  var cosAlpha = math_cos(alpha),
      sinAlpha = math_sin(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate angle
  sx = 1,
      // reflectX
  sy = 1,
      // reflectX
  theta = null,
      preclip = antimeridian,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = d3_geo_src_identity,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * src_math_radians, point[1] * src_math_radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * src_math_degrees, point[1] * src_math_degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? clip_circle(theta = _ * src_math_radians) : (theta = null, antimeridian), reset()) : theta * src_math_degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, d3_geo_src_identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * src_math_radians, phi = _[1] % 360 * src_math_radians, recenter()) : [lambda * src_math_degrees, phi * src_math_degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * src_math_radians, deltaPhi = _[1] % 360 * src_math_radians, deltaGamma = _.length > 2 ? _[2] % 360 * src_math_radians : 0, recenter()) : [deltaLambda * src_math_degrees, deltaPhi * src_math_degrees, deltaGamma * src_math_degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * src_math_radians, recenter()) : alpha * src_math_degrees;
  };

  projection.reflectX = function (_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };

  projection.reflectY = function (_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : math_sqrt(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return fitSize(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return fitWidth(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return fitHeight(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose(project, transform);
    projectRotateTransform = compose(rotate, projectTransform);
    projectResample = resample(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conic.js


function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = math_pi / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * src_math_radians, phi1 = _[1] * src_math_radians) : [phi0 * src_math_degrees, phi1 * src_math_degrees];
  };

  return p;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/cylindricalEqualArea.js

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = math_cos(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, math_sin(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, math_asin(y * cosPhi0)];
  };

  return forward;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicEqualArea.js



function conicEqualAreaRaw(y0, y1) {
  var sy0 = math_sin(y0),
      n = (sy0 + math_sin(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if (math_abs(n) < src_math_epsilon) return cylindricalEqualAreaRaw(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = math_sqrt(c) / n;

  function project(x, y) {
    var r = math_sqrt(c - 2 * n * math_sin(y)) / n;
    return [r * math_sin(x *= n), r0 - r * math_cos(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y,
        l = math_atan2(x, math_abs(r0y)) * math_sign(r0y);
    if (r0y * n < 0) l -= math_pi * math_sign(x) * math_sign(r0y);
    return [l / n, math_asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}
/* harmony default export */ function conicEqualArea() {
  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/albers.js

/* harmony default export */ function albers() {
  return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/albersUsa.js



 // The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.

function multiplex(streams) {
  var n = streams.length;
  return {
    point: function point(x, y) {
      var i = -1;

      while (++i < n) {
        streams[i].point(x, y);
      }
    },
    sphere: function sphere() {
      var i = -1;

      while (++i < n) {
        streams[i].sphere();
      }
    },
    lineStart: function lineStart() {
      var i = -1;

      while (++i < n) {
        streams[i].lineStart();
      }
    },
    lineEnd: function lineEnd() {
      var i = -1;

      while (++i < n) {
        streams[i].lineEnd();
      }
    },
    polygonStart: function polygonStart() {
      var i = -1;

      while (++i < n) {
        streams[i].polygonStart();
      }
    },
    polygonEnd: function polygonEnd() {
      var i = -1;

      while (++i < n) {
        streams[i].polygonEnd();
      }
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


/* harmony default export */ function albersUsa() {
  var cache,
      cacheStream,
      lower48 = albers(),
      lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  _point,
      pointStream = {
    point: function point(x, y) {
      _point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + src_math_epsilon, y + 0.120 * k + src_math_epsilon], [x - 0.214 * k - src_math_epsilon, y + 0.234 * k - src_math_epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + src_math_epsilon, y + 0.166 * k + src_math_epsilon], [x - 0.115 * k - src_math_epsilon, y + 0.234 * k - src_math_epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return fitExtent(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return fitSize(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return fitWidth(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return fitHeight(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthal.js

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = math_cos(x),
        cy = math_cos(y),
        k = scale(cx * cy);
    if (k === Infinity) return [2, 0];
    return [k * cy * math_sin(x), k * math_sin(y)];
  };
}
function azimuthalInvert(angle) {
  return function (x, y) {
    var z = math_sqrt(x * x + y * y),
        c = angle(z),
        sc = math_sin(c),
        cc = math_cos(c);
    return [math_atan2(x * sc, z * cc), math_asin(z && y * sc / z)];
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthalEqualArea.js



var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
  return math_sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
  return 2 * math_asin(z / 2);
});
/* harmony default export */ function azimuthalEqualArea() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthalEquidistant.js



var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
  return (c = math_acos(c)) && c / math_sin(c);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
  return z;
});
/* harmony default export */ function azimuthalEquidistant() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/mercator.js



function mercatorRaw(lambda, phi) {
  return [lambda, math_log(tan((math_halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * atan(math_exp(y)) - math_halfPi];
};

/* harmony default export */ function mercator() {
  return mercatorProjection(mercatorRaw).scale(961 / math_tau);
}
function mercatorProjection(project) {
  var m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = math_pi * scale(),
        t = m(rotation(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicConformal.js




function tany(y) {
  return tan((math_halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = math_cos(y0),
      n = y0 === y1 ? math_sin(y0) : math_log(cy0 / math_cos(y1)) / math_log(tany(y1) / tany(y0)),
      f = cy0 * math_pow(tany(y0), n) / n;
  if (!n) return mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -math_halfPi + src_math_epsilon) y = -math_halfPi + src_math_epsilon;
    } else {
      if (y > math_halfPi - src_math_epsilon) y = math_halfPi - src_math_epsilon;
    }

    var r = f / math_pow(tany(y), n);
    return [r * math_sin(n * x), f - r * math_cos(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = math_sign(n) * math_sqrt(x * x + fy * fy),
        l = math_atan2(x, math_abs(fy)) * math_sign(fy);
    if (fy * n < 0) l -= math_pi * math_sign(x) * math_sign(fy);
    return [l / n, 2 * atan(math_pow(f / r, 1 / n)) - math_halfPi];
  };

  return project;
}
/* harmony default export */ function conicConformal() {
  return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/equirectangular.js

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;
/* harmony default export */ function equirectangular() {
  return projection(equirectangularRaw).scale(152.63);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicEquidistant.js



function conicEquidistantRaw(y0, y1) {
  var cy0 = math_cos(y0),
      n = y0 === y1 ? math_sin(y0) : (cy0 - math_cos(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if (math_abs(n) < src_math_epsilon) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * math_sin(nx), g - gy * math_cos(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y,
        l = math_atan2(x, math_abs(gy)) * math_sign(gy);
    if (gy * n < 0) l -= math_pi * math_sign(x) * math_sign(gy);
    return [l / n, g - math_sign(n) * math_sqrt(x * x + gy * gy)];
  };

  return project;
}
/* harmony default export */ function conicEquidistant() {
  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/equalEarth.js


var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = math_sqrt(3) / 2,
    iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l = math_asin(M * math_sin(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * math_cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (math_abs(delta) < math_epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / math_cos(l), math_asin(math_sin(l) / M)];
};

/* harmony default export */ function equalEarth() {
  return projection(equalEarthRaw).scale(177.158);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/gnomonic.js



function gnomonicRaw(x, y) {
  var cy = math_cos(y),
      k = math_cos(x) * cy;
  return [cy * math_sin(x) / k, math_sin(y) / k];
}
gnomonicRaw.invert = azimuthalInvert(atan);
/* harmony default export */ function gnomonic() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/identity.js





/* harmony default export */ function projection_identity() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      // scale, translate and reflect
  alpha = 0,
      ca,
      sa,
      // angle
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  kx = 1,
      ky = 1,
      transform = transform_transformer({
    point: function point(x, y) {
      var p = projection([x, y]);
      this.stream.point(p[0], p[1]);
    }
  }),
      postclip = d3_geo_src_identity,
      cache,
      cacheStream;

  function reset() {
    kx = k * sx;
    ky = k * sy;
    cache = cacheStream = null;
    return projection;
  }

  function projection(p) {
    var x = p[0] * kx,
        y = p[1] * ky;

    if (alpha) {
      var t = y * ca - x * sa;
      x = x * ca + y * sa;
      y = t;
    }

    return [x + tx, y + ty];
  }

  projection.invert = function (p) {
    var x = p[0] - tx,
        y = p[1] - ty;

    if (alpha) {
      var t = y * ca + x * sa;
      x = x * ca - y * sa;
      y = t;
    }

    return [x / kx, y / ky];
  };

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, d3_geo_src_identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, reset()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * src_math_radians, sa = math_sin(alpha), ca = math_cos(alpha), reset()) : alpha * src_math_degrees;
  };

  projection.reflectX = function (_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };

  projection.reflectY = function (_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };

  projection.fitExtent = function (extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return fitSize(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return fitWidth(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return fitHeight(projection, height, object);
  };

  return projection;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/naturalEarth1.js


function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while (math_abs(delta) > src_math_epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

/* harmony default export */ function naturalEarth1() {
  return projection(naturalEarth1Raw).scale(175.295);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/orthographic.js



function orthographicRaw(x, y) {
  return [math_cos(y) * math_sin(x), math_sin(y)];
}
orthographicRaw.invert = azimuthalInvert(math_asin);
/* harmony default export */ function orthographic() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + src_math_epsilon);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/stereographic.js



function stereographicRaw(x, y) {
  var cy = math_cos(y),
      k = 1 + math_cos(x) * cy;
  return [cy * math_sin(x) / k, math_sin(y) / k];
}
stereographicRaw.invert = azimuthalInvert(function (z) {
  return 2 * atan(z);
});
/* harmony default export */ function stereographic() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/transverseMercator.js


function transverseMercatorRaw(lambda, phi) {
  return [math_log(tan((math_halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * atan(math_exp(x)) - math_halfPi];
};

/* harmony default export */ function transverseMercator() {
  var m = mercatorProjection(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
;// CONCATENATED MODULE: ./node_modules/d3-geo-projection/src/math.js
var src_math_abs = Math.abs;
var math_atan = Math.atan;
var src_math_atan2 = Math.atan2;
var math_ceil = Math.ceil;
var src_math_cos = Math.cos;
var src_math_exp = Math.exp;
var src_math_floor = Math.floor;
var src_math_log = Math.log;
var src_math_max = Math.max;
var src_math_min = Math.min;
var src_math_pow = Math.pow;
var round = Math.round;
var src_math_sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var src_math_sin = Math.sin;
var math_tan = Math.tan;
var d3_geo_projection_src_math_epsilon = 1e-6;
var src_math_epsilon2 = 1e-12;
var src_math_pi = Math.PI;
var src_math_halfPi = src_math_pi / 2;
var math_quarterPi = src_math_pi / 4;
var sqrt1_2 = Math.SQRT1_2;
var sqrt2 = src_math_sqrt(2);
var sqrtPi = src_math_sqrt(src_math_pi);
var src_math_tau = src_math_pi * 2;
var d3_geo_projection_src_math_degrees = 180 / src_math_pi;
var d3_geo_projection_src_math_radians = src_math_pi / 180;
function sinci(x) {
  return x ? x / Math.sin(x) : 1;
}
function src_math_asin(x) {
  return x > 1 ? src_math_halfPi : x < -1 ? -src_math_halfPi : Math.asin(x);
}
function src_math_acos(x) {
  return x > 1 ? 0 : x < -1 ? src_math_pi : Math.acos(x);
}
function src_math_sqrt(x) {
  return x > 0 ? Math.sqrt(x) : 0;
}
function math_tanh(x) {
  x = src_math_exp(2 * x);
  return (x - 1) / (x + 1);
}
function math_sinh(x) {
  return (src_math_exp(x) - src_math_exp(-x)) / 2;
}
function math_cosh(x) {
  return (src_math_exp(x) + src_math_exp(-x)) / 2;
}
function arsinh(x) {
  return src_math_log(x + src_math_sqrt(x * x + 1));
}
function arcosh(x) {
  return src_math_log(x + src_math_sqrt(x * x - 1));
}
;// CONCATENATED MODULE: ./node_modules/d3-geo-projection/src/mollweide.js


function mollweideBromleyTheta(cp, phi) {
  var cpsinPhi = cp * src_math_sin(phi),
      i = 30,
      delta;

  do {
    phi -= delta = (phi + src_math_sin(phi) - cpsinPhi) / (1 + src_math_cos(phi));
  } while (src_math_abs(delta) > d3_geo_projection_src_math_epsilon && --i > 0);

  return phi / 2;
}
function mollweideBromleyRaw(cx, cy, cp) {
  function forward(lambda, phi) {
    return [cx * lambda * src_math_cos(phi = mollweideBromleyTheta(cp, phi)), cy * src_math_sin(phi)];
  }

  forward.invert = function (x, y) {
    return y = src_math_asin(y / cy), [x / (cx * src_math_cos(y)), src_math_asin((2 * y + src_math_sin(2 * y)) / cp)];
  };

  return forward;
}
var mollweideRaw = mollweideBromleyRaw(sqrt2 / src_math_halfPi, sqrt2, src_math_pi);
/* harmony default export */ function mollweide() {
  return projection(mollweideRaw).scale(169.529);
}
;// CONCATENATED MODULE: ./node_modules/vega-projection/build/vega-projection.module.js


var defaultPath = d3_geo_src_path();
var projectionProperties = [// standard properties in d3-geo
'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections
'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
/**
 * Augment projections with their type and a copy method.
 */

function vega_projection_module_create(type, constructor) {
  return function projection() {
    var p = constructor();
    p.type = type;
    p.path = d3_geo_src_path().projection(p);

    p.copy = p.copy || function () {
      var c = projection();
      projectionProperties.forEach(function (prop) {
        if (p[prop]) c[prop](p[prop]());
      });
      c.path.pointRadius(p.path.pointRadius());
      return c;
    };

    return p;
  };
}

function vega_projection_module_projection(type, proj) {
  if (!type || typeof type !== 'string') {
    throw new Error('Projection type must be a name string.');
  }

  type = type.toLowerCase();

  if (arguments.length > 1) {
    projections[type] = vega_projection_module_create(type, proj);
    return this;
  } else {
    return projections[type] || null;
  }
}

function getProjectionPath(proj) {
  return proj && proj.path || defaultPath;
}

var projections = {
  // base d3-geo projection types
  albers: albers,
  albersusa: albersUsa,
  azimuthalequalarea: azimuthalEqualArea,
  azimuthalequidistant: azimuthalEquidistant,
  conicconformal: conicConformal,
  conicequalarea: conicEqualArea,
  conicequidistant: conicEquidistant,
  equalEarth: equalEarth,
  equirectangular: equirectangular,
  gnomonic: gnomonic,
  identity: projection_identity,
  mercator: mercator,
  mollweide: mollweide,
  naturalEarth1: naturalEarth1,
  orthographic: orthographic,
  stereographic: stereographic,
  transversemercator: transverseMercator
};

for (var vega_projection_module_key in projections) {
  vega_projection_module_projection(vega_projection_module_key, projections[vega_projection_module_key]);
}


;// CONCATENATED MODULE: ./node_modules/d3-geo/node_modules/d3-array/src/range.js
/* harmony default export */ function d3_geo_node_modules_d3_array_src_range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/graticule.js



function graticuleX(y0, y1, dy) {
  var y = d3_geo_node_modules_d3_array_src_range(y0, y1 - src_math_epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = d3_geo_node_modules_d3_array_src_range(x0, x1 - src_math_epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return d3_geo_node_modules_d3_array_src_range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3_geo_node_modules_d3_array_src_range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3_geo_node_modules_d3_array_src_range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
      return math_abs(x % DX) > src_math_epsilon;
    }).map(x)).concat(d3_geo_node_modules_d3_array_src_range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
      return math_abs(y % DY) > src_math_epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + src_math_epsilon], [180, 90 - src_math_epsilon]]).extentMinor([[-180, -80 - src_math_epsilon], [180, 80 + src_math_epsilon]]);
}
function graticule10() {
  return graticule()();
}
;// CONCATENATED MODULE: ./node_modules/vega-geo/build/vega-geo.module.js










function vega_geo_module_noop() {}

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []]; // Implementation adapted from d3/d3-contour. Thanks!

function contours() {
  var dx = 1,
      dy = 1,
      smooth = smoothLinear;

  function contours(values, tz) {
    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if (vega_geo_module_area(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: 'MultiPolygon',
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.floor(_[0]),
        _1 = Math.floor(_[1]);

    if (!(_0 >= 0 && _1 >= 0)) error('invalid size');
    return dx = _0, dy = _1, contours;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : vega_geo_module_noop, contours) : smooth === smoothLinear;
  };

  return contours;
}

function vega_geo_module_area(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) {
    area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  }

  return area;
}

function contains(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) {
    if (c = ringContains(ring, hole[i])) return c;
  }

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}

function vega_geo_module_quantize(k, nice, zero) {
  return function (values) {
    var ex = extent(values),
        start = zero ? Math.min(ex[0], 0) : ex[0],
        stop = ex[1],
        span = stop - start,
        step = nice ? node_modules_d3_array_src_ticks_tickStep(start, stop, k) : span / (k + 1);
    return node_modules_d3_array_src_range(start + step, stop, step);
  };
}
/**
 * Generate isocontours (level sets) based on input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   specified, the levels, nice, resolve, and zero parameters are ignored.
 * @param {number} [params.levels] - The desired number of contour levels.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified levels.
 * @param {string} [params.resolve] - The method for resolving thresholds
 *   across multiple input grids. If 'independent' (the default), threshold
 *   calculation will be performed separately for each grid. If 'shared', a
 *   single set of threshold values will be used for all input grids.
 * @param {boolean} [params.zero] - Boolean flag indicating if the contour
 *   threshold values should include zero.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 * @param {boolean} [params.scale] - Optional numerical value by which to
 *   scale the output isocontour coordinates. This parameter can be useful
 *   to scale the contours to match a desired output resolution.
 * @param {string} [params.as='contour'] - The output field in which to store
 *   the generated isocontour data (default 'contour').
 */


function Isocontour(params) {
  Transform.call(this, null, params);
}

Isocontour.Definition = {
  'type': 'Isocontour',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'thresholds',
    'type': 'number',
    'array': true
  }, {
    'name': 'levels',
    'type': 'number'
  }, {
    'name': 'nice',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'resolve',
    'type': 'enum',
    'values': ['shared', 'independent'],
    'default': 'independent'
  }, {
    'name': 'zero',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'smooth',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'scale',
    'type': 'number',
    'expr': true
  }, {
    'name': 'translate',
    'type': 'number',
    'array': true,
    'expr': true
  }, {
    'name': 'as',
    'type': 'string',
    'null': true,
    'default': 'contour'
  }]
};
vega_util_module_inherits(Isocontour, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        source = pulse.materialize(pulse.SOURCE).source,
        field = _.field || identity,
        contour = contours().smooth(_.smooth !== false),
        tz = _.thresholds || levels(source, field, _),
        as = _.as === null ? null : _.as || 'contour',
        values = [];
    source.forEach(function (t) {
      var grid = field(t); // generate contour paths in GeoJSON format

      var paths = contour.size([grid.width, grid.height])(grid.values, isArray(tz) ? tz : tz(grid.values)); // adjust contour path coordinates as needed

      transformPaths(paths, grid, t, _); // ingest; copy source data properties to output

      paths.forEach(function (p) {
        values.push(rederive(t, ingest$1(as != null ? (0,defineProperty/* default */.Z)({}, as, p) : p)));
      });
    });
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = values;
    return out;
  }
});

function levels(values, f, _) {
  var q = vega_geo_module_quantize(_.levels || 10, _.nice, _.zero !== false);
  return _.resolve !== 'shared' ? q : q(values.map(function (t) {
    return d3_array_src_max_max(f(t).values);
  }));
}

function transformPaths(paths, grid, datum, _) {
  var s = _.scale || grid.scale,
      t = _.translate || grid.translate;
  if (isFunction(s)) s = s(datum, _);
  if (isFunction(t)) t = t(datum, _);
  if ((s === 1 || s == null) && !t) return;
  var sx = (isNumber(s) ? s : s[0]) || 1,
      sy = (isNumber(s) ? s : s[1]) || 1,
      tx = t && t[0] || 0,
      ty = t && t[1] || 0;
  paths.forEach(_transform(grid, sx, sy, tx, ty));
}

function _transform(grid, sx, sy, tx, ty) {
  var x1 = grid.x1 || 0,
      y1 = grid.y1 || 0,
      flip = sx * sy < 0;

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    if (flip) coordinates.reverse(); // maintain winding order

    coordinates.forEach(transformPoint);
  }

  function transformPoint(coordinates) {
    coordinates[0] = (coordinates[0] - x1) * sx + tx;
    coordinates[1] = (coordinates[1] - y1) * sy + ty;
  }

  return function (geometry) {
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  };
}

function radius(bw, data, f) {
  var v = bw >= 0 ? bw : estimateBandwidth(data, f);
  return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
}

function vega_geo_module_number(_) {
  return isFunction(_) ? _ : vega_util_module_constant(+_);
} // Implementation adapted from d3/d3-contour. Thanks!


function density2D() {
  var x = function x(d) {
    return d[0];
  },
      y = function y(d) {
    return d[1];
  },
      weight = one,
      bandwidth = [-1, -1],
      dx = 960,
      dy = 500,
      k = 2; // log2(cellSize)


  function density(data, counts) {
    var rx = radius(bandwidth[0], data, x) >> k,
        // blur x-radius
    ry = radius(bandwidth[1], data, y) >> k,
        // blur y-radius
    ox = rx ? rx + 2 : 0,
        // x-offset padding for blur
    oy = ry ? ry + 2 : 0,
        // y-offset padding for blur
    n = 2 * ox + (dx >> k),
        // grid width
    m = 2 * oy + (dy >> k),
        // grid height
    values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    var values = values0;
    data.forEach(function (d) {
      var xi = ox + (+x(d) >> k),
          yi = oy + (+y(d) >> k);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += +weight(d);
      }
    });

    if (rx > 0 && ry > 0) {
      blurX(n, m, values0, values1, rx);
      blurY(n, m, values1, values0, ry);
      blurX(n, m, values0, values1, rx);
      blurY(n, m, values1, values0, ry);
      blurX(n, m, values0, values1, rx);
      blurY(n, m, values1, values0, ry);
    } else if (rx > 0) {
      blurX(n, m, values0, values1, rx);
      blurX(n, m, values1, values0, rx);
      blurX(n, m, values0, values1, rx);
      values = values1;
    } else if (ry > 0) {
      blurY(n, m, values0, values1, ry);
      blurY(n, m, values1, values0, ry);
      blurY(n, m, values0, values1, ry);
      values = values1;
    } // scale density estimates
    // density in points per square pixel or probability density


    var s = counts ? Math.pow(2, -2 * k) : 1 / sum_sum(values);

    for (var i = 0, sz = n * m; i < sz; ++i) {
      values[i] *= s;
    }

    return {
      values: values,
      scale: 1 << k,
      width: n,
      height: m,
      x1: ox,
      y1: oy,
      x2: ox + (dx >> k),
      y2: oy + (dy >> k)
    };
  }

  density.x = function (_) {
    return arguments.length ? (x = vega_geo_module_number(_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = vega_geo_module_number(_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = vega_geo_module_number(_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = +_[0],
        _1 = +_[1];

    if (!(_0 >= 0 && _1 >= 0)) error('invalid size');
    return dx = _0, dy = _1, density;
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) error('invalid cell size');
    k = Math.floor(Math.log(_) / Math.LN2);
    return density;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return bandwidth;
    _ = array(_);
    if (_.length === 1) _ = [+_[0], +_[0]];
    if (_.length !== 2) error('invalid bandwidth');
    return bandwidth = _, density;
  };

  return density;
}

function blurX(n, m, source, target, r) {
  var w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source[i - w + j * n];
        }

        target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
}

function blurY(n, m, source, target, r) {
  var w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source[i + (j - w) * n];
        }

        target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
/**
 * Perform 2D kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The [width, height] extent (in
 *   units of input pixels) over which to perform density estimation.
 * @param {function(object): number} params.x - The x-coordinate accessor.
 * @param {function(object): number} params.y - The y-coordinate accessor.
 * @param {function(object): number} [params.weight] - The weight accessor.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors
 *   to groupby.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 *   This parameter determines the level of spatial approximation. For example,
 *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.
 *   A value of 1 will result in an output raster grid whose dimensions exactly
 *   matches the size parameter.
 * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,
 *   in pixels. The input can be a two-element array specifying separate
 *   x and y bandwidths, or a single-element array specifying both. If the
 *   bandwidth is unspecified or less than zero, the bandwidth will be
 *   automatically determined.
 * @param {boolean} [params.counts=false] - A boolean flag indicating if the
 *   output values should be probability estimates (false, default) or
 *   smoothed counts (true).
 * @param {string} [params.as='grid'] - The output field in which to store
 *   the generated raster grid (default 'grid').
 */


function KDE2D(params) {
  Transform.call(this, null, params);
}

KDE2D.Definition = {
  'type': 'KDE2D',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2,
    'required': true
  }, {
    'name': 'x',
    'type': 'field',
    'required': true
  }, {
    'name': 'y',
    'type': 'field',
    'required': true
  }, {
    'name': 'weight',
    'type': 'field'
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'cellSize',
    'type': 'number'
  }, {
    'name': 'bandwidth',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'counts',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'grid'
  }]
};
var PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];

function params(obj, _) {
  PARAMS.forEach(function (param) {
    return _[param] != null ? obj[param](_[param]) : 0;
  });
  return obj;
}

vega_util_module_inherits(KDE2D, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        source = pulse.materialize(pulse.SOURCE).source,
        groups = vega_geo_module_partition(source, _.groupby),
        names = (_.groupby || []).map(accessorName),
        kde = params(density2D(), _),
        as = _.as || 'grid',
        values = [];

    function set(t, vals) {
      for (var i = 0; i < names.length; ++i) {
        t[names[i]] = vals[i];
      }

      return t;
    } // generate density raster grids


    values = groups.map(function (g) {
      return ingest$1(set((0,defineProperty/* default */.Z)({}, as, kde(g, _.counts)), g.dims));
    });
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = values;
    return out;
  }
});

function vega_geo_module_partition(data, groupby) {
  var groups = [],
      get = function get(f) {
    return f(t);
  },
      map,
      i,
      n,
      t,
      k,
      g; // partition data points into groups


  if (groupby == null) {
    groups.push(data);
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        g.dims = k;
        groups.push(g);
      }

      g.push(t);
    }
  }

  return groups;
}
/**
 * Generate contours based on kernel-density estimation of point data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
 *  If the values parameter is provided, this must be the dimensions of the input data.
 *  If density estimation is performed, this is the output view dimensions in pixels.
 * @param {Array<number>} [params.values] - An array of numeric values representing an
 *  width x height grid of values over which to compute contours. If unspecified, this
 *  transform will instead attempt to compute contours for the kernel density estimate
 *  using values drawn from data tuples in the input pulse.
 * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
 * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
 * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
 * @param {number} [params.cellSize] - Contour density calculation cell size.
 * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
 *   this parameter is set, the count and nice parameters will be ignored.
 * @param {number} [params.count] - The desired number of contours.
 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
 *   threshold values should be automatically aligned to "nice"
 *   human-friendly values. Setting this flag may cause the number of
 *   thresholds to deviate from the specified count.
 * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
 *   polygons should be smoothed using linear interpolation. The default is
 *   true. The parameter is ignored when using density estimation.
 */


function Contour(params) {
  Transform.call(this, null, params);
}

Contour.Definition = {
  'type': 'Contour',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2,
    'required': true
  }, {
    'name': 'values',
    'type': 'number',
    'array': true
  }, {
    'name': 'x',
    'type': 'field'
  }, {
    'name': 'y',
    'type': 'field'
  }, {
    'name': 'weight',
    'type': 'field'
  }, {
    'name': 'cellSize',
    'type': 'number'
  }, {
    'name': 'bandwidth',
    'type': 'number'
  }, {
    'name': 'count',
    'type': 'number'
  }, {
    'name': 'nice',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'thresholds',
    'type': 'number',
    'array': true
  }, {
    'name': 'smooth',
    'type': 'boolean',
    'default': true
  }]
};
vega_util_module_inherits(Contour, Transform, {
  transform: function transform(_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        contour = contours().smooth(_.smooth !== false),
        values = _.values,
        thresh = _.thresholds || vega_geo_module_quantize(_.count || 10, _.nice, !!values),
        size = _.size,
        grid,
        post;

    if (!values) {
      values = pulse.materialize(pulse.SOURCE).source;
      grid = params(density2D(), _)(values, true);
      post = _transform(grid, grid.scale || 1, grid.scale || 1, 0, 0);
      size = [grid.width, grid.height];
      values = grid.values;
    }

    thresh = isArray(thresh) ? thresh : thresh(values);
    values = contour.size(size)(values, thresh);
    if (post) values.forEach(post);
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = (values || []).map(ingest$1);
    return out;
  }
});
var Feature = 'Feature';
var FeatureCollection = 'FeatureCollection';
var MultiPoint = 'MultiPoint';
/**
 * Consolidate an array of [longitude, latitude] points or GeoJSON features
 * into a combined GeoJSON object. This transform is particularly useful for
 * combining geo data for a Projection's fit argument. The resulting GeoJSON
 * data is available as this transform's value. Input pulses are unchanged.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} [params.fields] - A two-element array
 *   of field accessors for the longitude and latitude values.
 * @param {function(object): *} params.geojson - A field accessor for
 *   retrieving GeoJSON feature data.
 */

function GeoJSON(params) {
  Transform.call(this, null, params);
}

GeoJSON.Definition = {
  'type': 'GeoJSON',
  'metadata': {},
  'params': [{
    'name': 'fields',
    'type': 'field',
    'array': true,
    'length': 2
  }, {
    'name': 'geojson',
    'type': 'field'
  }]
};
vega_util_module_inherits(GeoJSON, Transform, {
  transform: function transform(_, pulse) {
    var features = this._features,
        points = this._points,
        fields = _.fields,
        lon = fields && fields[0],
        lat = fields && fields[1],
        geojson = _.geojson || !fields && identity,
        flag = pulse.ADD,
        mod;
    mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(geojson)) || lon && pulse.modified(accessorFields(lon)) || lat && pulse.modified(accessorFields(lat));

    if (!this.value || mod) {
      flag = pulse.SOURCE;
      this._features = features = [];
      this._points = points = [];
    }

    if (geojson) {
      pulse.visit(flag, function (t) {
        return features.push(geojson(t));
      });
    }

    if (lon && lat) {
      pulse.visit(flag, function (t) {
        var x = lon(t),
            y = lat(t);

        if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
          points.push([x, y]);
        }
      });
      features = features.concat({
        type: Feature,
        geometry: {
          type: MultiPoint,
          coordinates: points
        }
      });
    }

    this.value = {
      type: FeatureCollection,
      features: features
    };
  }
});
/**
 * Map GeoJSON data to an SVG path string.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='path'] - The output field in which to store
 *   the generated path data (default 'path').
 */

function GeoPath(params) {
  Transform.call(this, null, params);
}

GeoPath.Definition = {
  'type': 'GeoPath',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'projection',
    'type': 'projection'
  }, {
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'pointRadius',
    'type': 'number',
    'expr': true
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'path'
  }]
};
vega_util_module_inherits(GeoPath, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ALL),
        path = this.value,
        field = _.field || identity,
        as = _.as || 'path',
        flag = out.SOURCE;

    if (!path || _.modified()) {
      // parameters updated, reset and reflow
      this.value = path = getProjectionPath(_.projection);
      out.materialize().reflow();
    } else {
      flag = field === identity || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
    }

    var prev = initPath(path, _.pointRadius);
    out.visit(flag, function (t) {
      return t[as] = path(field(t));
    });
    path.pointRadius(prev);
    return out.modifies(as);
  }
});

function initPath(path, pointRadius) {
  var prev = path.pointRadius();
  path.context(null);

  if (pointRadius != null) {
    path.pointRadius(pointRadius);
  }

  return prev;
}
/**
 * Geo-code a longitude/latitude point to an x/y coordinate.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {Array<function(object): *>} params.fields - A two-element array of
 *   field accessors for the longitude and latitude values.
 * @param {Array<string>} [params.as] - A two-element array of field names
 *   under which to store the result. Defaults to ['x','y'].
 */


function GeoPoint(params) {
  Transform.call(this, null, params);
}

GeoPoint.Definition = {
  'type': 'GeoPoint',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'projection',
    'type': 'projection',
    'required': true
  }, {
    'name': 'fields',
    'type': 'field',
    'array': true,
    'required': true,
    'length': 2
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 2,
    'default': ['x', 'y']
  }]
};
vega_util_module_inherits(GeoPoint, Transform, {
  transform: function transform(_, pulse) {
    var proj = _.projection,
        lon = _.fields[0],
        lat = _.fields[1],
        as = _.as || ['x', 'y'],
        x = as[0],
        y = as[1],
        mod;

    function set(t) {
      var xy = proj([lon(t), lat(t)]);

      if (xy) {
        t[x] = xy[0];
        t[y] = xy[1];
      } else {
        t[x] = undefined;
        t[y] = undefined;
      }
    }

    if (_.modified()) {
      // parameters updated, reflow
      pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
    } else {
      mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
      pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
    }

    return pulse.modifies(as);
  }
});
/**
 * Annotate items with a geopath shape generator.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(number, number): *} params.projection - The cartographic
 *   projection to apply.
 * @param {function(object): *} [params.field] - The field with GeoJSON data,
 *   or null if the tuple itself is a GeoJSON feature.
 * @param {string} [params.as='shape'] - The output field in which to store
 *   the generated path data (default 'shape').
 */

function GeoShape(params) {
  Transform.call(this, null, params);
}

GeoShape.Definition = {
  'type': 'GeoShape',
  'metadata': {
    'modifies': true,
    'nomod': true
  },
  'params': [{
    'name': 'projection',
    'type': 'projection'
  }, {
    'name': 'field',
    'type': 'field',
    'default': 'datum'
  }, {
    'name': 'pointRadius',
    'type': 'number',
    'expr': true
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'shape'
  }]
};
vega_util_module_inherits(GeoShape, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.ALL),
        shape = this.value,
        as = _.as || 'shape',
        flag = out.ADD;

    if (!shape || _.modified()) {
      // parameters updated, reset and reflow
      this.value = shape = shapeGenerator(getProjectionPath(_.projection), _.field || field('datum'), _.pointRadius);
      out.materialize().reflow();
      flag = out.SOURCE;
    }

    out.visit(flag, function (t) {
      return t[as] = shape;
    });
    return out.modifies(as);
  }
});

function shapeGenerator(path, field, pointRadius) {
  var shape = pointRadius == null ? function (_) {
    return path(field(_));
  } : function (_) {
    var prev = path.pointRadius(),
        value = path.pointRadius(pointRadius)(field(_));
    path.pointRadius(prev);
    return value;
  };

  shape.context = function (_) {
    path.context(_);
    return shape;
  };

  return shape;
}
/**
 * GeoJSON feature generator for creating graticules.
 * @constructor
 */


function Graticule(params) {
  Transform.call(this, [], params);
  this.generator = graticule();
}

Graticule.Definition = {
  'type': 'Graticule',
  'metadata': {
    'changes': true,
    'generates': true
  },
  'params': [{
    'name': 'extent',
    'type': 'array',
    'array': true,
    'length': 2,
    'content': {
      'type': 'number',
      'array': true,
      'length': 2
    }
  }, {
    'name': 'extentMajor',
    'type': 'array',
    'array': true,
    'length': 2,
    'content': {
      'type': 'number',
      'array': true,
      'length': 2
    }
  }, {
    'name': 'extentMinor',
    'type': 'array',
    'array': true,
    'length': 2,
    'content': {
      'type': 'number',
      'array': true,
      'length': 2
    }
  }, {
    'name': 'step',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'stepMajor',
    'type': 'number',
    'array': true,
    'length': 2,
    'default': [90, 360]
  }, {
    'name': 'stepMinor',
    'type': 'number',
    'array': true,
    'length': 2,
    'default': [10, 10]
  }, {
    'name': 'precision',
    'type': 'number',
    'default': 2.5
  }]
};
vega_util_module_inherits(Graticule, Transform, {
  transform: function transform(_, pulse) {
    var src = this.value,
        gen = this.generator,
        t;

    if (!src.length || _.modified()) {
      for (var prop in _) {
        if (isFunction(gen[prop])) {
          gen[prop](_[prop]);
        }
      }
    }

    t = gen();

    if (src.length) {
      pulse.mod.push(replace(src[0], t));
    } else {
      pulse.add.push(ingest$1(t));
    }

    src[0] = t;
    return pulse;
  }
});
/**
 * Render a heatmap image for input raster grid data.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} [params.field] - The field with raster grid
 *   data. If unspecified, the tuple itself is interpreted as a raster grid.
 * @param {string} [params.color] - A constant color value or function for
 *   individual pixel color. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {number} [params.opacity] - A constant opacity value or function for
 *   individual pixel opacity. If a function, it will be invoked with an input
 *   object that includes $x, $y, $value, and $max fields for the grid.
 * @param {string} [params.resolve] - The method for resolving maximum values
 *   across multiple input grids. If 'independent' (the default), maximum
 *   calculation will be performed separately for each grid. If 'shared',
 *   a single global maximum will be used for all input grids.
 * @param {string} [params.as='image'] - The output field in which to store
 *   the generated bitmap canvas images (default 'image').
 */

function Heatmap(params) {
  Transform.call(this, null, params);
}

Heatmap.Definition = {
  'type': 'heatmap',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'color',
    'type': 'string',
    'expr': true
  }, {
    'name': 'opacity',
    'type': 'number',
    'expr': true
  }, {
    'name': 'resolve',
    'type': 'enum',
    'values': ['shared', 'independent'],
    'default': 'independent'
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'image'
  }]
};
vega_util_module_inherits(Heatmap, Transform, {
  transform: function transform(_, pulse) {
    if (!pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        shared = _.resolve === 'shared',
        field = _.field || identity,
        opacity = opacity_(_.opacity, _),
        color = color_(_.color, _),
        as = _.as || 'image',
        obj = {
      $x: 0,
      $y: 0,
      $value: 0,
      $max: shared ? d3_array_src_max_max(source.map(function (t) {
        return d3_array_src_max_max(field(t).values);
      })) : 0
    };
    source.forEach(function (t) {
      var v = field(t); // build proxy data object

      var o = extend({}, t, obj); // set maximum value if not globally shared

      if (!shared) o.$max = d3_array_src_max_max(v.values || []); // generate canvas image
      // optimize color/opacity if not pixel-dependent

      t[as] = toCanvas(v, o, color.dep ? color : vega_util_module_constant(color(o)), opacity.dep ? opacity : vega_util_module_constant(opacity(o)));
    });
    return pulse.reflow(true).modifies(as);
  }
}); // get image color function

function color_(color, _) {
  var f;

  if (isFunction(color)) {
    f = function f(obj) {
      return color_rgb(color(obj, _));
    };

    f.dep = dependency(color);
  } else {
    // default to mid-grey
    f = vega_util_module_constant(color_rgb(color || '#888'));
  }

  return f;
} // get image opacity function


function opacity_(opacity, _) {
  var f;

  if (isFunction(opacity)) {
    f = function f(obj) {
      return opacity(obj, _);
    };

    f.dep = dependency(opacity);
  } else if (opacity) {
    f = vega_util_module_constant(opacity);
  } else {
    // default to [0, max] opacity gradient
    f = function f(obj) {
      return obj.$value / obj.$max || 0;
    };

    f.dep = true;
  }

  return f;
} // check if function depends on individual pixel data


function dependency(f) {
  if (!isFunction(f)) return false;
  var set = toSet(accessorFields(f));
  return set.$x || set.$y || set.$value || set.$max;
} // render raster grid to canvas


function toCanvas(grid, obj, color, opacity) {
  var n = grid.width,
      m = grid.height,
      x1 = grid.x1 || 0,
      y1 = grid.y1 || 0,
      x2 = grid.x2 || n,
      y2 = grid.y2 || m,
      val = grid.values,
      value = val ? function (i) {
    return val[i];
  } : zero,
      can = domCanvas(x2 - x1, y2 - y1),
      ctx = can.getContext('2d'),
      img = ctx.getImageData(0, 0, x2 - x1, y2 - y1),
      pix = img.data;

  for (var j = y1, k = 0; j < y2; ++j) {
    obj.$y = j - y1;

    for (var i = x1, r = j * n; i < x2; ++i, k += 4) {
      obj.$x = i - x1;
      obj.$value = value(i + r);
      var v = color(obj);
      pix[k + 0] = v.r;
      pix[k + 1] = v.g;
      pix[k + 2] = v.b;
      pix[k + 3] = ~~(255 * opacity(obj));
    }
  }

  ctx.putImageData(img, 0, 0);
  return can;
}
/**
 * Maintains a cartographic projection.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */


function Projection(params) {
  Transform.call(this, null, params);
  this.modified(true); // always treat as modified
}

vega_util_module_inherits(Projection, Transform, {
  transform: function transform(_, pulse) {
    var proj = this.value;

    if (!proj || _.modified('type')) {
      this.value = proj = vega_geo_module_create(_.type);
      projectionProperties.forEach(function (prop) {
        if (_[prop] != null) vega_geo_module_set(proj, prop, _[prop]);
      });
    } else {
      projectionProperties.forEach(function (prop) {
        if (_.modified(prop)) vega_geo_module_set(proj, prop, _[prop]);
      });
    }

    if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
    if (_.fit) vega_geo_module_fit(proj, _);
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
  }
});

function vega_geo_module_fit(proj, _) {
  var data = collectGeoJSON(_.fit);
  _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;
}

function vega_geo_module_create(type) {
  var constructor = vega_projection_module_projection((type || 'mercator').toLowerCase());
  if (!constructor) error('Unrecognized projection type: ' + type);
  return constructor();
}

function vega_geo_module_set(proj, key, value) {
  if (isFunction(proj[key])) proj[key](value);
}

function collectGeoJSON(data) {
  data = array(data);
  return data.length === 1 ? data[0] : {
    type: FeatureCollection,
    features: data.reduce(function (a, f) {
      return a.concat(featurize(f));
    }, [])
  };
}

function featurize(f) {
  return f.type === FeatureCollection ? f.features : array(f).filter(function (d) {
    return d != null;
  }).map(function (d) {
    return d.type === Feature ? d : {
      type: Feature,
      geometry: d
    };
  });
}


;// CONCATENATED MODULE: ./node_modules/d3-force/src/center.js
/* harmony default export */ function center(x, y) {
  var nodes,
      strength = 1;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/add.js
/* harmony default export */ function src_add(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add_add(this.cover(x, y), x, y, d);
}

function add_add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, abort.


  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add_add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/cover.js
/* harmony default export */ function cover(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else {
      var z = x1 - x0 || 1,
          node = this._root,
          parent,
          i;

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        i = (y < y0) << 1 | x < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;

        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;

          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;

          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;

          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/data.js
/* harmony default export */ function data() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do {
      data.push(node.data);
    } while (node = node.next);
  });
  return data;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/extent.js
/* harmony default export */ function src_extent(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/quad.js
/* harmony default export */ function src_quad(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/find.js

/* harmony default export */ function src_find(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new src_quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new src_quad(node[3], xm, ym, x2, y2), new src_quad(node[2], x1, ym, xm, y2), new src_quad(node[1], xm, y1, x2, ym), new src_quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/remove.js
/* harmony default export */ function remove(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) {
    if (!(previous = node, node = node.next)) return this;
  }

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) {
    this.remove(data[i]);
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/root.js
/* harmony default export */ function root() {
  return this._root;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/size.js
/* harmony default export */ function size() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do {
      ++size;
    } while (node = node.next);
  });
  return size;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/visit.js

/* harmony default export */ function src_visit(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new src_quad(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new src_quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new src_quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new src_quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new src_quad(child, x0, y0, xm, ym));
    }
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/visitAfter.js

/* harmony default export */ function visitAfter(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new src_quad(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new src_quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new src_quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new src_quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new src_quad(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
/* harmony default export */ function src_x(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
/* harmony default export */ function src_y(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
;// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/quadtree.js












function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) {
    next = next.next = {
      data: leaf.data
    };
  }

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = src_add;
treeProto.addAll = addAll;
treeProto.cover = cover;
treeProto.data = data;
treeProto.extent = src_extent;
treeProto.find = src_find;
treeProto.remove = remove;
treeProto.removeAll = removeAll;
treeProto.root = root;
treeProto.size = size;
treeProto.visit = src_visit;
treeProto.visitAfter = visitAfter;
treeProto.x = src_x;
treeProto.y = src_y;
;// CONCATENATED MODULE: ./node_modules/d3-force/src/constant.js
/* harmony default export */ function d3_force_src_constant(x) {
  return function () {
    return x;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/jiggle.js
/* harmony default export */ function jiggle(random) {
  return (random() - 0.5) * 1e-6;
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/collide.js




function collide_x(d) {
  return d.x + d.vx;
}

function collide_y(d) {
  return d.y + d.vy;
}

/* harmony default export */ function collide(radius) {
  var nodes,
      radii,
      random,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = d3_force_src_constant(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, collide_x, collide_y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = jiggle(random), l += x * x;
            if (y === 0) y = jiggle(random), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) {
      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
    }
  }

  force.initialize = function (_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : radius;
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/d3-dispatch/src/dispatch.js
var dispatch_noop = {
  value: function value() {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function on(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) {
        if ((t = (typename = T[i]).type) && (t = dispatch_get(_[t], typename.name))) return t;
      }

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = dispatch_set(_[t], typename.name, callback);else if (callback == null) for (t in _) {
        _[t] = dispatch_set(_[t], typename.name, null);
      }
    }

    return this;
  },
  copy: function copy() {
    var copy = {},
        _ = this._;

    for (var t in _) {
      copy[t] = _[t].slice();
    }

    return new Dispatch(copy);
  },
  call: function call(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
      args[i] = arguments[i + 2];
    }
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
      t[i].value.apply(that, args);
    }
  },
  apply: function apply(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
      t[i].value.apply(that, args);
    }
  }
};

function dispatch_get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function dispatch_set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = dispatch_noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

/* harmony default export */ var src_dispatch = (dispatch);
;// CONCATENATED MODULE: ./node_modules/d3-timer/src/timer.js
var timer_frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function restart(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function stop() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now(); // Get the current time, if not already set.

  ++timer_frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --timer_frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  timer_frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    timer_frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (timer_frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    timer_frame = 1, setFrame(wake);
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/lcg.js
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
var lcg_a = 1664525;
var lcg_c = 1013904223;
var m = 4294967296; // 2^32

/* harmony default export */ function src_lcg() {
  var s = 1;
  return function () {
    return (s = (lcg_a * s + lcg_c) % m) / m;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/simulation.js



function simulation_x(d) {
  return d.x;
}
function simulation_y(d) {
  return d.y;
}
var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));
/* harmony default export */ function simulation(_nodes) {
  var simulation,
      _alpha = 1,
      _alphaMin = 0.001,
      _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),
      _alphaTarget = 0,
      _velocityDecay = 0.6,
      forces = new Map(),
      stepper = timer(step),
      event = src_dispatch("tick", "end"),
      random = src_lcg();

  if (_nodes == null) _nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (_alpha < _alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i,
        n = _nodes.length,
        node;
    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      _alpha += (_alphaTarget - _alpha) * _alphaDecay;
      forces.forEach(function (force) {
        force(_alpha);
      });

      for (i = 0; i < n; ++i) {
        node = _nodes[i];
        if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = _nodes.length, node; i < n; ++i) {
      node = _nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(0.5 + i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(_nodes, random);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function restart() {
      return stepper.restart(step), simulation;
    },
    stop: function stop() {
      return stepper.stop(), simulation;
    },
    nodes: function nodes(_) {
      return arguments.length ? (_nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : _nodes;
    },
    alpha: function alpha(_) {
      return arguments.length ? (_alpha = +_, simulation) : _alpha;
    },
    alphaMin: function alphaMin(_) {
      return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;
    },
    alphaDecay: function alphaDecay(_) {
      return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;
    },
    alphaTarget: function alphaTarget(_) {
      return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;
    },
    velocityDecay: function velocityDecay(_) {
      return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;
    },
    randomSource: function randomSource(_) {
      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
    },
    force: function force(name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function find(x, y, radius) {
      var i = 0,
          n = _nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = _nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function on(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/manyBody.js




/* harmony default export */ function manyBody() {
  var nodes,
      node,
      random,
      alpha,
      strength = d3_force_src_constant(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = quadtree(nodes, simulation_x, simulation_y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) {
      node = nodes[i], tree.visit(apply);
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) {
      node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
    }
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do {
          strength += strengths[q.data.index];
        } while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = jiggle(random), l += x * x;
        if (y === 0) y = jiggle(random), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = jiggle(random), l += x * x;
      if (y === 0) y = jiggle(random), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do {
      if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x * w;
        node.vy += y * w;
      }
    } while (quad = quad.next);
  }

  force.initialize = function (_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/link.js



function index(d) {
  return d.index;
}

function link_find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("node not found: " + nodeId);
  return node;
}

/* harmony default export */ function src_link(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = d3_force_src_constant(30),
      distances,
      nodes,
      count,
      bias,
      random,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle(random);
        y = target.y + target.vy - source.y - source.vy || jiggle(random);
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = new Map(nodes.map(function (d, i) {
      return [id(d, i, nodes), d];
    })),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = link_find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = link_find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : d3_force_src_constant(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : d3_force_src_constant(+_), initializeDistance(), force) : distance;
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/x.js

/* harmony default export */ function d3_force_src_x(x) {
  var strength = d3_force_src_constant(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = d3_force_src_constant(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : x;
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/d3-force/src/y.js

/* harmony default export */ function d3_force_src_y(y) {
  var strength = d3_force_src_constant(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = d3_force_src_constant(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : d3_force_src_constant(+_), initialize(), force) : y;
  };

  return force;
}
;// CONCATENATED MODULE: ./node_modules/vega-force/build/vega-force.module.js



var ForceMap = {
  center: center,
  collide: collide,
  nbody: manyBody,
  link: src_link,
  x: d3_force_src_x,
  y: d3_force_src_y
};
var Forces = 'forces',
    ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],
    ForceConfig = ['static', 'iterations'],
    ForceOutput = ['x', 'y', 'vx', 'vy'];
/**
 * Force simulation layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<object>} params.forces - The forces to apply.
 */

function Force(params) {
  Transform.call(this, null, params);
}

Force.Definition = {
  'type': 'Force',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'static',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'restart',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'iterations',
    'type': 'number',
    'default': 300
  }, {
    'name': 'alpha',
    'type': 'number',
    'default': 1
  }, {
    'name': 'alphaMin',
    'type': 'number',
    'default': 0.001
  }, {
    'name': 'alphaTarget',
    'type': 'number',
    'default': 0
  }, {
    'name': 'velocityDecay',
    'type': 'number',
    'default': 0.4
  }, {
    'name': 'forces',
    'type': 'param',
    'array': true,
    'params': [{
      'key': {
        'force': 'center'
      },
      'params': [{
        'name': 'x',
        'type': 'number',
        'default': 0
      }, {
        'name': 'y',
        'type': 'number',
        'default': 0
      }]
    }, {
      'key': {
        'force': 'collide'
      },
      'params': [{
        'name': 'radius',
        'type': 'number',
        'expr': true
      }, {
        'name': 'strength',
        'type': 'number',
        'default': 0.7
      }, {
        'name': 'iterations',
        'type': 'number',
        'default': 1
      }]
    }, {
      'key': {
        'force': 'nbody'
      },
      'params': [{
        'name': 'strength',
        'type': 'number',
        'default': -30
      }, {
        'name': 'theta',
        'type': 'number',
        'default': 0.9
      }, {
        'name': 'distanceMin',
        'type': 'number',
        'default': 1
      }, {
        'name': 'distanceMax',
        'type': 'number'
      }]
    }, {
      'key': {
        'force': 'link'
      },
      'params': [{
        'name': 'links',
        'type': 'data'
      }, {
        'name': 'id',
        'type': 'field'
      }, {
        'name': 'distance',
        'type': 'number',
        'default': 30,
        'expr': true
      }, {
        'name': 'strength',
        'type': 'number',
        'expr': true
      }, {
        'name': 'iterations',
        'type': 'number',
        'default': 1
      }]
    }, {
      'key': {
        'force': 'x'
      },
      'params': [{
        'name': 'strength',
        'type': 'number',
        'default': 0.1
      }, {
        'name': 'x',
        'type': 'field'
      }]
    }, {
      'key': {
        'force': 'y'
      },
      'params': [{
        'name': 'strength',
        'type': 'number',
        'default': 0.1
      }, {
        'name': 'y',
        'type': 'field'
      }]
    }]
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'modify': false,
    'default': ForceOutput
  }]
};
vega_util_module_inherits(Force, Transform, {
  transform: function transform(_, pulse) {
    var sim = this.value,
        change = pulse.changed(pulse.ADD_REM),
        params = _.modified(ForceParams),
        iters = _.iterations || 300; // configure simulation


    if (!sim) {
      this.value = sim = vega_force_module_simulation(pulse.source, _);
      sim.on('tick', rerun(pulse.dataflow, this));

      if (!_.static) {
        change = true;
        sim.tick(); // ensure we run on init
      }

      pulse.modifies('index');
    } else {
      if (change) {
        pulse.modifies('index');
        sim.nodes(pulse.source);
      }

      if (params || pulse.changed(pulse.MOD)) {
        setup(sim, _, 0, pulse);
      }
    } // run simulation


    if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {
      sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));

      if (_.static) {
        for (sim.stop(); --iters >= 0;) {
          sim.tick();
        }
      } else {
        if (sim.stopped()) sim.restart();
        if (!change) return pulse.StopPropagation; // defer to sim ticks
      }
    }

    return this.finish(_, pulse);
  },
  finish: function finish(_, pulse) {
    var dataflow = pulse.dataflow; // inspect dependencies, touch link source data

    for (var args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {
      arg = args[j];

      if (arg.name !== Forces || arg.op._argval.force !== 'link') {
        continue;
      }

      for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {
        if (ops[i].name === 'links' && (op = ops[i].op.source)) {
          dataflow.pulse(op, dataflow.changeset().reflow());
          break;
        }
      }
    } // reflow all nodes


    return pulse.reflow(_.modified()).modifies(ForceOutput);
  }
});

function rerun(df, op) {
  return function () {
    return df.touch(op).run();
  };
}

function vega_force_module_simulation(nodes, _) {
  var sim = simulation(nodes),
      stop = sim.stop,
      restart = sim.restart;
  var stopped = false;

  sim.stopped = function () {
    return stopped;
  };

  sim.restart = function () {
    return stopped = false, restart();
  };

  sim.stop = function () {
    return stopped = true, stop();
  };

  return setup(sim, _, true).on('end', function () {
    return stopped = true;
  });
}

function setup(sim, _, init, pulse) {
  var f = array(_.forces),
      i,
      n,
      p,
      name;

  for (i = 0, n = ForceParams.length; i < n; ++i) {
    p = ForceParams[i];
    if (p !== Forces && _.modified(p)) sim[p](_[p]);
  }

  for (i = 0, n = f.length; i < n; ++i) {
    name = Forces + i;
    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;
    if (p) sim.force(name, p);
  }

  for (n = sim.numForces || 0; i < n; ++i) {
    sim.force(Forces + i, null); // remove
  }

  sim.numForces = f.length;
  return sim;
}

function modified(f, pulse) {
  var k, v;

  for (k in f) {
    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;
  }

  return 0;
}

function getForce(_) {
  var f, p;

  if (!_has(ForceMap, _.force)) {
    error('Unrecognized force: ' + _.force);
  }

  f = ForceMap[_.force]();

  for (p in _) {
    if (isFunction(f[p])) setForceParam(f[p], _[p], _);
  }

  return f;
}

function setForceParam(f, v, _) {
  f(isFunction(v) ? function (d) {
    return v(d, _);
  } : v);
}


;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/count.js
function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) {
    sum += children[i].value;
  }
  node.value = sum;
}

/* harmony default export */ function hierarchy_count() {
  return this.eachAfter(count);
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/each.js
function each_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = each_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function each_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return each_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return each_arrayLikeToArray(o, minLen); }

function each_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function each(callback, that) {
  var index = -1;

  var _iterator = each_createForOfIteratorHelper(this),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;
      callback.call(that, node, ++index, this);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
/* harmony default export */ function eachBefore(callback, that) {
  var node = this,
      nodes = [node],
      children,
      i,
      index = -1;

  while (node = nodes.pop()) {
    callback.call(that, node, ++index, this);

    if (children = node.children) {
      for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
      }
    }
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
/* harmony default export */ function eachAfter(callback, that) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n,
      index = -1;

  while (node = nodes.pop()) {
    next.push(node);

    if (children = node.children) {
      for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
      }
    }
  }

  while (node = next.pop()) {
    callback.call(that, node, ++index, this);
  }

  return this;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/find.js
function find_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = find_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function find_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return find_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return find_arrayLikeToArray(o, minLen); }

function find_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function hierarchy_find(callback, that) {
  var index = -1;

  var _iterator = find_createForOfIteratorHelper(this),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;

      if (callback.call(that, node, ++index, this)) {
        return node;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sum.js
/* harmony default export */ function hierarchy_sum(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) {
      sum += children[i].value;
    }

    node.value = sum;
  });
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sort.js
/* harmony default export */ function sort(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/path.js
/* harmony default export */ function hierarchy_path(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/ancestors.js
/* harmony default export */ function ancestors() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/descendants.js
/* harmony default export */ function descendants() {
  return Array.from(this);
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/leaves.js
/* harmony default export */ function leaves() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/links.js
/* harmony default export */ function links() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/iterator.js


var iterator_marked = /*#__PURE__*/regenerator_default().mark(_callee);

function _callee() {
  var node, current, next, children, i, n;
  return regenerator_default().wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          node = this, next = [node];

        case 1:
          current = next.reverse(), next = [];

        case 2:
          if (!(node = current.pop())) {
            _context.next = 8;
            break;
          }

          _context.next = 5;
          return node;

        case 5:
          if (children = node.children) {
            for (i = 0, n = children.length; i < n; ++i) {
              next.push(children[i]);
            }
          }

          _context.next = 2;
          break;

        case 8:
          if (next.length) {
            _context.next = 1;
            break;
          }

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, iterator_marked, this);
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/index.js














function hierarchy(data, children) {
  if (data instanceof Map) {
    data = [undefined, data];
    if (children === undefined) children = mapChildren;
  } else if (children === undefined) {
    children = objectChildren;
  }

  var root = new Node(data),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  while (node = nodes.pop()) {
    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function objectChildren(d) {
  return d.children;
}

function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}

function copyData(node) {
  if (node.data.value !== undefined) node.value = node.data.value;
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do {
    node.height = height;
  } while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node.prototype = hierarchy.prototype = (0,defineProperty/* default */.Z)({
  constructor: Node,
  count: hierarchy_count,
  each: each,
  eachAfter: eachAfter,
  eachBefore: eachBefore,
  find: hierarchy_find,
  sum: hierarchy_sum,
  sort: sort,
  path: hierarchy_path,
  ancestors: ancestors,
  descendants: descendants,
  leaves: leaves,
  links: links,
  copy: node_copy
}, Symbol.iterator, _callee);
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/array.js
/* harmony default export */ function d3_hierarchy_src_array(x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}
function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/enclose.js

/* harmony default export */ function enclose(circles) {
  var i = 0,
      n = (circles = shuffle(Array.from(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/siblings.js



function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function siblings_Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = (circles = d3_hierarchy_src_array(circles)).length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new siblings_Node(a), b = new siblings_Node(b), c = new siblings_Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new siblings_Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) {
    a.push(c._);
  }

  c = enclose(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) {
    a = circles[i], a.x -= c.x, a.y -= c.y;
  }

  return c.r;
}
/* harmony default export */ function siblings(circles) {
  packEnclose(circles);
  return circles;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/accessors.js
function optional(f) {
  return f == null ? null : required(f);
}
function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
/* harmony default export */ function d3_hierarchy_src_constant(x) {
  return function () {
    return x;
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/index.js




function defaultRadius(d) {
  return Math.sqrt(d.value);
}

/* harmony default export */ function pack() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) {
        children[i].r += r;
      }
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) {
        children[i].r -= r;
      }
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/round.js
/* harmony default export */ function treemap_round(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/dice.js
/* harmony default export */ function dice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/partition.js


/* harmony default export */ function src_partition() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(treemap_round);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        dice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/stratify.js


var preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

/* harmony default export */ function stratify() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var nodes = Array.from(data),
        n = nodes.length,
        d,
        i,
        root,
        parent,
        node,
        nodeId,
        nodeKey,
        nodeByKey = new Map();

    for (i = 0; i < n; ++i) {
      d = nodes[i], node = nodes[i] = new Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = node.id = nodeId;
        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
      }

      if ((nodeId = parentId(d, i, data)) != null && (nodeId += "")) {
        node.parent = nodeId;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i];

      if (nodeId = node.parent) {
        parent = nodeByKey.get(nodeId);
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      } else {
        if (root) throw new Error("multiple roots");
        root = node;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = required(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
  };

  return stratify;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/tree.js


function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


/* harmony default export */ function tree() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/cluster.js
function cluster_defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) {
    node = children[0];
  }

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) {
    node = children[children.length - 1];
  }

  return node;
}

/* harmony default export */ function cluster() {
  var separation = cluster_defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/binary.js
/* harmony default export */ function binary(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/slice.js
/* harmony default export */ function treemap_slice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/sliceDice.js


/* harmony default export */ function sliceDice(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? treemap_slice : dice)(parent, x0, y0, x1, y1);
}
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/squarify.js


var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do {
      sumValue = nodes[i1++].value;
    } while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) dice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemap_slice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}
/* harmony default export */ var squarify = ((function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
})(phi));
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/resquarify.js



/* harmony default export */ var resquarify = ((function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) {
          row.value += nodes[i].value;
        }

        if (row.dice) dice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);else treemap_slice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
})(phi));
;// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/index.js




/* harmony default export */ function treemap() {
  var tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(treemap_round);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingLeft;
  };

  return treemap;
}
;// CONCATENATED MODULE: ./node_modules/vega-hierarchy/build/vega-hierarchy.module.js


 // Build lookup table mapping tuple keys to tree node instances

function vega_hierarchy_module_lookup(tree, key, filter) {
  var map = {};
  tree.each(function (node) {
    var t = node.data;
    if (filter(t)) map[key(t)] = node;
  });
  tree.lookup = map;
  return tree;
}
/**
 * Nest tuples into a tree structure, grouped by key values.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
 * @param {boolean} [params.generate=false] - A boolean flag indicating if
 *   non-leaf nodes generated by this transform should be included in the
 *   output. The default (false) includes only the input data (leaf nodes)
 *   in the data stream.
 */


function Nest(params) {
  Transform.call(this, null, params);
}

Nest.Definition = {
  'type': 'Nest',
  'metadata': {
    'treesource': true,
    'changes': true
  },
  'params': [{
    'name': 'keys',
    'type': 'field',
    'array': true
  }, {
    'name': 'generate',
    'type': 'boolean'
  }]
};

var children = function children(n) {
  return n.values;
};

vega_util_module_inherits(Nest, Transform, {
  transform: function transform(_, pulse) {
    if (!pulse.source) {
      error('Nest transform requires an upstream data source.');
    }

    var gen = _.generate,
        mod = _.modified(),
        out = pulse.clone(),
        tree = this.value;

    if (!tree || mod || pulse.changed()) {
      // collect nodes to remove
      if (tree) {
        tree.each(function (node) {
          if (node.children && isTuple(node.data)) {
            out.rem.push(node.data);
          }
        });
      } // generate new tree structure


      this.value = tree = hierarchy({
        values: array(_.keys).reduce(function (n, k) {
          n.key(k);
          return n;
        }, nest()).entries(out.source)
      }, children); // collect nodes to add

      if (gen) {
        tree.each(function (node) {
          if (node.children) {
            node = ingest$1(node.data);
            out.add.push(node);
            out.source.push(node);
          }
        });
      } // build lookup table


      vega_hierarchy_module_lookup(tree, tupleid, tupleid);
    }

    out.source.root = tree;
    return out;
  }
});

function nest() {
  var keys = [],
      nest = {
    entries: function entries(array) {
      return _entries(apply(array, 0), 0);
    },
    key: function key(d) {
      return keys.push(d), nest;
    }
  };

  function apply(array, depth) {
    if (depth >= keys.length) {
      return array;
    }

    var n = array.length,
        key = keys[depth++],
        valuesByKey = {},
        result = {};
    var i = -1,
        keyValue,
        value,
        values;

    while (++i < n) {
      keyValue = key(value = array[i]) + '';

      if (values = valuesByKey[keyValue]) {
        values.push(value);
      } else {
        valuesByKey[keyValue] = [value];
      }
    }

    for (keyValue in valuesByKey) {
      result[keyValue] = apply(valuesByKey[keyValue], depth);
    }

    return result;
  }

  function _entries(map, depth) {
    if (++depth > keys.length) return map;
    var array = [];

    for (var key in map) {
      array.push({
        key: key,
        values: _entries(map[key], depth)
      });
    }

    return array;
  }

  return nest;
}
/**
 * Abstract class for tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */


function HierarchyLayout(params) {
  Transform.call(this, null, params);
}

var vega_hierarchy_module_defaultSeparation = function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
};

vega_util_module_inherits(HierarchyLayout, Transform, {
  transform: function transform(_, pulse) {
    if (!pulse.source || !pulse.source.root) {
      error(this.constructor.name + ' transform requires a backing tree data source.');
    }

    var layout = this.layout(_.method),
        fields = this.fields,
        root = pulse.source.root,
        as = _.as || fields;
    if (_.field) root.sum(_.field);else root.count();
    if (_.sort) root.sort(stableCompare(_.sort, function (d) {
      return d.data;
    }));
    setParams(layout, this.params, _);

    if (layout.separation) {
      layout.separation(_.separation !== false ? vega_hierarchy_module_defaultSeparation : one);
    }

    try {
      this.value = layout(root);
    } catch (err) {
      error(err);
    }

    root.each(function (node) {
      return setFields(node, fields, as);
    });
    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
  }
});

function setParams(layout, params, _) {
  for (var p, i = 0, n = params.length; i < n; ++i) {
    p = params[i];
    if (p in _) layout[p](_[p]);
  }
}

function setFields(node, fields, as) {
  var t = node.data,
      n = fields.length - 1;

  for (var i = 0; i < n; ++i) {
    t[as[i]] = node[fields[i]];
  }

  t[as[n]] = node.children ? node.children.length : 0;
}

var vega_hierarchy_module_Output = ['x', 'y', 'r', 'depth', 'children'];
/**
 * Packed circle tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Pack(params) {
  HierarchyLayout.call(this, params);
}

Pack.Definition = {
  'type': 'Pack',
  'metadata': {
    'tree': true,
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'padding',
    'type': 'number',
    'default': 0
  }, {
    'name': 'radius',
    'type': 'field',
    'default': null
  }, {
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': vega_hierarchy_module_Output.length,
    'default': vega_hierarchy_module_Output
  }]
};
vega_util_module_inherits(Pack, HierarchyLayout, {
  layout: pack,
  params: ['radius', 'size', 'padding'],
  fields: vega_hierarchy_module_Output
});
var Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
/**
 * Partition tree layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Partition(params) {
  HierarchyLayout.call(this, params);
}

Partition.Definition = {
  'type': 'Partition',
  'metadata': {
    'tree': true,
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'padding',
    'type': 'number',
    'default': 0
  }, {
    'name': 'round',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': Output$1.length,
    'default': Output$1
  }]
};
vega_util_module_inherits(Partition, HierarchyLayout, {
  layout: src_partition,
  params: ['size', 'round', 'padding'],
  fields: Output$1
});
/**
 * Stratify a collection of tuples into a tree structure based on
 * id and parent id fields.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.key - Unique key field for each tuple.
 * @param {function(object): *} params.parentKey - Field with key for parent tuple.
 */

function Stratify(params) {
  Transform.call(this, null, params);
}

Stratify.Definition = {
  'type': 'Stratify',
  'metadata': {
    'treesource': true
  },
  'params': [{
    'name': 'key',
    'type': 'field',
    'required': true
  }, {
    'name': 'parentKey',
    'type': 'field',
    'required': true
  }]
};
vega_util_module_inherits(Stratify, Transform, {
  transform: function transform(_, pulse) {
    if (!pulse.source) {
      error('Stratify transform requires an upstream data source.');
    }

    var tree = this.value;

    var mod = _.modified(),
        out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),
        run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution


    out.source = out.source.slice();

    if (run) {
      tree = out.source.length ? vega_hierarchy_module_lookup(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, truthy) : vega_hierarchy_module_lookup(stratify()([{}]), _.key, _.key);
    }

    out.source.root = this.value = tree;
    return out;
  }
});
var Layouts = {
  tidy: tree,
  cluster: cluster
};
var Output$2 = ['x', 'y', 'depth', 'children'];
/**
 * Tree layout. Depending on the method parameter, performs either
 * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */

function Tree(params) {
  HierarchyLayout.call(this, params);
}

Tree.Definition = {
  'type': 'Tree',
  'metadata': {
    'tree': true,
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'method',
    'type': 'enum',
    'default': 'tidy',
    'values': ['tidy', 'cluster']
  }, {
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'nodeSize',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'separation',
    'type': 'boolean',
    'default': true
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': Output$2.length,
    'default': Output$2
  }]
};
vega_util_module_inherits(Tree, HierarchyLayout, {
  /**
   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
   */
  layout: function layout(method) {
    var m = method || 'tidy';
    if (_has(Layouts, m)) return Layouts[m]();else error('Unrecognized Tree layout method: ' + m);
  },
  params: ['size', 'nodeSize'],
  fields: Output$2
});
/**
 * Generate tuples representing links between tree nodes.
 * The resulting tuples will contain 'source' and 'target' fields,
 * which point to parent and child node tuples, respectively.
 * @constructor
 * @param {object} params - The parameters for this operator.
 */

function TreeLinks(params) {
  Transform.call(this, [], params);
}

TreeLinks.Definition = {
  'type': 'TreeLinks',
  'metadata': {
    'tree': true,
    'generates': true,
    'changes': true
  },
  'params': []
};
vega_util_module_inherits(TreeLinks, Transform, {
  transform: function transform(_, pulse) {
    var links = this.value,
        tree = pulse.source && pulse.source.root,
        out = pulse.fork(pulse.NO_SOURCE),
        lut = {};
    if (!tree) error('TreeLinks transform requires a tree data source.');

    if (pulse.changed(pulse.ADD_REM)) {
      // remove previous links
      out.rem = links; // build lookup table of valid tuples

      pulse.visit(pulse.SOURCE, function (t) {
        return lut[tupleid(t)] = 1;
      }); // generate links for all edges incident on valid tuples

      tree.each(function (node) {
        var t = node.data,
            p = node.parent && node.parent.data;

        if (p && lut[tupleid(t)] && lut[tupleid(p)]) {
          out.add.push(ingest$1({
            source: p,
            target: t
          }));
        }
      });
      this.value = out.add;
    } else if (pulse.changed(pulse.MOD)) {
      // build lookup table of modified tuples
      pulse.visit(pulse.MOD, function (t) {
        return lut[tupleid(t)] = 1;
      }); // gather links incident on modified tuples

      links.forEach(function (link) {
        if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {
          out.mod.push(link);
        }
      });
    }

    return out;
  }
});
var Tiles = {
  binary: binary,
  dice: dice,
  slice: treemap_slice,
  slicedice: sliceDice,
  squarify: squarify,
  resquarify: resquarify
};
var Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
/**
 * Treemap layout.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.field - The value field to size nodes.
 */

function Treemap(params) {
  HierarchyLayout.call(this, params);
}

Treemap.Definition = {
  'type': 'Treemap',
  'metadata': {
    'tree': true,
    'modifies': true
  },
  'params': [{
    'name': 'field',
    'type': 'field'
  }, {
    'name': 'sort',
    'type': 'compare'
  }, {
    'name': 'method',
    'type': 'enum',
    'default': 'squarify',
    'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']
  }, {
    'name': 'padding',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingInner',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingOuter',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingTop',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingRight',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingBottom',
    'type': 'number',
    'default': 0
  }, {
    'name': 'paddingLeft',
    'type': 'number',
    'default': 0
  }, {
    'name': 'ratio',
    'type': 'number',
    'default': 1.618033988749895
  }, {
    'name': 'round',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': Output$3.length,
    'default': Output$3
  }]
};
vega_util_module_inherits(Treemap, HierarchyLayout, {
  /**
   * Treemap layout generator. Adds 'method' and 'ratio' parameters
   * to configure the underlying tile method.
   */
  layout: function layout() {
    var x = treemap();

    x.ratio = function (_) {
      var t = x.tile();
      if (t.ratio) x.tile(t.ratio(_));
    };

    x.method = function (_) {
      if (_has(Tiles, _)) x.tile(Tiles[_]);else error('Unrecognized Treemap layout method: ' + _);
    };

    return x;
  },
  params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
  fields: Output$3
});

;// CONCATENATED MODULE: ./node_modules/vega-label/build/vega-label.module.js





var ALPHA_MASK = 0xff000000; // alpha value equivalent to opacity 0.0625

var INSIDE_OPACITY_IN_ALPHA = 0x10000000;
var INSIDE_OPACITY = 0.0625;

function baseBitmaps($, data) {
  var bitmap = $.bitmap(); // when there is no base mark but data points are to be avoided

  (data || []).forEach(function (d) {
    return bitmap.set($(d.boundary[0]), $(d.boundary[3]));
  });
  return [bitmap, undefined];
}

function markBitmaps($, avoidMarks, labelInside, isGroupArea) {
  // create canvas
  var width = $.width,
      height = $.height,
      border = labelInside || isGroupArea,
      context = domCanvas(width, height).getContext('2d'); // render all marks to be avoided into canvas

  avoidMarks.forEach(function (items) {
    return vega_label_module_draw(context, items, border);
  }); // get canvas buffer, create bitmaps

  var buffer = new Uint32Array(context.getImageData(0, 0, width, height).data.buffer),
      layer1 = $.bitmap(),
      layer2 = border && $.bitmap(); // populate bitmap layers

  var x, y, u, v, alpha;

  for (y = 0; y < height; ++y) {
    for (x = 0; x < width; ++x) {
      alpha = buffer[y * width + x] & ALPHA_MASK;

      if (alpha) {
        u = $(x);
        v = $(y);
        if (!isGroupArea) layer1.set(u, v); // update interior bitmap

        if (border && alpha ^ INSIDE_OPACITY_IN_ALPHA) layer2.set(u, v); // update border bitmap
      }
    }
  }

  return [layer1, layer2];
}

function vega_label_module_draw(context, items, interior) {
  if (!items.length) return;
  var type = items[0].mark.marktype;

  if (type === 'group') {
    items.forEach(function (group) {
      group.items.forEach(function (mark) {
        return vega_label_module_draw(context, mark.items, interior);
      });
    });
  } else {
    Marks[type].draw(context, {
      items: interior ? items.map(prepare) : items
    });
  }
}
/**
 * Prepare item before drawing into canvas (setting stroke and opacity)
 * @param {object} source item to be prepared
 * @returns prepared item
 */


function prepare(source) {
  var item = rederive(source, {});

  if (item.stroke) {
    item.strokeOpacity = 1;
  }

  if (item.fill) {
    item.fillOpacity = INSIDE_OPACITY;
    item.stroke = '#000';
    item.strokeOpacity = 1;
    item.strokeWidth = 2;
  }

  return item;
}

var DIV = 5,
    // bit shift from x, y index to bit vector array index
vega_label_module_MOD = 31,
    // bit mask for index lookup within a bit vector
SIZE = 32,
    // individual bit vector size
RIGHT0 = new Uint32Array(SIZE + 1),
    // left-anchored bit vectors, full -> 0
RIGHT1 = new Uint32Array(SIZE + 1); // right-anchored bit vectors, 0 -> full

RIGHT1[0] = 0;
RIGHT0[0] = ~RIGHT1[0];

for (var i = 1; i <= SIZE; ++i) {
  RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;
  RIGHT0[i] = ~RIGHT1[i];
}

function Bitmap(w, h) {
  var array = new Uint32Array(~~((w * h + SIZE) / SIZE));

  function _set(index, mask) {
    array[index] |= mask;
  }

  function _clear(index, mask) {
    array[index] &= mask;
  }

  return {
    array: array,
    get: function get(x, y) {
      var index = y * w + x;
      return array[index >>> DIV] & 1 << (index & vega_label_module_MOD);
    },
    set: function set(x, y) {
      var index = y * w + x;

      _set(index >>> DIV, 1 << (index & vega_label_module_MOD));
    },
    clear: function clear(x, y) {
      var index = y * w + x;

      _clear(index >>> DIV, ~(1 << (index & vega_label_module_MOD)));
    },
    getRange: function getRange(x, y, x2, y2) {
      var r = y2,
          start,
          end,
          indexStart,
          indexEnd;

      for (; r >= y; --r) {
        start = r * w + x;
        end = r * w + x2;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;

        if (indexStart === indexEnd) {
          if (array[indexStart] & RIGHT0[start & vega_label_module_MOD] & RIGHT1[(end & vega_label_module_MOD) + 1]) {
            return true;
          }
        } else {
          if (array[indexStart] & RIGHT0[start & vega_label_module_MOD]) return true;
          if (array[indexEnd] & RIGHT1[(end & vega_label_module_MOD) + 1]) return true;

          for (var _i = indexStart + 1; _i < indexEnd; ++_i) {
            if (array[_i]) return true;
          }
        }
      }

      return false;
    },
    setRange: function setRange(x, y, x2, y2) {
      var start, end, indexStart, indexEnd, i;

      for (; y <= y2; ++y) {
        start = y * w + x;
        end = y * w + x2;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;

        if (indexStart === indexEnd) {
          _set(indexStart, RIGHT0[start & vega_label_module_MOD] & RIGHT1[(end & vega_label_module_MOD) + 1]);
        } else {
          _set(indexStart, RIGHT0[start & vega_label_module_MOD]);

          _set(indexEnd, RIGHT1[(end & vega_label_module_MOD) + 1]);

          for (i = indexStart + 1; i < indexEnd; ++i) {
            _set(i, 0xffffffff);
          }
        }
      }
    },
    clearRange: function clearRange(x, y, x2, y2) {
      var start, end, indexStart, indexEnd, i;

      for (; y <= y2; ++y) {
        start = y * w + x;
        end = y * w + x2;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;

        if (indexStart === indexEnd) {
          _clear(indexStart, RIGHT1[start & vega_label_module_MOD] | RIGHT0[(end & vega_label_module_MOD) + 1]);
        } else {
          _clear(indexStart, RIGHT1[start & vega_label_module_MOD]);

          _clear(indexEnd, RIGHT0[(end & vega_label_module_MOD) + 1]);

          for (i = indexStart + 1; i < indexEnd; ++i) {
            _clear(i, 0);
          }
        }
      }
    },
    outOfBounds: function outOfBounds(x, y, x2, y2) {
      return x < 0 || y < 0 || y2 >= h || x2 >= w;
    }
  };
}

function scaler(width, height, padding) {
  var ratio = Math.max(1, Math.sqrt(width * height / 1e6)),
      w = ~~((width + 2 * padding + ratio) / ratio),
      h = ~~((height + 2 * padding + ratio) / ratio),
      scale = function scale(_) {
    return ~~((_ + padding) / ratio);
  };

  scale.invert = function (_) {
    return _ * ratio - padding;
  };

  scale.bitmap = function () {
    return Bitmap(w, h);
  };

  scale.ratio = ratio;
  scale.padding = padding;
  scale.width = width;
  scale.height = height;
  return scale;
}

function placeAreaLabelNaive($, bitmaps, avoidBaseMark, markIndex) {
  var width = $.width,
      height = $.height; // try to place a label within an input area mark

  return function (d) {
    var items = d.datum.datum.items[markIndex].items,
        // area points
    n = items.length,
        // number of points
    textHeight = d.datum.fontSize,
        // label width
    textWidth = textMetrics.width(d.datum, d.datum.text); // label height

    var maxAreaWidth = 0,
        x1,
        x2,
        y1,
        y2,
        x,
        y,
        areaWidth; // for each area sample point

    for (var _i2 = 0; _i2 < n; ++_i2) {
      x1 = items[_i2].x;
      y1 = items[_i2].y;
      x2 = items[_i2].x2 === undefined ? x1 : items[_i2].x2;
      y2 = items[_i2].y2 === undefined ? y1 : items[_i2].y2;
      x = (x1 + x2) / 2;
      y = (y1 + y2) / 2;
      areaWidth = Math.abs(x2 - x1 + y2 - y1);

      if (areaWidth >= maxAreaWidth) {
        maxAreaWidth = areaWidth;
        d.x = x;
        d.y = y;
      }
    }

    x = textWidth / 2;
    y = textHeight / 2;
    x1 = d.x - x;
    x2 = d.x + x;
    y1 = d.y - y;
    y2 = d.y + y;
    d.align = 'center';

    if (x1 < 0 && x2 <= width) {
      d.align = 'left';
    } else if (0 <= x1 && width < x2) {
      d.align = 'right';
    }

    d.baseline = 'middle';

    if (y1 < 0 && y2 <= height) {
      d.baseline = 'top';
    } else if (0 <= y1 && height < y2) {
      d.baseline = 'bottom';
    }

    return true;
  };
}

function outOfBounds(x, y, textWidth, textHeight, width, height) {
  var r = textWidth / 2;
  return x - r < 0 || x + r > width || y - (r = textHeight / 2) < 0 || y + r > height;
}

function collision($, x, y, textHeight, textWidth, h, bm0, bm1) {
  var w = textWidth * h / (textHeight * 2),
      x1 = $(x - w),
      x2 = $(x + w),
      y1 = $(y - (h = h / 2)),
      y2 = $(y + h);
  return bm0.outOfBounds(x1, y1, x2, y2) || bm0.getRange(x1, y1, x2, y2) || bm1 && bm1.getRange(x1, y1, x2, y2);
}

function placeAreaLabelReducedSearch($, bitmaps, avoidBaseMark, markIndex) {
  var width = $.width,
      height = $.height,
      bm0 = bitmaps[0],
      // where labels have been placed
  bm1 = bitmaps[1]; // area outlines

  function tryLabel(_x, _y, maxSize, textWidth, textHeight) {
    var x = $.invert(_x),
        y = $.invert(_y);
    var lo = maxSize,
        hi = height,
        mid;

    if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
      // if the label fits at the current sample point,
      // perform binary search to find the largest font size that fits
      while (hi - lo >= 1) {
        mid = (lo + hi) / 2;

        if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {
          hi = mid;
        } else {
          lo = mid;
        }
      } // place label if current lower bound exceeds prior max font size


      if (lo > maxSize) {
        return [x, y, lo, true];
      }
    }
  } // try to place a label within an input area mark


  return function (d) {
    var items = d.datum.datum.items[markIndex].items,
        // area points
    n = items.length,
        // number of points
    textHeight = d.datum.fontSize,
        // label width
    textWidth = textMetrics.width(d.datum, d.datum.text); // label height

    var maxSize = avoidBaseMark ? textHeight : 0,
        labelPlaced = false,
        labelPlaced2 = false,
        maxAreaWidth = 0,
        x1,
        x2,
        y1,
        y2,
        x,
        y,
        _x,
        _y,
        _x1,
        _xMid,
        _x2,
        _y1,
        _yMid,
        _y2,
        areaWidth,
        result,
        swapTmp; // for each area sample point


    for (var _i3 = 0; _i3 < n; ++_i3) {
      x1 = items[_i3].x;
      y1 = items[_i3].y;
      x2 = items[_i3].x2 === undefined ? x1 : items[_i3].x2;
      y2 = items[_i3].y2 === undefined ? y1 : items[_i3].y2;

      if (x1 > x2) {
        swapTmp = x1;
        x1 = x2;
        x2 = swapTmp;
      }

      if (y1 > y2) {
        swapTmp = y1;
        y1 = y2;
        y2 = swapTmp;
      }

      _x1 = $(x1);
      _x2 = $(x2);
      _xMid = ~~((_x1 + _x2) / 2);
      _y1 = $(y1);
      _y2 = $(y2);
      _yMid = ~~((_y1 + _y2) / 2); // search along the line from mid point between the 2 border to lower border

      for (_x = _xMid; _x >= _x1; --_x) {
        for (_y = _yMid; _y >= _y1; --_y) {
          result = tryLabel(_x, _y, maxSize, textWidth, textHeight);

          if (result) {
            var _result = result;

            var _result2 = (0,slicedToArray/* default */.Z)(_result, 4);

            d.x = _result2[0];
            d.y = _result2[1];
            maxSize = _result2[2];
            labelPlaced = _result2[3];
          }
        }
      } // search along the line from mid point between the 2 border to upper border


      for (_x = _xMid; _x <= _x2; ++_x) {
        for (_y = _yMid; _y <= _y2; ++_y) {
          result = tryLabel(_x, _y, maxSize, textWidth, textHeight);

          if (result) {
            var _result3 = result;

            var _result4 = (0,slicedToArray/* default */.Z)(_result3, 4);

            d.x = _result4[0];
            d.y = _result4[1];
            maxSize = _result4[2];
            labelPlaced = _result4[3];
          }
        }
      } // place label at slice center if not placed through other means
      // and if we're not avoiding overlap with other areas


      if (!labelPlaced && !avoidBaseMark) {
        // one span is zero, hence we can add
        areaWidth = Math.abs(x2 - x1 + y2 - y1);
        x = (x1 + x2) / 2;
        y = (y1 + y2) / 2; // place label if it fits and improves the max area width

        if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
          maxAreaWidth = areaWidth;
          d.x = x;
          d.y = y;
          labelPlaced2 = true;
        }
      }
    } // record current label placement information, update label bitmap


    if (labelPlaced || labelPlaced2) {
      x = textWidth / 2;
      y = textHeight / 2;
      bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
      d.align = 'center';
      d.baseline = 'middle';
      return true;
    } else {
      return false;
    }
  };
}

var X_DIR = [-1, -1, 1, 1];
var Y_DIR = [-1, 1, -1, 1];

function placeAreaLabelFloodFill($, bitmaps, avoidBaseMark, markIndex) {
  var width = $.width,
      height = $.height,
      bm0 = bitmaps[0],
      // where labels have been placed
  bm1 = bitmaps[1],
      // area outlines
  bm2 = $.bitmap(); // flood-fill visitations
  // try to place a label within an input area mark

  return function (d) {
    var items = d.datum.datum.items[markIndex].items,
        // area points
    n = items.length,
        // number of points
    textHeight = d.datum.fontSize,
        // label width
    textWidth = textMetrics.width(d.datum, d.datum.text),
        // label height
    stack = []; // flood fill stack

    var maxSize = avoidBaseMark ? textHeight : 0,
        labelPlaced = false,
        labelPlaced2 = false,
        maxAreaWidth = 0,
        x1,
        x2,
        y1,
        y2,
        x,
        y,
        _x,
        _y,
        lo,
        hi,
        mid,
        areaWidth; // for each area sample point


    for (var _i4 = 0; _i4 < n; ++_i4) {
      x1 = items[_i4].x;
      y1 = items[_i4].y;
      x2 = items[_i4].x2 === undefined ? x1 : items[_i4].x2;
      y2 = items[_i4].y2 === undefined ? y1 : items[_i4].y2; // add scaled center point to stack

      stack.push([$((x1 + x2) / 2), $((y1 + y2) / 2)]); // perform flood fill, visit points

      while (stack.length) {
        var _stack$pop = stack.pop();

        var _stack$pop2 = (0,slicedToArray/* default */.Z)(_stack$pop, 2);

        _x = _stack$pop2[0];
        _y = _stack$pop2[1];
        // exit if point already marked
        if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue; // mark point in flood fill bitmap
        // add search points for all (in bound) directions

        bm2.set(_x, _y);

        for (var j = 0; j < 4; ++j) {
          x = _x + X_DIR[j];
          y = _y + Y_DIR[j];
          if (!bm2.outOfBounds(x, y, x, y)) stack.push([x, y]);
        } // unscale point back to x, y space


        x = $.invert(_x);
        y = $.invert(_y);
        lo = maxSize;
        hi = height; // TODO: make this bound smaller

        if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
          // if the label fits at the current sample point,
          // perform binary search to find the largest font size that fits
          while (hi - lo >= 1) {
            mid = (lo + hi) / 2;

            if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {
              hi = mid;
            } else {
              lo = mid;
            }
          } // place label if current lower bound exceeds prior max font size


          if (lo > maxSize) {
            d.x = x;
            d.y = y;
            maxSize = lo;
            labelPlaced = true;
          }
        }
      } // place label at slice center if not placed through other means
      // and if we're not avoiding overlap with other areas


      if (!labelPlaced && !avoidBaseMark) {
        // one span is zero, hence we can add
        areaWidth = Math.abs(x2 - x1 + y2 - y1);
        x = (x1 + x2) / 2;
        y = (y1 + y2) / 2; // place label if it fits and improves the max area width

        if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {
          maxAreaWidth = areaWidth;
          d.x = x;
          d.y = y;
          labelPlaced2 = true;
        }
      }
    } // record current label placement information, update label bitmap


    if (labelPlaced || labelPlaced2) {
      x = textWidth / 2;
      y = textHeight / 2;
      bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));
      d.align = 'center';
      d.baseline = 'middle';
      return true;
    } else {
      return false;
    }
  };
}

var Aligns = ['right', 'center', 'left'],
    Baselines = ['bottom', 'middle', 'top'];

function placeMarkLabel($, bitmaps, anchors, offsets) {
  var width = $.width,
      height = $.height,
      bm0 = bitmaps[0],
      bm1 = bitmaps[1],
      n = offsets.length;
  return function (d) {
    var boundary = d.boundary,
        textHeight = d.datum.fontSize; // can not be placed if the mark is not visible in the graph bound

    if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) {
      return false;
    }

    var textWidth = 0,
        dx,
        dy,
        isInside,
        sizeFactor,
        insideFactor,
        x1,
        x2,
        y1,
        y2,
        xc,
        yc,
        _x1,
        _x2,
        _y1,
        _y2; // for each anchor and offset


    for (var _i5 = 0; _i5 < n; ++_i5) {
      dx = (anchors[_i5] & 0x3) - 1;
      dy = (anchors[_i5] >>> 0x2 & 0x3) - 1;
      isInside = dx === 0 && dy === 0 || offsets[_i5] < 0;
      sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
      insideFactor = offsets[_i5] < 0 ? -1 : 1;
      x1 = boundary[1 + dx] + offsets[_i5] * dx * sizeFactor;
      yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets[_i5] * dy * sizeFactor;
      y1 = yc - textHeight / 2;
      y2 = yc + textHeight / 2;
      _x1 = $(x1);
      _y1 = $(y1);
      _y2 = $(y2);

      if (!textWidth) {
        // to avoid finding width of text label,
        if (!test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) {
          // skip this anchor/offset option if we fail to place a label with 1px width
          continue;
        } else {
          // Otherwise, find the label width
          textWidth = textMetrics.width(d.datum, d.datum.text);
        }
      }

      xc = x1 + insideFactor * textWidth * dx / 2;
      x1 = xc - textWidth / 2;
      x2 = xc + textWidth / 2;
      _x1 = $(x1);
      _x2 = $(x2);

      if (test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {
        // place label if the position is placeable
        d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;
        d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;
        d.align = Aligns[dx * insideFactor + 1];
        d.baseline = Baselines[dy * insideFactor + 1];
        bm0.setRange(_x1, _y1, _x2, _y2);
        return true;
      }
    }

    return false;
  };
} // Test if a label with the given dimensions can be added without overlap


function test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {
  return !(bm0.outOfBounds(_x1, _y1, _x2, _y2) || (isInside && bm1 ? bm1.getRange(_x1, _y1, _x2, _y2) || !isInMarkBound(x1, y1, x2, y2, boundary) : bm0.getRange(_x1, _y1, _x2, _y2)));
}

function isInMarkBound(x1, y1, x2, y2, boundary) {
  return boundary[0] <= x1 && x2 <= boundary[2] && boundary[3] <= y1 && y2 <= boundary[5];
}

var TOP = 0x0,
    MIDDLE = 0x4,
    BOTTOM = 0x8,
    LEFT = 0x0,
    CENTER = 0x1,
    RIGHT = 0x2; // Mapping from text anchor to number representation

var anchorCode = {
  'top-left': TOP + LEFT,
  'top': TOP + CENTER,
  'top-right': TOP + RIGHT,
  'left': MIDDLE + LEFT,
  'middle': MIDDLE + CENTER,
  'right': MIDDLE + RIGHT,
  'bottom-left': BOTTOM + LEFT,
  'bottom': BOTTOM + CENTER,
  'bottom-right': BOTTOM + RIGHT
};
var placeAreaLabel = {
  'naive': placeAreaLabelNaive,
  'reduced-search': placeAreaLabelReducedSearch,
  'floodfill': placeAreaLabelFloodFill
};

function labelLayout(texts, size, compare, offset, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method) {
  // early exit for empty data
  if (!texts.length) return texts;
  var positions = Math.max(offset.length, anchor.length),
      offsets = getOffsets(offset, positions),
      anchors = getAnchors(anchor, positions),
      marktype = markType(texts[0].datum),
      grouptype = marktype === 'group' && texts[0].datum.items[markIndex].marktype,
      isGroupArea = grouptype === 'area',
      boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex),
      $ = scaler(size[0], size[1], padding),
      isNaiveGroupArea = isGroupArea && method === 'naive'; // prepare text mark data for placing

  var data = texts.map(function (d) {
    return {
      datum: d,
      opacity: 0,
      x: undefined,
      y: undefined,
      align: undefined,
      baseline: undefined,
      boundary: boundary(d)
    };
  });
  var bitmaps;

  if (!isNaiveGroupArea) {
    // sort labels in priority order, if comparator is provided
    if (compare) {
      data.sort(function (a, b) {
        return compare(a.datum, b.datum);
      });
    } // flag indicating if label can be placed inside its base mark


    var labelInside = false;

    for (var _i6 = 0; _i6 < anchors.length && !labelInside; ++_i6) {
      // label inside if anchor is at center
      // label inside if offset to be inside the mark bound
      labelInside = anchors[_i6] === 0x5 || offsets[_i6] < 0;
    } // extract data information from base mark when base mark is to be avoided
    // base mark is implicitly avoided if it is a group area


    if (marktype && (avoidBaseMark || isGroupArea)) {
      avoidMarks = [texts.map(function (d) {
        return d.datum;
      })].concat(avoidMarks);
    } // generate bitmaps for layout calculation


    bitmaps = avoidMarks.length ? markBitmaps($, avoidMarks, labelInside, isGroupArea) : baseBitmaps($, avoidBaseMark && data);
  } // generate label placement function


  var place = isGroupArea ? placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($, bitmaps, anchors, offsets); // place all labels

  data.forEach(function (d) {
    return d.opacity = +place(d);
  });
  return data;
}

function getOffsets(_, count) {
  var offsets = new Float64Array(count),
      n = _.length;

  for (var _i7 = 0; _i7 < n; ++_i7) {
    offsets[_i7] = _[_i7] || 0;
  }

  for (var _i8 = n; _i8 < count; ++_i8) {
    offsets[_i8] = offsets[n - 1];
  }

  return offsets;
}

function getAnchors(_, count) {
  var anchors = new Int8Array(count),
      n = _.length;

  for (var _i9 = 0; _i9 < n; ++_i9) {
    anchors[_i9] |= anchorCode[_[_i9]];
  }

  for (var _i10 = n; _i10 < count; ++_i10) {
    anchors[_i10] = anchors[n - 1];
  }

  return anchors;
}

function markType(item) {
  return item && item.mark && item.mark.marktype;
}
/**
 * Factory function for function for getting base mark boundary, depending
 * on mark and group type. When mark type is undefined, line or area: boundary
 * is the coordinate of each data point. When base mark is grouped line,
 * boundary is either at the beginning or end of the line depending on the
 * value of lineAnchor. Otherwise, use bounds of base mark.
 */


function markBoundary(marktype, grouptype, lineAnchor, markIndex) {
  var xy = function xy(d) {
    return [d.x, d.x, d.x, d.y, d.y, d.y];
  };

  if (!marktype) {
    return xy; // no reactive geometry
  } else if (marktype === 'line' || marktype === 'area') {
    return function (d) {
      return xy(d.datum);
    };
  } else if (grouptype === 'line') {
    return function (d) {
      var items = d.datum.items[markIndex].items;
      return xy(items.length ? items[lineAnchor === 'start' ? 0 : items.length - 1] : {
        x: NaN,
        y: NaN
      });
    };
  } else {
    return function (d) {
      var b = d.datum.bounds;
      return [b.x1, (b.x1 + b.x2) / 2, b.x2, b.y1, (b.y1 + b.y2) / 2, b.y2];
    };
  }
}

var vega_label_module_Output = ['x', 'y', 'opacity', 'align', 'baseline'];
var Anchors = ['top-left', 'left', 'bottom-left', 'top', 'bottom', 'top-right', 'right', 'bottom-right'];
/**
 * Compute text label layout to annotate marks.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.
 * @param {function(*,*): number} [params.sort] - An optional
 *   comparator function for sorting label data in priority order.
 * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.
 *   The available options are 'top-left', 'left', 'bottom-left', 'top',
 *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.
 * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.
 *   This parameter  is parallel to the list of anchor points.
 * @param {number} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.
 * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor
 *   position for labels. One of 'start' or 'end'.
 * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating
 *   which mark within the group should be labeled.
 * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label
 *   layout should avoid overlap.
 * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid
 *   overlap with the underlying base mark being labeled.
 * @param {string} [params.method='naive'] - For area make labels only, a method for
 *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.
 * @param {Array<string>} [params.as] - The output fields written by the transform.
 *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].
 */

function Label(params) {
  Transform.call(this, null, params);
}

Label.Definition = {
  type: 'Label',
  metadata: {
    modifies: true
  },
  params: [{
    name: 'size',
    type: 'number',
    array: true,
    length: 2,
    required: true
  }, {
    name: 'sort',
    type: 'compare'
  }, {
    name: 'anchor',
    type: 'string',
    array: true,
    default: Anchors
  }, {
    name: 'offset',
    type: 'number',
    array: true,
    default: [1]
  }, {
    name: 'padding',
    type: 'number',
    default: 0
  }, {
    name: 'lineAnchor',
    type: 'string',
    values: ['start', 'end'],
    default: 'end'
  }, {
    name: 'markIndex',
    type: 'number',
    default: 0
  }, {
    name: 'avoidBaseMark',
    type: 'boolean',
    default: true
  }, {
    name: 'avoidMarks',
    type: 'data',
    array: true
  }, {
    name: 'method',
    type: 'string',
    default: 'naive'
  }, {
    name: 'as',
    type: 'string',
    array: true,
    length: vega_label_module_Output.length,
    default: vega_label_module_Output
  }]
};
vega_util_module_inherits(Label, Transform, {
  transform: function transform(_, pulse) {
    function modp(param) {
      var p = _[param];
      return isFunction(p) && pulse.modified(p.fields);
    }

    var mod = _.modified();

    if (!(mod || pulse.changed(pulse.ADD_REM) || modp('sort'))) return;

    if (!_.size || _.size.length !== 2) {
      error('Size parameter should be specified as a [width, height] array.');
    }

    var as = _.as || vega_label_module_Output; // run label layout

    labelLayout(pulse.materialize(pulse.SOURCE).source, _.size, _.sort, array(_.offset || 1), array(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark === false ? false : true, _.lineAnchor || 'end', _.markIndex || 0, _.padding || 0, _.method || 'naive').forEach(function (l) {
      // write layout results to data stream
      var t = l.datum;
      t[as[0]] = l.x;
      t[as[1]] = l.y;
      t[as[2]] = l.opacity;
      t[as[3]] = l.align;
      t[as[4]] = l.baseline;
    });
    return pulse.reflow(mod).modifies(as);
  }
});

;// CONCATENATED MODULE: ./node_modules/vega-regression/build/vega-regression.module.js




function vega_regression_module_partition(data, groupby) {
  var groups = [],
      get = function get(f) {
    return f(t);
  },
      map,
      i,
      n,
      t,
      k,
      g; // partition data points into stack groups


  if (groupby == null) {
    groups.push(data);
  } else {
    for (map = {}, i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = groupby.map(get);
      g = map[k];

      if (!g) {
        map[k] = g = [];
        g.dims = k;
        groups.push(g);
      }

      g.push(t);
    }
  }

  return groups;
}
/**
 * Compute locally-weighted regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
 */


function Loess(params) {
  Transform.call(this, null, params);
}

Loess.Definition = {
  'type': 'Loess',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'x',
    'type': 'field',
    'required': true
  }, {
    'name': 'y',
    'type': 'field',
    'required': true
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'bandwidth',
    'type': 'number',
    'default': 0.3
  }, {
    'name': 'as',
    'type': 'string',
    'array': true
  }]
};
vega_util_module_inherits(Loess, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var source = pulse.materialize(pulse.SOURCE).source,
          groups = vega_regression_module_partition(source, _.groupby),
          names = (_.groupby || []).map(accessorName),
          m = names.length,
          as = _.as || [accessorName(_.x), accessorName(_.y)],
          values = [];
      groups.forEach(function (g) {
        loess(g, _.x, _.y, _.bandwidth || 0.3).forEach(function (p) {
          var t = {};

          for (var i = 0; i < m; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = p[0];
          t[as[1]] = p[1];
          values.push(ingest$1(t));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  }
});
var vega_regression_module_Methods = {
  linear: linear,
  log: vega_statistics_module_log,
  exp: vega_statistics_module_exp,
  pow: vega_statistics_module_pow,
  quad: quad,
  poly: poly
};

var degreesOfFreedom = function degreesOfFreedom(method, order) {
  return method === 'poly' ? order : method === 'quad' ? 2 : 1;
};
/**
 * Compute regression fits for one or more data groups.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {function(object): *} params.x - An accessor for the predictor data field.
 * @param {function(object): *} params.y - An accessor for the predicted data field.
 * @param {string} [params.method='linear'] - The regression method to apply.
 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
 * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
 * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
 */


function Regression(params) {
  Transform.call(this, null, params);
}

Regression.Definition = {
  'type': 'Regression',
  'metadata': {
    'generates': true
  },
  'params': [{
    'name': 'x',
    'type': 'field',
    'required': true
  }, {
    'name': 'y',
    'type': 'field',
    'required': true
  }, {
    'name': 'groupby',
    'type': 'field',
    'array': true
  }, {
    'name': 'method',
    'type': 'string',
    'default': 'linear',
    'values': Object.keys(vega_regression_module_Methods)
  }, {
    'name': 'order',
    'type': 'number',
    'default': 3
  }, {
    'name': 'extent',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'params',
    'type': 'boolean',
    'default': false
  }, {
    'name': 'as',
    'type': 'string',
    'array': true
  }]
};
vega_util_module_inherits(Regression, Transform, {
  transform: function transform(_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var source = pulse.materialize(pulse.SOURCE).source,
          groups = vega_regression_module_partition(source, _.groupby),
          names = (_.groupby || []).map(accessorName),
          method = _.method || 'linear',
          order = _.order || 3,
          dof = degreesOfFreedom(method, order),
          as = _.as || [accessorName(_.x), accessorName(_.y)],
          fit = vega_regression_module_Methods[method],
          values = [];
      var domain = _.extent;

      if (!_has(vega_regression_module_Methods, method)) {
        error('Invalid regression method: ' + method);
      }

      if (domain != null) {
        if (method === 'log' && domain[0] <= 0) {
          pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');
          domain = null;
        }
      }

      groups.forEach(function (g) {
        var n = g.length;

        if (n <= dof) {
          pulse.dataflow.warn('Skipping regression with more parameters than data points.');
          return;
        }

        var model = fit(g, _.x, _.y, order);

        if (_.params) {
          // if parameter vectors requested return those
          values.push(ingest$1({
            keys: g.dims,
            coef: model.coef,
            rSquared: model.rSquared
          }));
          return;
        }

        var dom = domain || extent(g, _.x),
            add = function add(p) {
          var t = {};

          for (var i = 0; i < names.length; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = p[0];
          t[as[1]] = p[1];
          values.push(ingest$1(t));
        };

        if (method === 'linear') {
          // for linear regression we only need the end points
          dom.forEach(function (x) {
            return add([x, model.predict(x)]);
          });
        } else {
          // otherwise return trend line sample points
          sampleCurve(model.predict, dom, 25, 200).forEach(add);
        }
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  }
});

;// CONCATENATED MODULE: ./node_modules/delaunator/index.js


var delaunator_EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);

var Delaunator = /*#__PURE__*/function () {
  function Delaunator(coords) {
    (0,classCallCheck/* default */.Z)(this, Delaunator);

    var n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');
    this.coords = coords; // arrays that will store the triangulation graph

    var maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull

    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n); // edge to prev edge

    this._hullNext = new Uint32Array(n); // edge to next edge

    this._hullTri = new Uint32Array(n); // edge to adjacent triangle

    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
    // temporary arrays for sorting points

    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }

  (0,createClass/* default */.Z)(Delaunator, [{
    key: "update",
    value: function update() {
      var coords = this.coords,
          hullPrev = this._hullPrev,
          hullNext = this._hullNext,
          hullTri = this._hullTri,
          hullHash = this._hullHash;
      var n = coords.length >> 1; // populate an array of point indices; calculate input data bbox

      var minX = Infinity;
      var minY = Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;

      for (var i = 0; i < n; i++) {
        var x = coords[2 * i];
        var y = coords[2 * i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
        this._ids[i] = i;
      }

      var cx = (minX + maxX) / 2;
      var cy = (minY + maxY) / 2;
      var minDist = Infinity;
      var i0, i1, i2; // pick a seed point close to the center

      for (var _i = 0; _i < n; _i++) {
        var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);

        if (d < minDist) {
          i0 = _i;
          minDist = d;
        }
      }

      var i0x = coords[2 * i0];
      var i0y = coords[2 * i0 + 1];
      minDist = Infinity; // find the point closest to the seed

      for (var _i2 = 0; _i2 < n; _i2++) {
        if (_i2 === i0) continue;

        var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);

        if (_d < minDist && _d > 0) {
          i1 = _i2;
          minDist = _d;
        }
      }

      var i1x = coords[2 * i1];
      var i1y = coords[2 * i1 + 1];
      var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two

      for (var _i3 = 0; _i3 < n; _i3++) {
        if (_i3 === i0 || _i3 === i1) continue;
        var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);

        if (r < minRadius) {
          i2 = _i3;
          minRadius = r;
        }
      }

      var i2x = coords[2 * i2];
      var i2y = coords[2 * i2 + 1];

      if (minRadius === Infinity) {
        // order collinear points by dx (or dy if all x are identical)
        // and return the list as a hull
        for (var _i4 = 0; _i4 < n; _i4++) {
          this._dists[_i4] = coords[2 * _i4] - coords[0] || coords[2 * _i4 + 1] - coords[1];
        }

        quicksort(this._ids, this._dists, 0, n - 1);
        var hull = new Uint32Array(n);
        var j = 0;

        for (var _i5 = 0, d0 = -Infinity; _i5 < n; _i5++) {
          var id = this._ids[_i5];

          if (this._dists[id] > d0) {
            hull[j++] = id;
            d0 = this._dists[id];
          }
        }

        this.hull = hull.subarray(0, j);
        this.triangles = new Uint32Array(0);
        this.halfedges = new Uint32Array(0);
        return;
      } // swap the order of the seed points for counter-clockwise orientation


      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
        var _i6 = i1;
        var _x = i1x;
        var _y = i1y;
        i1 = i2;
        i1x = i2x;
        i1y = i2y;
        i2 = _i6;
        i2x = _x;
        i2y = _y;
      }

      var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
      this._cx = center.x;
      this._cy = center.y;

      for (var _i7 = 0; _i7 < n; _i7++) {
        this._dists[_i7] = dist(coords[2 * _i7], coords[2 * _i7 + 1], center.x, center.y);
      } // sort the points by distance from the seed triangle circumcenter


      quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull

      this._hullStart = i0;
      var hullSize = 3;
      hullNext[i0] = hullPrev[i2] = i1;
      hullNext[i1] = hullPrev[i0] = i2;
      hullNext[i2] = hullPrev[i1] = i0;
      hullTri[i0] = 0;
      hullTri[i1] = 1;
      hullTri[i2] = 2;
      hullHash.fill(-1);
      hullHash[this._hashKey(i0x, i0y)] = i0;
      hullHash[this._hashKey(i1x, i1y)] = i1;
      hullHash[this._hashKey(i2x, i2y)] = i2;
      this.trianglesLen = 0;

      this._addTriangle(i0, i1, i2, -1, -1, -1);

      for (var k = 0, xp, yp; k < this._ids.length; k++) {
        var _i8 = this._ids[k];
        var _x2 = coords[2 * _i8];
        var _y2 = coords[2 * _i8 + 1]; // skip near-duplicate points

        if (k > 0 && Math.abs(_x2 - xp) <= delaunator_EPSILON && Math.abs(_y2 - yp) <= delaunator_EPSILON) continue;
        xp = _x2;
        yp = _y2; // skip seed triangle points

        if (_i8 === i0 || _i8 === i1 || _i8 === i2) continue; // find a visible edge on the convex hull using edge hash

        var start = 0;

        for (var _j = 0, key = this._hashKey(_x2, _y2); _j < this._hashSize; _j++) {
          start = hullHash[(key + _j) % this._hashSize];
          if (start !== -1 && start !== hullNext[start]) break;
        }

        start = hullPrev[start];
        var e = start,
            q = void 0;

        while (q = hullNext[e], !orient(_x2, _y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
          e = q;

          if (e === start) {
            e = -1;
            break;
          }
        }

        if (e === -1) continue; // likely a near-duplicate point; skip it
        // add the first triangle from the point

        var t = this._addTriangle(e, _i8, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition


        hullTri[_i8] = this._legalize(t + 2);
        hullTri[e] = t; // keep track of boundary triangles on the hull

        hullSize++; // walk forward through the hull, adding more triangles and flipping recursively

        var _n = hullNext[e];

        while (q = hullNext[_n], orient(_x2, _y2, coords[2 * _n], coords[2 * _n + 1], coords[2 * q], coords[2 * q + 1])) {
          t = this._addTriangle(_n, _i8, q, hullTri[_i8], -1, hullTri[_n]);
          hullTri[_i8] = this._legalize(t + 2);
          hullNext[_n] = _n; // mark as removed

          hullSize--;
          _n = q;
        } // walk backward from the other side, adding more triangles and flipping


        if (e === start) {
          while (q = hullPrev[e], orient(_x2, _y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
            t = this._addTriangle(q, _i8, e, -1, hullTri[e], hullTri[q]);

            this._legalize(t + 2);

            hullTri[q] = t;
            hullNext[e] = e; // mark as removed

            hullSize--;
            e = q;
          }
        } // update the hull indices


        this._hullStart = hullPrev[_i8] = e;
        hullNext[e] = hullPrev[_n] = _i8;
        hullNext[_i8] = _n; // save the two new edges in the hash table

        hullHash[this._hashKey(_x2, _y2)] = _i8;
        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
      }

      this.hull = new Uint32Array(hullSize);

      for (var _i9 = 0, _e = this._hullStart; _i9 < hullSize; _i9++) {
        this.hull[_i9] = _e;
        _e = hullNext[_e];
      } // trim typed triangle mesh arrays


      this.triangles = this._triangles.subarray(0, this.trianglesLen);
      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
  }, {
    key: "_hashKey",
    value: function _hashKey(x, y) {
      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
  }, {
    key: "_legalize",
    value: function _legalize(a) {
      var triangles = this._triangles,
          halfedges = this._halfedges,
          coords = this.coords;
      var i = 0;
      var ar = 0; // recursion eliminated with a fixed-size stack

      while (true) {
        var b = halfedges[a];
        /* if the pair of triangles doesn't satisfy the Delaunay condition
         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
         * then do the same check/flip recursively for the new pair of triangles
         *
         *           pl                    pl
         *          /||\                  /  \
         *       al/ || \bl            al/    \a
         *        /  ||  \              /      \
         *       /  a||b  \    flip    /___ar___\
         *     p0\   ||   /p1   =>   p0\---bl---/p1
         *        \  ||  /              \      /
         *       ar\ || /br             b\    /br
         *          \||/                  \  /
         *           pr                    pr
         */

        var a0 = a - a % 3;
        ar = a0 + (a + 2) % 3;

        if (b === -1) {
          // convex hull edge
          if (i === 0) break;
          a = EDGE_STACK[--i];
          continue;
        }

        var b0 = b - b % 3;
        var al = a0 + (a + 1) % 3;
        var bl = b0 + (b + 2) % 3;
        var p0 = triangles[ar];
        var pr = triangles[a];
        var pl = triangles[al];
        var p1 = triangles[bl];
        var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);

        if (illegal) {
          triangles[a] = p1;
          triangles[b] = p0;
          var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference

          if (hbl === -1) {
            var e = this._hullStart;

            do {
              if (this._hullTri[e] === bl) {
                this._hullTri[e] = a;
                break;
              }

              e = this._hullPrev[e];
            } while (e !== this._hullStart);
          }

          this._link(a, hbl);

          this._link(b, halfedges[ar]);

          this._link(ar, bl);

          var br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input

          if (i < EDGE_STACK.length) {
            EDGE_STACK[i++] = br;
          }
        } else {
          if (i === 0) break;
          a = EDGE_STACK[--i];
        }
      }

      return ar;
    }
  }, {
    key: "_link",
    value: function _link(a, b) {
      this._halfedges[a] = b;
      if (b !== -1) this._halfedges[b] = a;
    } // add a new triangle given vertex indices and adjacent half-edge ids

  }, {
    key: "_addTriangle",
    value: function _addTriangle(i0, i1, i2, a, b, c) {
      var t = this.trianglesLen;
      this._triangles[t] = i0;
      this._triangles[t + 1] = i1;
      this._triangles[t + 2] = i2;

      this._link(t, a);

      this._link(t + 1, b);

      this._link(t + 2, c);

      this.trianglesLen += 3;
      return t;
    }
  }], [{
    key: "from",
    value: function from(points) {
      var getX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetX;
      var getY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetY;
      var n = points.length;
      var coords = new Float64Array(n * 2);

      for (var i = 0; i < n; i++) {
        var p = points[i];
        coords[2 * i] = getX(p);
        coords[2 * i + 1] = getY(p);
      }

      return new Delaunator(coords);
    }
  }]);

  return Delaunator;
}(); // monotonically increases with real angle, but doesn't need expensive trigonometry




function pseudoAngle(dx, dy) {
  var p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}

function dist(ax, ay, bx, by) {
  var dx = ax - bx;
  var dy = ay - by;
  return dx * dx + dy * dy;
} // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check


function orientIfSure(px, py, rx, ry, qx, qy) {
  var l = (ry - py) * (qx - px);
  var r = (rx - px) * (qy - py);
  return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
} // a more robust orientation test that's stable in a given triangle (to fix robustness issues)


function orient(rx, ry, qx, qy, px, py) {
  var sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
  return sign < 0;
}

function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  var dx = ax - px;
  var dy = ay - py;
  var ex = bx - px;
  var ey = by - py;
  var fx = cx - px;
  var fy = cy - py;
  var ap = dx * dx + dy * dy;
  var bp = ex * ex + ey * ey;
  var cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}

function circumradius(ax, ay, bx, by, cx, cy) {
  var dx = bx - ax;
  var dy = by - ay;
  var ex = cx - ax;
  var ey = cy - ay;
  var bl = dx * dx + dy * dy;
  var cl = ex * ex + ey * ey;
  var d = 0.5 / (dx * ey - dy * ex);
  var x = (ey * bl - dy * cl) * d;
  var y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}

function circumcenter(ax, ay, bx, by, cx, cy) {
  var dx = bx - ax;
  var dy = by - ay;
  var ex = cx - ax;
  var ey = cy - ay;
  var bl = dx * dx + dy * dy;
  var cl = ex * ex + ey * ey;
  var d = 0.5 / (dx * ey - dy * ex);
  var x = ax + (ey * bl - dy * cl) * d;
  var y = ay + (dx * cl - ex * bl) * d;
  return {
    x: x,
    y: y
  };
}

function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (var i = left + 1; i <= right; i++) {
      var temp = ids[i];
      var tempDist = dists[temp];
      var j = i - 1;

      while (j >= left && dists[ids[j]] > tempDist) {
        ids[j + 1] = ids[j--];
      }

      ids[j + 1] = temp;
    }
  } else {
    var median = left + right >> 1;

    var _i10 = left + 1;

    var _j2 = right;
    delaunator_swap(ids, median, _i10);
    if (dists[ids[left]] > dists[ids[right]]) delaunator_swap(ids, left, right);
    if (dists[ids[_i10]] > dists[ids[right]]) delaunator_swap(ids, _i10, right);
    if (dists[ids[left]] > dists[ids[_i10]]) delaunator_swap(ids, left, _i10);
    var _temp = ids[_i10];
    var _tempDist = dists[_temp];

    while (true) {
      do {
        _i10++;
      } while (dists[ids[_i10]] < _tempDist);

      do {
        _j2--;
      } while (dists[ids[_j2]] > _tempDist);

      if (_j2 < _i10) break;
      delaunator_swap(ids, _i10, _j2);
    }

    ids[left + 1] = ids[_j2];
    ids[_j2] = _temp;

    if (right - _i10 + 1 >= _j2 - left) {
      quicksort(ids, dists, _i10, right);
      quicksort(ids, dists, left, _j2 - 1);
    } else {
      quicksort(ids, dists, left, _j2 - 1);
      quicksort(ids, dists, _i10, right);
    }
  }
}

function delaunator_swap(arr, i, j) {
  var tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}

function defaultGetX(p) {
  return p[0];
}

function defaultGetY(p) {
  return p[1];
}
;// CONCATENATED MODULE: ./node_modules/d3-delaunay/src/path.js


var src_path_epsilon = 1e-6;

var path_Path = /*#__PURE__*/function () {
  function Path() {
    (0,classCallCheck/* default */.Z)(this, Path);

    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath

    this._ = "";
  }

  (0,createClass/* default */.Z)(Path, [{
    key: "moveTo",
    value: function moveTo(x, y) {
      this._ += "M".concat(this._x0 = this._x1 = +x, ",").concat(this._y0 = this._y1 = +y);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      this._ += "L".concat(this._x1 = +x, ",").concat(this._y1 = +y);
    }
  }, {
    key: "arc",
    value: function arc(x, y, r) {
      x = +x, y = +y, r = +r;
      var x0 = x + r;
      var y0 = y;
      if (r < 0) throw new Error("negative radius");
      if (this._x1 === null) this._ += "M".concat(x0, ",").concat(y0);else if (Math.abs(this._x1 - x0) > src_path_epsilon || Math.abs(this._y1 - y0) > src_path_epsilon) this._ += "L" + x0 + "," + y0;
      if (!r) return;
      this._ += "A".concat(r, ",").concat(r, ",0,1,1,").concat(x - r, ",").concat(y, "A").concat(r, ",").concat(r, ",0,1,1,").concat(this._x1 = x0, ",").concat(this._y1 = y0);
    }
  }, {
    key: "rect",
    value: function rect(x, y, w, h) {
      this._ += "M".concat(this._x0 = this._x1 = +x, ",").concat(this._y0 = this._y1 = +y, "h").concat(+w, "v").concat(+h, "h").concat(-w, "Z");
    }
  }, {
    key: "value",
    value: function value() {
      return this._ || null;
    }
  }]);

  return Path;
}();


;// CONCATENATED MODULE: ./node_modules/d3-delaunay/src/polygon.js



var Polygon = /*#__PURE__*/function () {
  function Polygon() {
    (0,classCallCheck/* default */.Z)(this, Polygon);

    this._ = [];
  }

  (0,createClass/* default */.Z)(Polygon, [{
    key: "moveTo",
    value: function moveTo(x, y) {
      this._.push([x, y]);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      this._.push(this._[0].slice());
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      this._.push([x, y]);
    }
  }, {
    key: "value",
    value: function value() {
      return this._.length ? this._ : null;
    }
  }]);

  return Polygon;
}();


;// CONCATENATED MODULE: ./node_modules/d3-delaunay/src/voronoi.js




function voronoi_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = voronoi_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function voronoi_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return voronoi_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return voronoi_arrayLikeToArray(o, minLen); }

function voronoi_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





var Voronoi = /*#__PURE__*/function () {
  function Voronoi(delaunay) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 960, 500],
        _ref2 = (0,slicedToArray/* default */.Z)(_ref, 4),
        xmin = _ref2[0],
        ymin = _ref2[1],
        xmax = _ref2[2],
        ymax = _ref2[3];

    (0,classCallCheck/* default */.Z)(this, Voronoi);

    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;

    this._init();
  }

  (0,createClass/* default */.Z)(Voronoi, [{
    key: "update",
    value: function update() {
      this.delaunay.update();

      this._init();

      return this;
    }
  }, {
    key: "_init",
    value: function _init() {
      var _this$delaunay = this.delaunay,
          points = _this$delaunay.points,
          hull = _this$delaunay.hull,
          triangles = _this$delaunay.triangles,
          vectors = this.vectors; // Compute circumcenters.

      var circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);

      for (var i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
        var t1 = triangles[i] * 2;
        var t2 = triangles[i + 1] * 2;
        var t3 = triangles[i + 2] * 2;
        var _x = points[t1];
        var _y = points[t1 + 1];
        var x2 = points[t2];
        var y2 = points[t2 + 1];
        var x3 = points[t3];
        var y3 = points[t3 + 1];
        var dx = x2 - _x;
        var dy = y2 - _y;
        var ex = x3 - _x;
        var ey = y3 - _y;
        var bl = dx * dx + dy * dy;
        var cl = ex * ex + ey * ey;
        var ab = (dx * ey - dy * ex) * 2;

        if (!ab) {
          // degenerate case (collinear diagram)
          x = (_x + x3) / 2 - 1e8 * ey;
          y = (_y + y3) / 2 + 1e8 * ex;
        } else if (Math.abs(ab) < 1e-8) {
          // almost equal points (degenerate triangle)
          x = (_x + x3) / 2;
          y = (_y + y3) / 2;
        } else {
          var d = 1 / ab;
          x = _x + (ey * bl - dy * cl) * d;
          y = _y + (dx * cl - ex * bl) * d;
        }

        circumcenters[j] = x;
        circumcenters[j + 1] = y;
      } // Compute exterior cell rays.


      var h = hull[hull.length - 1];
      var p0,
          p1 = h * 4;
      var x0,
          x1 = points[2 * h];
      var y0,
          y1 = points[2 * h + 1];
      vectors.fill(0);

      for (var _i = 0; _i < hull.length; ++_i) {
        h = hull[_i];
        p0 = p1, x0 = x1, y0 = y1;
        p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
        vectors[p0 + 2] = vectors[p1] = y0 - y1;
        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
      }
    }
  }, {
    key: "render",
    value: function render(context) {
      var buffer = context == null ? context = new path_Path() : undefined;
      var _this$delaunay2 = this.delaunay,
          halfedges = _this$delaunay2.halfedges,
          inedges = _this$delaunay2.inedges,
          hull = _this$delaunay2.hull,
          circumcenters = this.circumcenters,
          vectors = this.vectors;
      if (hull.length <= 1) return null;

      for (var i = 0, n = halfedges.length; i < n; ++i) {
        var j = halfedges[i];
        if (j < i) continue;
        var ti = Math.floor(i / 3) * 2;
        var tj = Math.floor(j / 3) * 2;
        var xi = circumcenters[ti];
        var yi = circumcenters[ti + 1];
        var xj = circumcenters[tj];
        var yj = circumcenters[tj + 1];

        this._renderSegment(xi, yi, xj, yj, context);
      }

      var h0,
          h1 = hull[hull.length - 1];

      for (var _i2 = 0; _i2 < hull.length; ++_i2) {
        h0 = h1, h1 = hull[_i2];
        var t = Math.floor(inedges[h1] / 3) * 2;
        var x = circumcenters[t];
        var y = circumcenters[t + 1];
        var v = h0 * 4;

        var p = this._project(x, y, vectors[v + 2], vectors[v + 3]);

        if (p) this._renderSegment(x, y, p[0], p[1], context);
      }

      return buffer && buffer.value();
    }
  }, {
    key: "renderBounds",
    value: function renderBounds(context) {
      var buffer = context == null ? context = new path_Path() : undefined;
      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
      return buffer && buffer.value();
    }
  }, {
    key: "renderCell",
    value: function renderCell(i, context) {
      var buffer = context == null ? context = new path_Path() : undefined;

      var points = this._clip(i);

      if (points === null || !points.length) return;
      context.moveTo(points[0], points[1]);
      var n = points.length;

      while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) {
        n -= 2;
      }

      for (var _i3 = 2; _i3 < n; _i3 += 2) {
        if (points[_i3] !== points[_i3 - 2] || points[_i3 + 1] !== points[_i3 - 1]) context.lineTo(points[_i3], points[_i3 + 1]);
      }

      context.closePath();
      return buffer && buffer.value();
    }
  }, {
    key: "cellPolygons",
    value: /*#__PURE__*/regenerator_default().mark(function cellPolygons() {
      var points, i, n, cell;
      return regenerator_default().wrap(function cellPolygons$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              points = this.delaunay.points;
              i = 0, n = points.length / 2;

            case 2:
              if (!(i < n)) {
                _context.next = 11;
                break;
              }

              cell = this.cellPolygon(i);

              if (!cell) {
                _context.next = 8;
                break;
              }

              cell.index = i;
              _context.next = 8;
              return cell;

            case 8:
              ++i;
              _context.next = 2;
              break;

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, cellPolygons, this);
    })
  }, {
    key: "cellPolygon",
    value: function cellPolygon(i) {
      var polygon = new Polygon();
      this.renderCell(i, polygon);
      return polygon.value();
    }
  }, {
    key: "_renderSegment",
    value: function _renderSegment(x0, y0, x1, y1, context) {
      var S;

      var c0 = this._regioncode(x0, y0);

      var c1 = this._regioncode(x1, y1);

      if (c0 === 0 && c1 === 0) {
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
      } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
        context.moveTo(S[0], S[1]);
        context.lineTo(S[2], S[3]);
      }
    }
  }, {
    key: "contains",
    value: function contains(i, x, y) {
      if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
      return this.delaunay._step(i, x, y) === i;
    }
  }, {
    key: "neighbors",
    value: /*#__PURE__*/regenerator_default().mark(function neighbors(i) {
      var ci, _iterator, _step, j, cj, ai, li, aj, lj;

      return regenerator_default().wrap(function neighbors$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              ci = this._clip(i);

              if (!ci) {
                _context2.next = 33;
                break;
              }

              _iterator = voronoi_createForOfIteratorHelper(this.delaunay.neighbors(i));
              _context2.prev = 3;

              _iterator.s();

            case 5:
              if ((_step = _iterator.n()).done) {
                _context2.next = 25;
                break;
              }

              j = _step.value;
              cj = this._clip(j); // find the common edge

              if (!cj) {
                _context2.next = 23;
                break;
              }

              ai = 0, li = ci.length;

            case 10:
              if (!(ai < li)) {
                _context2.next = 23;
                break;
              }

              aj = 0, lj = cj.length;

            case 12:
              if (!(aj < lj)) {
                _context2.next = 20;
                break;
              }

              if (!(ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj])) {
                _context2.next = 17;
                break;
              }

              _context2.next = 16;
              return j;

            case 16:
              return _context2.abrupt("break", 23);

            case 17:
              aj += 2;
              _context2.next = 12;
              break;

            case 20:
              ai += 2;
              _context2.next = 10;
              break;

            case 23:
              _context2.next = 5;
              break;

            case 25:
              _context2.next = 30;
              break;

            case 27:
              _context2.prev = 27;
              _context2.t0 = _context2["catch"](3);

              _iterator.e(_context2.t0);

            case 30:
              _context2.prev = 30;

              _iterator.f();

              return _context2.finish(30);

            case 33:
            case "end":
              return _context2.stop();
          }
        }
      }, neighbors, this, [[3, 27, 30, 33]]);
    })
  }, {
    key: "_cell",
    value: function _cell(i) {
      var circumcenters = this.circumcenters,
          _this$delaunay3 = this.delaunay,
          inedges = _this$delaunay3.inedges,
          halfedges = _this$delaunay3.halfedges,
          triangles = _this$delaunay3.triangles;
      var e0 = inedges[i];
      if (e0 === -1) return null; // coincident point

      var points = [];
      var e = e0;

      do {
        var t = Math.floor(e / 3);
        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
        e = e % 3 === 2 ? e - 2 : e + 1;
        if (triangles[e] !== i) break; // bad triangulation

        e = halfedges[e];
      } while (e !== e0 && e !== -1);

      return points;
    }
  }, {
    key: "_clip",
    value: function _clip(i) {
      // degenerate case (1 valid point: return the box)
      if (i === 0 && this.delaunay.hull.length === 1) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }

      var points = this._cell(i);

      if (points === null) return null;
      var V = this.vectors;
      var v = i * 4;
      return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
    }
  }, {
    key: "_clipFinite",
    value: function _clipFinite(i, points) {
      var n = points.length;
      var P = null;
      var x0,
          y0,
          x1 = points[n - 2],
          y1 = points[n - 1];

      var c0,
          c1 = this._regioncode(x1, y1);

      var e0, e1;

      for (var j = 0; j < n; j += 2) {
        x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
        c0 = c1, c1 = this._regioncode(x1, y1);

        if (c0 === 0 && c1 === 0) {
          e0 = e1, e1 = 0;
          if (P) P.push(x1, y1);else P = [x1, y1];
        } else {
          var S = void 0,
              sx0 = void 0,
              sy0 = void 0,
              sx1 = void 0,
              sy1 = void 0;

          if (c0 === 0) {
            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
            var _S = S;

            var _S2 = (0,slicedToArray/* default */.Z)(_S, 4);

            sx0 = _S2[0];
            sy0 = _S2[1];
            sx1 = _S2[2];
            sy1 = _S2[3];
          } else {
            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
            var _S3 = S;

            var _S4 = (0,slicedToArray/* default */.Z)(_S3, 4);

            sx1 = _S4[0];
            sy1 = _S4[1];
            sx0 = _S4[2];
            sy0 = _S4[3];
            e0 = e1, e1 = this._edgecode(sx0, sy0);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx0, sy0);else P = [sx0, sy0];
          }

          e0 = e1, e1 = this._edgecode(sx1, sy1);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx1, sy1);else P = [sx1, sy1];
        }
      }

      if (P) {
        e0 = e1, e1 = this._edgecode(P[0], P[1]);
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
      }

      return P;
    }
  }, {
    key: "_clipSegment",
    value: function _clipSegment(x0, y0, x1, y1, c0, c1) {
      while (true) {
        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
        if (c0 & c1) return null;
        var x = void 0,
            y = void 0,
            c = c0 || c1;
        if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
        if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
      }
    }
  }, {
    key: "_clipInfinite",
    value: function _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
      var P = Array.from(points),
          p;
      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);

      if (P = this._clipFinite(i, P)) {
        for (var j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
          c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
          if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
      }

      return P;
    }
  }, {
    key: "_edge",
    value: function _edge(i, e0, e1, P, j) {
      while (e0 !== e1) {
        var x = void 0,
            y = void 0;

        switch (e0) {
          case 5:
            e0 = 4;
            continue;
          // top-left

          case 4:
            e0 = 6, x = this.xmax, y = this.ymin;
            break;
          // top

          case 6:
            e0 = 2;
            continue;
          // top-right

          case 2:
            e0 = 10, x = this.xmax, y = this.ymax;
            break;
          // right

          case 10:
            e0 = 8;
            continue;
          // bottom-right

          case 8:
            e0 = 9, x = this.xmin, y = this.ymax;
            break;
          // bottom

          case 9:
            e0 = 1;
            continue;
          // bottom-left

          case 1:
            e0 = 5, x = this.xmin, y = this.ymin;
            break;
          // left
        }

        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
          P.splice(j, 0, x, y), j += 2;
        }
      }

      if (P.length > 4) {
        for (var _i4 = 0; _i4 < P.length; _i4 += 2) {
          var _j = (_i4 + 2) % P.length,
              k = (_i4 + 4) % P.length;

          if (P[_i4] === P[_j] && P[_j] === P[k] || P[_i4 + 1] === P[_j + 1] && P[_j + 1] === P[k + 1]) P.splice(_j, 2), _i4 -= 2;
        }
      }

      return j;
    }
  }, {
    key: "_project",
    value: function _project(x0, y0, vx, vy) {
      var t = Infinity,
          c,
          x,
          y;

      if (vy < 0) {
        // top
        if (y0 <= this.ymin) return null;
        if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
      } else if (vy > 0) {
        // bottom
        if (y0 >= this.ymax) return null;
        if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
      }

      if (vx > 0) {
        // right
        if (x0 >= this.xmax) return null;
        if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
      } else if (vx < 0) {
        // left
        if (x0 <= this.xmin) return null;
        if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
      }

      return [x, y];
    }
  }, {
    key: "_edgecode",
    value: function _edgecode(x, y) {
      return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
    }
  }, {
    key: "_regioncode",
    value: function _regioncode(x, y) {
      return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
    }
  }]);

  return Voronoi;
}();


;// CONCATENATED MODULE: ./node_modules/d3-delaunay/src/delaunay.js



var delaunay_marked = /*#__PURE__*/regenerator_default().mark(flatIterable);

function delaunay_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = delaunay_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function delaunay_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return delaunay_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return delaunay_arrayLikeToArray(o, minLen); }

function delaunay_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







var delaunay_tau = 2 * Math.PI,
    delaunay_pow = Math.pow;

function pointX(p) {
  return p[0];
}

function pointY(p) {
  return p[1];
} // A triangulation is collinear if all its triangles have a non-null area


function delaunay_collinear(d) {
  var triangles = d.triangles,
      coords = d.coords;

  for (var i = 0; i < triangles.length; i += 3) {
    var a = 2 * triangles[i],
        b = 2 * triangles[i + 1],
        c = 2 * triangles[i + 2],
        cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
    if (cross > 1e-10) return false;
  }

  return true;
}

function jitter(x, y, r) {
  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
}

var Delaunay = /*#__PURE__*/function () {
  function Delaunay(points) {
    (0,classCallCheck/* default */.Z)(this, Delaunay);

    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;

    this._init();
  }

  (0,createClass/* default */.Z)(Delaunay, [{
    key: "update",
    value: function update() {
      this._delaunator.update();

      this._init();

      return this;
    }
  }, {
    key: "_init",
    value: function _init() {
      var d = this._delaunator,
          points = this.points; // check for collinear

      if (d.hull && d.hull.length > 2 && delaunay_collinear(d)) {
        this.collinear = Int32Array.from({
          length: points.length / 2
        }, function (_, i) {
          return i;
        }).sort(function (i, j) {
          return points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1];
        }); // for exact neighbors

        var e = this.collinear[0],
            f = this.collinear[this.collinear.length - 1],
            bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],
            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);

        for (var i = 0, n = points.length / 2; i < n; ++i) {
          var p = jitter(points[2 * i], points[2 * i + 1], r);
          points[2 * i] = p[0];
          points[2 * i + 1] = p[1];
        }

        this._delaunator = new Delaunator(points);
      } else {
        delete this.collinear;
      }

      var halfedges = this.halfedges = this._delaunator.halfedges;
      var hull = this.hull = this._delaunator.hull;
      var triangles = this.triangles = this._delaunator.triangles;
      var inedges = this.inedges.fill(-1);

      var hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge
      // Used to give the first neighbor of each point; for this reason,
      // on the hull we give priority to exterior halfedges


      for (var _e = 0, _n = halfedges.length; _e < _n; ++_e) {
        var _p = triangles[_e % 3 === 2 ? _e - 2 : _e + 1];
        if (halfedges[_e] === -1 || inedges[_p] === -1) inedges[_p] = _e;
      }

      for (var _i = 0, _n2 = hull.length; _i < _n2; ++_i) {
        hullIndex[hull[_i]] = _i;
      } // degenerate case: 1 or 2 (distinct) points


      if (hull.length <= 2 && hull.length > 0) {
        this.triangles = new Int32Array(3).fill(-1);
        this.halfedges = new Int32Array(3).fill(-1);
        this.triangles[0] = hull[0];
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
        inedges[hull[0]] = 1;
        if (hull.length === 2) inedges[hull[1]] = 0;
      }
    }
  }, {
    key: "voronoi",
    value: function voronoi(bounds) {
      return new Voronoi(this, bounds);
    }
  }, {
    key: "neighbors",
    value: /*#__PURE__*/regenerator_default().mark(function neighbors(i) {
      var inedges, hull, _hullIndex, halfedges, triangles, collinear, l, e0, e, p0, p;

      return regenerator_default().wrap(function neighbors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              inedges = this.inedges, hull = this.hull, _hullIndex = this._hullIndex, halfedges = this.halfedges, triangles = this.triangles, collinear = this.collinear; // degenerate case with several collinear points

              if (!collinear) {
                _context.next = 10;
                break;
              }

              l = collinear.indexOf(i);

              if (!(l > 0)) {
                _context.next = 6;
                break;
              }

              _context.next = 6;
              return collinear[l - 1];

            case 6:
              if (!(l < collinear.length - 1)) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return collinear[l + 1];

            case 9:
              return _context.abrupt("return");

            case 10:
              e0 = inedges[i];

              if (!(e0 === -1)) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("return");

            case 13:
              // coincident point
              e = e0, p0 = -1;

            case 14:
              _context.next = 16;
              return p0 = triangles[e];

            case 16:
              e = e % 3 === 2 ? e - 2 : e + 1;

              if (!(triangles[e] !== i)) {
                _context.next = 19;
                break;
              }

              return _context.abrupt("return");

            case 19:
              // bad triangulation
              e = halfedges[e];

              if (!(e === -1)) {
                _context.next = 26;
                break;
              }

              p = hull[(_hullIndex[i] + 1) % hull.length];

              if (!(p !== p0)) {
                _context.next = 25;
                break;
              }

              _context.next = 25;
              return p;

            case 25:
              return _context.abrupt("return");

            case 26:
              if (e !== e0) {
                _context.next = 14;
                break;
              }

            case 27:
            case "end":
              return _context.stop();
          }
        }
      }, neighbors, this);
    })
  }, {
    key: "find",
    value: function find(x, y) {
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
      var i0 = i;
      var c;

      while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {
        i = c;
      }

      return c;
    }
  }, {
    key: "_step",
    value: function _step(i, x, y) {
      var inedges = this.inedges,
          hull = this.hull,
          _hullIndex = this._hullIndex,
          halfedges = this.halfedges,
          triangles = this.triangles,
          points = this.points;
      if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
      var c = i;
      var dc = delaunay_pow(x - points[i * 2], 2) + delaunay_pow(y - points[i * 2 + 1], 2);
      var e0 = inedges[i];
      var e = e0;

      do {
        var t = triangles[e];
        var dt = delaunay_pow(x - points[t * 2], 2) + delaunay_pow(y - points[t * 2 + 1], 2);
        if (dt < dc) dc = dt, c = t;
        e = e % 3 === 2 ? e - 2 : e + 1;
        if (triangles[e] !== i) break; // bad triangulation

        e = halfedges[e];

        if (e === -1) {
          e = hull[(_hullIndex[i] + 1) % hull.length];

          if (e !== t) {
            if (delaunay_pow(x - points[e * 2], 2) + delaunay_pow(y - points[e * 2 + 1], 2) < dc) return e;
          }

          break;
        }
      } while (e !== e0);

      return c;
    }
  }, {
    key: "render",
    value: function render(context) {
      var buffer = context == null ? context = new path_Path() : undefined;
      var points = this.points,
          halfedges = this.halfedges,
          triangles = this.triangles;

      for (var i = 0, n = halfedges.length; i < n; ++i) {
        var j = halfedges[i];
        if (j < i) continue;
        var ti = triangles[i] * 2;
        var tj = triangles[j] * 2;
        context.moveTo(points[ti], points[ti + 1]);
        context.lineTo(points[tj], points[tj + 1]);
      }

      this.renderHull(context);
      return buffer && buffer.value();
    }
  }, {
    key: "renderPoints",
    value: function renderPoints(context) {
      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var buffer = context == null ? context = new path_Path() : undefined;
      var points = this.points;

      for (var i = 0, n = points.length; i < n; i += 2) {
        var x = points[i],
            y = points[i + 1];
        context.moveTo(x + r, y);
        context.arc(x, y, r, 0, delaunay_tau);
      }

      return buffer && buffer.value();
    }
  }, {
    key: "renderHull",
    value: function renderHull(context) {
      var buffer = context == null ? context = new path_Path() : undefined;
      var hull = this.hull,
          points = this.points;
      var h = hull[0] * 2,
          n = hull.length;
      context.moveTo(points[h], points[h + 1]);

      for (var i = 1; i < n; ++i) {
        var _h = 2 * hull[i];

        context.lineTo(points[_h], points[_h + 1]);
      }

      context.closePath();
      return buffer && buffer.value();
    }
  }, {
    key: "hullPolygon",
    value: function hullPolygon() {
      var polygon = new Polygon();
      this.renderHull(polygon);
      return polygon.value();
    }
  }, {
    key: "renderTriangle",
    value: function renderTriangle(i, context) {
      var buffer = context == null ? context = new path_Path() : undefined;
      var points = this.points,
          triangles = this.triangles;
      var t0 = triangles[i *= 3] * 2;
      var t1 = triangles[i + 1] * 2;
      var t2 = triangles[i + 2] * 2;
      context.moveTo(points[t0], points[t0 + 1]);
      context.lineTo(points[t1], points[t1 + 1]);
      context.lineTo(points[t2], points[t2 + 1]);
      context.closePath();
      return buffer && buffer.value();
    }
  }, {
    key: "trianglePolygons",
    value: /*#__PURE__*/regenerator_default().mark(function trianglePolygons() {
      var triangles, i, n;
      return regenerator_default().wrap(function trianglePolygons$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              triangles = this.triangles;
              i = 0, n = triangles.length / 3;

            case 2:
              if (!(i < n)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 5;
              return this.trianglePolygon(i);

            case 5:
              ++i;
              _context2.next = 2;
              break;

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, trianglePolygons, this);
    })
  }, {
    key: "trianglePolygon",
    value: function trianglePolygon(i) {
      var polygon = new Polygon();
      this.renderTriangle(i, polygon);
      return polygon.value();
    }
  }], [{
    key: "from",
    value: function from(points) {
      var fx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pointX;
      var fy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : pointY;
      var that = arguments.length > 3 ? arguments[3] : undefined;
      return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
  }]);

  return Delaunay;
}();



function flatArray(points, fx, fy, that) {
  var n = points.length;
  var array = new Float64Array(n * 2);

  for (var i = 0; i < n; ++i) {
    var p = points[i];
    array[i * 2] = fx.call(that, p, i, points);
    array[i * 2 + 1] = fy.call(that, p, i, points);
  }

  return array;
}

function flatIterable(points, fx, fy, that) {
  var i, _iterator, _step2, p;

  return regenerator_default().wrap(function flatIterable$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          i = 0;
          _iterator = delaunay_createForOfIteratorHelper(points);
          _context3.prev = 2;

          _iterator.s();

        case 4:
          if ((_step2 = _iterator.n()).done) {
            _context3.next = 13;
            break;
          }

          p = _step2.value;
          _context3.next = 8;
          return fx.call(that, p, i, points);

        case 8:
          _context3.next = 10;
          return fy.call(that, p, i, points);

        case 10:
          ++i;

        case 11:
          _context3.next = 4;
          break;

        case 13:
          _context3.next = 18;
          break;

        case 15:
          _context3.prev = 15;
          _context3.t0 = _context3["catch"](2);

          _iterator.e(_context3.t0);

        case 18:
          _context3.prev = 18;

          _iterator.f();

          return _context3.finish(18);

        case 21:
        case "end":
          return _context3.stop();
      }
    }
  }, delaunay_marked, null, [[2, 15, 18, 21]]);
}
;// CONCATENATED MODULE: ./node_modules/vega-voronoi/build/vega-voronoi.module.js




function vega_voronoi_module_Voronoi(params) {
  Transform.call(this, null, params);
}

vega_voronoi_module_Voronoi.Definition = {
  'type': 'Voronoi',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'x',
    'type': 'field',
    'required': true
  }, {
    'name': 'y',
    'type': 'field',
    'required': true
  }, {
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'extent',
    'type': 'array',
    'array': true,
    'length': 2,
    'default': [[-1e5, -1e5], [1e5, 1e5]],
    'content': {
      'type': 'number',
      'array': true,
      'length': 2
    }
  }, {
    'name': 'as',
    'type': 'string',
    'default': 'path'
  }]
};
var defaultExtent = [-1e5, -1e5, 1e5, 1e5];
vega_util_module_inherits(vega_voronoi_module_Voronoi, Transform, {
  transform: function transform(_, pulse) {
    var as = _.as || 'path',
        data = pulse.source; // nothing to do if no data

    if (!data || !data.length) return pulse; // configure and construct voronoi diagram

    var s = _.size;
    s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;
    var voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths

    for (var i = 0, n = data.length; i < n; ++i) {
      var polygon = voronoi.cellPolygon(i);
      data[i][as] = polygon ? toPathString(polygon) : null;
    }

    return pulse.reflow(_.modified()).modifies(as);
  }
}); // suppress duplicated end point vertices

function toPathString(p) {
  var x = p[0][0],
      y = p[0][1];
  var n = p.length - 1;

  for (; p[n][0] === x && p[n][1] === y; --n) {
    ;
  }

  return 'M' + p.slice(0, n + 1).join('L') + 'Z';
}


;// CONCATENATED MODULE: ./node_modules/vega-wordcloud/build/vega-wordcloud.module.js





/*
Copyright (c) 2013, Jason Davies.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * The name Jason Davies may not be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

var cloudRadians = Math.PI / 180,
    cw = 1 << 11 >> 5,
    ch = 1 << 11;

function cloud() {
  var size = [256, 256],
      text,
      font,
      fontSize,
      fontStyle,
      fontWeight,
      rotate,
      padding,
      spiral = archimedeanSpiral,
      words = [],
      random = Math.random,
      cloud = {};

  cloud.layout = function () {
    var contextAndRatio = getContext(domCanvas()),
        board = zeroArray((size[0] >> 5) * size[1]),
        bounds = null,
        n = words.length,
        i = -1,
        tags = [],
        data = words.map(function (d) {
      return {
        text: text(d),
        font: font(d),
        style: fontStyle(d),
        weight: fontWeight(d),
        rotate: rotate(d),
        size: ~~(fontSize(d) + 1e-14),
        padding: padding(d),
        xoff: 0,
        yoff: 0,
        x1: 0,
        y1: 0,
        x0: 0,
        y0: 0,
        hasText: false,
        sprite: null,
        datum: d
      };
    }).sort(function (a, b) {
      return b.size - a.size;
    });

    while (++i < n) {
      var d = data[i];
      d.x = size[0] * (random() + .5) >> 1;
      d.y = size[1] * (random() + .5) >> 1;
      cloudSprite(contextAndRatio, d, data, i);

      if (d.hasText && place(board, d, bounds)) {
        tags.push(d);
        if (bounds) cloudBounds(bounds, d);else bounds = [{
          x: d.x + d.x0,
          y: d.y + d.y0
        }, {
          x: d.x + d.x1,
          y: d.y + d.y1
        }]; // Temporary hack

        d.x -= size[0] >> 1;
        d.y -= size[1] >> 1;
      }
    }

    return tags;
  };

  function getContext(canvas) {
    canvas.width = canvas.height = 1;
    var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;
    var context = canvas.getContext('2d');
    context.fillStyle = context.strokeStyle = 'red';
    context.textAlign = 'center';
    return {
      context: context,
      ratio: ratio
    };
  }

  function place(board, tag, bounds) {
    var startX = tag.x,
        startY = tag.y,
        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
        s = spiral(size),
        dt = random() < .5 ? 1 : -1,
        t = -dt,
        dxdy,
        dx,
        dy;

    while (dxdy = s(t += dt)) {
      dx = ~~dxdy[0];
      dy = ~~dxdy[1];
      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
      tag.x = startX + dx;
      tag.y = startY + dy;
      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.

      if (!bounds || !cloudCollide(tag, board, size[0])) {
        if (!bounds || collideRects(tag, bounds)) {
          var sprite = tag.sprite,
              w = tag.width >> 5,
              sw = size[0] >> 5,
              lx = tag.x - (w << 4),
              sx = lx & 0x7f,
              msx = 32 - sx,
              h = tag.y1 - tag.y0,
              x = (tag.y + tag.y0) * sw + (lx >> 5),
              last;

          for (var j = 0; j < h; j++) {
            last = 0;

            for (var i = 0; i <= w; i++) {
              board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
            }

            x += sw;
          }

          tag.sprite = null;
          return true;
        }
      }
    }

    return false;
  }

  cloud.words = function (_) {
    if (arguments.length) {
      words = _;
      return cloud;
    } else {
      return words;
    }
  };

  cloud.size = function (_) {
    if (arguments.length) {
      size = [+_[0], +_[1]];
      return cloud;
    } else {
      return size;
    }
  };

  cloud.font = function (_) {
    if (arguments.length) {
      font = functor(_);
      return cloud;
    } else {
      return font;
    }
  };

  cloud.fontStyle = function (_) {
    if (arguments.length) {
      fontStyle = functor(_);
      return cloud;
    } else {
      return fontStyle;
    }
  };

  cloud.fontWeight = function (_) {
    if (arguments.length) {
      fontWeight = functor(_);
      return cloud;
    } else {
      return fontWeight;
    }
  };

  cloud.rotate = function (_) {
    if (arguments.length) {
      rotate = functor(_);
      return cloud;
    } else {
      return rotate;
    }
  };

  cloud.text = function (_) {
    if (arguments.length) {
      text = functor(_);
      return cloud;
    } else {
      return text;
    }
  };

  cloud.spiral = function (_) {
    if (arguments.length) {
      spiral = spirals[_] || _;
      return cloud;
    } else {
      return spiral;
    }
  };

  cloud.fontSize = function (_) {
    if (arguments.length) {
      fontSize = functor(_);
      return cloud;
    } else {
      return fontSize;
    }
  };

  cloud.padding = function (_) {
    if (arguments.length) {
      padding = functor(_);
      return cloud;
    } else {
      return padding;
    }
  };

  cloud.random = function (_) {
    if (arguments.length) {
      random = _;
      return cloud;
    } else {
      return random;
    }
  };

  return cloud;
} // Fetches a monochrome sprite bitmap for the specified text.
// Load in batches for speed.


function cloudSprite(contextAndRatio, d, data, di) {
  if (d.sprite) return;
  var c = contextAndRatio.context,
      ratio = contextAndRatio.ratio;
  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
  var x = 0,
      y = 0,
      maxh = 0,
      n = data.length,
      w,
      w32,
      h,
      i,
      j;
  --di;

  while (++di < n) {
    d = data[di];
    c.save();
    c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;
    w = c.measureText(d.text + 'm').width * ratio;
    h = d.size << 1;

    if (d.rotate) {
      var sr = Math.sin(d.rotate * cloudRadians),
          cr = Math.cos(d.rotate * cloudRadians),
          wcr = w * cr,
          wsr = w * sr,
          hcr = h * cr,
          hsr = h * sr;
      w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
    } else {
      w = w + 0x1f >> 5 << 5;
    }

    if (h > maxh) maxh = h;

    if (x + w >= cw << 5) {
      x = 0;
      y += maxh;
      maxh = 0;
    }

    if (y + h >= ch) break;
    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
    if (d.rotate) c.rotate(d.rotate * cloudRadians);
    c.fillText(d.text, 0, 0);

    if (d.padding) {
      c.lineWidth = 2 * d.padding;
      c.strokeText(d.text, 0, 0);
    }

    c.restore();
    d.width = w;
    d.height = h;
    d.xoff = x;
    d.yoff = y;
    d.x1 = w >> 1;
    d.y1 = h >> 1;
    d.x0 = -d.x1;
    d.y0 = -d.y1;
    d.hasText = true;
    x += w;
  }

  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
      sprite = [];

  while (--di >= 0) {
    d = data[di];
    if (!d.hasText) continue;
    w = d.width;
    w32 = w >> 5;
    h = d.y1 - d.y0; // Zero the buffer

    for (i = 0; i < h * w32; i++) {
      sprite[i] = 0;
    }

    x = d.xoff;
    if (x == null) return;
    y = d.yoff;
    var seen = 0,
        seenRow = -1;

    for (j = 0; j < h; j++) {
      for (i = 0; i < w; i++) {
        var k = w32 * j + (i >> 5),
            m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
        sprite[k] |= m;
        seen |= m;
      }

      if (seen) seenRow = j;else {
        d.y0++;
        h--;
        j--;
        y++;
      }
    }

    d.y1 = d.y0 + seenRow;
    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
  }
} // Use mask-based collision detection.


function cloudCollide(tag, board, sw) {
  sw >>= 5;
  var sprite = tag.sprite,
      w = tag.width >> 5,
      lx = tag.x - (w << 4),
      sx = lx & 0x7f,
      msx = 32 - sx,
      h = tag.y1 - tag.y0,
      x = (tag.y + tag.y0) * sw + (lx >> 5),
      last;

  for (var j = 0; j < h; j++) {
    last = 0;

    for (var i = 0; i <= w; i++) {
      if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
    }

    x += sw;
  }

  return false;
}

function cloudBounds(bounds, d) {
  var b0 = bounds[0],
      b1 = bounds[1];
  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
}

function collideRects(a, b) {
  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
}

function archimedeanSpiral(size) {
  var e = size[0] / size[1];
  return function (t) {
    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
  };
}

function rectangularSpiral(size) {
  var dy = 4,
      dx = dy * size[0] / size[1],
      x = 0,
      y = 0;
  return function (t) {
    var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.

    switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
      case 0:
        x += dx;
        break;

      case 1:
        y += dy;
        break;

      case 2:
        x -= dx;
        break;

      default:
        y -= dy;
        break;
    }

    return [x, y];
  };
} // TODO reuse arrays?


function zeroArray(n) {
  var a = [],
      i = -1;

  while (++i < n) {
    a[i] = 0;
  }

  return a;
}

function functor(d) {
  return typeof d === 'function' ? d : function () {
    return d;
  };
}

var spirals = {
  archimedean: archimedeanSpiral,
  rectangular: rectangularSpiral
};
var vega_wordcloud_module_Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];
var vega_wordcloud_module_Params = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];

function Wordcloud(params) {
  Transform.call(this, cloud(), params);
}

Wordcloud.Definition = {
  'type': 'Wordcloud',
  'metadata': {
    'modifies': true
  },
  'params': [{
    'name': 'size',
    'type': 'number',
    'array': true,
    'length': 2
  }, {
    'name': 'font',
    'type': 'string',
    'expr': true,
    'default': 'sans-serif'
  }, {
    'name': 'fontStyle',
    'type': 'string',
    'expr': true,
    'default': 'normal'
  }, {
    'name': 'fontWeight',
    'type': 'string',
    'expr': true,
    'default': 'normal'
  }, {
    'name': 'fontSize',
    'type': 'number',
    'expr': true,
    'default': 14
  }, {
    'name': 'fontSizeRange',
    'type': 'number',
    'array': 'nullable',
    'default': [10, 50]
  }, {
    'name': 'rotate',
    'type': 'number',
    'expr': true,
    'default': 0
  }, {
    'name': 'text',
    'type': 'field'
  }, {
    'name': 'spiral',
    'type': 'string',
    'values': ['archimedean', 'rectangular']
  }, {
    'name': 'padding',
    'type': 'number',
    'expr': true
  }, {
    'name': 'as',
    'type': 'string',
    'array': true,
    'length': 7,
    'default': vega_wordcloud_module_Output
  }]
};
vega_util_module_inherits(Wordcloud, Transform, {
  transform: function transform(_, pulse) {
    if (_.size && !(_.size[0] && _.size[1])) {
      error('Wordcloud size dimensions must be non-zero.');
    }

    function modp(param) {
      var p = _[param];
      return isFunction(p) && pulse.modified(p.fields);
    }

    var mod = _.modified();

    if (!(mod || pulse.changed(pulse.ADD_REM) || vega_wordcloud_module_Params.some(modp))) return;
    var data = pulse.materialize(pulse.SOURCE).source,
        layout = this.value,
        as = _.as || vega_wordcloud_module_Output;
    var fontSize = _.fontSize || 14,
        range;
    isFunction(fontSize) ? range = _.fontSizeRange : fontSize = vega_util_module_constant(fontSize); // create font size scaling function as needed

    if (range) {
      var fsize = fontSize,
          sizeScale = vega_scale_module_scale('sqrt')().domain(extent(data, fsize)).range(range);

      fontSize = function fontSize(x) {
        return sizeScale(fsize(x));
      };
    }

    data.forEach(function (t) {
      t[as[0]] = NaN;
      t[as[1]] = NaN;
      t[as[3]] = 0;
    }); // configure layout

    var words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(vega_statistics_module_random).layout();
    var size = layout.size(),
        dx = size[0] >> 1,
        dy = size[1] >> 1,
        n = words.length;

    for (var i = 0, w, t; i < n; ++i) {
      w = words[i];
      t = w.datum;
      t[as[0]] = w.x + dx;
      t[as[1]] = w.y + dy;
      t[as[2]] = w.font;
      t[as[3]] = w.size;
      t[as[4]] = w.style;
      t[as[5]] = w.weight;
      t[as[6]] = w.rotate;
    }

    return pulse.reflow(mod).modifies(as);
  }
});

;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/node_modules/d3-array/src/ascending.js
/* harmony default export */ function vega_crossfilter_node_modules_d3_array_src_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/node_modules/d3-array/src/bisector.js

/* harmony default export */ function vega_crossfilter_node_modules_d3_array_src_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = vega_crossfilter_node_modules_d3_array_src_bisector_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function vega_crossfilter_node_modules_d3_array_src_bisector_ascendingComparator(f) {
  return function (d, x) {
    return vega_crossfilter_node_modules_d3_array_src_ascending(f(d), x);
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/node_modules/d3-array/src/number.js


var node_modules_d3_array_src_number_marked = /*#__PURE__*/regenerator_default().mark(vega_crossfilter_node_modules_d3_array_src_number_numbers);

function vega_crossfilter_node_modules_d3_array_src_number_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = vega_crossfilter_node_modules_d3_array_src_number_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function vega_crossfilter_node_modules_d3_array_src_number_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return vega_crossfilter_node_modules_d3_array_src_number_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vega_crossfilter_node_modules_d3_array_src_number_arrayLikeToArray(o, minLen); }

function vega_crossfilter_node_modules_d3_array_src_number_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* harmony default export */ function vega_crossfilter_node_modules_d3_array_src_number(x) {
  return x === null ? NaN : +x;
}
function vega_crossfilter_node_modules_d3_array_src_number_numbers(values, valueof) {
  var _iterator, _step, value, index, _iterator2, _step2, _value;

  return regenerator_default().wrap(function numbers$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(valueof === undefined)) {
            _context.next = 21;
            break;
          }

          _iterator = vega_crossfilter_node_modules_d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 2;

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context.next = 11;
            break;
          }

          value = _step.value;

          if (!(value != null && (value = +value) >= value)) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return value;

        case 9:
          _context.next = 4;
          break;

        case 11:
          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](2);

          _iterator.e(_context.t0);

        case 16:
          _context.prev = 16;

          _iterator.f();

          return _context.finish(16);

        case 19:
          _context.next = 40;
          break;

        case 21:
          index = -1;
          _iterator2 = vega_crossfilter_node_modules_d3_array_src_number_createForOfIteratorHelper(values);
          _context.prev = 23;

          _iterator2.s();

        case 25:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 32;
            break;
          }

          _value = _step2.value;

          if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
            _context.next = 30;
            break;
          }

          _context.next = 30;
          return _value;

        case 30:
          _context.next = 25;
          break;

        case 32:
          _context.next = 37;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](23);

          _iterator2.e(_context.t1);

        case 37:
          _context.prev = 37;

          _iterator2.f();

          return _context.finish(37);

        case 40:
        case "end":
          return _context.stop();
      }
    }
  }, node_modules_d3_array_src_number_marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
}
;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/node_modules/d3-array/src/bisect.js



var src_bisect_ascendingBisect = vega_crossfilter_node_modules_d3_array_src_bisector(vega_crossfilter_node_modules_d3_array_src_ascending);
var src_bisect_bisectRight = src_bisect_ascendingBisect.right;
var src_bisect_bisectLeft = src_bisect_ascendingBisect.left;
var src_bisect_bisectCenter = vega_crossfilter_node_modules_d3_array_src_bisector(vega_crossfilter_node_modules_d3_array_src_number).center;
/* harmony default export */ var d3_array_src_bisect = ((/* unused pure expression or super */ null && (src_bisect_bisectRight)));
;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/node_modules/d3-array/src/permute.js
/* harmony default export */ function permute(source, keys) {
  return Array.from(keys, function (key) {
    return source[key];
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-crossfilter/build/vega-crossfilter.module.js




var array8 = function array8(n) {
  return new Uint8Array(n);
};

var array16 = function array16(n) {
  return new Uint16Array(n);
};

var array32 = function array32(n) {
  return new Uint32Array(n);
};
/**
 * Maintains CrossFilter state.
 */


function Bitmaps() {
  var width = 8,
      _data = [],
      _seen = array32(0),
      _curr = vega_crossfilter_module_array(0, width),
      _prev = vega_crossfilter_module_array(0, width);

  return {
    data: function data() {
      return _data;
    },
    seen: function seen() {
      return _seen = lengthen(_seen, _data.length);
    },
    add: function add(array) {
      for (var i = 0, j = _data.length, n = array.length, t; i < n; ++i) {
        t = array[i];
        t._index = j++;

        _data.push(t);
      }
    },
    remove: function remove(num, map) {
      // map: index -> boolean (true => remove)
      var n = _data.length,
          copy = Array(n - num),
          reindex = _data; // reuse old data array for index map

      var t, i, j; // seek forward to first removal

      for (i = 0; !map[i] && i < n; ++i) {
        copy[i] = _data[i];
        reindex[i] = i;
      } // condense arrays


      for (j = i; i < n; ++i) {
        t = _data[i];

        if (!map[i]) {
          reindex[i] = j;
          _curr[j] = _curr[i];
          _prev[j] = _prev[i];
          copy[j] = t;
          t._index = j++;
        } else {
          reindex[i] = -1;
        }

        _curr[i] = 0; // clear unused bits
      }

      _data = copy;
      return reindex;
    },
    size: function size() {
      return _data.length;
    },
    curr: function curr() {
      return _curr;
    },
    prev: function prev() {
      return _prev;
    },
    reset: function reset(k) {
      return _prev[k] = _curr[k];
    },
    all: function all() {
      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;
    },
    set: function set(k, one) {
      _curr[k] |= one;
    },
    clear: function clear(k, one) {
      _curr[k] &= ~one;
    },
    resize: function resize(n, m) {
      var k = _curr.length;

      if (n > k || m > width) {
        width = Math.max(m, width);
        _curr = vega_crossfilter_module_array(n, width, _curr);
        _prev = vega_crossfilter_module_array(n, width);
      }
    }
  };
}

function lengthen(array, length, copy) {
  if (array.length >= length) return array;
  copy = copy || new array.constructor(length);
  copy.set(array);
  return copy;
}

function vega_crossfilter_module_array(n, m, array) {
  var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
  if (array) copy.set(array);
  return copy;
}

function Dimension(index, i, query) {
  var bit = 1 << i;
  return {
    one: bit,
    zero: ~bit,
    range: query.slice(),
    bisect: index.bisect,
    index: index.index,
    size: index.size,
    onAdd: function onAdd(added, curr) {
      var dim = this,
          range = dim.bisect(dim.range, added.value),
          idx = added.index,
          lo = range[0],
          hi = range[1],
          n1 = idx.length;
      var i;

      for (i = 0; i < lo; ++i) {
        curr[idx[i]] |= bit;
      }

      for (i = hi; i < n1; ++i) {
        curr[idx[i]] |= bit;
      }

      return dim;
    }
  };
}
/**
 * Maintains a list of values, sorted by key.
 */


function SortedIndex() {
  var _index = array32(0),
      value = [],
      _size = 0;

  function insert(key, data, base) {
    if (!data.length) return [];
    var n0 = _size,
        n1 = data.length,
        addi = array32(n1);
    var addv = Array(n1),
        oldv,
        oldi,
        i;

    for (i = 0; i < n1; ++i) {
      addv[i] = key(data[i]);
      addi[i] = i;
    }

    addv = vega_crossfilter_module_sort(addv, addi);

    if (n0) {
      oldv = value;
      oldi = _index;
      value = Array(n0 + n1);
      _index = array32(n0 + n1);
      vega_crossfilter_module_merge(base, oldv, oldi, n0, addv, addi, n1, value, _index);
    } else {
      if (base > 0) for (i = 0; i < n1; ++i) {
        addi[i] += base;
      }
      value = addv;
      _index = addi;
    }

    _size = n0 + n1;
    return {
      index: addi,
      value: addv
    };
  }

  function remove(num, map) {
    // map: index -> remove
    var n = _size;
    var idx, i, j; // seek forward to first removal

    for (i = 0; !map[_index[i]] && i < n; ++i) {
      ;
    } // condense index and value arrays


    for (j = i; i < n; ++i) {
      if (!map[idx = _index[i]]) {
        _index[j] = idx;
        value[j] = value[i];
        ++j;
      }
    }

    _size = n - num;
  }

  function reindex(map) {
    for (var i = 0, n = _size; i < n; ++i) {
      _index[i] = map[_index[i]];
    }
  }

  function bisect(range, array) {
    var n;

    if (array) {
      n = array.length;
    } else {
      array = value;
      n = _size;
    }

    return [src_bisect_bisectLeft(array, range[0], 0, n), src_bisect_bisectRight(array, range[1], 0, n)];
  }

  return {
    insert: insert,
    remove: remove,
    bisect: bisect,
    reindex: reindex,
    index: function index() {
      return _index;
    },
    size: function size() {
      return _size;
    }
  };
}

function vega_crossfilter_module_sort(values, index) {
  values.sort.call(index, function (a, b) {
    var x = values[a],
        y = values[b];
    return x < y ? -1 : x > y ? 1 : 0;
  });
  return permute(values, index);
}

function vega_crossfilter_module_merge(base, value0, index0, n0, value1, index1, n1, value, index) {
  var i0 = 0,
      i1 = 0,
      i;

  for (i = 0; i0 < n0 && i1 < n1; ++i) {
    if (value0[i0] < value1[i1]) {
      value[i] = value0[i0];
      index[i] = index0[i0++];
    } else {
      value[i] = value1[i1];
      index[i] = index1[i1++] + base;
    }
  }

  for (; i0 < n0; ++i0, ++i) {
    value[i] = value0[i0];
    index[i] = index0[i0];
  }

  for (; i1 < n1; ++i1, ++i) {
    value[i] = value1[i1];
    index[i] = index1[i1] + base;
  }
}
/**
 * An indexed multi-dimensional filter.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
 * @param {Array} params.query - An array of per-dimension range queries.
 */


function CrossFilter(params) {
  Transform.call(this, Bitmaps(), params);
  this._indices = null;
  this._dims = null;
}

CrossFilter.Definition = {
  'type': 'CrossFilter',
  'metadata': {},
  'params': [{
    'name': 'fields',
    'type': 'field',
    'array': true,
    'required': true
  }, {
    'name': 'query',
    'type': 'array',
    'array': true,
    'required': true,
    'content': {
      'type': 'number',
      'array': true,
      'length': 2
    }
  }]
};
vega_util_module_inherits(CrossFilter, Transform, {
  transform: function transform(_, pulse) {
    if (!this._dims) {
      return this.init(_, pulse);
    } else {
      var init = _.modified('fields') || _.fields.some(function (f) {
        return pulse.modified(f.fields);
      });

      return init ? this.reinit(_, pulse) : this.eval(_, pulse);
    }
  },
  init: function init(_, pulse) {
    var fields = _.fields,
        query = _.query,
        indices = this._indices = {},
        dims = this._dims = [],
        m = query.length;
    var i = 0,
        key,
        index; // instantiate indices and dimensions

    for (; i < m; ++i) {
      key = fields[i].fname;
      index = indices[key] || (indices[key] = SortedIndex());
      dims.push(Dimension(index, i, query[i]));
    }

    return this.eval(_, pulse);
  },
  reinit: function reinit(_, pulse) {
    var output = pulse.materialize().fork(),
        fields = _.fields,
        query = _.query,
        indices = this._indices,
        dims = this._dims,
        bits = this.value,
        curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(),
        out = output.rem = output.add,
        mod = output.mod,
        m = query.length,
        adds = {};
    var add, index, key, mods, remMap, modMap, i, n, f; // set prev to current state

    prev.set(curr); // if pulse has remove tuples, process them first

    if (pulse.rem.length) {
      remMap = this.remove(_, pulse, output);
    } // if pulse has added tuples, add them to state


    if (pulse.add.length) {
      bits.add(pulse.add);
    } // if pulse has modified tuples, create an index map


    if (pulse.mod.length) {
      modMap = {};

      for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {
        modMap[mods[i]._index] = 1;
      }
    } // re-initialize indices as needed, update curr bitmap


    for (i = 0; i < m; ++i) {
      f = fields[i];

      if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
        key = f.fname;

        if (!(add = adds[key])) {
          indices[key] = index = SortedIndex();
          adds[key] = add = index.insert(f, pulse.source, 0);
        }

        dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
      }
    } // visit each tuple
    // if filter state changed, push index to add/rem
    // else if in mod and passes a filter, push index to mod


    for (i = 0, n = bits.data().length; i < n; ++i) {
      if (remMap[i]) {
        // skip if removed tuple
        continue;
      } else if (prev[i] !== curr[i]) {
        // add if state changed
        out.push(i);
      } else if (modMap[i] && curr[i] !== all) {
        // otherwise, pass mods through
        mod.push(i);
      }
    }

    bits.mask = (1 << m) - 1;
    return output;
  },
  eval: function _eval(_, pulse) {
    var output = pulse.materialize().fork(),
        m = this._dims.length;
    var mask = 0;

    if (pulse.rem.length) {
      this.remove(_, pulse, output);
      mask |= (1 << m) - 1;
    }

    if (_.modified('query') && !_.modified('fields')) {
      mask |= this.update(_, pulse, output);
    }

    if (pulse.add.length) {
      this.insert(_, pulse, output);
      mask |= (1 << m) - 1;
    }

    if (pulse.mod.length) {
      this.modify(pulse, output);
      mask |= (1 << m) - 1;
    }

    this.value.mask = mask;
    return output;
  },
  insert: function insert(_, pulse, output) {
    var tuples = pulse.add,
        bits = this.value,
        dims = this._dims,
        indices = this._indices,
        fields = _.fields,
        adds = {},
        out = output.add,
        n = bits.size() + tuples.length,
        m = dims.length;
    var k = bits.size(),
        j,
        key,
        add; // resize bitmaps and add tuples as needed

    bits.resize(n, m);
    bits.add(tuples);
    var curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(); // add to dimensional indices

    for (j = 0; j < m; ++j) {
      key = fields[j].fname;
      add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
      dims[j].onAdd(add, curr);
    } // set previous filters, output if passes at least one filter


    for (; k < n; ++k) {
      prev[k] = all;
      if (curr[k] !== all) out.push(k);
    }
  },
  modify: function modify(pulse, output) {
    var out = output.mod,
        bits = this.value,
        curr = bits.curr(),
        all = bits.all(),
        tuples = pulse.mod;
    var i, n, k;

    for (i = 0, n = tuples.length; i < n; ++i) {
      k = tuples[i]._index;
      if (curr[k] !== all) out.push(k);
    }
  },
  remove: function remove(_, pulse, output) {
    var indices = this._indices,
        bits = this.value,
        curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(),
        map = {},
        out = output.rem,
        tuples = pulse.rem;
    var i, n, k, f; // process tuples, output if passes at least one filter

    for (i = 0, n = tuples.length; i < n; ++i) {
      k = tuples[i]._index;
      map[k] = 1; // build index map

      prev[k] = f = curr[k];
      curr[k] = all;
      if (f !== all) out.push(k);
    } // remove from dimensional indices


    for (k in indices) {
      indices[k].remove(n, map);
    }

    this.reindex(pulse, n, map);
    return map;
  },
  // reindex filters and indices after propagation completes
  reindex: function reindex(pulse, num, map) {
    var indices = this._indices,
        bits = this.value;
    pulse.runAfter(function () {
      var indexMap = bits.remove(num, map);

      for (var key in indices) {
        indices[key].reindex(indexMap);
      }
    });
  },
  update: function update(_, pulse, output) {
    var dims = this._dims,
        query = _.query,
        stamp = pulse.stamp,
        m = dims.length;
    var mask = 0,
        i,
        q; // survey how many queries have changed

    output.filters = 0;

    for (q = 0; q < m; ++q) {
      if (_.modified('query', q)) {
        i = q;
        ++mask;
      }
    }

    if (mask === 1) {
      // only one query changed, use more efficient update
      mask = dims[i].one;
      this.incrementOne(dims[i], query[i], output.add, output.rem);
    } else {
      // multiple queries changed, perform full record keeping
      for (q = 0, mask = 0; q < m; ++q) {
        if (!_.modified('query', q)) continue;
        mask |= dims[q].one;
        this.incrementAll(dims[q], query[q], stamp, output.add);
        output.rem = output.add; // duplicate add/rem for downstream resolve
      }
    }

    return mask;
  },
  incrementAll: function incrementAll(dim, query, stamp, out) {
    var bits = this.value,
        seen = bits.seen(),
        curr = bits.curr(),
        prev = bits.prev(),
        index = dim.index(),
        old = dim.bisect(dim.range),
        range = dim.bisect(query),
        lo1 = range[0],
        hi1 = range[1],
        lo0 = old[0],
        hi0 = old[1],
        one = dim.one;
    var i, j, k; // Fast incremental update based on previous lo index.

    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } // Fast incremental update based on previous hi index.


    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    }

    dim.range = query.slice();
  },
  incrementOne: function incrementOne(dim, query, add, rem) {
    var bits = this.value,
        curr = bits.curr(),
        index = dim.index(),
        old = dim.bisect(dim.range),
        range = dim.bisect(query),
        lo1 = range[0],
        hi1 = range[1],
        lo0 = old[0],
        hi0 = old[1],
        one = dim.one;
    var i, j, k; // Fast incremental update based on previous lo index.

    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        add.push(k);
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        rem.push(k);
      }
    } // Fast incremental update based on previous hi index.


    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        add.push(k);
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        rem.push(k);
      }
    }

    dim.range = query.slice();
  }
});
/**
 * Selectively filters tuples by resolving against a filter bitmap.
 * Useful for processing the output of a cross-filter transform.
 * @constructor
 * @param {object} params - The parameters for this operator.
 * @param {object} params.ignore - A bit mask indicating which filters to ignore.
 * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
 *   parameter value is a reference to a {@link CrossFilter} transform.
 */

function ResolveFilter(params) {
  Transform.call(this, null, params);
}

ResolveFilter.Definition = {
  'type': 'ResolveFilter',
  'metadata': {},
  'params': [{
    'name': 'ignore',
    'type': 'number',
    'required': true,
    'description': 'A bit mask indicating which filters to ignore.'
  }, {
    'name': 'filter',
    'type': 'object',
    'required': true,
    'description': 'Per-tuple filter bitmaps from a CrossFilter transform.'
  }]
};
vega_util_module_inherits(ResolveFilter, Transform, {
  transform: function transform(_, pulse) {
    var ignore = ~(_.ignore || 0),
        // bit mask where zeros -> dims to ignore
    bitmap = _.filter,
        mask = bitmap.mask; // exit early if no relevant filter changes

    if ((mask & ignore) === 0) return pulse.StopPropagation;

    var output = pulse.fork(pulse.ALL),
        data = bitmap.data(),
        curr = bitmap.curr(),
        prev = bitmap.prev(),
        pass = function pass(k) {
      return !(curr[k] & ignore) ? data[k] : null;
    }; // propagate all mod tuples that pass the filter


    output.filter(output.MOD, pass); // determine add & rem tuples via filter functions
    // for efficiency, we do *not* populate new arrays,
    // instead we add filter functions applied downstream

    if (!(mask & mask - 1)) {
      // only one filter changed
      output.filter(output.ADD, pass);
      output.filter(output.REM, function (k) {
        return (curr[k] & ignore) === mask ? data[k] : null;
      });
    } else {
      // multiple filters changed
      output.filter(output.ADD, function (k) {
        var c = curr[k] & ignore,
            f = !c && c ^ prev[k] & ignore;
        return f ? data[k] : null;
      });
      output.filter(output.REM, function (k) {
        var c = curr[k] & ignore,
            f = c && !(c ^ (c ^ prev[k] & ignore));
        return f ? data[k] : null;
      });
    } // add filter to source data in case of reflow...


    return output.filter(output.SOURCE, function (t) {
      return pass(t._index);
    });
  }
});

;// CONCATENATED MODULE: ./node_modules/vega-view/node_modules/d3-array/src/ticks.js
var vega_view_node_modules_d3_array_src_ticks_e10 = Math.sqrt(50),
    vega_view_node_modules_d3_array_src_ticks_e5 = Math.sqrt(10),
    vega_view_node_modules_d3_array_src_ticks_e2 = Math.sqrt(2);
/* harmony default export */ function vega_view_node_modules_d3_array_src_ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = vega_view_node_modules_d3_array_src_ticks_tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    var r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) {
      ticks[i] = (r0 + i) * step;
    }
  } else {
    step = -step;

    var _r = Math.round(start * step),
        _r2 = Math.round(stop * step);

    if (_r / step < start) ++_r;
    if (_r2 / step > stop) --_r2;
    ticks = new Array(n = _r2 - _r + 1);

    while (++i < n) {
      ticks[i] = (_r + i) / step;
    }
  }

  if (reverse) ticks.reverse();
  return ticks;
}
function vega_view_node_modules_d3_array_src_ticks_tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= vega_view_node_modules_d3_array_src_ticks_e10 ? 10 : error >= vega_view_node_modules_d3_array_src_ticks_e5 ? 5 : error >= vega_view_node_modules_d3_array_src_ticks_e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= vega_view_node_modules_d3_array_src_ticks_e10 ? 10 : error >= vega_view_node_modules_d3_array_src_ticks_e5 ? 5 : error >= vega_view_node_modules_d3_array_src_ticks_e2 ? 2 : 1);
}
function vega_view_node_modules_d3_array_src_ticks_tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= vega_view_node_modules_d3_array_src_ticks_e10) step1 *= 10;else if (error >= vega_view_node_modules_d3_array_src_ticks_e5) step1 *= 5;else if (error >= vega_view_node_modules_d3_array_src_ticks_e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
;// CONCATENATED MODULE: ./node_modules/vega-expression/build/vega-expression.module.js

var RawCode = 'RawCode';
var Literal = 'Literal';
var Property = 'Property';
var vega_expression_module_Identifier = 'Identifier';
var ArrayExpression = 'ArrayExpression';
var BinaryExpression = 'BinaryExpression';
var CallExpression = 'CallExpression';
var ConditionalExpression = 'ConditionalExpression';
var LogicalExpression = 'LogicalExpression';
var MemberExpression = 'MemberExpression';
var ObjectExpression = 'ObjectExpression';
var UnaryExpression = 'UnaryExpression';

function ASTNode(type) {
  this.type = type;
}

ASTNode.prototype.visit = function (visitor) {
  var c, i, n;
  if (visitor(this)) return 1;

  for (c = vega_expression_module_children(this), i = 0, n = c.length; i < n; ++i) {
    if (c[i].visit(visitor)) return 1;
  }
};

function vega_expression_module_children(node) {
  switch (node.type) {
    case ArrayExpression:
      return node.elements;

    case BinaryExpression:
    case LogicalExpression:
      return [node.left, node.right];

    case CallExpression:
      return [node.callee].concat(node.arguments);

    case ConditionalExpression:
      return [node.test, node.consequent, node.alternate];

    case MemberExpression:
      return [node.object, node.property];

    case ObjectExpression:
      return node.properties;

    case Property:
      return [node.key, node.value];

    case UnaryExpression:
      return [node.argument];

    case vega_expression_module_Identifier:
    case Literal:
    case RawCode:
    default:
      return [];
  }
}
/*
  The following expression parser is based on Esprima (http://esprima.org/).
  Original header comment and license for Esprima is included here:

  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


var TokenName, vega_expression_module_source, vega_expression_module_index, vega_expression_module_length, lookahead;
var TokenBooleanLiteral = 1,
    TokenEOF = 2,
    TokenIdentifier = 3,
    TokenKeyword = 4,
    TokenNullLiteral = 5,
    TokenNumericLiteral = 6,
    TokenPunctuator = 7,
    TokenStringLiteral = 8,
    TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = 'Boolean';
TokenName[TokenEOF] = '<end>';
TokenName[TokenIdentifier] = 'Identifier';
TokenName[TokenKeyword] = 'Keyword';
TokenName[TokenNullLiteral] = 'Null';
TokenName[TokenNumericLiteral] = 'Numeric';
TokenName[TokenPunctuator] = 'Punctuator';
TokenName[TokenStringLiteral] = 'String';
TokenName[TokenRegularExpression] = 'RegularExpression';
var SyntaxArrayExpression = 'ArrayExpression',
    SyntaxBinaryExpression = 'BinaryExpression',
    SyntaxCallExpression = 'CallExpression',
    SyntaxConditionalExpression = 'ConditionalExpression',
    SyntaxIdentifier = 'Identifier',
    SyntaxLiteral = 'Literal',
    SyntaxLogicalExpression = 'LogicalExpression',
    SyntaxMemberExpression = 'MemberExpression',
    SyntaxObjectExpression = 'ObjectExpression',
    SyntaxProperty = 'Property',
    SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.

var MessageUnexpectedToken = 'Unexpected token %0',
    MessageUnexpectedNumber = 'Unexpected number',
    MessageUnexpectedString = 'Unexpected string',
    MessageUnexpectedIdentifier = 'Unexpected identifier',
    MessageUnexpectedReserved = 'Unexpected reserved word',
    MessageUnexpectedEOS = 'Unexpected end of input',
    MessageInvalidRegExp = 'Invalid regular expression',
    MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
    MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
    MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
var ILLEGAL = 'ILLEGAL',
    DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.

var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
    // eslint-disable-next-line no-misleading-character-class
RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
// This is only to have a better contract semantic, i.e. another safety net
// to catch a logic error. The condition shall be fulfilled in normal case.
// Do NOT use this to enforce a certain condition on any user input.

function assert(condition, message) {
  /* istanbul ignore next */
  if (!condition) {
    throw new Error('ASSERT: ' + message);
  }
}

function isDecimalDigit(ch) {
  return ch >= 0x30 && ch <= 0x39; // 0..9
}

function isHexDigit(ch) {
  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
}

function isOctalDigit(ch) {
  return '01234567'.indexOf(ch) >= 0;
} // 7.2 White Space


function isWhiteSpace(ch) {
  return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
} // 7.3 Line Terminators


function isLineTerminator(ch) {
  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
} // 7.6 Identifier Names and Identifiers


function isIdentifierStart(ch) {
  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
  ch >= 0x41 && ch <= 0x5A || // A..Z
  ch >= 0x61 && ch <= 0x7A || // a..z
  ch === 0x5C || // \ (backslash)
  ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
}

function isIdentifierPart(ch) {
  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
  ch >= 0x41 && ch <= 0x5A || // A..Z
  ch >= 0x61 && ch <= 0x7A || // a..z
  ch >= 0x30 && ch <= 0x39 || // 0..9
  ch === 0x5C || // \ (backslash)
  ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
} // 7.6.1.1 Keywords


var keywords = {
  'if': 1,
  'in': 1,
  'do': 1,
  'var': 1,
  'for': 1,
  'new': 1,
  'try': 1,
  'let': 1,
  'this': 1,
  'else': 1,
  'case': 1,
  'void': 1,
  'with': 1,
  'enum': 1,
  'while': 1,
  'break': 1,
  'catch': 1,
  'throw': 1,
  'const': 1,
  'yield': 1,
  'class': 1,
  'super': 1,
  'return': 1,
  'typeof': 1,
  'delete': 1,
  'switch': 1,
  'export': 1,
  'import': 1,
  'public': 1,
  'static': 1,
  'default': 1,
  'finally': 1,
  'extends': 1,
  'package': 1,
  'private': 1,
  'function': 1,
  'continue': 1,
  'debugger': 1,
  'interface': 1,
  'protected': 1,
  'instanceof': 1,
  'implements': 1
};

function skipComment() {
  while (vega_expression_module_index < vega_expression_module_length) {
    var ch = vega_expression_module_source.charCodeAt(vega_expression_module_index);

    if (isWhiteSpace(ch) || isLineTerminator(ch)) {
      ++vega_expression_module_index;
    } else {
      break;
    }
  }
}

function scanHexEscape(prefix) {
  var i,
      len,
      ch,
      code = 0;
  len = prefix === 'u' ? 4 : 2;

  for (i = 0; i < len; ++i) {
    if (vega_expression_module_index < vega_expression_module_length && isHexDigit(vega_expression_module_source[vega_expression_module_index])) {
      ch = vega_expression_module_source[vega_expression_module_index++];
      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }

  return String.fromCharCode(code);
}

function scanUnicodeCodePointEscape() {
  var ch, code, cu1, cu2;
  ch = vega_expression_module_source[vega_expression_module_index];
  code = 0; // At least, one hex digit is required.

  if (ch === '}') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source[vega_expression_module_index++];

    if (!isHexDigit(ch)) {
      break;
    }

    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
  }

  if (code > 0x10FFFF || ch !== '}') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  } // UTF-16 Encoding


  if (code <= 0xFFFF) {
    return String.fromCharCode(code);
  }

  cu1 = (code - 0x10000 >> 10) + 0xD800;
  cu2 = (code - 0x10000 & 1023) + 0xDC00;
  return String.fromCharCode(cu1, cu2);
}

function getEscapedIdentifier() {
  var ch, id;
  ch = vega_expression_module_source.charCodeAt(vega_expression_module_index++);
  id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

  if (ch === 0x5C) {
    if (vega_expression_module_source.charCodeAt(vega_expression_module_index) !== 0x75) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    ++vega_expression_module_index;
    ch = scanHexEscape('u');

    if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    id = ch;
  }

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source.charCodeAt(vega_expression_module_index);

    if (!isIdentifierPart(ch)) {
      break;
    }

    ++vega_expression_module_index;
    id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

    if (ch === 0x5C) {
      id = id.substr(0, id.length - 1);

      if (vega_expression_module_source.charCodeAt(vega_expression_module_index) !== 0x75) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      ++vega_expression_module_index;
      ch = scanHexEscape('u');

      if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      id += ch;
    }
  }

  return id;
}

function getIdentifier() {
  var start, ch;
  start = vega_expression_module_index++;

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source.charCodeAt(vega_expression_module_index);

    if (ch === 0x5C) {
      // Blackslash (U+005C) marks Unicode escape sequence.
      vega_expression_module_index = start;
      return getEscapedIdentifier();
    }

    if (isIdentifierPart(ch)) {
      ++vega_expression_module_index;
    } else {
      break;
    }
  }

  return vega_expression_module_source.slice(start, vega_expression_module_index);
}

function scanIdentifier() {
  var start, id, type;
  start = vega_expression_module_index; // Backslash (U+005C) starts an escaped character.

  id = vega_expression_module_source.charCodeAt(vega_expression_module_index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
  // Thus, it must be an identifier.

  if (id.length === 1) {
    type = TokenIdentifier;
  } else if (keywords.hasOwnProperty(id)) {
    // eslint-disable-line no-prototype-builtins
    type = TokenKeyword;
  } else if (id === 'null') {
    type = TokenNullLiteral;
  } else if (id === 'true' || id === 'false') {
    type = TokenBooleanLiteral;
  } else {
    type = TokenIdentifier;
  }

  return {
    type: type,
    value: id,
    start: start,
    end: vega_expression_module_index
  };
} // 7.7 Punctuators


function scanPunctuator() {
  var start = vega_expression_module_index,
      code = vega_expression_module_source.charCodeAt(vega_expression_module_index),
      code2,
      ch1 = vega_expression_module_source[vega_expression_module_index],
      ch2,
      ch3,
      ch4;

  switch (code) {
    // Check for most common single-character punctuators.
    case 0x2E: // . dot

    case 0x28: // ( open bracket

    case 0x29: // ) close bracket

    case 0x3B: // ; semicolon

    case 0x2C: // , comma

    case 0x7B: // { open curly brace

    case 0x7D: // } close curly brace

    case 0x5B: // [

    case 0x5D: // ]

    case 0x3A: // :

    case 0x3F: // ?

    case 0x7E:
      // ~
      ++vega_expression_module_index;
      return {
        type: TokenPunctuator,
        value: String.fromCharCode(code),
        start: start,
        end: vega_expression_module_index
      };

    default:
      code2 = vega_expression_module_source.charCodeAt(vega_expression_module_index + 1); // '=' (U+003D) marks an assignment or comparison operator.

      if (code2 === 0x3D) {
        switch (code) {
          case 0x2B: // +

          case 0x2D: // -

          case 0x2F: // /

          case 0x3C: // <

          case 0x3E: // >

          case 0x5E: // ^

          case 0x7C: // |

          case 0x25: // %

          case 0x26: // &

          case 0x2A:
            // *
            vega_expression_module_index += 2;
            return {
              type: TokenPunctuator,
              value: String.fromCharCode(code) + String.fromCharCode(code2),
              start: start,
              end: vega_expression_module_index
            };

          case 0x21: // !

          case 0x3D:
            // =
            vega_expression_module_index += 2; // !== and ===

            if (vega_expression_module_source.charCodeAt(vega_expression_module_index) === 0x3D) {
              ++vega_expression_module_index;
            }

            return {
              type: TokenPunctuator,
              value: vega_expression_module_source.slice(start, vega_expression_module_index),
              start: start,
              end: vega_expression_module_index
            };
        }
      }

  } // 4-character punctuator: >>>=


  ch4 = vega_expression_module_source.substr(vega_expression_module_index, 4);

  if (ch4 === '>>>=') {
    vega_expression_module_index += 4;
    return {
      type: TokenPunctuator,
      value: ch4,
      start: start,
      end: vega_expression_module_index
    };
  } // 3-character punctuators: === !== >>> <<= >>=


  ch3 = ch4.substr(0, 3);

  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
    vega_expression_module_index += 3;
    return {
      type: TokenPunctuator,
      value: ch3,
      start: start,
      end: vega_expression_module_index
    };
  } // Other 2-character punctuators: ++ -- << >> && ||


  ch2 = ch3.substr(0, 2);

  if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
    vega_expression_module_index += 2;
    return {
      type: TokenPunctuator,
      value: ch2,
      start: start,
      end: vega_expression_module_index
    };
  }

  if (ch2 === '//') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  } // 1-character punctuators: < > = ! + - * % & | ^ /


  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
    ++vega_expression_module_index;
    return {
      type: TokenPunctuator,
      value: ch1,
      start: start,
      end: vega_expression_module_index
    };
  }

  throwError({}, MessageUnexpectedToken, ILLEGAL);
} // 7.8.3 Numeric Literals


function scanHexLiteral(start) {
  var number = '';

  while (vega_expression_module_index < vega_expression_module_length) {
    if (!isHexDigit(vega_expression_module_source[vega_expression_module_index])) {
      break;
    }

    number += vega_expression_module_source[vega_expression_module_index++];
  }

  if (number.length === 0) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  if (isIdentifierStart(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseInt('0x' + number, 16),
    start: start,
    end: vega_expression_module_index
  };
}

function scanOctalLiteral(start) {
  var number = '0' + vega_expression_module_source[vega_expression_module_index++];

  while (vega_expression_module_index < vega_expression_module_length) {
    if (!isOctalDigit(vega_expression_module_source[vega_expression_module_index])) {
      break;
    }

    number += vega_expression_module_source[vega_expression_module_index++];
  }

  if (isIdentifierStart(vega_expression_module_source.charCodeAt(vega_expression_module_index)) || isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseInt(number, 8),
    octal: true,
    start: start,
    end: vega_expression_module_index
  };
}

function scanNumericLiteral() {
  var number, start, ch;
  ch = vega_expression_module_source[vega_expression_module_index];
  assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
  start = vega_expression_module_index;
  number = '';

  if (ch !== '.') {
    number = vega_expression_module_source[vega_expression_module_index++];
    ch = vega_expression_module_source[vega_expression_module_index]; // Hex number starts with '0x'.
    // Octal number starts with '0'.

    if (number === '0') {
      if (ch === 'x' || ch === 'X') {
        ++vega_expression_module_index;
        return scanHexLiteral(start);
      }

      if (isOctalDigit(ch)) {
        return scanOctalLiteral(start);
      } // decimal number starts with '0' such as '09' is illegal.


      if (ch && isDecimalDigit(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }

    while (isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
      number += vega_expression_module_source[vega_expression_module_index++];
    }

    ch = vega_expression_module_source[vega_expression_module_index];
  }

  if (ch === '.') {
    number += vega_expression_module_source[vega_expression_module_index++];

    while (isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
      number += vega_expression_module_source[vega_expression_module_index++];
    }

    ch = vega_expression_module_source[vega_expression_module_index];
  }

  if (ch === 'e' || ch === 'E') {
    number += vega_expression_module_source[vega_expression_module_index++];
    ch = vega_expression_module_source[vega_expression_module_index];

    if (ch === '+' || ch === '-') {
      number += vega_expression_module_source[vega_expression_module_index++];
    }

    if (isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
      while (isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
        number += vega_expression_module_source[vega_expression_module_index++];
      }
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }

  if (isIdentifierStart(vega_expression_module_source.charCodeAt(vega_expression_module_index))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenNumericLiteral,
    value: parseFloat(number),
    start: start,
    end: vega_expression_module_index
  };
} // 7.8.4 String Literals


function scanStringLiteral() {
  var str = '',
      quote,
      start,
      ch,
      code,
      octal = false;
  quote = vega_expression_module_source[vega_expression_module_index];
  assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
  start = vega_expression_module_index;
  ++vega_expression_module_index;

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source[vega_expression_module_index++];

    if (ch === quote) {
      quote = '';
      break;
    } else if (ch === '\\') {
      ch = vega_expression_module_source[vega_expression_module_index++];

      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
        switch (ch) {
          case 'u':
          case 'x':
            if (vega_expression_module_source[vega_expression_module_index] === '{') {
              ++vega_expression_module_index;
              str += scanUnicodeCodePointEscape();
            } else {
              str += scanHexEscape(ch);
            }

            break;

          case 'n':
            str += '\n';
            break;

          case 'r':
            str += '\r';
            break;

          case 't':
            str += '\t';
            break;

          case 'b':
            str += '\b';
            break;

          case 'f':
            str += '\f';
            break;

          case 'v':
            str += '\x0B';
            break;

          default:
            if (isOctalDigit(ch)) {
              code = '01234567'.indexOf(ch); // \0 is not octal escape sequence

              if (code !== 0) {
                octal = true;
              }

              if (vega_expression_module_index < vega_expression_module_length && isOctalDigit(vega_expression_module_source[vega_expression_module_index])) {
                octal = true;
                code = code * 8 + '01234567'.indexOf(vega_expression_module_source[vega_expression_module_index++]); // 3 digits are only allowed when string starts
                // with 0, 1, 2, 3

                if ('0123'.indexOf(ch) >= 0 && vega_expression_module_index < vega_expression_module_length && isOctalDigit(vega_expression_module_source[vega_expression_module_index])) {
                  code = code * 8 + '01234567'.indexOf(vega_expression_module_source[vega_expression_module_index++]);
                }
              }

              str += String.fromCharCode(code);
            } else {
              str += ch;
            }

            break;
        }
      } else {
        if (ch === '\r' && vega_expression_module_source[vega_expression_module_index] === '\n') {
          ++vega_expression_module_index;
        }
      }
    } else if (isLineTerminator(ch.charCodeAt(0))) {
      break;
    } else {
      str += ch;
    }
  }

  if (quote !== '') {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }

  return {
    type: TokenStringLiteral,
    value: str,
    octal: octal,
    start: start,
    end: vega_expression_module_index
  };
}

function testRegExp(pattern, flags) {
  var tmp = pattern;

  if (flags.indexOf('u') >= 0) {
    // Replace each astral symbol and every Unicode code point
    // escape sequence with a single ASCII symbol to avoid throwing on
    // regular expressions that are only valid in combination with the
    // `/u` flag.
    // Note: replacing with the ASCII symbol `x` might cause false
    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
    // perfectly valid pattern that is equivalent to `[a-b]`, but it
    // would be replaced by `[x-b]` which throws an error.
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function ($0, $1) {
      if (parseInt($1, 16) <= 0x10FFFF) {
        return 'x';
      }

      throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
  } // First, detect invalid regular expressions.


  try {
    new RegExp(tmp);
  } catch (e) {
    throwError({}, MessageInvalidRegExp);
  } // Return a regular expression object for this pattern-flag pair, or
  // `null` in case the current environment doesn't support the flags it
  // uses.


  try {
    return new RegExp(pattern, flags);
  } catch (exception) {
    return null;
  }
}

function scanRegExpBody() {
  var ch, str, classMarker, terminated, body;
  ch = vega_expression_module_source[vega_expression_module_index];
  assert(ch === '/', 'Regular expression literal must start with a slash');
  str = vega_expression_module_source[vega_expression_module_index++];
  classMarker = false;
  terminated = false;

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source[vega_expression_module_index++];
    str += ch;

    if (ch === '\\') {
      ch = vega_expression_module_source[vega_expression_module_index++]; // ECMA-262 7.8.5

      if (isLineTerminator(ch.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      }

      str += ch;
    } else if (isLineTerminator(ch.charCodeAt(0))) {
      throwError({}, MessageUnterminatedRegExp);
    } else if (classMarker) {
      if (ch === ']') {
        classMarker = false;
      }
    } else {
      if (ch === '/') {
        terminated = true;
        break;
      } else if (ch === '[') {
        classMarker = true;
      }
    }
  }

  if (!terminated) {
    throwError({}, MessageUnterminatedRegExp);
  } // Exclude leading and trailing slash.


  body = str.substr(1, str.length - 2);
  return {
    value: body,
    literal: str
  };
}

function scanRegExpFlags() {
  var ch, str, flags;
  str = '';
  flags = '';

  while (vega_expression_module_index < vega_expression_module_length) {
    ch = vega_expression_module_source[vega_expression_module_index];

    if (!isIdentifierPart(ch.charCodeAt(0))) {
      break;
    }

    ++vega_expression_module_index;

    if (ch === '\\' && vega_expression_module_index < vega_expression_module_length) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    } else {
      flags += ch;
      str += ch;
    }
  }

  if (flags.search(/[^gimuy]/g) >= 0) {
    throwError({}, MessageInvalidRegExp, flags);
  }

  return {
    value: flags,
    literal: str
  };
}

function scanRegExp() {
  var start, body, flags, value;
  lookahead = null;
  skipComment();
  start = vega_expression_module_index;
  body = scanRegExpBody();
  flags = scanRegExpFlags();
  value = testRegExp(body.value, flags.value);
  return {
    literal: body.literal + flags.literal,
    value: value,
    regex: {
      pattern: body.value,
      flags: flags.value
    },
    start: start,
    end: vega_expression_module_index
  };
}

function isIdentifierName(token) {
  return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}

function advance() {
  skipComment();

  if (vega_expression_module_index >= vega_expression_module_length) {
    return {
      type: TokenEOF,
      start: vega_expression_module_index,
      end: vega_expression_module_index
    };
  }

  var ch = vega_expression_module_source.charCodeAt(vega_expression_module_index);

  if (isIdentifierStart(ch)) {
    return scanIdentifier();
  } // Very common: ( and ) and ;


  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
    return scanPunctuator();
  } // String literal starts with single quote (U+0027) or double quote (U+0022).


  if (ch === 0x27 || ch === 0x22) {
    return scanStringLiteral();
  } // Dot (.) U+002E can also start a floating-point number, hence the need
  // to check the next character.


  if (ch === 0x2E) {
    if (isDecimalDigit(vega_expression_module_source.charCodeAt(vega_expression_module_index + 1))) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  if (isDecimalDigit(ch)) {
    return scanNumericLiteral();
  }

  return scanPunctuator();
}

function lex() {
  var token = lookahead;
  vega_expression_module_index = token.end;
  lookahead = advance();
  vega_expression_module_index = token.end;
  return token;
}

function vega_expression_module_peek() {
  var pos = vega_expression_module_index;
  lookahead = advance();
  vega_expression_module_index = pos;
}

function finishArrayExpression(elements) {
  var node = new ASTNode(SyntaxArrayExpression);
  node.elements = elements;
  return node;
}

function finishBinaryExpression(operator, left, right) {
  var node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);
  node.operator = operator;
  node.left = left;
  node.right = right;
  return node;
}

function finishCallExpression(callee, args) {
  var node = new ASTNode(SyntaxCallExpression);
  node.callee = callee;
  node.arguments = args;
  return node;
}

function finishConditionalExpression(test, consequent, alternate) {
  var node = new ASTNode(SyntaxConditionalExpression);
  node.test = test;
  node.consequent = consequent;
  node.alternate = alternate;
  return node;
}

function finishIdentifier(name) {
  var node = new ASTNode(SyntaxIdentifier);
  node.name = name;
  return node;
}

function finishLiteral(token) {
  var node = new ASTNode(SyntaxLiteral);
  node.value = token.value;
  node.raw = vega_expression_module_source.slice(token.start, token.end);

  if (token.regex) {
    if (node.raw === '//') {
      node.raw = '/(?:)/';
    }

    node.regex = token.regex;
  }

  return node;
}

function finishMemberExpression(accessor, object, property) {
  var node = new ASTNode(SyntaxMemberExpression);
  node.computed = accessor === '[';
  node.object = object;
  node.property = property;
  if (!node.computed) property.member = true;
  return node;
}

function finishObjectExpression(properties) {
  var node = new ASTNode(SyntaxObjectExpression);
  node.properties = properties;
  return node;
}

function finishProperty(kind, key, value) {
  var node = new ASTNode(SyntaxProperty);
  node.key = key;
  node.value = value;
  node.kind = kind;
  return node;
}

function finishUnaryExpression(operator, argument) {
  var node = new ASTNode(SyntaxUnaryExpression);
  node.operator = operator;
  node.argument = argument;
  node.prefix = true;
  return node;
} // Throw an exception


function throwError(token, messageFormat) {
  var error,
      args = Array.prototype.slice.call(arguments, 2),
      msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
    assert(index < args.length, 'Message reference must be in range');
    return args[index];
  });
  error = new Error(msg);
  error.index = vega_expression_module_index;
  error.description = msg;
  throw error;
} // Throw an exception because of the token.


function throwUnexpected(token) {
  if (token.type === TokenEOF) {
    throwError(token, MessageUnexpectedEOS);
  }

  if (token.type === TokenNumericLiteral) {
    throwError(token, MessageUnexpectedNumber);
  }

  if (token.type === TokenStringLiteral) {
    throwError(token, MessageUnexpectedString);
  }

  if (token.type === TokenIdentifier) {
    throwError(token, MessageUnexpectedIdentifier);
  }

  if (token.type === TokenKeyword) {
    throwError(token, MessageUnexpectedReserved);
  } // BooleanLiteral, NullLiteral, or Punctuator.


  throwError(token, MessageUnexpectedToken, token.value);
} // Expect the next token to match the specified punctuator.
// If not, an exception will be thrown.


function expect(value) {
  var token = lex();

  if (token.type !== TokenPunctuator || token.value !== value) {
    throwUnexpected(token);
  }
} // Return true if the next token matches the specified punctuator.


function match(value) {
  return lookahead.type === TokenPunctuator && lookahead.value === value;
} // Return true if the next token matches the specified keyword


function matchKeyword(keyword) {
  return lookahead.type === TokenKeyword && lookahead.value === keyword;
} // 11.1.4 Array Initialiser


function parseArrayInitialiser() {
  var elements = [];
  vega_expression_module_index = lookahead.start;
  expect('[');

  while (!match(']')) {
    if (match(',')) {
      lex();
      elements.push(null);
    } else {
      elements.push(parseConditionalExpression());

      if (!match(']')) {
        expect(',');
      }
    }
  }

  lex();
  return finishArrayExpression(elements);
} // 11.1.5 Object Initialiser


function parseObjectPropertyKey() {
  vega_expression_module_index = lookahead.start;
  var token = lex(); // Note: This function is called only from parseObjectProperty(), where
  // EOF and Punctuator tokens are already filtered out.

  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
    if (token.octal) {
      throwError(token, MessageStrictOctalLiteral);
    }

    return finishLiteral(token);
  }

  return finishIdentifier(token.value);
}

function parseObjectProperty() {
  var token, key, id, value;
  vega_expression_module_index = lookahead.start;
  token = lookahead;

  if (token.type === TokenIdentifier) {
    id = parseObjectPropertyKey();
    expect(':');
    value = parseConditionalExpression();
    return finishProperty('init', id, value);
  }

  if (token.type === TokenEOF || token.type === TokenPunctuator) {
    throwUnexpected(token);
  } else {
    key = parseObjectPropertyKey();
    expect(':');
    value = parseConditionalExpression();
    return finishProperty('init', key, value);
  }
}

function parseObjectInitialiser() {
  var properties = [],
      property,
      name,
      key,
      map = {},
      toString = String;
  vega_expression_module_index = lookahead.start;
  expect('{');

  while (!match('}')) {
    property = parseObjectProperty();

    if (property.key.type === SyntaxIdentifier) {
      name = property.key.name;
    } else {
      name = toString(property.key.value);
    }

    key = '$' + name;

    if (Object.prototype.hasOwnProperty.call(map, key)) {
      throwError({}, MessageStrictDuplicateProperty);
    } else {
      map[key] = true;
    }

    properties.push(property);

    if (!match('}')) {
      expect(',');
    }
  }

  expect('}');
  return finishObjectExpression(properties);
} // 11.1.6 The Grouping Operator


function parseGroupExpression() {
  expect('(');
  var expr = parseExpression();
  expect(')');
  return expr;
} // 11.1 Primary Expressions


var legalKeywords = {
  'if': 1
};

function parsePrimaryExpression() {
  var type, token, expr;

  if (match('(')) {
    return parseGroupExpression();
  }

  if (match('[')) {
    return parseArrayInitialiser();
  }

  if (match('{')) {
    return parseObjectInitialiser();
  }

  type = lookahead.type;
  vega_expression_module_index = lookahead.start;

  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
    expr = finishIdentifier(lex().value);
  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
    if (lookahead.octal) {
      throwError(lookahead, MessageStrictOctalLiteral);
    }

    expr = finishLiteral(lex());
  } else if (type === TokenKeyword) {
    throw new Error(DISABLED);
  } else if (type === TokenBooleanLiteral) {
    token = lex();
    token.value = token.value === 'true';
    expr = finishLiteral(token);
  } else if (type === TokenNullLiteral) {
    token = lex();
    token.value = null;
    expr = finishLiteral(token);
  } else if (match('/') || match('/=')) {
    expr = finishLiteral(scanRegExp());
    vega_expression_module_peek();
  } else {
    throwUnexpected(lex());
  }

  return expr;
} // 11.2 Left-Hand-Side Expressions


function parseArguments() {
  var args = [];
  expect('(');

  if (!match(')')) {
    while (vega_expression_module_index < vega_expression_module_length) {
      args.push(parseConditionalExpression());

      if (match(')')) {
        break;
      }

      expect(',');
    }
  }

  expect(')');
  return args;
}

function parseNonComputedProperty() {
  vega_expression_module_index = lookahead.start;
  var token = lex();

  if (!isIdentifierName(token)) {
    throwUnexpected(token);
  }

  return finishIdentifier(token.value);
}

function parseNonComputedMember() {
  expect('.');
  return parseNonComputedProperty();
}

function parseComputedMember() {
  expect('[');
  var expr = parseExpression();
  expect(']');
  return expr;
}

function parseLeftHandSideExpressionAllowCall() {
  var expr, args, property;
  expr = parsePrimaryExpression();

  for (;;) {
    if (match('.')) {
      property = parseNonComputedMember();
      expr = finishMemberExpression('.', expr, property);
    } else if (match('(')) {
      args = parseArguments();
      expr = finishCallExpression(expr, args);
    } else if (match('[')) {
      property = parseComputedMember();
      expr = finishMemberExpression('[', expr, property);
    } else {
      break;
    }
  }

  return expr;
} // 11.3 Postfix Expressions


function parsePostfixExpression() {
  var expr = parseLeftHandSideExpressionAllowCall();

  if (lookahead.type === TokenPunctuator) {
    if (match('++') || match('--')) {
      throw new Error(DISABLED);
    }
  }

  return expr;
} // 11.4 Unary Operators


function parseUnaryExpression() {
  var token, expr;

  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
    expr = parsePostfixExpression();
  } else if (match('++') || match('--')) {
    throw new Error(DISABLED);
  } else if (match('+') || match('-') || match('~') || match('!')) {
    token = lex();
    expr = parseUnaryExpression();
    expr = finishUnaryExpression(token.value, expr);
  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
    throw new Error(DISABLED);
  } else {
    expr = parsePostfixExpression();
  }

  return expr;
}

function binaryPrecedence(token) {
  var prec = 0;

  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
    return 0;
  }

  switch (token.value) {
    case '||':
      prec = 1;
      break;

    case '&&':
      prec = 2;
      break;

    case '|':
      prec = 3;
      break;

    case '^':
      prec = 4;
      break;

    case '&':
      prec = 5;
      break;

    case '==':
    case '!=':
    case '===':
    case '!==':
      prec = 6;
      break;

    case '<':
    case '>':
    case '<=':
    case '>=':
    case 'instanceof':
    case 'in':
      prec = 7;
      break;

    case '<<':
    case '>>':
    case '>>>':
      prec = 8;
      break;

    case '+':
    case '-':
      prec = 9;
      break;

    case '*':
    case '/':
    case '%':
      prec = 11;
      break;
  }

  return prec;
} // 11.5 Multiplicative Operators
// 11.6 Additive Operators
// 11.7 Bitwise Shift Operators
// 11.8 Relational Operators
// 11.9 Equality Operators
// 11.10 Binary Bitwise Operators
// 11.11 Binary Logical Operators


function parseBinaryExpression() {
  var marker, markers, expr, token, prec, stack, right, operator, left, i;
  marker = lookahead;
  left = parseUnaryExpression();
  token = lookahead;
  prec = binaryPrecedence(token);

  if (prec === 0) {
    return left;
  }

  token.prec = prec;
  lex();
  markers = [marker, lookahead];
  right = parseUnaryExpression();
  stack = [left, token, right];

  while ((prec = binaryPrecedence(lookahead)) > 0) {
    // Reduce: make a binary expression from the three topmost entries.
    while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
      right = stack.pop();
      operator = stack.pop().value;
      left = stack.pop();
      markers.pop();
      expr = finishBinaryExpression(operator, left, right);
      stack.push(expr);
    } // Shift.


    token = lex();
    token.prec = prec;
    stack.push(token);
    markers.push(lookahead);
    expr = parseUnaryExpression();
    stack.push(expr);
  } // Final reduce to clean-up the stack.


  i = stack.length - 1;
  expr = stack[i];
  markers.pop();

  while (i > 1) {
    markers.pop();
    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
    i -= 2;
  }

  return expr;
} // 11.12 Conditional Operator


function parseConditionalExpression() {
  var expr, consequent, alternate;
  expr = parseBinaryExpression();

  if (match('?')) {
    lex();
    consequent = parseConditionalExpression();
    expect(':');
    alternate = parseConditionalExpression();
    expr = finishConditionalExpression(expr, consequent, alternate);
  }

  return expr;
} // 11.14 Comma Operator


function parseExpression() {
  var expr = parseConditionalExpression();

  if (match(',')) {
    throw new Error(DISABLED); // no sequence expressions
  }

  return expr;
}

function parser(code) {
  vega_expression_module_source = code;
  vega_expression_module_index = 0;
  vega_expression_module_length = vega_expression_module_source.length;
  lookahead = null;
  vega_expression_module_peek();
  var expr = parseExpression();

  if (lookahead.type !== TokenEOF) {
    throw new Error('Unexpect token after expression.');
  }

  return expr;
}

var Constants = {
  NaN: 'NaN',
  E: 'Math.E',
  LN2: 'Math.LN2',
  LN10: 'Math.LN10',
  LOG2E: 'Math.LOG2E',
  LOG10E: 'Math.LOG10E',
  PI: 'Math.PI',
  SQRT1_2: 'Math.SQRT1_2',
  SQRT2: 'Math.SQRT2',
  MIN_VALUE: 'Number.MIN_VALUE',
  MAX_VALUE: 'Number.MAX_VALUE'
};

function Functions(codegen) {
  function fncall(name, args, cast, type) {
    var obj = codegen(args[0]);

    if (cast) {
      obj = cast + '(' + obj + ')';
      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
    }

    return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');
  }

  function fn(name, cast, type) {
    return function (args) {
      return fncall(name, args, cast, type);
    };
  }

  var DATE = 'new Date',
      STRING = 'String',
      REGEXP = 'RegExp';
  return {
    // MATH functions
    isNaN: 'Number.isNaN',
    isFinite: 'Number.isFinite',
    abs: 'Math.abs',
    acos: 'Math.acos',
    asin: 'Math.asin',
    atan: 'Math.atan',
    atan2: 'Math.atan2',
    ceil: 'Math.ceil',
    cos: 'Math.cos',
    exp: 'Math.exp',
    floor: 'Math.floor',
    log: 'Math.log',
    max: 'Math.max',
    min: 'Math.min',
    pow: 'Math.pow',
    random: 'Math.random',
    round: 'Math.round',
    sin: 'Math.sin',
    sqrt: 'Math.sqrt',
    tan: 'Math.tan',
    clamp: function clamp(args) {
      if (args.length < 3) error('Missing arguments to clamp function.');
      if (args.length > 3) error('Too many arguments to clamp function.');
      var a = args.map(codegen);
      return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';
    },
    // DATE functions
    now: 'Date.now',
    utc: 'Date.UTC',
    datetime: DATE,
    date: fn('getDate', DATE, 0),
    day: fn('getDay', DATE, 0),
    year: fn('getFullYear', DATE, 0),
    month: fn('getMonth', DATE, 0),
    hours: fn('getHours', DATE, 0),
    minutes: fn('getMinutes', DATE, 0),
    seconds: fn('getSeconds', DATE, 0),
    milliseconds: fn('getMilliseconds', DATE, 0),
    time: fn('getTime', DATE, 0),
    timezoneoffset: fn('getTimezoneOffset', DATE, 0),
    utcdate: fn('getUTCDate', DATE, 0),
    utcday: fn('getUTCDay', DATE, 0),
    utcyear: fn('getUTCFullYear', DATE, 0),
    utcmonth: fn('getUTCMonth', DATE, 0),
    utchours: fn('getUTCHours', DATE, 0),
    utcminutes: fn('getUTCMinutes', DATE, 0),
    utcseconds: fn('getUTCSeconds', DATE, 0),
    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
    // sequence functions
    length: fn('length', null, -1),
    // STRING functions
    parseFloat: 'parseFloat',
    parseInt: 'parseInt',
    upper: fn('toUpperCase', STRING, 0),
    lower: fn('toLowerCase', STRING, 0),
    substring: fn('substring', STRING),
    split: fn('split', STRING),
    trim: fn('trim', STRING, 0),
    // REGEXP functions
    regexp: REGEXP,
    test: fn('test', REGEXP),
    // Control Flow functions
    if: function _if(args) {
      if (args.length < 3) error('Missing arguments to if function.');
      if (args.length > 3) error('Too many arguments to if function.');
      var a = args.map(codegen);
      return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';
    }
  };
}

function stripQuotes(s) {
  var n = s && s.length - 1;
  return n && (s[0] === '"' && s[n] === '"' || s[0] === '\'' && s[n] === '\'') ? s.slice(1, -1) : s;
}

function codegen(opt) {
  opt = opt || {};
  var allowed = opt.allowed ? toSet(opt.allowed) : {},
      forbidden = opt.forbidden ? toSet(opt.forbidden) : {},
      constants = opt.constants || Constants,
      functions = (opt.functions || Functions)(visit),
      globalvar = opt.globalvar,
      fieldvar = opt.fieldvar,
      outputGlobal = isFunction(globalvar) ? globalvar : function (id) {
    return "".concat(globalvar, "[\"").concat(id, "\"]");
  };
  var globals = {},
      fields = {},
      memberDepth = 0;

  function visit(ast) {
    if (isString(ast)) return ast;
    var generator = Generators[ast.type];
    if (generator == null) error('Unsupported type: ' + ast.type);
    return generator(ast);
  }

  var Generators = {
    Literal: function Literal(n) {
      return n.raw;
    },
    Identifier: function Identifier(n) {
      var id = n.name;

      if (memberDepth > 0) {
        return id;
      } else if (_has(forbidden, id)) {
        return error('Illegal identifier: ' + id);
      } else if (_has(constants, id)) {
        return constants[id];
      } else if (_has(allowed, id)) {
        return id;
      } else {
        globals[id] = 1;
        return outputGlobal(id);
      }
    },
    MemberExpression: function MemberExpression(n) {
      var d = !n.computed,
          o = visit(n.object);
      if (d) memberDepth += 1;
      var p = visit(n.property);

      if (o === fieldvar) {
        // strip quotes to sanitize field name (#1653)
        fields[stripQuotes(p)] = 1;
      }

      if (d) memberDepth -= 1;
      return o + (d ? '.' + p : '[' + p + ']');
    },
    CallExpression: function CallExpression(n) {
      if (n.callee.type !== 'Identifier') {
        error('Illegal callee type: ' + n.callee.type);
      }

      var callee = n.callee.name,
          args = n.arguments,
          fn = _has(functions, callee) && functions[callee];
      if (!fn) error('Unrecognized function: ' + callee);
      return isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';
    },
    ArrayExpression: function ArrayExpression(n) {
      return '[' + n.elements.map(visit).join(',') + ']';
    },
    BinaryExpression: function BinaryExpression(n) {
      return '(' + visit(n.left) + ' ' + n.operator + ' ' + visit(n.right) + ')';
    },
    UnaryExpression: function UnaryExpression(n) {
      return '(' + n.operator + visit(n.argument) + ')';
    },
    ConditionalExpression: function ConditionalExpression(n) {
      return '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')';
    },
    LogicalExpression: function LogicalExpression(n) {
      return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
    },
    ObjectExpression: function ObjectExpression(n) {
      return '{' + n.properties.map(visit).join(',') + '}';
    },
    Property: function Property(n) {
      memberDepth += 1;
      var k = visit(n.key);
      memberDepth -= 1;
      return k + ':' + visit(n.value);
    }
  };

  function codegen(ast) {
    var result = {
      code: visit(ast),
      globals: Object.keys(globals),
      fields: Object.keys(fields)
    };
    globals = {};
    fields = {};
    return result;
  }

  codegen.functions = functions;
  codegen.constants = constants;
  return codegen;
}


;// CONCATENATED MODULE: ./node_modules/d3-geo/src/area.js




var area_areaRingSum = new Adder(); // hello?

var area_areaSum = new Adder(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var area_areaStream = {
  point: noop_noop,
  lineStart: noop_noop,
  lineEnd: noop_noop,
  polygonStart: function polygonStart() {
    area_areaRingSum = new Adder();
    area_areaStream.lineStart = area_areaRingStart;
    area_areaStream.lineEnd = area_areaRingEnd;
  },
  polygonEnd: function polygonEnd() {
    var areaRing = +area_areaRingSum;
    area_areaSum.add(areaRing < 0 ? math_tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop_noop;
  },
  sphere: function sphere() {
    area_areaSum.add(math_tau);
  }
};

function area_areaRingStart() {
  area_areaStream.point = area_areaPointFirst;
}

function area_areaRingEnd() {
  area_areaPoint(lambda00, phi00);
}

function area_areaPointFirst(lambda, phi) {
  area_areaStream.point = area_areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= src_math_radians, phi *= src_math_radians;
  lambda0 = lambda, cosPhi0 = math_cos(phi = phi / 2 + quarterPi), sinPhi0 = math_sin(phi);
}

function area_areaPoint(lambda, phi) {
  lambda *= src_math_radians, phi *= src_math_radians;
  phi = phi / 2 + quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = math_cos(phi),
      sinPhi = math_sin(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * math_cos(adLambda),
      v = k * sdLambda * math_sin(adLambda);
  area_areaRingSum.add(math_atan2(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

/* harmony default export */ function d3_geo_src_area(object) {
  area_areaSum = new Adder();
  src_stream(object, area_areaStream);
  return area_areaSum * 2;
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/bounds.js





var bounds_lambda0, phi0, lambda1, phi1, // bounds
lambda2, // previous lambda-coordinate
bounds_lambda00, bounds_phi00, // first point
p0, // previous 3D point
deltaSum, ranges, bounds_range;
var bounds_boundsStream = {
  point: bounds_boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function polygonStart() {
    bounds_boundsStream.point = boundsRingPoint;
    bounds_boundsStream.lineStart = boundsRingStart;
    bounds_boundsStream.lineEnd = boundsRingEnd;
    deltaSum = new Adder();
    area_areaStream.polygonStart();
  },
  polygonEnd: function polygonEnd() {
    area_areaStream.polygonEnd();
    bounds_boundsStream.point = bounds_boundsPoint;
    bounds_boundsStream.lineStart = boundsLineStart;
    bounds_boundsStream.lineEnd = boundsLineEnd;
    if (area_areaRingSum < 0) bounds_lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > src_math_epsilon) phi1 = 90;else if (deltaSum < -src_math_epsilon) phi0 = -90;
    bounds_range[0] = bounds_lambda0, bounds_range[1] = lambda1;
  },
  sphere: function sphere() {
    bounds_lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function bounds_boundsPoint(lambda, phi) {
  ranges.push(bounds_range = [bounds_lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = cartesian([lambda * src_math_radians, phi * src_math_radians]);

  if (p0) {
    var normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * src_math_degrees * sign,
        phii,
        antimeridian = math_abs(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * src_math_degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * src_math_degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(bounds_lambda0, lambda) > angle(bounds_lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(bounds_lambda0, lambda1)) bounds_lambda0 = lambda;
      }
    } else {
      if (lambda1 >= bounds_lambda0) {
        if (lambda < bounds_lambda0) bounds_lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(bounds_lambda0, lambda) > angle(bounds_lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(bounds_lambda0, lambda1)) bounds_lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(bounds_range = [bounds_lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  bounds_boundsStream.point = linePoint;
}

function boundsLineEnd() {
  bounds_range[0] = bounds_lambda0, bounds_range[1] = lambda1;
  bounds_boundsStream.point = bounds_boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(math_abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    bounds_lambda00 = lambda, bounds_phi00 = phi;
  }

  area_areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  area_areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(bounds_lambda00, bounds_phi00);
  area_areaStream.lineEnd();
  if (math_abs(deltaSum) > src_math_epsilon) bounds_lambda0 = -(lambda1 = 180);
  bounds_range[0] = bounds_lambda0, bounds_range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

/* harmony default export */ function src_bounds(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(bounds_lambda0 = phi0 = Infinity);
  ranges = [];
  src_stream(feature, bounds_boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, bounds_lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = bounds_range = null;
  return bounds_lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[bounds_lambda0, phi0], [lambda1, phi1]];
}
;// CONCATENATED MODULE: ./node_modules/d3-geo/src/centroid.js




var W0, W1, centroid_X0, centroid_Y0, centroid_Z0, centroid_X1, centroid_Y1, centroid_Z1, centroid_X2, centroid_Y2, centroid_Z2, centroid_lambda00, centroid_phi00, // first point
src_centroid_x0, src_centroid_y0, z0; // previous point

var centroid_centroidStream = {
  sphere: noop_noop,
  point: centroid_centroidPoint,
  lineStart: centroid_centroidLineStart,
  lineEnd: centroid_centroidLineEnd,
  polygonStart: function polygonStart() {
    centroid_centroidStream.lineStart = centroid_centroidRingStart;
    centroid_centroidStream.lineEnd = centroid_centroidRingEnd;
  },
  polygonEnd: function polygonEnd() {
    centroid_centroidStream.lineStart = centroid_centroidLineStart;
    centroid_centroidStream.lineEnd = centroid_centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroid_centroidPoint(lambda, phi) {
  lambda *= src_math_radians, phi *= src_math_radians;
  var cosPhi = math_cos(phi);
  centroidPointCartesian(cosPhi * math_cos(lambda), cosPhi * math_sin(lambda), math_sin(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  centroid_X0 += (x - centroid_X0) / W0;
  centroid_Y0 += (y - centroid_Y0) / W0;
  centroid_Z0 += (z - centroid_Z0) / W0;
}

function centroid_centroidLineStart() {
  centroid_centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= src_math_radians, phi *= src_math_radians;
  var cosPhi = math_cos(phi);
  src_centroid_x0 = cosPhi * math_cos(lambda);
  src_centroid_y0 = cosPhi * math_sin(lambda);
  z0 = math_sin(phi);
  centroid_centroidStream.point = centroidLinePoint;
  centroidPointCartesian(src_centroid_x0, src_centroid_y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= src_math_radians, phi *= src_math_radians;
  var cosPhi = math_cos(phi),
      x = cosPhi * math_cos(lambda),
      y = cosPhi * math_sin(lambda),
      z = math_sin(phi),
      w = math_atan2(math_sqrt((w = src_centroid_y0 * z - z0 * y) * w + (w = z0 * x - src_centroid_x0 * z) * w + (w = src_centroid_x0 * y - src_centroid_y0 * x) * w), src_centroid_x0 * x + src_centroid_y0 * y + z0 * z);
  W1 += w;
  centroid_X1 += w * (src_centroid_x0 + (src_centroid_x0 = x));
  centroid_Y1 += w * (src_centroid_y0 + (src_centroid_y0 = y));
  centroid_Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(src_centroid_x0, src_centroid_y0, z0);
}

function centroid_centroidLineEnd() {
  centroid_centroidStream.point = centroid_centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroid_centroidRingStart() {
  centroid_centroidStream.point = centroidRingPointFirst;
}

function centroid_centroidRingEnd() {
  centroidRingPoint(centroid_lambda00, centroid_phi00);
  centroid_centroidStream.point = centroid_centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  centroid_lambda00 = lambda, centroid_phi00 = phi;
  lambda *= src_math_radians, phi *= src_math_radians;
  centroid_centroidStream.point = centroidRingPoint;
  var cosPhi = math_cos(phi);
  src_centroid_x0 = cosPhi * math_cos(lambda);
  src_centroid_y0 = cosPhi * math_sin(lambda);
  z0 = math_sin(phi);
  centroidPointCartesian(src_centroid_x0, src_centroid_y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= src_math_radians, phi *= src_math_radians;
  var cosPhi = math_cos(phi),
      x = cosPhi * math_cos(lambda),
      y = cosPhi * math_sin(lambda),
      z = math_sin(phi),
      cx = src_centroid_y0 * z - z0 * y,
      cy = z0 * x - src_centroid_x0 * z,
      cz = src_centroid_x0 * y - src_centroid_y0 * x,
      m = hypot(cx, cy, cz),
      w = math_asin(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  centroid_X2.add(v * cx);
  centroid_Y2.add(v * cy);
  centroid_Z2.add(v * cz);
  W1 += w;
  centroid_X1 += w * (src_centroid_x0 + (src_centroid_x0 = x));
  centroid_Y1 += w * (src_centroid_y0 + (src_centroid_y0 = y));
  centroid_Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(src_centroid_x0, src_centroid_y0, z0);
}

/* harmony default export */ function src_centroid(object) {
  W0 = W1 = centroid_X0 = centroid_Y0 = centroid_Z0 = centroid_X1 = centroid_Y1 = centroid_Z1 = 0;
  centroid_X2 = new Adder();
  centroid_Y2 = new Adder();
  centroid_Z2 = new Adder();
  src_stream(object, centroid_centroidStream);
  var x = +centroid_X2,
      y = +centroid_Y2,
      z = +centroid_Z2,
      m = hypot(x, y, z); // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < math_epsilon2) {
    x = centroid_X1, y = centroid_Y1, z = centroid_Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < src_math_epsilon) x = centroid_X0, y = centroid_Y0, z = centroid_Z0;
    m = hypot(x, y, z); // If the feature still has an undefined ccentroid, then return.

    if (m < math_epsilon2) return [NaN, NaN];
  }

  return [math_atan2(y, x) * src_math_degrees, math_asin(z / m) * src_math_degrees];
}
;// CONCATENATED MODULE: ./node_modules/vega-selections/build/vega-selection.module.js





function vega_selection_module_ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function vega_selection_module_bisector(f) {
  var delta = f;
  var compare = f;

  if (f.length === 1) {
    delta = function delta(d, x) {
      return f(d) - x;
    };

    compare = vega_selection_module_ascendingComparator(f);
  }

  function left(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
    }

    return lo;
  }

  function right(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
    }

    return lo;
  }

  function center(a, x, lo, hi) {
    if (lo == null) lo = 0;
    if (hi == null) hi = a.length;
    var i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left: left,
    center: center,
    right: right
  };
}

function vega_selection_module_ascendingComparator(f) {
  return function (d, x) {
    return vega_selection_module_ascending(f(d), x);
  };
}

var Intersect = 'intersect';
var Union = 'union';
var VlMulti = 'vlMulti';
var VlPoint = 'vlPoint';
var Or = 'or';
var And = 'and';
var SELECTION_ID = '_vgsid_',
    TYPE_ENUM = 'E',
    TYPE_RANGE_INC = 'R',
    TYPE_RANGE_EXC = 'R-E',
    TYPE_RANGE_LE = 'R-LE',
    TYPE_RANGE_RE = 'R-RE',
    UNIT_INDEX = 'index:unit'; // TODO: revisit date coercion?

function testPoint(datum, entry) {
  var fields = entry.fields,
      values = entry.values,
      n = fields.length,
      i = 0,
      dval,
      f;

  for (; i < n; ++i) {
    f = fields[i];
    f.getter = field.getter || field(f.field);
    dval = f.getter(datum);
    if (isDate(dval)) dval = toNumber(dval);
    if (isDate(values[i])) values[i] = toNumber(values[i]);
    if (isDate(values[i][0])) values[i] = values[i].map(toNumber);

    if (f.type === TYPE_ENUM) {
      // Enumerated fields can either specify individual values (single/multi selections)
      // or an array of values (interval selections).
      if (isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {
        return false;
      }
    } else {
      if (f.type === TYPE_RANGE_INC) {
        if (!inrange(dval, values[i])) return false;
      } else if (f.type === TYPE_RANGE_RE) {
        // Discrete selection of bins test within the range [bin_start, bin_end).
        if (!inrange(dval, values[i], true, false)) return false;
      } else if (f.type === TYPE_RANGE_EXC) {
        // 'R-E'/'R-LE' included for completeness.
        if (!inrange(dval, values[i], false, false)) return false;
      } else if (f.type === TYPE_RANGE_LE) {
        if (!inrange(dval, values[i], false, true)) return false;
      }
    }
  }

  return true;
}
/**
 * Tests if a tuple is contained within an interactive selection.
 * @param {string} name - The name of the data set representing the selection.
 *  Tuples in the dataset are of the form
 *  {unit: string, fields: array<fielddef>, values: array<*>}.
 *  Fielddef is of the form
 *  {field: string, channel: string, type: 'E' | 'R'} where
 *  'type' identifies whether tuples in the dataset enumerate
 *  values for the field, or specify a continuous range.
 * @param {object} datum - The tuple to test for inclusion.
 * @param {string} op - The set operation for combining selections.
 *   One of 'intersect' or 'union' (default).
 * @return {boolean} - True if the datum is in the selection, false otherwise.
 */


function selectionTest(name, datum, op) {
  var data = this.context.data[name],
      entries = data ? data.values.value : [],
      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
      intersect = op === Intersect,
      n = entries.length,
      i = 0,
      entry,
      miss,
      count,
      unit,
      b;

  for (; i < n; ++i) {
    entry = entries[i];

    if (unitIdx && intersect) {
      // multi selections union within the same unit and intersect across units.
      miss = miss || {};
      count = miss[unit = entry.unit] || 0; // if we've already matched this unit, skip.

      if (count === -1) continue;
      b = testPoint(datum, entry);
      miss[unit] = b ? -1 : ++count; // if we match and there are no other units return true
      // if we've missed against all tuples in this unit return false

      if (b && unitIdx.size === 1) return true;
      if (!b && count === unitIdx.get(unit).count) return false;
    } else {
      b = testPoint(datum, entry); // if we find a miss and we do require intersection return false
      // if we find a match and we don't require intersection return true

      if (intersect ^ b) return b;
    }
  } // if intersecting and we made it here, then we saw no misses
  // if not intersecting, then we saw no matches
  // if no active selections, return false


  return n && intersect;
}

var selectionId = field(SELECTION_ID),
    vega_selection_module_bisect = vega_selection_module_bisector(selectionId),
    vega_selection_module_bisectLeft = vega_selection_module_bisect.left,
    vega_selection_module_bisectRight = vega_selection_module_bisect.right;

function selectionIdTest(name, datum, op) {
  var data = this.context.data[name],
      entries = data ? data.values.value : [],
      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
      intersect = op === Intersect,
      value = selectionId(datum),
      index = vega_selection_module_bisectLeft(entries, value);
  if (index === entries.length) return false;
  if (selectionId(entries[index]) !== value) return false;

  if (unitIdx && intersect) {
    if (unitIdx.size === 1) return true;
    if (vega_selection_module_bisectRight(entries, value) - index < unitIdx.size) return false;
  }

  return true;
}
/**
 * Maps an array of scene graph items to an array of selection tuples.
 * @param {string} name  - The name of the dataset representing the selection.
 * @param {string} unit  - The name of the unit view.
 *
 * @returns {array} An array of selection entries for the given unit.
 */


function selectionTuples(array, base) {
  return array.map(function (x) {
    return extend({
      values: base.fields.map(function (f) {
        return (f.getter || (f.getter = field(f.field)))(x.datum);
      })
    }, base);
  });
}
/**
 * Resolves selection for use as a scale domain or reads via the API.
 * @param {string} name - The name of the dataset representing the selection
 * @param {string} [op='union'] - The set operation for combining selections.
 *                 One of 'intersect' or 'union' (default).
 * @param {boolean} isMulti - Identifies a "multi" selection to perform more
 *                 expensive resolution computation.
 * @param {boolean} vl5 - With Vega-Lite v5, "multi" selections are now called "point"
 *                 selections, and thus the resolved tuple should reflect this name.
 *                 This parameter allows us to reflect this change without triggering
 *                 a major version bump for Vega.
 * @returns {object} An object of selected fields and values.
 */


function selectionResolve(name, op, isMulti, vl5) {
  var data = this.context.data[name],
      entries = data ? data.values.value : [],
      resolved = {},
      multiRes = {},
      types = {},
      entry,
      fields,
      values,
      unit,
      field,
      res,
      resUnit,
      type,
      union,
      n = entries.length,
      i = 0,
      j,
      m; // First union all entries within the same unit.

  for (; i < n; ++i) {
    entry = entries[i];
    unit = entry.unit;
    fields = entry.fields;
    values = entry.values;

    for (j = 0, m = fields.length; j < m; ++j) {
      field = fields[j];
      res = resolved[field.field] || (resolved[field.field] = {});
      resUnit = res[unit] || (res[unit] = []);
      types[field.field] = type = field.type.charAt(0);
      union = ops[type + '_union'];
      res[unit] = union(resUnit, array(values[j]));
    } // If the same multi-selection is repeated over views and projected over
    // an encoding, it may operate over different fields making it especially
    // tricky to reliably resolve it. At best, we can de-dupe identical entries
    // but doing so may be more computationally expensive than it is worth.
    // Instead, for now, we simply transform our store representation into
    // a more human-friendly one.


    if (isMulti) {
      resUnit = multiRes[unit] || (multiRes[unit] = []);
      resUnit.push(array(values).reduce(function (obj, curr, j) {
        return obj[fields[j].field] = curr, obj;
      }, {}));
    }
  } // Then resolve fields across units as per the op.


  op = op || Union;
  Object.keys(resolved).forEach(function (field) {
    resolved[field] = Object.keys(resolved[field]).map(function (unit) {
      return resolved[field][unit];
    }).reduce(function (acc, curr) {
      return acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr);
    });
  });
  entries = Object.keys(multiRes);

  if (isMulti && entries.length) {
    var key = vl5 ? VlPoint : VlMulti;
    resolved[key] = op === Union ? (0,defineProperty/* default */.Z)({}, Or, entries.reduce(function (acc, k) {
      return acc.push.apply(acc, (0,toConsumableArray/* default */.Z)(multiRes[k])), acc;
    }, [])) : (0,defineProperty/* default */.Z)({}, And, entries.map(function (k) {
      return (0,defineProperty/* default */.Z)({}, Or, multiRes[k]);
    }));
  }

  return resolved;
}

var ops = {
  E_union: function E_union(base, value) {
    if (!base.length) return value;
    var i = 0,
        n = value.length;

    for (; i < n; ++i) {
      if (base.indexOf(value[i]) < 0) base.push(value[i]);
    }

    return base;
  },
  E_intersect: function E_intersect(base, value) {
    return !base.length ? value : base.filter(function (v) {
      return value.indexOf(v) >= 0;
    });
  },
  R_union: function R_union(base, value) {
    var lo = toNumber(value[0]),
        hi = toNumber(value[1]);

    if (lo > hi) {
      lo = value[1];
      hi = value[0];
    }

    if (!base.length) return [lo, hi];
    if (base[0] > lo) base[0] = lo;
    if (base[1] < hi) base[1] = hi;
    return base;
  },
  R_intersect: function R_intersect(base, value) {
    var lo = toNumber(value[0]),
        hi = toNumber(value[1]);

    if (lo > hi) {
      lo = value[1];
      hi = value[0];
    }

    if (!base.length) return [lo, hi];

    if (hi < base[0] || base[1] < lo) {
      return [];
    } else {
      if (base[0] < lo) base[0] = lo;
      if (base[1] > hi) base[1] = hi;
    }

    return base;
  }
};
var DataPrefix = ':',
    IndexPrefix = '@';

function selectionVisitor(name, args, scope, params) {
  if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');
  var data = args[0].value,
      op = args.length >= 2 && peek(args).value,
      field = 'unit',
      indexName = IndexPrefix + field,
      dataName = DataPrefix + data; // eslint-disable-next-line no-prototype-builtins

  if (op === Intersect && !_has(params, indexName)) {
    params[indexName] = scope.getData(data).indataRef(scope, field);
  } // eslint-disable-next-line no-prototype-builtins


  if (!_has(params, dataName)) {
    params[dataName] = scope.getData(data).tuplesRef();
  }
}


;// CONCATENATED MODULE: ./node_modules/vega-functions/node_modules/d3-array/src/range.js
/* harmony default export */ function vega_functions_node_modules_d3_array_src_range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
;// CONCATENATED MODULE: ./node_modules/vega-functions/build/vega-functions.module.js














function vega_functions_module_data(name) {
  var data = this.context.data[name];
  return data ? data.values.value : [];
}

function indata(name, field, value) {
  var index = this.context.data[name]['index:' + field],
      entry = index ? index.value.get(value) : undefined;
  return entry ? entry.count : entry;
}

function setdata(name, tuples) {
  var df = this.context.dataflow,
      data = this.context.data[name],
      input = data.input;
  df.pulse(input, df.changeset().remove(truthy).insert(tuples));
  return 1;
}

function encode(item, name, retval) {
  if (item) {
    var df = this.context.dataflow,
        target = item.mark.source;
    df.pulse(target, df.changeset().encode(item, name));
  }

  return retval !== undefined ? retval : item;
}

var wrap = function wrap(method) {
  return function (value, spec) {
    var locale = this.context.dataflow.locale();
    return locale[method](spec)(value);
  };
};

var vega_functions_module_format = wrap('format');
var vega_functions_module_timeFormat = wrap('timeFormat');
var vega_functions_module_utcFormat = wrap('utcFormat');
var vega_functions_module_timeParse = wrap('timeParse');
var vega_functions_module_utcParse = wrap('utcParse');
var dateObj = new Date(2000, 0, 1);

function vega_functions_module_time(month, day, specifier) {
  if (!Number.isInteger(month) || !Number.isInteger(day)) return '';
  dateObj.setYear(2000);
  dateObj.setMonth(month);
  dateObj.setDate(day);
  return vega_functions_module_timeFormat.call(this, dateObj, specifier);
}

function monthFormat(month) {
  return vega_functions_module_time.call(this, month, 1, '%B');
}

function monthAbbrevFormat(month) {
  return vega_functions_module_time.call(this, month, 1, '%b');
}

function dayFormat(day) {
  return vega_functions_module_time.call(this, 0, 2 + day, '%A');
}

function dayAbbrevFormat(day) {
  return vega_functions_module_time.call(this, 0, 2 + day, '%a');
}

var vega_functions_module_DataPrefix = ':';
var vega_functions_module_IndexPrefix = '@';
var ScalePrefix = '%';
var SignalPrefix = '$';

function dataVisitor(name, args, scope, params) {
  if (args[0].type !== Literal) {
    error('First argument to data functions must be a string literal.');
  }

  var data = args[0].value,
      dataName = vega_functions_module_DataPrefix + data;

  if (!_has(dataName, params)) {
    try {
      params[dataName] = scope.getData(data).tuplesRef();
    } catch (err) {// if data set does not exist, there's nothing to track
    }
  }
}

function indataVisitor(name, args, scope, params) {
  if (args[0].type !== Literal) error('First argument to indata must be a string literal.');
  if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');
  var data = args[0].value,
      field = args[1].value,
      indexName = vega_functions_module_IndexPrefix + field;

  if (!_has(indexName, params)) {
    params[indexName] = scope.getData(data).indataRef(scope, field);
  }
}

function scaleVisitor(name, args, scope, params) {
  if (args[0].type === Literal) {
    // add scale dependency
    addScaleDependency(scope, params, args[0].value);
  } else {
    // indirect scale lookup; add all scales as parameters
    for (name in scope.scales) {
      addScaleDependency(scope, params, name);
    }
  }
}

function addScaleDependency(scope, params, name) {
  var scaleName = ScalePrefix + name;

  if (!_has(params, scaleName)) {
    try {
      params[scaleName] = scope.scaleRef(name);
    } catch (err) {// TODO: error handling? warning?
    }
  }
}

function getScale(name, ctx) {
  var s;
  return isFunction(name) ? name : isString(name) ? (s = ctx.scales[name]) && s.value : undefined;
}

function internalScaleFunctions(codegen, fnctx, visitors) {
  // add helper method to the 'this' expression function context
  fnctx.__bandwidth = function (s) {
    return s && s.bandwidth ? s.bandwidth() : 0;
  }; // register AST visitors for internal scale functions


  visitors._bandwidth = scaleVisitor;
  visitors._range = scaleVisitor;
  visitors._scale = scaleVisitor; // resolve scale reference directly to the signal hash argument

  var ref = function ref(arg) {
    return '_[' + (arg.type === Literal ? $(ScalePrefix + arg.value) : $(ScalePrefix) + '+' + codegen(arg)) + ']';
  }; // define and return internal scale function code generators
  // these internal functions are called by mark encoders


  return {
    _bandwidth: function _bandwidth(args) {
      return "this.__bandwidth(".concat(ref(args[0]), ")");
    },
    _range: function _range(args) {
      return "".concat(ref(args[0]), ".range()");
    },
    _scale: function _scale(args) {
      return "".concat(ref(args[0]), "(").concat(codegen(args[1]), ")");
    }
  };
}

function geoMethod(methodName, globalMethod) {
  return function (projection, geojson, group) {
    if (projection) {
      // projection defined, use it
      var p = getScale(projection, (group || this).context);
      return p && p.path[methodName](geojson);
    } else {
      // projection undefined, use global method
      return globalMethod(geojson);
    }
  };
}

var geoArea = geoMethod('area', d3_geo_src_area);
var geoBounds = geoMethod('bounds', src_bounds);
var geoCentroid = geoMethod('centroid', src_centroid);

function inScope(item) {
  var group = this.context.group;
  var value = false;
  if (group) while (item) {
    if (item === group) {
      value = true;
      break;
    }

    item = item.mark.group;
  }
  return value;
}

function vega_functions_module_log(df, method, args) {
  try {
    df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
  } catch (err) {
    df.warn(err);
  }

  return args[args.length - 1];
}

function warn() {
  return vega_functions_module_log(this.context.dataflow, 'warn', arguments);
}

function info() {
  return vega_functions_module_log(this.context.dataflow, 'info', arguments);
}

function debug() {
  return vega_functions_module_log(this.context.dataflow, 'debug', arguments);
}

function channel_luminance_value(channelValue) {
  var val = channelValue / 255;

  if (val <= 0.03928) {
    return val / 12.92;
  }

  return Math.pow((val + 0.055) / 1.055, 2.4);
}

function luminance(color) {
  var c = color_rgb(color),
      r = channel_luminance_value(c.r),
      g = channel_luminance_value(c.g),
      b = channel_luminance_value(c.b);
  return 0.2126 * r + 0.7152 * g + 0.0722 * b;
} // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef


function contrast(color1, color2) {
  var lum1 = luminance(color1),
      lum2 = luminance(color2),
      lumL = Math.max(lum1, lum2),
      lumD = Math.min(lum1, lum2);
  return (lumL + 0.05) / (lumD + 0.05);
}

function vega_functions_module_merge() {
  var args = [].slice.call(arguments);
  args.unshift({});
  return extend.apply(void 0, (0,toConsumableArray/* default */.Z)(args));
}

function equal(a, b) {
  return a === b || a !== a && b !== b ? true : isArray(a) ? isArray(b) && a.length === b.length ? equalArray(a, b) : false : isObject(a) && isObject(b) ? equalObject(a, b) : false;
}

function equalArray(a, b) {
  for (var i = 0, n = a.length; i < n; ++i) {
    if (!equal(a[i], b[i])) return false;
  }

  return true;
}

function equalObject(a, b) {
  for (var key in a) {
    if (!equal(a[key], b[key])) return false;
  }

  return true;
}

function removePredicate(props) {
  return function (_) {
    return equalObject(props, _);
  };
}

function modify(name, insert, remove, toggle, modify, values) {
  var df = this.context.dataflow,
      data = this.context.data[name],
      input = data.input,
      stamp = df.stamp();
  var changes = data.changes,
      predicate,
      key;

  if (df._trigger === false || !(input.value.length || insert || toggle)) {
    // nothing to do!
    return 0;
  }

  if (!changes || changes.stamp < stamp) {
    data.changes = changes = df.changeset();
    changes.stamp = stamp;
    df.runAfter(function () {
      data.modified = true;
      df.pulse(input, changes).run();
    }, true, 1);
  }

  if (remove) {
    predicate = remove === true ? truthy : isArray(remove) || isTuple(remove) ? remove : removePredicate(remove);
    changes.remove(predicate);
  }

  if (insert) {
    changes.insert(insert);
  }

  if (toggle) {
    predicate = removePredicate(toggle);

    if (input.value.some(predicate)) {
      changes.remove(predicate);
    } else {
      changes.insert(toggle);
    }
  }

  if (modify) {
    for (key in values) {
      changes.modify(modify, key, values[key]);
    }
  }

  return 1;
}

function pinchDistance(event) {
  var t = event.touches,
      dx = t[0].clientX - t[1].clientX,
      dy = t[0].clientY - t[1].clientY;
  return Math.sqrt(dx * dx + dy * dy);
}

function pinchAngle(event) {
  var t = event.touches;
  return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
}

var accessors = {};

function pluck(data, name) {
  var accessor = accessors[name] || (accessors[name] = field(name));
  return isArray(data) ? data.map(accessor) : accessor(data);
}

function vega_functions_module_array(seq) {
  return isArray(seq) || ArrayBuffer.isView(seq) ? seq : null;
}

function vega_functions_module_sequence(seq) {
  return vega_functions_module_array(seq) || (isString(seq) ? seq : null);
}

function vega_functions_module_join(seq) {
  var _array;

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return (_array = vega_functions_module_array(seq)).join.apply(_array, args);
}

function indexof(seq) {
  var _sequence;

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return (_sequence = vega_functions_module_sequence(seq)).indexOf.apply(_sequence, args);
}

function lastindexof(seq) {
  var _sequence2;

  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return (_sequence2 = vega_functions_module_sequence(seq)).lastIndexOf.apply(_sequence2, args);
}

function vega_functions_module_slice(seq) {
  var _sequence3;

  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  return (_sequence3 = vega_functions_module_sequence(seq)).slice.apply(_sequence3, args);
}

function vega_functions_module_replace(str, pattern, repl) {
  if (isFunction(repl)) error('Function argument passed to replace.');
  return String(str).replace(pattern, repl);
}

function vega_functions_module_reverse(seq) {
  return vega_functions_module_array(seq).slice().reverse();
}

function bandspace(count, paddingInner, paddingOuter) {
  return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);
}

function bandwidth(name, group) {
  var s = getScale(name, (group || this).context);
  return s && s.bandwidth ? s.bandwidth() : 0;
}

function vega_functions_module_copy(name, group) {
  var s = getScale(name, (group || this).context);
  return s ? s.copy() : undefined;
}

function domain(name, group) {
  var s = getScale(name, (group || this).context);
  return s ? s.domain() : [];
}

function invert(name, range, group) {
  var s = getScale(name, (group || this).context);
  return !s ? undefined : isArray(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
}

function vega_functions_module_range(name, group) {
  var s = getScale(name, (group || this).context);
  return s && s.range ? s.range() : [];
}

function vega_functions_module_scale(name, value, group) {
  var s = getScale(name, (group || this).context);
  return s ? s(value) : undefined;
}

function scaleGradient(scale, p0, p1, count, group) {
  scale = getScale(scale, (group || this).context);
  var gradient = Gradient(p0, p1);
  var stops = scale.domain(),
      min = stops[0],
      max = peek(stops),
      fraction = identity;

  if (!(max - min)) {
    // expand scale if domain has zero span, fix #1479
    scale = (scale.interpolator ? vega_scale_module_scale('sequential')().interpolator(scale.interpolator()) : vega_scale_module_scale('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);
  } else {
    fraction = scaleFraction(scale, min, max);
  }

  if (scale.ticks) {
    stops = scale.ticks(+count || 15);
    if (min !== stops[0]) stops.unshift(min);
    if (max !== peek(stops)) stops.push(max);
  }

  stops.forEach(function (_) {
    return gradient.stop(fraction(_), scale(_));
  });
  return gradient;
}

function geoShape(projection, geojson, group) {
  var p = getScale(projection, (group || this).context);
  return function (context) {
    return p ? p.path.context(context)(geojson) : '';
  };
}

function pathShape(path) {
  var p = null;
  return function (context) {
    return context ? pathRender(context, p = p || pathParse(path)) : path;
  };
}

var datum = function datum(d) {
  return d.data;
};

function treeNodes(name, context) {
  var tree = vega_functions_module_data.call(context, name);
  return tree.root && tree.root.lookup || {};
}

function treePath(name, source, target) {
  var nodes = treeNodes(name, this),
      s = nodes[source],
      t = nodes[target];
  return s && t ? s.path(t).map(datum) : undefined;
}

function treeAncestors(name, node) {
  var n = treeNodes(name, this)[node];
  return n ? n.ancestors().map(datum) : undefined;
}

var _window = function _window() {
  return typeof window !== 'undefined' && window || null;
};

function screen() {
  var w = _window();

  return w ? w.screen : {};
}

function windowSize() {
  var w = _window();

  return w ? [w.innerWidth, w.innerHeight] : [undefined, undefined];
}

function containerSize() {
  var view = this.context.dataflow,
      el = view.container && view.container();
  return el ? [el.clientWidth, el.clientHeight] : [undefined, undefined];
}

function vega_functions_module_intersect(b, opt, group) {
  if (!b) return [];

  var _b = (0,slicedToArray/* default */.Z)(b, 2),
      u = _b[0],
      v = _b[1],
      box = new Bounds().set(u[0], u[1], v[0], v[1]),
      scene = group || this.context.dataflow.scenegraph().root;

  return vega_scenegraph_module_intersect(scene, box, vega_functions_module_filter(opt));
}

function vega_functions_module_filter(opt) {
  var p = null;

  if (opt) {
    var types = array(opt.marktype),
        names = array(opt.markname);

    p = function p(_) {
      return (!types.length || types.some(function (t) {
        return _.marktype === t;
      })) && (!names.length || names.some(function (s) {
        return _.name === s;
      }));
    };
  }

  return p;
}

var functionContext = {
  random: function random() {
    return vega_statistics_module_random();
  },
  // override default
  cumulativeNormal: cumulativeNormal,
  cumulativeLogNormal: cumulativeLogNormal,
  cumulativeUniform: cumulativeUniform,
  densityNormal: densityNormal,
  densityLogNormal: densityLogNormal,
  densityUniform: densityUniform,
  quantileNormal: quantileNormal,
  quantileLogNormal: quantileLogNormal,
  quantileUniform: quantileUniform,
  sampleNormal: sampleNormal,
  sampleLogNormal: sampleLogNormal,
  sampleUniform: sampleUniform,
  isArray: isArray,
  isBoolean: isBoolean,
  isDate: isDate,
  isDefined: function isDefined(_) {
    return _ !== undefined;
  },
  isNumber: isNumber,
  isObject: isObject,
  isRegExp: isRegExp,
  isString: isString,
  isTuple: isTuple,
  isValid: function isValid(_) {
    return _ != null && _ === _;
  },
  toBoolean: toBoolean,
  toDate: toDate,
  toNumber: toNumber,
  toString: vega_util_module_toString,
  indexof: indexof,
  join: vega_functions_module_join,
  lastindexof: lastindexof,
  replace: vega_functions_module_replace,
  reverse: vega_functions_module_reverse,
  slice: vega_functions_module_slice,
  flush: flush,
  lerp: lerp,
  merge: vega_functions_module_merge,
  pad: pad,
  peek: peek,
  pluck: pluck,
  span: span,
  inrange: inrange,
  truncate: truncate,
  rgb: color_rgb,
  lab: lab,
  hcl: hcl,
  hsl: hsl,
  luminance: luminance,
  contrast: contrast,
  sequence: vega_functions_node_modules_d3_array_src_range,
  format: vega_functions_module_format,
  utcFormat: vega_functions_module_utcFormat,
  utcParse: vega_functions_module_utcParse,
  utcOffset: utcOffset,
  utcSequence: utcSequence,
  timeFormat: vega_functions_module_timeFormat,
  timeParse: vega_functions_module_timeParse,
  timeOffset: timeOffset,
  timeSequence: timeSequence,
  timeUnitSpecifier: timeUnitSpecifier,
  monthFormat: monthFormat,
  monthAbbrevFormat: monthAbbrevFormat,
  dayFormat: dayFormat,
  dayAbbrevFormat: dayAbbrevFormat,
  quarter: quarter,
  utcquarter: utcquarter,
  week: week,
  utcweek: utcweek,
  dayofyear: dayofyear,
  utcdayofyear: utcdayofyear,
  warn: warn,
  info: info,
  debug: debug,
  extent: extent,
  inScope: inScope,
  intersect: vega_functions_module_intersect,
  clampRange: clampRange,
  pinchDistance: pinchDistance,
  pinchAngle: pinchAngle,
  screen: screen,
  containerSize: containerSize,
  windowSize: windowSize,
  bandspace: bandspace,
  setdata: setdata,
  pathShape: pathShape,
  panLinear: panLinear,
  panLog: panLog,
  panPow: panPow,
  panSymlog: panSymlog,
  zoomLinear: zoomLinear,
  zoomLog: zoomLog,
  zoomPow: zoomPow,
  zoomSymlog: zoomSymlog,
  encode: encode,
  modify: modify
};
var eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],
    // event functions
eventPrefix = 'event.vega.',
    // event function prefix
thisPrefix = 'this.',
    // function context prefix
astVisitors = {}; // AST visitors for dependency analysis
// export code generator parameters

var codegenParams = {
  forbidden: ['_'],
  allowed: ['datum', 'event', 'item'],
  fieldvar: 'datum',
  globalvar: function globalvar(id) {
    return "_[".concat($(SignalPrefix + id), "]");
  },
  functions: buildFunctions,
  constants: Constants,
  visitors: astVisitors
}; // export code generator

var codeGenerator = codegen(codegenParams); // Build expression function registry

function buildFunctions(codegen) {
  var fn = Functions(codegen);
  eventFunctions.forEach(function (name) {
    return fn[name] = eventPrefix + name;
  });

  for (var name in functionContext) {
    fn[name] = thisPrefix + name;
  }

  extend(fn, internalScaleFunctions(codegen, functionContext, astVisitors));
  return fn;
} // Register an expression function


function expressionFunction(name, fn, visitor) {
  if (arguments.length === 1) {
    return functionContext[name];
  } // register with the functionContext


  functionContext[name] = fn; // if there is an astVisitor register that, too

  if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,
  // we need to also register the function with it

  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
  return this;
} // register expression functions with ast visitors


expressionFunction('bandwidth', bandwidth, scaleVisitor);
expressionFunction('copy', vega_functions_module_copy, scaleVisitor);
expressionFunction('domain', domain, scaleVisitor);
expressionFunction('range', vega_functions_module_range, scaleVisitor);
expressionFunction('invert', invert, scaleVisitor);
expressionFunction('scale', vega_functions_module_scale, scaleVisitor);
expressionFunction('gradient', scaleGradient, scaleVisitor);
expressionFunction('geoArea', geoArea, scaleVisitor);
expressionFunction('geoBounds', geoBounds, scaleVisitor);
expressionFunction('geoCentroid', geoCentroid, scaleVisitor);
expressionFunction('geoShape', geoShape, scaleVisitor);
expressionFunction('indata', indata, indataVisitor);
expressionFunction('data', vega_functions_module_data, dataVisitor);
expressionFunction('treePath', treePath, dataVisitor);
expressionFunction('treeAncestors', treeAncestors, dataVisitor); // register Vega-Lite selection functions

expressionFunction('vlSelectionTest', selectionTest, selectionVisitor);
expressionFunction('vlSelectionIdTest', selectionIdTest, selectionVisitor);
expressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor);
expressionFunction('vlSelectionTuples', selectionTuples);

function vega_functions_module_parser(expr, scope) {
  var params = {}; // parse the expression to an abstract syntax tree (ast)

  var ast;

  try {
    expr = isString(expr) ? expr : $(expr) + '';
    ast = parser(expr);
  } catch (err) {
    error('Expression parse error: ' + expr);
  } // analyze ast function calls for dependencies


  ast.visit(function (node) {
    if (node.type !== CallExpression) return;
    var name = node.callee.name,
        visit = codegenParams.visitors[name];
    if (visit) visit(name, node.arguments, scope, params);
  }); // perform code generation

  var gen = codeGenerator(ast); // collect signal dependencies

  gen.globals.forEach(function (name) {
    var signalName = SignalPrefix + name;

    if (!_has(params, signalName) && scope.getSignal(name)) {
      params[signalName] = scope.signalRef(name);
    }
  }); // return generated expression code and dependencies

  return {
    $expr: extend({
      code: gen.code
    }, scope.options.ast ? {
      ast: ast
    } : null),
    $fields: gen.fields,
    $params: params
  };
}


;// CONCATENATED MODULE: ./node_modules/vega-runtime/build/vega-runtime.module.js



/**
 * Parse a serialized dataflow specification.
 */

function vega_runtime_module_parse(spec) {
  var ctx = this,
      operators = spec.operators || []; // parse background

  if (spec.background) {
    ctx.background = spec.background;
  } // parse event configuration


  if (spec.eventConfig) {
    ctx.eventConfig = spec.eventConfig;
  } // parse locale configuration


  if (spec.locale) {
    ctx.locale = spec.locale;
  } // parse operators


  operators.forEach(function (entry) {
    return ctx.parseOperator(entry);
  }); // parse operator parameters

  operators.forEach(function (entry) {
    return ctx.parseOperatorParameters(entry);
  }); // parse streams

  (spec.streams || []).forEach(function (entry) {
    return ctx.parseStream(entry);
  }); // parse updates

  (spec.updates || []).forEach(function (entry) {
    return ctx.parseUpdate(entry);
  });
  return ctx.resolve();
}

var Skip = toSet(['rule']),
    Swap = toSet(['group', 'image', 'rect']);

function adjustSpatial(encode, marktype) {
  var code = '';
  if (Skip[marktype]) return code;

  if (encode.x2) {
    if (encode.x) {
      if (Swap[marktype]) {
        code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';
      }

      code += 'o.width=o.x2-o.x;';
    } else {
      code += 'o.x=o.x2-(o.width||0);';
    }
  }

  if (encode.xc) {
    code += 'o.x=o.xc-(o.width||0)/2;';
  }

  if (encode.y2) {
    if (encode.y) {
      if (Swap[marktype]) {
        code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';
      }

      code += 'o.height=o.y2-o.y;';
    } else {
      code += 'o.y=o.y2-(o.height||0);';
    }
  }

  if (encode.yc) {
    code += 'o.y=o.yc-(o.height||0)/2;';
  }

  return code;
}

function canonicalType(type) {
  return (type + '').toLowerCase();
}

function isOperator(type) {
  return canonicalType(type) === 'operator';
}

function isCollect(type) {
  return canonicalType(type) === 'collect';
}

function expression(ctx, args, code) {
  // wrap code in return statement if expression does not terminate
  if (code[code.length - 1] !== ';') {
    code = 'return(' + code + ');';
  }

  var fn = Function.apply(void 0, (0,toConsumableArray/* default */.Z)(args.concat(code)));
  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
} // generate code for comparing a single field


function _compare(u, v, lt, gt) {
  return "((u = ".concat(u, ") < (v = ").concat(v, ") || u == null) && v != null ? ").concat(lt, "\n  : (u > v || v == null) && u != null ? ").concat(gt, "\n  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ").concat(lt, "\n  : v !== v && u === u ? ").concat(gt, " : ");
}

var expressionCodegen = {
  /**
   * Parse an expression used to update an operator value.
   */
  operator: function operator(ctx, expr) {
    return expression(ctx, ['_'], expr.code);
  },

  /**
   * Parse an expression provided as an operator parameter value.
   */
  parameter: function parameter(ctx, expr) {
    return expression(ctx, ['datum', '_'], expr.code);
  },

  /**
   * Parse an expression applied to an event stream.
   */
  event: function event(ctx, expr) {
    return expression(ctx, ['event'], expr.code);
  },

  /**
   * Parse an expression used to handle an event-driven operator update.
   */
  handler: function handler(ctx, expr) {
    var code = "var datum=event.item&&event.item.datum;return ".concat(expr.code, ";");
    return expression(ctx, ['_', 'event'], code);
  },

  /**
   * Parse an expression that performs visual encoding.
   */
  encode: function encode(ctx, _encode) {
    var marktype = _encode.marktype,
        channels = _encode.channels;
    var code = 'var o=item,datum=o.datum,m=0,$;';

    for (var name in channels) {
      var o = 'o[' + $(name) + ']';
      code += "$=".concat(channels[name].code, ";if(").concat(o, "!==$)").concat(o, "=$,m=1;");
    }

    code += adjustSpatial(channels, marktype);
    code += 'return m;';
    return expression(ctx, ['item', '_'], code);
  },

  /**
   * Optimized code generators for access and comparison.
   */
  codegen: {
    get: function get(path) {
      var ref = "[".concat(path.map($).join(']['), "]");
      var get = Function('_', "return _".concat(ref, ";"));
      get.path = ref;
      return get;
    },
    comparator: function comparator(fields, orders) {
      var t;

      var map = function map(f, i) {
        var o = orders[i];
        var u, v;

        if (f.path) {
          u = "a".concat(f.path);
          v = "b".concat(f.path);
        } else {
          (t = t || {})['f' + i] = f;
          u = "this.f".concat(i, "(a)");
          v = "this.f".concat(i, "(b)");
        }

        return _compare(u, v, -o, o);
      };

      var fn = Function('a', 'b', 'var u, v; return ' + fields.map(map).join('') + '0;');
      return t ? fn.bind(t) : fn;
    }
  }
};
/**
 * Parse a dataflow operator.
 */

function parseOperator(spec) {
  var ctx = this;

  if (isOperator(spec.type) || !spec.type) {
    ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
  } else {
    ctx.transform(spec, spec.type);
  }
}
/**
 * Parse and assign operator parameters.
 */


function parseOperatorParameters(spec) {
  var ctx = this;

  if (spec.params) {
    var op = ctx.get(spec.id);
    if (!op) error('Invalid operator id: ' + spec.id);
    ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
  }
}
/**
 * Parse a set of operator parameters.
 */


function parseParameters(spec, params) {
  params = params || {};
  var ctx = this;

  for (var _key in spec) {
    var value = spec[_key];
    params[_key] = isArray(value) ? value.map(function (v) {
      return parseParameter(v, ctx, params);
    }) : parseParameter(value, ctx, params);
  }

  return params;
}
/**
 * Parse a single parameter.
 */


function parseParameter(spec, ctx, params) {
  if (!spec || !isObject(spec)) return spec;

  for (var i = 0, n = PARSERS.length, p; i < n; ++i) {
    p = PARSERS[i];

    if (_has(spec, p.key)) {
      return p.parse(spec, ctx, params);
    }
  }

  return spec;
}
/** Reference parsers. */


var PARSERS = [{
  key: '$ref',
  parse: getOperator
}, {
  key: '$key',
  parse: getKey
}, {
  key: '$expr',
  parse: getExpression
}, {
  key: '$field',
  parse: vega_runtime_module_getField
}, {
  key: '$encode',
  parse: getEncode
}, {
  key: '$compare',
  parse: getCompare
}, {
  key: '$context',
  parse: getContext
}, {
  key: '$subflow',
  parse: getSubflow
}, {
  key: '$tupleid',
  parse: getTupleId
}];
/**
 * Resolve an operator reference.
 */

function getOperator(_, ctx) {
  return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);
}
/**
 * Resolve an expression reference.
 */


function getExpression(_, ctx, params) {
  if (_.$params) {
    // parse expression parameters
    ctx.parseParameters(_.$params, params);
  }

  var k = 'e:' + _.$expr.code + '_' + _.$name;
  return ctx.fn[k] || (ctx.fn[k] = accessor(ctx.parameterExpression(_.$expr), _.$fields, _.$name));
}
/**
 * Resolve a key accessor reference.
 */


function getKey(_, ctx) {
  var k = 'k:' + _.$key + '_' + !!_.$flat;
  return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat, ctx.expr.codegen));
}
/**
 * Resolve a field accessor reference.
 */


function vega_runtime_module_getField(_, ctx) {
  if (!_.$field) return null;
  var k = 'f:' + _.$field + '_' + _.$name;
  return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name, ctx.expr.codegen));
}
/**
 * Resolve a comparator function reference.
 */


function getCompare(_, ctx) {
  // As of Vega 5.5.3, $tupleid sort is no longer used.
  // Keep here for now for backwards compatibility.
  var k = 'c:' + _.$compare + '_' + _.$order,
      c = array(_.$compare).map(function (_) {
    return _ && _.$tupleid ? tupleid : _;
  });
  return ctx.fn[k] || (ctx.fn[k] = vega_util_module_compare(c, _.$order, ctx.expr.codegen));
}
/**
 * Resolve an encode operator reference.
 */


function getEncode(_, ctx) {
  var spec = _.$encode,
      encode = {};

  for (var name in spec) {
    var enc = spec[name];
    encode[name] = accessor(ctx.encodeExpression(enc.$expr), enc.$fields);
    encode[name].output = enc.$output;
  }

  return encode;
}
/**
 * Resolve a context reference.
 */


function getContext(_, ctx) {
  return ctx;
}
/**
 * Resolve a recursive subflow specification.
 */


function getSubflow(_, ctx) {
  var spec = _.$subflow;
  return function (dataflow, key, parent) {
    var subctx = ctx.fork().parse(spec),
        op = subctx.get(spec.operators[0].id),
        p = subctx.signals.parent;
    if (p) p.set(parent);

    op.detachSubflow = function () {
      return ctx.detach(subctx);
    };

    return op;
  };
}
/**
 * Resolve a tuple id reference.
 */


function getTupleId() {
  return tupleid;
}
/**
 * Parse an event stream specification.
 */


function parseStream(spec) {
  var ctx = this,
      filter = spec.filter != null ? ctx.eventExpression(spec.filter) : undefined,
      stream = spec.stream != null ? ctx.get(spec.stream) : undefined,
      args;

  if (spec.source) {
    stream = ctx.events(spec.source, spec.type, filter);
  } else if (spec.merge) {
    args = spec.merge.map(function (_) {
      return ctx.get(_);
    });
    stream = args[0].merge.apply(args[0], args.slice(1));
  }

  if (spec.between) {
    args = spec.between.map(function (_) {
      return ctx.get(_);
    });
    stream = stream.between(args[0], args[1]);
  }

  if (spec.filter) {
    stream = stream.filter(filter);
  }

  if (spec.throttle != null) {
    stream = stream.throttle(+spec.throttle);
  }

  if (spec.debounce != null) {
    stream = stream.debounce(+spec.debounce);
  }

  if (stream == null) {
    error('Invalid stream definition: ' + JSON.stringify(spec));
  }

  if (spec.consume) stream.consume(true);
  ctx.stream(spec, stream);
}
/**
 * Parse an event-driven operator update.
 */


function parseUpdate(spec) {
  var ctx = this,
      srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid,
      source = ctx.get(srcid),
      target = null,
      update = spec.update,
      params = undefined;
  if (!source) error('Source not defined: ' + spec.source);
  target = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);

  if (update && update.$expr) {
    if (update.$params) {
      params = ctx.parseParameters(update.$params);
    }

    update = ctx.handlerExpression(update.$expr);
  }

  ctx.update(spec, source, target, update, params);
}

var vega_runtime_module_SKIP = {
  skip: true
};

function getState(options) {
  var ctx = this,
      state = {};

  if (options.signals) {
    var signals = state.signals = {};
    Object.keys(ctx.signals).forEach(function (key) {
      var op = ctx.signals[key];

      if (options.signals(key, op)) {
        signals[key] = op.value;
      }
    });
  }

  if (options.data) {
    var data = state.data = {};
    Object.keys(ctx.data).forEach(function (key) {
      var dataset = ctx.data[key];

      if (options.data(key, dataset)) {
        data[key] = dataset.input.value;
      }
    });
  }

  if (ctx.subcontext && options.recurse !== false) {
    state.subcontext = ctx.subcontext.map(function (ctx) {
      return ctx.getState(options);
    });
  }

  return state;
}

function setState(state) {
  var ctx = this,
      df = ctx.dataflow,
      data = state.data,
      signals = state.signals;
  Object.keys(signals || {}).forEach(function (key) {
    df.update(ctx.signals[key], signals[key], vega_runtime_module_SKIP);
  });
  Object.keys(data || {}).forEach(function (key) {
    df.pulse(ctx.data[key].input, df.changeset().remove(truthy).insert(data[key]));
  });
  (state.subcontext || []).forEach(function (substate, i) {
    var subctx = ctx.subcontext[i];
    if (subctx) subctx.setState(substate);
  });
}
/**
 * Context objects store the current parse state.
 * Enables lookup of parsed operators, event streams, accessors, etc.
 * Provides a 'fork' method for creating child contexts for subflows.
 */


function vega_runtime_module_context(df, transforms, functions, expr) {
  return new Context(df, transforms, functions, expr);
}

function Context(df, transforms, functions, expr) {
  this.dataflow = df;
  this.transforms = transforms;
  this.events = df.events.bind(df);
  this.expr = expr || expressionCodegen, this.signals = {};
  this.scales = {};
  this.nodes = {};
  this.data = {};
  this.fn = {};

  if (functions) {
    this.functions = Object.create(functions);
    this.functions.context = this;
  }
}

function Subcontext(ctx) {
  this.dataflow = ctx.dataflow;
  this.transforms = ctx.transforms;
  this.events = ctx.events;
  this.expr = ctx.expr;
  this.signals = Object.create(ctx.signals);
  this.scales = Object.create(ctx.scales);
  this.nodes = Object.create(ctx.nodes);
  this.data = Object.create(ctx.data);
  this.fn = Object.create(ctx.fn);

  if (ctx.functions) {
    this.functions = Object.create(ctx.functions);
    this.functions.context = this;
  }
}

Context.prototype = Subcontext.prototype = {
  fork: function fork() {
    var ctx = new Subcontext(this);
    (this.subcontext || (this.subcontext = [])).push(ctx);
    return ctx;
  },
  detach: function detach(ctx) {
    this.subcontext = this.subcontext.filter(function (c) {
      return c !== ctx;
    }); // disconnect all nodes in the subcontext
    // wipe out targets first for better efficiency

    var keys = Object.keys(ctx.nodes);

    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
      var _key2 = _keys[_i];
      ctx.nodes[_key2]._targets = null;
    }

    for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {
      var _key3 = _keys2[_i2];

      ctx.nodes[_key3].detach();
    }

    ctx.nodes = null;
  },
  get: function get(id) {
    return this.nodes[id];
  },
  set: function set(id, node) {
    return this.nodes[id] = node;
  },
  add: function add(spec, op) {
    var ctx = this,
        df = ctx.dataflow,
        data = spec.value;
    ctx.set(spec.id, op);

    if (isCollect(spec.type) && data) {
      if (data.$ingest) {
        df.ingest(op, data.$ingest, data.$format);
      } else if (data.$request) {
        df.preload(op, data.$request, data.$format);
      } else {
        df.pulse(op, df.changeset().insert(data));
      }
    }

    if (spec.root) {
      ctx.root = op;
    }

    if (spec.parent) {
      var p = ctx.get(spec.parent.$ref);

      if (p) {
        df.connect(p, [op]);
        op.targets().add(p);
      } else {
        (ctx.unresolved = ctx.unresolved || []).push(function () {
          p = ctx.get(spec.parent.$ref);
          df.connect(p, [op]);
          op.targets().add(p);
        });
      }
    }

    if (spec.signal) {
      ctx.signals[spec.signal] = op;
    }

    if (spec.scale) {
      ctx.scales[spec.scale] = op;
    }

    if (spec.data) {
      var _loop = function _loop(name) {
        var data = ctx.data[name] || (ctx.data[name] = {});
        spec.data[name].forEach(function (role) {
          return data[role] = op;
        });
      };

      for (var name in spec.data) {
        _loop(name);
      }
    }
  },
  resolve: function resolve() {
    (this.unresolved || []).forEach(function (fn) {
      return fn();
    });
    delete this.unresolved;
    return this;
  },
  operator: function operator(spec, update) {
    this.add(spec, this.dataflow.add(spec.value, update));
  },
  transform: function transform(spec, type) {
    this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));
  },
  stream: function stream(spec, _stream) {
    this.set(spec.id, _stream);
  },
  update: function update(spec, stream, target, _update, params) {
    this.dataflow.on(stream, target, _update, params, spec.options);
  },
  // expression parsing
  operatorExpression: function operatorExpression(expr) {
    return this.expr.operator(this, expr);
  },
  parameterExpression: function parameterExpression(expr) {
    return this.expr.parameter(this, expr);
  },
  eventExpression: function eventExpression(expr) {
    return this.expr.event(this, expr);
  },
  handlerExpression: function handlerExpression(expr) {
    return this.expr.handler(this, expr);
  },
  encodeExpression: function encodeExpression(encode) {
    return this.expr.encode(this, encode);
  },
  // parse methods
  parse: vega_runtime_module_parse,
  parseOperator: parseOperator,
  parseOperatorParameters: parseOperatorParameters,
  parseParameters: parseParameters,
  parseStream: parseStream,
  parseUpdate: parseUpdate,
  // state methods
  getState: getState,
  setState: setState
};

;// CONCATENATED MODULE: ./node_modules/d3-timer/src/interval.js

/* harmony default export */ function src_interval(callback, delay, time) {
  var t = new Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  t._restart = t.restart;

  t.restart = function (callback, delay, time) {
    delay = +delay, time = time == null ? now() : +time;

    t._restart(function tick(elapsed) {
      elapsed += total;

      t._restart(tick, total += delay, time);

      callback(elapsed);
    }, delay, time);
  };

  t.restart(callback, delay, time);
  return t;
}
;// CONCATENATED MODULE: ./node_modules/vega-view/build/vega-view.module.js









 // initialize aria role and label attributes

function initializeAria(view) {
  var el = view.container();

  if (el) {
    el.setAttribute('role', 'graphics-document');
    el.setAttribute('aria-roleDescription', 'visualization');
    ariaLabel(el, view.description());
  }
} // update aria-label if we have a DOM container element


function ariaLabel(el, desc) {
  if (el) desc == null ? el.removeAttribute('aria-label') : el.setAttribute('aria-label', desc);
}

function vega_view_module_background(view) {
  // respond to background signal
  view.add(null, function (_) {
    view._background = _.bg;
    view._resize = 1;
    return _.bg;
  }, {
    bg: view._signals.background
  });
}

var Default = 'default';

function cursor(view) {
  // get cursor signal, add to dataflow if needed
  var cursor = view._signals.cursor || (view._signals.cursor = view.add({
    user: Default,
    item: null
  })); // evaluate cursor on each mousemove event

  view.on(view.events('view', 'mousemove'), cursor, function (_, event) {
    var value = cursor.value,
        user = value ? isString(value) ? value : value.user : Default,
        item = event.item && event.item.cursor || null;
    return value && user === value.user && item == value.item ? value : {
      user: user,
      item: item
    };
  }); // when cursor signal updates, set visible cursor

  view.add(null, function (_) {
    var user = _.cursor,
        item = this.value;

    if (!isString(user)) {
      item = user.item;
      user = user.user;
    }

    setCursor(view, user && user !== Default ? user : item || user);
    return item;
  }, {
    cursor: cursor
  });
}

function setCursor(view, cursor) {
  var el = view.globalCursor() ? typeof document !== 'undefined' && document.body : view.container();

  if (el) {
    return cursor == null ? el.style.removeProperty('cursor') : el.style.cursor = cursor;
  }
}

function dataref(view, name) {
  var data = view._runtime.data;

  if (!_has(data, name)) {
    error('Unrecognized data set: ' + name);
  }

  return data[name];
}

function vega_view_module_data(name, values) {
  return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, changeset().remove(truthy).insert(values));
}

function change(name, changes) {
  if (!isChangeSet(changes)) {
    error('Second argument to changes must be a changeset.');
  }

  var dataset = dataref(this, name);
  dataset.modified = true;
  return this.pulse(dataset.input, changes);
}

function insert(name, _) {
  return change.call(this, name, changeset().insert(_));
}

function vega_view_module_remove(name, _) {
  return change.call(this, name, changeset().remove(_));
}

function width(view) {
  var padding = view.padding();
  return Math.max(0, view._viewWidth + padding.left + padding.right);
}

function height(view) {
  var padding = view.padding();
  return Math.max(0, view._viewHeight + padding.top + padding.bottom);
}

function vega_view_module_offset(view) {
  var padding = view.padding(),
      origin = view._origin;
  return [padding.left + origin[0], padding.top + origin[1]];
}

function resizeRenderer(view) {
  var origin = vega_view_module_offset(view),
      w = width(view),
      h = height(view);

  view._renderer.background(view.background());

  view._renderer.resize(w, h, origin);

  view._handler.origin(origin);

  view._resizeListeners.forEach(function (handler) {
    try {
      handler(w, h);
    } catch (error) {
      view.error(error);
    }
  });
}
/**
 * Extend an event with additional view-specific methods.
 * Adds a new property ('vega') to an event that provides a number
 * of methods for querying information about the current interaction.
 * The vega object provides the following methods:
 *   view - Returns the backing View instance.
 *   item - Returns the currently active scenegraph item (if any).
 *   group - Returns the currently active scenegraph group (if any).
 *     This method accepts a single string-typed argument indicating the name
 *     of the desired parent group. The scenegraph will be traversed from
 *     the item up towards the root to search for a matching group. If no
 *     argument is provided the enclosing group for the active item is
 *     returned, unless the item it itself a group, in which case it is
 *     returned directly.
 *   xy - Returns a two-element array containing the x and y coordinates for
 *     mouse or touch events. For touch events, this is based on the first
 *     elements in the changedTouches array. This method accepts a single
 *     argument: either an item instance or mark name that should serve as
 *     the reference coordinate system. If no argument is provided the
 *     top-level view coordinate system is assumed.
 *   x - Returns the current x-coordinate, accepts the same arguments as xy.
 *   y - Returns the current y-coordinate, accepts the same arguments as xy.
 * @param {Event} event - The input event to extend.
 * @param {Item} item - The currently active scenegraph item (if any).
 * @return {Event} - The extended input event.
 */


function eventExtend(view, event, item) {
  var r = view._renderer,
      el = r && r.canvas(),
      p,
      e,
      translate;

  if (el) {
    translate = vega_view_module_offset(view);
    e = event.changedTouches ? event.changedTouches[0] : event;
    p = vega_scenegraph_module_point(e, el);
    p[0] -= translate[0];
    p[1] -= translate[1];
  }

  event.dataflow = view;
  event.item = item;
  event.vega = extension(view, item, p);
  return event;
}

function extension(view, item, point) {
  var itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;

  function group(name) {
    var g = itemGroup,
        i;
    if (name) for (i = item; i; i = i.mark.group) {
      if (i.mark.name === name) {
        g = i;
        break;
      }
    }
    return g && g.mark && g.mark.interactive ? g : {};
  }

  function xy(item) {
    if (!item) return point;
    if (isString(item)) item = group(item);
    var p = point.slice();

    while (item) {
      p[0] -= item.x || 0;
      p[1] -= item.y || 0;
      item = item.mark && item.mark.group;
    }

    return p;
  }

  return {
    view: vega_util_module_constant(view),
    item: vega_util_module_constant(item || {}),
    group: group,
    xy: xy,
    x: function x(item) {
      return xy(item)[0];
    },
    y: function y(item) {
      return xy(item)[1];
    }
  };
}

var VIEW = 'view',
    TIMER = 'timer',
    WINDOW = 'window',
    NO_TRAP = {
  trap: false
};
/**
 * Initialize event handling configuration.
 * @param {object} config - The configuration settings.
 * @return {object}
 */

function initializeEventConfig(config) {
  var events = extend({
    defaults: {}
  }, config);

  var unpack = function unpack(obj, keys) {
    keys.forEach(function (k) {
      if (isArray(obj[k])) obj[k] = toSet(obj[k]);
    });
  };

  unpack(events.defaults, ['prevent', 'allow']);
  unpack(events, ['view', 'window', 'selector']);
  return events;
}

function trackEventListener(view, sources, type, handler) {
  view._eventListeners.push({
    type: type,
    sources: array(sources),
    handler: handler
  });
}

function prevent(view, type) {
  var def = view._eventConfig.defaults,
      prevent = def.prevent,
      allow = def.allow;
  return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
}

function permit(view, key, type) {
  var rule = view._eventConfig && view._eventConfig[key];

  if (rule === false || isObject(rule) && !rule[type]) {
    view.warn("Blocked ".concat(key, " ").concat(type, " event listener."));
    return false;
  }

  return true;
}
/**
 * Create a new event stream from an event source.
 * @param {object} source - The event source to monitor.
 * @param {string} type - The event type.
 * @param {function(object): boolean} [filter] - Event filter function.
 * @return {EventStream}
 */


function vega_view_module_events(source, type, filter) {
  var view = this,
      s = new EventStream(filter),
      send = function send(e, item) {
    view.runAsync(null, function () {
      if (source === VIEW && prevent(view, type)) {
        e.preventDefault();
      }

      s.receive(eventExtend(view, e, item));
    });
  },
      sources;

  if (source === TIMER) {
    if (permit(view, 'timer', type)) {
      view.timer(send, type);
    }
  } else if (source === VIEW) {
    if (permit(view, 'view', type)) {
      // send traps errors, so use {trap: false} option
      view.addEventListener(type, send, NO_TRAP);
    }
  } else {
    if (source === WINDOW) {
      if (permit(view, 'window', type) && typeof window !== 'undefined') {
        sources = [window];
      }
    } else if (typeof document !== 'undefined') {
      if (permit(view, 'selector', type)) {
        sources = document.querySelectorAll(source);
      }
    }

    if (!sources) {
      view.warn('Can not resolve event source: ' + source);
    } else {
      for (var i = 0, n = sources.length; i < n; ++i) {
        sources[i].addEventListener(type, send);
      }

      trackEventListener(view, sources, type, send);
    }
  }

  return s;
}

function itemFilter(event) {
  return event.item;
}

function markTarget(event) {
  // grab upstream collector feeding the mark operator
  return event.item.mark.source;
}

function invoke(name) {
  return function (_, event) {
    return event.vega.view().changeset().encode(event.item, name);
  };
}

function hover(hoverSet, leaveSet) {
  hoverSet = [hoverSet || 'hover'];
  leaveSet = [leaveSet || 'update', hoverSet[0]]; // invoke hover set upon mouseover

  this.on(this.events('view', 'mouseover', itemFilter), markTarget, invoke(hoverSet)); // invoke leave set upon mouseout

  this.on(this.events('view', 'mouseout', itemFilter), markTarget, invoke(leaveSet));
  return this;
}
/**
 * Finalize a View instance that is being removed.
 * Cancel any running timers.
 * Remove all external event listeners.
 * Remove any currently displayed tooltip.
 */


function finalize() {
  var tooltip = this._tooltip,
      timers = this._timers,
      listeners = this._eventListeners,
      n,
      m,
      e;
  n = timers.length;

  while (--n >= 0) {
    timers[n].stop();
  }

  n = listeners.length;

  while (--n >= 0) {
    e = listeners[n];
    m = e.sources.length;

    while (--m >= 0) {
      e.sources[m].removeEventListener(e.type, e.handler);
    }
  }

  if (tooltip) {
    tooltip.call(this, this._handler, null, null, null);
  }

  return this;
}

function vega_view_module_element(tag, attr, text) {
  var el = document.createElement(tag);

  for (var key in attr) {
    el.setAttribute(key, attr[key]);
  }

  if (text != null) el.textContent = text;
  return el;
}

var BindClass = 'vega-bind',
    NameClass = 'vega-bind-name',
    RadioClass = 'vega-bind-radio';
/**
 * Bind a signal to an external HTML input element. The resulting two-way
 * binding will propagate input changes to signals, and propagate signal
 * changes to the input element state. If this view instance has no parent
 * element, we assume the view is headless and no bindings are created.
 * @param {Element|string} el - The parent DOM element to which the input
 *   element should be appended as a child. If string-valued, this argument
 *   will be treated as a CSS selector. If null or undefined, the parent
 *   element of this view will be used as the element.
 * @param {object} param - The binding parameters which specify the signal
 *   to bind to, the input element type, and type-specific configuration.
 * @return {View} - This view instance.
 */

function vega_view_module_bind(view, el, binding) {
  if (!el) return;
  var param = binding.param;
  var bind = binding.state;

  if (!bind) {
    bind = binding.state = {
      elements: null,
      active: false,
      set: null,
      update: function update(value) {
        if (value != view.signal(param.signal)) {
          view.runAsync(null, function () {
            bind.source = true;
            view.signal(param.signal, value);
          });
        }
      }
    };

    if (param.debounce) {
      bind.update = vega_util_module_debounce(param.debounce, bind.update);
    }
  }

  var create = param.input == null && param.element ? target : vega_view_module_generate;
  create(bind, el, param, view);

  if (!bind.active) {
    view.on(view._signals[param.signal], null, function () {
      bind.source ? bind.source = false : bind.set(view.signal(param.signal));
    });
    bind.active = true;
  }

  return bind;
}
/**
 * Bind the signal to an external EventTarget.
 */


function target(bind, node, param, view) {
  var type = param.event || 'input';

  var handler = function handler() {
    return bind.update(node.value);
  }; // initialize signal value to external input value


  view.signal(param.signal, node.value); // listen for changes on the element

  node.addEventListener(type, handler); // register with view, so we can remove it upon finalization

  trackEventListener(view, node, type, handler); // propagate change to element

  bind.set = function (value) {
    node.value = value;
    node.dispatchEvent(vega_view_module_event(type));
  };
}

function vega_view_module_event(type) {
  return typeof Event !== 'undefined' ? new Event(type) : {
    type: type
  };
}
/**
 * Generate an HTML input form element and bind it to a signal.
 */


function vega_view_module_generate(bind, el, param, view) {
  var value = view.signal(param.signal);
  var div = vega_view_module_element('div', {
    'class': BindClass
  });
  var wrapper = param.input === 'radio' ? div : div.appendChild(vega_view_module_element('label'));
  wrapper.appendChild(vega_view_module_element('span', {
    'class': NameClass
  }, param.name || param.signal));
  el.appendChild(div);
  var input = vega_view_module_form;

  switch (param.input) {
    case 'checkbox':
      input = vega_view_module_checkbox;
      break;

    case 'select':
      input = vega_view_module_select;
      break;

    case 'radio':
      input = vega_view_module_radio;
      break;

    case 'range':
      input = vega_view_module_range;
      break;
  }

  input(bind, wrapper, param, value);
}
/**
 * Generates an arbitrary input form element.
 * The input type is controlled via user-provided parameters.
 */


function vega_view_module_form(bind, el, param, value) {
  var node = vega_view_module_element('input');

  for (var key in param) {
    if (key !== 'signal' && key !== 'element') {
      node.setAttribute(key === 'input' ? 'type' : key, param[key]);
    }
  }

  node.setAttribute('name', param.signal);
  node.value = value;
  el.appendChild(node);
  node.addEventListener('input', function () {
    return bind.update(node.value);
  });
  bind.elements = [node];

  bind.set = function (value) {
    return node.value = value;
  };
}
/**
 * Generates a checkbox input element.
 */


function vega_view_module_checkbox(bind, el, param, value) {
  var attr = {
    type: 'checkbox',
    name: param.signal
  };
  if (value) attr.checked = true;
  var node = vega_view_module_element('input', attr);
  el.appendChild(node);
  node.addEventListener('change', function () {
    return bind.update(node.checked);
  });
  bind.elements = [node];

  bind.set = function (value) {
    return node.checked = !!value || null;
  };
}
/**
 * Generates a selection list input element.
 */


function vega_view_module_select(bind, el, param, value) {
  var node = vega_view_module_element('select', {
    name: param.signal
  }),
      labels = param.labels || [];
  param.options.forEach(function (option, i) {
    var attr = {
      value: option
    };
    if (valuesEqual(option, value)) attr.selected = true;
    node.appendChild(vega_view_module_element('option', attr, (labels[i] || option) + ''));
  });
  el.appendChild(node);
  node.addEventListener('change', function () {
    bind.update(param.options[node.selectedIndex]);
  });
  bind.elements = [node];

  bind.set = function (value) {
    for (var i = 0, n = param.options.length; i < n; ++i) {
      if (valuesEqual(param.options[i], value)) {
        node.selectedIndex = i;
        return;
      }
    }
  };
}
/**
 * Generates a radio button group.
 */


function vega_view_module_radio(bind, el, param, value) {
  var group = vega_view_module_element('span', {
    'class': RadioClass
  }),
      labels = param.labels || [];
  el.appendChild(group);
  bind.elements = param.options.map(function (option, i) {
    var attr = {
      type: 'radio',
      name: param.signal,
      value: option
    };
    if (valuesEqual(option, value)) attr.checked = true;
    var input = vega_view_module_element('input', attr);
    input.addEventListener('change', function () {
      return bind.update(option);
    });
    var label = vega_view_module_element('label', {}, (labels[i] || option) + '');
    label.prepend(input);
    group.appendChild(label);
    return input;
  });

  bind.set = function (value) {
    var nodes = bind.elements,
        n = nodes.length;

    for (var i = 0; i < n; ++i) {
      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
    }
  };
}
/**
 * Generates a slider input element.
 */


function vega_view_module_range(bind, el, param, value) {
  value = value !== undefined ? value : (+param.max + +param.min) / 2;
  var max = param.max != null ? param.max : Math.max(100, +value) || 100,
      min = param.min || Math.min(0, max, +value) || 0,
      step = param.step || vega_view_node_modules_d3_array_src_ticks_tickStep(min, max, 100);
  var node = vega_view_module_element('input', {
    type: 'range',
    name: param.signal,
    min: min,
    max: max,
    step: step
  });
  node.value = value;
  var span = vega_view_module_element('span', {}, +value);
  el.appendChild(node);
  el.appendChild(span);

  var update = function update() {
    span.textContent = node.value;
    bind.update(+node.value);
  }; // subscribe to both input and change


  node.addEventListener('input', update);
  node.addEventListener('change', update);
  bind.elements = [node];

  bind.set = function (value) {
    node.value = value;
    span.textContent = value;
  };
}

function valuesEqual(a, b) {
  return a === b || a + '' === b + '';
}

function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
  r = r || new constructor(view.loader());
  return r.initialize(el, width(view), height(view), vega_view_module_offset(view), scaleFactor, opt).background(view.background());
}

function trap(view, fn) {
  return !fn ? null : function () {
    try {
      fn.apply(this, arguments);
    } catch (error) {
      view.error(error);
    }
  };
}

function initializeHandler(view, prevHandler, el, constructor) {
  // instantiate scenegraph handler
  var handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, vega_view_module_offset(view), view); // transfer event handlers

  if (prevHandler) {
    prevHandler.handlers().forEach(function (h) {
      handler.on(h.type, h.handler);
    });
  }

  return handler;
}

function vega_view_module_initialize(el, elBind) {
  var view = this,
      type = view._renderType,
      config = view._eventConfig.bind,
      module = renderModule(type); // containing dom element

  el = view._el = el ? vega_view_module_lookup(view, el, true) : null; // initialize aria attributes

  initializeAria(view); // select appropriate renderer & handler

  if (!module) view.error('Unrecognized renderer type: ' + type);
  var Handler = module.handler || CanvasHandler,
      Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler

  view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);
  view._handler = initializeHandler(view, view._handler, el, Handler);
  view._redraw = true; // initialize signal bindings

  if (el && config !== 'none') {
    elBind = elBind ? view._elBind = vega_view_module_lookup(view, elBind, true) : el.appendChild(vega_view_module_element('form', {
      'class': 'vega-bindings'
    }));

    view._bind.forEach(function (_) {
      if (_.param.element && config !== 'container') {
        _.element = vega_view_module_lookup(view, _.param.element, !!_.param.input);
      }
    });

    view._bind.forEach(function (_) {
      vega_view_module_bind(view, _.element || elBind, _);
    });
  }

  return view;
}

function vega_view_module_lookup(view, el, clear) {
  if (typeof el === 'string') {
    if (typeof document !== 'undefined') {
      el = document.querySelector(el);

      if (!el) {
        view.error('Signal bind element not found: ' + el);
        return null;
      }
    } else {
      view.error('DOM document instance not found.');
      return null;
    }
  }

  if (el && clear) {
    try {
      el.innerHTML = '';
    } catch (e) {
      el = null;
      view.error(e);
    }
  }

  return el;
}

var vega_view_module_number = function number(_) {
  return +_ || 0;
};

var paddingObject = function paddingObject(_) {
  return {
    top: _,
    bottom: _,
    left: _,
    right: _
  };
};

function _padding(_) {
  return isObject(_) ? {
    top: vega_view_module_number(_.top),
    bottom: vega_view_module_number(_.bottom),
    left: vega_view_module_number(_.left),
    right: vega_view_module_number(_.right)
  } : paddingObject(vega_view_module_number(_));
}
/**
 * Render the current scene in a headless fashion.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A Promise that resolves to a renderer.
 */


function renderHeadless(_x, _x2, _x3, _x4) {
  return _renderHeadless.apply(this, arguments);
}
/**
 * Produce an image URL for the visualization. Depending on the type
 * parameter, the generated URL contains data for either a PNG or SVG image.
 * The URL can be used (for example) to download images of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
 *   The 'canvas' and 'png' types are synonyms for a PNG image.
 * @return {Promise} - A promise that resolves to an image URL.
 */


function _renderHeadless() {
  _renderHeadless = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2(view, type, scaleFactor, opt) {
    var module, ctr;
    return regenerator_default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            module = renderModule(type), ctr = module && module.headless;
            if (!ctr) error('Unrecognized renderer type: ' + type);
            _context2.next = 4;
            return view.runAsync();

          case 4:
            return _context2.abrupt("return", initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _renderHeadless.apply(this, arguments);
}

function renderToImageURL(_x5, _x6) {
  return _renderToImageURL.apply(this, arguments);
}

function _renderToImageURL() {
  _renderToImageURL = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3(type, scaleFactor) {
    var r;
    return regenerator_default().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG) {
              error('Unrecognized image type: ' + type);
            }

            _context3.next = 3;
            return renderHeadless(this, type, scaleFactor);

          case 3:
            r = _context3.sent;
            return _context3.abrupt("return", type === RenderType.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png'));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _renderToImageURL.apply(this, arguments);
}

function toBlobURL(data, mime) {
  var blob = new Blob([data], {
    type: mime
  });
  return window.URL.createObjectURL(blob);
}
/**
 * Produce a Canvas instance containing a rendered visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to a Canvas instance.
 */


function renderToCanvas(_x7, _x8) {
  return _renderToCanvas.apply(this, arguments);
}
/**
 * Produce a rendered SVG string of the visualization.
 * This method is asynchronous, returning a Promise instance.
 * @return {Promise} - A promise that resolves to an SVG string.
 */


function _renderToCanvas() {
  _renderToCanvas = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee4(scaleFactor, opt) {
    var r;
    return regenerator_default().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return renderHeadless(this, RenderType.Canvas, scaleFactor, opt);

          case 2:
            r = _context4.sent;
            return _context4.abrupt("return", r.canvas());

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _renderToCanvas.apply(this, arguments);
}

function renderToSVG(_x9) {
  return _renderToSVG.apply(this, arguments);
}

function _renderToSVG() {
  _renderToSVG = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee5(scaleFactor) {
    var r;
    return regenerator_default().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return renderHeadless(this, RenderType.SVG, scaleFactor);

          case 2:
            r = _context5.sent;
            return _context5.abrupt("return", r.svg());

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _renderToSVG.apply(this, arguments);
}

function runtime(view, spec, expr) {
  return vega_runtime_module_context(view, transforms, functionContext, expr).parse(spec);
}

function vega_view_module_scale(name) {
  var scales = this._runtime.scales;

  if (!_has(scales, name)) {
    error('Unrecognized scale or projection: ' + name);
  }

  return scales[name].value;
}

var Width = 'width',
    Height = 'height',
    vega_view_module_Padding = 'padding',
    vega_view_module_Skip = {
  skip: true
};

function viewWidth(view, width) {
  var a = view.autosize(),
      p = view.padding();
  return width - (a && a.contains === vega_view_module_Padding ? p.left + p.right : 0);
}

function viewHeight(view, height) {
  var a = view.autosize(),
      p = view.padding();
  return height - (a && a.contains === vega_view_module_Padding ? p.top + p.bottom : 0);
}

function initializeResize(view) {
  var s = view._signals,
      w = s[Width],
      h = s[Height],
      p = s[vega_view_module_Padding];

  function resetSize() {
    view._autosize = view._resize = 1;
  } // respond to width signal


  view._resizeWidth = view.add(null, function (_) {
    view._width = _.size;
    view._viewWidth = viewWidth(view, _.size);
    resetSize();
  }, {
    size: w
  }); // respond to height signal

  view._resizeHeight = view.add(null, function (_) {
    view._height = _.size;
    view._viewHeight = viewHeight(view, _.size);
    resetSize();
  }, {
    size: h
  }); // respond to padding signal

  var resizePadding = view.add(null, resetSize, {
    pad: p
  }); // set rank to run immediately after source signal

  view._resizeWidth.rank = w.rank + 1;
  view._resizeHeight.rank = h.rank + 1;
  resizePadding.rank = p.rank + 1;
}

function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
  this.runAfter(function (view) {
    var rerun = 0; // reset autosize flag

    view._autosize = 0; // width value changed: update signal, skip resize op

    if (view.width() !== width) {
      rerun = 1;
      view.signal(Width, width, vega_view_module_Skip); // set width, skip update calc

      view._resizeWidth.skip(true); // skip width resize handler

    } // height value changed: update signal, skip resize op


    if (view.height() !== height) {
      rerun = 1;
      view.signal(Height, height, vega_view_module_Skip); // set height, skip update calc

      view._resizeHeight.skip(true); // skip height resize handler

    } // view width changed: update view property, set resize flag


    if (view._viewWidth !== viewWidth) {
      view._resize = 1;
      view._viewWidth = viewWidth;
    } // view height changed: update view property, set resize flag


    if (view._viewHeight !== viewHeight) {
      view._resize = 1;
      view._viewHeight = viewHeight;
    } // origin changed: update view property, set resize flag


    if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
      view._resize = 1;
      view._origin = origin;
    } // run dataflow on width/height signal change


    if (rerun) view.run('enter');
    if (auto) view.runAfter(function (v) {
      return v.resize();
    });
  }, false, 1);
}
/**
 * Get the current view state, consisting of signal values and/or data sets.
 * @param {object} [options] - Options flags indicating which state to export.
 *   If unspecified, all signals and data sets will be exported.
 * @param {function(string, Operator):boolean} [options.signals] - Optional
 *   predicate function for testing if a signal should be included in the
 *   exported state. If unspecified, all signals will be included, except for
 *   those named 'parent' or those which refer to a Transform value.
 * @param {function(string, object):boolean} [options.data] - Optional
 *   predicate function for testing if a data set's input should be included
 *   in the exported state. If unspecified, all data sets that have been
 *   explicitly modified will be included.
 * @param {boolean} [options.recurse=true] - Flag indicating if the exported
 *   state should recursively include state from group mark sub-contexts.
 * @return {object} - An object containing the exported state values.
 */


function vega_view_module_getState(options) {
  return this._runtime.getState(options || {
    data: dataTest,
    signals: signalTest,
    recurse: true
  });
}

function dataTest(name, data) {
  return data.modified && isArray(data.input.value) && name.indexOf('_:vega:_');
}

function signalTest(name, op) {
  return !(name === 'parent' || op instanceof transforms.proxy);
}
/**
 * Sets the current view state and updates the view by invoking run.
 * @param {object} state - A state object containing signal and/or
 *   data set values, following the format used by the getState method.
 * @return {View} - This view instance.
 */


function vega_view_module_setState(state) {
  this.runAsync(null, function (v) {
    v._trigger = false;

    v._runtime.setState(state);
  }, function (v) {
    v._trigger = true;
  });
  return this;
}

function vega_view_module_timer(callback, delay) {
  function tick(elapsed) {
    callback({
      timestamp: Date.now(),
      elapsed: elapsed
    });
  }

  this._timers.push(src_interval(tick, delay));
}

function vega_view_module_defaultTooltip(handler, event, item, value) {
  var el = handler.element();
  if (el) el.setAttribute('title', formatTooltip(value));
}

function formatTooltip(value) {
  return value == null ? '' : isArray(value) ? formatArray(value) : isObject(value) && !isDate(value) ? formatObject(value) : value + '';
}

function formatObject(obj) {
  return Object.keys(obj).map(function (key) {
    var v = obj[key];
    return key + ': ' + (isArray(v) ? formatArray(v) : vega_view_module_formatValue(v));
  }).join('\n');
}

function formatArray(value) {
  return '[' + value.map(vega_view_module_formatValue).join(', ') + ']';
}

function vega_view_module_formatValue(value) {
  return isArray(value) ? "[\u2026]" : isObject(value) && !isDate(value) ? "{\u2026}" : value;
}
/**
 * Create a new View instance from a Vega dataflow runtime specification.
 * The generated View will not immediately be ready for display. Callers
 * should also invoke the initialize method (e.g., to set the parent
 * DOM element in browser-based deployment) and then invoke the run
 * method to evaluate the dataflow graph. Rendering will automatically
 * be performed upon dataflow runs.
 * @constructor
 * @param {object} spec - The Vega dataflow runtime specification.
 */


function View(spec, options) {
  var view = this;
  options = options || {};
  Dataflow.call(view);
  if (options.loader) view.loader(options.loader);
  if (options.logger) view.logger(options.logger);
  if (options.logLevel != null) view.logLevel(options.logLevel);

  if (options.locale || spec.locale) {
    var loc = extend({}, spec.locale, options.locale);
    view.locale(vega_format_module_locale(loc.number, loc.time));
  }

  view._el = null;
  view._elBind = null;
  view._renderType = options.renderer || RenderType.Canvas;
  view._scenegraph = new Scenegraph();
  var root = view._scenegraph.root; // initialize renderer, handler and event management

  view._renderer = null;
  view._tooltip = options.tooltip || vega_view_module_defaultTooltip, view._redraw = true;
  view._handler = new CanvasHandler().scene(root);
  view._globalCursor = false;
  view._preventDefault = false;
  view._timers = [];
  view._eventListeners = [];
  view._resizeListeners = []; // initialize event configuration

  view._eventConfig = initializeEventConfig(spec.eventConfig);
  view.globalCursor(view._eventConfig.globalCursor); // initialize dataflow graph

  var ctx = runtime(view, spec, options.expr);
  view._runtime = ctx;
  view._signals = ctx.signals;
  view._bind = (spec.bindings || []).map(function (_) {
    return {
      state: null,
      param: extend({}, _)
    };
  }); // initialize scenegraph

  if (ctx.root) ctx.root.set(root);
  root.source = ctx.data.root.input;
  view.pulse(ctx.data.root.input, view.changeset().insert(root.items)); // initialize view size

  view._width = view.width();
  view._height = view.height();
  view._viewWidth = viewWidth(view, view._width);
  view._viewHeight = viewHeight(view, view._height);
  view._origin = [0, 0];
  view._resize = 0;
  view._autosize = 1;
  initializeResize(view); // initialize background color

  vega_view_module_background(view); // initialize cursor

  cursor(view); // initialize view description

  view.description(spec.description); // initialize hover proessing, if requested

  if (options.hover) view.hover(); // initialize DOM container(s) and renderer

  if (options.container) view.initialize(options.container, options.bind);
}

function lookupSignal(view, name) {
  return _has(view._signals, name) ? view._signals[name] : error('Unrecognized signal name: ' + $(name));
}

function findOperatorHandler(op, handler) {
  var h = (op._targets || []).filter(function (op) {
    return op._update && op._update.handler === handler;
  });
  return h.length ? h[0] : null;
}

function addOperatorListener(view, name, op, handler) {
  var h = findOperatorHandler(op, handler);

  if (!h) {
    h = trap(view, function () {
      return handler(name, op.value);
    });
    h.handler = handler;
    view.on(op, null, h);
  }

  return view;
}

function removeOperatorListener(view, op, handler) {
  var h = findOperatorHandler(op, handler);
  if (h) op._targets.remove(h);
  return view;
}

vega_util_module_inherits(View, Dataflow, {
  // -- DATAFLOW / RENDERING ----
  evaluate: function evaluate(encode, prerun, postrun) {
    var _this = this;

    return (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {
      return regenerator_default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Dataflow.prototype.evaluate.call(_this, encode, prerun);

            case 2:
              if (!(_this._redraw || _this._resize)) {
                _context.next = 14;
                break;
              }

              _context.prev = 3;

              if (!_this._renderer) {
                _context.next = 8;
                break;
              }

              if (_this._resize) {
                _this._resize = 0;
                resizeRenderer(_this);
              }

              _context.next = 8;
              return _this._renderer.renderAsync(_this._scenegraph.root);

            case 8:
              _this._redraw = false;
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](3);

              _this.error(_context.t0);

            case 14:
              // evaluate postrun
              if (postrun) asyncCallback(_this, postrun);
              return _context.abrupt("return", _this);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 11]]);
    }))();
  },
  dirty: function dirty(item) {
    this._redraw = true;
    this._renderer && this._renderer.dirty(item);
  },
  // -- GET / SET ----
  description: function description(text) {
    if (arguments.length) {
      var desc = text != null ? text + '' : null;
      if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);
      return this;
    }

    return this._desc;
  },
  container: function container() {
    return this._el;
  },
  scenegraph: function scenegraph() {
    return this._scenegraph;
  },
  origin: function origin() {
    return this._origin.slice();
  },
  signal: function signal(name, value, options) {
    var op = lookupSignal(this, name);
    return arguments.length === 1 ? op.value : this.update(op, value, options);
  },
  width: function width(_) {
    return arguments.length ? this.signal('width', _) : this.signal('width');
  },
  height: function height(_) {
    return arguments.length ? this.signal('height', _) : this.signal('height');
  },
  padding: function padding(_) {
    return arguments.length ? this.signal('padding', _padding(_)) : _padding(this.signal('padding'));
  },
  autosize: function autosize(_) {
    return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
  },
  background: function background(_) {
    return arguments.length ? this.signal('background', _) : this.signal('background');
  },
  renderer: function renderer(type) {
    if (!arguments.length) return this._renderType;
    if (!renderModule(type)) error('Unrecognized renderer type: ' + type);

    if (type !== this._renderType) {
      this._renderType = type;

      this._resetRenderer();
    }

    return this;
  },
  tooltip: function tooltip(handler) {
    if (!arguments.length) return this._tooltip;

    if (handler !== this._tooltip) {
      this._tooltip = handler;

      this._resetRenderer();
    }

    return this;
  },
  loader: function loader(_loader) {
    if (!arguments.length) return this._loader;

    if (_loader !== this._loader) {
      Dataflow.prototype.loader.call(this, _loader);

      this._resetRenderer();
    }

    return this;
  },
  resize: function resize() {
    // set flag to perform autosize
    this._autosize = 1; // touch autosize signal to ensure top-level ViewLayout runs

    return this.touch(lookupSignal(this, 'autosize'));
  },
  _resetRenderer: function _resetRenderer() {
    if (this._renderer) {
      this._renderer = null;
      this.initialize(this._el, this._elBind);
    }
  },
  // -- SIZING ----
  _resizeView: resizeView,
  // -- EVENT HANDLING ----
  addEventListener: function addEventListener(type, handler, options) {
    var callback = handler;

    if (!(options && options.trap === false)) {
      // wrap callback in error handler
      callback = trap(this, handler);
      callback.raw = handler;
    }

    this._handler.on(type, callback);

    return this;
  },
  removeEventListener: function removeEventListener(type, handler) {
    var handlers = this._handler.handlers(type),
        i = handlers.length,
        h,
        t; // search registered handlers, remove if match found


    while (--i >= 0) {
      t = handlers[i].type;
      h = handlers[i].handler;

      if (type === t && (handler === h || handler === h.raw)) {
        this._handler.off(t, h);

        break;
      }
    }

    return this;
  },
  addResizeListener: function addResizeListener(handler) {
    var l = this._resizeListeners;

    if (l.indexOf(handler) < 0) {
      // add handler if it isn't already registered
      // note: error trapping handled elsewhere, so
      // no need to wrap handlers here
      l.push(handler);
    }

    return this;
  },
  removeResizeListener: function removeResizeListener(handler) {
    var l = this._resizeListeners,
        i = l.indexOf(handler);

    if (i >= 0) {
      l.splice(i, 1);
    }

    return this;
  },
  addSignalListener: function addSignalListener(name, handler) {
    return addOperatorListener(this, name, lookupSignal(this, name), handler);
  },
  removeSignalListener: function removeSignalListener(name, handler) {
    return removeOperatorListener(this, lookupSignal(this, name), handler);
  },
  addDataListener: function addDataListener(name, handler) {
    return addOperatorListener(this, name, dataref(this, name).values, handler);
  },
  removeDataListener: function removeDataListener(name, handler) {
    return removeOperatorListener(this, dataref(this, name).values, handler);
  },
  globalCursor: function globalCursor(_) {
    if (arguments.length) {
      if (this._globalCursor !== !!_) {
        var prev = setCursor(this, null); // clear previous cursor

        this._globalCursor = !!_;
        if (prev) setCursor(this, prev); // swap cursor
      }

      return this;
    } else {
      return this._globalCursor;
    }
  },
  preventDefault: function preventDefault(_) {
    if (arguments.length) {
      this._preventDefault = _;
      return this;
    } else {
      return this._preventDefault;
    }
  },
  timer: vega_view_module_timer,
  events: vega_view_module_events,
  finalize: finalize,
  hover: hover,
  // -- DATA ----
  data: vega_view_module_data,
  change: change,
  insert: insert,
  remove: vega_view_module_remove,
  // -- SCALES --
  scale: vega_view_module_scale,
  // -- INITIALIZATION ----
  initialize: vega_view_module_initialize,
  // -- HEADLESS RENDERING ----
  toImageURL: renderToImageURL,
  toCanvas: renderToCanvas,
  toSVG: renderToSVG,
  // -- SAVE / RESTORE STATE ----
  getState: vega_view_module_getState,
  setState: vega_view_module_setState
});

;// CONCATENATED MODULE: ./node_modules/vega-event-selector/build/vega-event-selector.module.js
var vega_event_selector_module_VIEW = 'view',
    LBRACK = '[',
    RBRACK = ']',
    LBRACE = '{',
    RBRACE = '}',
    COLON = ':',
    COMMA = ',',
    NAME = '@',
    GT = '>',
    vega_event_selector_module_ILLEGAL = /[[\]{}]/,
    DEFAULT_MARKS = {
  '*': 1,
  arc: 1,
  area: 1,
  group: 1,
  image: 1,
  line: 1,
  path: 1,
  rect: 1,
  rule: 1,
  shape: 1,
  symbol: 1,
  text: 1,
  trail: 1
};
var DEFAULT_SOURCE, MARKS;
/**
 * Parse an event selector string.
 * Returns an array of event stream definitions.
 */

function eventSelector(selector, source, marks) {
  DEFAULT_SOURCE = source || vega_event_selector_module_VIEW;
  MARKS = marks || DEFAULT_MARKS;
  return parseMerge(selector.trim()).map(parseSelector);
}

function isMarkType(type) {
  return MARKS[type];
}

function vega_event_selector_module_find(s, i, endChar, pushChar, popChar) {
  var n = s.length;
  var count = 0,
      c;

  for (; i < n; ++i) {
    c = s[i];
    if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
  }

  return i;
}

function parseMerge(s) {
  var output = [],
      n = s.length;
  var start = 0,
      i = 0;

  while (i < n) {
    i = vega_event_selector_module_find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
    output.push(s.substring(start, i).trim());
    start = ++i;
  }

  if (output.length === 0) {
    throw 'Empty event selector: ' + s;
  }

  return output;
}

function parseSelector(s) {
  return s[0] === '[' ? parseBetween(s) : vega_event_selector_module_parseStream(s);
}

function parseBetween(s) {
  var n = s.length;
  var i = 1,
      b;
  i = vega_event_selector_module_find(s, i, RBRACK, LBRACK, RBRACK);

  if (i === n) {
    throw 'Empty between selector: ' + s;
  }

  b = parseMerge(s.substring(1, i));

  if (b.length !== 2) {
    throw 'Between selector must have two elements: ' + s;
  }

  s = s.slice(i + 1).trim();

  if (s[0] !== GT) {
    throw 'Expected \'>\' after between selector: ' + s;
  }

  b = b.map(parseSelector);
  var stream = parseSelector(s.slice(1).trim());

  if (stream.between) {
    return {
      between: b,
      stream: stream
    };
  } else {
    stream.between = b;
  }

  return stream;
}

function vega_event_selector_module_parseStream(s) {
  var stream = {
    source: DEFAULT_SOURCE
  },
      source = [];
  var throttle = [0, 0],
      markname = 0,
      start = 0,
      n = s.length,
      i = 0,
      j,
      filter; // extract throttle from end

  if (s[n - 1] === RBRACE) {
    i = s.lastIndexOf(LBRACE);

    if (i >= 0) {
      try {
        throttle = parseThrottle(s.substring(i + 1, n - 1));
      } catch (e) {
        throw 'Invalid throttle specification: ' + s;
      }

      s = s.slice(0, i).trim();
      n = s.length;
    } else throw 'Unmatched right brace: ' + s;

    i = 0;
  }

  if (!n) throw s; // set name flag based on first char

  if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector

  j = vega_event_selector_module_find(s, i, COLON);

  if (j < n) {
    source.push(s.substring(start, j).trim());
    start = i = ++j;
  } // extract remaining part of stream selector


  i = vega_event_selector_module_find(s, i, LBRACK);

  if (i === n) {
    source.push(s.substring(start, n).trim());
  } else {
    source.push(s.substring(start, i).trim());
    filter = [];
    start = ++i;
    if (start === n) throw 'Unmatched left bracket: ' + s;
  } // extract filters


  while (i < n) {
    i = vega_event_selector_module_find(s, i, RBRACK);
    if (i === n) throw 'Unmatched left bracket: ' + s;
    filter.push(s.substring(start, i).trim());
    if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
    start = ++i;
  } // marshall event stream specification


  if (!(n = source.length) || vega_event_selector_module_ILLEGAL.test(source[n - 1])) {
    throw 'Invalid event selector: ' + s;
  }

  if (n > 1) {
    stream.type = source[1];

    if (markname) {
      stream.markname = source[0].slice(1);
    } else if (isMarkType(source[0])) {
      stream.marktype = source[0];
    } else {
      stream.source = source[0];
    }
  } else {
    stream.type = source[0];
  }

  if (stream.type.slice(-1) === '!') {
    stream.consume = true;
    stream.type = stream.type.slice(0, -1);
  }

  if (filter != null) stream.filter = filter;
  if (throttle[0]) stream.throttle = throttle[0];
  if (throttle[1]) stream.debounce = throttle[1];
  return stream;
}

function parseThrottle(s) {
  var a = s.split(COMMA);
  if (!s.length || a.length > 2) throw s;
  return a.map(function (_) {
    var x = +_;
    if (x !== x) throw s;
    return x;
  });
}


;// CONCATENATED MODULE: ./node_modules/vega-parser/build/vega-parser.module.js
function vega_parser_module_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = vega_parser_module_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function vega_parser_module_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return vega_parser_module_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vega_parser_module_arrayLikeToArray(o, minLen); }

function vega_parser_module_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







function parseAutosize(spec) {
  return isObject(spec) ? spec : {
    type: spec || 'pad'
  };
}

var vega_parser_module_number = function number(_) {
  return +_ || 0;
};

var vega_parser_module_paddingObject = function paddingObject(_) {
  return {
    top: _,
    bottom: _,
    left: _,
    right: _
  };
};

function parsePadding(spec) {
  return !isObject(spec) ? vega_parser_module_paddingObject(vega_parser_module_number(spec)) : spec.signal ? spec : {
    top: vega_parser_module_number(spec.top),
    bottom: vega_parser_module_number(spec.bottom),
    left: vega_parser_module_number(spec.left),
    right: vega_parser_module_number(spec.right)
  };
}

var encoder = function encoder(_) {
  return isObject(_) && !isArray(_) ? extend({}, _) : {
    value: _
  };
};

function addEncode(object, name, value, set) {
  if (value != null) {
    var isEncoder = isObject(value) && !isArray(value) || isArray(value) && value.length && isObject(value[0]); // Always assign signal to update, even if the signal is from the enter block

    if (isEncoder) {
      object.update[name] = value;
    } else {
      object[set || 'enter'][name] = {
        value: value
      };
    }

    return 1;
  } else {
    return 0;
  }
}

function addEncoders(object, enter, update) {
  for (var name in enter) {
    addEncode(object, name, enter[name]);
  }

  for (var _name in update) {
    addEncode(object, _name, update[_name], 'update');
  }
}

function extendEncode(encode, extra, skip) {
  for (var name in extra) {
    if (skip && _has(skip, name)) continue;
    encode[name] = extend(encode[name] || {}, extra[name]);
  }

  return encode;
}

function has(key, encode) {
  return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
}

var MarkRole = 'mark';
var vega_parser_module_FrameRole = 'frame';
var vega_parser_module_ScopeRole = 'scope';
var vega_parser_module_AxisRole = 'axis';
var AxisDomainRole = 'axis-domain';
var AxisGridRole = 'axis-grid';
var AxisLabelRole = 'axis-label';
var AxisTickRole = 'axis-tick';
var AxisTitleRole = 'axis-title';
var vega_parser_module_LegendRole = 'legend';
var LegendBandRole = 'legend-band';
var LegendEntryRole = 'legend-entry';
var LegendGradientRole = 'legend-gradient';
var LegendLabelRole = 'legend-label';
var LegendSymbolRole = 'legend-symbol';
var LegendTitleRole = 'legend-title';
var vega_parser_module_TitleRole = 'title';
var TitleTextRole = 'title-text';
var TitleSubtitleRole = 'title-subtitle';

function applyDefaults(encode, type, role, style, config) {
  var defaults = {},
      enter = {};
  var update, key, skip, props; // if text mark, apply global lineBreak settings (#2370)

  key = 'lineBreak';

  if (type === 'text' && config[key] != null && !has(key, encode)) {
    applyDefault(defaults, key, config[key]);
  } // ignore legend and axis roles


  if (role == 'legend' || String(role).startsWith('axis')) {
    role = null;
  } // resolve mark config


  props = role === vega_parser_module_FrameRole ? config.group : role === MarkRole ? extend({}, config.mark, config[type]) : null;

  for (key in props) {
    // do not apply defaults if relevant fields are defined
    skip = has(key, encode) || (key === 'fill' || key === 'stroke') && (has('fill', encode) || has('stroke', encode));
    if (!skip) applyDefault(defaults, key, props[key]);
  } // resolve styles, apply with increasing precedence


  array(style).forEach(function (name) {
    var props = config.style && config.style[name];

    for (var _key in props) {
      if (!has(_key, encode)) {
        applyDefault(defaults, _key, props[_key]);
      }
    }
  });
  encode = extend({}, encode); // defensive copy

  for (key in defaults) {
    props = defaults[key];

    if (props.signal) {
      (update = update || {})[key] = props;
    } else {
      enter[key] = props;
    }
  }

  encode.enter = extend(enter, encode.enter);
  if (update) encode.update = extend(update, encode.update);
  return encode;
}

function applyDefault(defaults, key, value) {
  defaults[key] = value && value.signal ? {
    signal: value.signal
  } : {
    value: value
  };
}

var scaleRef = function scaleRef(scale) {
  return isString(scale) ? $(scale) : scale.signal ? "(".concat(scale.signal, ")") : vega_parser_module_field(scale);
};

function entry(enc) {
  if (enc.gradient != null) {
    return vega_parser_module_gradient(enc);
  }

  var value = enc.signal ? "(".concat(enc.signal, ")") : enc.color ? vega_parser_module_color(enc.color) : enc.field != null ? vega_parser_module_field(enc.field) : enc.value !== undefined ? $(enc.value) : undefined;

  if (enc.scale != null) {
    value = vega_parser_module_scale(enc, value);
  }

  if (value === undefined) {
    value = null;
  }

  if (enc.exponent != null) {
    value = "pow(".concat(value, ",").concat(property(enc.exponent), ")");
  }

  if (enc.mult != null) {
    value += "*".concat(property(enc.mult));
  }

  if (enc.offset != null) {
    value += "+".concat(property(enc.offset));
  }

  if (enc.round) {
    value = "round(".concat(value, ")");
  }

  return value;
}

var _color = function _color(type, x, y, z) {
  return "(".concat(type, "(").concat([x, y, z].map(entry).join(','), ")+'')");
};

function vega_parser_module_color(enc) {
  return enc.c ? _color('hcl', enc.h, enc.c, enc.l) : enc.h || enc.s ? _color('hsl', enc.h, enc.s, enc.l) : enc.l || enc.a ? _color('lab', enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color('rgb', enc.r, enc.g, enc.b) : null;
}

function vega_parser_module_gradient(enc) {
  // map undefined to null; expression lang does not allow undefined
  var args = [enc.start, enc.stop, enc.count].map(function (_) {
    return _ == null ? null : $(_);
  }); // trim null inputs from the end

  while (args.length && peek(args) == null) {
    args.pop();
  }

  args.unshift(scaleRef(enc.gradient));
  return "gradient(".concat(args.join(','), ")");
}

function property(property) {
  return isObject(property) ? '(' + entry(property) + ')' : property;
}

function vega_parser_module_field(ref) {
  return resolveField(isObject(ref) ? ref : {
    datum: ref
  });
}

function resolveField(ref) {
  var object, level, field;

  if (ref.signal) {
    object = 'datum';
    field = ref.signal;
  } else if (ref.group || ref.parent) {
    level = Math.max(1, ref.level || 1);
    object = 'item';

    while (level-- > 0) {
      object += '.mark.group';
    }

    if (ref.parent) {
      field = ref.parent;
      object += '.datum';
    } else {
      field = ref.group;
    }
  } else if (ref.datum) {
    object = 'datum';
    field = ref.datum;
  } else {
    error('Invalid field reference: ' + $(ref));
  }

  if (!ref.signal) {
    field = isString(field) ? splitAccessPath(field).map($).join('][') : resolveField(field);
  }

  return object + '[' + field + ']';
}

function vega_parser_module_scale(enc, value) {
  var scale = scaleRef(enc.scale);

  if (enc.range != null) {
    // pull value from scale range
    value = "lerp(_range(".concat(scale, "), ").concat(+enc.range, ")");
  } else {
    // run value through scale and/or pull scale bandwidth
    if (value !== undefined) value = "_scale(".concat(scale, ", ").concat(value, ")");

    if (enc.band) {
      value = (value ? value + '+' : '') + "_bandwidth(".concat(scale, ")") + (+enc.band === 1 ? '' : '*' + property(enc.band));

      if (enc.extra) {
        // include logic to handle extraneous elements
        value = "(datum.extra ? _scale(".concat(scale, ", datum.extra.value) : ").concat(value, ")");
      }
    }

    if (value == null) value = '0';
  }

  return value;
}

function vega_parser_module_rule(enc) {
  var code = '';
  enc.forEach(function (rule) {
    var value = entry(rule);
    code += rule.test ? "(".concat(rule.test, ")?").concat(value, ":") : value;
  }); // if no else clause, terminate with null (#1366)

  if (peek(code) === ':') {
    code += 'null';
  }

  return code;
}

function parseEncode(encode, type, role, style, scope, params) {
  var enc = {};
  params = params || {};
  params.encoders = {
    $encode: enc
  };
  encode = applyDefaults(encode, type, role, style, scope.config);

  for (var key in encode) {
    enc[key] = parseBlock(encode[key], type, params, scope);
  }

  return params;
}

function parseBlock(block, marktype, params, scope) {
  var channels = {},
      fields = {};

  for (var name in block) {
    if (block[name] != null) {
      // skip any null entries
      channels[name] = vega_parser_module_parse(expr(block[name]), scope, params, fields);
    }
  }

  return {
    $expr: {
      marktype: marktype,
      channels: channels
    },
    $fields: Object.keys(fields),
    $output: Object.keys(block)
  };
}

function expr(enc) {
  return isArray(enc) ? vega_parser_module_rule(enc) : entry(enc);
}

function vega_parser_module_parse(code, scope, params, fields) {
  var expr = vega_functions_module_parser(code, scope);
  expr.$fields.forEach(function (name) {
    return fields[name] = 1;
  });
  extend(params, expr.$params);
  return expr.$expr;
}

var OUTER = 'outer',
    OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];

function outerError(prefix, name) {
  error(prefix + ' for "outer" push: ' + $(name));
}

function parseSignal(signal, scope) {
  var name = signal.name;

  if (signal.push === OUTER) {
    // signal must already be defined, raise error if not
    if (!scope.signals[name]) outerError('No prior signal definition', name); // signal push must not use properties reserved for standard definition

    OUTER_INVALID.forEach(function (prop) {
      if (signal[prop] !== undefined) outerError('Invalid property ', prop);
    });
  } else {
    // define a new signal in the current scope
    var op = scope.addSignal(name, signal.value);
    if (signal.react === false) op.react = false;
    if (signal.bind) scope.addBinding(name, signal.bind);
  }
}

function Entry(type, value, params, parent) {
  this.id = -1;
  this.type = type;
  this.value = value;
  this.params = params;
  if (parent) this.parent = parent;
}

function entry$1(type, value, params, parent) {
  return new Entry(type, value, params, parent);
}

function operator(value, params) {
  return entry$1('operator', value, params);
} // -----


function ref(op) {
  var ref = {
    $ref: op.id
  }; // if operator not yet registered, cache ref to resolve later

  if (op.id < 0) (op.refs = op.refs || []).push(ref);
  return ref;
}

function _fieldRef(field, name) {
  return name ? {
    $field: field,
    $name: name
  } : {
    $field: field
  };
}

var keyFieldRef = _fieldRef('key');

function _compareRef(fields, orders) {
  return {
    $compare: fields,
    $order: orders
  };
}

function _keyRef(fields, flat) {
  var ref = {
    $key: fields
  };
  if (flat) ref.$flat = true;
  return ref;
} // -----


var Ascending = 'ascending';
var Descending = 'descending';

function sortKey(sort) {
  return !isObject(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);
}

function aggrField(op, field) {
  return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');
} // -----


var Scope = 'scope';
var vega_parser_module_View = 'view';

function isSignal(_) {
  return _ && _.signal;
}

function isExpr(_) {
  return _ && _.expr;
}

function hasSignal(_) {
  if (isSignal(_)) return true;
  if (isObject(_)) for (var key in _) {
    if (hasSignal(_[key])) return true;
  }
  return false;
}

function vega_parser_module_value(specValue, defaultValue) {
  return specValue != null ? specValue : defaultValue;
}

function deref(v) {
  return v && v.signal || v;
}

var vega_parser_module_Timer = 'timer';

function vega_parser_module_parseStream(stream, scope) {
  var method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : error('Invalid stream specification: ' + $(stream));
  return method(stream, scope);
}

function eventSource(source) {
  return source === Scope ? vega_parser_module_View : source || vega_parser_module_View;
}

function mergeStream(stream, scope) {
  var list = stream.merge.map(function (s) {
    return vega_parser_module_parseStream(s, scope);
  }),
      entry = streamParameters({
    merge: list
  }, stream, scope);
  return scope.addStream(entry).id;
}

function nestedStream(stream, scope) {
  var id = vega_parser_module_parseStream(stream.stream, scope),
      entry = streamParameters({
    stream: id
  }, stream, scope);
  return scope.addStream(entry).id;
}

function eventStream(stream, scope) {
  var id;

  if (stream.type === vega_parser_module_Timer) {
    id = scope.event(vega_parser_module_Timer, stream.throttle);
    stream = {
      between: stream.between,
      filter: stream.filter
    };
  } else {
    id = scope.event(eventSource(stream.source), stream.type);
  }

  var entry = streamParameters({
    stream: id
  }, stream, scope);
  return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
}

function streamParameters(entry, stream, scope) {
  var param = stream.between;

  if (param) {
    if (param.length !== 2) {
      error('Stream "between" parameter must have 2 entries: ' + $(stream));
    }

    entry.between = [vega_parser_module_parseStream(param[0], scope), vega_parser_module_parseStream(param[1], scope)];
  }

  param = stream.filter ? [].concat(stream.filter) : [];

  if (stream.marktype || stream.markname || stream.markrole) {
    // add filter for mark type, name and/or role
    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
  }

  if (stream.source === Scope) {
    // add filter to limit events from sub-scope only
    param.push('inScope(event.item)');
  }

  if (param.length) {
    entry.filter = vega_functions_module_parser('(' + param.join(')&&(') + ')', scope).$expr;
  }

  if ((param = stream.throttle) != null) {
    entry.throttle = +param;
  }

  if ((param = stream.debounce) != null) {
    entry.debounce = +param;
  }

  if (stream.consume) {
    entry.consume = true;
  }

  return entry;
}

function filterMark(type, name, role) {
  var item = 'event.item';
  return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\'' + type + '\'' : '') + (role ? '&&' + item + '.mark.role===\'' + role + '\'' : '') + (name ? '&&' + item + '.mark.name===\'' + name + '\'' : '');
}

var OP_VALUE_EXPR = {
  code: '_.$value',
  ast: {
    type: 'Identifier',
    value: 'value'
  }
};

function vega_parser_module_parseUpdate(spec, scope, target) {
  var encode = spec.encode,
      entry = {
    target: target
  };
  var events = spec.events,
      update = spec.update,
      sources = [];

  if (!events) {
    error('Signal update missing events specification.');
  } // interpret as an event selector string


  if (isString(events)) {
    events = eventSelector(events, scope.isSubscope() ? Scope : vega_parser_module_View);
  } // separate event streams from signal updates


  events = array(events).filter(function (s) {
    return s.signal || s.scale ? (sources.push(s), 0) : 1;
  }); // merge internal operator listeners

  if (sources.length > 1) {
    sources = [mergeSources(sources)];
  } // merge event streams, include as source


  if (events.length) {
    sources.push(events.length > 1 ? {
      merge: events
    } : events[0]);
  }

  if (encode != null) {
    if (update) error('Signal encode and update are mutually exclusive.');
    update = 'encode(item(),' + $(encode) + ')';
  } // resolve update value


  entry.update = isString(update) ? vega_functions_module_parser(update, scope) : update.expr != null ? vega_functions_module_parser(update.expr, scope) : update.value != null ? update.value : update.signal != null ? {
    $expr: OP_VALUE_EXPR,
    $params: {
      $value: scope.signalRef(update.signal)
    }
  } : error('Invalid signal update specification.');

  if (spec.force) {
    entry.options = {
      force: true
    };
  }

  sources.forEach(function (source) {
    return scope.addUpdate(extend(streamSource(source, scope), entry));
  });
}

function streamSource(stream, scope) {
  return {
    source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : vega_parser_module_parseStream(stream, scope)
  };
}

function mergeSources(sources) {
  return {
    signal: '[' + sources.map(function (s) {
      return s.scale ? 'scale("' + s.scale + '")' : s.signal;
    }) + ']'
  };
}

function parseSignalUpdates(signal, scope) {
  var op = scope.getSignal(signal.name);
  var expr = signal.update;

  if (signal.init) {
    if (expr) {
      error('Signals can not include both init and update expressions.');
    } else {
      expr = signal.init;
      op.initonly = true;
    }
  }

  if (expr) {
    expr = vega_functions_module_parser(expr, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
  }

  if (signal.on) {
    signal.on.forEach(function (_) {
      return vega_parser_module_parseUpdate(_, scope, op.id);
    });
  }
}

var vega_parser_module_transform = function transform(name) {
  return function (params, value, parent) {
    return entry$1(name, value, params || undefined, parent);
  };
};

var vega_parser_module_Aggregate = vega_parser_module_transform('aggregate');
var vega_parser_module_AxisTicks = vega_parser_module_transform('axisticks');
var vega_parser_module_Bound = vega_parser_module_transform('bound');
var vega_parser_module_Collect = vega_parser_module_transform('collect');
var vega_parser_module_Compare = vega_parser_module_transform('compare');
var vega_parser_module_DataJoin = vega_parser_module_transform('datajoin');
var vega_parser_module_Encode = vega_parser_module_transform('encode');
var vega_parser_module_Expression = vega_parser_module_transform('expression');
var vega_parser_module_Facet = vega_parser_module_transform('facet');
var vega_parser_module_Field = vega_parser_module_transform('field');
var vega_parser_module_Key = vega_parser_module_transform('key');
var vega_parser_module_LegendEntries = vega_parser_module_transform('legendentries');
var vega_parser_module_Load = vega_parser_module_transform('load');
var vega_parser_module_Mark = vega_parser_module_transform('mark');
var vega_parser_module_MultiExtent = vega_parser_module_transform('multiextent');
var vega_parser_module_MultiValues = vega_parser_module_transform('multivalues');
var vega_parser_module_Overlap = vega_parser_module_transform('overlap');
var vega_parser_module_Params = vega_parser_module_transform('params');
var vega_parser_module_PreFacet = vega_parser_module_transform('prefacet');
var vega_parser_module_Projection = vega_parser_module_transform('projection');
var vega_parser_module_Proxy = vega_parser_module_transform('proxy');
var vega_parser_module_Relay = vega_parser_module_transform('relay');
var vega_parser_module_Render = vega_parser_module_transform('render');
var vega_parser_module_Scale = vega_parser_module_transform('scale');
var vega_parser_module_Sieve = vega_parser_module_transform('sieve');
var vega_parser_module_SortItems = vega_parser_module_transform('sortitems');
var vega_parser_module_ViewLayout = vega_parser_module_transform('viewlayout');
var vega_parser_module_Values = vega_parser_module_transform('values');
var FIELD_REF_ID = 0;
var MULTIDOMAIN_SORT_OPS = {
  min: 'min',
  max: 'max',
  count: 'sum'
};

function initScale(spec, scope) {
  var type = spec.type || 'linear';

  if (!isValidScaleType(type)) {
    error('Unrecognized scale type: ' + $(type));
  }

  scope.addScale(spec.name, {
    type: type,
    domain: undefined
  });
}

function parseScale(spec, scope) {
  var params = scope.getScale(spec.name).params;
  var key;
  params.domain = parseScaleDomain(spec.domain, spec, scope);

  if (spec.range != null) {
    params.range = parseScaleRange(spec, scope, params);
  }

  if (spec.interpolate != null) {
    parseScaleInterpolate(spec.interpolate, params);
  }

  if (spec.nice != null) {
    params.nice = parseScaleNice(spec.nice);
  }

  if (spec.bins != null) {
    params.bins = parseScaleBins(spec.bins, scope);
  }

  for (key in spec) {
    if (_has(params, key) || key === 'name') continue;
    params[key] = parseLiteral(spec[key], scope);
  }
}

function parseLiteral(v, scope) {
  return !isObject(v) ? v : v.signal ? scope.signalRef(v.signal) : error('Unsupported object: ' + $(v));
}

function parseArray(v, scope) {
  return v.signal ? scope.signalRef(v.signal) : v.map(function (v) {
    return parseLiteral(v, scope);
  });
}

function dataLookupError(name) {
  error('Can not find data set: ' + $(name));
} // -- SCALE DOMAIN ----


function parseScaleDomain(domain, spec, scope) {
  if (!domain) {
    if (spec.domainMin != null || spec.domainMax != null) {
      error('No scale domain defined for domainMin/domainMax to override.');
    }

    return; // default domain
  }

  return domain.signal ? scope.signalRef(domain.signal) : (isArray(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
}

function explicitDomain(domain, spec, scope) {
  return domain.map(function (v) {
    return parseLiteral(v, scope);
  });
}

function singularDomain(domain, spec, scope) {
  var data = scope.getData(domain.data);
  if (!data) dataLookupError(domain.data);
  return isDiscrete(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : isQuantile(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
}

function multipleDomain(domain, spec, scope) {
  var data = domain.data,
      fields = domain.fields.reduce(function (dom, d) {
    d = isString(d) ? {
      data: data,
      field: d
    } : isArray(d) || d.signal ? fieldRef$1(d, scope) : d;
    dom.push(d);
    return dom;
  }, []);
  return (isDiscrete(spec.type) ? ordinalMultipleDomain : isQuantile(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
}

function fieldRef$1(data, scope) {
  var name = '_:vega:_' + FIELD_REF_ID++,
      coll = vega_parser_module_Collect({});

  if (isArray(data)) {
    coll.value = {
      $ingest: data
    };
  } else if (data.signal) {
    var code = 'setdata(' + $(name) + ',' + data.signal + ')';
    coll.params.input = scope.signalRef(code);
  }

  scope.addDataPipeline(name, [coll, vega_parser_module_Sieve({})]);
  return {
    data: name,
    field: 'data'
  };
}

function ordinalMultipleDomain(domain, scope, fields) {
  var sort = parseSort(domain.sort, true);
  var a, v; // get value counts for each domain field

  var counts = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.countsRef(scope, f.field, sort);
  }); // aggregate the results from each domain field

  var p = {
    groupby: keyFieldRef,
    pulse: counts
  };

  if (sort) {
    a = sort.op || 'count';
    v = sort.field ? aggrField(a, sort.field) : 'count';
    p.ops = [MULTIDOMAIN_SORT_OPS[a]];
    p.fields = [scope.fieldRef(v)];
    p.as = [v];
  }

  a = scope.add(vega_parser_module_Aggregate(p)); // collect aggregate output

  var c = scope.add(vega_parser_module_Collect({
    pulse: ref(a)
  })); // extract values for combined domain

  v = scope.add(vega_parser_module_Values({
    field: keyFieldRef,
    sort: scope.sortRef(sort),
    pulse: ref(c)
  }));
  return ref(v);
}

function parseSort(sort, multidomain) {
  if (sort) {
    if (!sort.field && !sort.op) {
      if (isObject(sort)) sort.field = 'key';else sort = {
        field: 'key'
      };
    } else if (!sort.field && sort.op !== 'count') {
      error('No field provided for sort aggregate op: ' + sort.op);
    } else if (multidomain && sort.field) {
      if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {
        error('Multiple domain scales can not be sorted using ' + sort.op);
      }
    }
  }

  return sort;
}

function quantileMultipleDomain(domain, scope, fields) {
  // get value arrays for each domain field
  var values = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.domainRef(scope, f.field);
  }); // combine value arrays

  return ref(scope.add(vega_parser_module_MultiValues({
    values: values
  })));
}

function numericMultipleDomain(domain, scope, fields) {
  // get extents for each domain field
  var extents = fields.map(function (f) {
    var data = scope.getData(f.data);
    if (!data) dataLookupError(f.data);
    return data.extentRef(scope, f.field);
  }); // combine extents

  return ref(scope.add(vega_parser_module_MultiExtent({
    extents: extents
  })));
} // -- SCALE BINS -----


function parseScaleBins(v, scope) {
  return v.signal || isArray(v) ? parseArray(v, scope) : scope.objectProperty(v);
} // -- SCALE NICE -----


function parseScaleNice(nice) {
  return isObject(nice) ? {
    interval: parseLiteral(nice.interval),
    step: parseLiteral(nice.step)
  } : parseLiteral(nice);
} // -- SCALE INTERPOLATION -----


function parseScaleInterpolate(interpolate, params) {
  params.interpolate = parseLiteral(interpolate.type || interpolate);

  if (interpolate.gamma != null) {
    params.interpolateGamma = parseLiteral(interpolate.gamma);
  }
} // -- SCALE RANGE -----


function parseScaleRange(spec, scope, params) {
  var config = scope.config.range;
  var range = spec.range;

  if (range.signal) {
    return scope.signalRef(range.signal);
  } else if (isString(range)) {
    if (config && _has(config, range)) {
      spec = extend({}, spec, {
        range: config[range]
      });
      return parseScaleRange(spec, scope, params);
    } else if (range === 'width') {
      range = [0, {
        signal: 'width'
      }];
    } else if (range === 'height') {
      range = isDiscrete(spec.type) ? [0, {
        signal: 'height'
      }] : [{
        signal: 'height'
      }, 0];
    } else {
      error('Unrecognized scale range value: ' + $(range));
    }
  } else if (range.scheme) {
    params.scheme = isArray(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
    if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
    if (range.count) params.schemeCount = parseLiteral(range.count, scope);
    return;
  } else if (range.step) {
    params.rangeStep = parseLiteral(range.step, scope);
    return;
  } else if (isDiscrete(spec.type) && !isArray(range)) {
    return parseScaleDomain(range, spec, scope);
  } else if (!isArray(range)) {
    error('Unsupported range type: ' + $(range));
  }

  return range.map(function (v) {
    return (isArray(v) ? parseArray : parseLiteral)(v, scope);
  });
}

function parseProjection(proj, scope) {
  var config = scope.config.projection || {},
      params = {};

  for (var name in proj) {
    if (name === 'name') continue;
    params[name] = vega_parser_module_parseParameter(proj[name], name, scope);
  } // apply projection defaults from config


  for (var _name2 in config) {
    if (params[_name2] == null) {
      params[_name2] = vega_parser_module_parseParameter(config[_name2], _name2, scope);
    }
  }

  scope.addProjection(proj.name, params);
}

function vega_parser_module_parseParameter(_, name, scope) {
  return isArray(_) ? _.map(function (_) {
    return vega_parser_module_parseParameter(_, name, scope);
  }) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : error('Unsupported parameter object: ' + $(_));
}

var vega_parser_module_Top = 'top';
var vega_parser_module_Left = 'left';
var vega_parser_module_Right = 'right';
var vega_parser_module_Bottom = 'bottom';
var vega_parser_module_Center = 'center';
var Vertical = 'vertical';
var vega_parser_module_Start = 'start';
var vega_parser_module_Middle = 'middle';
var vega_parser_module_End = 'end';
var Index = 'index';
var vega_parser_module_Label = 'label';
var Offset = 'offset';
var Perc = 'perc';
var Perc2 = 'perc2';
var Value = 'value';
var GuideLabelStyle = 'guide-label';
var GuideTitleStyle = 'guide-title';
var GroupTitleStyle = 'group-title';
var GroupSubtitleStyle = 'group-subtitle';
var vega_parser_module_Symbols = 'symbol';
var vega_parser_module_Gradient = 'gradient';
var vega_parser_module_Discrete = 'discrete';
var Size = 'size';
var Shape = 'shape';
var Fill = 'fill';
var Stroke = 'stroke';
var StrokeWidth = 'strokeWidth';
var StrokeDash = 'strokeDash';
var Opacity = 'opacity'; // Encoding channels supported by legends
// In priority order of 'canonical' scale

var LegendScales = [Size, Shape, Fill, Stroke, StrokeWidth, StrokeDash, Opacity];
var vega_parser_module_Skip = {
  name: 1,
  style: 1,
  interactive: 1
};
var vega_parser_module_zero = {
  value: 0
};
var vega_parser_module_one = {
  value: 1
};
var GroupMark = 'group';
var RectMark = 'rect';
var RuleMark = 'rule';
var SymbolMark = 'symbol';
var TextMark = 'text';

function guideGroup(mark) {
  mark.type = GroupMark;
  mark.interactive = mark.interactive || false;
  return mark;
}

function vega_parser_module_lookup(spec, config) {
  var _ = function _(name, dflt) {
    return vega_parser_module_value(spec[name], vega_parser_module_value(config[name], dflt));
  };

  _.isVertical = function (s) {
    return Vertical === vega_parser_module_value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
  };

  _.gradientLength = function () {
    return vega_parser_module_value(spec.gradientLength, config.gradientLength || config.gradientWidth);
  };

  _.gradientThickness = function () {
    return vega_parser_module_value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
  };

  _.entryColumns = function () {
    return vega_parser_module_value(spec.columns, vega_parser_module_value(config.columns, +_.isVertical(true)));
  };

  return _;
}

function getEncoding(name, encode) {
  var v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
  return v && v.signal ? v : v ? v.value : null;
}

function getStyle(name, scope, style) {
  var s = scope.config.style[style];
  return s && s[name];
}

function anchorExpr(s, e, m) {
  return "item.anchor === '".concat(vega_parser_module_Start, "' ? ").concat(s, " : item.anchor === '").concat(vega_parser_module_End, "' ? ").concat(e, " : ").concat(m);
}

var alignExpr = anchorExpr($(vega_parser_module_Left), $(vega_parser_module_Right), $(vega_parser_module_Center));

function tickBand(_) {
  var v = _('tickBand');

  var offset = _('tickOffset'),
      band,
      extra;

  if (!v) {
    // if no tick band entry, fall back on other properties
    band = _('bandPosition');
    extra = _('tickExtra');
  } else if (v.signal) {
    // if signal, augment code to interpret values
    band = {
      signal: "(".concat(v.signal, ") === 'extent' ? 1 : 0.5")
    };
    extra = {
      signal: "(".concat(v.signal, ") === 'extent'")
    };

    if (!isObject(offset)) {
      offset = {
        signal: "(".concat(v.signal, ") === 'extent' ? 0 : ").concat(offset)
      };
    }
  } else if (v === 'extent') {
    // if constant, simply set values
    band = 1;
    extra = true;
    offset = 0;
  } else {
    band = 0.5;
    extra = false;
  }

  return {
    extra: extra,
    band: band,
    offset: offset
  };
}

function extendOffset(value, offset) {
  return !offset ? value : !value ? offset : !isObject(value) ? {
    value: value,
    offset: offset
  } : Object.assign({}, value, {
    offset: extendOffset(value.offset, offset)
  });
}

function guideMark(mark, extras) {
  if (extras) {
    mark.name = extras.name;
    mark.style = extras.style || mark.style;
    mark.interactive = !!extras.interactive;
    mark.encode = extendEncode(mark.encode, extras, vega_parser_module_Skip);
  } else {
    mark.interactive = false;
  }

  return mark;
}

function legendGradient(spec, scale, config, userEncode) {
  var _ = vega_parser_module_lookup(spec, config),
      vertical = _.isVertical(),
      thickness = _.gradientThickness(),
      length = _.gradientLength();

  var enter, start, stop, width, height;

  if (vertical) {
    start = [0, 1];
    stop = [0, 0];
    width = thickness;
    height = length;
  } else {
    start = [0, 0];
    stop = [1, 0];
    width = length;
    height = thickness;
  }

  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero,
      x: vega_parser_module_zero,
      y: vega_parser_module_zero,
      width: encoder(width),
      height: encoder(height)
    },
    update: extend({}, enter, {
      opacity: vega_parser_module_one,
      fill: {
        gradient: scale,
        start: start,
        stop: stop
      }
    }),
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    stroke: _('gradientStrokeColor'),
    strokeWidth: _('gradientStrokeWidth')
  }, {
    // update
    opacity: _('gradientOpacity')
  });
  return guideMark({
    type: RectMark,
    role: LegendGradientRole,
    encode: encode
  }, userEncode);
}

function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {
  var _ = vega_parser_module_lookup(spec, config),
      vertical = _.isVertical(),
      thickness = _.gradientThickness(),
      length = _.gradientLength();

  var u,
      v,
      uu,
      vv,
      adjust = '';
  vertical ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-') : (u = 'x', uu = 'x2', v = 'y', vv = 'height');
  var enter = {
    opacity: vega_parser_module_zero,
    fill: {
      scale: scale,
      field: Value
    }
  };
  enter[u] = {
    signal: adjust + 'datum.' + Perc,
    mult: length
  };
  enter[v] = vega_parser_module_zero;
  enter[uu] = {
    signal: adjust + 'datum.' + Perc2,
    mult: length
  };
  enter[vv] = encoder(thickness);
  var encode = {
    enter: enter,
    update: extend({}, enter, {
      opacity: vega_parser_module_one
    }),
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    stroke: _('gradientStrokeColor'),
    strokeWidth: _('gradientStrokeWidth')
  }, {
    // update
    opacity: _('gradientOpacity')
  });
  return guideMark({
    type: RectMark,
    role: LegendBandRole,
    key: Value,
    from: dataRef,
    encode: encode
  }, userEncode);
}

var alignExpr$1 = "datum.".concat(Perc, "<=0?\"").concat(vega_parser_module_Left, "\":datum.").concat(Perc, ">=1?\"").concat(vega_parser_module_Right, "\":\"").concat(vega_parser_module_Center, "\""),
    baselineExpr = "datum.".concat(Perc, "<=0?\"").concat(vega_parser_module_Bottom, "\":datum.").concat(Perc, ">=1?\"").concat(vega_parser_module_Top, "\":\"").concat(vega_parser_module_Middle, "\"");

function legendGradientLabels(spec, config, userEncode, dataRef) {
  var _ = vega_parser_module_lookup(spec, config),
      vertical = _.isVertical(),
      thickness = encoder(_.gradientThickness()),
      length = _.gradientLength();

  var overlap = _('labelOverlap'),
      enter,
      update,
      u,
      v,
      adjust = '';

  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero
    },
    update: update = {
      opacity: vega_parser_module_one,
      text: {
        field: vega_parser_module_Label
      }
    },
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontStyle: _('labelFontStyle'),
    fontWeight: _('labelFontWeight'),
    limit: vega_parser_module_value(spec.labelLimit, config.gradientLabelLimit)
  });

  if (vertical) {
    enter.align = {
      value: 'left'
    };
    enter.baseline = update.baseline = {
      signal: baselineExpr
    };
    u = 'y';
    v = 'x';
    adjust = '1-';
  } else {
    enter.align = update.align = {
      signal: alignExpr$1
    };
    enter.baseline = {
      value: 'top'
    };
    u = 'x';
    v = 'y';
  }

  enter[u] = update[u] = {
    signal: adjust + 'datum.' + Perc,
    mult: length
  };
  enter[v] = update[v] = thickness;
  thickness.offset = vega_parser_module_value(spec.labelOffset, config.gradientLabelOffset) || 0;
  overlap = overlap ? {
    separation: _('labelSeparation'),
    method: overlap,
    order: 'datum.' + Index
  } : undefined; // type, role, style, key, dataRef, encode, extras

  return guideMark({
    type: TextMark,
    role: LegendLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: dataRef,
    encode: encode,
    overlap: overlap
  }, userEncode);
}

function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
  var _ = vega_parser_module_lookup(spec, config),
      entries = userEncode.entries,
      interactive = !!(entries && entries.interactive),
      name = entries ? entries.name : undefined,
      height = _('clipHeight'),
      symbolOffset = _('symbolOffset'),
      valueRef = {
    data: 'value'
  },
      xSignal = "(".concat(columns, ") ? datum.").concat(Offset, " : datum.").concat(Size),
      yEncode = height ? encoder(height) : {
    field: Size
  },
      index = "datum.".concat(Index),
      ncols = "max(1, ".concat(columns, ")");

  var encode, enter, update, nrows, sort;
  yEncode.mult = 0.5; // -- LEGEND SYMBOLS --

  encode = {
    enter: enter = {
      opacity: vega_parser_module_zero,
      x: {
        signal: xSignal,
        mult: 0.5,
        offset: symbolOffset
      },
      y: yEncode
    },
    update: update = {
      opacity: vega_parser_module_one,
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  var baseFill = null,
      baseStroke = null;

  if (!spec.fill) {
    baseFill = config.symbolBaseFillColor;
    baseStroke = config.symbolBaseStrokeColor;
  }

  addEncoders(encode, {
    fill: _('symbolFillColor', baseFill),
    shape: _('symbolType'),
    size: _('symbolSize'),
    stroke: _('symbolStrokeColor', baseStroke),
    strokeDash: _('symbolDash'),
    strokeDashOffset: _('symbolDashOffset'),
    strokeWidth: _('symbolStrokeWidth')
  }, {
    // update
    opacity: _('symbolOpacity')
  });
  LegendScales.forEach(function (scale) {
    if (spec[scale]) {
      update[scale] = enter[scale] = {
        scale: spec[scale],
        field: Value
      };
    }
  });
  var symbols = guideMark({
    type: SymbolMark,
    role: LegendSymbolRole,
    key: Value,
    from: valueRef,
    clip: height ? true : undefined,
    encode: encode
  }, userEncode.symbols); // -- LEGEND LABELS --

  var labelOffset = encoder(symbolOffset);
  labelOffset.offset = _('labelOffset');
  encode = {
    enter: enter = {
      opacity: vega_parser_module_zero,
      x: {
        signal: xSignal,
        offset: labelOffset
      },
      y: yEncode
    },
    update: update = {
      opacity: vega_parser_module_one,
      text: {
        field: vega_parser_module_Label
      },
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    align: _('labelAlign'),
    baseline: _('labelBaseline'),
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontStyle: _('labelFontStyle'),
    fontWeight: _('labelFontWeight'),
    limit: _('labelLimit')
  });
  var labels = guideMark({
    type: TextMark,
    role: LegendLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: valueRef,
    encode: encode
  }, userEncode.labels); // -- LEGEND ENTRY GROUPS --

  encode = {
    enter: {
      noBound: {
        value: !height
      },
      // ignore width/height in bounds calc
      width: vega_parser_module_zero,
      height: height ? encoder(height) : vega_parser_module_zero,
      opacity: vega_parser_module_zero
    },
    exit: {
      opacity: vega_parser_module_zero
    },
    update: update = {
      opacity: vega_parser_module_one,
      row: {
        signal: null
      },
      column: {
        signal: null
      }
    }
  }; // annotate and sort groups to ensure correct ordering

  if (_.isVertical(true)) {
    nrows = "ceil(item.mark.items.length / ".concat(ncols, ")");
    update.row.signal = "".concat(index, "%").concat(nrows);
    update.column.signal = "floor(".concat(index, " / ").concat(nrows, ")");
    sort = {
      field: ['row', index]
    };
  } else {
    update.row.signal = "floor(".concat(index, " / ").concat(ncols, ")");
    update.column.signal = "".concat(index, " % ").concat(ncols);
    sort = {
      field: index
    };
  } // handle zero column case (implies infinite columns)


  update.column.signal = "(".concat(columns, ")?").concat(update.column.signal, ":").concat(index); // facet legend entries into sub-groups

  dataRef = {
    facet: {
      data: dataRef,
      name: 'value',
      groupby: Index
    }
  };
  return guideGroup({
    role: vega_parser_module_ScopeRole,
    from: dataRef,
    encode: extendEncode(encode, entries, vega_parser_module_Skip),
    marks: [symbols, labels],
    name: name,
    interactive: interactive,
    sort: sort
  });
}

function legendSymbolLayout(spec, config) {
  var _ = vega_parser_module_lookup(spec, config); // layout parameters for legend entries


  return {
    align: _('gridAlign'),
    columns: _.entryColumns(),
    center: {
      row: true,
      column: false
    },
    padding: {
      row: _('rowPadding'),
      column: _('columnPadding')
    }
  };
}

var isL = 'item.orient === "left"',
    isR = 'item.orient === "right"',
    isLR = "(".concat(isL, " || ").concat(isR, ")"),
    isVG = "datum.vgrad && ".concat(isLR),
    baseline = anchorExpr('"top"', '"bottom"', '"middle"'),
    alignFlip = anchorExpr('"right"', '"left"', '"center"'),
    exprAlign = "datum.vgrad && ".concat(isR, " ? (").concat(alignFlip, ") : (").concat(isLR, " && !(datum.vgrad && ").concat(isL, ")) ? \"left\" : ").concat(alignExpr),
    exprAnchor = "item._anchor || (".concat(isLR, " ? \"middle\" : \"start\")"),
    exprAngle = "".concat(isVG, " ? (").concat(isL, " ? -90 : 90) : 0"),
    exprBaseline = "".concat(isLR, " ? (datum.vgrad ? (").concat(isR, " ? \"bottom\" : \"top\") : ").concat(baseline, ") : \"top\"");

function legendTitle(spec, config, userEncode, dataRef) {
  var _ = vega_parser_module_lookup(spec, config);

  var encode = {
    enter: {
      opacity: vega_parser_module_zero
    },
    update: {
      opacity: vega_parser_module_one,
      x: {
        field: {
          group: 'padding'
        }
      },
      y: {
        field: {
          group: 'padding'
        }
      }
    },
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    orient: _('titleOrient'),
    _anchor: _('titleAnchor'),
    anchor: {
      signal: exprAnchor
    },
    angle: {
      signal: exprAngle
    },
    align: {
      signal: exprAlign
    },
    baseline: {
      signal: exprBaseline
    },
    text: spec.title,
    fill: _('titleColor'),
    fillOpacity: _('titleOpacity'),
    font: _('titleFont'),
    fontSize: _('titleFontSize'),
    fontStyle: _('titleFontStyle'),
    fontWeight: _('titleFontWeight'),
    limit: _('titleLimit'),
    lineHeight: _('titleLineHeight')
  }, {
    // require update
    align: _('titleAlign'),
    baseline: _('titleBaseline')
  });
  return guideMark({
    type: TextMark,
    role: LegendTitleRole,
    style: GuideTitleStyle,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function vega_parser_module_clip(clip, scope) {
  var expr;

  if (isObject(clip)) {
    if (clip.signal) {
      expr = clip.signal;
    } else if (clip.path) {
      expr = 'pathShape(' + param(clip.path) + ')';
    } else if (clip.sphere) {
      expr = 'geoShape(' + param(clip.sphere) + ', {type: "Sphere"})';
    }
  }

  return expr ? scope.signalRef(expr) : !!clip;
}

function param(value) {
  return isObject(value) && value.signal ? value.signal : $(value);
}

function getRole(spec) {
  var role = spec.role || '';
  return !role.indexOf('axis') || !role.indexOf('legend') || !role.indexOf('title') ? role : spec.type === GroupMark ? vega_parser_module_ScopeRole : role || MarkRole;
}

function vega_parser_module_definition(spec) {
  return {
    marktype: spec.type,
    name: spec.name || undefined,
    role: spec.role || getRole(spec),
    zindex: +spec.zindex || undefined,
    aria: spec.aria,
    description: spec.description
  };
}

function interactive(spec, scope) {
  return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
}
/**
 * Parse a data transform specification.
 */


function parseTransform(spec, scope) {
  var def = definition(spec.type);
  if (!def) error('Unrecognized transform type: ' + $(spec.type));
  var t = entry$1(def.type.toLowerCase(), null, vega_parser_module_parseParameters(def, spec, scope));
  if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
  t.metadata = def.metadata || {};
  return t;
}
/**
 * Parse all parameters of a data transform.
 */


function vega_parser_module_parseParameters(def, spec, scope) {
  var params = {},
      n = def.params.length;

  for (var i = 0; i < n; ++i) {
    var pdef = def.params[i];
    params[pdef.name] = parseParameter$1(pdef, spec, scope);
  }

  return params;
}
/**
 * Parse a data transform parameter.
 */


function parseParameter$1(def, spec, scope) {
  var type = def.type,
      value = spec[def.name];

  if (type === 'index') {
    return parseIndexParameter(def, spec, scope);
  } else if (value === undefined) {
    if (def.required) {
      error('Missing required ' + $(spec.type) + ' parameter: ' + $(def.name));
    }

    return;
  } else if (type === 'param') {
    return parseSubParameters(def, spec, scope);
  } else if (type === 'projection') {
    return scope.projectionRef(spec[def.name]);
  }

  return def.array && !isSignal(value) ? value.map(function (v) {
    return parameterValue(def, v, scope);
  }) : parameterValue(def, value, scope);
}
/**
 * Parse a single parameter value.
 */


function parameterValue(def, value, scope) {
  var type = def.type;

  if (isSignal(value)) {
    return isExpr$1(type) ? error('Expression references can not be signals.') : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
  } else {
    var _expr = def.expr || isField(type);

    return _expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : _expr && outerField(value) ? _fieldRef(value.field, value.as) : isExpr$1(type) ? vega_functions_module_parser(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? _fieldRef(value) : isCompare(type) ? scope.compareRef(value) : value;
  }
}
/**
 * Parse parameter for accessing an index of another data set.
 */


function parseIndexParameter(def, spec, scope) {
  if (!isString(spec.from)) {
    error('Lookup "from" parameter must be a string literal.');
  }

  return scope.getData(spec.from).lookupRef(scope, spec.key);
}
/**
 * Parse a parameter that contains one or more sub-parameter objects.
 */


function parseSubParameters(def, spec, scope) {
  var value = spec[def.name];

  if (def.array) {
    if (!isArray(value)) {
      // signals not allowed!
      error('Expected an array of sub-parameters. Instead: ' + $(value));
    }

    return value.map(function (v) {
      return parseSubParameter(def, v, scope);
    });
  } else {
    return parseSubParameter(def, value, scope);
  }
}
/**
 * Parse a sub-parameter object.
 */


function parseSubParameter(def, value, scope) {
  var n = def.params.length;
  var pdef; // loop over defs to find matching key

  for (var i = 0; i < n; ++i) {
    pdef = def.params[i];

    for (var k in pdef.key) {
      if (pdef.key[k] !== value[k]) {
        pdef = null;
        break;
      }
    }

    if (pdef) break;
  } // raise error if matching key not found


  if (!pdef) error('Unsupported parameter: ' + $(value)); // parse params, create Params transform, return ref

  var params = extend(vega_parser_module_parseParameters(pdef, value, scope), pdef.key);
  return ref(scope.add(vega_parser_module_Params(params)));
} // -- Utilities -----


var outerExpr = function outerExpr(_) {
  return _ && _.expr;
};

var outerField = function outerField(_) {
  return _ && _.field;
};

var isData = function isData(_) {
  return _ === 'data';
};

var isExpr$1 = function isExpr$1(_) {
  return _ === 'expr';
};

var isField = function isField(_) {
  return _ === 'field';
};

var isCompare = function isCompare(_) {
  return _ === 'compare';
};

function parseData(from, group, scope) {
  var facet, key, op, dataRef, parent; // if no source data, generate singleton datum

  if (!from) {
    dataRef = ref(scope.add(vega_parser_module_Collect(null, [{}])));
  } // if faceted, process facet specification
  else if (facet = from.facet) {
      if (!group) error('Only group marks can be faceted.'); // use pre-faceted source data, if available

      if (facet.field != null) {
        dataRef = parent = getDataRef(facet, scope);
      } else {
        // generate facet aggregates if no direct data specification
        if (!from.data) {
          op = parseTransform(extend({
            type: 'aggregate',
            groupby: array(facet.groupby)
          }, facet.aggregate), scope);
          op.params.key = scope.keyRef(facet.groupby);
          op.params.pulse = getDataRef(facet, scope);
          dataRef = parent = ref(scope.add(op));
        } else {
          parent = ref(scope.getData(from.data).aggregate);
        }

        key = scope.keyRef(facet.groupby, true);
      }
    } // if not yet defined, get source data reference


  if (!dataRef) {
    dataRef = getDataRef(from, scope);
  }

  return {
    key: key,
    pulse: dataRef,
    parent: parent
  };
}

function getDataRef(from, scope) {
  return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
}

function DataScope(scope, input, output, values, aggr) {
  this.scope = scope; // parent scope object

  this.input = input; // first operator in pipeline (tuple input)

  this.output = output; // last operator in pipeline (tuple output)

  this.values = values; // operator for accessing tuples (but not tuple flow)
  // last aggregate in transform pipeline

  this.aggregate = aggr; // lookup table of field indices

  this.index = {};
}

DataScope.fromEntries = function (scope, entries) {
  var n = entries.length,
      values = entries[n - 1],
      output = entries[n - 2];
  var input = entries[0],
      aggr = null,
      i = 1;

  if (input && input.type === 'load') {
    input = entries[1];
  } // add operator entries to this scope, wire up pulse chain


  scope.add(entries[0]);

  for (; i < n; ++i) {
    entries[i].params.pulse = ref(entries[i - 1]);
    scope.add(entries[i]);
    if (entries[i].type === 'aggregate') aggr = entries[i];
  }

  return new DataScope(scope, input, output, values, aggr);
};

function fieldKey(field) {
  return isString(field) ? field : null;
}

function addSortField(scope, p, sort) {
  var as = aggrField(sort.op, sort.field);
  var s;

  if (p.ops) {
    for (var i = 0, n = p.as.length; i < n; ++i) {
      if (p.as[i] === as) return;
    }
  } else {
    p.ops = ['count'];
    p.fields = [null];
    p.as = ['count'];
  }

  if (sort.op) {
    p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
    p.fields.push(scope.fieldRef(sort.field));
    p.as.push(as);
  }
}

function cache(scope, ds, name, optype, field, counts, index) {
  var cache = ds[name] || (ds[name] = {}),
      sort = sortKey(counts);
  var k = fieldKey(field),
      v,
      op;

  if (k != null) {
    scope = ds.scope;
    k = k + (sort ? '|' + sort : '');
    v = cache[k];
  }

  if (!v) {
    var params = counts ? {
      field: keyFieldRef,
      pulse: ds.countsRef(scope, field, counts)
    } : {
      field: scope.fieldRef(field),
      pulse: ref(ds.output)
    };
    if (sort) params.sort = scope.sortRef(counts);
    op = scope.add(entry$1(optype, undefined, params));
    if (index) ds.index[field] = op;
    v = ref(op);
    if (k != null) cache[k] = v;
  }

  return v;
}

DataScope.prototype = {
  countsRef: function countsRef(scope, field, sort) {
    var ds = this,
        cache = ds.counts || (ds.counts = {}),
        k = fieldKey(field);
    var v, a, p;

    if (k != null) {
      scope = ds.scope;
      v = cache[k];
    }

    if (!v) {
      p = {
        groupby: scope.fieldRef(field, 'key'),
        pulse: ref(ds.output)
      };
      if (sort && sort.field) addSortField(scope, p, sort);
      a = scope.add(vega_parser_module_Aggregate(p));
      v = scope.add(vega_parser_module_Collect({
        pulse: ref(a)
      }));
      v = {
        agg: a,
        ref: ref(v)
      };
      if (k != null) cache[k] = v;
    } else if (sort && sort.field) {
      addSortField(scope, v.agg.params, sort);
    }

    return v.ref;
  },
  tuplesRef: function tuplesRef() {
    return ref(this.values);
  },
  extentRef: function extentRef(scope, field) {
    return cache(scope, this, 'extent', 'extent', field, false);
  },
  domainRef: function domainRef(scope, field) {
    return cache(scope, this, 'domain', 'values', field, false);
  },
  valuesRef: function valuesRef(scope, field, sort) {
    return cache(scope, this, 'vals', 'values', field, sort || true);
  },
  lookupRef: function lookupRef(scope, field) {
    return cache(scope, this, 'lookup', 'tupleindex', field, false);
  },
  indataRef: function indataRef(scope, field) {
    return cache(scope, this, 'indata', 'tupleindex', field, true, true);
  }
};

function parseFacet(spec, scope, group) {
  var facet = spec.from.facet,
      name = facet.name,
      data = getDataRef(facet, scope);
  var op;

  if (!facet.name) {
    error('Facet must have a name: ' + $(facet));
  }

  if (!facet.data) {
    error('Facet must reference a data set: ' + $(facet));
  }

  if (facet.field) {
    op = scope.add(vega_parser_module_PreFacet({
      field: scope.fieldRef(facet.field),
      pulse: data
    }));
  } else if (facet.groupby) {
    op = scope.add(vega_parser_module_Facet({
      key: scope.keyRef(facet.groupby),
      group: ref(scope.proxy(group.parent)),
      pulse: data
    }));
  } else {
    error('Facet must specify groupby or field: ' + $(facet));
  } // initialize facet subscope


  var subscope = scope.fork(),
      source = subscope.add(vega_parser_module_Collect()),
      values = subscope.add(vega_parser_module_Sieve({
    pulse: ref(source)
  }));
  subscope.addData(name, new DataScope(subscope, source, source, values));
  subscope.addSignal('parent', null); // parse faceted subflow

  op.params.subflow = {
    $subflow: subscope.parse(spec).toRuntime()
  };
}

function parseSubflow(spec, scope, input) {
  var op = scope.add(vega_parser_module_PreFacet({
    pulse: input.pulse
  })),
      subscope = scope.fork();
  subscope.add(vega_parser_module_Sieve());
  subscope.addSignal('parent', null); // parse group mark subflow

  op.params.subflow = {
    $subflow: subscope.parse(spec).toRuntime()
  };
}

function parseTrigger(spec, scope, name) {
  var remove = spec.remove,
      insert = spec.insert,
      toggle = spec.toggle,
      modify = spec.modify,
      values = spec.values,
      op = scope.add(operator());
  var update = 'if(' + spec.trigger + ',modify("' + name + '",' + [insert, remove, toggle, modify, values].map(function (_) {
    return _ == null ? 'null' : _;
  }).join(',') + '),0)';
  var expr = vega_functions_module_parser(update, scope);
  op.update = expr.$expr;
  op.params = expr.$params;
}

function parseMark(spec, scope) {
  var role = getRole(spec),
      group = spec.type === GroupMark,
      facet = spec.from && spec.from.facet,
      overlap = spec.overlap;
  var layout = spec.layout || role === vega_parser_module_ScopeRole || role === vega_parser_module_FrameRole,
      ops,
      op,
      store,
      enc,
      name,
      layoutRef,
      boundRef;
  var nested = role === MarkRole || layout || facet; // resolve input data

  var input = parseData(spec.from, group, scope); // data join to map tuples to visual items

  op = scope.add(vega_parser_module_DataJoin({
    key: input.key || (spec.key ? _fieldRef(spec.key) : undefined),
    pulse: input.pulse,
    clean: !group
  }));
  var joinRef = ref(op); // collect visual items

  op = store = scope.add(vega_parser_module_Collect({
    pulse: joinRef
  })); // connect visual items to scenegraph

  op = scope.add(vega_parser_module_Mark({
    markdef: vega_parser_module_definition(spec),
    interactive: interactive(spec.interactive, scope),
    clip: vega_parser_module_clip(spec.clip, scope),
    context: {
      $context: true
    },
    groups: scope.lookup(),
    parent: scope.signals.parent ? scope.signalRef('parent') : null,
    index: scope.markpath(),
    pulse: ref(op)
  }));
  var markRef = ref(op); // add visual encoders

  op = enc = scope.add(vega_parser_module_Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
    mod: false,
    pulse: markRef
  }))); // monitor parent marks to propagate changes

  op.params.parent = scope.encode(); // add post-encoding transforms, if defined

  if (spec.transform) {
    spec.transform.forEach(function (_) {
      var tx = parseTransform(_, scope),
          md = tx.metadata;

      if (md.generates || md.changes) {
        error('Mark transforms should not generate new data.');
      }

      if (!md.nomod) enc.params.mod = true; // update encode mod handling

      tx.params.pulse = ref(op);
      scope.add(op = tx);
    });
  } // if item sort specified, perform post-encoding


  if (spec.sort) {
    op = scope.add(vega_parser_module_SortItems({
      sort: scope.compareRef(spec.sort),
      pulse: ref(op)
    }));
  }

  var encodeRef = ref(op); // add view layout operator if needed

  if (facet || layout) {
    layout = scope.add(vega_parser_module_ViewLayout({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      mark: markRef,
      pulse: encodeRef
    }));
    layoutRef = ref(layout);
  } // compute bounding boxes


  var bound = scope.add(vega_parser_module_Bound({
    mark: markRef,
    pulse: layoutRef || encodeRef
  }));
  boundRef = ref(bound); // if group mark, recurse to parse nested content

  if (group) {
    // juggle layout & bounds to ensure they run *after* any faceting transforms
    if (nested) {
      ops = scope.operators;
      ops.pop();
      if (layout) ops.pop();
    }

    scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
    facet ? parseFacet(spec, scope, input) // explicit facet
    : nested ? parseSubflow(spec, scope, input) // standard mark group
    : scope.parse(spec); // guide group, we can avoid nested scopes

    scope.popState();

    if (nested) {
      if (layout) ops.push(layout);
      ops.push(bound);
    }
  } // if requested, add overlap removal transform


  if (overlap) {
    boundRef = parseOverlap(overlap, boundRef, scope);
  } // render / sieve items


  var render = scope.add(vega_parser_module_Render({
    pulse: boundRef
  })),
      sieve = scope.add(vega_parser_module_Sieve({
    pulse: ref(render)
  }, undefined, scope.parent())); // if mark is named, make accessible as reactive geometry
  // add trigger updates if defined

  if (spec.name != null) {
    name = spec.name;
    scope.addData(name, new DataScope(scope, store, render, sieve));
    if (spec.on) spec.on.forEach(function (on) {
      if (on.insert || on.remove || on.toggle) {
        error('Marks only support modify triggers.');
      }

      parseTrigger(on, scope, name);
    });
  }
}

function parseOverlap(overlap, source, scope) {
  var method = overlap.method,
      bound = overlap.bound,
      sep = overlap.separation;
  var params = {
    separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
    method: isSignal(method) ? scope.signalRef(method.signal) : method,
    pulse: source
  };

  if (overlap.order) {
    params.sort = scope.compareRef({
      field: overlap.order
    });
  }

  if (bound) {
    var tol = bound.tolerance;
    params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
    params.boundScale = scope.scaleRef(bound.scale);
    params.boundOrient = bound.orient;
  }

  return ref(scope.add(vega_parser_module_Overlap(params)));
}

function parseLegend(spec, scope) {
  var config = scope.config.legend,
      encode = spec.encode || {},
      _ = vega_parser_module_lookup(spec, config),
      legendEncode = encode.legend || {},
      name = legendEncode.name || undefined,
      interactive = legendEncode.interactive,
      style = legendEncode.style,
      scales = {};

  var scale = 0,
      entryLayout,
      params,
      children; // resolve scales and 'canonical' scale name

  LegendScales.forEach(function (s) {
    return spec[s] ? (scales[s] = spec[s], scale = scale || spec[s]) : 0;
  });
  if (!scale) error('Missing valid scale for legend.'); // resolve legend type (symbol, gradient, or discrete gradient)

  var type = legendType(spec, scope.scaleType(scale)); // single-element data source for legend group

  var datum = {
    title: spec.title != null,
    scales: scales,
    type: type,
    vgrad: type !== 'symbol' && _.isVertical()
  };
  var dataRef = ref(scope.add(vega_parser_module_Collect(null, [datum]))); // encoding properties for legend entry sub-group

  var entryEncode = {
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    }
  }; // data source for legend values

  var entryRef = ref(scope.add(vega_parser_module_LegendEntries(params = {
    type: type,
    scale: scope.scaleRef(scale),
    count: scope.objectProperty(_('tickCount')),
    limit: scope.property(_('symbolLimit')),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  }))); // continuous gradient legend

  if (type === vega_parser_module_Gradient) {
    children = [legendGradient(spec, scale, config, encode.gradient), legendGradientLabels(spec, config, encode.labels, entryRef)]; // adjust default tick count based on the gradient length

    params.count = params.count || scope.signalRef("max(2,2*floor((".concat(deref(_.gradientLength()), ")/100))"));
  } // discrete gradient legend
  else if (type === vega_parser_module_Discrete) {
      children = [legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef), legendGradientLabels(spec, config, encode.labels, entryRef)];
    } // symbol legend
    else {
        // determine legend symbol group layout
        entryLayout = legendSymbolLayout(spec, config);
        children = [legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))]; // pass symbol size information to legend entry generator

        params.size = sizeExpression(spec, scope, children[0].marks);
      } // generate legend marks


  children = [guideGroup({
    role: LegendEntryRole,
    from: dataRef,
    encode: entryEncode,
    marks: children,
    layout: entryLayout,
    interactive: interactive
  })]; // include legend title if defined

  if (datum.title) {
    children.push(legendTitle(spec, config, encode.title, dataRef));
  } // parse legend specification


  return parseMark(guideGroup({
    role: vega_parser_module_LegendRole,
    from: dataRef,
    encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, vega_parser_module_Skip),
    marks: children,
    aria: _('aria'),
    description: _('description'),
    zindex: _('zindex'),
    name: name,
    interactive: interactive,
    style: style
  }), scope);
}

function legendType(spec, scaleType) {
  var type = spec.type || vega_parser_module_Symbols;

  if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
    type = isContinuous(scaleType) ? vega_parser_module_Gradient : isDiscretizing(scaleType) ? vega_parser_module_Discrete : vega_parser_module_Symbols;
  }

  return type !== vega_parser_module_Gradient ? type : isDiscretizing(scaleType) ? vega_parser_module_Discrete : vega_parser_module_Gradient;
}

function scaleCount(spec) {
  return LegendScales.reduce(function (count, type) {
    return count + (spec[type] ? 1 : 0);
  }, 0);
}

function buildLegendEncode(_, spec, config) {
  var encode = {
    enter: {},
    update: {}
  };
  addEncoders(encode, {
    orient: _('orient'),
    offset: _('offset'),
    padding: _('padding'),
    titlePadding: _('titlePadding'),
    cornerRadius: _('cornerRadius'),
    fill: _('fillColor'),
    stroke: _('strokeColor'),
    strokeWidth: config.strokeWidth,
    strokeDash: config.strokeDash,
    x: _('legendX'),
    y: _('legendY'),
    // accessibility support
    format: spec.format,
    formatType: spec.formatType
  });
  return encode;
}

function sizeExpression(spec, scope, marks) {
  var size = deref(getChannel('size', spec, marks)),
      strokeWidth = deref(getChannel('strokeWidth', spec, marks)),
      fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
  return vega_functions_module_parser("max(ceil(sqrt(".concat(size, ")+").concat(strokeWidth, "),").concat(fontSize, ")"), scope);
}

function getChannel(name, spec, marks) {
  return spec[name] ? "scale(\"".concat(spec[name], "\",datum)") : getEncoding(name, marks[0].encode);
}

function getFontSize(encode, scope, style) {
  return getEncoding('fontSize', encode) || getStyle('fontSize', scope, style);
}

var angleExpr = "item.orient===\"".concat(vega_parser_module_Left, "\"?-90:item.orient===\"").concat(vega_parser_module_Right, "\"?90:0");

function parseTitle(spec, scope) {
  spec = isString(spec) ? {
    text: spec
  } : spec;

  var _ = vega_parser_module_lookup(spec, scope.config.title),
      encode = spec.encode || {},
      userEncode = encode.group || {},
      name = userEncode.name || undefined,
      interactive = userEncode.interactive,
      style = userEncode.style,
      children = []; // single-element data source for group title


  var datum = {},
      dataRef = ref(scope.add(vega_parser_module_Collect(null, [datum]))); // include title text

  children.push(buildTitle(spec, _, titleEncode(spec), dataRef)); // include subtitle text

  if (spec.subtitle) {
    children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));
  } // parse title specification


  return parseMark(guideGroup({
    role: vega_parser_module_TitleRole,
    from: dataRef,
    encode: groupEncode(_, userEncode),
    marks: children,
    aria: _('aria'),
    description: _('description'),
    zindex: _('zindex'),
    name: name,
    interactive: interactive,
    style: style
  }), scope);
} // provide backwards-compatibility for title custom encode;
// the top-level encode block has been *deprecated*.


function titleEncode(spec) {
  var encode = spec.encode;
  return encode && encode.title || extend({
    name: spec.name,
    interactive: spec.interactive,
    style: spec.style
  }, encode);
}

function groupEncode(_, userEncode) {
  var encode = {
    enter: {},
    update: {}
  };
  addEncoders(encode, {
    orient: _('orient'),
    anchor: _('anchor'),
    align: {
      signal: alignExpr
    },
    angle: {
      signal: angleExpr
    },
    limit: _('limit'),
    frame: _('frame'),
    offset: _('offset') || 0,
    padding: _('subtitlePadding')
  });
  return extendEncode(encode, userEncode, vega_parser_module_Skip);
}

function buildTitle(spec, _, userEncode, dataRef) {
  var zero = {
    value: 0
  },
      text = spec.text,
      encode = {
    enter: {
      opacity: zero
    },
    update: {
      opacity: {
        value: 1
      }
    },
    exit: {
      opacity: zero
    }
  };
  addEncoders(encode, {
    text: text,
    align: {
      signal: 'item.mark.group.align'
    },
    angle: {
      signal: 'item.mark.group.angle'
    },
    limit: {
      signal: 'item.mark.group.limit'
    },
    baseline: 'top',
    dx: _('dx'),
    dy: _('dy'),
    fill: _('color'),
    font: _('font'),
    fontSize: _('fontSize'),
    fontStyle: _('fontStyle'),
    fontWeight: _('fontWeight'),
    lineHeight: _('lineHeight')
  }, {
    // update
    align: _('align'),
    angle: _('angle'),
    baseline: _('baseline')
  });
  return guideMark({
    type: TextMark,
    role: TitleTextRole,
    style: GroupTitleStyle,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function buildSubTitle(spec, _, userEncode, dataRef) {
  var zero = {
    value: 0
  },
      text = spec.subtitle,
      encode = {
    enter: {
      opacity: zero
    },
    update: {
      opacity: {
        value: 1
      }
    },
    exit: {
      opacity: zero
    }
  };
  addEncoders(encode, {
    text: text,
    align: {
      signal: 'item.mark.group.align'
    },
    angle: {
      signal: 'item.mark.group.angle'
    },
    limit: {
      signal: 'item.mark.group.limit'
    },
    baseline: 'top',
    dx: _('dx'),
    dy: _('dy'),
    fill: _('subtitleColor'),
    font: _('subtitleFont'),
    fontSize: _('subtitleFontSize'),
    fontStyle: _('subtitleFontStyle'),
    fontWeight: _('subtitleFontWeight'),
    lineHeight: _('subtitleLineHeight')
  }, {
    // update
    align: _('align'),
    angle: _('angle'),
    baseline: _('baseline')
  });
  return guideMark({
    type: TextMark,
    role: TitleSubtitleRole,
    style: GroupSubtitleStyle,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function parseData$1(data, scope) {
  var transforms = [];

  if (data.transform) {
    data.transform.forEach(function (tx) {
      transforms.push(parseTransform(tx, scope));
    });
  }

  if (data.on) {
    data.on.forEach(function (on) {
      parseTrigger(on, scope, data.name);
    });
  }

  scope.addDataPipeline(data.name, analyze(data, scope, transforms));
}
/**
 * Analyze a data pipeline, add needed operators.
 */


function analyze(data, scope, ops) {
  var output = [];
  var source = null,
      modify = false,
      generate = false,
      upstream,
      i,
      n,
      t,
      m;

  if (data.values) {
    // hard-wired input data set
    if (isSignal(data.values) || hasSignal(data.format)) {
      // if either values is signal or format has signal, use dynamic loader
      output.push(vega_parser_module_load(scope, data));
      output.push(source = collect());
    } else {
      // otherwise, ingest upon dataflow init
      output.push(source = collect({
        $ingest: data.values,
        $format: data.format
      }));
    }
  } else if (data.url) {
    // load data from external source
    if (hasSignal(data.url) || hasSignal(data.format)) {
      // if either url or format has signal, use dynamic loader
      output.push(vega_parser_module_load(scope, data));
      output.push(source = collect());
    } else {
      // otherwise, request load upon dataflow init
      output.push(source = collect({
        $request: data.url,
        $format: data.format
      }));
    }
  } else if (data.source) {
    // derives from one or more other data sets
    source = upstream = array(data.source).map(function (d) {
      return ref(scope.getData(d).output);
    });
    output.push(null); // populate later
  } // scan data transforms, add collectors as needed


  for (i = 0, n = ops.length; i < n; ++i) {
    t = ops[i];
    m = t.metadata;

    if (!source && !m.source) {
      output.push(source = collect());
    }

    output.push(t);
    if (m.generates) generate = true;
    if (m.modifies && !generate) modify = true;
    if (m.source) source = t;else if (m.changes) source = null;
  }

  if (upstream) {
    n = upstream.length - 1;
    output[0] = vega_parser_module_Relay({
      derive: modify,
      pulse: n ? upstream : upstream[0]
    });

    if (modify || n) {
      // collect derived and multi-pulse tuples
      output.splice(1, 0, collect());
    }
  }

  if (!source) output.push(collect());
  output.push(vega_parser_module_Sieve({}));
  return output;
}

function collect(values) {
  var s = vega_parser_module_Collect({}, values);
  s.metadata = {
    source: true
  };
  return s;
}

function vega_parser_module_load(scope, data) {
  return vega_parser_module_Load({
    url: data.url ? scope.property(data.url) : undefined,
    async: data.async ? scope.property(data.async) : undefined,
    values: data.values ? scope.property(data.values) : undefined,
    format: scope.objectProperty(data.format)
  });
}

var isX = function isX(orient) {
  return orient === vega_parser_module_Bottom || orient === vega_parser_module_Top;
}; // get sign coefficient based on axis orient


var getSign = function getSign(orient, a, b) {
  return isSignal(orient) ? ifLeftTopExpr(orient.signal, a, b) : orient === vega_parser_module_Left || orient === vega_parser_module_Top ? a : b;
}; // condition on axis x-direction


var ifX = function ifX(orient, a, b) {
  return isSignal(orient) ? ifXEnc(orient.signal, a, b) : isX(orient) ? a : b;
}; // condition on axis y-direction


var ifY = function ifY(orient, a, b) {
  return isSignal(orient) ? ifYEnc(orient.signal, a, b) : isX(orient) ? b : a;
};

var ifTop = function ifTop(orient, a, b) {
  return isSignal(orient) ? ifTopExpr(orient.signal, a, b) : orient === vega_parser_module_Top ? {
    value: a
  } : {
    value: b
  };
};

var ifRight = function ifRight(orient, a, b) {
  return isSignal(orient) ? ifRightExpr(orient.signal, a, b) : orient === vega_parser_module_Right ? {
    value: a
  } : {
    value: b
  };
};

var ifXEnc = function ifXEnc($orient, a, b) {
  return ifEnc("".concat($orient, " === '").concat(vega_parser_module_Top, "' || ").concat($orient, " === '").concat(vega_parser_module_Bottom, "'"), a, b);
};

var ifYEnc = function ifYEnc($orient, a, b) {
  return ifEnc("".concat($orient, " !== '").concat(vega_parser_module_Top, "' && ").concat($orient, " !== '").concat(vega_parser_module_Bottom, "'"), a, b);
};

var ifLeftTopExpr = function ifLeftTopExpr($orient, a, b) {
  return ifExpr("".concat($orient, " === '").concat(vega_parser_module_Left, "' || ").concat($orient, " === '").concat(vega_parser_module_Top, "'"), a, b);
};

var ifTopExpr = function ifTopExpr($orient, a, b) {
  return ifExpr("".concat($orient, " === '").concat(vega_parser_module_Top, "'"), a, b);
};

var ifRightExpr = function ifRightExpr($orient, a, b) {
  return ifExpr("".concat($orient, " === '").concat(vega_parser_module_Right, "'"), a, b);
};

var ifEnc = function ifEnc(test, a, b) {
  // ensure inputs are encoder objects (or null)
  a = a != null ? encoder(a) : a;
  b = b != null ? encoder(b) : b;

  if (isSimple(a) && isSimple(b)) {
    // if possible generate simple signal expression
    a = a ? a.signal || $(a.value) : null;
    b = b ? b.signal || $(b.value) : null;
    return {
      signal: "".concat(test, " ? (").concat(a, ") : (").concat(b, ")")
    };
  } else {
    // otherwise generate rule set
    return [extend({
      test: test
    }, a)].concat(b || []);
  }
};

var isSimple = function isSimple(enc) {
  return enc == null || Object.keys(enc).length === 1;
};

var ifExpr = function ifExpr(test, a, b) {
  return {
    signal: "".concat(test, " ? (").concat(toExpr(a), ") : (").concat(toExpr(b), ")")
  };
};

var ifOrient = function ifOrient($orient, t, b, l, r) {
  return {
    signal: (l != null ? "".concat($orient, " === '").concat(vega_parser_module_Left, "' ? (").concat(toExpr(l), ") : ") : '') + (b != null ? "".concat($orient, " === '").concat(vega_parser_module_Bottom, "' ? (").concat(toExpr(b), ") : ") : '') + (r != null ? "".concat($orient, " === '").concat(vega_parser_module_Right, "' ? (").concat(toExpr(r), ") : ") : '') + (t != null ? "".concat($orient, " === '").concat(vega_parser_module_Top, "' ? (").concat(toExpr(t), ") : ") : '') + '(null)'
  };
};

var toExpr = function toExpr(v) {
  return isSignal(v) ? v.signal : v == null ? null : $(v);
};

var mult = function mult(sign, value) {
  return value === 0 ? 0 : isSignal(sign) ? {
    signal: "(".concat(sign.signal, ") * ").concat(value)
  } : {
    value: sign * value
  };
};

var patch = function patch(value, base) {
  var s = value.signal;
  return s && s.endsWith('(null)') ? {
    signal: s.slice(0, -6) + base.signal
  } : value;
};

function fallback(prop, config, axisConfig, style) {
  var styleProp;

  if (config && _has(config, prop)) {
    return config[prop];
  } else if (_has(axisConfig, prop)) {
    return axisConfig[prop];
  } else if (prop.startsWith('title')) {
    switch (prop) {
      case 'titleColor':
        styleProp = 'fill';
        break;

      case 'titleFont':
      case 'titleFontSize':
      case 'titleFontWeight':
        styleProp = prop[5].toLowerCase() + prop.slice(6);
    }

    return style[GuideTitleStyle][styleProp];
  } else if (prop.startsWith('label')) {
    switch (prop) {
      case 'labelColor':
        styleProp = 'fill';
        break;

      case 'labelFont':
      case 'labelFontSize':
        styleProp = prop[5].toLowerCase() + prop.slice(6);
    }

    return style[GuideLabelStyle][styleProp];
  }

  return null;
}

function vega_parser_module_keys(objects) {
  var map = {};

  var _iterator = vega_parser_module_createForOfIteratorHelper(objects),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var obj = _step.value;
      if (!obj) continue;

      for (var key in obj) {
        map[key] = 1;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Object.keys(map);
}

function axisConfig(spec, scope) {
  var config = scope.config,
      style = config.style,
      axis = config.axis,
      band = scope.scaleType(spec.scale) === 'band' && config.axisBand,
      orient = spec.orient,
      xy,
      or,
      key;

  if (isSignal(orient)) {
    var xyKeys = vega_parser_module_keys([config.axisX, config.axisY]),
        orientKeys = vega_parser_module_keys([config.axisTop, config.axisBottom, config.axisLeft, config.axisRight]);
    xy = {};

    var _iterator2 = vega_parser_module_createForOfIteratorHelper(xyKeys),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        key = _step2.value;
        xy[key] = ifX(orient, fallback(key, config.axisX, axis, style), fallback(key, config.axisY, axis, style));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    or = {};

    var _iterator3 = vega_parser_module_createForOfIteratorHelper(orientKeys),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        key = _step3.value;
        or[key] = ifOrient(orient.signal, fallback(key, config.axisTop, axis, style), fallback(key, config.axisBottom, axis, style), fallback(key, config.axisLeft, axis, style), fallback(key, config.axisRight, axis, style));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  } else {
    xy = orient === vega_parser_module_Top || orient === vega_parser_module_Bottom ? config.axisX : config.axisY;
    or = config['axis' + orient[0].toUpperCase() + orient.slice(1)];
  }

  var result = xy || or || band ? extend({}, axis, xy, or, band) : axis;
  return result;
}

function axisDomain(spec, config, userEncode, dataRef) {
  var _ = vega_parser_module_lookup(spec, config),
      orient = spec.orient;

  var enter, update;
  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero
    },
    update: update = {
      opacity: vega_parser_module_one
    },
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    stroke: _('domainColor'),
    strokeCap: _('domainCap'),
    strokeDash: _('domainDash'),
    strokeDashOffset: _('domainDashOffset'),
    strokeWidth: _('domainWidth'),
    strokeOpacity: _('domainOpacity')
  });
  var pos0 = position(spec, 0);
  var pos1 = position(spec, 1);
  enter.x = update.x = ifX(orient, pos0, vega_parser_module_zero);
  enter.x2 = update.x2 = ifX(orient, pos1);
  enter.y = update.y = ifY(orient, pos0, vega_parser_module_zero);
  enter.y2 = update.y2 = ifY(orient, pos1);
  return guideMark({
    type: RuleMark,
    role: AxisDomainRole,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function position(spec, pos) {
  return {
    scale: spec.scale,
    range: pos
  };
}

function axisGrid(spec, config, userEncode, dataRef, band) {
  var _ = vega_parser_module_lookup(spec, config),
      orient = spec.orient,
      vscale = spec.gridScale,
      sign = getSign(orient, 1, -1),
      offset = vega_parser_module_offsetValue(spec.offset, sign);

  var enter, exit, update;
  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero
    },
    update: update = {
      opacity: vega_parser_module_one
    },
    exit: exit = {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    stroke: _('gridColor'),
    strokeCap: _('gridCap'),
    strokeDash: _('gridDash'),
    strokeDashOffset: _('gridDashOffset'),
    strokeOpacity: _('gridOpacity'),
    strokeWidth: _('gridWidth')
  });
  var tickPos = {
    scale: spec.scale,
    field: Value,
    band: band.band,
    extra: band.extra,
    offset: band.offset,
    round: _('tickRound')
  };
  var sz = ifX(orient, {
    signal: 'height'
  }, {
    signal: 'width'
  });
  var gridStart = vscale ? {
    scale: vscale,
    range: 0,
    mult: sign,
    offset: offset
  } : {
    value: 0,
    offset: offset
  };
  var gridEnd = vscale ? {
    scale: vscale,
    range: 1,
    mult: sign,
    offset: offset
  } : extend(sz, {
    mult: sign,
    offset: offset
  });
  enter.x = update.x = ifX(orient, tickPos, gridStart);
  enter.y = update.y = ifY(orient, tickPos, gridStart);
  enter.x2 = update.x2 = ifY(orient, gridEnd);
  enter.y2 = update.y2 = ifX(orient, gridEnd);
  exit.x = ifX(orient, tickPos);
  exit.y = ifY(orient, tickPos);
  return guideMark({
    type: RuleMark,
    role: AxisGridRole,
    key: Value,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function vega_parser_module_offsetValue(offset, sign) {
  if (sign === 1) ;else if (!isObject(offset)) {
    offset = isSignal(sign) ? {
      signal: "(".concat(sign.signal, ") * (").concat(offset || 0, ")")
    } : sign * (offset || 0);
  } else {
    var _entry = offset = extend({}, offset);

    while (_entry.mult != null) {
      if (!isObject(_entry.mult)) {
        _entry.mult = isSignal(sign) // no offset if sign === 1
        ? {
          signal: "(".concat(_entry.mult, ") * (").concat(sign.signal, ")")
        } : _entry.mult * sign;
        return offset;
      } else {
        _entry = _entry.mult = extend({}, _entry.mult);
      }
    }

    _entry.mult = sign;
  }
  return offset;
}

function axisTicks(spec, config, userEncode, dataRef, size, band) {
  var _ = vega_parser_module_lookup(spec, config),
      orient = spec.orient,
      sign = getSign(orient, -1, 1);

  var enter, exit, update;
  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero
    },
    update: update = {
      opacity: vega_parser_module_one
    },
    exit: exit = {
      opacity: vega_parser_module_zero
    }
  };
  addEncoders(encode, {
    stroke: _('tickColor'),
    strokeCap: _('tickCap'),
    strokeDash: _('tickDash'),
    strokeDashOffset: _('tickDashOffset'),
    strokeOpacity: _('tickOpacity'),
    strokeWidth: _('tickWidth')
  });
  var tickSize = encoder(size);
  tickSize.mult = sign;
  var tickPos = {
    scale: spec.scale,
    field: Value,
    band: band.band,
    extra: band.extra,
    offset: band.offset,
    round: _('tickRound')
  };
  update.y = enter.y = ifX(orient, vega_parser_module_zero, tickPos);
  update.y2 = enter.y2 = ifX(orient, tickSize);
  exit.x = ifX(orient, tickPos);
  update.x = enter.x = ifY(orient, vega_parser_module_zero, tickPos);
  update.x2 = enter.x2 = ifY(orient, tickSize);
  exit.y = ifY(orient, tickPos);
  return guideMark({
    type: RuleMark,
    role: AxisTickRole,
    key: Value,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function flushExpr(scale, threshold, a, b, c) {
  return {
    signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'
  };
}

function axisLabels(spec, config, userEncode, dataRef, size, band) {
  var _ = vega_parser_module_lookup(spec, config),
      orient = spec.orient,
      scale = spec.scale,
      sign = getSign(orient, -1, 1),
      flush = deref(_('labelFlush')),
      flushOffset = deref(_('labelFlushOffset')),
      labelAlign = _('labelAlign'),
      labelBaseline = _('labelBaseline');

  var flushOn = flush === 0 || !!flush,
      update;
  var tickSize = encoder(size);
  tickSize.mult = sign;
  tickSize.offset = encoder(_('labelPadding') || 0);
  tickSize.offset.mult = sign;
  var tickPos = {
    scale: scale,
    field: Value,
    band: 0.5,
    offset: extendOffset(band.offset, _('labelOffset'))
  };
  var align = ifX(orient, flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : {
    value: 'center'
  }, ifRight(orient, 'left', 'right'));
  var baseline = ifX(orient, ifTop(orient, 'bottom', 'top'), flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : {
    value: 'middle'
  });
  var offsetExpr = flushExpr(scale, flush, "-(".concat(flushOffset, ")"), flushOffset, 0);
  flushOn = flushOn && flushOffset;
  var enter = {
    opacity: vega_parser_module_zero,
    x: ifX(orient, tickPos, tickSize),
    y: ifY(orient, tickPos, tickSize)
  };
  var encode = {
    enter: enter,
    update: update = {
      opacity: vega_parser_module_one,
      text: {
        field: vega_parser_module_Label
      },
      x: enter.x,
      y: enter.y,
      align: align,
      baseline: baseline
    },
    exit: {
      opacity: vega_parser_module_zero,
      x: enter.x,
      y: enter.y
    }
  };
  addEncoders(encode, {
    dx: !labelAlign && flushOn ? ifX(orient, offsetExpr) : null,
    dy: !labelBaseline && flushOn ? ifY(orient, offsetExpr) : null
  });
  addEncoders(encode, {
    angle: _('labelAngle'),
    fill: _('labelColor'),
    fillOpacity: _('labelOpacity'),
    font: _('labelFont'),
    fontSize: _('labelFontSize'),
    fontWeight: _('labelFontWeight'),
    fontStyle: _('labelFontStyle'),
    limit: _('labelLimit'),
    lineHeight: _('labelLineHeight')
  }, {
    align: labelAlign,
    baseline: labelBaseline
  });

  var bound = _('labelBound');

  var overlap = _('labelOverlap'); // if overlap method or bound defined, request label overlap removal


  overlap = overlap || bound ? {
    separation: _('labelSeparation'),
    method: overlap,
    order: 'datum.index',
    bound: bound ? {
      scale: scale,
      orient: orient,
      tolerance: bound
    } : null
  } : undefined;

  if (update.align !== align) {
    update.align = patch(update.align, align);
  }

  if (update.baseline !== baseline) {
    update.baseline = patch(update.baseline, baseline);
  }

  return guideMark({
    type: TextMark,
    role: AxisLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: dataRef,
    encode: encode,
    overlap: overlap
  }, userEncode);
}

function axisTitle(spec, config, userEncode, dataRef) {
  var _ = vega_parser_module_lookup(spec, config),
      orient = spec.orient,
      sign = getSign(orient, -1, 1);

  var enter, update;
  var encode = {
    enter: enter = {
      opacity: vega_parser_module_zero,
      anchor: encoder(_('titleAnchor', null)),
      align: {
        signal: alignExpr
      }
    },
    update: update = extend({}, enter, {
      opacity: vega_parser_module_one,
      text: encoder(spec.title)
    }),
    exit: {
      opacity: vega_parser_module_zero
    }
  };
  var titlePos = {
    signal: "lerp(range(\"".concat(spec.scale, "\"), ").concat(anchorExpr(0, 1, 0.5), ")")
  };
  update.x = ifX(orient, titlePos);
  update.y = ifY(orient, titlePos);
  enter.angle = ifX(orient, vega_parser_module_zero, mult(sign, 90));
  enter.baseline = ifX(orient, ifTop(orient, vega_parser_module_Bottom, vega_parser_module_Top), {
    value: vega_parser_module_Bottom
  });
  update.angle = enter.angle;
  update.baseline = enter.baseline;
  addEncoders(encode, {
    fill: _('titleColor'),
    fillOpacity: _('titleOpacity'),
    font: _('titleFont'),
    fontSize: _('titleFontSize'),
    fontStyle: _('titleFontStyle'),
    fontWeight: _('titleFontWeight'),
    limit: _('titleLimit'),
    lineHeight: _('titleLineHeight')
  }, {
    // require update
    align: _('titleAlign'),
    angle: _('titleAngle'),
    baseline: _('titleBaseline')
  });
  autoLayout(_, orient, encode, userEncode);
  encode.update.align = patch(encode.update.align, enter.align);
  encode.update.angle = patch(encode.update.angle, enter.angle);
  encode.update.baseline = patch(encode.update.baseline, enter.baseline);
  return guideMark({
    type: TextMark,
    role: AxisTitleRole,
    style: GuideTitleStyle,
    from: dataRef,
    encode: encode
  }, userEncode);
}

function autoLayout(_, orient, encode, userEncode) {
  var auto = function auto(value, dim) {
    return value != null ? (encode.update[dim] = patch(encoder(value), encode.update[dim]), false) : !has(dim, userEncode) ? true : false;
  };

  var autoY = auto(_('titleX'), 'x'),
      autoX = auto(_('titleY'), 'y');
  encode.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient, encoder(autoX), encoder(autoY));
}

function parseAxis(spec, scope) {
  var config = axisConfig(spec, scope),
      encode = spec.encode || {},
      axisEncode = encode.axis || {},
      name = axisEncode.name || undefined,
      interactive = axisEncode.interactive,
      style = axisEncode.style,
      _ = vega_parser_module_lookup(spec, config),
      band = tickBand(_); // single-element data source for axis group


  var datum = {
    scale: spec.scale,
    ticks: !!_('ticks'),
    labels: !!_('labels'),
    grid: !!_('grid'),
    domain: !!_('domain'),
    title: spec.title != null
  };
  var dataRef = ref(scope.add(vega_parser_module_Collect({}, [datum]))); // data source for axis ticks

  var ticksRef = ref(scope.add(vega_parser_module_AxisTicks({
    scale: scope.scaleRef(spec.scale),
    extra: scope.property(band.extra),
    count: scope.objectProperty(spec.tickCount),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  }))); // generate axis marks

  var children = [];
  var size; // include axis gridlines if requested

  if (datum.grid) {
    children.push(axisGrid(spec, config, encode.grid, ticksRef, band));
  } // include axis ticks if requested


  if (datum.ticks) {
    size = _('tickSize');
    children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));
  } // include axis labels if requested


  if (datum.labels) {
    size = datum.ticks ? size : 0;
    children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));
  } // include axis domain path if requested


  if (datum.domain) {
    children.push(axisDomain(spec, config, encode.domain, dataRef));
  } // include axis title if defined


  if (datum.title) {
    children.push(axisTitle(spec, config, encode.title, dataRef));
  } // parse axis specification


  return parseMark(guideGroup({
    role: vega_parser_module_AxisRole,
    from: dataRef,
    encode: extendEncode(buildAxisEncode(_, spec), axisEncode, vega_parser_module_Skip),
    marks: children,
    aria: _('aria'),
    description: _('description'),
    zindex: _('zindex'),
    name: name,
    interactive: interactive,
    style: style
  }), scope);
}

function buildAxisEncode(_, spec) {
  var encode = {
    enter: {},
    update: {}
  };
  addEncoders(encode, {
    orient: _('orient'),
    offset: _('offset') || 0,
    position: vega_parser_module_value(spec.position, 0),
    titlePadding: _('titlePadding'),
    minExtent: _('minExtent'),
    maxExtent: _('maxExtent'),
    range: {
      signal: "abs(span(range(\"".concat(spec.scale, "\")))")
    },
    translate: _('translate'),
    // accessibility support
    format: spec.format,
    formatType: spec.formatType
  });
  return encode;
}

function parseScope(spec, scope, preprocessed) {
  var signals = array(spec.signals),
      scales = array(spec.scales); // parse signal definitions, if not already preprocessed

  if (!preprocessed) signals.forEach(function (_) {
    return parseSignal(_, scope);
  }); // parse cartographic projection definitions

  array(spec.projections).forEach(function (_) {
    return parseProjection(_, scope);
  }); // initialize scale references

  scales.forEach(function (_) {
    return initScale(_, scope);
  }); // parse data sources

  array(spec.data).forEach(function (_) {
    return parseData$1(_, scope);
  }); // parse scale definitions

  scales.forEach(function (_) {
    return parseScale(_, scope);
  }); // parse signal updates

  (preprocessed || signals).forEach(function (_) {
    return parseSignalUpdates(_, scope);
  }); // parse axis definitions

  array(spec.axes).forEach(function (_) {
    return parseAxis(_, scope);
  }); // parse mark definitions

  array(spec.marks).forEach(function (_) {
    return parseMark(_, scope);
  }); // parse legend definitions

  array(spec.legends).forEach(function (_) {
    return parseLegend(_, scope);
  }); // parse title, if defined

  if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions

  scope.parseLambdas();
  return scope;
}

var rootEncode = function rootEncode(spec) {
  return extendEncode({
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    },
    update: {
      width: {
        signal: 'width'
      },
      height: {
        signal: 'height'
      }
    }
  }, spec);
};

function parseView(spec, scope) {
  var config = scope.config; // add scenegraph root

  var root = ref(scope.root = scope.add(operator())); // parse top-level signal definitions

  var signals = collectSignals(spec, config);
  signals.forEach(function (_) {
    return parseSignal(_, scope);
  }); // assign description, event, legend, and locale configuration

  scope.description = spec.description || config.description;
  scope.eventConfig = config.events;
  scope.legends = scope.objectProperty(config.legend && config.legend.layout);
  scope.locale = config.locale; // store root group item

  var input = scope.add(vega_parser_module_Collect()); // encode root group item

  var encode = scope.add(vega_parser_module_Encode(parseEncode(rootEncode(spec.encode), GroupMark, vega_parser_module_FrameRole, spec.style, scope, {
    pulse: ref(input)
  }))); // perform view layout

  var parent = scope.add(vega_parser_module_ViewLayout({
    layout: scope.objectProperty(spec.layout),
    legends: scope.legends,
    autosize: scope.signalRef('autosize'),
    mark: root,
    pulse: ref(encode)
  }));
  scope.operators.pop(); // parse remainder of specification

  scope.pushState(ref(encode), ref(parent), null);
  parseScope(spec, scope, signals);
  scope.operators.push(parent); // bound / render / sieve root item

  var op = scope.add(vega_parser_module_Bound({
    mark: root,
    pulse: ref(parent)
  }));
  op = scope.add(vega_parser_module_Render({
    pulse: ref(op)
  }));
  op = scope.add(vega_parser_module_Sieve({
    pulse: ref(op)
  })); // track metadata for root item

  scope.addData('root', new DataScope(scope, input, input, op));
  return scope;
}

function signalObject(name, value) {
  return value && value.signal ? {
    name: name,
    update: value.signal
  } : {
    name: name,
    value: value
  };
}
/**
 * Collect top-level signals, merging values as needed. Signals
 * defined in the config signals arrays are added only if that
 * signal is not explicitly defined in the specification.
 * Built-in signals (autosize, background, padding, width, height)
 * receive special treatment. They are initialized using the
 * top-level spec property, or, if undefined in the spec, using
 * the corresponding top-level config property. If this property
 * is a signal reference object, the signal expression maps to the
 * signal 'update' property. If the spec's top-level signal array
 * contains an entry that matches a built-in signal, that entry
 * will be merged with the built-in specification, potentially
 * overwriting existing 'value' or 'update' properties.
 */


function collectSignals(spec, config) {
  var _ = function _(name) {
    return vega_parser_module_value(spec[name], config[name]);
  },
      signals = [signalObject('background', _('background')), signalObject('autosize', parseAutosize(_('autosize'))), signalObject('padding', parsePadding(_('padding'))), signalObject('width', _('width') || 0), signalObject('height', _('height') || 0)],
      pre = signals.reduce(function (p, s) {
    return p[s.name] = s, p;
  }, {}),
      map = {}; // add spec signal array


  array(spec.signals).forEach(function (s) {
    if (_has(pre, s.name)) {
      // merge if built-in signal
      s = extend(pre[s.name], s);
    } else {
      // otherwise add to signal list
      signals.push(s);
    }

    map[s.name] = s;
  }); // add config signal array

  array(config.signals).forEach(function (s) {
    if (!_has(map, s.name) && !_has(pre, s.name)) {
      // add to signal list if not already defined
      signals.push(s);
    }
  });
  return signals;
}

function Scope$1(config, options) {
  this.config = config || {};
  this.options = options || {};
  this.bindings = [];
  this.field = {};
  this.signals = {};
  this.lambdas = {};
  this.scales = {};
  this.events = {};
  this.data = {};
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this.eventConfig = null;
  this.locale = null;
  this._id = 0;
  this._subid = 0;
  this._nextsub = [0];
  this._parent = [];
  this._encode = [];
  this._lookup = [];
  this._markpath = [];
}

function Subscope(scope) {
  this.config = scope.config;
  this.options = scope.options;
  this.legends = scope.legends;
  this.field = Object.create(scope.field);
  this.signals = Object.create(scope.signals);
  this.lambdas = Object.create(scope.lambdas);
  this.scales = Object.create(scope.scales);
  this.events = Object.create(scope.events);
  this.data = Object.create(scope.data);
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this._id = 0;
  this._subid = ++scope._nextsub[0];
  this._nextsub = scope._nextsub;
  this._parent = scope._parent.slice();
  this._encode = scope._encode.slice();
  this._lookup = scope._lookup.slice();
  this._markpath = scope._markpath;
}

Scope$1.prototype = Subscope.prototype = {
  parse: function parse(spec) {
    return parseScope(spec, this);
  },
  fork: function fork() {
    return new Subscope(this);
  },
  isSubscope: function isSubscope() {
    return this._subid > 0;
  },
  toRuntime: function toRuntime() {
    this.finish();
    return {
      description: this.description,
      operators: this.operators,
      streams: this.streams,
      updates: this.updates,
      bindings: this.bindings,
      eventConfig: this.eventConfig,
      locale: this.locale
    };
  },
  id: function id() {
    return (this._subid ? this._subid + ':' : 0) + this._id++;
  },
  add: function add(op) {
    this.operators.push(op);
    op.id = this.id(); // if pre-registration references exist, resolve them now

    if (op.refs) {
      op.refs.forEach(function (ref) {
        ref.$ref = op.id;
      });
      op.refs = null;
    }

    return op;
  },
  proxy: function proxy(op) {
    var vref = op instanceof Entry ? ref(op) : op;
    return this.add(vega_parser_module_Proxy({
      value: vref
    }));
  },
  addStream: function addStream(stream) {
    this.streams.push(stream);
    stream.id = this.id();
    return stream;
  },
  addUpdate: function addUpdate(update) {
    this.updates.push(update);
    return update;
  },
  // Apply metadata
  finish: function finish() {
    var name, ds; // annotate root

    if (this.root) this.root.root = true; // annotate signals

    for (name in this.signals) {
      this.signals[name].signal = name;
    } // annotate scales


    for (name in this.scales) {
      this.scales[name].scale = name;
    } // annotate data sets


    function annotate(op, name, type) {
      var data, list;

      if (op) {
        data = op.data || (op.data = {});
        list = data[name] || (data[name] = []);
        list.push(type);
      }
    }

    for (name in this.data) {
      ds = this.data[name];
      annotate(ds.input, name, 'input');
      annotate(ds.output, name, 'output');
      annotate(ds.values, name, 'values');

      for (var _field in ds.index) {
        annotate(ds.index[_field], name, 'index:' + _field);
      }
    }

    return this;
  },
  // ----
  pushState: function pushState(encode, parent, lookup) {
    this._encode.push(ref(this.add(vega_parser_module_Sieve({
      pulse: encode
    }))));

    this._parent.push(parent);

    this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);

    this._markpath.push(-1);
  },
  popState: function popState() {
    this._encode.pop();

    this._parent.pop();

    this._lookup.pop();

    this._markpath.pop();
  },
  parent: function parent() {
    return peek(this._parent);
  },
  encode: function encode() {
    return peek(this._encode);
  },
  lookup: function lookup() {
    return peek(this._lookup);
  },
  markpath: function markpath() {
    var p = this._markpath;
    return ++p[p.length - 1];
  },
  // ----
  fieldRef: function fieldRef(field, name) {
    if (isString(field)) return _fieldRef(field, name);

    if (!field.signal) {
      error('Unsupported field reference: ' + $(field));
    }

    var s = field.signal;
    var f = this.field[s];

    if (!f) {
      var params = {
        name: this.signalRef(s)
      };
      if (name) params.as = name;
      this.field[s] = f = ref(this.add(vega_parser_module_Field(params)));
    }

    return f;
  },
  compareRef: function compareRef(cmp) {
    var _this = this;

    var signal = false;

    var check = function check(_) {
      return isSignal(_) ? (signal = true, _this.signalRef(_.signal)) : isExpr(_) ? (signal = true, _this.exprRef(_.expr)) : _;
    };

    var fields = array(cmp.field).map(check),
        orders = array(cmp.order).map(check);
    return signal ? ref(this.add(vega_parser_module_Compare({
      fields: fields,
      orders: orders
    }))) : _compareRef(fields, orders);
  },
  keyRef: function keyRef(fields, flat) {
    var signal = false;

    var check = function check(_) {
      return isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
    };

    var sig = this.signals;
    fields = array(fields).map(check);
    return signal ? ref(this.add(vega_parser_module_Key({
      fields: fields,
      flat: flat
    }))) : _keyRef(fields, flat);
  },
  sortRef: function sortRef(sort) {
    if (!sort) return sort; // including id ensures stable sorting

    var a = aggrField(sort.op, sort.field),
        o = sort.order || Ascending;
    return o.signal ? ref(this.add(vega_parser_module_Compare({
      fields: a,
      orders: this.signalRef(o.signal)
    }))) : _compareRef(a, o);
  },
  // ----
  event: function event(source, type) {
    var key = source + ':' + type;

    if (!this.events[key]) {
      var id = this.id();
      this.streams.push({
        id: id,
        source: source,
        type: type
      });
      this.events[key] = id;
    }

    return this.events[key];
  },
  // ----
  hasOwnSignal: function hasOwnSignal(name) {
    return _has(this.signals, name);
  },
  addSignal: function addSignal(name, value) {
    if (this.hasOwnSignal(name)) {
      error('Duplicate signal name: ' + $(name));
    }

    var op = value instanceof Entry ? value : this.add(operator(value));
    return this.signals[name] = op;
  },
  getSignal: function getSignal(name) {
    if (!this.signals[name]) {
      error('Unrecognized signal name: ' + $(name));
    }

    return this.signals[name];
  },
  signalRef: function signalRef(s) {
    if (this.signals[s]) {
      return ref(this.signals[s]);
    } else if (!_has(this.lambdas, s)) {
      this.lambdas[s] = this.add(operator(null));
    }

    return ref(this.lambdas[s]);
  },
  parseLambdas: function parseLambdas() {
    var code = Object.keys(this.lambdas);

    for (var i = 0, n = code.length; i < n; ++i) {
      var s = code[i],
          e = vega_functions_module_parser(s, this),
          op = this.lambdas[s];
      op.params = e.$params;
      op.update = e.$expr;
    }
  },
  property: function property(spec) {
    return spec && spec.signal ? this.signalRef(spec.signal) : spec;
  },
  objectProperty: function objectProperty(spec) {
    return !spec || !isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
  },
  exprRef: function exprRef(code, name) {
    var params = {
      expr: vega_functions_module_parser(code, this)
    };
    if (name) params.expr.$name = name;
    return ref(this.add(vega_parser_module_Expression(params)));
  },
  addBinding: function addBinding(name, bind) {
    if (!this.bindings) {
      error('Nested signals do not support binding: ' + $(name));
    }

    this.bindings.push(extend({
      signal: name
    }, bind));
  },
  // ----
  addScaleProj: function addScaleProj(name, transform) {
    if (_has(this.scales, name)) {
      error('Duplicate scale or projection name: ' + $(name));
    }

    this.scales[name] = this.add(transform);
  },
  addScale: function addScale(name, params) {
    this.addScaleProj(name, vega_parser_module_Scale(params));
  },
  addProjection: function addProjection(name, params) {
    this.addScaleProj(name, vega_parser_module_Projection(params));
  },
  getScale: function getScale(name) {
    if (!this.scales[name]) {
      error('Unrecognized scale name: ' + $(name));
    }

    return this.scales[name];
  },
  scaleRef: function scaleRef(name) {
    return ref(this.getScale(name));
  },
  scaleType: function scaleType(name) {
    return this.getScale(name).params.type;
  },
  projectionRef: function projectionRef(name) {
    return this.scaleRef(name);
  },
  projectionType: function projectionType(name) {
    return this.scaleType(name);
  },
  // ----
  addData: function addData(name, dataScope) {
    if (_has(this.data, name)) {
      error('Duplicate data set name: ' + $(name));
    }

    return this.data[name] = dataScope;
  },
  getData: function getData(name) {
    if (!this.data[name]) {
      error('Undefined data set name: ' + $(name));
    }

    return this.data[name];
  },
  addDataPipeline: function addDataPipeline(name, entries) {
    if (_has(this.data, name)) {
      error('Duplicate data set name: ' + $(name));
    }

    return this.addData(name, DataScope.fromEntries(this, entries));
  }
};

function propertyLambda(spec) {
  return (isArray(spec) ? arrayLambda : objectLambda)(spec);
}

function arrayLambda(array) {
  var n = array.length;
  var code = '[';

  for (var i = 0; i < n; ++i) {
    var _value = array[i];
    code += (i > 0 ? ',' : '') + (isObject(_value) ? _value.signal || propertyLambda(_value) : $(_value));
  }

  return code + ']';
}

function objectLambda(obj) {
  var code = '{',
      i = 0,
      key,
      value;

  for (key in obj) {
    value = obj[key];
    code += (++i > 1 ? ',' : '') + $(key) + ':' + (isObject(value) ? value.signal || propertyLambda(value) : $(value));
  }

  return code + '}';
}
/**
 * Standard configuration defaults for Vega specification parsing.
 * Users can provide their own (sub-)set of these default values
 * by passing in a config object to the top-level parse method.
 */


function defaults() {
  var defaultFont = 'sans-serif',
      defaultSymbolSize = 30,
      defaultStrokeWidth = 2,
      defaultColor = '#4c78a8',
      black = '#000',
      gray = '#888',
      lightGray = '#ddd';
  return {
    // default visualization description
    description: 'Vega visualization',
    // default padding around visualization
    padding: 0,
    // default for automatic sizing; options: 'none', 'pad', 'fit'
    // or provide an object (e.g., {'type': 'pad', 'resize': true})
    autosize: 'pad',
    // default view background color
    // covers the entire view component
    background: null,
    // default event handling configuration
    // preventDefault for view-sourced event types except 'wheel'
    events: {
      defaults: {
        allow: ['wheel']
      }
    },
    // defaults for top-level group marks
    // accepts mark properties (fill, stroke, etc)
    // covers the data rectangle within group width/height
    group: null,
    // defaults for basic mark types
    // each subset accepts mark properties (fill, stroke, etc)
    mark: null,
    arc: {
      fill: defaultColor
    },
    area: {
      fill: defaultColor
    },
    image: null,
    line: {
      stroke: defaultColor,
      strokeWidth: defaultStrokeWidth
    },
    path: {
      stroke: defaultColor
    },
    rect: {
      fill: defaultColor
    },
    rule: {
      stroke: black
    },
    shape: {
      stroke: defaultColor
    },
    symbol: {
      fill: defaultColor,
      size: 64
    },
    text: {
      fill: black,
      font: defaultFont,
      fontSize: 11
    },
    trail: {
      fill: defaultColor,
      size: defaultStrokeWidth
    },
    // style definitions
    style: {
      // axis & legend labels
      'guide-label': {
        fill: black,
        font: defaultFont,
        fontSize: 10
      },
      // axis & legend titles
      'guide-title': {
        fill: black,
        font: defaultFont,
        fontSize: 11,
        fontWeight: 'bold'
      },
      // headers, including chart title
      'group-title': {
        fill: black,
        font: defaultFont,
        fontSize: 13,
        fontWeight: 'bold'
      },
      // chart subtitle
      'group-subtitle': {
        fill: black,
        font: defaultFont,
        fontSize: 12
      },
      // defaults for styled point marks in Vega-Lite
      point: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: 'circle'
      },
      circle: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth
      },
      square: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: 'square'
      },
      // defaults for styled group marks in Vega-Lite
      cell: {
        fill: 'transparent',
        stroke: lightGray
      }
    },
    // defaults for title
    title: {
      orient: 'top',
      anchor: 'middle',
      offset: 4,
      subtitlePadding: 3
    },
    // defaults for axes
    axis: {
      minExtent: 0,
      maxExtent: 200,
      bandPosition: 0.5,
      domain: true,
      domainWidth: 1,
      domainColor: gray,
      grid: false,
      gridWidth: 1,
      gridColor: lightGray,
      labels: true,
      labelAngle: 0,
      labelLimit: 180,
      labelOffset: 0,
      labelPadding: 2,
      ticks: true,
      tickColor: gray,
      tickOffset: 0,
      tickRound: true,
      tickSize: 5,
      tickWidth: 1,
      titlePadding: 4
    },
    // correction for centering bias
    axisBand: {
      tickOffset: -0.5
    },
    // defaults for cartographic projection
    projection: {
      type: 'mercator'
    },
    // defaults for legends
    legend: {
      orient: 'right',
      padding: 0,
      gridAlign: 'each',
      columnPadding: 10,
      rowPadding: 2,
      symbolDirection: 'vertical',
      gradientDirection: 'vertical',
      gradientLength: 200,
      gradientThickness: 16,
      gradientStrokeColor: lightGray,
      gradientStrokeWidth: 0,
      gradientLabelOffset: 2,
      labelAlign: 'left',
      labelBaseline: 'middle',
      labelLimit: 160,
      labelOffset: 4,
      labelOverlap: true,
      symbolLimit: 30,
      symbolType: 'circle',
      symbolSize: 100,
      symbolOffset: 0,
      symbolStrokeWidth: 1.5,
      symbolBaseFillColor: 'transparent',
      symbolBaseStrokeColor: gray,
      titleLimit: 180,
      titleOrient: 'top',
      titlePadding: 5,
      layout: {
        offset: 18,
        direction: 'horizontal',
        left: {
          direction: 'vertical'
        },
        right: {
          direction: 'vertical'
        }
      }
    },
    // defaults for scale ranges
    range: {
      category: {
        scheme: 'tableau10'
      },
      ordinal: {
        scheme: 'blues'
      },
      heatmap: {
        scheme: 'yellowgreenblue'
      },
      ramp: {
        scheme: 'blues'
      },
      diverging: {
        scheme: 'blueorange',
        extent: [1, 0]
      },
      symbol: ['circle', 'square', 'triangle-up', 'cross', 'diamond', 'triangle-right', 'triangle-down', 'triangle-left']
    }
  };
}

function parse$1(spec, config, options) {
  if (!isObject(spec)) {
    error('Input Vega specification must be an object.');
  }

  config = mergeConfig(defaults(), config, spec.config);
  return parseView(spec, new Scope$1(config, options)).toRuntime();
}


;// CONCATENATED MODULE: ./node_modules/vega/build/vega.module.js




























var vega_module_name = "vega";
var version$1 = "5.20.2";
var description = "The Vega visualization grammar.";
var vega_module_keywords = ["vega", "visualization", "interaction", "dataflow", "library", "data", "d3"];
var license = "BSD-3-Clause";
var author = "UW Interactive Data Lab (http://idl.cs.washington.edu)";
var main = "build/vega-node.js";
var vega_module_module = "build/vega.module.js";
var unpkg = "build/vega.min.js";
var jsdelivr = "build/vega.min.js";
var types = "index.d.ts";
var repository = "vega/vega";
var scripts = {
  bundle: "rollup -c --config-bundle",
  prebuild: "rimraf build && rimraf build-es5",
  build: "rollup -c --config-core --config-bundle --config-ie",
  postbuild: "node schema-copy",
  pretest: "yarn build --config-test",
  test: "TZ=America/Los_Angeles tape 'test/**/*-test.js'",
  prepublishOnly: "yarn test && yarn build",
  postpublish: "./schema-deploy.sh"
};
var dependencies = {
  "vega-crossfilter": "~4.0.5",
  "vega-dataflow": "~5.7.4",
  "vega-encode": "~4.8.3",
  "vega-event-selector": "~2.0.6",
  "vega-expression": "~4.0.1",
  "vega-force": "~4.0.7",
  "vega-format": "~1.0.4",
  "vega-functions": "~5.12.0",
  "vega-geo": "~4.3.8",
  "vega-hierarchy": "~4.0.9",
  "vega-label": "~1.0.0",
  "vega-loader": "~4.4.0",
  "vega-parser": "~6.1.3",
  "vega-projection": "~1.4.5",
  "vega-regression": "~1.0.9",
  "vega-runtime": "~6.1.3",
  "vega-scale": "~7.1.1",
  "vega-scenegraph": "~4.9.4",
  "vega-statistics": "~1.7.9",
  "vega-time": "~2.0.4",
  "vega-transforms": "~4.9.4",
  "vega-typings": "~0.21.0",
  "vega-util": "~1.16.1",
  "vega-view": "~5.10.1",
  "vega-view-transforms": "~4.5.8",
  "vega-voronoi": "~4.1.5",
  "vega-wordcloud": "~4.1.3"
};
var devDependencies = {
  "vega-schema": "*"
};
var gitHead = "e251dbc61ab6645689d9f349e7dd9d15ddb85bce";
var pkg = {
  name: vega_module_name,
  version: version$1,
  description: description,
  keywords: vega_module_keywords,
  license: license,
  author: author,
  main: main,
  module: vega_module_module,
  unpkg: unpkg,
  jsdelivr: jsdelivr,
  types: types,
  repository: repository,
  scripts: scripts,
  dependencies: dependencies,
  devDependencies: devDependencies,
  gitHead: gitHead
}; // -- Transforms -----

extend(transforms, vega_transforms_module_namespaceObject, vega_view_transforms_module_namespaceObject, vega_encode_module_namespaceObject, vega_geo_module_namespaceObject, vega_force_module_namespaceObject, vega_label_module_namespaceObject, vega_hierarchy_module_namespaceObject, vega_regression_module_namespaceObject, vega_voronoi_module_namespaceObject, vega_wordcloud_module_namespaceObject, vega_crossfilter_module_namespaceObject); // -- Exports -----

var version = pkg.version;

;// CONCATENATED MODULE: ./node_modules/vega-lite/build/package.json
var package_namespaceObject = {"i8":"5.1.0"};
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.flat-map.js
var es_array_flat_map = __webpack_require__(86535);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.unscopables.flat-map.js
var es_array_unscopables_flat_map = __webpack_require__(99244);
;// CONCATENATED MODULE: ./node_modules/array-flat-polyfill/index.mjs



Array.prototype.flat || Object.defineProperty(Array.prototype, "flat", {
  configurable: !0,
  value: function r() {
    var t = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
    return t ? Array.prototype.reduce.call(this, function (a, e) {
      return Array.isArray(e) ? a.push.apply(a, r.call(e, t - 1)) : a.push(e), a;
    }, []) : Array.prototype.slice.call(this);
  },
  writable: !0
}), Array.prototype.flatMap || Object.defineProperty(Array.prototype, "flatMap", {
  configurable: !0,
  value: function value(r) {
    return Array.prototype.map.apply(this, arguments).flat();
  },
  writable: !0
});
// EXTERNAL MODULE: ./node_modules/clone/clone.js
var clone = __webpack_require__(53746);
var clone_default = /*#__PURE__*/__webpack_require__.n(clone);
// EXTERNAL MODULE: ./node_modules/fast-deep-equal/index.js
var fast_deep_equal = __webpack_require__(2412);
var fast_deep_equal_default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal);
// EXTERNAL MODULE: ./node_modules/fast-json-stable-stringify/index.js
var fast_json_stable_stringify = __webpack_require__(16726);
var fast_json_stable_stringify_default = /*#__PURE__*/__webpack_require__.n(fast_json_stable_stringify);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/logical.js
function logical_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = logical_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function logical_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return logical_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return logical_arrayLikeToArray(o, minLen); }

function logical_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function isLogicalOr(op) {
  return !!op.or;
}
function isLogicalAnd(op) {
  return !!op.and;
}
function isLogicalNot(op) {
  return !!op.not;
}
function forEachLeaf(op, fn) {
  if (isLogicalNot(op)) {
    forEachLeaf(op.not, fn);
  } else if (isLogicalAnd(op)) {
    var _iterator = logical_createForOfIteratorHelper(op.and),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var subop = _step.value;
        forEachLeaf(subop, fn);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else if (isLogicalOr(op)) {
    var _iterator2 = logical_createForOfIteratorHelper(op.or),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _subop = _step2.value;
        forEachLeaf(_subop, fn);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } else {
    fn(op);
  }
}
function normalizeLogicalComposition(op, normalizer) {
  if (isLogicalNot(op)) {
    return {
      not: normalizeLogicalComposition(op.not, normalizer)
    };
  } else if (isLogicalAnd(op)) {
    return {
      and: op.and.map(function (o) {
        return normalizeLogicalComposition(o, normalizer);
      })
    };
  } else if (isLogicalOr(op)) {
    return {
      or: op.or.map(function (o) {
        return normalizeLogicalComposition(o, normalizer);
      })
    };
  } else {
    return normalizer(op);
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/util.js




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function util_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = util_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function util_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return util_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return util_arrayLikeToArray(o, minLen); }

function util_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







var deepEqual = (fast_deep_equal_default());
var duplicate = (clone_default());
/**
 * Creates an object composed of the picked object properties.
 *
 * var object = {'a': 1, 'b': '2', 'c': 3};
 * pick(object, ['a', 'c']);
 * // → {'a': 1, 'c': 3}
 */
// eslint-disable-next-line @typescript-eslint/ban-types

function util_pick(obj, props) {
  var copy = {};

  var _iterator = util_createForOfIteratorHelper(props),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;

      if (_has(obj, prop)) {
        copy[prop] = obj[prop];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return copy;
}
/**
 * The opposite of _.pick; this method creates an object composed of the own
 * and inherited enumerable string keyed properties of object that are not omitted.
 */
// eslint-disable-next-line @typescript-eslint/ban-types

function omit(obj, props) {
  var copy = _objectSpread({}, obj);

  var _iterator2 = util_createForOfIteratorHelper(props),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var prop = _step2.value;
      delete copy[prop];
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return copy;
}
/**
 * Monkey patch Set so that `stringify` produces a string representation of sets.
 */

Set.prototype['toJSON'] = function () {
  return "Set(".concat((0,toConsumableArray/* default */.Z)(this).map(function (x) {
    return fast_json_stable_stringify_default()(x);
  }).join(','), ")");
};
/**
 * Converts any object to a string representation that can be consumed by humans.
 */


var stringify = (fast_json_stable_stringify_default());
/**
 * Converts any object to a string of limited size, or a number.
 */

function util_hash(a) {
  if (isNumber(a)) {
    return a;
  }

  var str = isString(a) ? a : fast_json_stable_stringify_default()(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage

  if (str.length < 250) {
    return str;
  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/


  var h = 0;

  for (var i = 0; i < str.length; i++) {
    var char = str.charCodeAt(i);
    h = (h << 5) - h + char;
    h = h & h; // Convert to 32bit integer
  }

  return h;
}
function isNullOrFalse(x) {
  return x === false || x === null;
}
function util_contains(array, item) {
  return array.includes(item);
}
/**
 * Returns true if any item returns true.
 */

function some(arr, f) {
  var i = 0;

  var _iterator3 = util_createForOfIteratorHelper(arr.entries()),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _step3$value = (0,slicedToArray/* default */.Z)(_step3.value, 2),
          k = _step3$value[0],
          a = _step3$value[1];

      if (f(a, k, i++)) {
        return true;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return false;
}
/**
 * Returns true if all items return true.
 */

function every(arr, f) {
  var i = 0;

  var _iterator4 = util_createForOfIteratorHelper(arr.entries()),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _step4$value = (0,slicedToArray/* default */.Z)(_step4.value, 2),
          k = _step4$value[0],
          a = _step4$value[1];

      if (!f(a, k, i++)) {
        return false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return true;
}
/**
 * recursively merges src into dest
 */

function mergeDeep(dest) {
  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    src[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _src = src; _i < _src.length; _i++) {
    var s = _src[_i];
    deepMerge_(dest, s !== null && s !== void 0 ? s : {});
  }

  return dest;
}

function deepMerge_(dest, src) {
  var _iterator5 = util_createForOfIteratorHelper(util_keys(src)),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var property = _step5.value;
      writeConfig(dest, property, src[property], true);
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
}

function unique(values, f) {
  var results = [];
  var u = {};
  var v;

  var _iterator6 = util_createForOfIteratorHelper(values),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var val = _step6.value;
      v = f(val);

      if (v in u) {
        continue;
      }

      u[v] = 1;
      results.push(val);
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return results;
}
/**
 * Returns true if the two dictionaries disagree. Applies only to defined values.
 */

function isEqual(dict, other) {
  var dictKeys = util_keys(dict);
  var otherKeys = util_keys(other);

  if (dictKeys.length !== otherKeys.length) {
    return false;
  }

  var _iterator7 = util_createForOfIteratorHelper(dictKeys),
      _step7;

  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var key = _step7.value;

      if (dict[key] !== other[key]) {
        return false;
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return true;
}
function setEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }

  var _iterator8 = util_createForOfIteratorHelper(a),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var e = _step8.value;

      if (!b.has(e)) {
        return false;
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  return true;
}
function hasIntersection(a, b) {
  var _iterator9 = util_createForOfIteratorHelper(a),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var key = _step9.value;

      if (b.has(key)) {
        return true;
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  return false;
}
function prefixGenerator(a) {
  var prefixes = new Set();

  var _iterator10 = util_createForOfIteratorHelper(a),
      _step10;

  try {
    var _loop = function _loop() {
      var x = _step10.value;
      var splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`

      var wrappedWithAccessors = splitField.map(function (y, i) {
        return i === 0 ? y : "[".concat(y, "]");
      });
      var computedPrefixes = wrappedWithAccessors.map(function (_, i) {
        return wrappedWithAccessors.slice(0, i + 1).join('');
      });

      var _iterator11 = util_createForOfIteratorHelper(computedPrefixes),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var y = _step11.value;
          prefixes.add(y);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    };

    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  return prefixes;
}
/**
 * Returns true if a and b have an intersection. Also return true if a or b are undefined
 * since this means we don't know what fields a node produces or depends on.
 */

function fieldIntersection(a, b) {
  if (a === undefined || b === undefined) {
    return true;
  }

  return hasIntersection(prefixGenerator(a), prefixGenerator(b));
} // eslint-disable-next-line @typescript-eslint/ban-types

function isEmpty(obj) {
  return util_keys(obj).length === 0;
} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208

var util_keys = Object.keys;
var vals = Object.values;
var entries = Object.entries;
function util_isBoolean(b) {
  return b === true || b === false;
}
/**
 * Convert a string into a valid variable name
 */

function varName(s) {
  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
  var alphanumericS = s.replace(/\W/g, '_'); // Add _ if the string has leading numbers.

  return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
}
function logicalExpr(op, cb) {
  if (isLogicalNot(op)) {
    return "!(".concat(logicalExpr(op.not, cb), ")");
  } else if (isLogicalAnd(op)) {
    return "(".concat(op.and.map(function (and) {
      return logicalExpr(and, cb);
    }).join(') && ('), ")");
  } else if (isLogicalOr(op)) {
    return "(".concat(op.or.map(function (or) {
      return logicalExpr(or, cb);
    }).join(') || ('), ")");
  } else {
    return cb(op);
  }
}
/**
 * Delete nested property of an object, and delete the ancestors of the property if they become empty.
 */

function deleteNestedProperty(obj, orderedProps) {
  if (orderedProps.length === 0) {
    return true;
  }

  var prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion

  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {
    delete obj[prop];
  }

  return isEmpty(obj);
}
function titleCase(s) {
  return s.charAt(0).toUpperCase() + s.substr(1);
}
/**
 * Converts a path to an access path with datum.
 * @param path The field name.
 * @param datum The string to use for `datum`.
 */

function accessPathWithDatum(path) {
  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';
  var pieces = splitAccessPath(path);
  var prefixes = [];

  for (var i = 1; i <= pieces.length; i++) {
    var prefix = "[".concat(pieces.slice(0, i).map($).join(']['), "]");
    prefixes.push("".concat(datum).concat(prefix));
  }

  return prefixes.join(' && ');
}
/**
 * Return access with datum to the flattened field.
 *
 * @param path The field name.
 * @param datum The string to use for `datum`.
 */

function flatAccessWithDatum(path) {
  var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';
  return "".concat(datum, "[").concat($(splitAccessPath(path).join('.')), "]");
}

function escapePathAccess(string) {
  return string.replace(/(\[|\]|\.|'|")/g, '\\$1');
}
/**
 * Replaces path accesses with access to non-nested field.
 * For example, `foo["bar"].baz` becomes `foo\\.bar\\.baz`.
 */


function replacePathInField(path) {
  return "".concat(splitAccessPath(path).map(escapePathAccess).join('\\.'));
}
/**
 * Replace all occurrences of a string with another string.
 *
 * @param string the string to replace in
 * @param find the string to replace
 * @param replacement the replacement
 */

function replaceAll(string, find, replacement) {
  return string.replace(new RegExp(find.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'g'), replacement);
}
/**
 * Remove path accesses with access from field.
 * For example, `foo["bar"].baz` becomes `foo.bar.baz`.
 */

function removePathFromField(path) {
  return "".concat(splitAccessPath(path).join('.'));
}
/**
 * Count the depth of the path. Returns 1 for fields that are not nested.
 */

function accessPathDepth(path) {
  if (!path) {
    return 0;
  }

  return splitAccessPath(path).length;
}
/**
 * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.
 */

function getFirstDefined() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  for (var _i2 = 0, _args = args; _i2 < _args.length; _i2++) {
    var arg = _args[_i2];

    if (arg !== undefined) {
      return arg;
    }
  }

  return undefined;
} // variable used to generate id

var idCounter = 42;
/**
 * Returns a new random id every time it gets called.
 *
 * Has side effect!
 */

function uniqueId(prefix) {
  var id = ++idCounter;
  return prefix ? String(prefix) + id : id;
}
/**
 * Resets the id counter used in uniqueId. This can be useful for testing.
 */

function resetIdCounter() {
  idCounter = 42;
}
function internalField(name) {
  return isInternalField(name) ? name : "__".concat(name);
}
function isInternalField(name) {
  return name.startsWith('__');
}
/**
 * Normalize angle to be within [0,360).
 */

function normalizeAngle(angle) {
  if (angle === undefined) {
    return undefined;
  }

  return (angle % 360 + 360) % 360;
}
/**
 * Returns whether the passed in value is a valid number.
 */

function isNumeric(value) {
  if (isNumber(value)) {
    return true;
  }

  return !isNaN(value) && !isNaN(parseFloat(value));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/channel.js



function channel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function channel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { channel_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { channel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/*
 * Constants and utilities for encoding channels (Visual variables)
 * such as 'x', 'y', 'color'.
 */
 // Facet

var ROW = 'row';
var COLUMN = 'column';
var FACET = 'facet'; // Position

var channel_X = 'x';
var channel_Y = 'y';
var channel_X2 = 'x2';
var channel_Y2 = 'y2'; // Arc-Position

var RADIUS = 'radius';
var RADIUS2 = 'radius2';
var THETA = 'theta';
var THETA2 = 'theta2'; // Geo Position

var LATITUDE = 'latitude';
var LONGITUDE = 'longitude';
var LATITUDE2 = 'latitude2';
var LONGITUDE2 = 'longitude2'; // Mark property with scale

var COLOR = 'color';
var FILL = 'fill';
var STROKE = 'stroke';
var SHAPE = 'shape';
var channel_SIZE = 'size';
var ANGLE = 'angle';
var OPACITY = 'opacity';
var FILLOPACITY = 'fillOpacity';
var STROKEOPACITY = 'strokeOpacity';
var STROKEWIDTH = 'strokeWidth';
var STROKEDASH = 'strokeDash'; // Non-scale channel

var TEXT = 'text';
var ORDER = 'order';
var DETAIL = 'detail';
var KEY = 'key';
var TOOLTIP = 'tooltip';
var HREF = 'href';
var channel_URL = 'url';
var DESCRIPTION = 'description';
var POSITION_CHANNEL_INDEX = {
  x: 1,
  y: 1,
  x2: 1,
  y2: 1
};
var POLAR_POSITION_CHANNEL_INDEX = {
  theta: 1,
  theta2: 1,
  radius: 1,
  radius2: 1
};
function isPolarPositionChannel(c) {
  return c in POLAR_POSITION_CHANNEL_INDEX;
}
var GEO_POSIITON_CHANNEL_INDEX = {
  longitude: 1,
  longitude2: 1,
  latitude: 1,
  latitude2: 1
};
function getPositionChannelFromLatLong(channel) {
  switch (channel) {
    case LATITUDE:
      return 'y';

    case LATITUDE2:
      return 'y2';

    case LONGITUDE:
      return 'x';

    case LONGITUDE2:
      return 'x2';
  }
}
function isGeoPositionChannel(c) {
  return c in GEO_POSIITON_CHANNEL_INDEX;
}
var GEOPOSITION_CHANNELS = util_keys(GEO_POSIITON_CHANNEL_INDEX);

var UNIT_CHANNEL_INDEX = channel_objectSpread(channel_objectSpread(channel_objectSpread(channel_objectSpread({}, POSITION_CHANNEL_INDEX), POLAR_POSITION_CHANNEL_INDEX), GEO_POSIITON_CHANNEL_INDEX), {}, {
  // color
  color: 1,
  fill: 1,
  stroke: 1,
  // other non-position with scale
  opacity: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  strokeWidth: 1,
  strokeDash: 1,
  size: 1,
  angle: 1,
  shape: 1,
  // channels without scales
  order: 1,
  text: 1,
  detail: 1,
  key: 1,
  tooltip: 1,
  href: 1,
  url: 1,
  description: 1
});

function isColorChannel(channel) {
  return channel === COLOR || channel === FILL || channel === STROKE;
}
var FACET_CHANNEL_INDEX = {
  row: 1,
  column: 1,
  facet: 1
};
var FACET_CHANNELS = util_keys(FACET_CHANNEL_INDEX);

var CHANNEL_INDEX = channel_objectSpread(channel_objectSpread({}, UNIT_CHANNEL_INDEX), FACET_CHANNEL_INDEX);

var CHANNELS = util_keys(CHANNEL_INDEX);

var _o = CHANNEL_INDEX.order,
    _d = CHANNEL_INDEX.detail,
    _tt1 = CHANNEL_INDEX.tooltip,
    SINGLE_DEF_CHANNEL_INDEX = (0,objectWithoutProperties/* default */.Z)(CHANNEL_INDEX, ["order", "detail", "tooltip"]);

var _r = SINGLE_DEF_CHANNEL_INDEX.row,
    _c = SINGLE_DEF_CHANNEL_INDEX.column,
    _f = SINGLE_DEF_CHANNEL_INDEX.facet,
    SINGLE_DEF_UNIT_CHANNEL_INDEX = (0,objectWithoutProperties/* default */.Z)(SINGLE_DEF_CHANNEL_INDEX, ["row", "column", "facet"]);
/**
 * Channels that cannot have an array of channelDef.
 * model.fieldDef, getFieldDef only work for these channels.
 *
 * (The only two channels that can have an array of channelDefs are "detail" and "order".
 * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef
 * are not applicable for them. Similarly, selection projection won't work with "detail" and "order".)
 */


var SINGLE_DEF_CHANNELS = util_keys(SINGLE_DEF_CHANNEL_INDEX);
var SINGLE_DEF_UNIT_CHANNELS = util_keys(SINGLE_DEF_UNIT_CHANNEL_INDEX);
function isSingleDefUnitChannel(str) {
  return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
}
function isChannel(str) {
  return !!CHANNEL_INDEX[str];
}
var SECONDARY_RANGE_CHANNEL = [channel_X2, channel_Y2, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];
function isSecondaryRangeChannel(c) {
  var main = getMainRangeChannel(c);
  return main !== c;
}
/**
 * Get the main channel for a range channel. E.g. `x` for `x2`.
 */

function getMainRangeChannel(channel) {
  switch (channel) {
    case channel_X2:
      return channel_X;

    case channel_Y2:
      return channel_Y;

    case LATITUDE2:
      return LATITUDE;

    case LONGITUDE2:
      return LONGITUDE;

    case THETA2:
      return THETA;

    case RADIUS2:
      return RADIUS;
  }

  return channel;
}
function getVgPositionChannel(channel) {
  if (isPolarPositionChannel(channel)) {
    switch (channel) {
      case THETA:
        return 'startAngle';

      case THETA2:
        return 'endAngle';

      case RADIUS:
        return 'outerRadius';

      case RADIUS2:
        return 'innerRadius';
    }
  }

  return channel;
}
/**
 * Get the main channel for a range channel. E.g. `x` for `x2`.
 */

function getSecondaryRangeChannel(channel) {
  switch (channel) {
    case channel_X:
      return channel_X2;

    case channel_Y:
      return channel_Y2;

    case LATITUDE:
      return LATITUDE2;

    case LONGITUDE:
      return LONGITUDE2;

    case THETA:
      return THETA2;

    case RADIUS:
      return RADIUS2;
  }

  return undefined;
}
function getSizeChannel(channel) {
  switch (channel) {
    case channel_X:
    case channel_X2:
      return 'width';

    case channel_Y:
    case channel_Y2:
      return 'height';
  }

  return undefined;
}
/**
 * Get the main channel for a range channel. E.g. `x` for `x2`.
 */

function getOffsetChannel(channel) {
  switch (channel) {
    case channel_X:
      return 'xOffset';

    case channel_Y:
      return 'yOffset';

    case channel_X2:
      return 'x2Offset';

    case channel_Y2:
      return 'y2Offset';

    case THETA:
      return 'thetaOffset';

    case RADIUS:
      return 'radiusOffset';

    case THETA2:
      return 'theta2Offset';

    case RADIUS2:
      return 'radius2Offset';
  }

  return undefined;
} // CHANNELS without COLUMN, ROW

var UNIT_CHANNELS = util_keys(UNIT_CHANNEL_INDEX); // NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;

var _x = UNIT_CHANNEL_INDEX.x,
    _y = UNIT_CHANNEL_INDEX.y,
    _x2 = UNIT_CHANNEL_INDEX.x2,
    _y2 = UNIT_CHANNEL_INDEX.y2,
    _latitude = UNIT_CHANNEL_INDEX.latitude,
    _longitude = UNIT_CHANNEL_INDEX.longitude,
    _latitude2 = UNIT_CHANNEL_INDEX.latitude2,
    _longitude2 = UNIT_CHANNEL_INDEX.longitude2,
    _theta = UNIT_CHANNEL_INDEX.theta,
    _theta2 = UNIT_CHANNEL_INDEX.theta2,
    _radius = UNIT_CHANNEL_INDEX.radius,
    _radius2 = UNIT_CHANNEL_INDEX.radius2,
    NONPOSITION_CHANNEL_INDEX = (0,objectWithoutProperties/* default */.Z)(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "latitude", "longitude", "latitude2", "longitude2", "theta", "theta2", "radius", "radius2"]);

var NONPOSITION_CHANNELS = util_keys(NONPOSITION_CHANNEL_INDEX);
var POSITION_SCALE_CHANNEL_INDEX = {
  x: 1,
  y: 1
};
var POSITION_SCALE_CHANNELS = util_keys(POSITION_SCALE_CHANNEL_INDEX);
function isXorY(channel) {
  return channel in POSITION_SCALE_CHANNEL_INDEX;
}
var POLAR_POSITION_SCALE_CHANNEL_INDEX = {
  theta: 1,
  radius: 1
};
var POLAR_POSITION_SCALE_CHANNELS = util_keys(POLAR_POSITION_SCALE_CHANNEL_INDEX);
function getPositionScaleChannel(sizeType) {
  return sizeType === 'width' ? channel_X : channel_Y;
} // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y

var _t = NONPOSITION_CHANNEL_INDEX.text,
    _tt = NONPOSITION_CHANNEL_INDEX.tooltip,
    _hr = NONPOSITION_CHANNEL_INDEX.href,
    _u = NONPOSITION_CHANNEL_INDEX.url,
    _al = NONPOSITION_CHANNEL_INDEX.description,
    _dd = NONPOSITION_CHANNEL_INDEX.detail,
    _k = NONPOSITION_CHANNEL_INDEX.key,
    _oo = NONPOSITION_CHANNEL_INDEX.order,
    NONPOSITION_SCALE_CHANNEL_INDEX = (0,objectWithoutProperties/* default */.Z)(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "url", "description", "detail", "key", "order"]);

var NONPOSITION_SCALE_CHANNELS = util_keys(NONPOSITION_SCALE_CHANNEL_INDEX);
function isNonPositionScaleChannel(channel) {
  return !!NONPOSITION_CHANNEL_INDEX[channel];
}
/**
 * @returns whether Vega supports legends for a particular channel
 */

function supportLegend(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE:
    case channel_SIZE:
    case SHAPE:
    case OPACITY:
    case STROKEWIDTH:
    case STROKEDASH:
      return true;

    case FILLOPACITY:
    case STROKEOPACITY:
    case ANGLE:
      return false;
  }
} // Declare SCALE_CHANNEL_INDEX

var SCALE_CHANNEL_INDEX = channel_objectSpread(channel_objectSpread(channel_objectSpread({}, POSITION_SCALE_CHANNEL_INDEX), POLAR_POSITION_SCALE_CHANNEL_INDEX), NONPOSITION_SCALE_CHANNEL_INDEX);
/** List of channels with scales */


var SCALE_CHANNELS = util_keys(SCALE_CHANNEL_INDEX);
function isScaleChannel(channel) {
  return !!SCALE_CHANNEL_INDEX[channel];
}
/**
 * Return whether a channel supports a particular mark type.
 * @param channel  channel name
 * @param mark the mark type
 * @return whether the mark supports the channel
 */

function supportMark(channel, mark) {
  return getSupportedMark(channel)[mark];
}
var ALL_MARKS = {
  // all marks
  arc: 'always',
  area: 'always',
  bar: 'always',
  circle: 'always',
  geoshape: 'always',
  image: 'always',
  line: 'always',
  rule: 'always',
  point: 'always',
  rect: 'always',
  square: 'always',
  trail: 'always',
  text: 'always',
  tick: 'always'
};

var _g = ALL_MARKS.geoshape,
    ALL_MARKS_EXCEPT_GEOSHAPE = (0,objectWithoutProperties/* default */.Z)(ALL_MARKS, ["geoshape"]);
/**
 * Return a dictionary showing whether a channel supports mark type.
 * @param channel
 * @return A dictionary mapping mark types to 'always', 'binned', or undefined
 */


function getSupportedMark(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE: // falls through

    case DESCRIPTION:
    case DETAIL:
    case KEY:
    case TOOLTIP:
    case HREF:
    case ORDER: // TODO: revise (order might not support rect, which is not stackable?)

    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case STROKEWIDTH: // falls through

    case FACET:
    case ROW: // falls through

    case COLUMN:
      return ALL_MARKS;

    case channel_X:
    case channel_Y:
    case LATITUDE:
    case LONGITUDE:
      // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
      return ALL_MARKS_EXCEPT_GEOSHAPE;

    case channel_X2:
    case channel_Y2:
    case LATITUDE2:
    case LONGITUDE2:
      return {
        area: 'always',
        bar: 'always',
        image: 'always',
        rect: 'always',
        rule: 'always',
        circle: 'binned',
        point: 'binned',
        square: 'binned',
        tick: 'binned',
        line: 'binned',
        trail: 'binned'
      };

    case channel_SIZE:
      return {
        point: 'always',
        tick: 'always',
        rule: 'always',
        circle: 'always',
        square: 'always',
        bar: 'always',
        text: 'always',
        line: 'always',
        trail: 'always'
      };

    case STROKEDASH:
      return {
        line: 'always',
        point: 'always',
        tick: 'always',
        rule: 'always',
        circle: 'always',
        square: 'always',
        bar: 'always',
        geoshape: 'always'
      };

    case SHAPE:
      return {
        point: 'always',
        geoshape: 'always'
      };

    case TEXT:
      return {
        text: 'always'
      };

    case ANGLE:
      return {
        point: 'always',
        square: 'always',
        text: 'always'
      };

    case channel_URL:
      return {
        image: 'always'
      };

    case THETA:
      return {
        text: 'always',
        arc: 'always'
      };

    case RADIUS:
      return {
        text: 'always',
        arc: 'always'
      };

    case THETA2:
    case RADIUS2:
      return {
        arc: 'always'
      };
  }
}

function rangeType(channel) {
  switch (channel) {
    case channel_X:
    case channel_Y:
    case THETA:
    case RADIUS:
    case channel_SIZE:
    case ANGLE:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY: // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]

    case channel_X2:
    case channel_Y2:
    case THETA2:
    case RADIUS2:
      return undefined;

    case FACET:
    case ROW:
    case COLUMN:
    case SHAPE:
    case STROKEDASH: // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]

    case TEXT:
    case TOOLTIP:
    case HREF:
    case channel_URL:
    case DESCRIPTION:
      return 'discrete';
    // Color can be either continuous or discrete, depending on scale type.

    case COLOR:
    case FILL:
    case STROKE:
      return 'flexible';
    // No scale, no range type.

    case LATITUDE:
    case LONGITUDE:
    case LATITUDE2:
    case LONGITUDE2:
    case DETAIL:
    case KEY:
    case ORDER:
      return undefined;
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/aggregate.js


var AGGREGATE_OP_INDEX = {
  argmax: 1,
  argmin: 1,
  average: 1,
  count: 1,
  distinct: 1,
  product: 1,
  max: 1,
  mean: 1,
  median: 1,
  min: 1,
  missing: 1,
  q1: 1,
  q3: 1,
  ci0: 1,
  ci1: 1,
  stderr: 1,
  stdev: 1,
  stdevp: 1,
  sum: 1,
  valid: 1,
  values: 1,
  variance: 1,
  variancep: 1
};
var MULTIDOMAIN_SORT_OP_INDEX = {
  count: 1,
  min: 1,
  max: 1
};
function isArgminDef(a) {
  return !!a && !!a['argmin'];
}
function isArgmaxDef(a) {
  return !!a && !!a['argmax'];
}
var AGGREGATE_OPS = util_keys(AGGREGATE_OP_INDEX);
function isAggregateOp(a) {
  return isString(a) && !!AGGREGATE_OP_INDEX[a];
}
var COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
function isCountingAggregateOp(aggregate) {
  return isString(aggregate) && util_contains(COUNTING_OPS, aggregate);
}
function isMinMaxOp(aggregate) {
  return isString(aggregate) && util_contains(['min', 'max'], aggregate);
}
/** Additive-based aggregation operations. These can be applied to stack. */

var SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];
/**
 * Aggregation operators that always produce values within the range [domainMin, domainMax].
 */

var SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];
var SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/bin.js




/**
 * Create a key for the bin configuration. Not for prebinned bin.
 */

function binToString(bin) {
  if (isBoolean(bin)) {
    bin = normalizeBin(bin, undefined);
  }

  return 'bin' + util_keys(bin).map(function (p) {
    return isParameterExtent(bin[p]) ? varName("_".concat(p, "_").concat(entries(bin[p]))) : varName("_".concat(p, "_").concat(bin[p]));
  }).join('');
}
/**
 * Vega-Lite should bin the data.
 */

function isBinning(bin) {
  return bin === true || isBinParams(bin) && !bin.binned;
}
/**
 * The data is already binned and so Vega-Lite should not bin it again.
 */

function isBinned(bin) {
  return bin === 'binned' || isBinParams(bin) && bin.binned === true;
}
function isBinParams(bin) {
  return isObject(bin);
}
function isParameterExtent(extent) {
  return extent === null || extent === void 0 ? void 0 : extent['param'];
}
function autoMaxBins(channel) {
  switch (channel) {
    case ROW:
    case COLUMN:
    case channel_SIZE:
    case COLOR:
    case FILL:
    case STROKE:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY: // Facets and Size shouldn't have too many bins
    // We choose 6 like shape to simplify the rule [falls through]

    case SHAPE:
      return 6;
    // Vega's "shape" has 6 distinct values

    case STROKEDASH:
      return 4;
    // We only provide 5 different stroke dash values (but 4 is more effective)

    default:
      return 10;
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/expr.js
function expr_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = expr_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function expr_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return expr_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return expr_arrayLikeToArray(o, minLen); }

function expr_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function isExprRef(o) {
  return o && !!o['expr'];
}
function replaceExprRef(index) {
  var props = util_keys(index || {});
  var newIndex = {};

  var _iterator = expr_createForOfIteratorHelper(props),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;
      newIndex[prop] = signalRefOrValue(index[prop]);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return newIndex;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/title.js


var _excluded = ["anchor", "frame", "offset", "orient", "color", "subtitleColor", "subtitleFont", "subtitleFontSize", "subtitleFontStyle", "subtitleFontWeight", "subtitleLineHeight", "subtitlePadding"];

function title_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function title_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { title_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { title_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



function extractTitleConfig(titleConfig) {
  var anchor = titleConfig.anchor,
      frame = titleConfig.frame,
      offset = titleConfig.offset,
      orient = titleConfig.orient,
      color = titleConfig.color,
      subtitleColor = titleConfig.subtitleColor,
      subtitleFont = titleConfig.subtitleFont,
      subtitleFontSize = titleConfig.subtitleFontSize,
      subtitleFontStyle = titleConfig.subtitleFontStyle,
      subtitleFontWeight = titleConfig.subtitleFontWeight,
      subtitleLineHeight = titleConfig.subtitleLineHeight,
      subtitlePadding = titleConfig.subtitlePadding,
      rest = (0,objectWithoutProperties/* default */.Z)(titleConfig, _excluded);

  var titleMarkConfig = title_objectSpread(title_objectSpread({}, rest), color ? {
    fill: color
  } : {}); // These are non-mark title config that need to be hardcoded


  var nonMark = title_objectSpread(title_objectSpread(title_objectSpread(title_objectSpread({}, anchor ? {
    anchor: anchor
  } : {}), frame ? {
    frame: frame
  } : {}), offset ? {
    offset: offset
  } : {}), orient ? {
    orient: orient
  } : {}); // subtitle part can stay in config.title since header titles do not use subtitle


  var subtitle = title_objectSpread(title_objectSpread(title_objectSpread(title_objectSpread(title_objectSpread(title_objectSpread(title_objectSpread({}, subtitleColor ? {
    subtitleColor: subtitleColor
  } : {}), subtitleFont ? {
    subtitleFont: subtitleFont
  } : {}), subtitleFontSize ? {
    subtitleFontSize: subtitleFontSize
  } : {}), subtitleFontStyle ? {
    subtitleFontStyle: subtitleFontStyle
  } : {}), subtitleFontWeight ? {
    subtitleFontWeight: subtitleFontWeight
  } : {}), subtitleLineHeight ? {
    subtitleLineHeight: subtitleLineHeight
  } : {}), subtitlePadding ? {
    subtitlePadding: subtitlePadding
  } : {});

  var subtitleMarkConfig = util_pick(titleMarkConfig, ['align', 'baseline', 'dx', 'dy', 'limit']);
  return {
    titleMarkConfig: titleMarkConfig,
    subtitleMarkConfig: subtitleMarkConfig,
    nonMark: nonMark,
    subtitle: subtitle
  };
}
function isText(v) {
  return isString(v) || isArray(v) && isString(v[0]);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/vega.schema.js


function isSignalRef(o) {
  return o && !!o['signal'];
}
function isVgRangeStep(range) {
  return !!range['step'];
}
function isDataRefUnionedDomain(domain) {
  if (!isArray(domain)) {
    return 'fields' in domain && !('data' in domain);
  }

  return false;
}
function isFieldRefUnionDomain(domain) {
  if (!isArray(domain)) {
    return 'fields' in domain && 'data' in domain;
  }

  return false;
}
function isDataRefDomain(domain) {
  if (!isArray(domain)) {
    return 'field' in domain && 'data' in domain;
  }

  return false;
}
var VG_MARK_CONFIG_INDEX = {
  aria: 1,
  description: 1,
  ariaRole: 1,
  ariaRoleDescription: 1,
  blend: 1,
  opacity: 1,
  fill: 1,
  fillOpacity: 1,
  stroke: 1,
  strokeCap: 1,
  strokeWidth: 1,
  strokeOpacity: 1,
  strokeDash: 1,
  strokeDashOffset: 1,
  strokeJoin: 1,
  strokeOffset: 1,
  strokeMiterLimit: 1,
  startAngle: 1,
  endAngle: 1,
  padAngle: 1,
  innerRadius: 1,
  outerRadius: 1,
  size: 1,
  shape: 1,
  interpolate: 1,
  tension: 1,
  orient: 1,
  align: 1,
  baseline: 1,
  text: 1,
  dir: 1,
  dx: 1,
  dy: 1,
  ellipsis: 1,
  limit: 1,
  radius: 1,
  theta: 1,
  angle: 1,
  font: 1,
  fontSize: 1,
  fontWeight: 1,
  fontStyle: 1,
  lineBreak: 1,
  lineHeight: 1,
  cursor: 1,
  href: 1,
  tooltip: 1,
  cornerRadius: 1,
  cornerRadiusTopLeft: 1,
  cornerRadiusTopRight: 1,
  cornerRadiusBottomLeft: 1,
  cornerRadiusBottomRight: 1,
  aspect: 1,
  width: 1,
  height: 1,
  url: 1,
  smooth: 1 // commented below are vg channel that do not have mark config.
  // x: 1,
  // y: 1,
  // x2: 1,
  // y2: 1,
  // xc'|'yc'
  // clip: 1,
  // path: 1,
  // url: 1,

};
var VG_MARK_CONFIGS = util_keys(VG_MARK_CONFIG_INDEX);
var VG_MARK_INDEX = {
  arc: 1,
  area: 1,
  group: 1,
  image: 1,
  line: 1,
  path: 1,
  rect: 1,
  rule: 1,
  shape: 1,
  symbol: 1,
  text: 1,
  trail: 1
}; // Vega's cornerRadius channels.

var VG_CORNERRADIUS_CHANNELS = ['cornerRadius', 'cornerRadiusTopLeft', 'cornerRadiusTopRight', 'cornerRadiusBottomLeft', 'cornerRadiusBottomRight'];
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/common.js



var common_excluded = ["expr"],
    _excluded2 = ["expr"],
    _excluded3 = ["expr"];

function common_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = common_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function common_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return common_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return common_arrayLikeToArray(o, minLen); }

function common_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function common_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function common_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { common_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { common_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var BIN_RANGE_DELIMITER = " \u2013 ";
function signalOrValueRefWithCondition(val) {
  var condition = isArray(val.condition) ? val.condition.map(conditionalSignalRefOrValue) : conditionalSignalRefOrValue(val.condition);
  return common_objectSpread(common_objectSpread({}, signalRefOrValue(val)), {}, {
    condition: condition
  });
}
function signalRefOrValue(value) {
  if (isExprRef(value)) {
    var expr = value.expr,
        rest = (0,objectWithoutProperties/* default */.Z)(value, common_excluded);

    return common_objectSpread({
      signal: expr
    }, rest);
  }

  return value;
}
function conditionalSignalRefOrValue(value) {
  if (isExprRef(value)) {
    var expr = value.expr,
        rest = (0,objectWithoutProperties/* default */.Z)(value, _excluded2);

    return common_objectSpread({
      signal: expr
    }, rest);
  }

  return value;
}
function signalOrValueRef(value) {
  if (isExprRef(value)) {
    var expr = value.expr,
        rest = (0,objectWithoutProperties/* default */.Z)(value, _excluded3);

    return common_objectSpread({
      signal: expr
    }, rest);
  }

  if (isSignalRef(value)) {
    return value;
  }

  return value !== undefined ? {
    value: value
  } : undefined;
}
function exprFromValueOrSignalRef(ref) {
  if (isSignalRef(ref)) {
    return ref.signal;
  }

  return $(ref.value);
}
function signalOrStringValue(v) {
  if (isSignalRef(v)) {
    return v.signal;
  }

  return v == null ? null : $(v);
}
function applyMarkConfig(e, model, propsList) {
  var _iterator = common_createForOfIteratorHelper(propsList),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;
      var value = getMarkConfig(property, model.markDef, model.config);

      if (value !== undefined) {
        e[property] = signalOrValueRef(value);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return e;
}
function getStyles(mark) {
  var _mark$style;

  return [].concat(mark.type, (_mark$style = mark.style) !== null && _mark$style !== void 0 ? _mark$style : []);
}
function getMarkPropOrConfig(channel, mark, config) {
  var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var vgChannel = opt.vgChannel,
      ignoreVgConfig = opt.ignoreVgConfig;

  if (vgChannel && mark[vgChannel] !== undefined) {
    return mark[vgChannel];
  } else if (mark[channel] !== undefined) {
    return mark[channel];
  } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {
    return undefined;
  }

  return getMarkConfig(channel, mark, config, opt);
}
/**
 * Return property value from style or mark specific config property if exists.
 * Otherwise, return general mark specific config.
 */

function getMarkConfig(channel, mark, config) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      vgChannel = _ref.vgChannel;

  return getFirstDefined( // style config has highest precedence
  vgChannel ? getMarkStyleConfig(channel, mark, config.style) : undefined, getMarkStyleConfig(channel, mark, config.style), // then mark-specific config
  vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine
  // If there is vgChannel, skip vl channel.
  // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
  vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above
  );
}
function getMarkStyleConfig(prop, mark, styleConfigIndex) {
  return getStyleConfig(prop, getStyles(mark), styleConfigIndex);
}
function getStyleConfig(p, styles, styleConfigIndex) {
  styles = array(styles);
  var value;

  var _iterator2 = common_createForOfIteratorHelper(styles),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var style = _step2.value;
      var styleConfig = styleConfigIndex[style];

      if (styleConfig && styleConfig[p] !== undefined) {
        value = styleConfig[p];
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return value;
}
/**
 * Return Vega sort parameters (tuple of field and order).
 */

function sortParams(orderDef, fieldRefOption) {
  return array(orderDef).reduce(function (s, orderChannelDef) {
    var _orderChannelDef$sort;

    s.field.push(channeldef_vgField(orderChannelDef, fieldRefOption));
    s.order.push((_orderChannelDef$sort = orderChannelDef.sort) !== null && _orderChannelDef$sort !== void 0 ? _orderChannelDef$sort : 'ascending');
    return s;
  }, {
    field: [],
    order: []
  });
}
function mergeTitleFieldDefs(f1, f2) {
  var merged = (0,toConsumableArray/* default */.Z)(f1);

  f2.forEach(function (fdToMerge) {
    var _iterator3 = common_createForOfIteratorHelper(merged),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var fieldDef1 = _step3.value;

        // If already exists, no need to append to merged array
        if (deepEqual(fieldDef1, fdToMerge)) {
          return;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    merged.push(fdToMerge);
  });
  return merged;
}
function mergeTitle(title1, title2) {
  if (deepEqual(title1, title2) || !title2) {
    // if titles are the same or title2 is falsy
    return title1;
  } else if (!title1) {
    // if title1 is falsy
    return title2;
  } else {
    return [].concat((0,toConsumableArray/* default */.Z)(array(title1)), (0,toConsumableArray/* default */.Z)(array(title2))).join(', ');
  }
}
function mergeTitleComponent(v1, v2) {
  var v1Val = v1.value;
  var v2Val = v2.value;

  if (v1Val == null || v2Val === null) {
    return {
      explicit: v1.explicit,
      value: null
    };
  } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {
    return {
      explicit: v1.explicit,
      value: mergeTitle(v1Val, v2Val)
    };
  } else if (isText(v1Val) || isSignalRef(v1Val)) {
    return {
      explicit: v1.explicit,
      value: v1Val
    };
  } else if (isText(v2Val) || isSignalRef(v2Val)) {
    return {
      explicit: v1.explicit,
      value: v2Val
    };
  } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {
    return {
      explicit: v1.explicit,
      value: mergeTitleFieldDefs(v1Val, v2Val)
    };
  }
  /* istanbul ignore next: Condition should not happen -- only for warning in development. */


  throw new Error('It should never reach here');
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js + 1 modules
var construct = __webpack_require__(13894);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/log/message.js


function invalidSpec(spec) {
  return "Invalid specification ".concat(stringify(spec), ". Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".");
} // FIT

var FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
function containerSizeNonSingle(name) {
  var uName = name == 'width' ? 'Width' : 'Height';
  return "".concat(uName, " \"container\" only works for single views and layered views.");
}
function containerSizeNotCompatibleWithAutosize(name) {
  var uName = name == 'width' ? 'Width' : 'Height';
  var fitDirection = name == 'width' ? 'x' : 'y';
  return "".concat(uName, " \"container\" only works well with autosize \"fit\" or \"fit-").concat(fitDirection, "\".");
}
function droppingFit(channel) {
  return channel ? "Dropping \"fit-".concat(channel, "\" because spec has discrete ").concat(getSizeChannel(channel), ".") : "Dropping \"fit\" because spec has discrete size.";
} // VIEW SIZE

function unknownField(channel) {
  return "Unknown field for ".concat(channel, ". Cannot calculate view size.");
} // SELECTION

function cannotProjectOnChannelWithoutField(channel) {
  return "Cannot project a selection on encoding channel \"".concat(channel, "\", which has no field.");
}
function cannotProjectAggregate(channel, aggregate) {
  return "Cannot project a selection on encoding channel \"".concat(channel, "\" as it uses an aggregate function (\"").concat(aggregate, "\").");
}
function nearestNotSupportForContinuous(mark) {
  return "The \"nearest\" transform is not supported for ".concat(mark, " marks.");
}
function selectionNotSupported(mark) {
  return "Selection not supported for ".concat(mark, " yet.");
}
function selectionNotFound(name) {
  return "Cannot find a selection named \"".concat(name, "\".");
}
var SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
var LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';
function cannotLookupVariableParameter(name) {
  return "Lookups can only be performed on selection parameters. \"".concat(name, "\" is a variable parameter.");
}
function noSameUnitLookup(name) {
  return "Cannot define and lookup the \"".concat(name, "\" selection in the same view. ") + "Try moving the lookup into a second, layered view?";
}
var NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';
var INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using "x" and/or "y" keys.'; // REPEAT

function noSuchRepeatedValue(field) {
  return "Unknown repeated value \"".concat(field, "\".");
}
function columnsNotSupportByRowCol(type) {
  return "The \"columns\" property cannot be used when \"".concat(type, "\" has nested row/column.");
} // CONCAT / REPEAT

var CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA

function unrecognizedParse(p) {
  return "Unrecognized parse \"".concat(p, "\".");
}
function differentParse(field, local, ancestor) {
  return "An ancestor parsed field \"".concat(field, "\" as ").concat(ancestor, " but a child wants to parse the field as ").concat(local, ".");
}
var ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.'; // TRANSFORMS

function invalidTransformIgnored(transform) {
  return "Ignoring an invalid transform: ".concat(stringify(transform), ".");
}
var NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET

function customFormatTypeNotAllowed(channel) {
  return "Config.customFormatTypes is not true, thus custom format type and format for channel ".concat(channel, " are dropped.");
}
function projectionOverridden(opt) {
  var parentProjection = opt.parentProjection,
      projection = opt.projection;
  return "Layer's shared projection ".concat(stringify(parentProjection), " is overridden by a child projection ").concat(stringify(projection), ".");
}
var REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';
function primitiveChannelDef(channel, type, value) {
  return "Channel ".concat(channel, " is a ").concat(type, ". Converted to {value: ").concat(stringify(value), "}.");
}
function invalidFieldType(type) {
  return "Invalid field type \"".concat(type, "\".");
}
function invalidFieldTypeForCountAggregate(type, aggregate) {
  return "Invalid field type \"".concat(type, "\" for aggregate: \"").concat(aggregate, "\", using \"quantitative\" instead.");
}
function invalidAggregate(aggregate) {
  return "Invalid aggregation operator \"".concat(aggregate, "\".");
}
function missingFieldType(channel, newType) {
  return "Missing type for channel \"".concat(channel, "\", using \"").concat(newType, "\" instead.");
}
function droppingColor(type, opt) {
  var fill = opt.fill,
      stroke = opt.stroke;
  return "Dropping color ".concat(type, " as the plot also has ").concat(fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke', ".");
}
function relativeBandSizeNotSupported(sizeChannel) {
  return "Position range does not support relative band size for ".concat(sizeChannel, ".");
}
function emptyFieldDef(fieldDef, channel) {
  return "Dropping ".concat(stringify(fieldDef), " from channel \"").concat(channel, "\" since it does not contain any data field, datum, value, or signal.");
}
var LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';
function incompatibleChannel(channel, markOrFacet, when) {
  return "".concat(channel, " dropped as it is incompatible with \"").concat(markOrFacet, "\"").concat(when ? " when ".concat(when) : '', ".");
}
function invalidEncodingChannel(channel) {
  return "".concat(channel, "-encoding is dropped as ").concat(channel, " is not a valid encoding channel.");
}
function channelShouldBeDiscrete(channel) {
  return "".concat(channel, " encoding should be discrete (ordinal / nominal / binned).");
}
function channelShouldBeDiscreteOrDiscretizing(channel) {
  return "".concat(channel, " encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).");
}
function facetChannelDropped(channels) {
  return "Facet encoding dropped as ".concat(channels.join(' and '), " ").concat(channels.length > 1 ? 'are' : 'is', " also specified.");
}
function discreteChannelCannotEncode(channel, type) {
  return "Using discrete channel \"".concat(channel, "\" to encode \"").concat(type, "\" field can be misleading as it does not encode ").concat(type === 'ordinal' ? 'order' : 'magnitude', ".");
} // MARK

function rangeMarkAlignmentCannotBeExpression(align) {
  return "The ".concat(align, " for range marks cannot be an expression");
}
function lineWithRange(hasX2, hasY2) {
  var channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';
  return "Line mark is for continuous lines and thus cannot be used with ".concat(channels, ". We will use the rule mark (line segments) instead.");
}
function orientOverridden(original, actual) {
  return "Specified orient \"".concat(original, "\" overridden with \"").concat(actual, "\".");
} // SCALE

var CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';
function cannotUseScalePropertyWithNonColor(prop) {
  return "Cannot use the scale property \"".concat(prop, "\" with non-color channel.");
}
function cannotUseRelativeBandSizeWithNonBandScale(scaleType) {
  return "Cannot use the relative band size with ".concat(scaleType, " scale.");
}
function unaggregateDomainHasNoEffectForRawField(fieldDef) {
  return "Using unaggregated domain with raw field has no effect (".concat(stringify(fieldDef), ").");
}
function unaggregateDomainWithNonSharedDomainOp(aggregate) {
  return "Unaggregated domain not applicable for \"".concat(aggregate, "\" since it produces values outside the origin domain of the source data.");
}
function unaggregatedDomainWithLogScale(fieldDef) {
  return "Unaggregated domain is currently unsupported for log scale (".concat(stringify(fieldDef), ").");
}
function cannotApplySizeToNonOrientedMark(mark) {
  return "Cannot apply size to non-oriented mark \"".concat(mark, "\".");
}
function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
  return "Channel \"".concat(channel, "\" does not work with \"").concat(scaleType, "\" scale. We are using \"").concat(defaultScaleType, "\" scale instead.");
}
function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
  return "FieldDef does not work with \"".concat(scaleType, "\" scale. We are using \"").concat(defaultScaleType, "\" scale instead.");
}
function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
  return "".concat(channel, "-scale's \"").concat(propName, "\" is dropped as it does not work with ").concat(scaleType, " scale.");
}
function scaleTypeNotWorkWithMark(mark, scaleType) {
  return "Scale type \"".concat(scaleType, "\" does not work with mark \"").concat(mark, "\".");
}
function stepDropped(channel) {
  return "The step for \"".concat(channel, "\" is dropped because the ").concat(channel === 'width' ? 'x' : 'y', " is continuous.");
}
function mergeConflictingProperty(property, propertyOf, v1, v2) {
  return "Conflicting ".concat(propertyOf.toString(), " property \"").concat(property.toString(), "\" (").concat(stringify(v1), " and ").concat(stringify(v2), "). Using ").concat(stringify(v1), ".");
}
function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {
  return "Conflicting ".concat(propertyOf.toString(), " property \"").concat(property.toString(), "\" (").concat(stringify(v1), " and ").concat(stringify(v2), "). Using the union of the two domains.");
}
function independentScaleMeansIndependentGuide(channel) {
  return "Setting the scale to be independent for \"".concat(channel, "\" means we also have to set the guide (axis or legend) to be independent.");
}
function domainSortDropped(sort) {
  return "Dropping sort property ".concat(stringify(sort), " as unioned domains only support boolean or op \"count\", \"min\", and \"max\".");
}
var MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';
var FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';
var FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';
var FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.'; // AXIS

var INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.'; // STACK

function cannotStackRangedMark(channel) {
  return "Cannot stack \"".concat(channel, "\" if there is already \"").concat(channel, "2\".");
}
function cannotStackNonLinearScale(scaleType) {
  return "Cannot stack non-linear scale (".concat(scaleType, ").");
}
function stackNonSummativeAggregate(aggregate) {
  return "Stacking is applied even though the aggregate function is non-summative (\"".concat(aggregate, "\").");
} // TIMEUNIT

function invalidTimeUnit(unitName, value) {
  return "Invalid ".concat(unitName, ": ").concat(stringify(value), ".");
}
function droppedDay(d) {
  return "Dropping day from datetime ".concat(stringify(d), " as day cannot be combined with other units.");
}
function errorBarCenterAndExtentAreNotNeeded(center, extent) {
  return "".concat(extent ? 'extent ' : '').concat(extent && center ? 'and ' : '').concat(center ? 'center ' : '').concat(extent && center ? 'are ' : 'is ', "not needed when data are aggregated.");
}
function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {
  return "".concat(center, " is not usually used with ").concat(extent, " for ").concat(mark, ".");
}
function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
  return "Continuous axis should not have customized aggregation function ".concat(aggregate, "; ").concat(compositeMark, " already agregates the axis.");
}
function errorBand1DNotSupport(property) {
  return "1D error band does not support ".concat(property, ".");
} // CHANNEL

function channelRequiredForBinned(channel) {
  return "Channel ".concat(channel, " is required for \"binned\" bin.");
}
function channelShouldNotBeUsedForBinned(channel) {
  return "Channel ".concat(channel, " should not be used with \"binned\" bin.");
}
function domainRequiredForThresholdScale(channel) {
  return "Domain for ".concat(channel, " is required for threshold scale.");
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/log/index.js



/**
 * Vega-Lite's singleton logger utility.
 */
var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _level;




/**
 * Main (default) Vega Logger instance for Vega-Lite.
 */

var log_main = logger(vega_util_module_Warn);
var current = log_main;
/**
 * Logger tool for checking if the code throws correct warning.
 */

var LocalLogger = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  function LocalLogger() {
    _classCallCheck(this, LocalLogger);

    this.warns = [];
    this.infos = [];
    this.debugs = [];

    _level.set(this, Warn);
  }

  _createClass(LocalLogger, [{
    key: "level",
    value: function level(_) {
      if (_) {
        __classPrivateFieldSet(this, _level, _);

        return this;
      }

      return __classPrivateFieldGet(this, _level);
    }
  }, {
    key: "warn",
    value: function warn() {
      var _this$warns;

      if (__classPrivateFieldGet(this, _level) >= Warn) (_this$warns = this.warns).push.apply(_this$warns, arguments);
      return this;
    }
  }, {
    key: "info",
    value: function info() {
      var _this$infos;

      if (__classPrivateFieldGet(this, _level) >= Info) (_this$infos = this.infos).push.apply(_this$infos, arguments);
      return this;
    }
  }, {
    key: "debug",
    value: function debug() {
      var _this$debugs;

      if (__classPrivateFieldGet(this, _level) >= Debug) (_this$debugs = this.debugs).push.apply(_this$debugs, arguments);
      return this;
    }
  }, {
    key: "error",
    value: function error() {
      if (__classPrivateFieldGet(this, _level) >= ErrorLevel) throw Error.apply(void 0, arguments);
      return this;
    }
  }]);

  return LocalLogger;
}()));
_level = new WeakMap();
function log_wrap(f) {
  return function () {
    current = new LocalLogger();
    f(current);
    log_reset();
  };
}
/**
 * Set the singleton logger to be a custom logger.
 */

function log_set(newLogger) {
  current = newLogger;
  return current;
}
/**
 * Reset the main logger to use the default Vega Logger.
 */

function log_reset() {
  current = log_main;
  return current;
}
function log_error() {
  var _current;

  (_current = current).error.apply(_current, arguments);
}
function log_warn() {
  var _current2;

  (_current2 = current).warn.apply(_current2, arguments);
}
function log_info() {
  var _current3;

  (_current3 = current).info.apply(_current3, arguments);
}
function log_debug() {
  var _current4;

  (_current4 = current).debug.apply(_current4, arguments);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/datetime.js



function datetime_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = datetime_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function datetime_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return datetime_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return datetime_arrayLikeToArray(o, minLen); }

function datetime_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// DateTime definition object




function isDateTime(o) {
  if (o && isObject(o)) {
    var _iterator = datetime_createForOfIteratorHelper(TIMEUNIT_PARTS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var part = _step.value;

        if (part in o) {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return false;
}
var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
var SHORT_MONTHS = MONTHS.map(function (m) {
  return m.substr(0, 3);
});
var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
var SHORT_DAYS = DAYS.map(function (d) {
  return d.substr(0, 3);
});

function normalizeQuarter(q) {
  if (isNumeric(q)) {
    q = +q;
  }

  if (isNumber(q)) {
    if (q > 4) {
      log_warn(invalidTimeUnit('quarter', q));
    } // We accept 1-based quarter, so need to readjust to 0-based quarter


    return q - 1;
  } else {
    // Invalid quarter
    throw new Error(invalidTimeUnit('quarter', q));
  }
}

function normalizeMonth(m) {
  if (isNumeric(m)) {
    m = +m;
  }

  if (isNumber(m)) {
    // We accept 1-based month, so need to readjust to 0-based month
    return m - 1;
  } else {
    var lowerM = m.toLowerCase();
    var monthIndex = MONTHS.indexOf(lowerM);

    if (monthIndex !== -1) {
      return monthIndex; // 0 for january, ...
    }

    var shortM = lowerM.substr(0, 3);
    var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);

    if (shortMonthIndex !== -1) {
      return shortMonthIndex;
    } // Invalid month


    throw new Error(invalidTimeUnit('month', m));
  }
}

function normalizeDay(d) {
  if (isNumeric(d)) {
    d = +d;
  }

  if (isNumber(d)) {
    // mod so that this can be both 0-based where 0 = sunday
    // and 1-based where 7=sunday
    return d % 7;
  } else {
    var lowerD = d.toLowerCase();
    var dayIndex = DAYS.indexOf(lowerD);

    if (dayIndex !== -1) {
      return dayIndex; // 0 for january, ...
    }

    var shortD = lowerD.substr(0, 3);
    var shortDayIndex = SHORT_DAYS.indexOf(shortD);

    if (shortDayIndex !== -1) {
      return shortDayIndex;
    } // Invalid day


    throw new Error(invalidTimeUnit('day', d));
  }
}
/**
 * @param d the date.
 * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.
 * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]
 */


function dateTimeParts(d, normalize) {
  var parts = [];

  if (normalize && d.day !== undefined) {
    if (util_keys(d).length > 1) {
      log_warn(droppedDay(d));
      d = duplicate(d);
      delete d.day;
    }
  }

  if (d.year !== undefined) {
    parts.push(d.year);
  } else {
    // Just like Vega's timeunit transform, set default year to 2012, so domain conversion will be compatible with Vega
    // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).
    parts.push(2012);
  }

  if (d.month !== undefined) {
    var month = normalize ? normalizeMonth(d.month) : d.month;
    parts.push(month);
  } else if (d.quarter !== undefined) {
    var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
    parts.push(isNumber(quarter) ? quarter * 3 : "".concat(quarter, "*3"));
  } else {
    parts.push(0); // months start at zero in JS
  }

  if (d.date !== undefined) {
    parts.push(d.date);
  } else if (d.day !== undefined) {
    // HACK: Day only works as a standalone unit
    // This is only correct because we always set year to 2006 for day
    var day = normalize ? normalizeDay(d.day) : d.day;
    parts.push(isNumber(day) ? day + 1 : "".concat(day, "+1"));
  } else {
    parts.push(1); // Date starts at 1 in JS
  } // Note: can't use TimeUnit enum here as importing it will create
  // circular dependency problem!


  for (var _i = 0, _arr = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _arr.length; _i++) {
    var timeUnit = _arr[_i];
    var unit = d[timeUnit];
    parts.push(typeof unit === 'undefined' ? 0 : unit);
  }

  return parts;
}
/**
 * Return Vega expression for a date time.
 *
 * @param d the date time.
 * @returns the Vega expression.
 */


function dateTimeToExpr(d) {
  var parts = dateTimeParts(d, true);
  var string = parts.join(', ');

  if (d.utc) {
    return "utc(".concat(string, ")");
  } else {
    return "datetime(".concat(string, ")");
  }
}
/**
 * Return Vega expression for a date time expression.
 *
 * @param d the internal date time object with expression.
 * @returns the Vega expression.
 */

function dateTimeExprToExpr(d) {
  var parts = dateTimeParts(d, false);
  var string = parts.join(', ');

  if (d.utc) {
    return "utc(".concat(string, ")");
  } else {
    return "datetime(".concat(string, ")");
  }
}
/**
 * @param d the date time.
 * @returns the timestamp.
 */

function dateTimeToTimestamp(d) {
  var parts = dateTimeParts(d, true);

  if (d.utc) {
    return +new Date(Date.UTC.apply(Date, (0,toConsumableArray/* default */.Z)(parts)));
  } else {
    return +(0,construct/* default */.Z)(Date, (0,toConsumableArray/* default */.Z)(parts));
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/timeunit.js


var timeunit_excluded = ["utc"];

function timeunit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function timeunit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { timeunit_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { timeunit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function timeunit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = timeunit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function timeunit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return timeunit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return timeunit_arrayLikeToArray(o, minLen); }

function timeunit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




/** Time Unit that only corresponds to only one part of Date objects. */

var LOCAL_SINGLE_TIMEUNIT_INDEX = {
  year: 1,
  quarter: 1,
  month: 1,
  week: 1,
  day: 1,
  dayofyear: 1,
  date: 1,
  hours: 1,
  minutes: 1,
  seconds: 1,
  milliseconds: 1
};
var TIMEUNIT_PARTS = util_keys(LOCAL_SINGLE_TIMEUNIT_INDEX);
function isLocalSingleTimeUnit(timeUnit) {
  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
}
var UTC_SINGLE_TIMEUNIT_INDEX = {
  utcyear: 1,
  utcquarter: 1,
  utcmonth: 1,
  utcweek: 1,
  utcday: 1,
  utcdayofyear: 1,
  utcdate: 1,
  utchours: 1,
  utcminutes: 1,
  utcseconds: 1,
  utcmilliseconds: 1
};
var LOCAL_MULTI_TIMEUNIT_INDEX = {
  yearquarter: 1,
  yearquartermonth: 1,
  yearmonth: 1,
  yearmonthdate: 1,
  yearmonthdatehours: 1,
  yearmonthdatehoursminutes: 1,
  yearmonthdatehoursminutesseconds: 1,
  yearweek: 1,
  yearweekday: 1,
  yearweekdayhours: 1,
  yearweekdayhoursminutes: 1,
  yearweekdayhoursminutesseconds: 1,
  yeardayofyear: 1,
  quartermonth: 1,
  monthdate: 1,
  monthdatehours: 1,
  monthdatehoursminutes: 1,
  monthdatehoursminutesseconds: 1,
  weekday: 1,
  weeksdayhours: 1,
  weekdayhoursminutes: 1,
  weekdayhoursminutesseconds: 1,
  dayhours: 1,
  dayhoursminutes: 1,
  dayhoursminutesseconds: 1,
  hoursminutes: 1,
  hoursminutesseconds: 1,
  minutesseconds: 1,
  secondsmilliseconds: 1
};
var UTC_MULTI_TIMEUNIT_INDEX = {
  utcyearquarter: 1,
  utcyearquartermonth: 1,
  utcyearmonth: 1,
  utcyearmonthdate: 1,
  utcyearmonthdatehours: 1,
  utcyearmonthdatehoursminutes: 1,
  utcyearmonthdatehoursminutesseconds: 1,
  utcyearweek: 1,
  utcyearweekday: 1,
  utcyearweekdayhours: 1,
  utcyearweekdayhoursminutes: 1,
  utcyearweekdayhoursminutesseconds: 1,
  utcyeardayofyear: 1,
  utcquartermonth: 1,
  utcmonthdate: 1,
  utcmonthdatehours: 1,
  utcmonthdatehoursminutes: 1,
  utcmonthdatehoursminutesseconds: 1,
  utcweekday: 1,
  utcweeksdayhours: 1,
  utcweekdayhoursminutes: 1,
  utcweekdayhoursminutesseconds: 1,
  utcdayhours: 1,
  utcdayhoursminutes: 1,
  utcdayhoursminutesseconds: 1,
  utchoursminutes: 1,
  utchoursminutesseconds: 1,
  utcminutesseconds: 1,
  utcsecondsmilliseconds: 1
};
function isUTCTimeUnit(t) {
  return t.startsWith('utc');
}
function getLocalTimeUnit(t) {
  return t.substr(3);
} // In order of increasing specificity

var VEGALITE_TIMEFORMAT = {
  'year-month': '%b %Y ',
  'year-month-date': '%b %d, %Y '
};
function getTimeUnitParts(timeUnit) {
  return TIMEUNIT_PARTS.filter(function (part) {
    return containsTimeUnit(timeUnit, part);
  });
}
/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */

function containsTimeUnit(fullTimeUnit, timeUnit) {
  var index = fullTimeUnit.indexOf(timeUnit);

  if (index < 0) {
    return false;
  } // exclude milliseconds


  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {
    return false;
  } // exclude dayofyear


  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {
    return false;
  }

  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {
    return false;
  }

  return true;
}
/**
 * Returns Vega expression for a given timeUnit and fieldRef
 */

function timeunit_fieldExpr(fullTimeUnit, field) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    end: false
  },
      end = _ref.end;

  var fieldRef = accessPathWithDatum(field);
  var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';

  function func(timeUnit) {
    if (timeUnit === 'quarter') {
      // quarter starting at 0 (0,3,6,9).
      return "(".concat(utc, "quarter(").concat(fieldRef, ")-1)");
    } else {
      return "".concat(utc).concat(timeUnit, "(").concat(fieldRef, ")");
    }
  }

  var lastTimeUnit;
  var dateExpr = {};

  var _iterator = timeunit_createForOfIteratorHelper(TIMEUNIT_PARTS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var part = _step.value;

      if (containsTimeUnit(fullTimeUnit, part)) {
        dateExpr[part] = func(part);
        lastTimeUnit = part;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (end) {
    dateExpr[lastTimeUnit] += '+1';
  }

  return dateTimeExprToExpr(dateExpr);
}
function timeUnitSpecifierExpression(timeUnit) {
  if (!timeUnit) {
    return undefined;
  }

  var timeUnitParts = getTimeUnitParts(timeUnit);
  return "timeUnitSpecifier(".concat(stringify(timeUnitParts), ", ").concat(stringify(VEGALITE_TIMEFORMAT), ")");
}
/**
 * Returns the signal expression used for axis labels for a time unit.
 */

function formatExpression(timeUnit, field, isUTCScale) {
  if (!timeUnit) {
    return undefined;
  }

  var expr = timeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale
  // For utc time units, the data is already converted as a part of timeUnit transform.
  // Thus, utc time units should use timeFormat to avoid shifting the time twice.

  var utc = isUTCScale || isUTCTimeUnit(timeUnit);
  return "".concat(utc ? 'utc' : 'time', "Format(").concat(field, ", ").concat(expr, ")");
}
function normalizeTimeUnit(timeUnit) {
  if (!timeUnit) {
    return undefined;
  }

  var params;

  if (isString(timeUnit)) {
    params = {
      unit: timeUnit
    };
  } else if (isObject(timeUnit)) {
    params = timeunit_objectSpread(timeunit_objectSpread({}, timeUnit), timeUnit.unit ? {
      unit: timeUnit.unit
    } : {});
  }

  if (isUTCTimeUnit(params.unit)) {
    params.utc = true;
    params.unit = getLocalTimeUnit(params.unit);
  }

  return params;
}
function timeUnitToString(tu) {
  var _normalizeTimeUnit = normalizeTimeUnit(tu),
      utc = _normalizeTimeUnit.utc,
      rest = (0,objectWithoutProperties/* default */.Z)(_normalizeTimeUnit, timeunit_excluded);

  if (rest.unit) {
    return (utc ? 'utc' : '') + util_keys(rest).map(function (p) {
      return varName("".concat(p === 'unit' ? '' : "_".concat(p, "_")).concat(rest[p]));
    }).join('');
  } else {
    // when maxbins is specified instead of units
    return (utc ? 'utc' : '') + 'timeunit' + util_keys(rest).map(function (p) {
      return varName("_".concat(p, "_").concat(rest[p]));
    }).join('');
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/predicate.js


function predicate_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function predicate_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { predicate_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { predicate_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






function isSelectionPredicate(predicate) {
  return predicate === null || predicate === void 0 ? void 0 : predicate['param'];
}
function isFieldEqualPredicate(predicate) {
  return predicate && !!predicate.field && predicate.equal !== undefined;
}
function isFieldLTPredicate(predicate) {
  return predicate && !!predicate.field && predicate.lt !== undefined;
}
function isFieldLTEPredicate(predicate) {
  return predicate && !!predicate.field && predicate.lte !== undefined;
}
function isFieldGTPredicate(predicate) {
  return predicate && !!predicate.field && predicate.gt !== undefined;
}
function isFieldGTEPredicate(predicate) {
  return predicate && !!predicate.field && predicate.gte !== undefined;
}
function isFieldRangePredicate(predicate) {
  if (predicate && predicate.field) {
    if (isArray(predicate.range) && predicate.range.length === 2) {
      return true;
    } else if (isSignalRef(predicate.range)) {
      return true;
    }
  }

  return false;
}
function isFieldOneOfPredicate(predicate) {
  return predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility
  ;
}
function isFieldValidPredicate(predicate) {
  return predicate && !!predicate.field && predicate.valid !== undefined;
}
function isFieldPredicate(predicate) {
  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);
}

function predicateValueExpr(v, timeUnit) {
  return valueExpr(v, {
    timeUnit: timeUnit,
    wrapTime: true
  });
}

function predicateValuesExpr(vals, timeUnit) {
  return vals.map(function (v) {
    return predicateValueExpr(v, timeUnit);
  });
} // This method is used by Voyager. Do not change its behavior without changing Voyager.


function fieldFilterExpression(predicate) {
  var _normalizeTimeUnit;

  var useInRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var field = predicate.field;
  var timeUnit = (_normalizeTimeUnit = normalizeTimeUnit(predicate.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;
  var fieldExpr = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
  // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
  // TODO: support utc
  "time(".concat(timeunit_fieldExpr(timeUnit, field), ")") : channeldef_vgField(predicate, {
    expr: 'datum'
  });

  if (isFieldEqualPredicate(predicate)) {
    return "".concat(fieldExpr, "===").concat(predicateValueExpr(predicate.equal, timeUnit));
  } else if (isFieldLTPredicate(predicate)) {
    var upper = predicate.lt;
    return "".concat(fieldExpr, "<").concat(predicateValueExpr(upper, timeUnit));
  } else if (isFieldGTPredicate(predicate)) {
    var lower = predicate.gt;
    return "".concat(fieldExpr, ">").concat(predicateValueExpr(lower, timeUnit));
  } else if (isFieldLTEPredicate(predicate)) {
    var _upper = predicate.lte;
    return "".concat(fieldExpr, "<=").concat(predicateValueExpr(_upper, timeUnit));
  } else if (isFieldGTEPredicate(predicate)) {
    var _lower = predicate.gte;
    return "".concat(fieldExpr, ">=").concat(predicateValueExpr(_lower, timeUnit));
  } else if (isFieldOneOfPredicate(predicate)) {
    return "indexof([".concat(predicateValuesExpr(predicate.oneOf, timeUnit).join(','), "], ").concat(fieldExpr, ") !== -1");
  } else if (isFieldValidPredicate(predicate)) {
    return fieldValidPredicate(fieldExpr, predicate.valid);
  } else if (isFieldRangePredicate(predicate)) {
    var range = predicate.range;

    var _lower2 = isSignalRef(range) ? {
      signal: "".concat(range.signal, "[0]")
    } : range[0];

    var _upper2 = isSignalRef(range) ? {
      signal: "".concat(range.signal, "[1]")
    } : range[1];

    if (_lower2 !== null && _upper2 !== null && useInRange) {
      return 'inrange(' + fieldExpr + ', [' + predicateValueExpr(_lower2, timeUnit) + ', ' + predicateValueExpr(_upper2, timeUnit) + '])';
    }

    var exprs = [];

    if (_lower2 !== null) {
      exprs.push("".concat(fieldExpr, " >= ").concat(predicateValueExpr(_lower2, timeUnit)));
    }

    if (_upper2 !== null) {
      exprs.push("".concat(fieldExpr, " <= ").concat(predicateValueExpr(_upper2, timeUnit)));
    }

    return exprs.length > 0 ? exprs.join(' && ') : 'true';
  }
  /* istanbul ignore next: it should never reach here */


  throw new Error("Invalid field predicate: ".concat(stringify(predicate)));
}
function fieldValidPredicate(fieldExpr) {
  var valid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (valid) {
    return "isValid(".concat(fieldExpr, ") && isFinite(+").concat(fieldExpr, ")");
  } else {
    return "!isValid(".concat(fieldExpr, ") || !isFinite(+").concat(fieldExpr, ")");
  }
}
function normalizePredicate(f) {
  if (isFieldPredicate(f) && f.timeUnit) {
    var _normalizeTimeUnit2;

    return predicate_objectSpread(predicate_objectSpread({}, f), {}, {
      timeUnit: (_normalizeTimeUnit2 = normalizeTimeUnit(f.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit
    });
  }

  return f;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/type.js

/**
 * Data type based on level of measurement
 */

var Type = {
  quantitative: 'quantitative',
  ordinal: 'ordinal',
  temporal: 'temporal',
  nominal: 'nominal',
  geojson: 'geojson'
};
function isType(t) {
  return t in Type;
}
var QUANTITATIVE = Type.quantitative;
var ORDINAL = Type.ordinal;
var TEMPORAL = Type.temporal;
var NOMINAL = Type.nominal;
var GEOJSON = Type.geojson;
var TYPES = util_keys(Type);
/**
 * Get full, lowercase type name for a given type.
 * @param  type
 * @return Full type name.
 */

function getFullName(type) {
  if (type) {
    type = type.toLowerCase();

    switch (type) {
      case 'q':
      case QUANTITATIVE:
        return 'quantitative';

      case 't':
      case TEMPORAL:
        return 'temporal';

      case 'o':
      case ORDINAL:
        return 'ordinal';

      case 'n':
      case NOMINAL:
        return 'nominal';

      case GEOJSON:
        return 'geojson';
    }
  } // If we get invalid input, return undefined type.


  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/scale.js







var ScaleType = {
  // Continuous - Quantitative
  LINEAR: 'linear',
  LOG: 'log',
  POW: 'pow',
  SQRT: 'sqrt',
  SYMLOG: 'symlog',
  IDENTITY: 'identity',
  SEQUENTIAL: 'sequential',
  // Continuous - Time
  TIME: 'time',
  UTC: 'utc',
  // Discretizing scales
  QUANTILE: 'quantile',
  QUANTIZE: 'quantize',
  THRESHOLD: 'threshold',
  BIN_ORDINAL: 'bin-ordinal',
  // Discrete scales
  ORDINAL: 'ordinal',
  POINT: 'point',
  BAND: 'band'
};
/**
 * Index for scale categories -- only scale of the same categories can be merged together.
 * Current implementation is trying to be conservative and avoid merging scale type that might not work together
 */

var SCALE_CATEGORY_INDEX = {
  linear: 'numeric',
  log: 'numeric',
  pow: 'numeric',
  sqrt: 'numeric',
  symlog: 'numeric',
  identity: 'numeric',
  sequential: 'numeric',
  time: 'time',
  utc: 'time',
  ordinal: 'ordinal',
  'bin-ordinal': 'bin-ordinal',
  point: 'ordinal-position',
  band: 'ordinal-position',
  quantile: 'discretizing',
  quantize: 'discretizing',
  threshold: 'discretizing'
};
var SCALE_TYPES = util_keys(SCALE_CATEGORY_INDEX);
/**
 * Whether the two given scale types can be merged together.
 */

function scaleCompatible(scaleType1, scaleType2) {
  var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
  var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
  return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';
}
/**
 * Index for scale precedence -- high score = higher priority for merging.
 */

var SCALE_PRECEDENCE_INDEX = {
  // numeric
  linear: 0,
  log: 1,
  pow: 1,
  sqrt: 1,
  symlog: 1,
  identity: 1,
  sequential: 1,
  // time
  time: 0,
  utc: 0,
  // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
  point: 10,
  band: 11,
  // non grouped types
  ordinal: 0,
  'bin-ordinal': 0,
  quantile: 0,
  quantize: 0,
  threshold: 0
};
/**
 * Return scale categories -- only scale of the same categories can be merged together.
 */

function scaleTypePrecedence(scaleType) {
  return SCALE_PRECEDENCE_INDEX[scaleType];
}
var CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];
var CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);
var QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];
var QUANTITATIVE_SCALES_INDEX = toSet(QUANTITATIVE_SCALES);
function isQuantitative(type) {
  return type in QUANTITATIVE_SCALES_INDEX;
}
var CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];
var CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);
var CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold', 'sequential', 'identity']);
var CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);
var DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
var DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);
var TIME_SCALE_TYPES = (/* unused pure expression or super */ null && (['time', 'utc']));
function hasDiscreteDomain(type) {
  return type in DISCRETE_DOMAIN_INDEX;
}
function hasContinuousDomain(type) {
  return type in CONTINUOUS_DOMAIN_INDEX;
}
function isContinuousToContinuous(type) {
  return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
}
function isContinuousToDiscrete(type) {
  return type in CONTINUOUS_TO_DISCRETE_INDEX;
}
var defaultScaleConfig = {
  pointPadding: 0.5,
  barBandPaddingInner: 0.1,
  rectBandPaddingInner: 0,
  minBandSize: 2,
  minFontSize: 8,
  maxFontSize: 40,
  minOpacity: 0.3,
  maxOpacity: 0.8,
  // FIXME: revise if these *can* become ratios of width/height step
  minSize: 9,
  minStrokeWidth: 1,
  maxStrokeWidth: 4,
  quantileCount: 4,
  quantizeCount: 4
};
function isExtendedScheme(scheme) {
  return !isString(scheme) && !!scheme['name'];
}
function isParameterDomain(domain) {
  return domain === null || domain === void 0 ? void 0 : domain['param'];
}
function isDomainUnionWith(domain) {
  return domain && domain['unionWith'];
}
var SCALE_PROPERTY_INDEX = {
  type: 1,
  domain: 1,
  domainMax: 1,
  domainMin: 1,
  domainMid: 1,
  align: 1,
  range: 1,
  rangeMax: 1,
  rangeMin: 1,
  scheme: 1,
  bins: 1,
  // Other properties
  reverse: 1,
  round: 1,
  // quantitative / time
  clamp: 1,
  nice: 1,
  // quantitative
  base: 1,
  exponent: 1,
  constant: 1,
  interpolate: 1,
  zero: 1,
  // band/point
  padding: 1,
  paddingInner: 1,
  paddingOuter: 1
};
var SCALE_PROPERTIES = util_keys(SCALE_PROPERTY_INDEX);

var scale_type = SCALE_PROPERTY_INDEX.type,
    scale_domain = SCALE_PROPERTY_INDEX.domain,
    scale_range = SCALE_PROPERTY_INDEX.range,
    rangeMax = SCALE_PROPERTY_INDEX.rangeMax,
    rangeMin = SCALE_PROPERTY_INDEX.rangeMin,
    scale_scheme = SCALE_PROPERTY_INDEX.scheme,
    NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = (0,objectWithoutProperties/* default */.Z)(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeMax", "rangeMin", "scheme"]);

var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = util_keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
function scaleTypeSupportProperty(scaleType, propName) {
  switch (propName) {
    case 'type':
    case 'domain':
    case 'reverse':
    case 'range':
      return true;

    case 'scheme':
    case 'interpolate':
      return !['point', 'band', 'identity'].includes(scaleType);

    case 'bins':
      return !['point', 'band', 'identity', 'ordinal'].includes(scaleType);

    case 'round':
      return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';

    case 'padding':
    case 'rangeMin':
    case 'rangeMax':
      return isContinuousToContinuous(scaleType) || ['point', 'band'].includes(scaleType);

    case 'paddingOuter':
    case 'align':
      return ['point', 'band'].includes(scaleType);

    case 'paddingInner':
      return scaleType === 'band';

    case 'domainMax':
    case 'domainMid':
    case 'domainMin':
    case 'clamp':
      return isContinuousToContinuous(scaleType);

    case 'nice':
      return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';

    case 'exponent':
      return scaleType === 'pow';

    case 'base':
      return scaleType === 'log';

    case 'constant':
      return scaleType === 'symlog';

    case 'zero':
      return hasContinuousDomain(scaleType) && !util_contains(['log', 'time', 'utc', 'threshold', 'quantile' // quantile depends on distribution so zero does not matter
      ], scaleType);
  }
}
/**
 * Returns undefined if the input channel supports the input scale property name
 */

function channelScalePropertyIncompatability(channel, propName) {
  switch (propName) {
    case 'interpolate':
    case 'scheme':
    case 'domainMid':
      if (!isColorChannel(channel)) {
        return cannotUseScalePropertyWithNonColor(channel);
      }

      return undefined;

    case 'align':
    case 'type':
    case 'bins':
    case 'domain':
    case 'domainMax':
    case 'domainMin':
    case 'range':
    case 'base':
    case 'exponent':
    case 'constant':
    case 'nice':
    case 'padding':
    case 'paddingInner':
    case 'paddingOuter':
    case 'rangeMax':
    case 'rangeMin':
    case 'reverse':
    case 'round':
    case 'clamp':
    case 'zero':
      return undefined;
    // GOOD!
  }
}
function scaleTypeSupportDataType(specifiedType, fieldDefType) {
  if (util_contains([ORDINAL, NOMINAL], fieldDefType)) {
    return specifiedType === undefined || hasDiscreteDomain(specifiedType);
  } else if (fieldDefType === TEMPORAL) {
    return util_contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);
  } else if (fieldDefType === QUANTITATIVE) {
    return util_contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);
  }

  return true;
}
function channelSupportScaleType(channel, scaleType) {
  if (!isScaleChannel(channel)) {
    return false;
  }

  switch (channel) {
    case channel_X:
    case channel_Y:
    case THETA:
    case RADIUS:
      return isContinuousToContinuous(scaleType) || util_contains(['band', 'point'], scaleType);

    case channel_SIZE: // TODO: size and opacity can support ordinal with more modification

    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case ANGLE:
      // Although it generally doesn't make sense to use band with size and opacity,
      // it can also work since we use band: 0.5 to get midpoint.
      return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || util_contains(['band', 'point', 'ordinal'], scaleType);

    case COLOR:
    case FILL:
    case STROKE:
      return scaleType !== 'band';
    // band does not make sense with color

    case STROKEDASH:
    case SHAPE:
      return scaleType === 'ordinal' || isContinuousToDiscrete(scaleType);
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/mark.js


/**
 * All types of primitive marks.
 */

var mark_Mark = {
  arc: 'arc',
  area: 'area',
  bar: 'bar',
  image: 'image',
  line: 'line',
  point: 'point',
  rect: 'rect',
  rule: 'rule',
  text: 'text',
  tick: 'tick',
  trail: 'trail',
  circle: 'circle',
  square: 'square',
  geoshape: 'geoshape'
};
var ARC = mark_Mark.arc;
var AREA = mark_Mark.area;
var BAR = mark_Mark.bar;
var IMAGE = mark_Mark.image;
var LINE = mark_Mark.line;
var POINT = mark_Mark.point;
var RECT = mark_Mark.rect;
var RULE = mark_Mark.rule;
var mark_TEXT = mark_Mark.text;
var TICK = mark_Mark.tick;
var TRAIL = mark_Mark.trail;
var CIRCLE = mark_Mark.circle;
var SQUARE = mark_Mark.square;
var GEOSHAPE = mark_Mark.geoshape;
function isMark(m) {
  return m in mark_Mark;
}
function isPathMark(m) {
  return ['line', 'area', 'trail'].includes(m);
}
function isRectBasedMark(m) {
  return ['rect', 'bar', 'image', 'arc'
  /* arc is rect/interval in polar coordinate */
  ].includes(m);
}
var PRIMITIVE_MARKS = util_keys(mark_Mark);
function isMarkDef(mark) {
  return mark['type'];
}
var PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);
function isPrimitiveMark(mark) {
  var markType = isMarkDef(mark) ? mark.type : mark;
  return markType in PRIMITIVE_MARK_INDEX;
}
var STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];
var FILL_CONFIG = ['fill', 'fillOpacity'];
var FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);
var VL_ONLY_MARK_CONFIG_INDEX = {
  color: 1,
  filled: 1,
  invalid: 1,
  order: 1,
  radius2: 1,
  theta2: 1,
  timeUnitBandSize: 1,
  timeUnitBandPosition: 1
};
var VL_ONLY_MARK_CONFIG_PROPERTIES = util_keys(VL_ONLY_MARK_CONFIG_INDEX);
var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
  area: ['line', 'point'],
  bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
  rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
  line: ['point'],
  tick: ['bandSize', 'thickness']
};
var defaultMarkConfig = {
  color: '#4c78a8',
  invalid: 'filter',
  timeUnitBandSize: 1
};
var MARK_CONFIG_INDEX = {
  mark: 1,
  arc: 1,
  area: 1,
  bar: 1,
  circle: 1,
  image: 1,
  line: 1,
  point: 1,
  rect: 1,
  rule: 1,
  square: 1,
  text: 1,
  tick: 1,
  trail: 1,
  geoshape: 1
};
var MARK_CONFIGS = util_keys(MARK_CONFIG_INDEX);
function isRelativeBandSize(o) {
  return o && o['band'] != undefined;
}
var BAR_CORNER_RADIUS_INDEX = {
  horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],
  vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']
};
var DEFAULT_RECT_BAND_SIZE = 5;
var defaultBarConfig = {
  binSpacing: 1,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE,
  timeUnitBandPosition: 0.5
};
var defaultRectConfig = {
  binSpacing: 0,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE,
  timeUnitBandPosition: 0.5
};
var defaultTickConfig = {
  thickness: 1
};
function getMarkType(m) {
  return isMarkDef(m) ? m.type : m;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/valueref.js


function valueref_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function valueref_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { valueref_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { valueref_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
















function midPointRefWithPositionInvalidTest(params) {
  var channel = params.channel,
      channelDef = params.channelDef,
      markDef = params.markDef,
      scale = params.scale,
      config = params.config;
  var ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value

  if ( // Only this for field def without counting aggregate (as count wouldn't be null)
  isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
  scale && isContinuousToContinuous(scale.get('type')) && scale.get('zero') === false) {
    return wrapPositionInvalidTest({
      fieldDef: channelDef,
      channel: channel,
      markDef: markDef,
      ref: ref,
      config: config
    });
  }

  return ref;
}
function wrapPositionInvalidTest(_ref) {
  var fieldDef = _ref.fieldDef,
      channel = _ref.channel,
      markDef = _ref.markDef,
      ref = _ref.ref,
      config = _ref.config;

  if (isPathMark(markDef.type)) {
    // path mark already use defined to skip points, no need to do it here.
    return ref;
  }

  var invalid = getMarkPropOrConfig('invalid', markDef, config);

  if (invalid === null) {
    // if there is no invalid filter, don't do the invalid test
    return ref;
  }

  return [fieldInvalidTestValueRef(fieldDef, channel), ref];
}
function fieldInvalidTestValueRef(fieldDef, channel) {
  var test = fieldInvalidPredicate(fieldDef, true);
  var mainChannel = getMainRangeChannel(channel); // we can cast here as the output can't be other things.

  var zeroValueRef = mainChannel === 'y' ? {
    field: {
      group: 'height'
    }
  } : // x / angle / radius can all use 0
  {
    value: 0
  };
  return valueref_objectSpread({
    test: test
  }, zeroValueRef);
}
function fieldInvalidPredicate(field) {
  var invalid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return fieldValidPredicate(isString(field) ? field : channeldef_vgField(field, {
    expr: 'datum'
  }), !invalid);
}
function datumDefToExpr(datumDef) {
  var datum = datumDef.datum;

  if (isDateTime(datum)) {
    return dateTimeToExpr(datum);
  }

  return "".concat(stringify(datum));
}
function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode) {
  var ref = {};

  if (scaleName) {
    ref.scale = scaleName;
  }

  if (isDatumDef(fieldDef)) {
    var datum = fieldDef.datum;

    if (isDateTime(datum)) {
      ref.signal = dateTimeToExpr(datum);
    } else if (isSignalRef(datum)) {
      ref.signal = datum.signal;
    } else if (isExprRef(datum)) {
      ref.signal = datum.expr;
    } else {
      ref.value = datum;
    }
  } else {
    ref.field = channeldef_vgField(fieldDef, opt);
  }

  if (encode) {
    var offset = encode.offset,
        band = encode.band;

    if (offset) {
      ref.offset = offset;
    }

    if (band) {
      ref.band = band;
    }
  }

  return ref;
}
/**
 * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.
 */

function interpolatedSignalRef(_ref2) {
  var scaleName = _ref2.scaleName,
      fieldOrDatumDef = _ref2.fieldOrDatumDef,
      fieldOrDatumDef2 = _ref2.fieldOrDatumDef2,
      offset = _ref2.offset,
      startSuffix = _ref2.startSuffix,
      _ref2$bandPosition = _ref2.bandPosition,
      bandPosition = _ref2$bandPosition === void 0 ? 0.5 : _ref2$bandPosition;
  var expr = 0 < bandPosition && bandPosition < 1 ? 'datum' : undefined;
  var start = channeldef_vgField(fieldOrDatumDef, {
    expr: expr,
    suffix: startSuffix
  });
  var end = fieldOrDatumDef2 !== undefined ? channeldef_vgField(fieldOrDatumDef2, {
    expr: expr
  }) : channeldef_vgField(fieldOrDatumDef, {
    suffix: 'end',
    expr: expr
  });
  var ref = {};

  if (bandPosition === 0 || bandPosition === 1) {
    ref.scale = scaleName;
    var val = bandPosition === 0 ? start : end;
    ref.field = val;
  } else {
    var datum = isSignalRef(bandPosition) ? "".concat(bandPosition.signal, " * ").concat(start, " + (1-").concat(bandPosition.signal, ") * ").concat(end) : "".concat(bandPosition, " * ").concat(start, " + ").concat(1 - bandPosition, " * ").concat(end);
    ref.signal = "scale(\"".concat(scaleName, "\", ").concat(datum, ")");
  }

  if (offset) {
    ref.offset = offset;
  }

  return ref;
}
/**
 * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
 */

function midPoint(_ref3) {
  var channel = _ref3.channel,
      channelDef = _ref3.channelDef,
      channel2Def = _ref3.channel2Def,
      markDef = _ref3.markDef,
      config = _ref3.config,
      scaleName = _ref3.scaleName,
      scale = _ref3.scale,
      stack = _ref3.stack,
      offset = _ref3.offset,
      defaultRef = _ref3.defaultRef,
      bandPosition = _ref3.bandPosition;

  // TODO: datum support
  if (channelDef) {
    /* istanbul ignore else */
    if (isFieldOrDatumDef(channelDef)) {
      var _ref4, _bandPosition2;

      if (isTypedFieldDef(channelDef)) {
        var _bandPosition;

        (_bandPosition = bandPosition) !== null && _bandPosition !== void 0 ? _bandPosition : bandPosition = getBandPosition({
          fieldDef: channelDef,
          fieldDef2: channel2Def,
          markDef: markDef,
          config: config
        });
        var bin = channelDef.bin,
            timeUnit = channelDef.timeUnit,
            type = channelDef.type;

        if (isBinning(bin) || bandPosition && timeUnit && type === TEMPORAL) {
          // Use middle only for x an y to place marks in the center between start and end of the bin range.
          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
          if (stack && stack.impute) {
            // For stack, we computed bin_mid so we can impute.
            return valueRefForFieldOrDatumDef(channelDef, scaleName, {
              binSuffix: 'mid'
            }, {
              offset: offset
            });
          }

          if (bandPosition) {
            // if band = 0, no need to call interpolation
            // For non-stack, we can just calculate bin mid on the fly using signal.
            return interpolatedSignalRef({
              scaleName: scaleName,
              fieldOrDatumDef: channelDef,
              bandPosition: bandPosition,
              offset: offset
            });
          }

          return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {
            binSuffix: 'range'
          } : {}, {
            offset: offset
          });
        } else if (isBinned(bin)) {
          if (isFieldDef(channel2Def)) {
            return interpolatedSignalRef({
              scaleName: scaleName,
              fieldOrDatumDef: channelDef,
              fieldOrDatumDef2: channel2Def,
              bandPosition: bandPosition,
              offset: offset
            });
          } else {
            var channel2 = channel === channel_X ? channel_X2 : channel_Y2;
            log_warn(channelRequiredForBinned(channel2));
          }
        }
      }

      var scaleType = scale === null || scale === void 0 ? void 0 : scale.get('type');
      return valueRefForFieldOrDatumDef(channelDef, scaleName, hasDiscreteDomain(scaleType) ? {
        binSuffix: 'range'
      } : {}, // no need for bin suffix if there is no scale
      {
        offset: offset,
        // For band, to get mid point, need to offset by half of the band
        band: scaleType === 'band' ? (_ref4 = (_bandPosition2 = bandPosition) !== null && _bandPosition2 !== void 0 ? _bandPosition2 : channelDef.bandPosition) !== null && _ref4 !== void 0 ? _ref4 : 0.5 : undefined
      });
    } else if (isValueDef(channelDef)) {
      var value = channelDef.value;
      var offsetMixins = offset ? {
        offset: offset
      } : {};
      return valueref_objectSpread(valueref_objectSpread({}, widthHeightValueOrSignalRef(channel, value)), offsetMixins);
    } // If channelDef is neither field def or value def, it's a condition-only def.
    // In such case, we will use default ref.

  }

  if (isFunction(defaultRef)) {
    defaultRef = defaultRef();
  }

  if (defaultRef) {
    // for non-position, ref could be undefined.
    return valueref_objectSpread(valueref_objectSpread({}, defaultRef), offset ? {
      offset: offset
    } : {});
  }

  return defaultRef;
}
/**
 * Convert special "width" and "height" values in Vega-Lite into Vega value ref.
 */

function widthHeightValueOrSignalRef(channel, value) {
  if (util_contains(['x', 'x2'], channel) && value === 'width') {
    return {
      field: {
        group: 'width'
      }
    };
  } else if (util_contains(['y', 'y2'], channel) && value === 'height') {
    return {
      field: {
        group: 'height'
      }
    };
  }

  return signalOrValueRef(value);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/format.js










function isCustomFormatType(formatType) {
  return formatType && formatType !== 'number' && formatType !== 'time';
}

function customFormatExpr(formatType, field, format) {
  return "".concat(formatType, "(").concat(field).concat(format ? ", ".concat(stringify(format)) : '', ")");
}

var format_BIN_RANGE_DELIMITER = " \u2013 ";
function formatSignalRef(_ref) {
  var fieldOrDatumDef = _ref.fieldOrDatumDef,
      format = _ref.format,
      formatType = _ref.formatType,
      expr = _ref.expr,
      normalizeStack = _ref.normalizeStack,
      config = _ref.config;

  if (isCustomFormatType(formatType)) {
    return formatCustomType({
      fieldOrDatumDef: fieldOrDatumDef,
      format: format,
      formatType: formatType,
      expr: expr,
      config: config
    });
  }

  var field = fieldToFormat(fieldOrDatumDef, expr, normalizeStack);

  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
    var _normalizeTimeUnit, _fieldOrDatumDef$scal;

    var signal = timeFormatExpression(field, isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined, format, config.timeFormat, isScaleFieldDef(fieldOrDatumDef) && ((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) === null || _fieldOrDatumDef$scal === void 0 ? void 0 : _fieldOrDatumDef$scal.type) === ScaleType.UTC);
    return signal ? {
      signal: signal
    } : undefined;
  }

  format = numberFormat(channelDefType(fieldOrDatumDef), format, config);

  if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
    var endField = channeldef_vgField(fieldOrDatumDef, {
      expr: expr,
      binSuffix: 'end'
    });
    return {
      signal: binFormatExpression(field, endField, format, formatType, config)
    };
  } else if (format || channelDefType(fieldOrDatumDef) === 'quantitative') {
    return {
      signal: "".concat(formatExpr(field, format))
    };
  } else {
    return {
      signal: "isValid(".concat(field, ") ? ").concat(field, " : \"\"+").concat(field)
    };
  }
}

function fieldToFormat(fieldOrDatumDef, expr, normalizeStack) {
  if (isFieldDef(fieldOrDatumDef)) {
    if (normalizeStack) {
      return "".concat(channeldef_vgField(fieldOrDatumDef, {
        expr: expr,
        suffix: 'end'
      }), "-").concat(channeldef_vgField(fieldOrDatumDef, {
        expr: expr,
        suffix: 'start'
      }));
    } else {
      return channeldef_vgField(fieldOrDatumDef, {
        expr: expr
      });
    }
  } else {
    return datumDefToExpr(fieldOrDatumDef);
  }
}

function formatCustomType(_ref2) {
  var _field;

  var fieldOrDatumDef = _ref2.fieldOrDatumDef,
      format = _ref2.format,
      formatType = _ref2.formatType,
      expr = _ref2.expr,
      normalizeStack = _ref2.normalizeStack,
      config = _ref2.config,
      field = _ref2.field;
  (_field = field) !== null && _field !== void 0 ? _field : field = fieldToFormat(fieldOrDatumDef, expr, normalizeStack);

  if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
    var endField = channeldef_vgField(fieldOrDatumDef, {
      expr: expr,
      binSuffix: 'end'
    });
    return {
      signal: binFormatExpression(field, endField, format, formatType, config)
    };
  }

  return {
    signal: customFormatExpr(formatType, field, format)
  };
}
function guideFormat(fieldOrDatumDef, type, format, formatType, config, omitTimeFormatConfig // axis doesn't use config.timeFormat
) {
  if (isCustomFormatType(formatType)) {
    return undefined; // handled in encode block
  }

  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
    var _normalizeTimeUnit2;

    var timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit2 = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit : undefined;
    return format_timeFormat(format, timeUnit, config, omitTimeFormatConfig);
  }

  return numberFormat(type, format, config);
}
function guideFormatType(formatType, fieldOrDatumDef, scaleType) {
  if (formatType && (isSignalRef(formatType) || formatType === 'number' || formatType === 'time')) {
    return formatType;
  }

  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType !== 'time' && scaleType !== 'utc') {
    return 'time';
  }

  return undefined;
}
/**
 * Returns number format for a fieldDef.
 */

function numberFormat(type, specifiedFormat, config) {
  // Specified format in axis/legend has higher precedence than fieldDef.format
  if (isString(specifiedFormat)) {
    return specifiedFormat;
  }

  if (type === QUANTITATIVE) {
    // we only apply the default if the field is quantitative
    return config.numberFormat;
  }

  return undefined;
}
/**
 * Returns time format for a fieldDef for use in guides.
 */

function format_timeFormat(specifiedFormat, timeUnit, config, omitTimeFormatConfig) {
  if (specifiedFormat) {
    return specifiedFormat;
  }

  if (timeUnit) {
    return {
      signal: timeUnitSpecifierExpression(timeUnit)
    };
  }

  return omitTimeFormatConfig ? undefined : config.timeFormat;
}

function formatExpr(field, format) {
  return "format(".concat(field, ", \"").concat(format || '', "\")");
}

function binNumberFormatExpr(field, format, formatType, config) {
  var _ref3;

  if (isCustomFormatType(formatType)) {
    return customFormatExpr(formatType, field, format);
  }

  return formatExpr(field, (_ref3 = isString(format) ? format : undefined) !== null && _ref3 !== void 0 ? _ref3 : config.numberFormat);
}

function binFormatExpression(startField, endField, format, formatType, config) {
  var start = binNumberFormatExpr(startField, format, formatType, config);
  var end = binNumberFormatExpr(endField, format, formatType, config);
  return "".concat(fieldValidPredicate(startField, false), " ? \"null\" : ").concat(start, " + \"").concat(format_BIN_RANGE_DELIMITER, "\" + ").concat(end);
}
/**
 * Returns the time expression used for axis/legend labels or text mark for a temporal field
 */

function timeFormatExpression(field, timeUnit, format, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels
isUTCScale) {
  if (!timeUnit || format) {
    // If there is no time unit, or if user explicitly specifies format for axis/legend/text.
    format = isString(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.

    return "".concat(isUTCScale ? 'utc' : 'time', "Format(").concat(field, ", '").concat(format, "')");
  } else {
    return formatExpression(timeUnit, field, isUTCScale);
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/sort.js

var DEFAULT_SORT_OP = 'min';
var SORT_BY_CHANNEL_INDEX = {
  x: 1,
  y: 1,
  color: 1,
  fill: 1,
  stroke: 1,
  strokeWidth: 1,
  size: 1,
  shape: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  opacity: 1,
  text: 1
};
function isSortByChannel(c) {
  return c in SORT_BY_CHANNEL_INDEX;
}
function isSortByEncoding(sort) {
  return !!sort && !!sort['encoding'];
}
function isSortField(sort) {
  return !!sort && (sort['op'] === 'count' || !!sort['field']);
}
function isSortArray(sort) {
  return !!sort && isArray(sort);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/facet.js
function isFacetMapping(f) {
  return 'row' in f || 'column' in f;
}
function isFacetFieldDef(channelDef) {
  return !!channelDef && 'header' in channelDef;
}
function isFacetSpec(spec) {
  return 'facet' in spec;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/channeldef.js


var channeldef_excluded = ["format", "formatType"],
    channeldef_excluded2 = ["format", "formatType"],
    channeldef_excluded3 = ["orient"];

function channeldef_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function channeldef_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { channeldef_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { channeldef_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


















function isConditionalParameter(c) {
  return c['param'];
}
function isRepeatRef(field) {
  return field && !isString(field) && 'repeat' in field;
}
function toFieldDefBase(fieldDef) {
  var field = fieldDef.field,
      timeUnit = fieldDef.timeUnit,
      bin = fieldDef.bin,
      aggregate = fieldDef.aggregate;
  return channeldef_objectSpread(channeldef_objectSpread(channeldef_objectSpread(channeldef_objectSpread({}, timeUnit ? {
    timeUnit: timeUnit
  } : {}), bin ? {
    bin: bin
  } : {}), aggregate ? {
    aggregate: aggregate
  } : {}), {}, {
    field: field
  });
}
function isSortableFieldDef(fieldDef) {
  return 'sort' in fieldDef;
}
function getBandPosition(_ref) {
  var fieldDef = _ref.fieldDef,
      fieldDef2 = _ref.fieldDef2,
      mark = _ref.markDef,
      config = _ref.config;

  if (isFieldOrDatumDef(fieldDef) && fieldDef.bandPosition !== undefined) {
    return fieldDef.bandPosition;
  }

  if (isFieldDef(fieldDef)) {
    var timeUnit = fieldDef.timeUnit,
        bin = fieldDef.bin;

    if (timeUnit && !fieldDef2) {
      return isRectBasedMark(mark.type) ? 0 : getMarkConfig('timeUnitBandPosition', mark, config);
    } else if (isBinning(bin)) {
      return 0.5;
    }
  }

  return undefined;
}
function getBandSize(_ref2) {
  var channel = _ref2.channel,
      fieldDef = _ref2.fieldDef,
      fieldDef2 = _ref2.fieldDef2,
      mark = _ref2.markDef,
      config = _ref2.config,
      scaleType = _ref2.scaleType,
      useVlSizeChannel = _ref2.useVlSizeChannel;
  var sizeChannel = getSizeChannel(channel);
  var size = getMarkPropOrConfig(useVlSizeChannel ? 'size' : sizeChannel, mark, config, {
    vgChannel: sizeChannel
  });

  if (size !== undefined) {
    return size;
  }

  if (isFieldDef(fieldDef)) {
    var timeUnit = fieldDef.timeUnit,
        bin = fieldDef.bin;

    if (timeUnit && !fieldDef2) {
      return {
        band: getMarkConfig('timeUnitBandSize', mark, config)
      };
    } else if (isBinning(bin) && !hasDiscreteDomain(scaleType)) {
      return {
        band: 1
      };
    }
  }

  if (isRectBasedMark(mark.type)) {
    var _config$mark$type3;

    if (scaleType) {
      if (hasDiscreteDomain(scaleType)) {
        var _config$mark$type;

        return ((_config$mark$type = config[mark.type]) === null || _config$mark$type === void 0 ? void 0 : _config$mark$type.discreteBandSize) || {
          band: 1
        };
      } else {
        var _config$mark$type2;

        return (_config$mark$type2 = config[mark.type]) === null || _config$mark$type2 === void 0 ? void 0 : _config$mark$type2.continuousBandSize;
      }
    }

    return (_config$mark$type3 = config[mark.type]) === null || _config$mark$type3 === void 0 ? void 0 : _config$mark$type3.discreteBandSize;
  }

  return undefined;
}
function hasBandEnd(fieldDef, fieldDef2, markDef, config) {
  if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {
    // Need to check bandPosition because non-rect marks (e.g., point) with timeUnit
    // doesn't have to use bandEnd if there is no bandPosition.
    return getBandPosition({
      fieldDef: fieldDef,
      fieldDef2: fieldDef2,
      markDef: markDef,
      config: config
    }) !== undefined;
  }

  return false;
}
function isConditionalDef(channelDef) {
  return !!channelDef && 'condition' in channelDef;
}
/**
 * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
 */

function hasConditionalFieldDef(channelDef) {
  var condition = channelDef && channelDef['condition'];
  return !!condition && !isArray(condition) && isFieldDef(condition);
}
function hasConditionalFieldOrDatumDef(channelDef) {
  var condition = channelDef && channelDef['condition'];
  return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);
}
function hasConditionalValueDef(channelDef) {
  var condition = channelDef && channelDef['condition'];
  return !!condition && (isArray(condition) || isValueDef(condition));
}
function isFieldDef(channelDef) {
  // TODO: we can't use field in channelDef here as it's somehow failing runtime test
  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
}
function channelDefType(channelDef) {
  return channelDef && channelDef['type'];
}
function isDatumDef(channelDef) {
  return !!channelDef && 'datum' in channelDef;
}
function isContinuousFieldOrDatumDef(cd) {
  // TODO: make datum support DateTime object
  return isTypedFieldDef(cd) && !channeldef_isDiscrete(cd) || isNumericDataDef(cd);
}
function isQuantitativeFieldOrDatumDef(cd) {
  // TODO: make datum support DateTime object
  return channelDefType(cd) === 'quantitative' || isNumericDataDef(cd);
}
function isNumericDataDef(cd) {
  return isDatumDef(cd) && isNumber(cd.datum);
}
function isFieldOrDatumDef(channelDef) {
  return isFieldDef(channelDef) || isDatumDef(channelDef);
}
function isTypedFieldDef(channelDef) {
  return !!channelDef && ('field' in channelDef || channelDef['aggregate'] === 'count') && 'type' in channelDef;
}
function isValueDef(channelDef) {
  return channelDef && 'value' in channelDef && 'value' in channelDef;
}
function isScaleFieldDef(channelDef) {
  return !!channelDef && ('scale' in channelDef || 'sort' in channelDef);
}
function isPositionFieldOrDatumDef(channelDef) {
  return channelDef && ('axis' in channelDef || 'stack' in channelDef || 'impute' in channelDef);
}
function isMarkPropFieldOrDatumDef(channelDef) {
  return !!channelDef && 'legend' in channelDef;
}
function isStringFieldOrDatumDef(channelDef) {
  return !!channelDef && ('format' in channelDef || 'formatType' in channelDef);
}
function toStringFieldDef(fieldDef) {
  // omit properties that don't exist in string field defs
  return omit(fieldDef, ['legend', 'axis', 'header', 'scale']);
}

function isOpFieldDef(fieldDef) {
  return 'op' in fieldDef;
}
/**
 * Get a Vega field reference from a Vega-Lite field def.
 */


function channeldef_vgField(fieldDef) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var field = fieldDef.field;
  var prefix = opt.prefix;
  var suffix = opt.suffix;
  var argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped

  if (isCount(fieldDef)) {
    field = internalField('count');
  } else {
    var fn;

    if (!opt.nofn) {
      if (isOpFieldDef(fieldDef)) {
        fn = fieldDef.op;
      } else {
        var bin = fieldDef.bin,
            aggregate = fieldDef.aggregate,
            timeUnit = fieldDef.timeUnit;

        if (isBinning(bin)) {
          var _opt$binSuffix, _opt$suffix;

          fn = binToString(bin);
          suffix = ((_opt$binSuffix = opt.binSuffix) !== null && _opt$binSuffix !== void 0 ? _opt$binSuffix : '') + ((_opt$suffix = opt.suffix) !== null && _opt$suffix !== void 0 ? _opt$suffix : '');
        } else if (aggregate) {
          if (isArgmaxDef(aggregate)) {
            argAccessor = "[\"".concat(field, "\"]");
            field = "argmax_".concat(aggregate.argmax);
          } else if (isArgminDef(aggregate)) {
            argAccessor = "[\"".concat(field, "\"]");
            field = "argmin_".concat(aggregate.argmin);
          } else {
            fn = String(aggregate);
          }
        } else if (timeUnit) {
          var _opt$suffix2;

          fn = timeUnitToString(timeUnit);
          suffix = (!['range', 'mid'].includes(opt.binSuffix) && opt.binSuffix || '') + ((_opt$suffix2 = opt.suffix) !== null && _opt$suffix2 !== void 0 ? _opt$suffix2 : '');
        }
      }
    }

    if (fn) {
      field = field ? "".concat(fn, "_").concat(field) : fn;
    }
  }

  if (suffix) {
    field = "".concat(field, "_").concat(suffix);
  }

  if (prefix) {
    field = "".concat(prefix, "_").concat(field);
  }

  if (opt.forAs) {
    return removePathFromField(field);
  } else if (opt.expr) {
    // Expression to access flattened field. No need to escape dots.
    return flatAccessWithDatum(field, opt.expr) + argAccessor;
  } else {
    // We flattened all fields so paths should have become dot.
    return replacePathInField(field) + argAccessor;
  }
}
function channeldef_isDiscrete(def) {
  switch (def.type) {
    case 'nominal':
    case 'ordinal':
    case 'geojson':
      return true;

    case 'quantitative':
      return isFieldDef(def) && !!def.bin;

    case 'temporal':
      return false;
  }

  throw new Error(invalidFieldType(def.type));
}
function channeldef_isDiscretizing(def) {
  var _def$scale;

  return isScaleFieldDef(def) && isContinuousToDiscrete((_def$scale = def.scale) === null || _def$scale === void 0 ? void 0 : _def$scale.type);
}
function isCount(fieldDef) {
  return fieldDef.aggregate === 'count';
}
function verbalTitleFormatter(fieldDef, config) {
  var field = fieldDef.field,
      bin = fieldDef.bin,
      timeUnit = fieldDef.timeUnit,
      aggregate = fieldDef.aggregate;

  if (aggregate === 'count') {
    return config.countTitle;
  } else if (isBinning(bin)) {
    return "".concat(field, " (binned)");
  } else if (timeUnit) {
    var _normalizeTimeUnit;

    var unit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;

    if (unit) {
      return "".concat(field, " (").concat(getTimeUnitParts(unit).join('-'), ")");
    }
  } else if (aggregate) {
    if (isArgmaxDef(aggregate)) {
      return "".concat(field, " for max ").concat(aggregate.argmax);
    } else if (isArgminDef(aggregate)) {
      return "".concat(field, " for min ").concat(aggregate.argmin);
    } else {
      return "".concat(titleCase(aggregate), " of ").concat(field);
    }
  }

  return field;
}
function functionalTitleFormatter(fieldDef) {
  var aggregate = fieldDef.aggregate,
      bin = fieldDef.bin,
      timeUnit = fieldDef.timeUnit,
      field = fieldDef.field;

  if (isArgmaxDef(aggregate)) {
    return "".concat(field, " for argmax(").concat(aggregate.argmax, ")");
  } else if (isArgminDef(aggregate)) {
    return "".concat(field, " for argmin(").concat(aggregate.argmin, ")");
  }

  var timeUnitParams = normalizeTimeUnit(timeUnit);
  var fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && 'timeunit' || isBinning(bin) && 'bin';

  if (fn) {
    return "".concat(fn.toUpperCase(), "(").concat(field, ")");
  } else {
    return field;
  }
}
var defaultTitleFormatter = function defaultTitleFormatter(fieldDef, config) {
  switch (config.fieldTitle) {
    case 'plain':
      return fieldDef.field;

    case 'functional':
      return functionalTitleFormatter(fieldDef);

    default:
      return verbalTitleFormatter(fieldDef, config);
  }
};
var titleFormatter = defaultTitleFormatter;
function setTitleFormatter(formatter) {
  titleFormatter = formatter;
}
function resetTitleFormatter() {
  setTitleFormatter(defaultTitleFormatter);
}
function channeldef_title(fieldOrDatumDef, config, _ref3) {
  var _getGuide;

  var allowDisabling = _ref3.allowDisabling,
      _ref3$includeDefault = _ref3.includeDefault,
      includeDefault = _ref3$includeDefault === void 0 ? true : _ref3$includeDefault;
  var guideTitle = (_getGuide = getGuide(fieldOrDatumDef)) === null || _getGuide === void 0 ? void 0 : _getGuide.title;

  if (!isFieldDef(fieldOrDatumDef)) {
    return guideTitle;
  }

  var fieldDef = fieldOrDatumDef;
  var def = includeDefault ? defaultTitle(fieldDef, config) : undefined;

  if (allowDisabling) {
    return getFirstDefined(guideTitle, fieldDef.title, def);
  } else {
    var _ref4;

    return (_ref4 = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _ref4 !== void 0 ? _ref4 : def;
  }
}
function getGuide(fieldDef) {
  if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {
    return fieldDef.axis;
  } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {
    return fieldDef.legend;
  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
    return fieldDef.header;
  }

  return undefined;
}
function defaultTitle(fieldDef, config) {
  return titleFormatter(fieldDef, config);
}
function getFormatMixins(fieldDef) {
  if (isStringFieldOrDatumDef(fieldDef)) {
    var format = fieldDef.format,
        formatType = fieldDef.formatType;
    return {
      format: format,
      formatType: formatType
    };
  } else {
    var _getGuide2;

    var guide = (_getGuide2 = getGuide(fieldDef)) !== null && _getGuide2 !== void 0 ? _getGuide2 : {};
    var _format = guide.format,
        _formatType = guide.formatType;
    return {
      format: _format,
      formatType: _formatType
    };
  }
}
function defaultType(fieldDef, channel) {
  var _fieldDef$scale;

  switch (channel) {
    case 'latitude':
    case 'longitude':
      return 'quantitative';

    case 'row':
    case 'column':
    case 'facet':
    case 'shape':
    case 'strokeDash':
      return 'nominal';

    case 'order':
      return 'ordinal';
  }

  if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {
    return 'ordinal';
  }

  var aggregate = fieldDef.aggregate,
      bin = fieldDef.bin,
      timeUnit = fieldDef.timeUnit;

  if (timeUnit) {
    return 'temporal';
  }

  if (bin || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
    return 'quantitative';
  }

  if (isScaleFieldDef(fieldDef) && (_fieldDef$scale = fieldDef.scale) !== null && _fieldDef$scale !== void 0 && _fieldDef$scale.type) {
    switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {
      case 'numeric':
      case 'discretizing':
        return 'quantitative';

      case 'time':
        return 'temporal';
    }
  }

  return 'nominal';
}
/**
 * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
 * @param channelDef
 */

function getFieldDef(channelDef) {
  if (isFieldDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldDef(channelDef)) {
    return channelDef.condition;
  }

  return undefined;
}
function getFieldOrDatumDef(channelDef) {
  if (isFieldOrDatumDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldOrDatumDef(channelDef)) {
    return channelDef.condition;
  }

  return undefined;
}
/**
 * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
 */

function initChannelDef(channelDef, channel, config) {
  var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {
    var primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';
    log_warn(primitiveChannelDef(channel, primitiveType, channelDef));
    return {
      value: channelDef
    };
  } // If a fieldDef contains a field, we need type.


  if (isFieldOrDatumDef(channelDef)) {
    return initFieldOrDatumDef(channelDef, channel, config, opt);
  } else if (hasConditionalFieldOrDatumDef(channelDef)) {
    return channeldef_objectSpread(channeldef_objectSpread({}, channelDef), {}, {
      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
      condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)
    });
  }

  return channelDef;
}
function initFieldOrDatumDef(fd, channel, config, opt) {
  if (isStringFieldOrDatumDef(fd)) {
    var format = fd.format,
        formatType = fd.formatType,
        rest = (0,objectWithoutProperties/* default */.Z)(fd, channeldef_excluded);

    if (isCustomFormatType(formatType) && !config.customFormatTypes) {
      log_warn(customFormatTypeNotAllowed(channel));
      return initFieldOrDatumDef(rest, channel, config, opt);
    }
  } else {
    var guideType = isPositionFieldOrDatumDef(fd) ? 'axis' : isMarkPropFieldOrDatumDef(fd) ? 'legend' : isFacetFieldDef(fd) ? 'header' : null;

    if (guideType && fd[guideType]) {
      var _fd$guideType = fd[guideType],
          _format2 = _fd$guideType.format,
          _formatType2 = _fd$guideType.formatType,
          newGuide = (0,objectWithoutProperties/* default */.Z)(_fd$guideType, channeldef_excluded2);

      if (isCustomFormatType(_formatType2) && !config.customFormatTypes) {
        log_warn(customFormatTypeNotAllowed(channel));
        return initFieldOrDatumDef(channeldef_objectSpread(channeldef_objectSpread({}, fd), {}, (0,defineProperty/* default */.Z)({}, guideType, newGuide)), channel, config, opt);
      }
    }
  }

  if (isFieldDef(fd)) {
    return initFieldDef(fd, channel, opt);
  }

  return initDatumDef(fd);
}

function initDatumDef(datumDef) {
  var type = datumDef['type'];

  if (type) {
    return datumDef;
  }

  var datum = datumDef.datum;
  type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;
  return channeldef_objectSpread(channeldef_objectSpread({}, datumDef), {}, {
    type: type
  });
}

function initFieldDef(fd, channel) {
  var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref5$compositeMark = _ref5.compositeMark,
      compositeMark = _ref5$compositeMark === void 0 ? false : _ref5$compositeMark;

  var aggregate = fd.aggregate,
      timeUnit = fd.timeUnit,
      bin = fd.bin,
      field = fd.field;

  var fieldDef = channeldef_objectSpread({}, fd); // Drop invalid aggregate


  if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
    log_warn(invalidAggregate(aggregate));
    delete fieldDef.aggregate;
  } // Normalize Time Unit


  if (timeUnit) {
    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);
  }

  if (field) {
    fieldDef.field = "".concat(field);
  } // Normalize bin


  if (isBinning(bin)) {
    fieldDef.bin = normalizeBin(bin, channel);
  }

  if (isBinned(bin) && !isXorY(channel)) {
    log_warn(channelShouldNotBeUsedForBinned(channel));
  } // Normalize Type


  if (isTypedFieldDef(fieldDef)) {
    var type = fieldDef.type;
    var fullType = getFullName(type);

    if (type !== fullType) {
      // convert short type to full type
      fieldDef.type = fullType;
    }

    if (type !== 'quantitative') {
      if (isCountingAggregateOp(aggregate)) {
        log_warn(invalidFieldTypeForCountAggregate(type, aggregate));
        fieldDef.type = 'quantitative';
      }
    }
  } else if (!isSecondaryRangeChannel(channel)) {
    // If type is empty / invalid, then augment with default type
    var newType = defaultType(fieldDef, channel);
    fieldDef['type'] = newType;
  }

  if (isTypedFieldDef(fieldDef)) {
    var _ref6 = channelCompatibility(fieldDef, channel) || {},
        compatible = _ref6.compatible,
        warning = _ref6.warning;

    if (compatible === false) {
      log_warn(warning);
    }
  }

  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {
    var sort = fieldDef.sort;

    if (isSortByChannel(sort)) {
      return channeldef_objectSpread(channeldef_objectSpread({}, fieldDef), {}, {
        sort: {
          encoding: sort
        }
      });
    }

    var sub = sort.substr(1);

    if (sort.charAt(0) === '-' && isSortByChannel(sub)) {
      return channeldef_objectSpread(channeldef_objectSpread({}, fieldDef), {}, {
        sort: {
          encoding: sub,
          order: 'descending'
        }
      });
    }
  }

  if (isFacetFieldDef(fieldDef)) {
    var header = fieldDef.header;

    if (header) {
      var orient = header.orient,
          rest = (0,objectWithoutProperties/* default */.Z)(header, channeldef_excluded3);

      if (orient) {
        return channeldef_objectSpread(channeldef_objectSpread({}, fieldDef), {}, {
          header: channeldef_objectSpread(channeldef_objectSpread({}, rest), {}, {
            labelOrient: header.labelOrient || orient,
            titleOrient: header.titleOrient || orient
          })
        });
      }
    }
  }

  return fieldDef;
}
function normalizeBin(bin, channel) {
  if (isBoolean(bin)) {
    return {
      maxbins: autoMaxBins(channel)
    };
  } else if (bin === 'binned') {
    return {
      binned: true
    };
  } else if (!bin.maxbins && !bin.step) {
    return channeldef_objectSpread(channeldef_objectSpread({}, bin), {}, {
      maxbins: autoMaxBins(channel)
    });
  } else {
    return bin;
  }
}
var COMPATIBLE = {
  compatible: true
};
function channelCompatibility(fieldDef, channel) {
  var type = fieldDef.type;

  if (type === 'geojson' && channel !== 'shape') {
    return {
      compatible: false,
      warning: "Channel ".concat(channel, " should not be used with a geojson data.")
    };
  }

  switch (channel) {
    case ROW:
    case COLUMN:
    case FACET:
      if (!channeldef_isDiscrete(fieldDef)) {
        return {
          compatible: false,
          warning: channelShouldBeDiscrete(channel)
        };
      }

      return COMPATIBLE;

    case channel_X:
    case channel_Y:
    case COLOR:
    case FILL:
    case STROKE:
    case TEXT:
    case DETAIL:
    case KEY:
    case TOOLTIP:
    case HREF:
    case channel_URL:
    case ANGLE:
    case THETA:
    case RADIUS:
    case DESCRIPTION:
      return COMPATIBLE;

    case LONGITUDE:
    case LONGITUDE2:
    case LATITUDE:
    case LATITUDE2:
      if (type !== QUANTITATIVE) {
        return {
          compatible: false,
          warning: "Channel ".concat(channel, " should be used with a quantitative field only, not ").concat(fieldDef.type, " field.")
        };
      }

      return COMPATIBLE;

    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case STROKEWIDTH:
    case channel_SIZE:
    case THETA2:
    case RADIUS2:
    case channel_X2:
    case channel_Y2:
      if (type === 'nominal' && !fieldDef['sort']) {
        return {
          compatible: false,
          warning: "Channel ".concat(channel, " should not be used with an unsorted discrete field.")
        };
      }

      return COMPATIBLE;

    case SHAPE:
    case STROKEDASH:
      if (!channeldef_isDiscrete(fieldDef) && !channeldef_isDiscretizing(fieldDef)) {
        return {
          compatible: false,
          warning: channelShouldBeDiscreteOrDiscretizing(channel)
        };
      }

      return COMPATIBLE;

    case ORDER:
      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {
        return {
          compatible: false,
          warning: "Channel order is inappropriate for nominal field, which has no inherent order."
        };
      }

      return COMPATIBLE;
  }
}
/**
 * Check if the field def uses a time format or does not use any format but is temporal
 * (this does not cover field defs that are temporal but use a number format).
 */

function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {
  var _getFormatMixins = getFormatMixins(fieldOrDatumDef),
      formatType = _getFormatMixins.formatType;

  return formatType === 'time' || !formatType && isTimeFieldDef(fieldOrDatumDef);
}
/**
 * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.
 */

function isTimeFieldDef(def) {
  return def && (def['type'] === 'temporal' || isFieldDef(def) && !!def.timeUnit);
}
/**
 * Getting a value associated with a fielddef.
 * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)
 */

function valueExpr(v, _ref7) {
  var _normalizeTimeUnit2;

  var timeUnit = _ref7.timeUnit,
      type = _ref7.type,
      wrapTime = _ref7.wrapTime,
      undefinedIfExprNotRequired = _ref7.undefinedIfExprNotRequired;
  var unit = timeUnit && ((_normalizeTimeUnit2 = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit2 === void 0 ? void 0 : _normalizeTimeUnit2.unit);
  var isTime = unit || type === 'temporal';
  var expr;

  if (isExprRef(v)) {
    expr = v.expr;
  } else if (isSignalRef(v)) {
    expr = v.signal;
  } else if (isDateTime(v)) {
    isTime = true;
    expr = dateTimeToExpr(v);
  } else if (isString(v) || isNumber(v)) {
    if (isTime) {
      expr = "datetime(".concat(stringify(v), ")");

      if (isLocalSingleTimeUnit(unit)) {
        // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit
        if (isNumber(v) && v < 10000 || isString(v) && isNaN(Date.parse(v))) {
          expr = dateTimeToExpr((0,defineProperty/* default */.Z)({}, unit, v));
        }
      }
    }
  }

  if (expr) {
    return wrapTime && isTime ? "time(".concat(expr, ")") : expr;
  } // number or boolean or normal string


  return undefinedIfExprNotRequired ? undefined : stringify(v);
}
/**
 * Standardize value array -- convert each value to Vega expression if applicable
 */

function valueArray(fieldOrDatumDef, values) {
  var type = fieldOrDatumDef.type;
  return values.map(function (v) {
    var expr = valueExpr(v, {
      timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,
      type: type,
      undefinedIfExprNotRequired: true
    }); // return signal for the expression if we need an expression

    if (expr !== undefined) {
      return {
        signal: expr
      };
    } // otherwise just return the original value


    return v;
  });
}
/**
 * Checks whether a fieldDef for a particular channel requires a computed bin range.
 */

function binRequiresRange(fieldDef, channel) {
  if (!isBinning(fieldDef.bin)) {
    console.warn('Only call this method for binned field defs.');
    return false;
  } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
  // We could check whether the axis or legend exists (not disabled) but that seems overkill.


  return isScaleChannel(channel) && ['ordinal', 'nominal'].includes(fieldDef.type);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/axis.js


function axis_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function axis_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { axis_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { axis_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var CONDITIONAL_AXIS_PROP_INDEX = {
  labelAlign: {
    part: 'labels',
    vgProp: 'align'
  },
  labelBaseline: {
    part: 'labels',
    vgProp: 'baseline'
  },
  labelColor: {
    part: 'labels',
    vgProp: 'fill'
  },
  labelFont: {
    part: 'labels',
    vgProp: 'font'
  },
  labelFontSize: {
    part: 'labels',
    vgProp: 'fontSize'
  },
  labelFontStyle: {
    part: 'labels',
    vgProp: 'fontStyle'
  },
  labelFontWeight: {
    part: 'labels',
    vgProp: 'fontWeight'
  },
  labelOpacity: {
    part: 'labels',
    vgProp: 'opacity'
  },
  labelOffset: null,
  labelPadding: null,
  gridColor: {
    part: 'grid',
    vgProp: 'stroke'
  },
  gridDash: {
    part: 'grid',
    vgProp: 'strokeDash'
  },
  gridDashOffset: {
    part: 'grid',
    vgProp: 'strokeDashOffset'
  },
  gridOpacity: {
    part: 'grid',
    vgProp: 'opacity'
  },
  gridWidth: {
    part: 'grid',
    vgProp: 'strokeWidth'
  },
  tickColor: {
    part: 'ticks',
    vgProp: 'stroke'
  },
  tickDash: {
    part: 'ticks',
    vgProp: 'strokeDash'
  },
  tickDashOffset: {
    part: 'ticks',
    vgProp: 'strokeDashOffset'
  },
  tickOpacity: {
    part: 'ticks',
    vgProp: 'opacity'
  },
  tickSize: null,
  tickWidth: {
    part: 'ticks',
    vgProp: 'strokeWidth'
  }
};
function isConditionalAxisValue(v) {
  return v && v['condition'];
}
var AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
/**
 * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
 */

var AXIS_PROPERTY_TYPE = {
  grid: 'grid',
  gridCap: 'grid',
  gridColor: 'grid',
  gridDash: 'grid',
  gridDashOffset: 'grid',
  gridOpacity: 'grid',
  gridScale: 'grid',
  gridWidth: 'grid',
  orient: 'main',
  bandPosition: 'both',
  aria: 'main',
  description: 'main',
  domain: 'main',
  domainCap: 'main',
  domainColor: 'main',
  domainDash: 'main',
  domainDashOffset: 'main',
  domainOpacity: 'main',
  domainWidth: 'main',
  format: 'main',
  formatType: 'main',
  labelAlign: 'main',
  labelAngle: 'main',
  labelBaseline: 'main',
  labelBound: 'main',
  labelColor: 'main',
  labelFlush: 'main',
  labelFlushOffset: 'main',
  labelFont: 'main',
  labelFontSize: 'main',
  labelFontStyle: 'main',
  labelFontWeight: 'main',
  labelLimit: 'main',
  labelLineHeight: 'main',
  labelOffset: 'main',
  labelOpacity: 'main',
  labelOverlap: 'main',
  labelPadding: 'main',
  labels: 'main',
  labelSeparation: 'main',
  maxExtent: 'main',
  minExtent: 'main',
  offset: 'both',
  position: 'main',
  tickCap: 'main',
  tickColor: 'main',
  tickDash: 'main',
  tickDashOffset: 'main',
  tickMinStep: 'both',
  tickOffset: 'both',
  tickOpacity: 'main',
  tickRound: 'both',
  ticks: 'main',
  tickSize: 'main',
  tickWidth: 'both',
  title: 'main',
  titleAlign: 'main',
  titleAnchor: 'main',
  titleAngle: 'main',
  titleBaseline: 'main',
  titleColor: 'main',
  titleFont: 'main',
  titleFontSize: 'main',
  titleFontStyle: 'main',
  titleFontWeight: 'main',
  titleLimit: 'main',
  titleLineHeight: 'main',
  titleOpacity: 'main',
  titlePadding: 'main',
  titleX: 'main',
  titleY: 'main',
  encode: 'both',
  scale: 'both',
  tickBand: 'both',
  tickCount: 'both',
  tickExtra: 'both',
  translate: 'both',
  values: 'both',
  zindex: 'both' // this is actually set afterward, so it doesn't matter

};
var COMMON_AXIS_PROPERTIES_INDEX = {
  orient: 1,
  aria: 1,
  bandPosition: 1,
  description: 1,
  domain: 1,
  domainCap: 1,
  domainColor: 1,
  domainDash: 1,
  domainDashOffset: 1,
  domainOpacity: 1,
  domainWidth: 1,
  format: 1,
  formatType: 1,
  grid: 1,
  gridCap: 1,
  gridColor: 1,
  gridDash: 1,
  gridDashOffset: 1,
  gridOpacity: 1,
  gridWidth: 1,
  labelAlign: 1,
  labelAngle: 1,
  labelBaseline: 1,
  labelBound: 1,
  labelColor: 1,
  labelFlush: 1,
  labelFlushOffset: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelLineHeight: 1,
  labelOffset: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labels: 1,
  labelSeparation: 1,
  maxExtent: 1,
  minExtent: 1,
  offset: 1,
  position: 1,
  tickBand: 1,
  tickCap: 1,
  tickColor: 1,
  tickCount: 1,
  tickDash: 1,
  tickDashOffset: 1,
  tickExtra: 1,
  tickMinStep: 1,
  tickOffset: 1,
  tickOpacity: 1,
  tickRound: 1,
  ticks: 1,
  tickSize: 1,
  tickWidth: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleAngle: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleLineHeight: 1,
  titleOpacity: 1,
  titlePadding: 1,
  titleX: 1,
  titleY: 1,
  translate: 1,
  values: 1,
  zindex: 1
};

var AXIS_PROPERTIES_INDEX = axis_objectSpread(axis_objectSpread({}, COMMON_AXIS_PROPERTIES_INDEX), {}, {
  style: 1,
  labelExpr: 1,
  encoding: 1
});

function isAxisProperty(prop) {
  return !!AXIS_PROPERTIES_INDEX[prop];
} // Export for dependent projects

var AXIS_PROPERTIES = util_keys(AXIS_PROPERTIES_INDEX);
var AXIS_CONFIGS_INDEX = {
  axis: 1,
  axisBand: 1,
  axisBottom: 1,
  axisDiscrete: 1,
  axisLeft: 1,
  axisPoint: 1,
  axisQuantitative: 1,
  axisRight: 1,
  axisTemporal: 1,
  axisTop: 1,
  axisX: 1,
  axisXBand: 1,
  axisXDiscrete: 1,
  axisXPoint: 1,
  axisXQuantitative: 1,
  axisXTemporal: 1,
  axisY: 1,
  axisYBand: 1,
  axisYDiscrete: 1,
  axisYPoint: 1,
  axisYQuantitative: 1,
  axisYTemporal: 1
};
var AXIS_CONFIGS = util_keys(AXIS_CONFIGS_INDEX);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/unit.js
function isUnitSpec(spec) {
  return 'mark' in spec;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/base.js




var CompositeMarkNormalizer = /*#__PURE__*/function () {
  function CompositeMarkNormalizer(name, run) {
    (0,classCallCheck/* default */.Z)(this, CompositeMarkNormalizer);

    this.name = name;
    this.run = run;
  }

  (0,createClass/* default */.Z)(CompositeMarkNormalizer, [{
    key: "hasMatchingType",
    value: function hasMatchingType(spec) {
      if (isUnitSpec(spec)) {
        return getMarkType(spec.mark) === this.name;
      }

      return false;
    }
  }]);

  return CompositeMarkNormalizer;
}();
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/encoding.js


var encoding_excluded = ["field", "aggregate", "bin", "timeUnit"];

function encoding_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = encoding_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function encoding_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return encoding_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return encoding_arrayLikeToArray(o, minLen); }

function encoding_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function encoding_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function encoding_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { encoding_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { encoding_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










function encoding_channelHasField(encoding, channel) {
  var channelDef = encoding && encoding[channel];

  if (channelDef) {
    if (isArray(channelDef)) {
      return some(channelDef, function (fieldDef) {
        return !!fieldDef.field;
      });
    } else {
      return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
    }
  }

  return false;
}
function isAggregate(encoding) {
  return some(CHANNELS, function (channel) {
    if (encoding_channelHasField(encoding, channel)) {
      var channelDef = encoding[channel];

      if (isArray(channelDef)) {
        return some(channelDef, function (fieldDef) {
          return !!fieldDef.aggregate;
        });
      } else {
        var fieldDef = getFieldDef(channelDef);
        return fieldDef && !!fieldDef.aggregate;
      }
    }

    return false;
  });
}
function extractTransformsFromEncoding(oldEncoding, config) {
  var groupby = [];
  var bins = [];
  var timeUnits = [];
  var aggregate = [];
  var encoding = {};
  forEach(oldEncoding, function (channelDef, channel) {
    // Extract potential embedded transformations along with remaining properties
    if (isFieldDef(channelDef)) {
      var field = channelDef.field,
          aggOp = channelDef.aggregate,
          bin = channelDef.bin,
          timeUnit = channelDef.timeUnit,
          remaining = (0,objectWithoutProperties/* default */.Z)(channelDef, encoding_excluded);

      if (aggOp || timeUnit || bin) {
        var guide = getGuide(channelDef);
        var isTitleDefined = guide && guide.title;
        var newField = channeldef_vgField(channelDef, {
          forAs: true
        });

        var newFieldDef = encoding_objectSpread(encoding_objectSpread(encoding_objectSpread({}, isTitleDefined ? [] : {
          title: channeldef_title(channelDef, config, {
            allowDisabling: true
          })
        }), remaining), {}, {
          // Always overwrite field
          field: newField
        });

        if (aggOp) {
          var op;

          if (isArgmaxDef(aggOp)) {
            op = 'argmax';
            newField = channeldef_vgField({
              op: 'argmax',
              field: aggOp.argmax
            }, {
              forAs: true
            });
            newFieldDef.field = "".concat(newField, ".").concat(field);
          } else if (isArgminDef(aggOp)) {
            op = 'argmin';
            newField = channeldef_vgField({
              op: 'argmin',
              field: aggOp.argmin
            }, {
              forAs: true
            });
            newFieldDef.field = "".concat(newField, ".").concat(field);
          } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {
            op = aggOp;
          }

          if (op) {
            var aggregateEntry = {
              op: op,
              as: newField
            };

            if (field) {
              aggregateEntry.field = field;
            }

            aggregate.push(aggregateEntry);
          }
        } else {
          groupby.push(newField);

          if (isTypedFieldDef(channelDef) && isBinning(bin)) {
            bins.push({
              bin: bin,
              field: field,
              as: newField
            }); // Add additional groupbys for range and end of bins

            groupby.push(channeldef_vgField(channelDef, {
              binSuffix: 'end'
            }));

            if (binRequiresRange(channelDef, channel)) {
              groupby.push(channeldef_vgField(channelDef, {
                binSuffix: 'range'
              }));
            } // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively


            if (isXorY(channel)) {
              var secondaryChannel = {
                field: "".concat(newField, "_end")
              };
              encoding["".concat(channel, "2")] = secondaryChannel;
            }

            newFieldDef.bin = 'binned';

            if (!isSecondaryRangeChannel(channel)) {
              newFieldDef['type'] = QUANTITATIVE;
            }
          } else if (timeUnit) {
            timeUnits.push({
              timeUnit: timeUnit,
              field: field,
              as: newField
            }); // define the format type for later compilation

            var formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';

            if (formatType) {
              if (channel === TEXT || channel === TOOLTIP) {
                newFieldDef['formatType'] = formatType;
              } else if (isNonPositionScaleChannel(channel)) {
                newFieldDef['legend'] = encoding_objectSpread({
                  formatType: formatType
                }, newFieldDef['legend']);
              } else if (isXorY(channel)) {
                newFieldDef['axis'] = encoding_objectSpread({
                  formatType: formatType
                }, newFieldDef['axis']);
              }
            }
          }
        } // now the field should refer to post-transformed field instead


        encoding[channel] = newFieldDef;
      } else {
        groupby.push(field);
        encoding[channel] = oldEncoding[channel];
      }
    } else {
      // For value def / signal ref / datum def, just copy
      encoding[channel] = oldEncoding[channel];
    }
  });
  return {
    bins: bins,
    timeUnits: timeUnits,
    aggregate: aggregate,
    groupby: groupby,
    encoding: encoding
  };
}
function markChannelCompatible(encoding, channel, mark) {
  var markSupported = supportMark(channel, mark);

  if (!markSupported) {
    return false;
  } else if (markSupported === 'binned') {
    var primaryFieldDef = encoding[channel === channel_X2 ? channel_X : channel_Y]; // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
    // has "binned" data and thus need x2/y2 to specify the bin-end field.

    if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {
      return true;
    } else {
      return false;
    }
  }

  return true;
}
function initEncoding(encoding, mark, filled, config) {
  return util_keys(encoding).reduce(function (normalizedEncoding, channel) {
    if (!isChannel(channel)) {
      // Drop invalid channel
      log_warn(invalidEncodingChannel(channel));
      return normalizedEncoding;
    }

    var channelDef = encoding[channel];

    if (channel === 'angle' && mark === 'arc' && !encoding.theta) {
      log_warn(REPLACE_ANGLE_WITH_THETA);
      channel = THETA;
    }

    if (!markChannelCompatible(encoding, channel, mark)) {
      // Drop unsupported channel
      log_warn(incompatibleChannel(channel, mark));
      return normalizedEncoding;
    } // Drop line's size if the field is aggregated.


    if (channel === channel_SIZE && mark === 'line') {
      var fieldDef = getFieldDef(encoding[channel]);

      if (fieldDef !== null && fieldDef !== void 0 && fieldDef.aggregate) {
        log_warn(LINE_WITH_VARYING_SIZE);
        return normalizedEncoding;
      }
    } // Drop color if either fill or stroke is specified


    if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {
      log_warn(droppingColor('encoding', {
        fill: 'fill' in encoding,
        stroke: 'stroke' in encoding
      }));
      return normalizedEncoding;
    }

    if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {
      if (channelDef) {
        // Array of fieldDefs for detail channel (or production rule)
        normalizedEncoding[channel] = array(channelDef).reduce(function (defs, fieldDef) {
          if (!isFieldDef(fieldDef)) {
            log_warn(emptyFieldDef(fieldDef, channel));
          } else {
            defs.push(initFieldDef(fieldDef, channel));
          }

          return defs;
        }, []);
      }
    } else {
      if (channel === TOOLTIP && channelDef === null) {
        // Preserve null so we can use it to disable tooltip
        normalizedEncoding[channel] = null;
      } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {
        log_warn(emptyFieldDef(channelDef, channel));
        return normalizedEncoding;
      }

      normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);
    }

    return normalizedEncoding;
  }, {});
}
/**
 * For composite marks, we have to call initChannelDef during init so we can infer types earlier.
 */

function normalizeEncoding(encoding, config) {
  var normalizedEncoding = {};

  var _iterator = encoding_createForOfIteratorHelper(util_keys(encoding)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var newChannelDef = initChannelDef(encoding[channel], channel, config, {
        compositeMark: true
      });
      normalizedEncoding[channel] = newChannelDef;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return normalizedEncoding;
}
function fieldDefs(encoding) {
  var arr = [];

  var _iterator2 = encoding_createForOfIteratorHelper(util_keys(encoding)),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var channel = _step2.value;

      if (encoding_channelHasField(encoding, channel)) {
        var channelDef = encoding[channel];
        var channelDefArray = array(channelDef);

        var _iterator3 = encoding_createForOfIteratorHelper(channelDefArray),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var def = _step3.value;

            if (isFieldDef(def)) {
              arr.push(def);
            } else if (hasConditionalFieldDef(def)) {
              arr.push(def.condition);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return arr;
}
function forEach(mapping, f, thisArg) {
  if (!mapping) {
    return;
  }

  var _iterator4 = encoding_createForOfIteratorHelper(util_keys(mapping)),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var channel = _step4.value;
      var el = mapping[channel];

      if (isArray(el)) {
        var _iterator5 = encoding_createForOfIteratorHelper(el),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var channelDef = _step5.value;
            f.call(thisArg, channelDef, channel);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      } else {
        f.call(thisArg, el, channel);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}
function reduce(mapping, f, init, thisArg) {
  if (!mapping) {
    return init;
  }

  return util_keys(mapping).reduce(function (r, channel) {
    var map = mapping[channel];

    if (isArray(map)) {
      return map.reduce(function (r1, channelDef) {
        return f.call(thisArg, r1, channelDef, channel);
      }, r);
    } else {
      return f.call(thisArg, r, map, channel);
    }
  }, init);
}
/**
 * Returns list of path grouping fields for the given encoding
 */

function pathGroupingFields(mark, encoding) {
  return util_keys(encoding).reduce(function (details, channel) {
    switch (channel) {
      // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group
      case channel_X:
      case channel_Y:
      case HREF:
      case DESCRIPTION:
      case channel_URL:
      case channel_X2:
      case channel_Y2:
      case THETA:
      case THETA2:
      case RADIUS:
      case RADIUS2: // falls through

      case LATITUDE:
      case LONGITUDE:
      case LATITUDE2:
      case LONGITUDE2: // TODO: case 'cursor':
      // text, shape, shouldn't be a part of line/trail/area [falls through]

      case TEXT:
      case SHAPE:
      case ANGLE: // falls through
      // tooltip fields should not be added to group by [falls through]

      case TOOLTIP:
        return details;

      case ORDER:
        // order should not group line / trail
        if (mark === 'line' || mark === 'trail') {
          return details;
        }

      // but order should group area for stacking (falls through)

      case DETAIL:
      case KEY:
        {
          var channelDef = encoding[channel];

          if (isArray(channelDef) || isFieldDef(channelDef)) {
            var _iterator6 = encoding_createForOfIteratorHelper(array(channelDef)),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var fieldDef = _step6.value;

                if (!fieldDef.aggregate) {
                  details.push(channeldef_vgField(fieldDef, {}));
                }
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }

          return details;
        }

      case channel_SIZE:
        if (mark === 'trail') {
          // For trail, size should not group trail lines.
          return details;
        }

      // For line, size should group lines.
      // falls through

      case COLOR:
      case FILL:
      case STROKE:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case STROKEDASH:
      case STROKEWIDTH:
        {
          // TODO strokeDashOffset:
          // falls through
          var _fieldDef = getFieldDef(encoding[channel]);

          if (_fieldDef && !_fieldDef.aggregate) {
            details.push(channeldef_vgField(_fieldDef, {}));
          }

          return details;
        }
    }
  }, []);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/common.js



var compositemark_common_excluded = ["tooltip"],
    common_excluded2 = ["aggregate"];

function compositemark_common_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function compositemark_common_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { compositemark_common_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { compositemark_common_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function compositemark_common_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = compositemark_common_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function compositemark_common_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return compositemark_common_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return compositemark_common_arrayLikeToArray(o, minLen); }

function compositemark_common_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function filterTooltipWithAggregatedField(oldEncoding) {
  var tooltip = oldEncoding.tooltip,
      filteredEncoding = (0,objectWithoutProperties/* default */.Z)(oldEncoding, compositemark_common_excluded);

  if (!tooltip) {
    return {
      filteredEncoding: filteredEncoding
    };
  }

  var customTooltipWithAggregatedField;
  var customTooltipWithoutAggregatedField;

  if (isArray(tooltip)) {
    var _iterator = compositemark_common_createForOfIteratorHelper(tooltip),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var t = _step.value;

        if (t.aggregate) {
          if (!customTooltipWithAggregatedField) {
            customTooltipWithAggregatedField = [];
          }

          customTooltipWithAggregatedField.push(t);
        } else {
          if (!customTooltipWithoutAggregatedField) {
            customTooltipWithoutAggregatedField = [];
          }

          customTooltipWithoutAggregatedField.push(t);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (customTooltipWithAggregatedField) {
      filteredEncoding.tooltip = customTooltipWithAggregatedField;
    }
  } else {
    if (tooltip['aggregate']) {
      filteredEncoding.tooltip = tooltip;
    } else {
      customTooltipWithoutAggregatedField = tooltip;
    }
  }

  if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
    customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
  }

  return {
    customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField,
    filteredEncoding: filteredEncoding
  };
}
function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis) {
  var withFieldName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  if ('tooltip' in encodingWithoutContinuousAxis) {
    return {
      tooltip: encodingWithoutContinuousAxis.tooltip
    };
  }

  var fiveSummaryTooltip = tooltipSummary.map(function (_ref) {
    var fieldPrefix = _ref.fieldPrefix,
        titlePrefix = _ref.titlePrefix;
    var mainTitle = withFieldName ? " of ".concat(getTitle(continuousAxisChannelDef)) : '';
    return {
      field: fieldPrefix + continuousAxisChannelDef.field,
      type: continuousAxisChannelDef.type,
      title: isSignalRef(titlePrefix) ? {
        signal: "".concat(titlePrefix, "\"").concat(escape(mainTitle), "\"")
      } : titlePrefix + mainTitle
    };
  });
  var tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);
  return {
    tooltip: [].concat((0,toConsumableArray/* default */.Z)(fiveSummaryTooltip), (0,toConsumableArray/* default */.Z)(unique(tooltipFieldDefs, util_hash)))
  };
}
function getTitle(continuousAxisChannelDef) {
  var title = continuousAxisChannelDef.title,
      field = continuousAxisChannelDef.field;
  return getFirstDefined(title, field);
}
function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
  var scale = continuousAxisChannelDef.scale,
      axis = continuousAxisChannelDef.axis;
  return function (_ref2) {
    var partName = _ref2.partName,
        mark = _ref2.mark,
        positionPrefix = _ref2.positionPrefix,
        _ref2$endPositionPref = _ref2.endPositionPrefix,
        endPositionPrefix = _ref2$endPositionPref === void 0 ? undefined : _ref2$endPositionPref,
        _ref2$extraEncoding = _ref2.extraEncoding,
        extraEncoding = _ref2$extraEncoding === void 0 ? {} : _ref2$extraEncoding;
    var title = getTitle(continuousAxisChannelDef);
    return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
      mark: mark,
      encoding: compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread((0,defineProperty/* default */.Z)({}, continuousAxis, compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread({
        field: "".concat(positionPrefix, "_").concat(continuousAxisChannelDef.field),
        type: continuousAxisChannelDef.type
      }, title !== undefined ? {
        title: title
      } : {}), scale !== undefined ? {
        scale: scale
      } : {}), axis !== undefined ? {
        axis: axis
      } : {})), isString(endPositionPrefix) ? (0,defineProperty/* default */.Z)({}, "".concat(continuousAxis, "2"), {
        field: "".concat(endPositionPrefix, "_").concat(continuousAxisChannelDef.field)
      }) : {}), sharedEncoding), extraEncoding)
    });
  };
}
function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
  var clip = markDef.clip,
      color = markDef.color,
      opacity = markDef.opacity;
  var mark = markDef.type;

  if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) {
    return [compositemark_common_objectSpread(compositemark_common_objectSpread({}, partBaseSpec), {}, {
      mark: compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread(compositemark_common_objectSpread({}, compositeMarkConfig[part]), clip ? {
        clip: clip
      } : {}), color ? {
        color: color
      } : {}), opacity ? {
        opacity: opacity
      } : {}), isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : {
        type: partBaseSpec.mark
      }), {}, {
        style: "".concat(mark, "-").concat(part)
      }, isBoolean(markDef[part]) ? {} : markDef[part])
    })];
  }

  return [];
}
function compositeMarkContinuousAxis(spec, orient, compositeMark) {
  var encoding = spec.encoding;
  var continuousAxis = orient === 'vertical' ? 'y' : 'x';
  var continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.

  var continuousAxisChannelDef2 = encoding["".concat(continuousAxis, "2")];
  var continuousAxisChannelDefError = encoding["".concat(continuousAxis, "Error")];
  var continuousAxisChannelDefError2 = encoding["".concat(continuousAxis, "Error2")];
  return {
    continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
    continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
    continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
    continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
    continuousAxis: continuousAxis
  };
}

function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
  if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
    var aggregate = continuousAxisChannelDef.aggregate,
        continuousAxisWithoutAggregate = (0,objectWithoutProperties/* default */.Z)(continuousAxisChannelDef, common_excluded2);

    if (aggregate !== compositeMark) {
      log_warn(errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
    }

    return continuousAxisWithoutAggregate;
  } else {
    return continuousAxisChannelDef;
  }
}

function compositeMarkOrient(spec, compositeMark) {
  var mark = spec.mark,
      encoding = spec.encoding;
  var x = encoding.x,
      y = encoding.y;

  if (isMarkDef(mark) && mark.orient) {
    return mark.orient;
  }

  if (isContinuousFieldOrDatumDef(x)) {
    // x is continuous
    if (isContinuousFieldOrDatumDef(y)) {
      // both x and y are continuous
      var xAggregate = isFieldDef(x) && x.aggregate;
      var yAggregate = isFieldDef(y) && y.aggregate;

      if (!xAggregate && yAggregate === compositeMark) {
        return 'vertical';
      } else if (!yAggregate && xAggregate === compositeMark) {
        return 'horizontal';
      } else if (xAggregate === compositeMark && yAggregate === compositeMark) {
        throw new Error('Both x and y cannot have aggregate');
      } else {
        if (isFieldOrDatumDefForTimeFormat(y) && !isFieldOrDatumDefForTimeFormat(x)) {
          // y is temporal but x is not
          return 'horizontal';
        } // default orientation for two continuous


        return 'vertical';
      }
    }

    return 'horizontal';
  } else if (isContinuousFieldOrDatumDef(y)) {
    // y is continuous but x is not
    return 'vertical';
  } else {
    // Neither x nor y is continuous.
    throw new Error("Need a valid continuous axis for ".concat(compositeMark, "s"));
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/boxplot.js



var boxplot_excluded = ["mark", "encoding", "params", "projection"],
    boxplot_excluded2 = ["color", "size"],
    boxplot_excluded3 = ["tooltip"];

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function boxplot_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function boxplot_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { boxplot_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { boxplot_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var BOXPLOT = 'boxplot';
var BOXPLOT_PARTS = ['box', 'median', 'outliers', 'rule', 'ticks'];
var boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
function getBoxPlotType(extent) {
  if (isNumber(extent)) {
    return 'tukey';
  } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.


  return extent;
}
function normalizeBoxPlot(spec, _ref) {
  var _markDef$extent;

  var config = _ref.config;
  // Need to initEncoding first so we can infer type
  spec = boxplot_objectSpread(boxplot_objectSpread({}, spec), {}, {
    encoding: normalizeEncoding(spec.encoding, config)
  });

  var _spec = spec,
      mark = _spec.mark,
      _encoding = _spec.encoding,
      params = _spec.params,
      _p = _spec.projection,
      outerSpec = (0,objectWithoutProperties/* default */.Z)(_spec, boxplot_excluded);

  var markDef = isMarkDef(mark) ? mark : {
    type: mark
  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

  if (params) {
    log_warn(selectionNotSupported('boxplot'));
  }

  var extent = (_markDef$extent = markDef.extent) !== null && _markDef$extent !== void 0 ? _markDef$extent : config.boxplot.extent;
  var sizeValue = getMarkPropOrConfig('size', markDef, // TODO: https://github.com/vega/vega-lite/issues/6245
  config);
  var boxPlotType = getBoxPlotType(extent);

  var _boxParams = boxParams(spec, extent, config),
      bins = _boxParams.bins,
      timeUnits = _boxParams.timeUnits,
      transform = _boxParams.transform,
      continuousAxisChannelDef = _boxParams.continuousAxisChannelDef,
      continuousAxis = _boxParams.continuousAxis,
      groupby = _boxParams.groupby,
      aggregate = _boxParams.aggregate,
      encodingWithoutContinuousAxis = _boxParams.encodingWithoutContinuousAxis,
      ticksOrient = _boxParams.ticksOrient,
      boxOrient = _boxParams.boxOrient,
      customTooltipWithoutAggregatedField = _boxParams.customTooltipWithoutAggregatedField;

  var color = encodingWithoutContinuousAxis.color,
      size = encodingWithoutContinuousAxis.size,
      encodingWithoutSizeColorAndContinuousAxis = (0,objectWithoutProperties/* default */.Z)(encodingWithoutContinuousAxis, boxplot_excluded2);

  var makeBoxPlotPart = function makeBoxPlotPart(sharedEncoding) {
    return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
  };

  var makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
  var makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
  var makeBoxPlotMidTick = makeBoxPlotPart(boxplot_objectSpread(boxplot_objectSpread({}, encodingWithoutSizeColorAndContinuousAxis), size ? {
    size: size
  } : {}));
  var fiveSummaryTooltipEncoding = getCompositeMarkTooltip([{
    fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',
    titlePrefix: 'Max'
  }, {
    fieldPrefix: 'upper_box_',
    titlePrefix: 'Q3'
  }, {
    fieldPrefix: 'mid_box_',
    titlePrefix: 'Median'
  }, {
    fieldPrefix: 'lower_box_',
    titlePrefix: 'Q1'
  }, {
    fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',
    titlePrefix: 'Min'
  }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers

  var endTick = {
    type: 'tick',
    color: 'black',
    opacity: 1,
    orient: ticksOrient,
    invalid: null,
    aria: false
  };
  var whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
  : // for tukey / k-IQR, just show upper/lower-whisker
  getCompositeMarkTooltip([{
    fieldPrefix: 'upper_whisker_',
    titlePrefix: 'Upper Whisker'
  }, {
    fieldPrefix: 'lower_whisker_',
    titlePrefix: 'Lower Whisker'
  }], continuousAxisChannelDef, encodingWithoutContinuousAxis);
  var whiskerLayers = [].concat((0,toConsumableArray/* default */.Z)(makeBoxPlotExtent({
    partName: 'rule',
    mark: {
      type: 'rule',
      invalid: null,
      aria: false
    },
    positionPrefix: 'lower_whisker',
    endPositionPrefix: 'lower_box',
    extraEncoding: whiskerTooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeBoxPlotExtent({
    partName: 'rule',
    mark: {
      type: 'rule',
      invalid: null,
      aria: false
    },
    positionPrefix: 'upper_box',
    endPositionPrefix: 'upper_whisker',
    extraEncoding: whiskerTooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeBoxPlotExtent({
    partName: 'ticks',
    mark: endTick,
    positionPrefix: 'lower_whisker',
    extraEncoding: whiskerTooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeBoxPlotExtent({
    partName: 'ticks',
    mark: endTick,
    positionPrefix: 'upper_whisker',
    extraEncoding: whiskerTooltipEncoding
  }))); // ## Box Layers
  // TODO: support hiding certain mark parts

  var boxLayers = [].concat((0,toConsumableArray/* default */.Z)(boxPlotType !== 'tukey' ? whiskerLayers : []), (0,toConsumableArray/* default */.Z)(makeBoxPlotBox({
    partName: 'box',
    mark: boxplot_objectSpread(boxplot_objectSpread({
      type: 'bar'
    }, sizeValue ? {
      size: sizeValue
    } : {}), {}, {
      orient: boxOrient,
      invalid: null,
      ariaRoleDescription: 'box'
    }),
    positionPrefix: 'lower_box',
    endPositionPrefix: 'upper_box',
    extraEncoding: fiveSummaryTooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeBoxPlotMidTick({
    partName: 'median',
    mark: boxplot_objectSpread(boxplot_objectSpread(boxplot_objectSpread({
      type: 'tick',
      invalid: null
    }, isObject(config.boxplot.median) && config.boxplot.median.color ? {
      color: config.boxplot.median.color
    } : {}), sizeValue ? {
      size: sizeValue
    } : {}), {}, {
      orient: ticksOrient,
      aria: false
    }),
    positionPrefix: 'mid_box',
    extraEncoding: fiveSummaryTooltipEncoding
  })));

  if (boxPlotType === 'min-max') {
    var _outerSpec$transform;

    return boxplot_objectSpread(boxplot_objectSpread({}, outerSpec), {}, {
      transform: ((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []).concat(transform),
      layer: boxLayers
    });
  } // Tukey Box Plot


  var lowerBoxExpr = "datum[\"lower_box_".concat(continuousAxisChannelDef.field, "\"]");
  var upperBoxExpr = "datum[\"upper_box_".concat(continuousAxisChannelDef.field, "\"]");
  var iqrExpr = "(".concat(upperBoxExpr, " - ").concat(lowerBoxExpr, ")");
  var lowerWhiskerExpr = "".concat(lowerBoxExpr, " - ").concat(extent, " * ").concat(iqrExpr);
  var upperWhiskerExpr = "".concat(upperBoxExpr, " + ").concat(extent, " * ").concat(iqrExpr);
  var fieldExpr = "datum[\"".concat(continuousAxisChannelDef.field, "\"]");
  var joinaggregateTransform = {
    joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
    groupby: groupby
  };
  var filteredWhiskerSpec = {
    transform: [{
      filter: "(".concat(lowerWhiskerExpr, " <= ").concat(fieldExpr, ") && (").concat(fieldExpr, " <= ").concat(upperWhiskerExpr, ")")
    }, {
      aggregate: [{
        op: 'min',
        field: continuousAxisChannelDef.field,
        as: "lower_whisker_".concat(continuousAxisChannelDef.field)
      }, {
        op: 'max',
        field: continuousAxisChannelDef.field,
        as: "upper_whisker_".concat(continuousAxisChannelDef.field)
      }, // preserve lower_box / upper_box
      {
        op: 'min',
        field: "lower_box_".concat(continuousAxisChannelDef.field),
        as: "lower_box_".concat(continuousAxisChannelDef.field)
      }, {
        op: 'max',
        field: "upper_box_".concat(continuousAxisChannelDef.field),
        as: "upper_box_".concat(continuousAxisChannelDef.field)
      }].concat((0,toConsumableArray/* default */.Z)(aggregate)),
      groupby: groupby
    }],
    layer: whiskerLayers
  };

  var tooltip = encodingWithoutSizeColorAndContinuousAxis.tooltip,
      encodingWithoutSizeColorContinuousAxisAndTooltip = (0,objectWithoutProperties/* default */.Z)(encodingWithoutSizeColorAndContinuousAxis, boxplot_excluded3);

  var scale = continuousAxisChannelDef.scale,
      axis = continuousAxisChannelDef.axis;
  var title = getTitle(continuousAxisChannelDef);
  var axisWithoutTitle = omit(axis, ['title']);
  var outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {
    transform: [{
      filter: "(".concat(fieldExpr, " < ").concat(lowerWhiskerExpr, ") || (").concat(fieldExpr, " > ").concat(upperWhiskerExpr, ")")
    }],
    mark: 'point',
    encoding: boxplot_objectSpread(boxplot_objectSpread(boxplot_objectSpread((0,defineProperty/* default */.Z)({}, continuousAxis, boxplot_objectSpread(boxplot_objectSpread(boxplot_objectSpread({
      field: continuousAxisChannelDef.field,
      type: continuousAxisChannelDef.type
    }, title !== undefined ? {
      title: title
    } : {}), scale !== undefined ? {
      scale: scale
    } : {}), isEmpty(axisWithoutTitle) ? {} : {
      axis: axisWithoutTitle
    })), encodingWithoutSizeColorContinuousAxisAndTooltip), color ? {
      color: color
    } : {}), customTooltipWithoutAggregatedField ? {
      tooltip: customTooltipWithoutAggregatedField
    } : {})
  })[0];
  var filteredLayersMixins;
  var filteredLayersMixinsTransforms = [].concat((0,toConsumableArray/* default */.Z)(bins), (0,toConsumableArray/* default */.Z)(timeUnits), [joinaggregateTransform]);

  if (outlierLayersMixins) {
    filteredLayersMixins = {
      transform: filteredLayersMixinsTransforms,
      layer: [outlierLayersMixins, filteredWhiskerSpec]
    };
  } else {
    var _filteredLayersMixins;

    filteredLayersMixins = filteredWhiskerSpec;

    (_filteredLayersMixins = filteredLayersMixins.transform).unshift.apply(_filteredLayersMixins, (0,toConsumableArray/* default */.Z)(filteredLayersMixinsTransforms));
  }

  return boxplot_objectSpread(boxplot_objectSpread({}, outerSpec), {}, {
    layer: [filteredLayersMixins, {
      // boxplot
      transform: transform,
      layer: boxLayers
    }]
  });
}

function boxParamsQuartiles(continousAxisField) {
  return [{
    op: 'q1',
    field: continousAxisField,
    as: "lower_box_".concat(continousAxisField)
  }, {
    op: 'q3',
    field: continousAxisField,
    as: "upper_box_".concat(continousAxisField)
  }];
}

function boxParams(spec, extent, config) {
  var orient = compositeMarkOrient(spec, BOXPLOT);

  var _compositeMarkContinu = compositeMarkContinuousAxis(spec, orient, BOXPLOT),
      continuousAxisChannelDef = _compositeMarkContinu.continuousAxisChannelDef,
      continuousAxis = _compositeMarkContinu.continuousAxis;

  var continuousFieldName = continuousAxisChannelDef.field;
  var boxPlotType = getBoxPlotType(extent);
  var boxplotSpecificAggregate = [].concat((0,toConsumableArray/* default */.Z)(boxParamsQuartiles(continuousFieldName)), [{
    op: 'median',
    field: continuousFieldName,
    as: "mid_box_".concat(continuousFieldName)
  }, {
    op: 'min',
    field: continuousFieldName,
    as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName
  }, {
    op: 'max',
    field: continuousFieldName,
    as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName
  }]);
  var postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose
  {
    calculate: "datum[\"upper_box_".concat(continuousFieldName, "\"] - datum[\"lower_box_").concat(continuousFieldName, "\"]"),
    as: "iqr_".concat(continuousFieldName)
  }, {
    calculate: "min(datum[\"upper_box_".concat(continuousFieldName, "\"] + datum[\"iqr_").concat(continuousFieldName, "\"] * ").concat(extent, ", datum[\"max_").concat(continuousFieldName, "\"])"),
    as: "upper_whisker_".concat(continuousFieldName)
  }, {
    calculate: "max(datum[\"lower_box_".concat(continuousFieldName, "\"] - datum[\"iqr_").concat(continuousFieldName, "\"] * ").concat(extent, ", datum[\"min_").concat(continuousFieldName, "\"])"),
    as: "lower_whisker_".concat(continuousFieldName)
  }];

  var _spec$encoding = spec.encoding,
      oldContinuousAxisChannelDef = _spec$encoding[continuousAxis],
      oldEncodingWithoutContinuousAxis = (0,objectWithoutProperties/* default */.Z)(_spec$encoding, [continuousAxis].map(_toPropertyKey));

  var _filterTooltipWithAgg = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis),
      customTooltipWithoutAggregatedField = _filterTooltipWithAgg.customTooltipWithoutAggregatedField,
      filteredEncoding = _filterTooltipWithAgg.filteredEncoding;

  var _extractTransformsFro = extractTransformsFromEncoding(filteredEncoding, config),
      bins = _extractTransformsFro.bins,
      timeUnits = _extractTransformsFro.timeUnits,
      aggregate = _extractTransformsFro.aggregate,
      groupby = _extractTransformsFro.groupby,
      encodingWithoutContinuousAxis = _extractTransformsFro.encoding;

  var ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';
  var boxOrient = orient;
  var transform = [].concat((0,toConsumableArray/* default */.Z)(bins), (0,toConsumableArray/* default */.Z)(timeUnits), [{
    aggregate: [].concat((0,toConsumableArray/* default */.Z)(aggregate), (0,toConsumableArray/* default */.Z)(boxplotSpecificAggregate)),
    groupby: groupby
  }], postAggregateCalculates);
  return {
    bins: bins,
    timeUnits: timeUnits,
    transform: transform,
    groupby: groupby,
    aggregate: aggregate,
    continuousAxisChannelDef: continuousAxisChannelDef,
    continuousAxis: continuousAxis,
    encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
    ticksOrient: ticksOrient,
    boxOrient: boxOrient,
    customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/errorbar.js



var errorbar_excluded = ["mark", "encoding", "params", "projection"];

function errorbar_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = errorbar_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function errorbar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return errorbar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return errorbar_arrayLikeToArray(o, minLen); }

function errorbar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function errorbar_toPropertyKey(arg) { var key = errorbar_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function errorbar_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function errorbar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function errorbar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { errorbar_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { errorbar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








var ERRORBAR = 'errorbar';
var ERRORBAR_PARTS = ['ticks', 'rule'];
var errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
function normalizeErrorBar(spec, _ref) {
  var config = _ref.config;
  // Need to initEncoding first so we can infer type
  spec = errorbar_objectSpread(errorbar_objectSpread({}, spec), {}, {
    encoding: normalizeEncoding(spec.encoding, config)
  });

  var _errorBarParams = errorBarParams(spec, ERRORBAR, config),
      transform = _errorBarParams.transform,
      continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,
      continuousAxis = _errorBarParams.continuousAxis,
      encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,
      ticksOrient = _errorBarParams.ticksOrient,
      markDef = _errorBarParams.markDef,
      outerSpec = _errorBarParams.outerSpec,
      tooltipEncoding = _errorBarParams.tooltipEncoding;

  delete encodingWithoutContinuousAxis['size'];
  var makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
  var thickness = markDef.thickness;
  var size = markDef.size;

  var tick = errorbar_objectSpread(errorbar_objectSpread({
    type: 'tick',
    orient: ticksOrient,
    aria: false
  }, thickness !== undefined ? {
    thickness: thickness
  } : {}), size !== undefined ? {
    size: size
  } : {});

  var layer = [].concat((0,toConsumableArray/* default */.Z)(makeErrorBarPart({
    partName: 'ticks',
    mark: tick,
    positionPrefix: 'lower',
    extraEncoding: tooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeErrorBarPart({
    partName: 'ticks',
    mark: tick,
    positionPrefix: 'upper',
    extraEncoding: tooltipEncoding
  })), (0,toConsumableArray/* default */.Z)(makeErrorBarPart({
    partName: 'rule',
    mark: errorbar_objectSpread({
      type: 'rule',
      ariaRoleDescription: 'errorbar'
    }, thickness !== undefined ? {
      size: thickness
    } : {}),
    positionPrefix: 'lower',
    endPositionPrefix: 'upper',
    extraEncoding: tooltipEncoding
  })));
  return errorbar_objectSpread(errorbar_objectSpread({}, outerSpec), {}, {
    transform: transform
  }, layer.length > 1 ? {
    layer: layer
  } : errorbar_objectSpread({}, layer[0]));
}

function errorBarOrientAndInputType(spec, compositeMark) {
  var encoding = spec.encoding;

  if (errorBarIsInputTypeRaw(encoding)) {
    return {
      orient: compositeMarkOrient(spec, compositeMark),
      inputType: 'raw'
    };
  }

  var isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
  var isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
  var x = encoding.x;
  var y = encoding.y;

  if (isTypeAggregatedUpperLower) {
    // type is aggregated-upper-lower
    if (isTypeAggregatedError) {
      throw new Error("".concat(compositeMark, " cannot be both type aggregated-upper-lower and aggregated-error"));
    }

    var x2 = encoding.x2;
    var y2 = encoding.y2;

    if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {
      // having both x, x2 and y, y2
      throw new Error("".concat(compositeMark, " cannot have both x2 and y2"));
    } else if (isFieldOrDatumDef(x2)) {
      if (isContinuousFieldOrDatumDef(x)) {
        // having x, x2 quantitative and field y, y2 are not specified
        return {
          orient: 'horizontal',
          inputType: 'aggregated-upper-lower'
        };
      } else {
        // having x, x2 that are not both quantitative
        throw new Error("Both x and x2 have to be quantitative in ".concat(compositeMark));
      }
    } else if (isFieldOrDatumDef(y2)) {
      // y2 is a FieldDef
      if (isContinuousFieldOrDatumDef(y)) {
        // having y, y2 quantitative and field x, x2 are not specified
        return {
          orient: 'vertical',
          inputType: 'aggregated-upper-lower'
        };
      } else {
        // having y, y2 that are not both quantitative
        throw new Error("Both y and y2 have to be quantitative in ".concat(compositeMark));
      }
    }

    throw new Error('No ranged axis');
  } else {
    // type is aggregated-error
    var xError = encoding.xError;
    var xError2 = encoding.xError2;
    var yError = encoding.yError;
    var yError2 = encoding.yError2;

    if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {
      // having xError2 without xError
      throw new Error("".concat(compositeMark, " cannot have xError2 without xError"));
    }

    if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {
      // having yError2 without yError
      throw new Error("".concat(compositeMark, " cannot have yError2 without yError"));
    }

    if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {
      // having both xError and yError
      throw new Error("".concat(compositeMark, " cannot have both xError and yError with both are quantiative"));
    } else if (isFieldOrDatumDef(xError)) {
      if (isContinuousFieldOrDatumDef(x)) {
        // having x and xError that are all quantitative
        return {
          orient: 'horizontal',
          inputType: 'aggregated-error'
        };
      } else {
        // having x, xError, and xError2 that are not all quantitative
        throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');
      }
    } else if (isFieldOrDatumDef(yError)) {
      if (isContinuousFieldOrDatumDef(y)) {
        // having y and yError that are all quantitative
        return {
          orient: 'vertical',
          inputType: 'aggregated-error'
        };
      } else {
        // having y, yError, and yError2 that are not all quantitative
        throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');
      }
    }

    throw new Error('No ranged axis');
  }
}

function errorBarIsInputTypeRaw(encoding) {
  return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);
}

function errorBarIsInputTypeAggregatedUpperLower(encoding) {
  return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);
}

function errorBarIsInputTypeAggregatedError(encoding) {
  return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);
}

function errorBarParams(spec, compositeMark, config) {
  var _outerSpec$transform;

  // TODO: use selection
  var mark = spec.mark,
      encoding = spec.encoding,
      params = spec.params,
      _p = spec.projection,
      outerSpec = (0,objectWithoutProperties/* default */.Z)(spec, errorbar_excluded);

  var markDef = isMarkDef(mark) ? mark : {
    type: mark
  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

  if (params) {
    log_warn(selectionNotSupported(compositeMark));
  }

  var _errorBarOrientAndInp = errorBarOrientAndInputType(spec, compositeMark),
      orient = _errorBarOrientAndInp.orient,
      inputType = _errorBarOrientAndInp.inputType;

  var _compositeMarkContinu = compositeMarkContinuousAxis(spec, orient, compositeMark),
      continuousAxisChannelDef = _compositeMarkContinu.continuousAxisChannelDef,
      continuousAxisChannelDef2 = _compositeMarkContinu.continuousAxisChannelDef2,
      continuousAxisChannelDefError = _compositeMarkContinu.continuousAxisChannelDefError,
      continuousAxisChannelDefError2 = _compositeMarkContinu.continuousAxisChannelDefError2,
      continuousAxis = _compositeMarkContinu.continuousAxis;

  var _errorBarAggregationA = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config),
      errorBarSpecificAggregate = _errorBarAggregationA.errorBarSpecificAggregate,
      postAggregateCalculates = _errorBarAggregationA.postAggregateCalculates,
      tooltipSummary = _errorBarAggregationA.tooltipSummary,
      tooltipTitleWithFieldName = _errorBarAggregationA.tooltipTitleWithFieldName;

  var _ref2 = continuousAxis === 'x' ? 'x2' : 'y2',
      _ref3 = continuousAxis === 'x' ? 'xError' : 'yError',
      _ref4 = continuousAxis === 'x' ? 'xError2' : 'yError2',
      oldContinuousAxisChannelDef = encoding[continuousAxis],
      oldContinuousAxisChannelDef2 = encoding[_ref2],
      oldContinuousAxisChannelDefError = encoding[_ref3],
      oldContinuousAxisChannelDefError2 = encoding[_ref4],
      oldEncodingWithoutContinuousAxis = (0,objectWithoutProperties/* default */.Z)(encoding, [continuousAxis, _ref2, _ref3, _ref4].map(errorbar_toPropertyKey));

  var _extractTransformsFro = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config),
      bins = _extractTransformsFro.bins,
      timeUnits = _extractTransformsFro.timeUnits,
      oldAggregate = _extractTransformsFro.aggregate,
      oldGroupBy = _extractTransformsFro.groupby,
      encodingWithoutContinuousAxis = _extractTransformsFro.encoding;

  var aggregate = [].concat((0,toConsumableArray/* default */.Z)(oldAggregate), (0,toConsumableArray/* default */.Z)(errorBarSpecificAggregate));
  var groupby = inputType !== 'raw' ? [] : oldGroupBy;
  var tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
  return {
    transform: [].concat((0,toConsumableArray/* default */.Z)((_outerSpec$transform = outerSpec.transform) !== null && _outerSpec$transform !== void 0 ? _outerSpec$transform : []), (0,toConsumableArray/* default */.Z)(bins), (0,toConsumableArray/* default */.Z)(timeUnits), (0,toConsumableArray/* default */.Z)(aggregate.length === 0 ? [] : [{
      aggregate: aggregate,
      groupby: groupby
    }]), (0,toConsumableArray/* default */.Z)(postAggregateCalculates)),
    groupby: groupby,
    continuousAxisChannelDef: continuousAxisChannelDef,
    continuousAxis: continuousAxis,
    encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
    ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',
    markDef: markDef,
    outerSpec: outerSpec,
    tooltipEncoding: tooltipEncoding
  };
}

function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
  var errorBarSpecificAggregate = [];
  var postAggregateCalculates = [];
  var continuousFieldName = continuousAxisChannelDef.field;
  var tooltipSummary;
  var tooltipTitleWithFieldName = false;

  if (inputType === 'raw') {
    var center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;
    var extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';

    if (center === 'median' !== (extent === 'iqr')) {
      log_warn(errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
    }

    if (extent === 'stderr' || extent === 'stdev') {
      errorBarSpecificAggregate = [{
        op: extent,
        field: continuousFieldName,
        as: "extent_".concat(continuousFieldName)
      }, {
        op: center,
        field: continuousFieldName,
        as: "center_".concat(continuousFieldName)
      }];
      postAggregateCalculates = [{
        calculate: "datum[\"center_".concat(continuousFieldName, "\"] + datum[\"extent_").concat(continuousFieldName, "\"]"),
        as: "upper_".concat(continuousFieldName)
      }, {
        calculate: "datum[\"center_".concat(continuousFieldName, "\"] - datum[\"extent_").concat(continuousFieldName, "\"]"),
        as: "lower_".concat(continuousFieldName)
      }];
      tooltipSummary = [{
        fieldPrefix: 'center_',
        titlePrefix: titleCase(center)
      }, {
        fieldPrefix: 'upper_',
        titlePrefix: getTitlePrefix(center, extent, '+')
      }, {
        fieldPrefix: 'lower_',
        titlePrefix: getTitlePrefix(center, extent, '-')
      }];
      tooltipTitleWithFieldName = true;
    } else {
      var centerOp;
      var lowerExtentOp;
      var upperExtentOp;

      if (extent === 'ci') {
        centerOp = 'mean';
        lowerExtentOp = 'ci0';
        upperExtentOp = 'ci1';
      } else {
        centerOp = 'median';
        lowerExtentOp = 'q1';
        upperExtentOp = 'q3';
      }

      errorBarSpecificAggregate = [{
        op: lowerExtentOp,
        field: continuousFieldName,
        as: "lower_".concat(continuousFieldName)
      }, {
        op: upperExtentOp,
        field: continuousFieldName,
        as: "upper_".concat(continuousFieldName)
      }, {
        op: centerOp,
        field: continuousFieldName,
        as: "center_".concat(continuousFieldName)
      }];
      tooltipSummary = [{
        fieldPrefix: 'upper_',
        titlePrefix: channeldef_title({
          field: continuousFieldName,
          aggregate: upperExtentOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }, {
        fieldPrefix: 'lower_',
        titlePrefix: channeldef_title({
          field: continuousFieldName,
          aggregate: lowerExtentOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }, {
        fieldPrefix: 'center_',
        titlePrefix: channeldef_title({
          field: continuousFieldName,
          aggregate: centerOp,
          type: 'quantitative'
        }, config, {
          allowDisabling: false
        })
      }];
    }
  } else {
    if (markDef.center || markDef.extent) {
      log_warn(errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
    }

    if (inputType === 'aggregated-upper-lower') {
      tooltipSummary = [];
      postAggregateCalculates = [{
        calculate: "datum[\"".concat(continuousAxisChannelDef2.field, "\"]"),
        as: "upper_".concat(continuousFieldName)
      }, {
        calculate: "datum[\"".concat(continuousFieldName, "\"]"),
        as: "lower_".concat(continuousFieldName)
      }];
    } else if (inputType === 'aggregated-error') {
      tooltipSummary = [{
        fieldPrefix: '',
        titlePrefix: continuousFieldName
      }];
      postAggregateCalculates = [{
        calculate: "datum[\"".concat(continuousFieldName, "\"] + datum[\"").concat(continuousAxisChannelDefError.field, "\"]"),
        as: "upper_".concat(continuousFieldName)
      }];

      if (continuousAxisChannelDefError2) {
        postAggregateCalculates.push({
          calculate: "datum[\"".concat(continuousFieldName, "\"] + datum[\"").concat(continuousAxisChannelDefError2.field, "\"]"),
          as: "lower_".concat(continuousFieldName)
        });
      } else {
        postAggregateCalculates.push({
          calculate: "datum[\"".concat(continuousFieldName, "\"] - datum[\"").concat(continuousAxisChannelDefError.field, "\"]"),
          as: "lower_".concat(continuousFieldName)
        });
      }
    }

    var _iterator = errorbar_createForOfIteratorHelper(postAggregateCalculates),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var postAggregateCalculate = _step.value;
        tooltipSummary.push({
          fieldPrefix: postAggregateCalculate.as.substring(0, 6),
          titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum["', ''), '"]', '')
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return {
    postAggregateCalculates: postAggregateCalculates,
    errorBarSpecificAggregate: errorBarSpecificAggregate,
    tooltipSummary: tooltipSummary,
    tooltipTitleWithFieldName: tooltipTitleWithFieldName
  };
}

function getTitlePrefix(center, extent, operation) {
  return "".concat(titleCase(center), " ").concat(operation, " ").concat(extent);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/errorband.js



function errorband_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function errorband_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { errorband_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { errorband_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






var ERRORBAND = 'errorband';
var ERRORBAND_PARTS = ['band', 'borders'];
var errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
function normalizeErrorBand(spec, _ref) {
  var config = _ref.config;
  // Need to initEncoding first so we can infer type
  spec = errorband_objectSpread(errorband_objectSpread({}, spec), {}, {
    encoding: normalizeEncoding(spec.encoding, config)
  });

  var _errorBarParams = errorBarParams(spec, ERRORBAND, config),
      transform = _errorBarParams.transform,
      continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,
      continuousAxis = _errorBarParams.continuousAxis,
      encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,
      markDef = _errorBarParams.markDef,
      outerSpec = _errorBarParams.outerSpec,
      tooltipEncoding = _errorBarParams.tooltipEncoding;

  var errorBandDef = markDef;
  var makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
  var is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
  var bandMark = {
    type: is2D ? 'area' : 'rect'
  };
  var bordersMark = {
    type: is2D ? 'line' : 'rule'
  };

  var interpolate = errorband_objectSpread(errorband_objectSpread({}, errorBandDef.interpolate ? {
    interpolate: errorBandDef.interpolate
  } : {}), errorBandDef.tension && errorBandDef.interpolate ? {
    tension: errorBandDef.tension
  } : {});

  if (is2D) {
    bandMark = errorband_objectSpread(errorband_objectSpread(errorband_objectSpread({}, bandMark), interpolate), {}, {
      ariaRoleDescription: 'errorband'
    });
    bordersMark = errorband_objectSpread(errorband_objectSpread(errorband_objectSpread({}, bordersMark), interpolate), {}, {
      aria: false
    });
  } else if (errorBandDef.interpolate) {
    log_warn(errorBand1DNotSupport('interpolate'));
  } else if (errorBandDef.tension) {
    log_warn(errorBand1DNotSupport('tension'));
  }

  return errorband_objectSpread(errorband_objectSpread({}, outerSpec), {}, {
    transform: transform,
    layer: [].concat((0,toConsumableArray/* default */.Z)(makeErrorBandPart({
      partName: 'band',
      mark: bandMark,
      positionPrefix: 'lower',
      endPositionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })), (0,toConsumableArray/* default */.Z)(makeErrorBandPart({
      partName: 'borders',
      mark: bordersMark,
      positionPrefix: 'lower',
      extraEncoding: tooltipEncoding
    })), (0,toConsumableArray/* default */.Z)(makeErrorBandPart({
      partName: 'borders',
      mark: bordersMark,
      positionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })))
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compositemark/index.js





/**
 * Registry index for all composite mark's normalizer
 */

var compositeMarkRegistry = {};
function compositemark_add(mark, run, parts) {
  var normalizer = new CompositeMarkNormalizer(mark, run);
  compositeMarkRegistry[mark] = {
    normalizer: normalizer,
    parts: parts
  };
}
function compositemark_remove(mark) {
  delete compositeMarkRegistry[mark];
}
function getAllCompositeMarks() {
  return util_keys(compositeMarkRegistry);
}
compositemark_add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
compositemark_add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
compositemark_add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/guide.js
var VL_ONLY_LEGEND_CONFIG = ['gradientHorizontalMaxLength', 'gradientHorizontalMinLength', 'gradientVerticalMaxLength', 'gradientVerticalMinLength', 'unselectedOpacity'];
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/header.js

var HEADER_TITLE_PROPERTIES_MAP = {
  titleAlign: 'align',
  titleAnchor: 'anchor',
  titleAngle: 'angle',
  titleBaseline: 'baseline',
  titleColor: 'color',
  titleFont: 'font',
  titleFontSize: 'fontSize',
  titleFontStyle: 'fontStyle',
  titleFontWeight: 'fontWeight',
  titleLimit: 'limit',
  titleLineHeight: 'lineHeight',
  titleOrient: 'orient',
  titlePadding: 'offset'
};
var HEADER_LABEL_PROPERTIES_MAP = {
  labelAlign: 'align',
  labelAnchor: 'anchor',
  labelAngle: 'angle',
  labelBaseline: 'baseline',
  labelColor: 'color',
  labelFont: 'font',
  labelFontSize: 'fontSize',
  labelFontStyle: 'fontStyle',
  labelFontWeight: 'fontWeight',
  labelLimit: 'limit',
  labelLineHeight: 'lineHeight',
  labelOrient: 'orient',
  labelPadding: 'offset'
};
var HEADER_TITLE_PROPERTIES = util_keys(HEADER_TITLE_PROPERTIES_MAP);
var HEADER_LABEL_PROPERTIES = util_keys(HEADER_LABEL_PROPERTIES_MAP);
var HEADER_CONFIGS_INDEX = {
  header: 1,
  headerRow: 1,
  headerColumn: 1,
  headerFacet: 1
};
var HEADER_CONFIGS = util_keys(HEADER_CONFIGS_INDEX);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/legend.js

var LEGEND_SCALE_CHANNELS = ['size', 'shape', 'fill', 'stroke', 'strokeDash', 'strokeWidth', 'opacity'];
var defaultLegendConfig = {
  gradientHorizontalMaxLength: 200,
  gradientHorizontalMinLength: 100,
  gradientVerticalMaxLength: 200,
  gradientVerticalMinLength: 64,
  unselectedOpacity: 0.35
};
var COMMON_LEGEND_PROPERTY_INDEX = {
  aria: 1,
  clipHeight: 1,
  columnPadding: 1,
  columns: 1,
  cornerRadius: 1,
  description: 1,
  direction: 1,
  fillColor: 1,
  format: 1,
  formatType: 1,
  gradientLength: 1,
  gradientOpacity: 1,
  gradientStrokeColor: 1,
  gradientStrokeWidth: 1,
  gradientThickness: 1,
  gridAlign: 1,
  labelAlign: 1,
  labelBaseline: 1,
  labelColor: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelOffset: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labelSeparation: 1,
  legendX: 1,
  legendY: 1,
  offset: 1,
  orient: 1,
  padding: 1,
  rowPadding: 1,
  strokeColor: 1,
  symbolDash: 1,
  symbolDashOffset: 1,
  symbolFillColor: 1,
  symbolLimit: 1,
  symbolOffset: 1,
  symbolOpacity: 1,
  symbolSize: 1,
  symbolStrokeColor: 1,
  symbolStrokeWidth: 1,
  symbolType: 1,
  tickCount: 1,
  tickMinStep: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleLineHeight: 1,
  titleOpacity: 1,
  titleOrient: 1,
  titlePadding: 1,
  type: 1,
  values: 1,
  zindex: 1
};
var LEGEND_PROPERTIES = util_keys(COMMON_LEGEND_PROPERTY_INDEX);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/selection.js

var selection_SELECTION_ID = '_vgsid_';
var defaultConfig = {
  point: {
    on: 'click',
    fields: [selection_SELECTION_ID],
    toggle: 'event.shiftKey',
    resolve: 'global',
    clear: 'dblclick'
  },
  interval: {
    on: '[mousedown, window:mouseup] > window:mousemove!',
    encodings: ['x', 'y'],
    translate: '[mousedown, window:mouseup] > window:mousemove!',
    zoom: 'wheel!',
    mark: {
      fill: '#333',
      fillOpacity: 0.125,
      stroke: 'white'
    },
    resolve: 'global',
    clear: 'dblclick'
  }
};
function isLegendBinding(bind) {
  return !!bind && (bind === 'legend' || !!bind.legend);
}
function isLegendStreamBinding(bind) {
  return isLegendBinding(bind) && isObject(bind);
}
function isSelectionParameter(param) {
  return !!param['select'];
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/parameter.js


var parameter_excluded = ["expr", "bind"];

function parameter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function parameter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { parameter_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { parameter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parameter_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = parameter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function parameter_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return parameter_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return parameter_arrayLikeToArray(o, minLen); }

function parameter_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


function assembleParameterSignals(params) {
  var signals = [];

  var _iterator = parameter_createForOfIteratorHelper(params || []),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var param = _step.value;
      // Selection parameters are handled separately via assembleSelectionTopLevelSignals
      // and assembleSignals methods registered on the Model.
      if (isSelectionParameter(param)) continue;

      var expr = param.expr,
          bind = param.bind,
          rest = (0,objectWithoutProperties/* default */.Z)(param, parameter_excluded);

      if (bind && expr) {
        // Vega's InitSignal -- apply expr to "init"
        var signal = parameter_objectSpread(parameter_objectSpread({}, rest), {}, {
          bind: bind,
          init: expr
        });

        signals.push(signal);
      } else {
        var _signal = parameter_objectSpread(parameter_objectSpread(parameter_objectSpread({}, rest), expr ? {
          update: expr
        } : {}), bind ? {
          bind: bind
        } : {});

        signals.push(_signal);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return signals;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/concat.js
function isAnyConcatSpec(spec) {
  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
}
function isConcatSpec(spec) {
  return 'concat' in spec;
}
function isVConcatSpec(spec) {
  return 'vconcat' in spec;
}
function isHConcatSpec(spec) {
  return 'hconcat' in spec;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/base.js
function base_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = base_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function base_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return base_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return base_arrayLikeToArray(o, minLen); }

function base_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





function isStep(size) {
  return isObject(size) && size['step'] !== undefined;
}
function isFrameMixins(o) {
  return o['view'] || o['width'] || o['height'];
}
var DEFAULT_SPACING = 20;
var COMPOSITION_LAYOUT_INDEX = {
  align: 1,
  bounds: 1,
  center: 1,
  columns: 1,
  spacing: 1
};
var COMPOSITION_LAYOUT_PROPERTIES = util_keys(COMPOSITION_LAYOUT_INDEX);
function extractCompositionLayout(spec, specType, config) {
  var compositionConfig = config[specType];
  var layout = {}; // Apply config first

  var spacingConfig = compositionConfig.spacing,
      columns = compositionConfig.columns;

  if (spacingConfig !== undefined) {
    layout.spacing = spacingConfig;
  }

  if (columns !== undefined) {
    if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {
      layout.columns = columns;
    }
  }

  if (isVConcatSpec(spec)) {
    layout.columns = 1;
  } // Then copy properties from the spec


  var _iterator = base_createForOfIteratorHelper(COMPOSITION_LAYOUT_PROPERTIES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;

      if (spec[prop] !== undefined) {
        if (prop === 'spacing') {
          var _spacing$row, _spacing$column;

          var spacing = spec[prop];
          layout[prop] = isNumber(spacing) ? spacing : {
            row: (_spacing$row = spacing.row) !== null && _spacing$row !== void 0 ? _spacing$row : spacingConfig,
            column: (_spacing$column = spacing.column) !== null && _spacing$column !== void 0 ? _spacing$column : spacingConfig
          };
        } else {
          layout[prop] = spec[prop];
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return layout;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/config.js



var config_excluded = ["color", "font", "fontSize"];

function config_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = config_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function config_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return config_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return config_arrayLikeToArray(o, minLen); }

function config_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function config_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function config_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { config_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { config_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

















function getViewConfigContinuousSize(viewConfig, channel) {
  var _viewConfig$channel;

  return (_viewConfig$channel = viewConfig[channel]) !== null && _viewConfig$channel !== void 0 ? _viewConfig$channel : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility
}
function getViewConfigDiscreteStep(viewConfig, channel) {
  var size = getViewConfigDiscreteSize(viewConfig, channel);
  return isStep(size) ? size.step : DEFAULT_STEP;
}
function getViewConfigDiscreteSize(viewConfig, channel) {
  var _viewConfig$channel2;

  var size = (_viewConfig$channel2 = viewConfig[channel]) !== null && _viewConfig$channel2 !== void 0 ? _viewConfig$channel2 : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility

  return getFirstDefined(size, {
    step: viewConfig.step
  });
}
var DEFAULT_STEP = 20;
var defaultViewConfig = {
  continuousWidth: 200,
  continuousHeight: 200,
  step: DEFAULT_STEP
};
function isVgScheme(rangeScheme) {
  return rangeScheme && !!rangeScheme['scheme'];
}
var config_defaultConfig = {
  background: 'white',
  padding: 5,
  timeFormat: '%b %d, %Y',
  countTitle: 'Count of Records',
  view: defaultViewConfig,
  mark: defaultMarkConfig,
  arc: {},
  area: {},
  bar: defaultBarConfig,
  circle: {},
  geoshape: {},
  image: {},
  line: {},
  point: {},
  rect: defaultRectConfig,
  rule: {
    color: 'black'
  },
  square: {},
  text: {
    color: 'black'
  },
  tick: defaultTickConfig,
  trail: {},
  boxplot: {
    size: 14,
    extent: 1.5,
    box: {},
    median: {
      color: 'white'
    },
    outliers: {},
    rule: {},
    ticks: null
  },
  errorbar: {
    center: 'mean',
    rule: true,
    ticks: false
  },
  errorband: {
    band: {
      opacity: 0.3
    },
    borders: false
  },
  scale: defaultScaleConfig,
  projection: {},
  legend: defaultLegendConfig,
  header: {
    titlePadding: 10,
    labelPadding: 10
  },
  headerColumn: {},
  headerRow: {},
  headerFacet: {},
  selection: defaultConfig,
  style: {},
  title: {},
  facet: {
    spacing: DEFAULT_SPACING
  },
  concat: {
    spacing: DEFAULT_SPACING
  }
}; // Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`

var tab10 = ['#4c78a8', '#f58518', '#e45756', '#72b7b2', '#54a24b', '#eeca3b', '#b279a2', '#ff9da6', '#9d755d', '#bab0ac'];
var DEFAULT_FONT_SIZE = {
  text: 11,
  guideLabel: 10,
  guideTitle: 11,
  groupTitle: 13,
  groupSubtitle: 12
};
var DEFAULT_COLOR = {
  blue: tab10[0],
  orange: tab10[1],
  red: tab10[2],
  teal: tab10[3],
  green: tab10[4],
  yellow: tab10[5],
  purple: tab10[6],
  pink: tab10[7],
  brown: tab10[8],
  gray0: '#000',
  gray1: '#111',
  gray2: '#222',
  gray3: '#333',
  gray4: '#444',
  gray5: '#555',
  gray6: '#666',
  gray7: '#777',
  gray8: '#888',
  gray9: '#999',
  gray10: '#aaa',
  gray11: '#bbb',
  gray12: '#ccc',
  gray13: '#ddd',
  gray14: '#eee',
  gray15: '#fff'
};
function colorSignalConfig() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    signals: [{
      name: 'color',
      value: isObject(color) ? config_objectSpread(config_objectSpread({}, DEFAULT_COLOR), color) : DEFAULT_COLOR
    }],
    mark: {
      color: {
        signal: 'color.blue'
      }
    },
    rule: {
      color: {
        signal: 'color.gray0'
      }
    },
    text: {
      color: {
        signal: 'color.gray0'
      }
    },
    style: {
      'guide-label': {
        fill: {
          signal: 'color.gray0'
        }
      },
      'guide-title': {
        fill: {
          signal: 'color.gray0'
        }
      },
      'group-title': {
        fill: {
          signal: 'color.gray0'
        }
      },
      'group-subtitle': {
        fill: {
          signal: 'color.gray0'
        }
      },
      cell: {
        stroke: {
          signal: 'color.gray8'
        }
      }
    },
    axis: {
      domainColor: {
        signal: 'color.gray13'
      },
      gridColor: {
        signal: 'color.gray8'
      },
      tickColor: {
        signal: 'color.gray13'
      }
    },
    range: {
      category: [{
        signal: 'color.blue'
      }, {
        signal: 'color.orange'
      }, {
        signal: 'color.red'
      }, {
        signal: 'color.teal'
      }, {
        signal: 'color.green'
      }, {
        signal: 'color.yellow'
      }, {
        signal: 'color.purple'
      }, {
        signal: 'color.pink'
      }, {
        signal: 'color.brown'
      }, {
        signal: 'color.grey8'
      }]
    }
  };
}
function fontSizeSignalConfig(fontSize) {
  return {
    signals: [{
      name: 'fontSize',
      value: isObject(fontSize) ? config_objectSpread(config_objectSpread({}, DEFAULT_FONT_SIZE), fontSize) : DEFAULT_FONT_SIZE
    }],
    text: {
      fontSize: {
        signal: 'fontSize.text'
      }
    },
    style: {
      'guide-label': {
        fontSize: {
          signal: 'fontSize.guideLabel'
        }
      },
      'guide-title': {
        fontSize: {
          signal: 'fontSize.guideTitle'
        }
      },
      'group-title': {
        fontSize: {
          signal: 'fontSize.groupTitle'
        }
      },
      'group-subtitle': {
        fontSize: {
          signal: 'fontSize.groupSubtitle'
        }
      }
    }
  };
}
function fontConfig(font) {
  return {
    text: {
      font: font
    },
    style: {
      'guide-label': {
        font: font
      },
      'guide-title': {
        font: font
      },
      'group-title': {
        font: font
      },
      'group-subtitle': {
        font: font
      }
    }
  };
}

function getAxisConfigInternal(axisConfig) {
  var props = util_keys(axisConfig || {});
  var axisConfigInternal = {};

  var _iterator = config_createForOfIteratorHelper(props),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;
      var val = axisConfig[prop];
      axisConfigInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return axisConfigInternal;
}

function getStyleConfigInternal(styleConfig) {
  var props = util_keys(styleConfig);
  var styleConfigInternal = {};

  var _iterator2 = config_createForOfIteratorHelper(props),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var prop = _step2.value;
      // We need to cast to cheat a bit here since styleConfig can be either mark config or axis config
      styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return styleConfigInternal;
}

var configPropsWithExpr = [].concat((0,toConsumableArray/* default */.Z)(MARK_CONFIGS), (0,toConsumableArray/* default */.Z)(AXIS_CONFIGS), (0,toConsumableArray/* default */.Z)(HEADER_CONFIGS), ['background', 'padding', 'legend', 'lineBreak', 'scale', 'style', 'title', 'view']);
/**
 * Merge specified config with default config and config for the `color` flag,
 * then replace all expressions with signals
 */

function initConfig() {
  var specifiedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var color = specifiedConfig.color,
      font = specifiedConfig.font,
      fontSize = specifiedConfig.fontSize,
      restConfig = (0,objectWithoutProperties/* default */.Z)(specifiedConfig, config_excluded);

  var mergedConfig = mergeConfig({}, config_defaultConfig, font ? fontConfig(font) : {}, color ? colorSignalConfig(color) : {}, fontSize ? fontSizeSignalConfig(fontSize) : {}, restConfig || {});
  var outputConfig = omit(mergedConfig, configPropsWithExpr);

  for (var _i = 0, _arr = ['background', 'lineBreak', 'padding']; _i < _arr.length; _i++) {
    var prop = _arr[_i];

    if (mergedConfig[prop]) {
      outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);
    }
  }

  var _iterator3 = config_createForOfIteratorHelper(MARK_CONFIGS),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var markConfigType = _step3.value;

      if (mergedConfig[markConfigType]) {
        // FIXME: outputConfig[markConfigType] expects that types are replaced recursively but replaceExprRef only replaces one level deep
        outputConfig[markConfigType] = replaceExprRef(mergedConfig[markConfigType]);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var _iterator4 = config_createForOfIteratorHelper(AXIS_CONFIGS),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var axisConfigType = _step4.value;

      if (mergedConfig[axisConfigType]) {
        outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  var _iterator5 = config_createForOfIteratorHelper(HEADER_CONFIGS),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var headerConfigType = _step5.value;

      if (mergedConfig[headerConfigType]) {
        outputConfig[headerConfigType] = replaceExprRef(mergedConfig[headerConfigType]);
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if (mergedConfig.legend) {
    outputConfig.legend = replaceExprRef(mergedConfig.legend);
  }

  if (mergedConfig.scale) {
    outputConfig.scale = replaceExprRef(mergedConfig.scale);
  }

  if (mergedConfig.style) {
    outputConfig.style = getStyleConfigInternal(mergedConfig.style);
  }

  if (mergedConfig.title) {
    outputConfig.title = replaceExprRef(mergedConfig.title);
  }

  if (mergedConfig.view) {
    outputConfig.view = replaceExprRef(mergedConfig.view);
  }

  return outputConfig;
}
var MARK_STYLES = ['view'].concat((0,toConsumableArray/* default */.Z)(PRIMITIVE_MARKS));
var VL_ONLY_CONFIG_PROPERTIES = ['color', 'fontSize', 'background', 'padding', 'facet', 'concat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'axisQuantitative', 'axisTemporal', 'axisDiscrete', 'axisPoint', 'axisXBand', 'axisXPoint', 'axisXDiscrete', 'axisXQuantitative', 'axisXTemporal', 'axisYBand', 'axisYPoint', 'axisYDiscrete', 'axisYQuantitative', 'axisYTemporal', 'scale', 'selection', 'overlay' // FIXME: Redesign and unhide this
];

var VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = config_objectSpread({
  view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step']
}, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);

function stripAndRedirectConfig(config) {
  config = duplicate(config);

  var _iterator6 = config_createForOfIteratorHelper(VL_ONLY_CONFIG_PROPERTIES),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var _prop4 = _step6.value;
      delete config[_prop4];
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  if (config.axis) {
    // delete condition axis config
    for (var prop in config.axis) {
      if (isConditionalAxisValue(config.axis[prop])) {
        delete config.axis[prop];
      }
    }
  }

  if (config.legend) {
    var _iterator7 = config_createForOfIteratorHelper(VL_ONLY_LEGEND_CONFIG),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _prop = _step7.value;
        delete config.legend[_prop];
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
  } // Remove Vega-Lite only generic mark config


  if (config.mark) {
    var _iterator8 = config_createForOfIteratorHelper(VL_ONLY_MARK_CONFIG_PROPERTIES),
        _step8;

    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var _prop2 = _step8.value;
        delete config.mark[_prop2];
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }

    if (config.mark.tooltip && isObject(config.mark.tooltip)) {
      delete config.mark.tooltip;
    }
  }

  if (config.params) {
    config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));
    delete config.params;
  }

  var _iterator9 = config_createForOfIteratorHelper(MARK_STYLES),
      _step9;

  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var markType = _step9.value;

      // Remove Vega-Lite-only mark config
      var _iterator11 = config_createForOfIteratorHelper(VL_ONLY_MARK_CONFIG_PROPERTIES),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _prop6 = _step11.value;
          delete config[markType][_prop6];
        } // Remove Vega-Lite only mark-specific config

      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      var vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];

      if (vlOnlyMarkSpecificConfigs) {
        var _iterator12 = config_createForOfIteratorHelper(vlOnlyMarkSpecificConfigs),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _prop5 = _step12.value;
            delete config[markType][_prop5];
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      } // Redirect mark config to config.style so that mark config only affect its own mark type
      // without affecting other marks that share the same underlying Vega marks.
      // For example, config.rect should not affect bar marks.


      redirectConfigToStyleConfig(config, markType);
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }

  var _iterator10 = config_createForOfIteratorHelper(getAllCompositeMarks()),
      _step10;

  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var m = _step10.value;
      // Clean up the composite mark config as we don't need them in the output specs anymore
      delete config[m];
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }

  redirectTitleConfig(config); // Remove empty config objects.

  for (var _prop3 in config) {
    if (isObject(config[_prop3]) && isEmpty(config[_prop3])) {
      delete config[_prop3];
    }
  }

  return isEmpty(config) ? undefined : config;
}
/**
 *
 * Redirect config.title -- so that title config do not affect header labels,
 * which also uses `title` directive to implement.
 *
 * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.
 */

function redirectTitleConfig(config) {
  var _extractTitleConfig = extractTitleConfig(config.title),
      titleMarkConfig = _extractTitleConfig.titleMarkConfig,
      subtitleMarkConfig = _extractTitleConfig.subtitleMarkConfig,
      subtitle = _extractTitleConfig.subtitle; // set config.style if title/subtitleMarkConfig is not an empty object


  if (!isEmpty(titleMarkConfig)) {
    config.style['group-title'] = config_objectSpread(config_objectSpread({}, config.style['group-title']), titleMarkConfig);
  }

  if (!isEmpty(subtitleMarkConfig)) {
    config.style['group-subtitle'] = config_objectSpread(config_objectSpread({}, config.style['group-subtitle']), subtitleMarkConfig);
  } // subtitle part can stay in config.title since header titles do not use subtitle


  if (!isEmpty(subtitle)) {
    config.title = subtitle;
  } else {
    delete config.title;
  }
}

function redirectConfigToStyleConfig(config, prop, // string = composite mark
toProp, compositeMarkPart) {
  var _toProp;

  var propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];

  if (prop === 'view') {
    toProp = 'cell'; // View's default style is "cell"
  }

  var style = config_objectSpread(config_objectSpread({}, propConfig), config.style[(_toProp = toProp) !== null && _toProp !== void 0 ? _toProp : prop]); // set config.style if it is not an empty object


  if (!isEmpty(style)) {
    var _toProp2;

    config.style[(_toProp2 = toProp) !== null && _toProp2 !== void 0 ? _toProp2 : prop] = style;
  }

  if (!compositeMarkPart) {
    // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
    delete config[prop];
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/layer.js
function isLayerSpec(spec) {
  return 'layer' in spec;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/repeat.js

function isRepeatSpec(spec) {
  return 'repeat' in spec;
}
function isLayerRepeatSpec(spec) {
  return !isArray(spec.repeat) && spec.repeat['layer'];
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/index.js





// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/get.js + 1 modules
var esm_get = __webpack_require__(66213);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/map.js




var map_excluded = ["concat"];

function map_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function map_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { map_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { map_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var SpecMapper = /*#__PURE__*/function () {
  function SpecMapper() {
    (0,classCallCheck/* default */.Z)(this, SpecMapper);
  }

  (0,createClass/* default */.Z)(SpecMapper, [{
    key: "map",
    value: function map(spec, params) {
      if (isFacetSpec(spec)) {
        return this.mapFacet(spec, params);
      } else if (isRepeatSpec(spec)) {
        return this.mapRepeat(spec, params);
      } else if (isHConcatSpec(spec)) {
        return this.mapHConcat(spec, params);
      } else if (isVConcatSpec(spec)) {
        return this.mapVConcat(spec, params);
      } else if (isConcatSpec(spec)) {
        return this.mapConcat(spec, params);
      } else {
        return this.mapLayerOrUnit(spec, params);
      }
    }
  }, {
    key: "mapLayerOrUnit",
    value: function mapLayerOrUnit(spec, params) {
      if (isLayerSpec(spec)) {
        return this.mapLayer(spec, params);
      } else if (isUnitSpec(spec)) {
        return this.mapUnit(spec, params);
      }

      throw new Error(invalidSpec(spec));
    }
  }, {
    key: "mapLayer",
    value: function mapLayer(spec, params) {
      var _this = this;

      return map_objectSpread(map_objectSpread({}, spec), {}, {
        layer: spec.layer.map(function (subspec) {
          return _this.mapLayerOrUnit(subspec, params);
        })
      });
    }
  }, {
    key: "mapHConcat",
    value: function mapHConcat(spec, params) {
      var _this2 = this;

      return map_objectSpread(map_objectSpread({}, spec), {}, {
        hconcat: spec.hconcat.map(function (subspec) {
          return _this2.map(subspec, params);
        })
      });
    }
  }, {
    key: "mapVConcat",
    value: function mapVConcat(spec, params) {
      var _this3 = this;

      return map_objectSpread(map_objectSpread({}, spec), {}, {
        vconcat: spec.vconcat.map(function (subspec) {
          return _this3.map(subspec, params);
        })
      });
    }
  }, {
    key: "mapConcat",
    value: function mapConcat(spec, params) {
      var _this4 = this;

      var concat = spec.concat,
          rest = (0,objectWithoutProperties/* default */.Z)(spec, map_excluded);

      return map_objectSpread(map_objectSpread({}, rest), {}, {
        concat: concat.map(function (subspec) {
          return _this4.map(subspec, params);
        })
      });
    }
  }, {
    key: "mapFacet",
    value: function mapFacet(spec, params) {
      return map_objectSpread(map_objectSpread({}, spec), {}, {
        // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
        spec: this.map(spec.spec, params)
      });
    }
  }, {
    key: "mapRepeat",
    value: function mapRepeat(spec, params) {
      return map_objectSpread(map_objectSpread({}, spec), {}, {
        // as any is required here since TS cannot infer that the output type satisfies the input type
        spec: this.map(spec.spec, params)
      });
    }
  }]);

  return SpecMapper;
}();
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/stack.js
function stack_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = stack_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function stack_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return stack_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return stack_arrayLikeToArray(o, minLen); }

function stack_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }










var STACK_OFFSET_INDEX = {
  zero: 1,
  center: 1,
  normalize: 1
};
function isStackOffset(s) {
  return s in STACK_OFFSET_INDEX;
}
var STACKABLE_MARKS = new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, mark_TEXT, TICK]);
var STACK_BY_DEFAULT_MARKS = new Set([BAR, AREA, ARC]);

function potentialStackedChannel(encoding, x) {
  var y = x === 'x' ? 'y' : 'radius';
  var xDef = encoding[x];
  var yDef = encoding[y];

  if (isFieldDef(xDef) && isFieldDef(yDef)) {
    if (channelDefType(xDef) === 'quantitative' && channelDefType(yDef) === 'quantitative') {
      if (xDef.stack) {
        return x;
      } else if (yDef.stack) {
        return y;
      }

      var xAggregate = isFieldDef(xDef) && !!xDef.aggregate;
      var yAggregate = isFieldDef(yDef) && !!yDef.aggregate; // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y

      if (xAggregate !== yAggregate) {
        return xAggregate ? x : y;
      } else {
        var _xDef$scale, _yDef$scale;

        var xScale = (_xDef$scale = xDef.scale) === null || _xDef$scale === void 0 ? void 0 : _xDef$scale.type;
        var yScale = (_yDef$scale = yDef.scale) === null || _yDef$scale === void 0 ? void 0 : _yDef$scale.type;

        if (xScale && xScale !== 'linear') {
          return y;
        } else if (yScale && yScale !== 'linear') {
          return x;
        }
      }
    } else if (channelDefType(xDef) === 'quantitative') {
      return x;
    } else if (channelDefType(yDef) === 'quantitative') {
      return y;
    }
  } else if (channelDefType(xDef) === 'quantitative') {
    return x;
  } else if (channelDefType(yDef) === 'quantitative') {
    return y;
  }

  return undefined;
}

function getDimensionChannel(channel) {
  switch (channel) {
    case 'x':
      return 'y';

    case 'y':
      return 'x';

    case 'theta':
      return 'radius';

    case 'radius':
      return 'theta';
  }
} // Note: CompassQL uses this method and only pass in required properties of each argument object.
// If required properties change, make sure to update CompassQL.


function stack(m, encoding) {
  var _stackedFieldDef$scal, _stackedFieldDef$scal2;

  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var mark = isMarkDef(m) ? m.type : m; // Should have stackable mark

  if (!STACKABLE_MARKS.has(mark)) {
    return null;
  } // Run potential stacked twice, one for Cartesian and another for Polar,
  // so text marks can be stacked in any of the coordinates.
  // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.
  // However, since we probably never want to do that, let's just note the limitation here.


  var fieldChannel = potentialStackedChannel(encoding, 'x') || potentialStackedChannel(encoding, 'theta');

  if (!fieldChannel) {
    return null;
  }

  var stackedFieldDef = encoding[fieldChannel];
  var stackedField = isFieldDef(stackedFieldDef) ? channeldef_vgField(stackedFieldDef, {}) : undefined;
  var dimensionChannel = getDimensionChannel(fieldChannel);
  var dimensionDef = encoding[dimensionChannel];
  var dimensionField = isFieldDef(dimensionDef) ? channeldef_vgField(dimensionDef, {}) : undefined; // avoid grouping by the stacked field

  if (dimensionField === stackedField) {
    dimensionField = undefined;
    dimensionDef = undefined;
    dimensionChannel = undefined;
  } // Should have grouping level of detail that is different from the dimension field


  var stackBy = NONPOSITION_CHANNELS.reduce(function (sc, channel) {
    // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
    if (channel !== 'tooltip' && encoding_channelHasField(encoding, channel)) {
      var channelDef = encoding[channel];

      var _iterator = stack_createForOfIteratorHelper(array(channelDef)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cDef = _step.value;
          var fieldDef = getFieldDef(cDef);

          if (fieldDef.aggregate) {
            continue;
          } // Check whether the channel's field is identical to x/y's field or if the channel is a repeat


          var f = channeldef_vgField(fieldDef, {});

          if ( // if fielddef is a repeat, just include it in the stack by
          !f || // otherwise, the field must be different from x and y fields.
          f !== dimensionField) {
            sc.push({
              channel: channel,
              fieldDef: fieldDef
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return sc;
  }, []); // Automatically determine offset

  var offset;

  if (stackedFieldDef.stack !== undefined) {
    if (isBoolean(stackedFieldDef.stack)) {
      offset = stackedFieldDef.stack ? 'zero' : null;
    } else {
      offset = stackedFieldDef.stack;
    }
  } else if (STACK_BY_DEFAULT_MARKS.has(mark)) {
    offset = 'zero';
  }

  if (!offset || !isStackOffset(offset)) {
    return null;
  }

  if (isAggregate(encoding) && stackBy.length === 0) {
    return null;
  } // warn when stacking non-linear


  if (stackedFieldDef !== null && stackedFieldDef !== void 0 && (_stackedFieldDef$scal = stackedFieldDef.scale) !== null && _stackedFieldDef$scal !== void 0 && _stackedFieldDef$scal.type && (stackedFieldDef === null || stackedFieldDef === void 0 ? void 0 : (_stackedFieldDef$scal2 = stackedFieldDef.scale) === null || _stackedFieldDef$scal2 === void 0 ? void 0 : _stackedFieldDef$scal2.type) !== ScaleType.LINEAR) {
    if (opt.disallowNonLinearStack) {
      return null;
    } else {
      log_warn(cannotStackNonLinearScale(stackedFieldDef.scale.type));
    }
  } // Check if it is a ranged mark


  if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {
    if (stackedFieldDef.stack !== undefined) {
      log_warn(cannotStackRangedMark(fieldChannel));
    }

    return null;
  } // Warn if stacking non-summative aggregate


  if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !util_contains(SUM_OPS, stackedFieldDef.aggregate)) {
    log_warn(stackNonSummativeAggregate(stackedFieldDef.aggregate));
  }

  return {
    groupbyChannel: dimensionDef ? dimensionChannel : undefined,
    groupbyField: dimensionField,
    fieldChannel: fieldChannel,
    impute: stackedFieldDef.impute === null ? false : isPathMark(mark),
    stackBy: stackBy,
    offset: offset
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/pathoverlay.js




var pathoverlay_excluded = ["point", "line"],
    pathoverlay_excluded2 = ["params", "projection", "mark", "encoding"];

function pathoverlay_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function pathoverlay_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { pathoverlay_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { pathoverlay_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








function dropLineAndPoint(markDef) {
  var _point = markDef.point,
      _line = markDef.line,
      mark = (0,objectWithoutProperties/* default */.Z)(markDef, pathoverlay_excluded);

  return util_keys(mark).length > 1 ? mark : mark.type;
}

function dropLineAndPointFromConfig(config) {
  for (var _i = 0, _arr = ['line', 'area', 'rule', 'trail']; _i < _arr.length; _i++) {
    var mark = _arr[_i];

    if (config[mark]) {
      config = pathoverlay_objectSpread(pathoverlay_objectSpread({}, config), {}, (0,defineProperty/* default */.Z)({}, mark, omit(config[mark], ['point', 'line'])));
    }
  }

  return config;
}

function getPointOverlay(markDef) {
  var markConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var encoding = arguments.length > 2 ? arguments[2] : undefined;

  if (markDef.point === 'transparent') {
    return {
      opacity: 0
    };
  } else if (markDef.point) {
    // truthy : true or object
    return isObject(markDef.point) ? markDef.point : {};
  } else if (markDef.point !== undefined) {
    // false or null
    return null;
  } else {
    // undefined (not disabled)
    if (markConfig.point || encoding.shape) {
      // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
      return isObject(markConfig.point) ? markConfig.point : {};
    } // markDef.point is defined as falsy


    return undefined;
  }
}

function getLineOverlay(markDef) {
  var markConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (markDef.line) {
    // true or object
    return markDef.line === true ? {} : markDef.line;
  } else if (markDef.line !== undefined) {
    // false or null
    return null;
  } else {
    // undefined (not disabled)
    if (markConfig.line) {
      // enable line overlay if config[mark].line is truthy
      return markConfig.line === true ? {} : markConfig.line;
    } // markDef.point is defined as falsy


    return undefined;
  }
}

var PathOverlayNormalizer = /*#__PURE__*/function () {
  function PathOverlayNormalizer() {
    (0,classCallCheck/* default */.Z)(this, PathOverlayNormalizer);

    this.name = 'path-overlay';
  }

  (0,createClass/* default */.Z)(PathOverlayNormalizer, [{
    key: "hasMatchingType",
    value: function hasMatchingType(spec, config) {
      if (isUnitSpec(spec)) {
        var mark = spec.mark,
            encoding = spec.encoding;
        var markDef = isMarkDef(mark) ? mark : {
          type: mark
        };

        switch (markDef.type) {
          case 'line':
          case 'rule':
          case 'trail':
            return !!getPointOverlay(markDef, config[markDef.type], encoding);

          case 'area':
            return (// false / null are also included as we want to remove the properties
              !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])
            );
        }
      }

      return false;
    }
  }, {
    key: "run",
    value: function run(spec, normParams, normalize) {
      var config = normParams.config;

      var params = spec.params,
          projection = spec.projection,
          mark = spec.mark,
          e = spec.encoding,
          outerSpec = (0,objectWithoutProperties/* default */.Z)(spec, pathoverlay_excluded2); // Need to call normalizeEncoding because we need the inferred types to correctly determine stack


      var encoding = normalizeEncoding(e, config);
      var markDef = isMarkDef(mark) ? mark : {
        type: mark
      };
      var pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
      var lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);
      var layer = [pathoverlay_objectSpread(pathoverlay_objectSpread({}, params ? {
        params: params
      } : {}), {}, {
        mark: dropLineAndPoint(pathoverlay_objectSpread(pathoverlay_objectSpread({}, markDef.type === 'area' && markDef.opacity === undefined && markDef.fillOpacity === undefined ? {
          opacity: 0.7
        } : {}), markDef)),
        // drop shape from encoding as this might be used to trigger point overlay
        encoding: omit(encoding, ['shape'])
      })]; // FIXME: determine rules for applying selections.
      // Need to copy stack config to overlayed layer

      var stackProps = stack(markDef, encoding);
      var overlayEncoding = encoding;

      if (stackProps) {
        var stackFieldChannel = stackProps.fieldChannel,
            offset = stackProps.offset;
        overlayEncoding = pathoverlay_objectSpread(pathoverlay_objectSpread({}, encoding), {}, (0,defineProperty/* default */.Z)({}, stackFieldChannel, pathoverlay_objectSpread(pathoverlay_objectSpread({}, encoding[stackFieldChannel]), offset ? {
          stack: offset
        } : {})));
      }

      if (lineOverlay) {
        layer.push(pathoverlay_objectSpread(pathoverlay_objectSpread({}, projection ? {
          projection: projection
        } : {}), {}, {
          mark: pathoverlay_objectSpread(pathoverlay_objectSpread({
            type: 'line'
          }, util_pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip'])), lineOverlay),
          encoding: overlayEncoding
        }));
      }

      if (pointOverlay) {
        layer.push(pathoverlay_objectSpread(pathoverlay_objectSpread({}, projection ? {
          projection: projection
        } : {}), {}, {
          mark: pathoverlay_objectSpread(pathoverlay_objectSpread({
            type: 'point',
            opacity: 1,
            filled: true
          }, util_pick(markDef, ['clip', 'tooltip'])), pointOverlay),
          encoding: overlayEncoding
        }));
      }

      return normalize(pathoverlay_objectSpread(pathoverlay_objectSpread({}, outerSpec), {}, {
        layer: layer
      }), pathoverlay_objectSpread(pathoverlay_objectSpread({}, normParams), {}, {
        config: dropLineAndPointFromConfig(config)
      }));
    }
  }]);

  return PathOverlayNormalizer;
}();
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/repeater.js


var repeater_excluded = ["condition"];

function repeater_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function repeater_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { repeater_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { repeater_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






function replaceRepeaterInFacet(facet, repeater) {
  if (!repeater) {
    return facet;
  }

  if (isFacetMapping(facet)) {
    return replaceRepeaterInMapping(facet, repeater);
  }

  return replaceRepeaterInFieldDef(facet, repeater);
}
function replaceRepeaterInEncoding(encoding, repeater) {
  if (!repeater) {
    return encoding;
  }

  return replaceRepeaterInMapping(encoding, repeater);
}
/**
 * Replaces repeated value and returns if the repeated value is valid.
 */

function replaceRepeatInProp(prop, o, repeater) {
  var val = o[prop];

  if (isRepeatRef(val)) {
    if (val.repeat in repeater) {
      return repeater_objectSpread(repeater_objectSpread({}, o), {}, (0,defineProperty/* default */.Z)({}, prop, repeater[val.repeat]));
    } else {
      log_warn(noSuchRepeatedValue(val.repeat));
      return undefined;
    }
  }

  return o;
}
/**
 * Replace repeater values in a field def with the concrete field name.
 */


function replaceRepeaterInFieldDef(fieldDef, repeater) {
  fieldDef = replaceRepeatInProp('field', fieldDef, repeater);

  if (fieldDef === undefined) {
    // the field def should be ignored
    return undefined;
  } else if (fieldDef === null) {
    return null;
  }

  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
    var sort = replaceRepeatInProp('field', fieldDef.sort, repeater);
    fieldDef = repeater_objectSpread(repeater_objectSpread({}, fieldDef), sort ? {
      sort: sort
    } : {});
  }

  return fieldDef;
}

function replaceRepeaterInFieldOrDatumDef(def, repeater) {
  if (isFieldDef(def)) {
    return replaceRepeaterInFieldDef(def, repeater);
  } else {
    var datumDef = replaceRepeatInProp('datum', def, repeater);

    if (datumDef !== def && !datumDef.type) {
      datumDef.type = 'nominal';
    }

    return datumDef;
  }
}

function replaceRepeaterInChannelDef(channelDef, repeater) {
  if (isFieldOrDatumDef(channelDef)) {
    var fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);

    if (fd) {
      return fd;
    } else if (isConditionalDef(channelDef)) {
      return {
        condition: channelDef.condition
      };
    }
  } else {
    if (hasConditionalFieldOrDatumDef(channelDef)) {
      var _fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);

      if (_fd) {
        return repeater_objectSpread(repeater_objectSpread({}, channelDef), {}, {
          condition: _fd
        });
      } else {
        var condition = channelDef.condition,
            channelDefWithoutCondition = (0,objectWithoutProperties/* default */.Z)(channelDef, repeater_excluded);

        return channelDefWithoutCondition;
      }
    }

    return channelDef;
  }

  return undefined;
}

function replaceRepeaterInMapping(mapping, repeater) {
  var out = {};

  for (var channel in mapping) {
    if (_has(mapping, channel)) {
      var channelDef = mapping[channel];

      if (isArray(channelDef)) {
        // array cannot have condition
        out[channel] = channelDef // somehow we need to cast it here
        .map(function (cd) {
          return replaceRepeaterInChannelDef(cd, repeater);
        }).filter(function (cd) {
          return cd;
        });
      } else {
        var cd = replaceRepeaterInChannelDef(channelDef, repeater);

        if (cd !== undefined) {
          out[channel] = cd;
        }
      }
    }
  }

  return out;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/ruleforrangedline.js




function ruleforrangedline_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ruleforrangedline_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ruleforrangedline_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ruleforrangedline_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ruleforrangedline_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = ruleforrangedline_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ruleforrangedline_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ruleforrangedline_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ruleforrangedline_arrayLikeToArray(o, minLen); }

function ruleforrangedline_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }








var RuleForRangedLineNormalizer = /*#__PURE__*/function () {
  function RuleForRangedLineNormalizer() {
    (0,classCallCheck/* default */.Z)(this, RuleForRangedLineNormalizer);

    this.name = 'RuleForRangedLine';
  }

  (0,createClass/* default */.Z)(RuleForRangedLineNormalizer, [{
    key: "hasMatchingType",
    value: function hasMatchingType(spec) {
      if (isUnitSpec(spec)) {
        var encoding = spec.encoding,
            mark = spec.mark;

        if (mark === 'line' || isMarkDef(mark) && mark.type === 'line') {
          var _iterator = ruleforrangedline_createForOfIteratorHelper(SECONDARY_RANGE_CHANNEL),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var channel = _step.value;
              var mainChannel = getMainRangeChannel(channel);
              var mainChannelDef = encoding[mainChannel];

              if (encoding[channel]) {
                if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {
                  return true;
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }

      return false;
    }
  }, {
    key: "run",
    value: function run(spec, params, normalize) {
      var encoding = spec.encoding,
          mark = spec.mark;
      log_warn(lineWithRange(!!encoding.x2, !!encoding.y2));
      console.log(mark);
      return normalize(ruleforrangedline_objectSpread(ruleforrangedline_objectSpread({}, spec), {}, {
        mark: isObject(mark) ? ruleforrangedline_objectSpread(ruleforrangedline_objectSpread({}, mark), {}, {
          type: 'rule'
        }) : 'rule'
      }), params);
    }
  }]);

  return RuleForRangedLineNormalizer;
}();
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/core.js









var core_excluded = ["repeat", "spec"],
    core_excluded2 = ["repeat", "spec", "data"],
    core_excluded3 = ["row", "column", "facet"],
    _excluded4 = ["mark", "width", "projection", "height", "view", "params", "encoding"],
    _excluded5 = ["align", "center", "spacing", "columns"],
    _excluded6 = ["align", "center", "spacing", "columns"],
    _excluded7 = ["parentEncoding", "parentProjection"],
    _excluded8 = ["encoding", "projection"];

function core_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = core_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function core_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return core_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return core_arrayLikeToArray(o, minLen); }

function core_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function core_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function core_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { core_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { core_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


















var CoreNormalizer = /*#__PURE__*/function (_SpecMapper) {
  (0,inherits/* default */.Z)(CoreNormalizer, _SpecMapper);

  var _super = _createSuper(CoreNormalizer);

  function CoreNormalizer() {
    var _this;

    (0,classCallCheck/* default */.Z)(this, CoreNormalizer);

    _this = _super.apply(this, arguments);
    _this.nonFacetUnitNormalizers = [boxPlotNormalizer, errorBarNormalizer, errorBandNormalizer, new PathOverlayNormalizer(), new RuleForRangedLineNormalizer()];
    return _this;
  }

  (0,createClass/* default */.Z)(CoreNormalizer, [{
    key: "map",
    value: function map(spec, params) {
      // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
      if (isUnitSpec(spec)) {
        var hasRow = encoding_channelHasField(spec.encoding, ROW);
        var hasColumn = encoding_channelHasField(spec.encoding, COLUMN);
        var hasFacet = encoding_channelHasField(spec.encoding, FACET);

        if (hasRow || hasColumn || hasFacet) {
          return this.mapFacetedUnit(spec, params);
        }
      }

      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(CoreNormalizer.prototype), "map", this).call(this, spec, params);
    } // This is for normalizing non-facet unit

  }, {
    key: "mapUnit",
    value: function mapUnit(spec, params) {
      var parentEncoding = params.parentEncoding,
          parentProjection = params.parentProjection;
      var encoding = replaceRepeaterInEncoding(spec.encoding, params.repeater);

      var specWithReplacedEncoding = core_objectSpread(core_objectSpread({}, spec), encoding ? {
        encoding: encoding
      } : {});

      if (parentEncoding || parentProjection) {
        return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);
      }

      var normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);

      var _iterator = core_createForOfIteratorHelper(this.nonFacetUnitNormalizers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var unitNormalizer = _step.value;

          if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) {
            return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return specWithReplacedEncoding;
    }
  }, {
    key: "mapRepeat",
    value: function mapRepeat(spec, params) {
      if (isLayerRepeatSpec(spec)) {
        return this.mapLayerRepeat(spec, params);
      } else {
        return this.mapNonLayerRepeat(spec, params);
      }
    }
  }, {
    key: "mapLayerRepeat",
    value: function mapLayerRepeat(spec, params) {
      var _this2 = this;

      var repeat = spec.repeat,
          childSpec = spec.spec,
          rest = (0,objectWithoutProperties/* default */.Z)(spec, core_excluded);

      var row = repeat.row,
          column = repeat.column,
          layer = repeat.layer;
      var _params$repeater = params.repeater,
          repeater = _params$repeater === void 0 ? {} : _params$repeater,
          _params$repeaterPrefi = params.repeaterPrefix,
          repeaterPrefix = _params$repeaterPrefi === void 0 ? '' : _params$repeaterPrefi;

      if (row || column) {
        return this.mapRepeat(core_objectSpread(core_objectSpread({}, spec), {}, {
          repeat: core_objectSpread(core_objectSpread({}, row ? {
            row: row
          } : {}), column ? {
            column: column
          } : {}),
          spec: {
            repeat: {
              layer: layer
            },
            spec: childSpec
          }
        }), params);
      } else {
        return core_objectSpread(core_objectSpread({}, rest), {}, {
          layer: layer.map(function (layerValue) {
            var childRepeater = core_objectSpread(core_objectSpread({}, repeater), {}, {
              layer: layerValue
            });

            var childName = "".concat((childSpec.name || '') + repeaterPrefix, "child__layer_").concat(varName(layerValue));

            var child = _this2.mapLayerOrUnit(childSpec, core_objectSpread(core_objectSpread({}, params), {}, {
              repeater: childRepeater,
              repeaterPrefix: childName
            }));

            child.name = childName;
            return child;
          })
        });
      }
    }
  }, {
    key: "mapNonLayerRepeat",
    value: function mapNonLayerRepeat(spec, params) {
      var _childSpec$data;

      var _spec = spec,
          repeat = _spec.repeat,
          childSpec = _spec.spec,
          data = _spec.data,
          remainingProperties = (0,objectWithoutProperties/* default */.Z)(_spec, core_excluded2);

      if (!isArray(repeat) && spec.columns) {
        // is repeat with row/column
        spec = omit(spec, ['columns']);
        log_warn(columnsNotSupportByRowCol('repeat'));
      }

      var concat = [];
      var _params$repeater2 = params.repeater,
          repeater = _params$repeater2 === void 0 ? {} : _params$repeater2,
          _params$repeaterPrefi2 = params.repeaterPrefix,
          repeaterPrefix = _params$repeaterPrefi2 === void 0 ? '' : _params$repeaterPrefi2;
      var row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];
      var column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];
      var repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product

      var _iterator2 = core_createForOfIteratorHelper(repeatValues),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var repeatValue = _step2.value;

          var _iterator3 = core_createForOfIteratorHelper(row),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var rowValue = _step3.value;

              var _iterator4 = core_createForOfIteratorHelper(column),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var columnValue = _step4.value;
                  var childRepeater = {
                    repeat: repeatValue,
                    row: rowValue,
                    column: columnValue,
                    layer: repeater.layer
                  };
                  var childName = (childSpec.name || '') + repeaterPrefix + 'child__' + (isArray(repeat) ? "".concat(varName(repeatValue)) : (repeat.row ? "row_".concat(varName(rowValue)) : '') + (repeat.column ? "column_".concat(varName(columnValue)) : ''));
                  var child = this.map(childSpec, core_objectSpread(core_objectSpread({}, params), {}, {
                    repeater: childRepeater,
                    repeaterPrefix: childName
                  }));
                  child.name = childName; // we move data up

                  concat.push(omit(child, ['data']));
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var columns = isArray(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;
      return core_objectSpread(core_objectSpread({
        data: (_childSpec$data = childSpec.data) !== null && _childSpec$data !== void 0 ? _childSpec$data : data,
        align: 'all'
      }, remainingProperties), {}, {
        columns: columns,
        concat: concat
      });
    }
  }, {
    key: "mapFacet",
    value: function mapFacet(spec, params) {
      var _spec2 = spec,
          facet = _spec2.facet;

      if (isFacetMapping(facet) && spec.columns) {
        // is facet with row/column
        spec = omit(spec, ['columns']);
        log_warn(columnsNotSupportByRowCol('facet'));
      }

      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(CoreNormalizer.prototype), "mapFacet", this).call(this, spec, params);
    }
  }, {
    key: "mapUnitWithParentEncodingOrProjection",
    value: function mapUnitWithParentEncodingOrProjection(spec, params) {
      var encoding = spec.encoding,
          projection = spec.projection;
      var parentEncoding = params.parentEncoding,
          parentProjection = params.parentProjection,
          config = params.config;
      var mergedProjection = mergeProjection({
        parentProjection: parentProjection,
        projection: projection
      });
      var mergedEncoding = mergeEncoding({
        parentEncoding: parentEncoding,
        encoding: replaceRepeaterInEncoding(encoding, params.repeater)
      });
      return this.mapUnit(core_objectSpread(core_objectSpread(core_objectSpread({}, spec), mergedProjection ? {
        projection: mergedProjection
      } : {}), mergedEncoding ? {
        encoding: mergedEncoding
      } : {}), {
        config: config
      });
    }
  }, {
    key: "mapFacetedUnit",
    value: function mapFacetedUnit(spec, normParams) {
      // New encoding in the inside spec should not contain row / column
      // as row/column should be moved to facet
      var _spec$encoding = spec.encoding,
          row = _spec$encoding.row,
          column = _spec$encoding.column,
          facet = _spec$encoding.facet,
          encoding = (0,objectWithoutProperties/* default */.Z)(_spec$encoding, core_excluded3); // Mark and encoding should be moved into the inner spec


      var mark = spec.mark,
          width = spec.width,
          projection = spec.projection,
          height = spec.height,
          view = spec.view,
          params = spec.params,
          _ = spec.encoding,
          outerSpec = (0,objectWithoutProperties/* default */.Z)(spec, _excluded4);

      var _this$getFacetMapping = this.getFacetMappingAndLayout({
        row: row,
        column: column,
        facet: facet
      }, normParams),
          facetMapping = _this$getFacetMapping.facetMapping,
          layout = _this$getFacetMapping.layout;

      var newEncoding = replaceRepeaterInEncoding(encoding, normParams.repeater);
      return this.mapFacet(core_objectSpread(core_objectSpread(core_objectSpread({}, outerSpec), layout), {}, {
        // row / column has higher precedence than facet
        facet: facetMapping,
        spec: core_objectSpread(core_objectSpread(core_objectSpread(core_objectSpread(core_objectSpread({}, width ? {
          width: width
        } : {}), height ? {
          height: height
        } : {}), view ? {
          view: view
        } : {}), projection ? {
          projection: projection
        } : {}), {}, {
          mark: mark,
          encoding: newEncoding
        }, params ? {
          params: params
        } : {})
      }), normParams);
    }
  }, {
    key: "getFacetMappingAndLayout",
    value: function getFacetMappingAndLayout(facets, params) {
      var row = facets.row,
          column = facets.column,
          facet = facets.facet;

      if (row || column) {
        if (facet) {
          log_warn(facetChannelDropped([].concat((0,toConsumableArray/* default */.Z)(row ? [ROW] : []), (0,toConsumableArray/* default */.Z)(column ? [COLUMN] : []))));
        }

        var facetMapping = {};
        var layout = {};

        for (var _i = 0, _arr = [ROW, COLUMN]; _i < _arr.length; _i++) {
          var channel = _arr[_i];
          var def = facets[channel];

          if (def) {
            var align = def.align,
                center = def.center,
                spacing = def.spacing,
                columns = def.columns,
                defWithoutLayout = (0,objectWithoutProperties/* default */.Z)(def, _excluded5);

            facetMapping[channel] = defWithoutLayout;

            for (var _i2 = 0, _arr2 = ['align', 'center', 'spacing']; _i2 < _arr2.length; _i2++) {
              var prop = _arr2[_i2];

              if (def[prop] !== undefined) {
                var _layout$prop;

                (_layout$prop = layout[prop]) !== null && _layout$prop !== void 0 ? _layout$prop : layout[prop] = {};
                layout[prop][channel] = def[prop];
              }
            }
          }
        }

        return {
          facetMapping: facetMapping,
          layout: layout
        };
      } else {
        var _align = facet.align,
            _center = facet.center,
            _spacing = facet.spacing,
            _columns = facet.columns,
            _facetMapping = (0,objectWithoutProperties/* default */.Z)(facet, _excluded6);

        return {
          facetMapping: replaceRepeaterInFacet(_facetMapping, params.repeater),
          layout: core_objectSpread(core_objectSpread(core_objectSpread(core_objectSpread({}, _align ? {
            align: _align
          } : {}), _center ? {
            center: _center
          } : {}), _spacing ? {
            spacing: _spacing
          } : {}), _columns ? {
            columns: _columns
          } : {})
        };
      }
    }
  }, {
    key: "mapLayer",
    value: function mapLayer(spec, _ref) {
      var parentEncoding = _ref.parentEncoding,
          parentProjection = _ref.parentProjection,
          otherParams = (0,objectWithoutProperties/* default */.Z)(_ref, _excluded7);

      // Special handling for extended layer spec
      var encoding = spec.encoding,
          projection = spec.projection,
          rest = (0,objectWithoutProperties/* default */.Z)(spec, _excluded8);

      var params = core_objectSpread(core_objectSpread({}, otherParams), {}, {
        parentEncoding: mergeEncoding({
          parentEncoding: parentEncoding,
          encoding: encoding,
          layer: true
        }),
        parentProjection: mergeProjection({
          parentProjection: parentProjection,
          projection: projection
        })
      });

      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(CoreNormalizer.prototype), "mapLayer", this).call(this, rest, params);
    }
  }]);

  return CoreNormalizer;
}(SpecMapper);

function mergeEncoding(_ref2) {
  var parentEncoding = _ref2.parentEncoding,
      _ref2$encoding = _ref2.encoding,
      encoding = _ref2$encoding === void 0 ? {} : _ref2$encoding,
      layer = _ref2.layer;
  var merged = {};

  if (parentEncoding) {
    var channels = new Set([].concat((0,toConsumableArray/* default */.Z)(util_keys(parentEncoding)), (0,toConsumableArray/* default */.Z)(util_keys(encoding))));

    var _iterator5 = core_createForOfIteratorHelper(channels),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var channel = _step5.value;
        var channelDef = encoding[channel];
        var parentChannelDef = parentEncoding[channel];

        if (isFieldOrDatumDef(channelDef)) {
          // Field/Datum Def can inherit properties from its parent
          // Note that parentChannelDef doesn't have to be a field/datum def if the channelDef is already one.
          var mergedChannelDef = core_objectSpread(core_objectSpread({}, parentChannelDef), channelDef);

          merged[channel] = mergedChannelDef;
        } else if (hasConditionalFieldOrDatumDef(channelDef)) {
          merged[channel] = core_objectSpread(core_objectSpread({}, channelDef), {}, {
            condition: core_objectSpread(core_objectSpread({}, parentChannelDef), channelDef.condition)
          });
        } else if (channelDef || channelDef === null) {
          merged[channel] = channelDef;
        } else if (layer || isValueDef(parentChannelDef) || isSignalRef(parentChannelDef) || isFieldOrDatumDef(parentChannelDef) || isArray(parentChannelDef)) {
          merged[channel] = parentChannelDef;
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  } else {
    merged = encoding;
  }

  return !merged || isEmpty(merged) ? undefined : merged;
}

function mergeProjection(opt) {
  var parentProjection = opt.parentProjection,
      projection = opt.projection;

  if (parentProjection && projection) {
    log_warn(projectionOverridden({
      parentProjection: parentProjection,
      projection: projection
    }));
  }

  return projection !== null && projection !== void 0 ? projection : parentProjection;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/transform.js


function isFilter(t) {
  return 'filter' in t;
}
function isImputeSequence(t) {
  return (t === null || t === void 0 ? void 0 : t['stop']) !== undefined;
}
function isLookup(t) {
  return 'lookup' in t;
}
function isLookupData(from) {
  return 'data' in from;
}
function isLookupSelection(from) {
  return 'param' in from;
}
function isPivot(t) {
  return 'pivot' in t;
}
function isDensity(t) {
  return 'density' in t;
}
function transform_isQuantile(t) {
  return 'quantile' in t;
}
function isRegression(t) {
  return 'regression' in t;
}
function isLoess(t) {
  return 'loess' in t;
}
function isSample(t) {
  return 'sample' in t;
}
function isWindow(t) {
  return 'window' in t;
}
function isJoinAggregate(t) {
  return 'joinaggregate' in t;
}
function isFlatten(t) {
  return 'flatten' in t;
}
function isCalculate(t) {
  return 'calculate' in t;
}
function isBin(t) {
  return 'bin' in t;
}
function isImpute(t) {
  return 'impute' in t;
}
function isTimeUnit(t) {
  return 'timeUnit' in t;
}
function transform_isAggregate(t) {
  return 'aggregate' in t;
}
function isStack(t) {
  return 'stack' in t;
}
function isFold(t) {
  return 'fold' in t;
}
function normalizeTransform(transform) {
  return transform.map(function (t) {
    if (isFilter(t)) {
      return {
        filter: normalizeLogicalComposition(t.filter, normalizePredicate)
      };
    }

    return t;
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/selectioncompat.js









var selectioncompat_excluded = ["selection"],
    selectioncompat_excluded2 = ["init", "bind", "empty"],
    selectioncompat_excluded3 = ["transform"],
    selectioncompat_excluded4 = ["selection"],
    selectioncompat_excluded5 = ["selection"],
    selectioncompat_excluded6 = ["selection", "param", "test"],
    selectioncompat_excluded7 = ["selection", "param", "test"],
    selectioncompat_excluded8 = ["selection"];

function selectioncompat_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function selectioncompat_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { selectioncompat_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { selectioncompat_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function selectioncompat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = selectioncompat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function selectioncompat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return selectioncompat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return selectioncompat_arrayLikeToArray(o, minLen); }

function selectioncompat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function selectioncompat_createSuper(Derived) { var hasNativeReflectConstruct = selectioncompat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function selectioncompat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var SelectionCompatibilityNormalizer = /*#__PURE__*/function (_SpecMapper) {
  (0,inherits/* default */.Z)(SelectionCompatibilityNormalizer, _SpecMapper);

  var _super = selectioncompat_createSuper(SelectionCompatibilityNormalizer);

  function SelectionCompatibilityNormalizer() {
    (0,classCallCheck/* default */.Z)(this, SelectionCompatibilityNormalizer);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(SelectionCompatibilityNormalizer, [{
    key: "map",
    value: function map(spec, normParams) {
      var _normParams$emptySele, _normParams$selection;

      (_normParams$emptySele = normParams.emptySelections) !== null && _normParams$emptySele !== void 0 ? _normParams$emptySele : normParams.emptySelections = {};
      (_normParams$selection = normParams.selectionPredicates) !== null && _normParams$selection !== void 0 ? _normParams$selection : normParams.selectionPredicates = {};
      spec = normalizeTransforms(spec, normParams);
      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(SelectionCompatibilityNormalizer.prototype), "map", this).call(this, spec, normParams);
    }
  }, {
    key: "mapLayerOrUnit",
    value: function mapLayerOrUnit(spec, normParams) {
      spec = normalizeTransforms(spec, normParams);

      if (spec.encoding) {
        var encoding = {};

        var _iterator = selectioncompat_createForOfIteratorHelper(entries(spec.encoding)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = (0,slicedToArray/* default */.Z)(_step.value, 2),
                channel = _step$value[0],
                enc = _step$value[1];

            encoding[channel] = normalizeChannelDef(enc, normParams);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        spec = selectioncompat_objectSpread(selectioncompat_objectSpread({}, spec), {}, {
          encoding: encoding
        });
      }

      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(SelectionCompatibilityNormalizer.prototype), "mapLayerOrUnit", this).call(this, spec, normParams);
    }
  }, {
    key: "mapUnit",
    value: function mapUnit(spec, normParams) {
      var selection = spec.selection,
          rest = (0,objectWithoutProperties/* default */.Z)(spec, selectioncompat_excluded);

      if (selection) {
        return selectioncompat_objectSpread(selectioncompat_objectSpread({}, rest), {}, {
          params: entries(selection).map(function (_ref) {
            var _normParams$selection2;

            var _ref2 = (0,slicedToArray/* default */.Z)(_ref, 2),
                name = _ref2[0],
                selDef = _ref2[1];

            var value = selDef.init,
                bind = selDef.bind,
                empty = selDef.empty,
                select = (0,objectWithoutProperties/* default */.Z)(selDef, selectioncompat_excluded2);

            if (select.type === 'single') {
              select.type = 'point';
              select.toggle = false;
            } else if (select.type === 'multi') {
              select.type = 'point';
            } // Propagate emptiness forwards and backwards


            normParams.emptySelections[name] = empty !== 'none';

            var _iterator2 = selectioncompat_createForOfIteratorHelper(vals((_normParams$selection2 = normParams.selectionPredicates[name]) !== null && _normParams$selection2 !== void 0 ? _normParams$selection2 : {})),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var pred = _step2.value;
                pred.empty = empty !== 'none';
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return {
              name: name,
              value: value,
              select: select,
              bind: bind
            };
          })
        });
      }

      return spec;
    }
  }]);

  return SelectionCompatibilityNormalizer;
}(SpecMapper);

function normalizeTransforms(spec, normParams) {
  var tx = spec.transform,
      rest = (0,objectWithoutProperties/* default */.Z)(spec, selectioncompat_excluded3);

  if (tx) {
    var transform = tx.map(function (t) {
      if (isFilter(t)) {
        return {
          filter: selectioncompat_normalizePredicate(t, normParams)
        };
      } else if (isBin(t) && isBinParams(t.bin)) {
        return selectioncompat_objectSpread(selectioncompat_objectSpread({}, t), {}, {
          bin: normalizeBinExtent(t.bin)
        });
      } else if (isLookup(t)) {
        var _t$from = t.from,
            param = _t$from.selection,
            from = (0,objectWithoutProperties/* default */.Z)(_t$from, selectioncompat_excluded4);

        return param ? selectioncompat_objectSpread(selectioncompat_objectSpread({}, t), {}, {
          from: selectioncompat_objectSpread({
            param: param
          }, from)
        }) : t;
      }

      return t;
    });
    return selectioncompat_objectSpread(selectioncompat_objectSpread({}, rest), {}, {
      transform: transform
    });
  }

  return spec;
}

function normalizeChannelDef(obj, normParams) {
  var _enc$scale, _enc$scale$domain;

  var enc = duplicate(obj);

  if (isFieldDef(enc) && isBinParams(enc.bin)) {
    enc.bin = normalizeBinExtent(enc.bin);
  }

  if (isScaleFieldDef(enc) && (_enc$scale = enc.scale) !== null && _enc$scale !== void 0 && (_enc$scale$domain = _enc$scale.domain) !== null && _enc$scale$domain !== void 0 && _enc$scale$domain.selection) {
    var _enc$scale$domain2 = enc.scale.domain,
        param = _enc$scale$domain2.selection,
        domain = (0,objectWithoutProperties/* default */.Z)(_enc$scale$domain2, selectioncompat_excluded5);

    enc.scale.domain = selectioncompat_objectSpread(selectioncompat_objectSpread({}, domain), param ? {
      param: param
    } : {});
  }

  if (isConditionalDef(enc)) {
    if (isArray(enc.condition)) {
      enc.condition = enc.condition.map(function (c) {
        var selection = c.selection,
            param = c.param,
            test = c.test,
            cond = (0,objectWithoutProperties/* default */.Z)(c, selectioncompat_excluded6);

        return param ? c : selectioncompat_objectSpread(selectioncompat_objectSpread({}, cond), {}, {
          test: selectioncompat_normalizePredicate(c, normParams)
        });
      });
    } else {
      var _normalizeChannelDef = normalizeChannelDef(enc.condition, normParams),
          selection = _normalizeChannelDef.selection,
          _param = _normalizeChannelDef.param,
          test = _normalizeChannelDef.test,
          cond = (0,objectWithoutProperties/* default */.Z)(_normalizeChannelDef, selectioncompat_excluded7);

      enc.condition = _param ? enc.condition : selectioncompat_objectSpread(selectioncompat_objectSpread({}, cond), {}, {
        test: selectioncompat_normalizePredicate(enc.condition, normParams)
      });
    }
  }

  return enc;
}

function normalizeBinExtent(bin) {
  var ext = bin.extent;

  if (ext !== null && ext !== void 0 && ext.selection) {
    var param = ext.selection,
        rest = (0,objectWithoutProperties/* default */.Z)(ext, selectioncompat_excluded8);

    return selectioncompat_objectSpread(selectioncompat_objectSpread({}, bin), {}, {
      extent: selectioncompat_objectSpread(selectioncompat_objectSpread({}, rest), {}, {
        param: param
      })
    });
  }

  return bin;
}

function selectioncompat_normalizePredicate(op, normParams) {
  // Normalize old compositions of selection names (e.g., selection: {and: ["one", "two"]})
  var normalizeSelectionComposition = function normalizeSelectionComposition(o) {
    return normalizeLogicalComposition(o, function (param) {
      var _normParams$emptySele2, _a$param;

      var _a;

      var empty = (_normParams$emptySele2 = normParams.emptySelections[param]) !== null && _normParams$emptySele2 !== void 0 ? _normParams$emptySele2 : true;
      var pred = {
        param: param,
        empty: empty
      };
      (_a$param = (_a = normParams.selectionPredicates)[param]) !== null && _a$param !== void 0 ? _a$param : _a[param] = [];
      normParams.selectionPredicates[param].push(pred);
      return pred;
    });
  };

  return op.selection ? normalizeSelectionComposition(op.selection) : normalizeLogicalComposition(op.test || op.filter, function (o) {
    return o.selection ? normalizeSelectionComposition(o.selection) : o;
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/toplevelselection.js








function toplevelselection_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function toplevelselection_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { toplevelselection_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { toplevelselection_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function toplevelselection_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = toplevelselection_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function toplevelselection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return toplevelselection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return toplevelselection_arrayLikeToArray(o, minLen); }

function toplevelselection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function toplevelselection_createSuper(Derived) { var hasNativeReflectConstruct = toplevelselection_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function toplevelselection_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TopLevelSelectionsNormalizer = /*#__PURE__*/function (_SpecMapper) {
  (0,inherits/* default */.Z)(TopLevelSelectionsNormalizer, _SpecMapper);

  var _super = toplevelselection_createSuper(TopLevelSelectionsNormalizer);

  function TopLevelSelectionsNormalizer() {
    (0,classCallCheck/* default */.Z)(this, TopLevelSelectionsNormalizer);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(TopLevelSelectionsNormalizer, [{
    key: "map",
    value: function map(spec, normParams) {
      var _normParams$selection;

      var selections = (_normParams$selection = normParams.selections) !== null && _normParams$selection !== void 0 ? _normParams$selection : [];

      if (spec.params && !isUnitSpec(spec)) {
        var params = [];

        var _iterator = toplevelselection_createForOfIteratorHelper(spec.params),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var param = _step.value;

            if (isSelectionParameter(param)) {
              selections.push(param);
            } else {
              params.push(param);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        spec.params = params;
      }

      normParams.selections = selections;
      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(TopLevelSelectionsNormalizer.prototype), "map", this).call(this, spec, addSpecNameToParams(spec, normParams));
    }
  }, {
    key: "mapUnit",
    value: function mapUnit(spec, normParams) {
      var _normParams$path;

      var selections = normParams.selections;
      if (!selections || !selections.length) return spec;
      var path = ((_normParams$path = normParams.path) !== null && _normParams$path !== void 0 ? _normParams$path : []).concat(spec.name);
      var params = [];

      var _iterator2 = toplevelselection_createForOfIteratorHelper(selections),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var selection = _step2.value;

          // By default, apply selections to all unit views.
          if (!selection.views || !selection.views.length) {
            params.push(selection);
          } else {
            var _iterator3 = toplevelselection_createForOfIteratorHelper(selection.views),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var view = _step3.value;

                // view is either a specific unit name, or a partial path through the spec tree.
                if (isString(view) && (view === spec.name || path.indexOf(view) >= 0) || isArray(view) && view.map(function (v) {
                  return path.indexOf(v);
                }).every(function (v, i, arr) {
                  return v !== -1 && (i === 0 || v > arr[i - 1]);
                })) {
                  params.push(selection);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (params.length) spec.params = params;
      return spec;
    }
  }]);

  return TopLevelSelectionsNormalizer;
}(SpecMapper);

var _loop = function _loop() {
  var method = _arr[_i];
  var proto = TopLevelSelectionsNormalizer.prototype[method];

  TopLevelSelectionsNormalizer.prototype[method] = function (spec, params) {
    return proto.call(this, spec, addSpecNameToParams(spec, params));
  };
};

for (var _i = 0, _arr = ['mapFacet', 'mapRepeat', 'mapHConcat', 'mapVConcat', 'mapLayer']; _i < _arr.length; _i++) {
  _loop();
}

function addSpecNameToParams(spec, params) {
  var _params$path;

  return spec.name ? toplevelselection_objectSpread(toplevelselection_objectSpread({}, params), {}, {
    path: ((_params$path = params.path) !== null && _params$path !== void 0 ? _params$path : []).concat(spec.name)
  }) : params;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/normalize/index.js


function normalize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function normalize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { normalize_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { normalize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









function normalize_normalize(spec, config) {
  if (config === undefined) {
    config = initConfig(spec.config);
  }

  var normalizedSpec = normalizeGenericSpec(spec, config);
  var width = spec.width,
      height = spec.height;
  var autosize = normalizeAutoSize(normalizedSpec, {
    width: width,
    height: height,
    autosize: spec.autosize
  }, config);
  return normalize_objectSpread(normalize_objectSpread({}, normalizedSpec), autosize ? {
    autosize: autosize
  } : {});
}
var coreNormalizer = new CoreNormalizer();
var selectionCompatNormalizer = new SelectionCompatibilityNormalizer();
var topLevelSelectionNormalizer = new TopLevelSelectionsNormalizer();
/**
 * Decompose extended unit specs into composition of pure unit specs.
 * And push top-level selection definitions down to unit specs.
 */

function normalizeGenericSpec(spec) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var normParams = {
    config: config
  };
  return topLevelSelectionNormalizer.map(coreNormalizer.map(selectionCompatNormalizer.map(spec, normParams), normParams), normParams);
}

function _normalizeAutoSize(autosize) {
  return isString(autosize) ? {
    type: autosize
  } : autosize !== null && autosize !== void 0 ? autosize : {};
}
/**
 * Normalize autosize and deal with width or height == "container".
 */


function normalizeAutoSize(spec, sizeInfo, config) {
  var width = sizeInfo.width,
      height = sizeInfo.height;
  var isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);
  var autosizeDefault = {};

  if (!isFitCompatible) {
    // If spec is not compatible with autosize == "fit", discard width/height == container
    if (width == 'container') {
      log_warn(containerSizeNonSingle('width'));
      width = undefined;
    }

    if (height == 'container') {
      log_warn(containerSizeNonSingle('height'));
      height = undefined;
    }
  } else {
    // Default autosize parameters to fit when width/height is "container"
    if (width == 'container' && height == 'container') {
      autosizeDefault.type = 'fit';
      autosizeDefault.contains = 'padding';
    } else if (width == 'container') {
      autosizeDefault.type = 'fit-x';
      autosizeDefault.contains = 'padding';
    } else if (height == 'container') {
      autosizeDefault.type = 'fit-y';
      autosizeDefault.contains = 'padding';
    }
  }

  var autosize = normalize_objectSpread(normalize_objectSpread(normalize_objectSpread({
    type: 'pad'
  }, autosizeDefault), config ? _normalizeAutoSize(config.autosize) : {}), _normalizeAutoSize(spec.autosize));

  if (autosize.type === 'fit' && !isFitCompatible) {
    log_warn(FIT_NON_SINGLE);
    autosize.type = 'pad';
  }

  if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {
    log_warn(containerSizeNotCompatibleWithAutosize('width'));
  }

  if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {
    log_warn(containerSizeNotCompatibleWithAutosize('height'));
  } // Delete autosize property if it's Vega's default


  if (deepEqual(autosize, {
    type: 'pad'
  })) {
    return undefined;
  }

  return autosize;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/spec/toplevel.js
function toplevel_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = toplevel_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function toplevel_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return toplevel_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return toplevel_arrayLikeToArray(o, minLen); }

function toplevel_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function isFitType(autoSizeType) {
  return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';
}
function getFitType(sizeType) {
  return sizeType ? "fit-".concat(getPositionScaleChannel(sizeType)) : 'fit';
}
var TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
];
function extractTopLevelProperties(t, includeParams) {
  var o = {};

  var _iterator = toplevel_createForOfIteratorHelper(TOP_LEVEL_PROPERTIES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var p = _step.value;

      if (t && t[p] !== undefined) {
        o[p] = signalRefOrValue(t[p]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (includeParams) {
    o.params = t.params;
  }

  return o;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/split.js




function split_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = split_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function split_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return split_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return split_arrayLikeToArray(o, minLen); }

function split_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function split_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function split_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { split_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { split_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/**
 * Generic class for storing properties that are explicitly specified
 * and implicitly determined by the compiler.
 * This is important for scale/axis/legend merging as
 * we want to prioritize properties that users explicitly specified.
 */
// eslint-disable-next-line @typescript-eslint/ban-types

var Split = /*#__PURE__*/function () {
  function Split() {
    var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    (0,classCallCheck/* default */.Z)(this, Split);

    this.explicit = explicit;
    this.implicit = implicit;
  }

  (0,createClass/* default */.Z)(Split, [{
    key: "clone",
    value: function clone() {
      return new Split(duplicate(this.explicit), duplicate(this.implicit));
    }
  }, {
    key: "combine",
    value: function combine() {
      return split_objectSpread(split_objectSpread({}, this.explicit), this.implicit);
    }
  }, {
    key: "get",
    value: function get(key) {
      // Explicit has higher precedence
      return getFirstDefined(this.explicit[key], this.implicit[key]);
    }
  }, {
    key: "getWithExplicit",
    value: function getWithExplicit(key) {
      // Explicit has higher precedence
      if (this.explicit[key] !== undefined) {
        return {
          explicit: true,
          value: this.explicit[key]
        };
      } else if (this.implicit[key] !== undefined) {
        return {
          explicit: false,
          value: this.implicit[key]
        };
      }

      return {
        explicit: false,
        value: undefined
      };
    }
  }, {
    key: "setWithExplicit",
    value: function setWithExplicit(key, _ref) {
      var value = _ref.value,
          explicit = _ref.explicit;

      if (value !== undefined) {
        this.set(key, value, explicit);
      }
    }
  }, {
    key: "set",
    value: function set(key, value, explicit) {
      delete this[explicit ? 'implicit' : 'explicit'][key];
      this[explicit ? 'explicit' : 'implicit'][key] = value;
      return this;
    }
  }, {
    key: "copyKeyFromSplit",
    value: function copyKeyFromSplit(key, _ref2) {
      var explicit = _ref2.explicit,
          implicit = _ref2.implicit;

      // Explicit has higher precedence
      if (explicit[key] !== undefined) {
        this.set(key, explicit[key], true);
      } else if (implicit[key] !== undefined) {
        this.set(key, implicit[key], false);
      }
    }
  }, {
    key: "copyKeyFromObject",
    value: function copyKeyFromObject(key, s) {
      // Explicit has higher precedence
      if (s[key] !== undefined) {
        this.set(key, s[key], true);
      }
    }
    /**
     * Merge split object into this split object. Properties from the other split
     * overwrite properties from this split.
     */

  }, {
    key: "copyAll",
    value: function copyAll(other) {
      var _iterator = split_createForOfIteratorHelper(util_keys(other.combine())),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;
          var val = other.getWithExplicit(key);
          this.setWithExplicit(key, val);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return Split;
}();
function makeExplicit(value) {
  return {
    explicit: true,
    value: value
  };
}
function makeImplicit(value) {
  return {
    explicit: false,
    value: value
  };
}
function tieBreakByComparing(compare) {
  return function (v1, v2, property, propertyOf) {
    var diff = compare(v1.value, v2.value);

    if (diff > 0) {
      return v1;
    } else if (diff < 0) {
      return v2;
    }

    return defaultTieBreaker(v1, v2, property, propertyOf);
  };
}
function defaultTieBreaker(v1, v2, property, propertyOf) {
  if (v1.explicit && v2.explicit) {
    log_warn(mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
  } // If equal score, prefer v1.


  return v1;
}
function mergeValuesWithExplicit(v1, v2, property, propertyOf) {
  var tieBreaker = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultTieBreaker;

  if (v1 === undefined || v1.value === undefined) {
    // For first run
    return v2;
  }

  if (v1.explicit && !v2.explicit) {
    return v1;
  } else if (v2.explicit && !v1.explicit) {
    return v2;
  } else if (deepEqual(v1.value, v2.value)) {
    return v1;
  } else {
    return tieBreaker(v1, v2, property, propertyOf);
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/index.js







function data_createSuper(Derived) { var hasNativeReflectConstruct = data_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function data_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


/**
 * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
 * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the
 * same field again (or differently).
 */

var AncestorParse = /*#__PURE__*/function (_Split) {
  (0,inherits/* default */.Z)(AncestorParse, _Split);

  var _super = data_createSuper(AncestorParse);

  function AncestorParse() {
    var _this;

    var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var parseNothing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    (0,classCallCheck/* default */.Z)(this, AncestorParse);

    _this = _super.call(this, explicit, implicit);
    _this.explicit = explicit;
    _this.implicit = implicit;
    _this.parseNothing = parseNothing;
    return _this;
  }

  (0,createClass/* default */.Z)(AncestorParse, [{
    key: "clone",
    value: function clone() {
      var clone = (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(AncestorParse.prototype), "clone", this).call(this);

      clone.parseNothing = this.parseNothing;
      return clone;
    }
  }]);

  return AncestorParse;
}(Split);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/data.js
function isUrlData(data) {
  return 'url' in data;
}
function isInlineData(data) {
  return 'values' in data;
}
function isNamedData(data) {
  return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);
}
function isGenerator(data) {
  return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));
}
function isSequenceGenerator(data) {
  return 'sequence' in data;
}
function isSphereGenerator(data) {
  return 'sphere' in data;
}
function isGraticuleGenerator(data) {
  return 'graticule' in data;
}
var DataSourceType;

(function (DataSourceType) {
  DataSourceType[DataSourceType["Raw"] = 0] = "Raw";
  DataSourceType[DataSourceType["Main"] = 1] = "Main";
  DataSourceType[DataSourceType["Row"] = 2] = "Row";
  DataSourceType[DataSourceType["Column"] = 3] = "Column";
  DataSourceType[DataSourceType["Lookup"] = 4] = "Lookup";
})(DataSourceType || (DataSourceType = {}));
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/assemble.js


var assemble_excluded = ["signals"];

function assemble_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = assemble_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function assemble_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return assemble_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return assemble_arrayLikeToArray(o, minLen); }

function assemble_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function assembleInit(init) {
  var isExpr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var wrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;

  if (isArray(init)) {
    var assembled = init.map(function (v) {
      return assembleInit(v, isExpr, wrap);
    });
    return isExpr ? "[".concat(assembled.join(', '), "]") : assembled;
  } else if (isDateTime(init)) {
    if (isExpr) {
      return wrap(dateTimeToExpr(init));
    } else {
      return wrap(dateTimeToTimestamp(init));
    }
  }

  return isExpr ? wrap(stringify(init)) : init;
}
function assembleUnitSelectionSignals(model, signals) {
  var _model$component$sele;

  var _iterator = assemble_createForOfIteratorHelper(vals((_model$component$sele = model.component.selection) !== null && _model$component$sele !== void 0 ? _model$component$sele : {})),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var selCmpt = _step.value;
      var name = selCmpt.name;
      var modifyExpr = "".concat(name).concat(TUPLE, ", ").concat(selCmpt.resolve === 'global' ? 'true' : "{unit: ".concat(unitName(model), "}"));

      var _iterator2 = assemble_createForOfIteratorHelper(selectionCompilers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var c = _step2.value;
          if (!c.defined(selCmpt)) continue;
          if (c.signals) signals = c.signals(model, selCmpt, signals);
          if (c.modifyExpr) modifyExpr = c.modifyExpr(model, selCmpt, modifyExpr);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      signals.push({
        name: name + MODIFY,
        on: [{
          events: {
            signal: selCmpt.name + TUPLE
          },
          update: "modify(".concat($(selCmpt.name + STORE), ", ").concat(modifyExpr, ")")
        }]
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return cleanupEmptyOnArray(signals);
}
function assembleFacetSignals(model, signals) {
  if (model.component.selection && util_keys(model.component.selection).length) {
    var name = $(model.getName('cell'));
    signals.unshift({
      name: 'facet',
      value: {},
      on: [{
        events: eventSelector('mousemove', 'scope'),
        update: "isTuple(facet) ? facet : group(".concat(name, ").datum")
      }]
    });
  }

  return cleanupEmptyOnArray(signals);
}
function assembleTopLevelSignals(model, signals) {
  var _model$component$sele2;

  var hasSelections = false;

  var _iterator3 = assemble_createForOfIteratorHelper(vals((_model$component$sele2 = model.component.selection) !== null && _model$component$sele2 !== void 0 ? _model$component$sele2 : {})),
      _step3;

  try {
    var _loop = function _loop() {
      var selCmpt = _step3.value;
      var name = selCmpt.name;
      var store = $(name + STORE);
      var hasSg = signals.filter(function (s) {
        return s.name === name;
      });

      if (hasSg.length === 0) {
        var resolve = selCmpt.resolve === 'global' ? 'union' : selCmpt.resolve;
        var isPoint = selCmpt.type === 'point' ? ', true, true)' : ')';
        signals.push({
          name: selCmpt.name,
          update: "".concat(VL_SELECTION_RESOLVE, "(").concat(store, ", ").concat($(resolve)).concat(isPoint)
        });
      }

      hasSelections = true;

      var _iterator4 = assemble_createForOfIteratorHelper(selectionCompilers),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var c = _step4.value;

          if (c.defined(selCmpt) && c.topLevelSignals) {
            signals = c.topLevelSignals(model, selCmpt, signals);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    };

    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  if (hasSelections) {
    var hasUnit = signals.filter(function (s) {
      return s.name === 'unit';
    });

    if (hasUnit.length === 0) {
      signals.unshift({
        name: 'unit',
        value: {},
        on: [{
          events: 'mousemove',
          update: 'isTuple(group()) ? group() : unit'
        }]
      });
    }
  }

  return cleanupEmptyOnArray(signals);
}
function assembleUnitSelectionData(model, data) {
  var _model$component$sele3;

  var dataCopy = (0,toConsumableArray/* default */.Z)(data);

  var _iterator5 = assemble_createForOfIteratorHelper(vals((_model$component$sele3 = model.component.selection) !== null && _model$component$sele3 !== void 0 ? _model$component$sele3 : {})),
      _step5;

  try {
    var _loop2 = function _loop2() {
      var selCmpt = _step5.value;
      var init = {
        name: selCmpt.name + STORE
      };

      if (selCmpt.init) {
        var fields = selCmpt.project.items.map(function (proj) {
          var signals = proj.signals,
              rest = (0,objectWithoutProperties/* default */.Z)(proj, assemble_excluded);

          return rest;
        });
        init.values = selCmpt.init.map(function (i) {
          return {
            unit: unitName(model, {
              escape: false
            }),
            fields: fields,
            values: assembleInit(i, false)
          };
        });
      }

      var contains = dataCopy.filter(function (d) {
        return d.name === selCmpt.name + STORE;
      });

      if (!contains.length) {
        dataCopy.push(init);
      }
    };

    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  return dataCopy;
}
function assembleUnitSelectionMarks(model, marks) {
  var _model$component$sele4;

  var _iterator6 = assemble_createForOfIteratorHelper(vals((_model$component$sele4 = model.component.selection) !== null && _model$component$sele4 !== void 0 ? _model$component$sele4 : {})),
      _step6;

  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var selCmpt = _step6.value;

      var _iterator7 = assemble_createForOfIteratorHelper(selectionCompilers),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var c = _step7.value;

          if (c.defined(selCmpt) && c.marks) {
            marks = c.marks(model, selCmpt, marks);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  return marks;
}
function assembleLayerSelectionMarks(model, marks) {
  var _iterator8 = assemble_createForOfIteratorHelper(model.children),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var child = _step8.value;

      if (isUnitModel(child)) {
        marks = assembleUnitSelectionMarks(child, marks);
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  return marks;
}
function assembleSelectionScaleDomain(model, extent, scaleCmpt, domain) {
  var parsedExtent = parseSelectionExtent(model, extent.param, extent);
  return {
    signal: hasContinuousDomain(scaleCmpt.get('type')) && isArray(domain) && domain[0] > domain[1] ? "isValid(".concat(parsedExtent, ") && reverse(").concat(parsedExtent, ")") : parsedExtent
  };
}

function cleanupEmptyOnArray(signals) {
  return signals.map(function (s) {
    if (s.on && !s.on.length) delete s.on;
    return s;
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/dataflow.js






function dataflow_createSuper(Derived) { var hasNativeReflectConstruct = dataflow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function dataflow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function dataflow_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dataflow_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function dataflow_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dataflow_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dataflow_arrayLikeToArray(o, minLen); }

function dataflow_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



/**
 * A node in the dataflow tree.
 */

var DataFlowNode = /*#__PURE__*/function () {
  function DataFlowNode(parent, debugName) {
    (0,classCallCheck/* default */.Z)(this, DataFlowNode);

    this.debugName = debugName;
    this._children = [];
    this._parent = null;

    if (parent) {
      this.parent = parent;
    }
  }
  /**
   * Clone this node with a deep copy but don't clone links to children or parents.
   */


  (0,createClass/* default */.Z)(DataFlowNode, [{
    key: "clone",
    value: function clone() {
      throw new Error('Cannot clone node');
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent;
    }
    /**
     * Set the parent of the node and also add this node to the parent's children.
     */
    ,
    set: function set(parent) {
      this._parent = parent;

      if (parent) {
        parent.addChild(this);
      }
    }
  }, {
    key: "children",
    get: function get() {
      return this._children;
    }
  }, {
    key: "numChildren",
    value: function numChildren() {
      return this._children.length;
    }
  }, {
    key: "addChild",
    value: function addChild(child, loc) {
      // do not add the same child twice
      if (this._children.includes(child)) {
        log_warn(ADD_SAME_CHILD_TWICE);
        return;
      }

      if (loc !== undefined) {
        this._children.splice(loc, 0, child);
      } else {
        this._children.push(child);
      }
    }
  }, {
    key: "removeChild",
    value: function removeChild(oldChild) {
      var loc = this._children.indexOf(oldChild);

      this._children.splice(loc, 1);

      return loc;
    }
    /**
     * Remove node from the dataflow.
     */

  }, {
    key: "remove",
    value: function remove() {
      var loc = this._parent.removeChild(this);

      var _iterator = dataflow_createForOfIteratorHelper(this._children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          // do not use the set method because we want to insert at a particular location
          child._parent = this._parent;

          this._parent.addChild(child, loc++);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Insert another node as a parent of this node.
     */

  }, {
    key: "insertAsParentOf",
    value: function insertAsParentOf(other) {
      var parent = other.parent;
      parent.removeChild(this);
      this.parent = parent;
      other.parent = this;
    }
  }, {
    key: "swapWithParent",
    value: function swapWithParent() {
      var parent = this._parent;
      var newParent = parent.parent; // reconnect the children

      var _iterator2 = dataflow_createForOfIteratorHelper(this._children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          child.parent = parent;
        } // remove old links

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this._children = []; // equivalent to removing every child link one by one

      parent.removeChild(this);
      parent.parent.removeChild(parent); // swap two nodes

      this.parent = newParent;
      parent.parent = this;
    }
  }]);

  return DataFlowNode;
}();
var OutputNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(OutputNode, _DataFlowNode);

  var _super = dataflow_createSuper(OutputNode);

  /**
   * @param source The name of the source. Will change in assemble.
   * @param type The type of the output node.
   * @param refCounts A global ref counter map.
   */
  function OutputNode(parent, source, type, refCounts) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, OutputNode);

    _this = _super.call(this, parent, source);
    _this.type = type;
    _this.refCounts = refCounts;
    _this._source = _this._name = source;

    if (_this.refCounts && !(_this._name in _this.refCounts)) {
      _this.refCounts[_this._name] = 0;
    }

    return _this;
  }

  (0,createClass/* default */.Z)(OutputNode, [{
    key: "clone",
    value: function clone() {
      var cloneObj = new this.constructor();
      cloneObj.debugName = "clone_".concat(this.debugName);
      cloneObj._source = this._source;
      cloneObj._name = "clone_".concat(this._name);
      cloneObj.type = this.type;
      cloneObj.refCounts = this.refCounts;
      cloneObj.refCounts[cloneObj._name] = 0;
      return cloneObj;
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set();
    }
  }, {
    key: "hash",
    value: function hash() {
      if (this._hash === undefined) {
        this._hash = "Output ".concat(uniqueId());
      }

      return this._hash;
    }
    /**
     * Request the datasource name and increase the ref counter.
     *
     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
     * It is crucial to request the name from an output node to mark it as a required node.
     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
     *
     * In the assemble phase, this will return the correct name.
     */

  }, {
    key: "getSource",
    value: function getSource() {
      this.refCounts[this._name]++;
      return this._source;
    }
  }, {
    key: "isRequired",
    value: function isRequired() {
      return !!this.refCounts[this._name];
    }
  }, {
    key: "setSource",
    value: function setSource(source) {
      this._source = source;
    }
  }]);

  return OutputNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/timeunit.js








var data_timeunit_excluded = ["unit", "utc"],
    timeunit_excluded2 = ["timeUnit"];

function data_timeunit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = data_timeunit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function data_timeunit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return data_timeunit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return data_timeunit_arrayLikeToArray(o, minLen); }

function data_timeunit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function data_timeunit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function data_timeunit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { data_timeunit_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { data_timeunit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function timeunit_createSuper(Derived) { var hasNativeReflectConstruct = timeunit_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function timeunit_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TimeUnitNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(TimeUnitNode, _DataFlowNode);

  var _super = timeunit_createSuper(TimeUnitNode);

  function TimeUnitNode(parent, formula) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, TimeUnitNode);

    _this = _super.call(this, parent);
    _this.formula = formula;
    return _this;
  }

  (0,createClass/* default */.Z)(TimeUnitNode, [{
    key: "clone",
    value: function clone() {
      return new TimeUnitNode(null, duplicate(this.formula));
    }
  }, {
    key: "merge",
    value:
    /**
     * Merge together TimeUnitNodes assigning the children of `other` to `this`
     * and removing `other`.
     */
    function merge(other) {
      this.formula = data_timeunit_objectSpread({}, this.formula); // if the same hash happen twice, merge

      for (var key in other.formula) {
        if (!this.formula[key]) {
          // copy if it's not a duplicate
          this.formula[key] = other.formula[key];
        }
      }

      var _iterator = data_timeunit_createForOfIteratorHelper(other.children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          other.removeChild(child);
          child.parent = this;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      other.remove();
    }
    /**
     * Remove time units coming from the other node.
     */

  }, {
    key: "removeFormulas",
    value: function removeFormulas(fields) {
      var newFormula = {};

      var _iterator2 = data_timeunit_createForOfIteratorHelper(entries(this.formula)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = (0,slicedToArray/* default */.Z)(_step2.value, 2),
              key = _step2$value[0],
              timeUnit = _step2$value[1];

          if (!fields.has(timeUnit.as)) {
            newFormula[key] = timeUnit;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this.formula = newFormula;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(vals(this.formula).map(function (f) {
        return f.as;
      }));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(vals(this.formula).map(function (f) {
        return f.field;
      }));
    }
  }, {
    key: "hash",
    value: function hash() {
      return "TimeUnit ".concat(util_hash(this.formula));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var transforms = [];

      var _iterator3 = data_timeunit_createForOfIteratorHelper(vals(this.formula)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var f = _step3.value;
          var field = f.field,
              as = f.as,
              timeUnit = f.timeUnit;

          var _normalizeTimeUnit = normalizeTimeUnit(timeUnit),
              unit = _normalizeTimeUnit.unit,
              utc = _normalizeTimeUnit.utc,
              params = (0,objectWithoutProperties/* default */.Z)(_normalizeTimeUnit, data_timeunit_excluded);

          transforms.push(data_timeunit_objectSpread(data_timeunit_objectSpread(data_timeunit_objectSpread(data_timeunit_objectSpread({
            field: replacePathInField(field),
            type: 'timeunit'
          }, unit ? {
            units: getTimeUnitParts(unit)
          } : {}), utc ? {
            timezone: 'utc'
          } : {}), params), {}, {
            as: [as, "".concat(as, "_end")]
          }));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return transforms;
    }
  }], [{
    key: "makeFromEncoding",
    value: function makeFromEncoding(parent, model) {
      var formula = model.reduceFieldDef(function (timeUnitComponent, fieldDef) {
        var field = fieldDef.field,
            timeUnit = fieldDef.timeUnit;

        if (timeUnit) {
          var as = channeldef_vgField(fieldDef, {
            forAs: true
          });
          timeUnitComponent[util_hash({
            as: as,
            field: field,
            timeUnit: timeUnit
          })] = {
            as: as,
            field: field,
            timeUnit: timeUnit
          };
        }

        return timeUnitComponent;
      }, {});

      if (isEmpty(formula)) {
        return null;
      }

      return new TimeUnitNode(parent, formula);
    }
  }, {
    key: "makeFromTransform",
    value: function makeFromTransform(parent, t) {
      var _t = data_timeunit_objectSpread({}, t),
          timeUnit = _t.timeUnit,
          other = (0,objectWithoutProperties/* default */.Z)(_t, timeunit_excluded2);

      var normalizedTimeUnit = normalizeTimeUnit(timeUnit);

      var component = data_timeunit_objectSpread(data_timeunit_objectSpread({}, other), {}, {
        timeUnit: normalizedTimeUnit
      });

      return new TimeUnitNode(parent, (0,defineProperty/* default */.Z)({}, util_hash(component), component));
    }
  }]);

  return TimeUnitNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/project.js



var project_excluded = ["signals", "hasLegend"];

function project_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function project_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { project_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { project_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function project_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = project_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function project_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return project_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return project_arrayLikeToArray(o, minLen); }

function project_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







var TUPLE_FIELDS = '_tuple_fields';
var SelectionProjectionComponent = function SelectionProjectionComponent() {
  (0,classCallCheck/* default */.Z)(this, SelectionProjectionComponent);

  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  this.items = items;
  this.hasChannel = {};
  this.hasField = {};
};
var project_project = {
  defined: function defined() {
    return true; // This transform handles its own defaults, so always run parse.
  },
  parse: function parse(model, selCmpt, selDef) {
    var _selCmpt$project, _encodings, _fields;

    var name = selCmpt.name;
    var proj = (_selCmpt$project = selCmpt.project) !== null && _selCmpt$project !== void 0 ? _selCmpt$project : selCmpt.project = new SelectionProjectionComponent();
    var parsed = {};
    var timeUnits = {};
    var signals = new Set();

    var signalName = function signalName(p, range) {
      var suffix = range === 'visual' ? p.channel : p.field;
      var sg = varName("".concat(name, "_").concat(suffix));

      for (var counter = 1; signals.has(sg); counter++) {
        sg = varName("".concat(name, "_").concat(suffix, "_").concat(counter));
      }

      signals.add(sg);
      return (0,defineProperty/* default */.Z)({}, range, sg);
    };

    var type = selCmpt.type;
    var cfg = model.config.selection[type];
    var init = selDef.value !== undefined ? array(selDef.value) : null; // If no explicit projection (either fields or encodings) is specified, set some defaults.
    // If an initial value is set, try to infer projections.

    var _ref2 = isObject(selDef.select) ? selDef.select : {},
        fields = _ref2.fields,
        encodings = _ref2.encodings;

    if (!fields && !encodings && init) {
      var _iterator = project_createForOfIteratorHelper(init),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var initVal = _step.value;

          // initVal may be a scalar value to smoothen varParam -> pointSelection gradient.
          if (!isObject(initVal)) {
            continue;
          }

          var _iterator2 = project_createForOfIteratorHelper(util_keys(initVal)),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var key = _step2.value;

              if (isSingleDefUnitChannel(key)) {
                (encodings || (encodings = [])).push(key);
              } else {
                if (type === 'interval') {
                  log_warn(INTERVAL_INITIALIZED_WITH_X_Y);
                  encodings = cfg.encodings;
                } else {
                  (fields || (fields = [])).push(key);
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } // If no initial value is specified, use the default configuration.
    // We break this out as a separate if block (instead of an else condition)
    // to account for unprojected point selections that have scalar initial values


    if (!fields && !encodings) {
      encodings = cfg.encodings;
      fields = cfg.fields;
    }

    var _iterator3 = project_createForOfIteratorHelper((_encodings = encodings) !== null && _encodings !== void 0 ? _encodings : []),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var channel = _step3.value;
        var fieldDef = model.fieldDef(channel);

        if (fieldDef) {
          var field = fieldDef.field;

          if (fieldDef.aggregate) {
            log_warn(cannotProjectAggregate(channel, fieldDef.aggregate));
            continue;
          } else if (!field) {
            log_warn(cannotProjectOnChannelWithoutField(channel));
            continue;
          }

          if (fieldDef.timeUnit) {
            field = model.vgField(channel); // Construct TimeUnitComponents which will be combined into a
            // TimeUnitNode. This node may need to be inserted into the
            // dataflow if the selection is used across views that do not
            // have these time units defined.

            var component = {
              timeUnit: fieldDef.timeUnit,
              as: field,
              field: fieldDef.field
            };
            timeUnits[util_hash(component)] = component;
          } // Prevent duplicate projections on the same field.
          // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).


          if (!parsed[field]) {
            // Determine whether the tuple will store enumerated or ranged values.
            // Interval selections store ranges for continuous scales, and enumerations otherwise.
            // Single/multi selections store ranges for binned fields, and enumerations otherwise.
            var tplType = 'E';

            if (type === 'interval') {
              var scaleType = model.getScaleComponent(channel).get('type');

              if (hasContinuousDomain(scaleType)) {
                tplType = 'R';
              }
            } else if (fieldDef.bin) {
              tplType = 'R-RE';
            }

            var p = {
              field: field,
              channel: channel,
              type: tplType
            };
            p.signals = project_objectSpread(project_objectSpread({}, signalName(p, 'data')), signalName(p, 'visual'));
            proj.items.push(parsed[field] = p);
            proj.hasField[field] = proj.hasChannel[channel] = parsed[field];
          }
        } else {
          log_warn(cannotProjectOnChannelWithoutField(channel));
        }
      } // TODO: find a possible channel mapping for these fields.

    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var _iterator4 = project_createForOfIteratorHelper((_fields = fields) !== null && _fields !== void 0 ? _fields : []),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _field = _step4.value;
        if (proj.hasField[_field]) continue;
        var _p = {
          type: 'E',
          field: _field
        };
        _p.signals = project_objectSpread({}, signalName(_p, 'data'));
        proj.items.push(_p);
        proj.hasField[_field] = _p;
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    if (init) {
      selCmpt.init = init.map(function (v) {
        // Selections can be initialized either with a full object that maps projections to values
        // or scalar values to smoothen the abstraction gradient from variable params to point selections.
        return proj.items.map(function (p) {
          return isObject(v) ? v[p.channel] !== undefined ? v[p.channel] : v[p.field] : v;
        });
      });
    }

    if (!isEmpty(timeUnits)) {
      proj.timeUnit = new TimeUnitNode(null, timeUnits);
    }
  },
  signals: function signals(model, selCmpt, allSignals) {
    var name = selCmpt.name + TUPLE_FIELDS;
    var hasSignal = allSignals.filter(function (s) {
      return s.name === name;
    });
    return hasSignal.length > 0 ? allSignals : allSignals.concat({
      name: name,
      value: selCmpt.project.items.map(function (proj) {
        var signals = proj.signals,
            hasLegend = proj.hasLegend,
            rest = (0,objectWithoutProperties/* default */.Z)(proj, project_excluded);

        rest.field = replacePathInField(rest.field);
        return rest;
      })
    });
  }
};
/* harmony default export */ var selection_project = (project_project);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/scales.js
function scales_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = scales_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function scales_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scales_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scales_arrayLikeToArray(o, minLen); }

function scales_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }








var scaleBindings = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';
  },
  parse: function parse(model, selCmpt) {
    var bound = selCmpt.scales = [];

    var _iterator = scales_createForOfIteratorHelper(selCmpt.project.items),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var proj = _step.value;
        var channel = proj.channel;

        if (!isScaleChannel(channel)) {
          continue;
        }

        var scale = model.getScaleComponent(channel);
        var scaleType = scale ? scale.get('type') : undefined;

        if (!scale || !hasContinuousDomain(scaleType)) {
          log_warn(SCALE_BINDINGS_CONTINUOUS);
          continue;
        }

        scale.set('selectionExtent', {
          param: selCmpt.name,
          field: proj.field
        }, true);
        bound.push(proj);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
    var bound = selCmpt.scales.filter(function (proj) {
      return signals.filter(function (s) {
        return s.name === proj.signals.data;
      }).length === 0;
    }); // Top-level signals are only needed for multiview displays and if this
    // view's top-level signals haven't already been generated.

    if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {
      return signals;
    } // vlSelectionResolve does not account for the behavior of bound scales in
    // multiview displays. Each unit view adds a tuple to the store, but the
    // state of the selection is the unit selection most recently updated. This
    // state is captured by the top-level signals that we insert and "push
    // outer" to from within the units. We need to reassemble this state into
    // the top-level named signal, except no single selCmpt has a global view.


    var namedSg = signals.filter(function (s) {
      return s.name === selCmpt.name;
    })[0];
    var update = namedSg.update;

    if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {
      namedSg.update = "{".concat(bound.map(function (proj) {
        return "".concat($(replacePathInField(proj.field)), ": ").concat(proj.signals.data);
      }).join(', '), "}");
    } else {
      var _iterator2 = scales_createForOfIteratorHelper(bound),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var proj = _step2.value;
          var mapping = "".concat($(replacePathInField(proj.field)), ": ").concat(proj.signals.data);

          if (!update.includes(mapping)) {
            update = "".concat(update.substring(0, update.length - 1), ", ").concat(mapping, "}");
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      namedSg.update = update;
    }

    return signals.concat(bound.map(function (proj) {
      return {
        name: proj.signals.data
      };
    }));
  },
  signals: function signals(model, selCmpt, _signals) {
    // Nested signals need only push to top-level signals with multiview displays.
    if (model.parent && !isTopLevelLayer(model)) {
      var _iterator3 = scales_createForOfIteratorHelper(selCmpt.scales),
          _step3;

      try {
        var _loop = function _loop() {
          var proj = _step3.value;

          var signal = _signals.filter(function (s) {
            return s.name === proj.signals.data;
          })[0];

          signal.push = 'outer';
          delete signal.value;
          delete signal.update;
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    return _signals;
  }
};
/* harmony default export */ var selection_scales = (scaleBindings);
function scales_domain(model, channel) {
  var scale = $(model.scaleName(channel));
  return "domain(".concat(scale, ")");
}

function isTopLevelLayer(model) {
  var _model$parent$parent;

  return model.parent && isLayerModel(model.parent) && ((_model$parent$parent = !model.parent.parent) !== null && _model$parent$parent !== void 0 ? _model$parent$parent : isTopLevelLayer(model.parent.parent));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/interval.js



var interval_excluded = ["fill", "fillOpacity", "cursor"];

function interval_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = interval_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function interval_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return interval_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return interval_arrayLikeToArray(o, minLen); }

function interval_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function interval_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function interval_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { interval_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { interval_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










var BRUSH = '_brush';
var SCALE_TRIGGER = '_scale_trigger';
var interval_interval = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'interval';
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var fieldsSg = name + TUPLE_FIELDS;
    var hasScales = selection_scales.defined(selCmpt);
    var init = selCmpt.init ? selCmpt.init[0] : null;
    var dataSignals = [];
    var scaleTriggers = [];

    if (selCmpt.translate && !hasScales) {
      var filterExpr = "!event.item || event.item.mark.name !== ".concat($(name + BRUSH));
      interval_events(selCmpt, function (on, evt) {
        var _a$filter;

        var _a;

        var filters = array((_a$filter = (_a = evt.between[0]).filter) !== null && _a$filter !== void 0 ? _a$filter : _a.filter = []);

        if (!filters.includes(filterExpr)) {
          filters.push(filterExpr);
        }

        return on;
      });
    }

    selCmpt.project.items.forEach(function (proj, i) {
      var channel = proj.channel;

      if (channel !== channel_X && channel !== channel_Y) {
        log_warn('Interval selections only support x and y encoding channels.');
        return;
      }

      var val = init ? init[i] : null;
      var cs = channelSignals(model, selCmpt, proj, val);
      var dname = proj.signals.data;
      var vname = proj.signals.visual;
      var scaleName = $(model.scaleName(channel));
      var scaleType = model.getScaleComponent(channel).get('type');
      var toNum = hasContinuousDomain(scaleType) ? '+' : '';

      _signals.push.apply(_signals, (0,toConsumableArray/* default */.Z)(cs));

      dataSignals.push(dname);
      scaleTriggers.push({
        scaleName: model.scaleName(channel),
        expr: "(!isArray(".concat(dname, ") || ") + "(".concat(toNum, "invert(").concat(scaleName, ", ").concat(vname, ")[0] === ").concat(toNum).concat(dname, "[0] && ") + "".concat(toNum, "invert(").concat(scaleName, ", ").concat(vname, ")[1] === ").concat(toNum).concat(dname, "[1]))")
      });
    }); // Proxy scale reactions to ensure that an infinite loop doesn't occur
    // when an interval selection filter touches the scale.

    if (!hasScales) {
      _signals.push({
        name: name + SCALE_TRIGGER,
        value: {},
        on: [{
          events: scaleTriggers.map(function (t) {
            return {
              scale: t.scaleName
            };
          }),
          update: "".concat(scaleTriggers.map(function (t) {
            return t.expr;
          }).join(' && '), " ? ").concat(name + SCALE_TRIGGER, " : {}")
        }]
      });
    } // Only add an interval to the store if it has valid data extents. Data extents
    // are set to null if pixel extents are equal to account for intervals over
    // ordinal/nominal domains which, when inverted, will still produce a valid datum.


    var update = "unit: ".concat(unitName(model), ", fields: ").concat(fieldsSg, ", values");
    return _signals.concat(interval_objectSpread(interval_objectSpread({
      name: name + TUPLE
    }, init ? {
      init: "{".concat(update, ": ").concat(assembleInit(init), "}")
    } : {}), {}, {
      on: [{
        events: [{
          signal: dataSignals.join(' || ')
        }],
        update: "".concat(dataSignals.join(' && '), " ? {").concat(update, ": [").concat(dataSignals, "]} : null")
      }]
    }));
  },
  marks: function marks(model, selCmpt, _marks) {
    var name = selCmpt.name;
    var _selCmpt$project$hasC = selCmpt.project.hasChannel,
        x = _selCmpt$project$hasC.x,
        y = _selCmpt$project$hasC.y;
    var xvname = x && x.signals.visual;
    var yvname = y && y.signals.visual;
    var store = "data(".concat($(selCmpt.name + STORE), ")"); // Do not add a brush if we're binding to scales.

    if (selection_scales.defined(selCmpt)) {
      return _marks;
    }

    var update = {
      x: x !== undefined ? {
        signal: "".concat(xvname, "[0]")
      } : {
        value: 0
      },
      y: y !== undefined ? {
        signal: "".concat(yvname, "[0]")
      } : {
        value: 0
      },
      x2: x !== undefined ? {
        signal: "".concat(xvname, "[1]")
      } : {
        field: {
          group: 'width'
        }
      },
      y2: y !== undefined ? {
        signal: "".concat(yvname, "[1]")
      } : {
        field: {
          group: 'height'
        }
      }
    }; // If the selection is resolved to global, only a single interval is in
    // the store. Wrap brush mark's encodings with a production rule to test
    // this based on the `unit` property. Hide the brush mark if it corresponds
    // to a unit different from the one in the store.

    if (selCmpt.resolve === 'global') {
      var _iterator = interval_createForOfIteratorHelper(util_keys(update)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;
          update[key] = [interval_objectSpread({
            test: "".concat(store, ".length && ").concat(store, "[0].unit === ").concat(unitName(model))
          }, update[key]), {
            value: 0
          }];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } // Two brush marks ensure that fill colors and other aesthetic choices do
    // not interefere with the core marks, but that the brushed region can still
    // be interacted with (e.g., dragging it around).


    var _selCmpt$mark = selCmpt.mark,
        fill = _selCmpt$mark.fill,
        fillOpacity = _selCmpt$mark.fillOpacity,
        cursor = _selCmpt$mark.cursor,
        stroke = (0,objectWithoutProperties/* default */.Z)(_selCmpt$mark, interval_excluded);

    var vgStroke = util_keys(stroke).reduce(function (def, k) {
      def[k] = [{
        test: [x !== undefined && "".concat(xvname, "[0] !== ").concat(xvname, "[1]"), y !== undefined && "".concat(yvname, "[0] !== ").concat(yvname, "[1]")].filter(function (t) {
          return t;
        }).join(' && '),
        value: stroke[k]
      }, {
        value: null
      }];
      return def;
    }, {});
    return [{
      name: "".concat(name + BRUSH, "_bg"),
      type: 'rect',
      clip: true,
      encode: {
        enter: {
          fill: {
            value: fill
          },
          fillOpacity: {
            value: fillOpacity
          }
        },
        update: update
      }
    }].concat((0,toConsumableArray/* default */.Z)(_marks), [{
      name: name + BRUSH,
      type: 'rect',
      clip: true,
      encode: {
        enter: interval_objectSpread(interval_objectSpread({}, cursor ? {
          cursor: {
            value: cursor
          }
        } : {}), {}, {
          fill: {
            value: 'transparent'
          }
        }),
        update: interval_objectSpread(interval_objectSpread({}, update), vgStroke)
      }
    }]);
  }
};
/* harmony default export */ var selection_interval = (interval_interval);
/**
 * Returns the visual and data signals for an interval selection.
 */

function channelSignals(model, selCmpt, proj, init) {
  var channel = proj.channel;
  var vname = proj.signals.visual;
  var dname = proj.signals.data;
  var hasScales = selection_scales.defined(selCmpt);
  var scaleName = $(model.scaleName(channel));
  var scale = model.getScaleComponent(channel);
  var scaleType = scale ? scale.get('type') : undefined;

  var scaled = function scaled(str) {
    return "scale(".concat(scaleName, ", ").concat(str, ")");
  };

  var size = model.getSizeSignalRef(channel === channel_X ? 'width' : 'height').signal;
  var coord = "".concat(channel, "(unit)");
  var on = interval_events(selCmpt, function (def, evt) {
    return [].concat((0,toConsumableArray/* default */.Z)(def), [{
      events: evt.between[0],
      update: "[".concat(coord, ", ").concat(coord, "]")
    }, {
      events: evt,
      update: "[".concat(vname, "[0], clamp(").concat(coord, ", 0, ").concat(size, ")]")
    } // Brush End
    ]);
  }); // React to pan/zooms of continuous scales. Non-continuous scales
  // (band, point) cannot be pan/zoomed and any other changes
  // to their domains (e.g., filtering) should clear the brushes.

  on.push({
    events: {
      signal: selCmpt.name + SCALE_TRIGGER
    },
    update: hasContinuousDomain(scaleType) ? "[".concat(scaled("".concat(dname, "[0]")), ", ").concat(scaled("".concat(dname, "[1]")), "]") : "[0, 0]"
  });
  return hasScales ? [{
    name: dname,
    on: []
  }] : [interval_objectSpread(interval_objectSpread({
    name: vname
  }, init ? {
    init: assembleInit(init, true, scaled)
  } : {
    value: []
  }), {}, {
    on: on
  }), interval_objectSpread(interval_objectSpread({
    name: dname
  }, init ? {
    init: assembleInit(init)
  } : {}), {}, {
    on: [{
      events: {
        signal: vname
      },
      update: "".concat(vname, "[0] === ").concat(vname, "[1] ? null : invert(").concat(scaleName, ", ").concat(vname, ")")
    }]
  })];
}

function interval_events(selCmpt, cb) {
  return selCmpt.events.reduce(function (on, evt) {
    if (!evt.between) {
      log_warn("".concat(evt, " is not an ordered event stream for interval selections."));
      return on;
    }

    return cb(on, evt);
  }, []);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/point.js



var point_point = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'point';
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var fieldsSg = name + TUPLE_FIELDS;
    var project = selCmpt.project;
    var datum = '(item().isVoronoi ? datum.datum : datum)';
    var values = project.items.map(function (p) {
      var fieldDef = model.fieldDef(p.channel); // Binned fields should capture extents, for a range test against the raw field.

      return fieldDef && fieldDef.bin ? "[".concat(datum, "[").concat($(model.vgField(p.channel, {})), "], ") + "".concat(datum, "[").concat($(model.vgField(p.channel, {
        binSuffix: 'end'
      })), "]]") : "".concat(datum, "[").concat($(p.field), "]");
    }).join(', '); // Only add a discrete selection to the store if a datum is present _and_
    // the interaction isn't occurring on a group mark. This guards against
    // polluting interactive state with invalid values in faceted displays
    // as the group marks are also data-driven. We force the update to account
    // for constant null states but varying toggles (e.g., shift-click in
    // whitespace followed by a click in whitespace; the store should only
    // be cleared on the second click).

    var update = "unit: ".concat(unitName(model), ", fields: ").concat(fieldsSg, ", values");
    var events = selCmpt.events;
    return _signals.concat([{
      name: name + TUPLE,
      on: events ? [{
        events: events,
        update: "datum && item().mark.marktype !== 'group' ? {".concat(update, ": [").concat(values, "]} : null"),
        force: true
      }] : []
    }]);
  }
};
/* harmony default export */ var selection_point = (point_point);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/conditional.js



function conditional_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function conditional_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { conditional_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { conditional_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/**
 * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition
 * or a simple mixin if channel def has no condition.
 */

function wrapCondition(model, channelDef, vgChannel, refFn) {
  var condition = isConditionalDef(channelDef) && channelDef.condition;
  var valueRef = refFn(channelDef);

  if (condition) {
    var conditions = array(condition);
    var vgConditions = conditions.map(function (c) {
      var conditionValueRef = refFn(c);

      if (isConditionalParameter(c)) {
        var param = c.param,
            empty = c.empty;
        var test = parseSelectionPredicate(model, {
          param: param,
          empty: empty
        });
        return conditional_objectSpread({
          test: test
        }, conditionValueRef);
      } else {
        var _test = predicate_expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it


        return conditional_objectSpread({
          test: _test
        }, conditionValueRef);
      }
    });
    return (0,defineProperty/* default */.Z)({}, vgChannel, [].concat((0,toConsumableArray/* default */.Z)(vgConditions), (0,toConsumableArray/* default */.Z)(valueRef !== undefined ? [valueRef] : [])));
  } else {
    return valueRef !== undefined ? (0,defineProperty/* default */.Z)({}, vgChannel, valueRef) : {};
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/text.js




function text_text(model) {
  var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';
  var channelDef = model.encoding[channel];
  return wrapCondition(model, channelDef, channel, function (cDef) {
    return textRef(cDef, model.config);
  });
}
function textRef(channelDef, config) {
  var expr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'datum';

  // text
  if (channelDef) {
    if (isValueDef(channelDef)) {
      return signalOrValueRef(channelDef.value);
    }

    if (isFieldOrDatumDef(channelDef)) {
      var _getFormatMixins = getFormatMixins(channelDef),
          format = _getFormatMixins.format,
          formatType = _getFormatMixins.formatType;

      return formatSignalRef({
        fieldOrDatumDef: channelDef,
        format: format,
        formatType: formatType,
        expr: expr,
        config: config
      });
    }
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/tooltip.js



function tooltip_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function tooltip_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tooltip_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tooltip_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }












function tooltip(model) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var encoding = model.encoding,
      markDef = model.markDef,
      config = model.config,
      stack = model.stack;
  var channelDef = encoding.tooltip;

  if (isArray(channelDef)) {
    return {
      tooltip: tooltipRefForEncoding({
        tooltip: channelDef
      }, stack, config, opt)
    };
  } else {
    var datum = opt.reactiveGeom ? 'datum.datum' : 'datum';
    return wrapCondition(model, channelDef, 'tooltip', function (cDef) {
      // use valueRef based on channelDef first
      var tooltipRefFromChannelDef = textRef(cDef, config, datum);

      if (tooltipRefFromChannelDef) {
        return tooltipRefFromChannelDef;
      }

      if (cDef === null) {
        // Allow using encoding.tooltip = null to disable tooltip
        return undefined;
      }

      var markTooltip = getMarkPropOrConfig('tooltip', markDef, config);

      if (markTooltip === true) {
        markTooltip = {
          content: 'encoding'
        };
      }

      if (isString(markTooltip)) {
        return {
          value: markTooltip
        };
      } else if (isObject(markTooltip)) {
        // `tooltip` is `{fields: 'encodings' | 'fields'}`
        if (isSignalRef(markTooltip)) {
          return markTooltip;
        } else if (markTooltip.content === 'encoding') {
          return tooltipRefForEncoding(encoding, stack, config, opt);
        } else {
          return {
            signal: datum
          };
        }
      }

      return undefined;
    });
  }
}
function tooltipData(encoding, stack, config) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      reactiveGeom = _ref.reactiveGeom;

  var toSkip = {};
  var expr = reactiveGeom ? 'datum.datum' : 'datum';
  var tuples = [];

  function add(fDef, channel) {
    var _value;

    var mainChannel = getMainRangeChannel(channel);
    var fieldDef = isTypedFieldDef(fDef) ? fDef : tooltip_objectSpread(tooltip_objectSpread({}, fDef), {}, {
      type: encoding[mainChannel].type // for secondary field def, copy type from main channel

    });
    var title = fieldDef.title || defaultTitle(fieldDef, config);
    var key = array(title).join(', ');
    var value;

    if (isXorY(channel)) {
      var channel2 = channel === 'x' ? 'x2' : 'y2';
      var fieldDef2 = getFieldDef(encoding[channel2]);

      if (isBinned(fieldDef.bin) && fieldDef2) {
        var startField = channeldef_vgField(fieldDef, {
          expr: expr
        });
        var endField = channeldef_vgField(fieldDef2, {
          expr: expr
        });

        var _getFormatMixins = getFormatMixins(fieldDef),
            format = _getFormatMixins.format,
            formatType = _getFormatMixins.formatType;

        value = binFormatExpression(startField, endField, format, formatType, config);
        toSkip[channel2] = true;
      } else if (stack && stack.fieldChannel === channel && stack.offset === 'normalize') {
        var _getFormatMixins2 = getFormatMixins(fieldDef),
            _format = _getFormatMixins2.format,
            _formatType = _getFormatMixins2.formatType;

        value = formatSignalRef({
          fieldOrDatumDef: fieldDef,
          format: _format,
          formatType: _formatType,
          expr: expr,
          config: config,
          normalizeStack: true
        }).signal;
      }
    }

    (_value = value) !== null && _value !== void 0 ? _value : value = textRef(fieldDef, config, expr).signal;
    tuples.push({
      channel: channel,
      key: key,
      value: value
    });
  }

  forEach(encoding, function (channelDef, channel) {
    if (isFieldDef(channelDef)) {
      add(channelDef, channel);
    } else if (hasConditionalFieldDef(channelDef)) {
      add(channelDef.condition, channel);
    }
  });
  var out = {};

  for (var _i = 0, _tuples = tuples; _i < _tuples.length; _i++) {
    var _tuples$_i = _tuples[_i],
        channel = _tuples$_i.channel,
        key = _tuples$_i.key,
        value = _tuples$_i.value;

    if (!toSkip[channel] && !out[key]) {
      out[key] = value;
    }
  }

  return out;
}
function tooltipRefForEncoding(encoding, stack, config) {
  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      reactiveGeom = _ref2.reactiveGeom;

  var data = tooltipData(encoding, stack, config, {
    reactiveGeom: reactiveGeom
  });
  var keyValues = entries(data).map(function (_ref3) {
    var _ref4 = (0,slicedToArray/* default */.Z)(_ref3, 2),
        key = _ref4[0],
        value = _ref4[1];

    return "\"".concat(key, "\": ").concat(value);
  });
  return keyValues.length > 0 ? {
    signal: "{".concat(keyValues.join(', '), "}")
  } : undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/aria.js



function aria_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function aria_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { aria_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { aria_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







function aria(model) {
  var markDef = model.markDef,
      config = model.config;
  var enableAria = getMarkPropOrConfig('aria', markDef, config); // We can ignore other aria properties if ariaHidden is true.

  if (enableAria === false) {
    // getMarkGroups sets aria to false already so we don't have to set it in the encode block
    return {};
  }

  return aria_objectSpread(aria_objectSpread(aria_objectSpread({}, enableAria ? {
    aria: enableAria
  } : {}), ariaRoleDescription(model)), aria_description(model));
}

function ariaRoleDescription(model) {
  var mark = model.mark,
      markDef = model.markDef,
      config = model.config;

  if (config.aria === false) {
    return {};
  }

  var ariaRoleDesc = getMarkPropOrConfig('ariaRoleDescription', markDef, config);

  if (ariaRoleDesc != null) {
    return {
      ariaRoleDescription: {
        value: ariaRoleDesc
      }
    };
  }

  return mark in VG_MARK_INDEX ? {} : {
    ariaRoleDescription: {
      value: mark
    }
  };
}

function aria_description(model) {
  var encoding = model.encoding,
      markDef = model.markDef,
      config = model.config,
      stack = model.stack;
  var channelDef = encoding.description;

  if (channelDef) {
    return wrapCondition(model, channelDef, 'description', function (cDef) {
      return textRef(cDef, model.config);
    });
  } // Use default from mark def or config if defined.
  // Functions in encode usually just return undefined but since we are defining a default below, we need to check the default here.


  var descriptionValue = getMarkPropOrConfig('description', markDef, config);

  if (descriptionValue != null) {
    return {
      description: signalOrValueRef(descriptionValue)
    };
  }

  if (config.aria === false) {
    return {};
  }

  var data = tooltipData(encoding, stack, config);

  if (isEmpty(data)) {
    return undefined;
  }

  return {
    description: {
      signal: entries(data).map(function (_ref, index) {
        var _ref2 = (0,slicedToArray/* default */.Z)(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        return "\"".concat(index > 0 ? '; ' : '').concat(key, ": \" + (").concat(value, ")");
      }).join(' + ')
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/nonposition.js



/**
 * Return encode for non-positional channels with scales. (Text doesn't have scale.)
 */

function nonPosition(channel, model) {
  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var markDef = model.markDef,
      encoding = model.encoding,
      config = model.config;
  var vgChannel = opt.vgChannel;
  var defaultRef = opt.defaultRef,
      defaultValue = opt.defaultValue;

  if (defaultRef === undefined) {
    var _defaultValue;

    // prettier-ignore
    (_defaultValue = defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : defaultValue = getMarkPropOrConfig(channel, markDef, config, {
      vgChannel: vgChannel,
      ignoreVgConfig: true
    });

    if (defaultValue !== undefined) {
      defaultRef = signalOrValueRef(defaultValue);
    }
  }

  var channelDef = encoding[channel];
  return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, function (cDef) {
    return midPoint({
      channel: channel,
      channelDef: cDef,
      markDef: markDef,
      config: config,
      scaleName: model.scaleName(channel),
      scale: model.getScaleComponent(channel),
      stack: null,
      defaultRef: defaultRef
    });
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/color.js


function color_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function color_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { color_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { color_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





function color_color(model) {
  var _opt$filled, _ref, _getMarkPropOrConfig, _getMarkPropOrConfig2;

  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    filled: undefined
  };
  var markDef = model.markDef,
      encoding = model.encoding,
      config = model.config;
  var markType = markDef.type; // Allow filled to be overridden (for trail's "filled")

  var filled = (_opt$filled = opt.filled) !== null && _opt$filled !== void 0 ? _opt$filled : getMarkPropOrConfig('filled', markDef, config);
  var transparentIfNeeded = util_contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;
  var defaultFill = (_ref = (_getMarkPropOrConfig = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {
    vgChannel: 'fill'
  })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
  config.mark[filled === true && 'color']) !== null && _ref !== void 0 ? _ref : // If there is no fill, always fill symbols, bar, geoshape
  // with transparent fills https://github.com/vega/vega-lite/issues/1316
  transparentIfNeeded;
  var defaultStroke = (_getMarkPropOrConfig2 = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {
    vgChannel: 'stroke'
  })) !== null && _getMarkPropOrConfig2 !== void 0 ? _getMarkPropOrConfig2 : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
  config.mark[filled === false && 'color'];
  var colorVgChannel = filled ? 'fill' : 'stroke';

  var fillStrokeMarkDefAndConfig = color_objectSpread(color_objectSpread({}, defaultFill ? {
    fill: signalOrValueRef(defaultFill)
  } : {}), defaultStroke ? {
    stroke: signalOrValueRef(defaultStroke)
  } : {});

  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {
    log_warn(droppingColor('property', {
      fill: 'fill' in markDef,
      stroke: 'stroke' in markDef
    }));
  }

  return color_objectSpread(color_objectSpread(color_objectSpread(color_objectSpread({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {
    vgChannel: colorVgChannel,
    defaultValue: filled ? defaultFill : defaultStroke
  })), nonPosition('fill', model, {
    // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding
    defaultValue: encoding.fill ? defaultFill : undefined
  })), nonPosition('stroke', model, {
    // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding
    defaultValue: encoding.stroke ? defaultStroke : undefined
  }));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/zindex.js




function zindex(model) {
  var encoding = model.encoding,
      mark = model.mark;
  var order = encoding.order;

  if (!isPathMark(mark) && isValueDef(order)) {
    return wrapCondition(model, order, 'zindex', function (cd) {
      return signalOrValueRef(cd.value);
    });
  }

  return {};
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/offset.js

function getOffset(channel, markDef) {
  var offsetChannel = getOffsetChannel(channel); // TODO: in the future read from encoding channel too

  var markDefOffsetValue = markDef[offsetChannel];

  if (markDefOffsetValue) {
    return markDefOffsetValue;
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/position-point.js


function position_point_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function position_point_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { position_point_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { position_point_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








/**
 * Return encode for point (non-band) position channels.
 */

function pointPosition(channel, model, _ref) {
  var defaultPos = _ref.defaultPos,
      vgChannel = _ref.vgChannel;
  var encoding = model.encoding,
      markDef = model.markDef,
      config = model.config,
      stack = model.stack;
  var channelDef = encoding[channel];
  var channel2Def = encoding[getSecondaryRangeChannel(channel)];
  var scaleName = model.scaleName(channel);
  var scale = model.getScaleComponent(channel);
  var offset = getOffset(channel, markDef); // Get default position or position from mark def

  var defaultRef = pointPositionDefaultRef({
    model: model,
    defaultPos: defaultPos,
    channel: channel,
    scaleName: scaleName,
    scale: scale
  });
  var valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.
  {
    field: model.getName(channel)
  } : positionRef({
    channel: channel,
    channelDef: channelDef,
    channel2Def: channel2Def,
    markDef: markDef,
    config: config,
    scaleName: scaleName,
    scale: scale,
    stack: stack,
    offset: offset,
    defaultRef: defaultRef
  });
  return valueRef ? (0,defineProperty/* default */.Z)({}, vgChannel || channel, valueRef) : undefined;
} // TODO: we need to find a way to refactor these so that scaleName is a part of scale
// but that's complicated. For now, this is a huge step moving forward.

/**
 * @return Vega ValueRef for normal x- or y-position without projection
 */

function positionRef(params) {
  var channel = params.channel,
      channelDef = params.channelDef,
      scaleName = params.scaleName,
      stack = params.stack,
      offset = params.offset,
      markDef = params.markDef; // This isn't a part of midPoint because we use midPoint for non-position too

  if (isFieldOrDatumDef(channelDef) && stack && channel === stack.fieldChannel) {
    if (isFieldDef(channelDef)) {
      var bandPosition = channelDef.bandPosition;

      if (bandPosition === undefined && markDef.type === 'text' && (channel === 'radius' || channel === 'theta')) {
        // theta and radius of text mark should use bandPosition = 0.5 by default
        // so that labels for arc marks are centered automatically
        bandPosition = 0.5;
      }

      if (bandPosition !== undefined) {
        return interpolatedSignalRef({
          scaleName: scaleName,
          fieldOrDatumDef: channelDef,
          startSuffix: 'start',
          bandPosition: bandPosition,
          offset: offset
        });
      }
    } // x or y use stack_end so that stacked line's point mark use stack_end too.


    return valueRefForFieldOrDatumDef(channelDef, scaleName, {
      suffix: 'end'
    }, {
      offset: offset
    });
  }

  return midPointRefWithPositionInvalidTest(params);
}
function pointPositionDefaultRef(_ref3) {
  var model = _ref3.model,
      defaultPos = _ref3.defaultPos,
      channel = _ref3.channel,
      scaleName = _ref3.scaleName,
      scale = _ref3.scale;
  var markDef = model.markDef,
      config = model.config;
  return function () {
    var mainChannel = getMainRangeChannel(channel);
    var vgChannel = getVgPositionChannel(channel);
    var definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, {
      vgChannel: vgChannel
    });

    if (definedValueOrConfig !== undefined) {
      return widthHeightValueOrSignalRef(channel, definedValueOrConfig);
    }

    switch (defaultPos) {
      case 'zeroOrMin':
      case 'zeroOrMax':
        if (scaleName) {
          var scaleType = scale.get('type');

          if (util_contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {// Log scales cannot have zero.
            // Zero in time scale is arbitrary, and does not affect ratio.
            // (Time is an interval level of measurement, not ratio).
            // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.
          } else {
            if (scale.domainDefinitelyIncludesZero()) {
              return {
                scale: scaleName,
                value: 0
              };
            }
          }
        }

        if (defaultPos === 'zeroOrMin') {
          return mainChannel === 'y' ? {
            field: {
              group: 'height'
            }
          } : {
            value: 0
          };
        } else {
          // zeroOrMax
          switch (mainChannel) {
            case 'radius':
              // max of radius is min(width, height) / 2
              return {
                signal: "min(".concat(model.width.signal, ",").concat(model.height.signal, ")/2")
              };

            case 'theta':
              return {
                signal: '2*PI'
              };

            case 'x':
              return {
                field: {
                  group: 'width'
                }
              };

            case 'y':
              return {
                value: 0
              };
          }
        }

        break;

      case 'mid':
        {
          var sizeRef = model[getSizeChannel(channel)];
          return position_point_objectSpread(position_point_objectSpread({}, sizeRef), {}, {
            mult: 0.5
          });
        }
    } // defaultPos === null


    return undefined;
  };
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/position-align.js




var ALIGNED_X_CHANNEL = {
  left: 'x',
  center: 'xc',
  right: 'x2'
};
var BASELINED_Y_CHANNEL = {
  top: 'y',
  middle: 'yc',
  bottom: 'y2'
};
function vgAlignedPositionChannel(channel, markDef, config) {
  var defaultAlign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'middle';

  if (channel === 'radius' || channel === 'theta') {
    return getVgPositionChannel(channel);
  }

  var alignChannel = channel === 'x' ? 'align' : 'baseline';
  var align = getMarkPropOrConfig(alignChannel, markDef, config);
  var alignExcludingSignal;

  if (isSignalRef(align)) {
    log_warn(rangeMarkAlignmentCannotBeExpression(alignChannel));
    alignExcludingSignal = undefined;
  } else {
    alignExcludingSignal = align;
  }

  if (channel === 'x') {
    return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === 'top' ? 'left' : 'center')];
  } else {
    return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/position-range.js


function position_range_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function position_range_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { position_range_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { position_range_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










/**
 * Utility for area/rule position, which can be either point or range.
 * (One of the axes should be point and the other should be range.)
 */

function pointOrRangePosition(channel, model, _ref) {
  var defaultPos = _ref.defaultPos,
      defaultPos2 = _ref.defaultPos2,
      range = _ref.range;

  if (range) {
    return rangePosition(channel, model, {
      defaultPos: defaultPos,
      defaultPos2: defaultPos2
    });
  }

  return pointPosition(channel, model, {
    defaultPos: defaultPos
  });
}
function rangePosition(channel, model, _ref2) {
  var defaultPos = _ref2.defaultPos,
      defaultPos2 = _ref2.defaultPos2;
  var markDef = model.markDef,
      config = model.config;
  var channel2 = getSecondaryRangeChannel(channel);
  var sizeChannel = getSizeChannel(channel);
  var pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);
  var vgChannel = pos2Mixins[sizeChannel] ? // If there is width/height, we need to position the marks based on the alignment.
  vgAlignedPositionChannel(channel, markDef, config) : // Otherwise, make sure to apply to the right Vg Channel (for arc mark)
  getVgPositionChannel(channel);
  return position_range_objectSpread(position_range_objectSpread({}, pointPosition(channel, model, {
    defaultPos: defaultPos,
    vgChannel: vgChannel
  })), pos2Mixins);
}
/**
 * Return encode for x2, y2.
 * If channel is not specified, return one channel based on orientation.
 */

function pointPosition2OrSize(model, defaultPos, channel) {
  var _position2orSize;

  var encoding = model.encoding,
      mark = model.mark,
      markDef = model.markDef,
      stack = model.stack,
      config = model.config;
  var baseChannel = getMainRangeChannel(channel);
  var sizeChannel = getSizeChannel(channel);
  var vgChannel = getVgPositionChannel(channel);
  var channelDef = encoding[baseChannel];
  var scaleName = model.scaleName(baseChannel);
  var scale = model.getScaleComponent(baseChannel);
  var offset = channel in encoding || channel in markDef ? getOffset(channel, model.markDef) : getOffset(baseChannel, model.markDef);

  if (!channelDef && (channel === 'x2' || channel === 'y2') && (encoding.latitude || encoding.longitude)) {
    var vgSizeChannel = getSizeChannel(channel);
    var size = model.markDef[vgSizeChannel];

    if (size != null) {
      return (0,defineProperty/* default */.Z)({}, vgSizeChannel, {
        value: size
      });
    } else {
      return (0,defineProperty/* default */.Z)({}, vgChannel, {
        field: model.getName(channel)
      });
    }
  }

  var valueRef = position2Ref({
    channel: channel,
    channelDef: channelDef,
    channel2Def: encoding[channel],
    markDef: markDef,
    config: config,
    scaleName: scaleName,
    scale: scale,
    stack: stack,
    offset: offset,
    defaultRef: undefined
  });

  if (valueRef !== undefined) {
    return (0,defineProperty/* default */.Z)({}, vgChannel, valueRef);
  } // TODO: check width/height encoding here once we add them
  // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:
  // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)


  return position2orSize(channel, markDef) || position2orSize(channel, (_position2orSize = {}, (0,defineProperty/* default */.Z)(_position2orSize, channel, getMarkStyleConfig(channel, markDef, config.style)), (0,defineProperty/* default */.Z)(_position2orSize, sizeChannel, getMarkStyleConfig(sizeChannel, markDef, config.style)), _position2orSize)) || position2orSize(channel, config[mark]) || position2orSize(channel, config.mark) || (0,defineProperty/* default */.Z)({}, vgChannel, pointPositionDefaultRef({
    model: model,
    defaultPos: defaultPos,
    channel: channel,
    scaleName: scaleName,
    scale: scale
  })());
}

function position2Ref(_ref7) {
  var channel = _ref7.channel,
      channelDef = _ref7.channelDef,
      channel2Def = _ref7.channel2Def,
      markDef = _ref7.markDef,
      config = _ref7.config,
      scaleName = _ref7.scaleName,
      scale = _ref7.scale,
      stack = _ref7.stack,
      offset = _ref7.offset,
      defaultRef = _ref7.defaultRef;

  if (isFieldOrDatumDef(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)
  channel.charAt(0) === stack.fieldChannel.charAt(0)) {
    return valueRefForFieldOrDatumDef(channelDef, scaleName, {
      suffix: 'start'
    }, {
      offset: offset
    });
  }

  return midPointRefWithPositionInvalidTest({
    channel: channel,
    channelDef: channel2Def,
    scaleName: scaleName,
    scale: scale,
    stack: stack,
    markDef: markDef,
    config: config,
    offset: offset,
    defaultRef: defaultRef
  });
}

function position2orSize(channel, markDef) {
  var sizeChannel = getSizeChannel(channel);
  var vgChannel = getVgPositionChannel(channel);

  if (markDef[vgChannel] !== undefined) {
    return (0,defineProperty/* default */.Z)({}, vgChannel, widthHeightValueOrSignalRef(channel, markDef[vgChannel]));
  } else if (markDef[channel] !== undefined) {
    return (0,defineProperty/* default */.Z)({}, vgChannel, widthHeightValueOrSignalRef(channel, markDef[channel]));
  } else if (markDef[sizeChannel]) {
    var dimensionSize = markDef[sizeChannel];

    if (isRelativeBandSize(dimensionSize)) {
      log_warn(relativeBandSizeNotSupported(sizeChannel));
    } else {
      return (0,defineProperty/* default */.Z)({}, sizeChannel, widthHeightValueOrSignalRef(channel, dimensionSize));
    }
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/position-rect.js


function position_rect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function position_rect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { position_rect_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { position_rect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

















function rectPosition(model, channel, mark) {
  var _ref, _encoding$sizeChannel;

  var config = model.config,
      encoding = model.encoding,
      markDef = model.markDef;
  var channel2 = getSecondaryRangeChannel(channel);
  var sizeChannel = getSizeChannel(channel);
  var channelDef = encoding[channel];
  var channelDef2 = encoding[channel2];
  var scale = model.getScaleComponent(channel);
  var scaleType = scale ? scale.get('type') : undefined;
  var scaleName = model.scaleName(channel);
  var orient = markDef.orient;
  var hasSizeDef = (_ref = (_encoding$sizeChannel = encoding[sizeChannel]) !== null && _encoding$sizeChannel !== void 0 ? _encoding$sizeChannel : encoding.size) !== null && _ref !== void 0 ? _ref : getMarkPropOrConfig('size', markDef, config, {
    vgChannel: sizeChannel
  });
  var isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal'); // x, x2, and width -- we must specify two of these in all conditions

  if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !(hasSizeDef && !isRelativeBandSize(hasSizeDef)) && !hasDiscreteDomain(scaleType)) {
    var _model$component$axes, _axis$get;

    var bandSize = getBandSize({
      channel: channel,
      fieldDef: channelDef,
      markDef: markDef,
      config: config,
      scaleType: scaleType
    });
    var axis = (_model$component$axes = model.component.axes[channel]) === null || _model$component$axes === void 0 ? void 0 : _model$component$axes[0];
    var axisTranslate = (_axis$get = axis === null || axis === void 0 ? void 0 : axis.get('translate')) !== null && _axis$get !== void 0 ? _axis$get : 0.5; // vega default is 0.5

    return rectBinPosition({
      fieldDef: channelDef,
      fieldDef2: channelDef2,
      channel: channel,
      markDef: markDef,
      scaleName: scaleName,
      bandSize: bandSize,
      axisTranslate: axisTranslate,
      spacing: isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) : undefined,
      reverse: scale.get('reverse'),
      config: config
    });
  } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {
    return positionAndSize(channelDef, channel, model);
  } else {
    return rangePosition(channel, model, {
      defaultPos: 'zeroOrMax',
      defaultPos2: 'zeroOrMin'
    });
  }
}

function defaultSizeRef(sizeChannel, scaleName, scale, config, bandSize) {
  if (isRelativeBandSize(bandSize)) {
    if (scale) {
      var scaleType = scale.get('type');

      if (scaleType === 'band') {
        return {
          scale: scaleName,
          band: bandSize.band
        };
      } else if (bandSize.band !== 1) {
        log_warn(cannotUseRelativeBandSizeWithNonBandScale(scaleType));
        bandSize = undefined;
      }
    } else {
      return {
        mult: bandSize.band,
        field: {
          group: sizeChannel
        }
      };
    }
  } else if (isSignalRef(bandSize)) {
    return bandSize;
  } else if (bandSize) {
    return {
      value: bandSize
    };
  } // no valid band size


  if (scale) {
    var scaleRange = scale.get('range');

    if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
      return {
        value: scaleRange.step - 2
      };
    }
  }

  var defaultStep = getViewConfigDiscreteStep(config.view, sizeChannel);
  return {
    value: defaultStep - 2
  };
}
/**
 * Output position encoding and its size encoding for continuous, point, and band scales.
 */


function positionAndSize(fieldDef, channel, model) {
  var markDef = model.markDef,
      encoding = model.encoding,
      config = model.config,
      stack = model.stack;
  var orient = markDef.orient;
  var scaleName = model.scaleName(channel);
  var scale = model.getScaleComponent(channel);
  var vgSizeChannel = getSizeChannel(channel);
  var channel2 = getSecondaryRangeChannel(channel); // use "size" channel for bars, if there is orient and the channel matches the right orientation

  var useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x'; // Use size encoding / mark property / config if it exists

  var sizeMixins;

  if (encoding.size || markDef.size) {
    if (useVlSizeChannel) {
      sizeMixins = nonPosition('size', model, {
        vgChannel: vgSizeChannel,
        defaultRef: signalOrValueRef(markDef.size)
      });
    } else {
      log_warn(cannotApplySizeToNonOrientedMark(markDef.type));
    }
  } // Otherwise, apply default value


  var bandSize = getBandSize({
    channel: channel,
    fieldDef: fieldDef,
    markDef: markDef,
    config: config,
    scaleType: scale === null || scale === void 0 ? void 0 : scale.get('type'),
    useVlSizeChannel: useVlSizeChannel
  });
  sizeMixins = sizeMixins || (0,defineProperty/* default */.Z)({}, vgSizeChannel, defaultSizeRef(vgSizeChannel, scaleName, scale, config, bandSize));
  /*
    Band scales with size value and all point scales, use xc/yc + band=0.5
       Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.
    In this case, size_band is the band specified in the x/y-encoding.
    By default band is 1, so `(1 - band) / 2` = 0.
    If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2
   */

  var defaultBandAlign = (scale === null || scale === void 0 ? void 0 : scale.get('type')) !== 'band' || !('band' in sizeMixins[vgSizeChannel]) ? 'middle' : 'top';
  var vgChannel = vgAlignedPositionChannel(channel, markDef, config, defaultBandAlign);
  var center = vgChannel === 'xc' || vgChannel === 'yc';
  var offset = getOffset(channel, markDef);
  var posRef = midPointRefWithPositionInvalidTest({
    channel: channel,
    channelDef: fieldDef,
    markDef: markDef,
    config: config,
    scaleName: scaleName,
    scale: scale,
    stack: stack,
    offset: offset,
    defaultRef: pointPositionDefaultRef({
      model: model,
      defaultPos: 'mid',
      channel: channel,
      scaleName: scaleName,
      scale: scale
    }),
    bandPosition: center ? 0.5 : isSignalRef(bandSize) ? {
      signal: "(1-".concat(bandSize, ")/2")
    } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0
  });

  if (vgSizeChannel) {
    return position_rect_objectSpread((0,defineProperty/* default */.Z)({}, vgChannel, posRef), sizeMixins);
  } else {
    var _ref3;

    // otherwise, we must simulate size by setting position2 = position + size
    // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)
    var vgChannel2 = getVgPositionChannel(channel2);
    var sizeRef = sizeMixins[vgSizeChannel];
    var sizeOffset = offset ? position_rect_objectSpread(position_rect_objectSpread({}, sizeRef), {}, {
      offset: offset
    }) : sizeRef;
    return _ref3 = {}, (0,defineProperty/* default */.Z)(_ref3, vgChannel, posRef), (0,defineProperty/* default */.Z)(_ref3, vgChannel2, isArray(posRef) ? [posRef[0], position_rect_objectSpread(position_rect_objectSpread({}, posRef[1]), {}, {
      offset: sizeOffset
    })] : position_rect_objectSpread(position_rect_objectSpread({}, posRef), {}, {
      offset: sizeOffset
    })), _ref3;
  }
}

function getBinSpacing(channel, spacing, reverse, translate, offset) {
  if (isPolarPositionChannel(channel)) {
    return 0;
  }

  var spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;

  if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate)) {
    var reverseExpr = signalOrStringValue(reverse);
    var offsetExpr = signalOrStringValue(offset);
    var translateExpr = signalOrStringValue(translate);
    var t = translateExpr ? "".concat(translateExpr, " + ") : '';
    var r = reverseExpr ? "(".concat(reverseExpr, " ? -1 : 1) * ") : '';
    var o = offsetExpr ? "(".concat(offsetExpr, " + ").concat(spacingOffset, ")") : spacingOffset;
    return {
      signal: t + r + o
    };
  } else {
    offset = offset || 0;
    return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);
  }
}

function rectBinPosition(_ref4) {
  var fieldDef = _ref4.fieldDef,
      fieldDef2 = _ref4.fieldDef2,
      channel = _ref4.channel,
      bandSize = _ref4.bandSize,
      scaleName = _ref4.scaleName,
      markDef = _ref4.markDef,
      _ref4$spacing = _ref4.spacing,
      spacing = _ref4$spacing === void 0 ? 0 : _ref4$spacing,
      axisTranslate = _ref4.axisTranslate,
      reverse = _ref4.reverse,
      config = _ref4.config;
  var channel2 = getSecondaryRangeChannel(channel);
  var vgChannel = getVgPositionChannel(channel);
  var vgChannel2 = getVgPositionChannel(channel2);
  var offset = getOffset(channel, markDef);
  var bandPosition = isSignalRef(bandSize) ? {
    signal: "(1-".concat(bandSize.signal, ")/2")
  } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0.5;

  if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {
    var _ref5;

    return _ref5 = {}, (0,defineProperty/* default */.Z)(_ref5, vgChannel2, rectBinRef({
      channel: channel,
      fieldDef: fieldDef,
      scaleName: scaleName,
      markDef: markDef,
      bandPosition: bandPosition,
      offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),
      config: config
    })), (0,defineProperty/* default */.Z)(_ref5, vgChannel, rectBinRef({
      channel: channel,
      fieldDef: fieldDef,
      scaleName: scaleName,
      markDef: markDef,
      bandPosition: isSignalRef(bandPosition) ? {
        signal: "1-".concat(bandPosition.signal)
      } : 1 - bandPosition,
      offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset),
      config: config
    })), _ref5;
  } else if (isBinned(fieldDef.bin)) {
    var startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {
      offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)
    });

    if (isFieldDef(fieldDef2)) {
      var _ref6;

      return _ref6 = {}, (0,defineProperty/* default */.Z)(_ref6, vgChannel2, startRef), (0,defineProperty/* default */.Z)(_ref6, vgChannel, valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {
        offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
      })), _ref6;
    } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {
      var _ref7;

      return _ref7 = {}, (0,defineProperty/* default */.Z)(_ref7, vgChannel2, startRef), (0,defineProperty/* default */.Z)(_ref7, vgChannel, {
        signal: "scale(\"".concat(scaleName, "\", ").concat(channeldef_vgField(fieldDef, {
          expr: 'datum'
        }), " + ").concat(fieldDef.bin.step, ")"),
        offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
      }), _ref7;
    }
  }

  log_warn(channelRequiredForBinned(channel2));
  return undefined;
}
/**
 * Value Ref for binned fields
 */

function rectBinRef(_ref8) {
  var channel = _ref8.channel,
      fieldDef = _ref8.fieldDef,
      scaleName = _ref8.scaleName,
      markDef = _ref8.markDef,
      bandPosition = _ref8.bandPosition,
      offset = _ref8.offset,
      config = _ref8.config;
  var r = interpolatedSignalRef({
    scaleName: scaleName,
    fieldOrDatumDef: fieldDef,
    bandPosition: bandPosition,
    offset: offset
  });
  return wrapPositionInvalidTest({
    fieldDef: fieldDef,
    channel: channel,
    markDef: markDef,
    ref: r,
    config: config
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/base.js



function base_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function base_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { base_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { base_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }























var ALWAYS_IGNORE = new Set(['aria', 'width', 'height']);
function baseEncodeEntry(model, ignore) {
  var _ref = ignore.color === 'include' ? color_color(model) : {},
      _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? undefined : _ref$fill,
      _ref$stroke = _ref.stroke,
      stroke = _ref$stroke === void 0 ? undefined : _ref$stroke;

  return base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread(base_objectSpread({}, markDefProperties(model.markDef, ignore)), wrapAllFieldsInvalid(model, 'fill', fill)), wrapAllFieldsInvalid(model, 'stroke', stroke)), nonPosition('opacity', model)), nonPosition('fillOpacity', model)), nonPosition('strokeOpacity', model)), nonPosition('strokeWidth', model)), nonPosition('strokeDash', model)), zindex(model)), tooltip(model)), text_text(model, 'href')), aria(model));
} // TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987

function wrapAllFieldsInvalid(model, channel, valueRef) {
  var config = model.config,
      mark = model.mark,
      markDef = model.markDef;
  var invalid = getMarkPropOrConfig('invalid', markDef, config);

  if (invalid === 'hide' && valueRef && !isPathMark(mark)) {
    // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
    // For path marks, we will use "defined" property and skip these values instead.
    var test = allFieldsInvalidPredicate(model, {
      invalid: true,
      channels: SCALE_CHANNELS
    });

    if (test) {
      return (0,defineProperty/* default */.Z)({}, channel, [// prepend the invalid case
      // TODO: support custom value
      {
        test: test,
        value: null
      }].concat((0,toConsumableArray/* default */.Z)(array(valueRef))));
    }
  }

  return valueRef ? (0,defineProperty/* default */.Z)({}, channel, valueRef) : {};
}

function markDefProperties(mark, ignore) {
  return VG_MARK_CONFIGS.reduce(function (m, prop) {
    if (!ALWAYS_IGNORE.has(prop) && mark[prop] !== undefined && ignore[prop] !== 'ignore') {
      m[prop] = signalOrValueRef(mark[prop]);
    }

    return m;
  }, {});
}

function allFieldsInvalidPredicate(model, _ref4) {
  var _ref4$invalid = _ref4.invalid,
      invalid = _ref4$invalid === void 0 ? false : _ref4$invalid,
      channels = _ref4.channels;
  var filterIndex = channels.reduce(function (aggregator, channel) {
    var scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      var scaleType = scaleComponent.get('type');
      var field = model.vgField(channel, {
        expr: 'datum'
      }); // While discrete domain scales can handle invalid values, continuous scales can't.

      if (field && hasContinuousDomain(scaleType)) {
        aggregator[field] = true;
      }
    }

    return aggregator;
  }, {});
  var fields = util_keys(filterIndex);

  if (fields.length > 0) {
    var op = invalid ? '||' : '&&';
    return fields.map(function (field) {
      return fieldInvalidPredicate(field, invalid);
    }).join(" ".concat(op, " "));
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/defined.js






function defined(model) {
  var config = model.config,
      markDef = model.markDef;
  var invalid = getMarkPropOrConfig('invalid', markDef, config);

  if (invalid) {
    var signal = defined_allFieldsInvalidPredicate(model, {
      channels: POSITION_SCALE_CHANNELS
    });

    if (signal) {
      return {
        defined: {
          signal: signal
        }
      };
    }
  }

  return {};
}

function defined_allFieldsInvalidPredicate(model, _ref) {
  var _ref$invalid = _ref.invalid,
      invalid = _ref$invalid === void 0 ? false : _ref$invalid,
      channels = _ref.channels;
  var filterIndex = channels.reduce(function (aggregator, channel) {
    var scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      var scaleType = scaleComponent.get('type');
      var field = model.vgField(channel, {
        expr: 'datum'
      }); // While discrete domain scales can handle invalid values, continuous scales can't.

      if (field && hasContinuousDomain(scaleType)) {
        aggregator[field] = true;
      }
    }

    return aggregator;
  }, {});
  var fields = util_keys(filterIndex);

  if (fields.length > 0) {
    var op = invalid ? '||' : '&&';
    return fields.map(function (field) {
      return fieldInvalidPredicate(field, invalid);
    }).join(" ".concat(op, " "));
  }

  return undefined;
}

function valueIfDefined(prop, value) {
  if (value !== undefined) {
    return (0,defineProperty/* default */.Z)({}, prop, signalOrValueRef(value));
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/encode/index.js











;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/nearest.js


function nearest_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function nearest_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { nearest_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { nearest_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function nearest_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = nearest_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function nearest_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return nearest_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return nearest_arrayLikeToArray(o, minLen); }

function nearest_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var VORONOI = 'voronoi';
var nearest = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'point' && selCmpt.nearest;
  },
  parse: function parse(model, selCmpt) {
    // Scope selection events to the voronoi mark to prevent capturing
    // events that occur on the group mark (https://github.com/vega/vega/issues/2112).
    if (selCmpt.events) {
      var _iterator = nearest_createForOfIteratorHelper(selCmpt.events),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var s = _step.value;
          s.markname = model.getName(VORONOI);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  },
  marks: function marks(model, selCmpt, _marks) {
    var _selCmpt$project$hasC = selCmpt.project.hasChannel,
        x = _selCmpt$project$hasC.x,
        y = _selCmpt$project$hasC.y;
    var markType = model.mark;

    if (isPathMark(markType)) {
      log_warn(nearestNotSupportForContinuous(markType));
      return _marks;
    }

    var cellDef = {
      name: model.getName(VORONOI),
      type: 'path',
      interactive: true,
      from: {
        data: model.getName('marks')
      },
      encode: {
        update: nearest_objectSpread({
          fill: {
            value: 'transparent'
          },
          strokeWidth: {
            value: 0.35
          },
          stroke: {
            value: 'transparent'
          },
          isVoronoi: {
            value: true
          }
        }, tooltip(model, {
          reactiveGeom: true
        }))
      },
      transform: [{
        type: 'voronoi',
        x: {
          expr: x || !y ? 'datum.datum.x || 0' : '0'
        },
        y: {
          expr: y || !x ? 'datum.datum.y || 0' : '0'
        },
        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
      }]
    };
    var index = 0;
    var exists = false;

    _marks.forEach(function (mark, i) {
      var _mark$name;

      var name = (_mark$name = mark.name) !== null && _mark$name !== void 0 ? _mark$name : '';

      if (name === model.component.mark[0].name) {
        index = i;
      } else if (name.indexOf(VORONOI) >= 0) {
        exists = true;
      }
    });

    if (!exists) {
      _marks.splice(index + 1, 0, cellDef);
    }

    return _marks;
  }
};
/* harmony default export */ var selection_nearest = (nearest);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/inputs.js


function inputs_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function inputs_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { inputs_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { inputs_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








var inputBindings = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'point' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);
  },
  parse: function parse(model, selCmpt, selDef) {
    return disableDirectManipulation(selCmpt, selDef);
  },
  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
    var name = selCmpt.name;
    var proj = selCmpt.project;
    var bind = selCmpt.bind;
    var init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).

    var datum = selection_nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';
    proj.items.forEach(function (p, i) {
      var sgname = varName("".concat(name, "_").concat(p.field));
      var hasSignal = signals.filter(function (s) {
        return s.name === sgname;
      });

      if (!hasSignal.length) {
        var _ref, _bind$p$field;

        signals.unshift(inputs_objectSpread(inputs_objectSpread({
          name: sgname
        }, init ? {
          init: assembleInit(init[i])
        } : {
          value: null
        }), {}, {
          on: selCmpt.events ? [{
            events: selCmpt.events,
            update: "datum && item().mark.marktype !== 'group' ? ".concat(datum, "[").concat($(p.field), "] : null")
          }] : [],
          bind: (_ref = (_bind$p$field = bind[p.field]) !== null && _bind$p$field !== void 0 ? _bind$p$field : bind[p.channel]) !== null && _ref !== void 0 ? _ref : bind
        }));
      }
    });
    return signals;
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var proj = selCmpt.project;

    var signal = _signals.filter(function (s) {
      return s.name === name + TUPLE;
    })[0];

    var fields = name + TUPLE_FIELDS;
    var values = proj.items.map(function (p) {
      return varName("".concat(name, "_").concat(p.field));
    });
    var valid = values.map(function (v) {
      return "".concat(v, " !== null");
    }).join(' && ');

    if (values.length) {
      signal.update = "".concat(valid, " ? {fields: ").concat(fields, ", values: [").concat(values.join(', '), "]} : null");
    }

    delete signal.value;
    delete signal.on;
    return _signals;
  }
};
/* harmony default export */ var inputs = (inputBindings);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/toggle.js

var TOGGLE = '_toggle';
var toggle = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'point' && !!selCmpt.toggle;
  },
  signals: function signals(model, selCmpt, _signals) {
    return _signals.concat({
      name: selCmpt.name + TOGGLE,
      value: false,
      on: [{
        events: selCmpt.events,
        update: selCmpt.toggle
      }]
    });
  },
  modifyExpr: function modifyExpr(model, selCmpt) {
    var tpl = selCmpt.name + TUPLE;
    var signal = selCmpt.name + TOGGLE;
    return "".concat(signal, " ? null : ").concat(tpl, ", ") + (selCmpt.resolve === 'global' ? "".concat(signal, " ? null : true, ") : "".concat(signal, " ? null : {unit: ").concat(unitName(model), "}, ")) + "".concat(signal, " ? ").concat(tpl, " : null");
  }
};
/* harmony default export */ var selection_toggle = (toggle);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/clear.js
function clear_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = clear_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function clear_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return clear_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return clear_arrayLikeToArray(o, minLen); }

function clear_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







var clear = {
  defined: function defined(selCmpt) {
    return selCmpt.clear !== undefined && selCmpt.clear !== false;
  },
  parse: function parse(model, selCmpt) {
    if (selCmpt.clear) {
      selCmpt.clear = isString(selCmpt.clear) ? eventSelector(selCmpt.clear, 'view') : selCmpt.clear;
    }
  },
  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
    if (inputs.defined(selCmpt)) {
      var _iterator = clear_createForOfIteratorHelper(selCmpt.project.items),
          _step;

      try {
        var _loop = function _loop() {
          var proj = _step.value;
          var idx = signals.findIndex(function (n) {
            return n.name === varName("".concat(selCmpt.name, "_").concat(proj.field));
          });

          if (idx !== -1) {
            signals[idx].on.push({
              events: selCmpt.clear,
              update: 'null'
            });
          }
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return signals;
  },
  signals: function signals(model, selCmpt, _signals) {
    function addClear(idx, update) {
      if (idx !== -1 && _signals[idx].on) {
        _signals[idx].on.push({
          events: selCmpt.clear,
          update: update
        });
      }
    } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.


    if (selCmpt.type === 'interval') {
      var _iterator2 = clear_createForOfIteratorHelper(selCmpt.project.items),
          _step2;

      try {
        var _loop2 = function _loop2() {
          var proj = _step2.value;

          var vIdx = _signals.findIndex(function (n) {
            return n.name === proj.signals.visual;
          });

          addClear(vIdx, '[0, 0]');

          if (vIdx === -1) {
            var dIdx = _signals.findIndex(function (n) {
              return n.name === proj.signals.data;
            });

            addClear(dIdx, 'null');
          }
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {
      var tIdx = _signals.findIndex(function (n) {
        return n.name === selCmpt.name + TUPLE;
      });

      addClear(tIdx, 'null');

      if (selection_toggle.defined(selCmpt)) {
        tIdx = _signals.findIndex(function (n) {
          return n.name === selCmpt.name + TOGGLE;
        });
        addClear(tIdx, 'false');
      }
    }

    return _signals;
  }
};
/* harmony default export */ var selection_clear = (clear);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/legends.js


function legends_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = legends_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function legends_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return legends_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return legends_arrayLikeToArray(o, minLen); }

function legends_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function legends_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function legends_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { legends_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { legends_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










var legendBindings = {
  defined: function defined(selCmpt) {
    var spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);
    var projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== selection_SELECTION_ID;

    if (spec && !projLen) {
      log_warn(LEGEND_BINDINGS_MUST_HAVE_PROJECTION);
    }

    return spec && projLen;
  },
  parse: function parse(model, selCmpt, selDef) {
    // Allow legend items to be toggleable by default even though direct manipulation is disabled.
    var selDef_ = duplicate(selDef);
    selDef_.select = isString(selDef_.select) ? {
      type: selDef_.select,
      toggle: selCmpt.toggle
    } : legends_objectSpread(legends_objectSpread({}, selDef_.select), {}, {
      toggle: selCmpt.toggle
    });
    disableDirectManipulation(selCmpt, selDef_);

    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {
      var legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';

      var _iterator = legends_createForOfIteratorHelper(selCmpt.events),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _evt$filter;

          var _evt = _step.value;
          _evt.filter = array((_evt$filter = _evt.filter) !== null && _evt$filter !== void 0 ? _evt$filter : []);

          if (!_evt.filter.includes(legendFilter)) {
            _evt.filter.push(legendFilter);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    var evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';
    var stream = isString(evt) ? eventSelector(evt, 'view') : array(evt);
    selCmpt.bind = {
      legend: {
        merge: stream
      }
    };
  },
  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
    var selName = selCmpt.name;
    var stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;

    var markName = function markName(name) {
      return function (s) {
        var ds = duplicate(s);
        ds.markname = name;
        return ds;
      };
    };

    var _iterator2 = legends_createForOfIteratorHelper(selCmpt.project.items),
        _step2;

    try {
      var _loop = function _loop() {
        var proj = _step2.value;
        if (!proj.hasLegend) return "continue";
        var prefix = "".concat(varName(proj.field), "_legend");
        var sgName = "".concat(selName, "_").concat(prefix);
        var hasSignal = signals.filter(function (s) {
          return s.name === sgName;
        });

        if (hasSignal.length === 0) {
          var events = stream.merge.map(markName("".concat(prefix, "_symbols"))).concat(stream.merge.map(markName("".concat(prefix, "_labels")))).concat(stream.merge.map(markName("".concat(prefix, "_entries"))));
          signals.unshift(legends_objectSpread(legends_objectSpread({
            name: sgName
          }, !selCmpt.init ? {
            value: null
          } : {}), {}, {
            on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.
            {
              events: events,
              update: 'datum.value || item().items[0].items[0].datum.value',
              force: true
            }, {
              events: stream.merge,
              update: "!event.item || !datum ? null : ".concat(sgName),
              force: true
            }]
          }));
        }
      };

      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _ret = _loop();

        if (_ret === "continue") continue;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return signals;
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var proj = selCmpt.project;

    var tuple = _signals.find(function (s) {
      return s.name === name + TUPLE;
    });

    var fields = name + TUPLE_FIELDS;
    var values = proj.items.filter(function (p) {
      return p.hasLegend;
    }).map(function (p) {
      return varName("".concat(name, "_").concat(varName(p.field), "_legend"));
    });
    var valid = values.map(function (v) {
      return "".concat(v, " !== null");
    }).join(' && ');
    var update = "".concat(valid, " ? {fields: ").concat(fields, ", values: [").concat(values.join(', '), "]} : null");

    if (selCmpt.events && values.length > 0) {
      tuple.on.push({
        events: values.map(function (signal) {
          return {
            signal: signal
          };
        }),
        update: update
      });
    } else if (values.length > 0) {
      tuple.update = update;
      delete tuple.value;
      delete tuple.on;
    }

    var toggle = _signals.find(function (s) {
      return s.name === name + TOGGLE;
    });

    var events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;

    if (toggle) {
      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(legends_objectSpread(legends_objectSpread({}, toggle.on[0]), {}, {
        events: events
      }));
    }

    return _signals;
  }
};
/* harmony default export */ var legends = (legendBindings);
function parseInteractiveLegend(model, channel, legendCmpt) {
  var _model$fieldDef, _model$component$sele;

  var field = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.field;

  var _iterator3 = legends_createForOfIteratorHelper(vals((_model$component$sele = model.component.selection) !== null && _model$component$sele !== void 0 ? _model$component$sele : {})),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _selCmpt$project$hasF;

      var selCmpt = _step3.value;
      var proj = (_selCmpt$project$hasF = selCmpt.project.hasField[field]) !== null && _selCmpt$project$hasF !== void 0 ? _selCmpt$project$hasF : selCmpt.project.hasChannel[channel];

      if (proj && legendBindings.defined(selCmpt)) {
        var _legendCmpt$get;

        var legendSelections = (_legendCmpt$get = legendCmpt.get('selections')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : [];
        legendSelections.push(selCmpt.name);
        legendCmpt.set('selections', legendSelections, false);
        proj.hasLegend = true;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/translate.js




var ANCHOR = '_translate_anchor';
var DELTA = '_translate_delta';
var translate_translate = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'interval' && selCmpt.translate;
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var hasScales = selection_scales.defined(selCmpt);
    var anchor = name + ANCHOR;
    var _selCmpt$project$hasC = selCmpt.project.hasChannel,
        x = _selCmpt$project$hasC.x,
        y = _selCmpt$project$hasC.y;
    var events = eventSelector(selCmpt.translate, 'scope');

    if (!hasScales) {
      events = events.map(function (e) {
        return e.between[0].markname = name + BRUSH, e;
      });
    }

    _signals.push({
      name: anchor,
      value: {},
      on: [{
        events: events.map(function (e) {
          return e.between[0];
        }),
        update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ", extent_x: ".concat(hasScales ? scales_domain(model, channel_X) : "slice(".concat(x.signals.visual, ")")) : '') + (y !== undefined ? ", extent_y: ".concat(hasScales ? scales_domain(model, channel_Y) : "slice(".concat(y.signals.visual, ")")) : '') + '}'
      }]
    }, {
      name: name + DELTA,
      value: {},
      on: [{
        events: events,
        update: "{x: ".concat(anchor, ".x - x(unit), y: ").concat(anchor, ".y - y(unit)}")
      }]
    });

    if (x !== undefined) {
      onDelta(model, selCmpt, x, 'width', _signals);
    }

    if (y !== undefined) {
      onDelta(model, selCmpt, y, 'height', _signals);
    }

    return _signals;
  }
};
/* harmony default export */ var selection_translate = (translate_translate);

function onDelta(model, selCmpt, proj, size, signals) {
  var _scaleCmpt$get, _scaleCmpt$get2;

  var name = selCmpt.name;
  var anchor = name + ANCHOR;
  var delta = name + DELTA;
  var channel = proj.channel;
  var hasScales = selection_scales.defined(selCmpt);
  var signal = signals.filter(function (s) {
    return s.name === proj.signals[hasScales ? 'data' : 'visual'];
  })[0];
  var sizeSg = model.getSizeSignalRef(size).signal;
  var scaleCmpt = model.getScaleComponent(channel);
  var scaleType = scaleCmpt.get('type');
  var reversed = scaleCmpt.get('reverse'); // scale parsing sets this flag for fieldDef.sort

  var sign = !hasScales ? '' : channel === channel_X ? reversed ? '' : '-' : reversed ? '-' : '';
  var extent = "".concat(anchor, ".extent_").concat(channel);
  var offset = "".concat(sign).concat(delta, ".").concat(channel, " / ").concat(hasScales ? "".concat(sizeSg) : "span(".concat(extent, ")"));
  var panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'symlog' ? 'panSymlog' : scaleType === 'pow' ? 'panPow' : 'panLinear';
  var arg = !hasScales ? '' : scaleType === 'pow' ? ", ".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : scaleType === 'symlog' ? ", ".concat((_scaleCmpt$get2 = scaleCmpt.get('constant')) !== null && _scaleCmpt$get2 !== void 0 ? _scaleCmpt$get2 : 1) : '';
  var update = "".concat(panFn, "(").concat(extent, ", ").concat(offset).concat(arg, ")");
  signal.on.push({
    events: {
      signal: delta
    },
    update: hasScales ? update : "clampRange(".concat(update, ", 0, ").concat(sizeSg, ")")
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/zoom.js





var zoom_ANCHOR = '_zoom_anchor';
var zoom_DELTA = '_zoom_delta';
var zoom_zoom = {
  defined: function defined(selCmpt) {
    return selCmpt.type === 'interval' && selCmpt.zoom;
  },
  signals: function signals(model, selCmpt, _signals) {
    var name = selCmpt.name;
    var hasScales = selection_scales.defined(selCmpt);
    var delta = name + zoom_DELTA;
    var _selCmpt$project$hasC = selCmpt.project.hasChannel,
        x = _selCmpt$project$hasC.x,
        y = _selCmpt$project$hasC.y;
    var sx = $(model.scaleName(channel_X));
    var sy = $(model.scaleName(channel_Y));
    var events = eventSelector(selCmpt.zoom, 'scope');

    if (!hasScales) {
      events = events.map(function (e) {
        return e.markname = name + BRUSH, e;
      });
    }

    _signals.push({
      name: name + zoom_ANCHOR,
      on: [{
        events: events,
        update: !hasScales ? "{x: x(unit), y: y(unit)}" : '{' + [sx ? "x: invert(".concat(sx, ", x(unit))") : '', sy ? "y: invert(".concat(sy, ", y(unit))") : ''].filter(function (expr) {
          return !!expr;
        }).join(', ') + '}'
      }]
    }, {
      name: delta,
      on: [{
        events: events,
        force: true,
        update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
      }]
    });

    if (x !== undefined) {
      zoom_onDelta(model, selCmpt, x, 'width', _signals);
    }

    if (y !== undefined) {
      zoom_onDelta(model, selCmpt, y, 'height', _signals);
    }

    return _signals;
  }
};
/* harmony default export */ var selection_zoom = (zoom_zoom);

function zoom_onDelta(model, selCmpt, proj, size, signals) {
  var _scaleCmpt$get, _scaleCmpt$get2;

  var name = selCmpt.name;
  var channel = proj.channel;
  var hasScales = selection_scales.defined(selCmpt);
  var signal = signals.filter(function (s) {
    return s.name === proj.signals[hasScales ? 'data' : 'visual'];
  })[0];
  var sizeSg = model.getSizeSignalRef(size).signal;
  var scaleCmpt = model.getScaleComponent(channel);
  var scaleType = scaleCmpt.get('type');
  var base = hasScales ? scales_domain(model, channel) : signal.name;
  var delta = name + zoom_DELTA;
  var anchor = "".concat(name).concat(zoom_ANCHOR, ".").concat(channel);
  var zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'symlog' ? 'zoomSymlog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';
  var arg = !hasScales ? '' : scaleType === 'pow' ? ", ".concat((_scaleCmpt$get = scaleCmpt.get('exponent')) !== null && _scaleCmpt$get !== void 0 ? _scaleCmpt$get : 1) : scaleType === 'symlog' ? ", ".concat((_scaleCmpt$get2 = scaleCmpt.get('constant')) !== null && _scaleCmpt$get2 !== void 0 ? _scaleCmpt$get2 : 1) : '';
  var update = "".concat(zoomFn, "(").concat(base, ", ").concat(anchor, ", ").concat(delta).concat(arg, ")");
  signal.on.push({
    events: {
      signal: delta
    },
    update: hasScales ? update : "clampRange(".concat(update, ", 0, ").concat(sizeSg, ")")
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/index.js
function selection_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = selection_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function selection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return selection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return selection_arrayLikeToArray(o, minLen); }

function selection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


















var STORE = '_store';
var TUPLE = '_tuple';
var MODIFY = '_modify';
var SELECTION_DOMAIN = '_selection_domain_';
var VL_SELECTION_RESOLVE = 'vlSelectionResolve'; // Order matters for parsing and assembly.

var selectionCompilers = [selection_point, selection_interval, selection_project, selection_toggle, // Bindings may disable direct manipulation.
inputs, selection_scales, legends, selection_clear, selection_translate, selection_zoom, selection_nearest];

function getFacetModel(model) {
  var parent = model.parent;

  while (parent) {
    if (isFacetModel(parent)) break;
    parent = parent.parent;
  }

  return parent;
}

function unitName(model) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    escape: true
  },
      escape = _ref.escape;

  var name = escape ? $(model.name) : model.name;
  var facetModel = getFacetModel(model);

  if (facetModel) {
    var facet = facetModel.facet;

    var _iterator = selection_createForOfIteratorHelper(FACET_CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;

        if (facet[channel]) {
          name += " + '__facet_".concat(channel, "_' + (facet[").concat($(facetModel.vgField(channel)), "])");
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return name;
}
function requiresSelectionId(model) {
  var _model$component$sele;

  return vals((_model$component$sele = model.component.selection) !== null && _model$component$sele !== void 0 ? _model$component$sele : {}).reduce(function (identifier, selCmpt) {
    return identifier || selCmpt.project.items.some(function (proj) {
      return proj.field === selection_SELECTION_ID;
    });
  }, false);
} // Binding a point selection to query widgets or legends disables default direct manipulation interaction.
// A user can choose to re-enable it by explicitly specifying triggering input events.

function disableDirectManipulation(selCmpt, selDef) {
  if (isString(selDef.select) || !selDef.select.on) delete selCmpt.events;
  if (isString(selDef.select) || !selDef.select.clear) delete selCmpt.clear;
  if (isString(selDef.select) || !selDef.select.toggle) delete selCmpt.toggle;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/expressions.js



function getName(node) {
  var name = [];

  if (node.type === 'Identifier') {
    return [node.name];
  }

  if (node.type === 'Literal') {
    return [node.value];
  }

  if (node.type === 'MemberExpression') {
    name.push.apply(name, (0,toConsumableArray/* default */.Z)(getName(node.object)));
    name.push.apply(name, (0,toConsumableArray/* default */.Z)(getName(node.property)));
  }

  return name;
}

function startsWithDatum(node) {
  if (node.object.type === 'MemberExpression') {
    return startsWithDatum(node.object);
  }

  return node.object.name === 'datum';
}

function getDependentFields(expression) {
  var ast = parser(expression);
  var dependents = new Set();
  ast.visit(function (node) {
    if (node.type === 'MemberExpression' && startsWithDatum(node)) {
      dependents.add(getName(node).slice(1).join('.'));
    }
  });
  return dependents;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/filter.js







function filter_createSuper(Derived) { var hasNativeReflectConstruct = filter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function filter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var FilterNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(FilterNode, _DataFlowNode);

  var _super = filter_createSuper(FilterNode);

  function FilterNode(parent, model, filter) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, FilterNode);

    _this = _super.call(this, parent);
    _this.model = model;
    _this.filter = filter; // TODO: refactor this to not take a node and
    // then add a static function makeFromOperand and make the constructor take only an expression

    _this.expr = predicate_expression(_this.model, _this.filter, (0,assertThisInitialized/* default */.Z)(_this));
    _this._dependentFields = getDependentFields(_this.expr);
    return _this;
  }

  (0,createClass/* default */.Z)(FilterNode, [{
    key: "clone",
    value: function clone() {
      return new FilterNode(null, this.model, duplicate(this.filter));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return this._dependentFields;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(); // filter does not produce any new fields
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return {
        type: 'filter',
        expr: this.expr
      };
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Filter ".concat(this.expr);
    }
  }]);

  return FilterNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/selection/parse.js



var parse_excluded = ["fields", "encodings"];

function parse_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function parse_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { parse_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { parse_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return parse_arrayLikeToArray(o, minLen); }

function parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function parseUnitSelection(model, selDefs) {
  var selCmpts = {};
  var selectionConfig = model.config.selection;
  if (!selDefs || !selDefs.length) return selCmpts;

  var _iterator = parse_createForOfIteratorHelper(selDefs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var def = _step.value;
      var name = varName(def.name);
      var selDef = def.select;
      var type = isString(selDef) ? selDef : selDef.type;
      var defaults = isObject(selDef) ? duplicate(selDef) : {
        type: type
      }; // Set default values from config if a property hasn't been specified,
      // or if it is true. E.g., "translate": true should use the default
      // event handlers for translate. However, true may be a valid value for
      // a property (e.g., "nearest": true). Project transform applies its defaults.

      var _selectionConfig$type = selectionConfig[type],
          fields = _selectionConfig$type.fields,
          encodings = _selectionConfig$type.encodings,
          cfg = (0,objectWithoutProperties/* default */.Z)(_selectionConfig$type, parse_excluded);

      for (var key in cfg) {
        if (key === 'mark') {
          defaults[key] = parse_objectSpread(parse_objectSpread({}, cfg[key]), defaults[key]);
        }

        if (defaults[key] === undefined || defaults[key] === true) {
          var _cfg$key;

          defaults[key] = (_cfg$key = cfg[key]) !== null && _cfg$key !== void 0 ? _cfg$key : defaults[key];
        }
      }

      var selCmpt = selCmpts[name] = parse_objectSpread(parse_objectSpread({}, defaults), {}, {
        name: name,
        type: type,
        init: def.value,
        bind: def.bind,
        events: isString(defaults.on) ? eventSelector(defaults.on, 'scope') : array(duplicate(defaults.on))
      });

      var _iterator2 = parse_createForOfIteratorHelper(selectionCompilers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var c = _step2.value;

          if (c.defined(selCmpt) && c.parse) {
            c.parse(model, selCmpt, def);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return selCmpts;
}
function parseSelectionPredicate(model, pred, dfnode) {
  var datum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'datum';
  var name = isString(pred) ? pred : pred.param;
  var vname = varName(name);
  var store = $(vname + STORE);
  var selCmpt;

  try {
    selCmpt = model.getSelectionComponent(vname, name);
  } catch (e) {
    // If a selection isn't found, treat as a variable parameter and coerce to boolean.
    return "!!".concat(vname);
  }

  if (selCmpt.project.timeUnit) {
    var child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;
    var tunode = selCmpt.project.timeUnit.clone();

    if (child.parent) {
      tunode.insertAsParentOf(child);
    } else {
      child.parent = tunode;
    }
  }

  var test = "vlSelectionTest(".concat(store, ", ").concat(datum).concat(selCmpt.resolve === 'global' ? ')' : ", ".concat($(selCmpt.resolve), ")"));
  var length = "length(data(".concat(store, "))");
  return pred.empty === false ? "".concat(length, " && ").concat(test) : "!".concat(length, " || ").concat(test);
}
function parseSelectionExtent(model, name, extent) {
  var vname = varName(name);
  var encoding = extent['encoding'];
  var field = extent['field'];
  var selCmpt;

  try {
    selCmpt = model.getSelectionComponent(vname, name);
  } catch (e) {
    // If a selection isn't found, treat it as a variable parameter.
    return vname;
  }

  if (!encoding && !field) {
    field = selCmpt.project.items[0].field;

    if (selCmpt.project.items.length > 1) {
      log_warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' + "Using \"field\": ".concat($(field), "."));
    }
  } else if (encoding && !field) {
    var encodings = selCmpt.project.items.filter(function (p) {
      return p.channel === encoding;
    });

    if (!encodings.length || encodings.length > 1) {
      field = selCmpt.project.items[0].field;
      log_warn((!encodings.length ? 'No ' : 'Multiple ') + "matching ".concat($(encoding), " encoding found for selection ").concat($(extent.param), ". ") + "Using \"field\": ".concat($(field), "."));
    } else {
      field = encodings[0].field;
    }
  }

  return "".concat(selCmpt.name, "[").concat($(replacePathInField(field)), "]");
}
function materializeSelections(model, main) {
  var _model$component$sele;

  var _iterator3 = parse_createForOfIteratorHelper(entries((_model$component$sele = model.component.selection) !== null && _model$component$sele !== void 0 ? _model$component$sele : {})),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _step3$value = (0,slicedToArray/* default */.Z)(_step3.value, 2),
          selection = _step3$value[0],
          selCmpt = _step3$value[1];

      var lookupName = model.getName("lookup_".concat(selection));
      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {
        param: selection
      }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/predicate.js




/**
 * Converts a predicate into an expression.
 */
// model is only used for selection filters.

function predicate_expression(model, filterOp, node) {
  return logicalExpr(filterOp, function (predicate) {
    if (isString(predicate)) {
      return predicate;
    } else if (isSelectionPredicate(predicate)) {
      return parseSelectionPredicate(model, predicate, node);
    } else {
      // Filter Object
      return fieldFilterExpression(predicate);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/assemble.js



var axis_assemble_excluded = ["disable", "orient", "scale", "labelExpr", "title", "zindex"],
    assemble_excluded2 = ["condition"],
    assemble_excluded3 = ["test"],
    assemble_excluded4 = ["test"];

function axis_assemble_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = axis_assemble_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function axis_assemble_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return axis_assemble_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return axis_assemble_arrayLikeToArray(o, minLen); }

function axis_assemble_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function assemble_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function assemble_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { assemble_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { assemble_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











function assembleTitle(title, config) {
  if (!title) {
    return undefined;
  }

  if (isArray(title) && !isText(title)) {
    return title.map(function (fieldDef) {
      return defaultTitle(fieldDef, config);
    }).join(', ');
  }

  return title;
}

function setAxisEncode(axis, part, vgProp, vgRef) {
  var _axis$encode, _a$part, _b$update;

  var _a, _b;

  (_axis$encode = axis.encode) !== null && _axis$encode !== void 0 ? _axis$encode : axis.encode = {};
  (_a$part = (_a = axis.encode)[part]) !== null && _a$part !== void 0 ? _a$part : _a[part] = {};
  (_b$update = (_b = axis.encode[part]).update) !== null && _b$update !== void 0 ? _b$update : _b.update = {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291

  axis.encode[part].update[vgProp] = vgRef;
}

function assembleAxis(axisCmpt, kind, config) {
  var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    header: false
  };

  var _axisCmpt$combine = axisCmpt.combine(),
      disable = _axisCmpt$combine.disable,
      orient = _axisCmpt$combine.orient,
      scale = _axisCmpt$combine.scale,
      labelExpr = _axisCmpt$combine.labelExpr,
      title = _axisCmpt$combine.title,
      zindex = _axisCmpt$combine.zindex,
      axis = (0,objectWithoutProperties/* default */.Z)(_axisCmpt$combine, axis_assemble_excluded);

  if (disable) {
    return undefined;
  }

  for (var prop in axis) {
    var propType = AXIS_PROPERTY_TYPE[prop];
    var propValue = axis[prop];

    if (propType && propType !== kind && propType !== 'both') {
      // Remove properties that are not valid for this kind of axis
      delete axis[prop];
    } else if (isConditionalAxisValue(propValue)) {
      // deal with conditional axis value
      var condition = propValue.condition,
          valueOrSignalRef = (0,objectWithoutProperties/* default */.Z)(propValue, assemble_excluded2);

      var conditions = array(condition);
      var propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];

      if (propIndex) {
        var vgProp = propIndex.vgProp,
            part = propIndex.part; // If there is a corresponding Vega property for the channel,
        // use Vega's custom axis encoding and delete the original axis property to avoid conflicts

        var vgRef = [].concat((0,toConsumableArray/* default */.Z)(conditions.map(function (c) {
          var test = c.test,
              valueOrSignalCRef = (0,objectWithoutProperties/* default */.Z)(c, assemble_excluded3);

          return assemble_objectSpread({
            test: predicate_expression(null, test)
          }, valueOrSignalCRef);
        })), [valueOrSignalRef]);
        setAxisEncode(axis, part, vgProp, vgRef);
        delete axis[prop];
      } else if (propIndex === null) {
        // If propIndex is null, this means we support conditional axis property by converting the condition to signal instead.
        var signalRef = {
          signal: conditions.map(function (c) {
            var test = c.test,
                valueOrSignalCRef = (0,objectWithoutProperties/* default */.Z)(c, assemble_excluded4);

            return "".concat(predicate_expression(null, test), " ? ").concat(exprFromValueOrSignalRef(valueOrSignalCRef), " : ");
          }).join('') + exprFromValueOrSignalRef(valueOrSignalRef)
        };
        axis[prop] = signalRef;
      }
    } else if (isSignalRef(propValue)) {
      var _propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];

      if (_propIndex) {
        var _vgProp = _propIndex.vgProp,
            _part = _propIndex.part;
        setAxisEncode(axis, _part, _vgProp, propValue);
        delete axis[prop];
      } // else do nothing since the property already supports signal

    } // Do not pass labelAlign/Baseline = null to Vega since it won't pass the schema
    // Note that we need to use null so the default labelAlign is preserved.


    if (util_contains(['labelAlign', 'labelBaseline'], prop) && axis[prop] === null) {
      delete axis[prop];
    }
  }

  if (kind === 'grid') {
    if (!axis.grid) {
      return undefined;
    } // Remove unnecessary encode block


    if (axis.encode) {
      // Only need to keep encode block for grid
      var grid = axis.encode.grid;
      axis.encode = assemble_objectSpread({}, grid ? {
        grid: grid
      } : {});

      if (isEmpty(axis.encode)) {
        delete axis.encode;
      }
    }

    return assemble_objectSpread(assemble_objectSpread({
      scale: scale,
      orient: orient
    }, axis), {}, {
      domain: false,
      labels: false,
      aria: false,
      // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
      // would not affect gridAxis
      maxExtent: 0,
      minExtent: 0,
      ticks: false,
      zindex: getFirstDefined(zindex, 0) // put grid behind marks by default

    });
  } else {
    // kind === 'main'
    if (!opt.header && axisCmpt.mainExtracted) {
      // if mainExtracted has been extracted to a separate facet
      return undefined;
    }

    if (labelExpr !== undefined) {
      var _axis$encode2, _axis$encode2$labels;

      var expr = labelExpr;

      if ((_axis$encode2 = axis.encode) !== null && _axis$encode2 !== void 0 && (_axis$encode2$labels = _axis$encode2.labels) !== null && _axis$encode2$labels !== void 0 && _axis$encode2$labels.update && isSignalRef(axis.encode.labels.update.text)) {
        expr = replaceAll(labelExpr, 'datum.label', axis.encode.labels.update.text.signal);
      }

      setAxisEncode(axis, 'labels', 'text', {
        signal: expr
      });
    }

    if (axis.labelAlign === null) {
      delete axis.labelAlign;
    } // Remove unnecessary encode block


    if (axis.encode) {
      var _iterator = axis_assemble_createForOfIteratorHelper(AXIS_PARTS),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _part2 = _step.value;

          if (!axisCmpt.hasAxisPart(_part2)) {
            delete axis.encode[_part2];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (isEmpty(axis.encode)) {
        delete axis.encode;
      }
    }

    var titleString = assembleTitle(title, config);
    return assemble_objectSpread(assemble_objectSpread(assemble_objectSpread(assemble_objectSpread({
      scale: scale,
      orient: orient,
      grid: false
    }, titleString ? {
      title: titleString
    } : {}), axis), config.aria === false ? {
      aria: false
    } : {}), {}, {
      zindex: getFirstDefined(zindex, 0) // put axis line above marks by default

    });
  }
}
/**
 * Add axis signals so grid line works correctly
 * (Fix https://github.com/vega/vega-lite/issues/4226)
 */

function assembleAxisSignals(model) {
  var axes = model.component.axes;
  var signals = [];

  var _iterator2 = axis_assemble_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var channel = _step2.value;

      if (axes[channel]) {
        var _iterator3 = axis_assemble_createForOfIteratorHelper(axes[channel]),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var axis = _step3.value;

            if (!axis.get('disable') && !axis.get('gridScale')) {
              // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.
              var sizeType = channel === 'x' ? 'height' : 'width';
              var update = model.getSizeSignalRef(sizeType).signal;

              if (sizeType !== update) {
                signals.push({
                  name: sizeType,
                  update: update
                });
              }
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return signals;
}
function assemble_assembleAxes(axisComponents, config) {
  var _axisComponents$x = axisComponents.x,
      x = _axisComponents$x === void 0 ? [] : _axisComponents$x,
      _axisComponents$y = axisComponents.y,
      y = _axisComponents$y === void 0 ? [] : _axisComponents$y;
  return [].concat((0,toConsumableArray/* default */.Z)(x.map(function (a) {
    return assembleAxis(a, 'grid', config);
  })), (0,toConsumableArray/* default */.Z)(y.map(function (a) {
    return assembleAxis(a, 'grid', config);
  })), (0,toConsumableArray/* default */.Z)(x.map(function (a) {
    return assembleAxis(a, 'main', config);
  })), (0,toConsumableArray/* default */.Z)(y.map(function (a) {
    return assembleAxis(a, 'main', config);
  }))).filter(function (a) {
    return a;
  }); // filter undefined
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/config.js


function axis_config_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = axis_config_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function axis_config_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return axis_config_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return axis_config_arrayLikeToArray(o, minLen); }

function axis_config_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







function getAxisConfigFromConfigTypes(configTypes, config, channel, orient) {
  // TODO: add special casing to add conditional value based on orient signal
  return Object.assign.apply(null, [{}].concat((0,toConsumableArray/* default */.Z)(configTypes.map(function (configType) {
    if (configType === 'axisOrient') {
      var orient1 = channel === 'x' ? 'bottom' : 'left';
      var orientConfig1 = config[channel === 'x' ? 'axisBottom' : 'axisLeft'] || {};
      var orientConfig2 = config[channel === 'x' ? 'axisTop' : 'axisRight'] || {};
      var props = new Set([].concat((0,toConsumableArray/* default */.Z)(util_keys(orientConfig1)), (0,toConsumableArray/* default */.Z)(util_keys(orientConfig2))));
      var conditionalOrientAxisConfig = {};

      var _iterator = axis_config_createForOfIteratorHelper(props.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var prop = _step.value;
          conditionalOrientAxisConfig[prop] = {
            // orient is surely signal in this case
            signal: "".concat(orient['signal'], " === \"").concat(orient1, "\" ? ").concat(signalOrStringValue(orientConfig1[prop]), " : ").concat(signalOrStringValue(orientConfig2[prop]))
          };
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return conditionalOrientAxisConfig;
    }

    return config[configType];
  }))));
}

function getAxisConfigs(channel, scaleType, orient, config) {
  var typeBasedConfigTypes = scaleType === 'band' ? ['axisDiscrete', 'axisBand'] : scaleType === 'point' ? ['axisDiscrete', 'axisPoint'] : isQuantitative(scaleType) ? ['axisQuantitative'] : scaleType === 'time' || scaleType === 'utc' ? ['axisTemporal'] : [];
  var axisChannel = channel === 'x' ? 'axisX' : 'axisY';
  var axisOrient = isSignalRef(orient) ? 'axisOrient' : "axis".concat(titleCase(orient)); // axisTop, axisBottom, ...

  var vlOnlyConfigTypes = [].concat(typeBasedConfigTypes, (0,toConsumableArray/* default */.Z)(typeBasedConfigTypes.map(function (c) {
    return axisChannel + c.substr(4);
  })));
  var vgConfigTypes = ['axis', axisOrient, axisChannel];
  return {
    vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient),
    vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient),
    axisConfigStyle: getAxisConfigStyle([].concat(vgConfigTypes, (0,toConsumableArray/* default */.Z)(vlOnlyConfigTypes)), config)
  };
}
function getAxisConfigStyle(axisConfigTypes, config) {
  var toMerge = [{}];

  var _iterator2 = axis_config_createForOfIteratorHelper(axisConfigTypes),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _config$configType;

      var configType = _step2.value;
      // TODO: add special casing to add conditional value based on orient signal
      var style = (_config$configType = config[configType]) === null || _config$configType === void 0 ? void 0 : _config$configType.style;

      if (style) {
        style = array(style);

        var _iterator3 = axis_config_createForOfIteratorHelper(style),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var s = _step3.value;
            toMerge.push(config.style[s]);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return Object.assign.apply(null, toMerge);
}
function getAxisConfig(property, styleConfigIndex, style) {
  var axisConfigs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var styleConfig = getStyleConfig(property, style, styleConfigIndex);

  if (styleConfig !== undefined) {
    return {
      configFrom: 'style',
      configValue: styleConfig
    };
  }

  for (var _i = 0, _arr = ['vlOnlyAxisConfig', 'vgAxisConfig', 'axisConfigStyle']; _i < _arr.length; _i++) {
    var _axisConfigs$configFr;

    var configFrom = _arr[_i];

    if (((_axisConfigs$configFr = axisConfigs[configFrom]) === null || _axisConfigs$configFr === void 0 ? void 0 : _axisConfigs$configFr[property]) !== undefined) {
      return {
        configFrom: configFrom,
        configValue: axisConfigs[configFrom][property]
      };
    }
  }

  return {};
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/properties.js












var axisRules = {
  scale: function scale(_ref) {
    var model = _ref.model,
        channel = _ref.channel;
    return model.scaleName(channel);
  },
  format: function format(_ref2) {
    var fieldOrDatumDef = _ref2.fieldOrDatumDef,
        config = _ref2.config,
        axis = _ref2.axis;
    var format = axis.format,
        formatType = axis.formatType;
    return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, true);
  },
  formatType: function formatType(_ref3) {
    var axis = _ref3.axis,
        fieldOrDatumDef = _ref3.fieldOrDatumDef,
        scaleType = _ref3.scaleType;
    var formatType = axis.formatType;
    return guideFormatType(formatType, fieldOrDatumDef, scaleType);
  },
  grid: function grid(_ref4) {
    var _axis$grid;

    var fieldOrDatumDef = _ref4.fieldOrDatumDef,
        axis = _ref4.axis,
        scaleType = _ref4.scaleType;
    return (_axis$grid = axis.grid) !== null && _axis$grid !== void 0 ? _axis$grid : defaultGrid(scaleType, fieldOrDatumDef);
  },
  gridScale: function gridScale(_ref5) {
    var model = _ref5.model,
        channel = _ref5.channel;
    return _gridScale(model, channel);
  },
  labelAlign: function labelAlign(_ref6) {
    var axis = _ref6.axis,
        labelAngle = _ref6.labelAngle,
        orient = _ref6.orient,
        channel = _ref6.channel;
    return axis.labelAlign || defaultLabelAlign(labelAngle, orient, channel);
  },
  labelAngle: function labelAngle(_ref7) {
    var _labelAngle = _ref7.labelAngle;
    return _labelAngle;
  },
  labelBaseline: function labelBaseline(_ref8) {
    var axis = _ref8.axis,
        labelAngle = _ref8.labelAngle,
        orient = _ref8.orient,
        channel = _ref8.channel;
    return axis.labelBaseline || defaultLabelBaseline(labelAngle, orient, channel);
  },
  labelFlush: function labelFlush(_ref9) {
    var _axis$labelFlush;

    var axis = _ref9.axis,
        fieldOrDatumDef = _ref9.fieldOrDatumDef,
        channel = _ref9.channel;
    return (_axis$labelFlush = axis.labelFlush) !== null && _axis$labelFlush !== void 0 ? _axis$labelFlush : defaultLabelFlush(fieldOrDatumDef.type, channel);
  },
  labelOverlap: function labelOverlap(_ref10) {
    var _axis$labelOverlap;

    var axis = _ref10.axis,
        fieldOrDatumDef = _ref10.fieldOrDatumDef,
        scaleType = _ref10.scaleType;
    return (_axis$labelOverlap = axis.labelOverlap) !== null && _axis$labelOverlap !== void 0 ? _axis$labelOverlap : defaultLabelOverlap(fieldOrDatumDef.type, scaleType, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined);
  },
  // we already calculate orient in parse
  orient: function orient(_ref11) {
    var _orient = _ref11.orient;
    return _orient;
  },
  tickCount: function tickCount(_ref12) {
    var _axis$tickCount;

    var channel = _ref12.channel,
        model = _ref12.model,
        axis = _ref12.axis,
        fieldOrDatumDef = _ref12.fieldOrDatumDef,
        scaleType = _ref12.scaleType;
    var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
    var size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
    return (_axis$tickCount = axis.tickCount) !== null && _axis$tickCount !== void 0 ? _axis$tickCount : defaultTickCount({
      fieldOrDatumDef: fieldOrDatumDef,
      scaleType: scaleType,
      size: size,
      values: axis.values
    });
  },
  title: function title(_ref13) {
    var axis = _ref13.axis,
        model = _ref13.model,
        channel = _ref13.channel;

    if (axis.title !== undefined) {
      return axis.title;
    }

    var fieldDefTitle = getFieldDefTitle(model, channel);

    if (fieldDefTitle !== undefined) {
      return fieldDefTitle;
    }

    var fieldDef = model.typedFieldDef(channel);
    var channel2 = channel === 'x' ? 'x2' : 'y2';
    var fieldDef2 = model.fieldDef(channel2); // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)

    return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);
  },
  values: function values(_ref14) {
    var axis = _ref14.axis,
        fieldOrDatumDef = _ref14.fieldOrDatumDef;
    return _values(axis, fieldOrDatumDef);
  },
  zindex: function zindex(_ref15) {
    var _axis$zindex;

    var axis = _ref15.axis,
        fieldOrDatumDef = _ref15.fieldOrDatumDef,
        mark = _ref15.mark;
    return (_axis$zindex = axis.zindex) !== null && _axis$zindex !== void 0 ? _axis$zindex : defaultZindex(mark, fieldOrDatumDef);
  }
}; // TODO: we need to refactor this method after we take care of config refactoring

/**
 * Default rules for whether to show a grid should be shown for a channel.
 * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
 */

function defaultGrid(scaleType, fieldDef) {
  return !hasDiscreteDomain(scaleType) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin) && !isBinned(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);
}

function _gridScale(model, channel) {
  var gridChannel = channel === 'x' ? 'y' : 'x';

  if (model.getScaleComponent(gridChannel)) {
    return model.scaleName(gridChannel);
  }

  return undefined;
}


function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {
  var labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle; // try axis value

  if (labelAngle !== undefined) {
    return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);
  } else {
    // try axis config value
    var _getAxisConfig = getAxisConfig('labelAngle', styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs),
        angle = _getAxisConfig.configValue;

    if (angle !== undefined) {
      return normalizeAngle(angle);
    } else {
      // get default value
      if (channel === channel_X && util_contains([NOMINAL, ORDINAL], fieldOrDatumDef.type) && !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {
        return 270;
      } // no default


      return undefined;
    }
  }
}
function normalizeAngleExpr(angle) {
  return "(((".concat(angle.signal, " % 360) + 360) % 360)");
}
function defaultLabelBaseline(angle, orient, channel, alwaysIncludeMiddle) {
  if (angle !== undefined) {
    if (channel === 'x') {
      if (isSignalRef(angle)) {
        var a = normalizeAngleExpr(angle);
        var orientIsTop = isSignalRef(orient) ? "(".concat(orient.signal, " === \"top\")") : orient === 'top';
        return {
          signal: "(45 < ".concat(a, " && ").concat(a, " < 135) || (225 < ").concat(a, " && ").concat(a, " < 315) ? \"middle\" :") + "(".concat(a, " <= 45 || 315 <= ").concat(a, ") === ").concat(orientIsTop, " ? \"bottom\" : \"top\"")
        };
      }

      if (45 < angle && angle < 135 || 225 < angle && angle < 315) {
        return 'middle';
      }

      if (isSignalRef(orient)) {
        var op = angle <= 45 || 315 <= angle ? '===' : '!==';
        return {
          signal: "".concat(orient.signal, " ").concat(op, " \"top\" ? \"bottom\" : \"top\"")
        };
      }

      return (angle <= 45 || 315 <= angle) === (orient === 'top') ? 'bottom' : 'top';
    } else {
      if (isSignalRef(angle)) {
        var _a = normalizeAngleExpr(angle);

        var orientIsLeft = isSignalRef(orient) ? "(".concat(orient.signal, " === \"left\")") : orient === 'left';
        var middle = alwaysIncludeMiddle ? '"middle"' : 'null';
        return {
          signal: "".concat(_a, " <= 45 || 315 <= ").concat(_a, " || (135 <= ").concat(_a, " && ").concat(_a, " <= 225) ? ").concat(middle, " : (45 <= ").concat(_a, " && ").concat(_a, " <= 135) === ").concat(orientIsLeft, " ? \"top\" : \"bottom\"")
        };
      }

      if (angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225) {
        return alwaysIncludeMiddle ? 'middle' : null;
      }

      if (isSignalRef(orient)) {
        var _op = 45 <= angle && angle <= 135 ? '===' : '!==';

        return {
          signal: "".concat(orient.signal, " ").concat(_op, " \"left\" ? \"top\" : \"bottom\"")
        };
      }

      return (45 <= angle && angle <= 135) === (orient === 'left') ? 'top' : 'bottom';
    }
  }

  return undefined;
}
function defaultLabelAlign(angle, orient, channel) {
  if (angle === undefined) {
    return undefined;
  }

  var isX = channel === 'x';
  var startAngle = isX ? 0 : 90;
  var mainOrient = isX ? 'bottom' : 'left';

  if (isSignalRef(angle)) {
    var a = normalizeAngleExpr(angle);
    var orientIsMain = isSignalRef(orient) ? "(".concat(orient.signal, " === \"").concat(mainOrient, "\")") : orient === mainOrient;
    return {
      signal: "(".concat(startAngle ? "(".concat(a, " + 90)") : a, " % 180 === 0) ? ").concat(isX ? null : '"center"', " :") + "(".concat(startAngle, " < ").concat(a, " && ").concat(a, " < ").concat(180 + startAngle, ") === ").concat(orientIsMain, " ? \"left\" : \"right\"")
    };
  }

  if ((angle + startAngle) % 180 === 0) {
    // For bottom, use default label align so label flush still works
    return isX ? null : 'center';
  }

  if (isSignalRef(orient)) {
    var op = startAngle < angle && angle < 180 + startAngle ? '===' : '!==';

    var _orientIsMain = "".concat(orient.signal, " ").concat(op, " \"").concat(mainOrient, "\"");

    return {
      signal: "".concat(_orientIsMain, " ? \"left\" : \"right\"")
    };
  }

  if ((startAngle < angle && angle < 180 + startAngle) === (orient === mainOrient)) {
    return 'left';
  }

  return 'right';
}
function defaultLabelFlush(type, channel) {
  if (channel === 'x' && util_contains(['quantitative', 'temporal'], type)) {
    return true;
  }

  return undefined;
}
function defaultLabelOverlap(type, scaleType, hasTimeUnit, sort) {
  // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
  if (hasTimeUnit && !isObject(sort) || type !== 'nominal' && type !== 'ordinal') {
    if (scaleType === 'log' || scaleType === 'symlog') {
      return 'greedy';
    }

    return true;
  }

  return undefined;
}
function defaultOrient(channel) {
  return channel === 'x' ? 'bottom' : 'left';
}
function defaultTickCount(_ref16) {
  var fieldOrDatumDef = _ref16.fieldOrDatumDef,
      scaleType = _ref16.scaleType,
      size = _ref16.size,
      vals = _ref16.values;

  if (!vals && !hasDiscreteDomain(scaleType) && scaleType !== 'log') {
    if (isFieldDef(fieldOrDatumDef)) {
      var _normalizeTimeUnit;

      if (isBinning(fieldOrDatumDef.bin)) {
        // for binned data, we don't want more ticks than maxbins
        return {
          signal: "ceil(".concat(size.signal, "/10)")
        };
      }

      if (fieldOrDatumDef.timeUnit && util_contains(['month', 'hours', 'day', 'quarter'], (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit)) {
        return undefined;
      }
    }

    return {
      signal: "ceil(".concat(size.signal, "/40)")
    };
  }

  return undefined;
}
function getFieldDefTitle(model, channel) {
  var channel2 = channel === 'x' ? 'x2' : 'y2';
  var fieldDef = model.fieldDef(channel);
  var fieldDef2 = model.fieldDef(channel2);
  var title1 = fieldDef ? fieldDef.title : undefined;
  var title2 = fieldDef2 ? fieldDef2.title : undefined;

  if (title1 && title2) {
    return mergeTitle(title1, title2);
  } else if (title1) {
    return title1;
  } else if (title2) {
    return title2;
  } else if (title1 !== undefined) {
    // falsy value to disable config
    return title1;
  } else if (title2 !== undefined) {
    // falsy value to disable config
    return title2;
  }

  return undefined;
}

function _values(axis, fieldOrDatumDef) {
  var vals = axis.values;

  if (isArray(vals)) {
    return valueArray(fieldOrDatumDef, vals);
  } else if (isSignalRef(vals)) {
    return vals;
  }

  return undefined;
}


function defaultZindex(mark, fieldDef) {
  if (mark === 'rect' && channeldef_isDiscrete(fieldDef)) {
    return 1;
  }

  return 0;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/calculate.js







function calculate_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function calculate_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { calculate_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { calculate_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function calculate_createSuper(Derived) { var hasNativeReflectConstruct = calculate_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function calculate_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var CalculateNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(CalculateNode, _DataFlowNode);

  var _super = calculate_createSuper(CalculateNode);

  function CalculateNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, CalculateNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this._dependentFields = getDependentFields(_this.transform.calculate);
    return _this;
  }

  (0,createClass/* default */.Z)(CalculateNode, [{
    key: "clone",
    value: function clone() {
      return new CalculateNode(null, duplicate(this.transform));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set([this.transform.as]);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return this._dependentFields;
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return {
        type: 'formula',
        expr: this.transform.calculate,
        as: this.transform.as
      };
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Calculate ".concat(util_hash(this.transform));
    }
  }], [{
    key: "parseAllForSortIndex",
    value: function parseAllForSortIndex(parent, model) {
      // get all the encoding with sort fields from model
      model.forEachFieldDef(function (fieldDef, channel) {
        if (!isScaleFieldDef(fieldDef)) {
          return;
        }

        if (isSortArray(fieldDef.sort)) {
          var field = fieldDef.field,
              timeUnit = fieldDef.timeUnit;
          var sort = fieldDef.sort; // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate

          var calculate = sort.map(function (sortValue, i) {
            return "".concat(fieldFilterExpression({
              field: field,
              timeUnit: timeUnit,
              equal: sortValue
            }), " ? ").concat(i, " : ");
          }).join('') + sort.length;
          parent = new CalculateNode(parent, {
            calculate: calculate,
            as: sortArrayIndexField(fieldDef, channel, {
              forAs: true
            })
          });
        }
      });
      return parent;
    }
  }]);

  return CalculateNode;
}(DataFlowNode);
function sortArrayIndexField(fieldDef, channel, opt) {
  return channeldef_vgField(fieldDef, calculate_objectSpread({
    prefix: channel,
    suffix: 'sort_index'
  }, opt !== null && opt !== void 0 ? opt : {}));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/header/common.js
function header_common_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = header_common_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function header_common_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return header_common_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return header_common_arrayLikeToArray(o, minLen); }

function header_common_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


/**
 * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.
 */

function getHeaderChannel(channel, orient) {
  if (util_contains(['top', 'bottom'], orient)) {
    return 'column';
  } else if (util_contains(['left', 'right'], orient)) {
    return 'row';
  }

  return channel === 'row' ? 'row' : 'column';
}
function getHeaderProperty(prop, header, config, channel) {
  var headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;
  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);
}
function getHeaderProperties(properties, header, config, channel) {
  var props = {};

  var _iterator = header_common_createForOfIteratorHelper(properties),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;
      var value = getHeaderProperty(prop, header || {}, config, channel);

      if (value !== undefined) {
        props[prop] = value;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return props;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/header/component.js
var HEADER_CHANNELS = ['row', 'column'];
var HEADER_TYPES = ['header', 'footer'];
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/header/assemble.js


function header_assemble_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = header_assemble_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function header_assemble_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return header_assemble_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return header_assemble_arrayLikeToArray(o, minLen); }

function header_assemble_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function header_assemble_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function header_assemble_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { header_assemble_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { header_assemble_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Utility for generating row / column headers
 */












 // TODO: rename to assembleHeaderTitleGroup

function assembleTitleGroup(model, channel) {
  var title = model.component.layoutHeaders[channel].title;
  var config = model.config ? model.config : undefined;
  var facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;

  var _getHeaderProperties = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef.header, config, channel),
      titleAnchor = _getHeaderProperties.titleAnchor,
      ta = _getHeaderProperties.titleAngle,
      titleOrient = _getHeaderProperties.titleOrient;

  var headerChannel = getHeaderChannel(channel, titleOrient);
  var titleAngle = normalizeAngle(ta);
  return {
    name: "".concat(channel, "-title"),
    type: 'group',
    role: "".concat(headerChannel, "-title"),
    title: header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread({
      text: title
    }, channel === 'row' ? {
      orient: 'left'
    } : {}), {}, {
      style: 'guide-title'
    }, defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))
  };
}
function defaultHeaderGuideAlign(headerChannel, angle) {
  var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'middle';

  switch (anchor) {
    case 'start':
      return {
        align: 'left'
      };

    case 'end':
      return {
        align: 'right'
      };
  }

  var align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top', headerChannel === 'row' ? 'y' : 'x');
  return align ? {
    align: align
  } : {};
}
function defaultHeaderGuideBaseline(angle, channel) {
  var baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top', channel === 'row' ? 'y' : 'x', true);
  return baseline ? {
    baseline: baseline
  } : {};
}
function assembleHeaderGroups(model, channel) {
  var layoutHeader = model.component.layoutHeaders[channel];
  var groups = [];

  var _iterator = header_assemble_createForOfIteratorHelper(HEADER_TYPES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var headerType = _step.value;

      if (layoutHeader[headerType]) {
        var _iterator2 = header_assemble_createForOfIteratorHelper(layoutHeader[headerType]),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var headerComponent = _step2.value;
            var group = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);

            if (group != null) {
              groups.push(group);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return groups;
}

function getSort(facetFieldDef, channel) {
  var sort = facetFieldDef.sort;

  if (isSortField(sort)) {
    var _sort$order;

    return {
      field: channeldef_vgField(sort, {
        expr: 'datum'
      }),
      order: (_sort$order = sort.order) !== null && _sort$order !== void 0 ? _sort$order : 'ascending'
    };
  } else if (isArray(sort)) {
    return {
      field: sortArrayIndexField(facetFieldDef, channel, {
        expr: 'datum'
      }),
      order: 'ascending'
    };
  } else {
    return {
      field: channeldef_vgField(facetFieldDef, {
        expr: 'datum'
      }),
      order: sort !== null && sort !== void 0 ? sort : 'ascending'
    };
  }
}

function assemble_assembleLabelTitle(facetFieldDef, channel, config) {
  var _getHeaderProperties2 = getHeaderProperties(['format', 'formatType', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef.header, config, channel),
      format = _getHeaderProperties2.format,
      formatType = _getHeaderProperties2.formatType,
      labelAngle = _getHeaderProperties2.labelAngle,
      labelAnchor = _getHeaderProperties2.labelAnchor,
      labelOrient = _getHeaderProperties2.labelOrient,
      labelExpr = _getHeaderProperties2.labelExpr;

  var titleTextExpr = formatSignalRef({
    fieldOrDatumDef: facetFieldDef,
    format: format,
    formatType: formatType,
    expr: 'parent',
    config: config
  }).signal;
  var headerChannel = getHeaderChannel(channel, labelOrient);
  return header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread({
    text: {
      signal: labelExpr ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', channeldef_vgField(facetFieldDef, {
        expr: 'parent'
      })) : titleTextExpr
    }
  }, channel === 'row' ? {
    orient: 'left'
  } : {}), {}, {
    style: 'guide-label',
    frame: 'group'
  }, defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));
}
function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {
  if (headerComponent) {
    var title = null;
    var facetFieldDef = layoutHeader.facetFieldDef;
    var config = model.config ? model.config : undefined;

    if (facetFieldDef && headerComponent.labels) {
      var _getHeaderProperties3 = getHeaderProperties(['labelOrient'], facetFieldDef.header, config, channel),
          labelOrient = _getHeaderProperties3.labelOrient; // Include label title in the header if orient aligns with the channel


      if (channel === 'row' && !util_contains(['top', 'bottom'], labelOrient) || channel === 'column' && !util_contains(['left', 'right'], labelOrient)) {
        title = assemble_assembleLabelTitle(facetFieldDef, channel, config);
      }
    }

    var isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
    var axes = headerComponent.axes;
    var hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;

    if (title || hasAxes) {
      var sizeChannel = channel === 'row' ? 'height' : 'width';
      return header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread(header_assemble_objectSpread({
        name: model.getName("".concat(channel, "_").concat(headerType)),
        type: 'group',
        role: "".concat(channel, "-").concat(headerType)
      }, layoutHeader.facetFieldDef ? {
        from: {
          data: model.getName("".concat(channel, "_domain"))
        },
        sort: getSort(facetFieldDef, channel)
      } : {}), hasAxes && isFacetWithoutRowCol ? {
        from: {
          data: model.getName("facet_domain_".concat(channel))
        }
      } : {}), title ? {
        title: title
      } : {}), headerComponent.sizeSignal ? {
        encode: {
          update: (0,defineProperty/* default */.Z)({}, sizeChannel, headerComponent.sizeSignal)
        }
      } : {}), hasAxes ? {
        axes: axes
      } : {});
    }
  }

  return null;
}
var LAYOUT_TITLE_BAND = {
  column: {
    start: 0,
    end: 1
  },
  row: {
    start: 1,
    end: 0
  }
};
function getLayoutTitleBand(titleAnchor, headerChannel) {
  return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
}
function assembleLayoutTitleBand(headerComponentIndex, config) {
  var titleBand = {};

  var _iterator3 = header_assemble_createForOfIteratorHelper(FACET_CHANNELS),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var channel = _step3.value;
      var headerComponent = headerComponentIndex[channel];

      if (headerComponent !== null && headerComponent !== void 0 && headerComponent.facetFieldDef) {
        var _getHeaderProperties4 = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef.header, config, channel),
            titleAnchor = _getHeaderProperties4.titleAnchor,
            titleOrient = _getHeaderProperties4.titleOrient;

        var headerChannel = getHeaderChannel(channel, titleOrient);
        var band = getLayoutTitleBand(titleAnchor, headerChannel);

        if (band !== undefined) {
          titleBand[headerChannel] = band;
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return isEmpty(titleBand) ? undefined : titleBand;
}
function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
  var props = {};

  var _iterator4 = header_assemble_createForOfIteratorHelper(properties),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var prop = _step4.value;

      if (!propertiesMap[prop]) {
        continue;
      }

      var value = getHeaderProperty(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);

      if (value !== undefined) {
        props[propertiesMap[prop]] = value;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return props;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/layoutsize/assemble.js







function assemble_assembleLayoutSignals(model) {
  return [].concat((0,toConsumableArray/* default */.Z)(sizeSignals(model, 'width')), (0,toConsumableArray/* default */.Z)(sizeSignals(model, 'height')), (0,toConsumableArray/* default */.Z)(sizeSignals(model, 'childWidth')), (0,toConsumableArray/* default */.Z)(sizeSignals(model, 'childHeight')));
}
function sizeSignals(model, sizeType) {
  var channel = sizeType === 'width' ? 'x' : 'y';
  var size = model.component.layoutSize.get(sizeType);

  if (!size || size === 'merged') {
    return [];
  } // Read size signal name from name map, just in case it is the top-level size signal that got renamed.


  var name = model.getSizeSignalRef(sizeType).signal;

  if (size === 'step') {
    var scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      var type = scaleComponent.get('type');
      var range = scaleComponent.get('range');

      if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
        var scaleName = model.scaleName(channel);

        if (isFacetModel(model.parent)) {
          // If parent is facet and this is an independent scale, return only signal signal
          // as the width/height will be calculated using the cardinality from
          // facet's aggregate rather than reading from scale domain
          var parentResolve = model.parent.component.resolve;

          if (parentResolve.scale[channel] === 'independent') {
            return [stepSignal(scaleName, range)];
          }
        }

        return [stepSignal(scaleName, range), {
          name: name,
          update: sizeExpr(scaleName, scaleComponent, "domain('".concat(scaleName, "').length"))
        }];
      }
    }
    /* istanbul ignore next: Condition should not happen -- only for warning in development. */


    throw new Error('layout size is step although width/height is not step.');
  } else if (size == 'container') {
    var isWidth = name.endsWith('width');
    var expr = isWidth ? 'containerSize()[0]' : 'containerSize()[1]';
    var defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? 'width' : 'height');
    var safeExpr = "isFinite(".concat(expr, ") ? ").concat(expr, " : ").concat(defaultValue);
    return [{
      name: name,
      init: safeExpr,
      on: [{
        update: safeExpr,
        events: 'window:resize'
      }]
    }];
  } else {
    return [{
      name: name,
      value: size
    }];
  }
}

function stepSignal(scaleName, range) {
  return {
    name: "".concat(scaleName, "_step"),
    value: range.step
  };
}

function sizeExpr(scaleName, scaleComponent, cardinality) {
  var type = scaleComponent.get('type');
  var padding = scaleComponent.get('padding');
  var paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);
  var paddingInner = scaleComponent.get('paddingInner');
  paddingInner = type === 'band' ? // only band has real paddingInner
  paddingInner !== undefined ? paddingInner : padding : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
  // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
  1;
  return "bandspace(".concat(cardinality, ", ").concat(signalOrStringValue(paddingInner), ", ").concat(signalOrStringValue(paddingOuter), ") * ").concat(scaleName, "_step");
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/layoutsize/component.js
function getSizeTypeFromLayoutSizeType(layoutSizeType) {
  return layoutSizeType === 'childWidth' ? 'width' : layoutSizeType === 'childHeight' ? 'height' : layoutSizeType;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/guide.js


function guide_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function guide_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { guide_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { guide_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




function guideEncodeEntry(encoding, model) {
  return util_keys(encoding).reduce(function (encode, channel) {
    var valueDef = encoding[channel];
    return guide_objectSpread(guide_objectSpread({}, encode), wrapCondition(model, valueDef, channel, function (def) {
      return signalOrValueRef(def.value);
    }));
  }, {});
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/resolve.js



function defaultScaleResolve(channel, model) {
  if (isLayerModel(model) || isFacetModel(model)) {
    return 'shared';
  } else if (isConcatModel(model)) {
    return isXorY(channel) ? 'independent' : 'shared';
  }
  /* istanbul ignore next: should never reach here. */


  throw new Error('invalid model type for resolve');
}
function parseGuideResolve(resolve, channel) {
  var channelScaleResolve = resolve.scale[channel];
  var guide = isXorY(channel) ? 'axis' : 'legend';

  if (channelScaleResolve === 'independent') {
    if (resolve[guide][channel] === 'shared') {
      log_warn(independentScaleMeansIndependentGuide(channel));
    }

    return 'independent';
  }

  return resolve[guide][channel] || 'shared';
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/legend/component.js






function component_createSuper(Derived) { var hasNativeReflectConstruct = component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function component_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function component_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { component_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { component_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





var LEGEND_COMPONENT_PROPERTY_INDEX = component_objectSpread(component_objectSpread({}, COMMON_LEGEND_PROPERTY_INDEX), {}, {
  disable: 1,
  labelExpr: 1,
  selections: 1,
  // channel scales
  opacity: 1,
  shape: 1,
  stroke: 1,
  fill: 1,
  size: 1,
  strokeWidth: 1,
  strokeDash: 1,
  // encode
  encode: 1
});

var LEGEND_COMPONENT_PROPERTIES = util_keys(LEGEND_COMPONENT_PROPERTY_INDEX);
var LegendComponent = /*#__PURE__*/function (_Split) {
  (0,inherits/* default */.Z)(LegendComponent, _Split);

  var _super = component_createSuper(LegendComponent);

  function LegendComponent() {
    (0,classCallCheck/* default */.Z)(this, LegendComponent);

    return _super.apply(this, arguments);
  }

  return LegendComponent;
}(Split);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/legend/encode.js


function encode_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function encode_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { encode_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { encode_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










var legendEncodeRules = {
  symbols: encode_symbols,
  gradient: encode_gradient,
  labels: labels,
  entries: encode_entries
};
function encode_symbols(symbolsSpec, _ref) {
  var _legendCmpt$get, _legendCmpt$get2, _legendCmpt$get3, _getMaxValue;

  var fieldOrDatumDef = _ref.fieldOrDatumDef,
      model = _ref.model,
      channel = _ref.channel,
      legendCmpt = _ref.legendCmpt,
      legendType = _ref.legendType;

  if (legendType !== 'symbol') {
    return undefined;
  }

  var markDef = model.markDef,
      encoding = model.encoding,
      config = model.config,
      mark = model.mark;
  var filled = markDef.filled && mark !== 'trail';

  var out = encode_objectSpread(encode_objectSpread({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), color_color(model, {
    filled: filled
  })); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry


  var symbolOpacity = (_legendCmpt$get = legendCmpt.get('symbolOpacity')) !== null && _legendCmpt$get !== void 0 ? _legendCmpt$get : config.legend.symbolOpacity;
  var symbolFillColor = (_legendCmpt$get2 = legendCmpt.get('symbolFillColor')) !== null && _legendCmpt$get2 !== void 0 ? _legendCmpt$get2 : config.legend.symbolFillColor;
  var symbolStrokeColor = (_legendCmpt$get3 = legendCmpt.get('symbolStrokeColor')) !== null && _legendCmpt$get3 !== void 0 ? _legendCmpt$get3 : config.legend.symbolStrokeColor;
  var opacity = symbolOpacity === undefined ? (_getMaxValue = getMaxValue(encoding.opacity)) !== null && _getMaxValue !== void 0 ? _getMaxValue : markDef.opacity : undefined;

  if (out.fill) {
    // for fill legend, we don't want any fill in symbol
    if (channel === 'fill' || filled && channel === COLOR) {
      delete out.fill;
    } else {
      if (out.fill['field']) {
        // For others, set fill to some opaque value (or nothing if a color is already set)
        if (symbolFillColor) {
          delete out.fill;
        } else {
          var _config$legend$symbol;

          out.fill = signalOrValueRef((_config$legend$symbol = config.legend.symbolBaseFillColor) !== null && _config$legend$symbol !== void 0 ? _config$legend$symbol : 'black');
          out.fillOpacity = signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1);
        }
      } else if (isArray(out.fill)) {
        var _ref2, _getFirstConditionVal, _encoding$fill;

        var fill = (_ref2 = (_getFirstConditionVal = getFirstConditionValue((_encoding$fill = encoding.fill) !== null && _encoding$fill !== void 0 ? _encoding$fill : encoding.color)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markDef.fill) !== null && _ref2 !== void 0 ? _ref2 : filled && markDef.color;

        if (fill) {
          out.fill = signalOrValueRef(fill);
        }
      }
    }
  }

  if (out.stroke) {
    if (channel === 'stroke' || !filled && channel === COLOR) {
      delete out.stroke;
    } else {
      if (out.stroke['field'] || symbolStrokeColor) {
        // For others, remove stroke field
        delete out.stroke;
      } else if (isArray(out.stroke)) {
        var stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);

        if (stroke) {
          out.stroke = {
            value: stroke
          };
        }
      }
    }
  }

  if (channel !== OPACITY) {
    var condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);

    if (condition) {
      out.opacity = [encode_objectSpread({
        test: condition
      }, signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1)), signalOrValueRef(config.legend.unselectedOpacity)];
    } else if (opacity) {
      out.opacity = signalOrValueRef(opacity);
    }
  }

  out = encode_objectSpread(encode_objectSpread({}, out), symbolsSpec);
  return isEmpty(out) ? undefined : out;
}
function encode_gradient(gradientSpec, _ref3) {
  var _legendCmpt$get4;

  var model = _ref3.model,
      legendType = _ref3.legendType,
      legendCmpt = _ref3.legendCmpt;

  if (legendType !== 'gradient') {
    return undefined;
  }

  var config = model.config,
      markDef = model.markDef,
      encoding = model.encoding;
  var out = {};
  var gradientOpacity = (_legendCmpt$get4 = legendCmpt.get('gradientOpacity')) !== null && _legendCmpt$get4 !== void 0 ? _legendCmpt$get4 : config.legend.gradientOpacity;
  var opacity = gradientOpacity === undefined ? getMaxValue(encoding.opacity) || markDef.opacity : undefined;

  if (opacity) {
    // only apply opacity if it is neither zero or undefined
    out.opacity = signalOrValueRef(opacity);
  }

  out = encode_objectSpread(encode_objectSpread({}, out), gradientSpec);
  return isEmpty(out) ? undefined : out;
}
function labels(specifiedlabelsSpec, _ref4) {
  var fieldOrDatumDef = _ref4.fieldOrDatumDef,
      model = _ref4.model,
      channel = _ref4.channel,
      legendCmpt = _ref4.legendCmpt;
  var legend = model.legend(channel) || {};
  var config = model.config;
  var condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;
  var opacity = condition ? [{
    test: condition,
    value: 1
  }, {
    value: config.legend.unselectedOpacity
  }] : undefined;
  var format = legend.format,
      formatType = legend.formatType;
  var text = isCustomFormatType(formatType) ? formatCustomType({
    fieldOrDatumDef: fieldOrDatumDef,
    field: 'datum.value',
    format: format,
    formatType: formatType,
    config: config
  }) : undefined;

  var labelsSpec = encode_objectSpread(encode_objectSpread(encode_objectSpread({}, opacity ? {
    opacity: opacity
  } : {}), text ? {
    text: text
  } : {}), specifiedlabelsSpec);

  return isEmpty(labelsSpec) ? undefined : labelsSpec;
}
function encode_entries(entriesSpec, _ref5) {
  var legendCmpt = _ref5.legendCmpt;
  var selections = legendCmpt.get('selections');
  return selections !== null && selections !== void 0 && selections.length ? encode_objectSpread(encode_objectSpread({}, entriesSpec), {}, {
    fill: {
      value: 'transparent'
    }
  }) : entriesSpec;
}

function getMaxValue(channelDef) {
  return getConditionValue(channelDef, function (v, conditionalDef) {
    return Math.max(v, conditionalDef.value);
  });
}

function getFirstConditionValue(channelDef) {
  return getConditionValue(channelDef, function (v, conditionalDef) {
    return getFirstDefined(v, conditionalDef.value);
  });
}

function getConditionValue(channelDef, reducer) {
  if (hasConditionalValueDef(channelDef)) {
    return array(channelDef.condition).reduce(reducer, channelDef.value);
  } else if (isValueDef(channelDef)) {
    return channelDef.value;
  }

  return undefined;
}

function selectedCondition(model, legendCmpt, fieldDef) {
  var selections = legendCmpt.get('selections');
  if (!(selections !== null && selections !== void 0 && selections.length)) return undefined;
  var field = $(fieldDef.field);
  return selections.map(function (name) {
    var store = $(varName(name) + STORE);
    return "(!length(data(".concat(store, ")) || (").concat(name, "[").concat(field, "] && indexof(").concat(name, "[").concat(field, "], datum.value) >= 0))");
  }).join(' || ');
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/legend/properties.js








var legendRules = {
  direction: function direction(_ref) {
    var _direction = _ref.direction;
    return _direction;
  },
  format: function format(_ref2) {
    var fieldOrDatumDef = _ref2.fieldOrDatumDef,
        legend = _ref2.legend,
        config = _ref2.config;
    var format = legend.format,
        formatType = legend.formatType;
    return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format, formatType, config, false);
  },
  formatType: function formatType(_ref3) {
    var legend = _ref3.legend,
        fieldOrDatumDef = _ref3.fieldOrDatumDef,
        scaleType = _ref3.scaleType;
    var formatType = legend.formatType;
    return guideFormatType(formatType, fieldOrDatumDef, scaleType);
  },
  gradientLength: function gradientLength(params) {
    var _ref4, _legend$gradientLengt;

    var legend = params.legend,
        legendConfig = params.legendConfig;
    return (_ref4 = (_legend$gradientLengt = legend.gradientLength) !== null && _legend$gradientLengt !== void 0 ? _legend$gradientLengt : legendConfig.gradientLength) !== null && _ref4 !== void 0 ? _ref4 : defaultGradientLength(params);
  },
  labelOverlap: function labelOverlap(_ref5) {
    var _ref6, _legend$labelOverlap;

    var legend = _ref5.legend,
        legendConfig = _ref5.legendConfig,
        scaleType = _ref5.scaleType;
    return (_ref6 = (_legend$labelOverlap = legend.labelOverlap) !== null && _legend$labelOverlap !== void 0 ? _legend$labelOverlap : legendConfig.labelOverlap) !== null && _ref6 !== void 0 ? _ref6 : properties_defaultLabelOverlap(scaleType);
  },
  symbolType: function symbolType(_ref7) {
    var _legend$symbolType;

    var legend = _ref7.legend,
        markDef = _ref7.markDef,
        channel = _ref7.channel,
        encoding = _ref7.encoding;
    return (_legend$symbolType = legend.symbolType) !== null && _legend$symbolType !== void 0 ? _legend$symbolType : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape);
  },
  title: function title(_ref8) {
    var fieldOrDatumDef = _ref8.fieldOrDatumDef,
        config = _ref8.config;
    return channeldef_title(fieldOrDatumDef, config, {
      allowDisabling: true
    });
  },
  type: function type(_ref9) {
    var legendType = _ref9.legendType,
        scaleType = _ref9.scaleType,
        channel = _ref9.channel;

    if (isColorChannel(channel) && isContinuousToContinuous(scaleType)) {
      if (legendType === 'gradient') {
        return undefined;
      }
    } else if (legendType === 'symbol') {
      return undefined;
    }

    return legendType;
  },
  values: function values(_ref10) {
    var fieldOrDatumDef = _ref10.fieldOrDatumDef,
        legend = _ref10.legend;
    return properties_values(legend, fieldOrDatumDef);
  }
};

function properties_values(legend, fieldOrDatumDef) {
  var vals = legend.values;

  if (isArray(vals)) {
    return valueArray(fieldOrDatumDef, vals);
  } else if (isSignalRef(vals)) {
    return vals;
  }

  return undefined;
}


function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {
  if (channel !== 'shape') {
    var _getFirstConditionVal;

    // use the value from the shape encoding or the mark config if they exist
    var shape = (_getFirstConditionVal = getFirstConditionValue(shapeChannelDef)) !== null && _getFirstConditionVal !== void 0 ? _getFirstConditionVal : markShape;

    if (shape) {
      return shape;
    }
  }

  switch (mark) {
    case 'bar':
    case 'rect':
    case 'image':
    case 'square':
      return 'square';

    case 'line':
    case 'trail':
    case 'rule':
      return 'stroke';

    case 'arc':
    case 'point':
    case 'circle':
    case 'tick':
    case 'geoshape':
    case 'area':
    case 'text':
      return 'circle';
  }
}
function clipHeight(legendType) {
  if (legendType === 'gradient') {
    return 20;
  }

  return undefined;
}
function getLegendType(params) {
  var legend = params.legend;
  return getFirstDefined(legend.type, properties_defaultType(params));
}
function properties_defaultType(_ref11) {
  var channel = _ref11.channel,
      timeUnit = _ref11.timeUnit,
      scaleType = _ref11.scaleType;

  // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
  if (isColorChannel(channel)) {
    if (util_contains(['quarter', 'month', 'day'], timeUnit)) {
      return 'symbol';
    }

    if (isContinuousToContinuous(scaleType)) {
      return 'gradient';
    }
  }

  return 'symbol';
}
function getDirection(_ref12) {
  var _ref13, _legend$direction;

  var legendConfig = _ref12.legendConfig,
      legendType = _ref12.legendType,
      orient = _ref12.orient,
      legend = _ref12.legend;
  return (_ref13 = (_legend$direction = legend.direction) !== null && _legend$direction !== void 0 ? _legend$direction : legendConfig[legendType ? 'gradientDirection' : 'symbolDirection']) !== null && _ref13 !== void 0 ? _ref13 : defaultDirection(orient, legendType);
}
function defaultDirection(orient, legendType) {
  switch (orient) {
    case 'top':
    case 'bottom':
      return 'horizontal';

    case 'left':
    case 'right':
    case 'none':
    case undefined:
      // undefined = "right" in Vega
      return undefined;
    // vertical is Vega's default

    default:
      // top-left / ...
      // For inner legend, uses compact layout like Tableau
      return legendType === 'gradient' ? 'horizontal' : undefined;
  }
}
function defaultGradientLength(_ref14) {
  var legendConfig = _ref14.legendConfig,
      model = _ref14.model,
      direction = _ref14.direction,
      orient = _ref14.orient,
      scaleType = _ref14.scaleType;
  var gradientHorizontalMaxLength = legendConfig.gradientHorizontalMaxLength,
      gradientHorizontalMinLength = legendConfig.gradientHorizontalMinLength,
      gradientVerticalMaxLength = legendConfig.gradientVerticalMaxLength,
      gradientVerticalMinLength = legendConfig.gradientVerticalMinLength;

  if (isContinuousToContinuous(scaleType)) {
    if (direction === 'horizontal') {
      if (orient === 'top' || orient === 'bottom') {
        return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);
      } else {
        return gradientHorizontalMinLength;
      }
    } else {
      // vertical / undefined (Vega uses vertical by default)
      return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);
    }
  }

  return undefined;
}

function gradientLengthSignal(model, sizeType, min, max) {
  var sizeSignal = model.getSizeSignalRef(sizeType).signal;
  return {
    signal: "clamp(".concat(sizeSignal, ", ").concat(min, ", ").concat(max, ")")
  };
}

function properties_defaultLabelOverlap(scaleType) {
  if (util_contains(['quantile', 'threshold', 'log', 'symlog'], scaleType)) {
    return 'greedy';
  }

  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/legend/parse.js



function legend_parse_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function legend_parse_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { legend_parse_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { legend_parse_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function legend_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = legend_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function legend_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return legend_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return legend_parse_arrayLikeToArray(o, minLen); }

function legend_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
















function parse_parseLegend(model) {
  var legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);
  model.component.legends = legendComponent;
  return legendComponent;
}

function parseUnitLegend(model) {
  var encoding = model.encoding;
  var legendComponent = {};

  for (var _i = 0, _arr = [COLOR].concat((0,toConsumableArray/* default */.Z)(LEGEND_SCALE_CHANNELS)); _i < _arr.length; _i++) {
    var channel = _arr[_i];
    var def = getFieldOrDatumDef(encoding[channel]);

    if (!def || !model.getScaleComponent(channel)) {
      continue;
    }

    if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {
      continue;
    }

    legendComponent[channel] = parseLegendForChannel(model, channel);
  }

  return legendComponent;
}

function getLegendDefWithScale(model, channel) {
  var scale = model.scaleName(channel);

  if (model.mark === 'trail') {
    if (channel === 'color') {
      // trail is a filled mark, but its default symbolType ("stroke") should use "stroke"
      return {
        stroke: scale
      };
    } else if (channel === 'size') {
      return {
        strokeWidth: scale
      };
    }
  }

  if (channel === 'color') {
    return model.markDef.filled ? {
      fill: scale
    } : {
      stroke: scale
    };
  }

  return (0,defineProperty/* default */.Z)({}, channel, scale);
} // eslint-disable-next-line @typescript-eslint/ban-types


function isExplicit(value, property, legend, fieldDef) {
  switch (property) {
    case 'disable':
      return legend !== undefined;
    // if axis is specified or null/false, then its enable/disable state is explicit

    case 'values':
      // specified legend.values is already respected, but may get transformed.
      return !!(legend !== null && legend !== void 0 && legend.values);

    case 'title':
      // title can be explicit if fieldDef.title is set
      if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {
        return true;
      }

  } // Otherwise, things are explicit if the returned value matches the specified property


  return value === (legend || {})[property];
}

function parseLegendForChannel(model, channel) {
  var _normalizeTimeUnit, _legend$encoding, _legend;

  var legend = model.legend(channel);
  var markDef = model.markDef,
      encoding = model.encoding,
      config = model.config;
  var legendConfig = config.legend;
  var legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
  parseInteractiveLegend(model, channel, legendCmpt);
  var disable = legend !== undefined ? !legend : legendConfig.disable;
  legendCmpt.set('disable', disable, legend !== undefined);

  if (disable) {
    return legendCmpt;
  }

  legend = legend || {};
  var scaleType = model.getScaleComponent(channel).get('type');
  var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
  var timeUnit = isFieldDef(fieldOrDatumDef) ? (_normalizeTimeUnit = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit : undefined;
  var orient = legend.orient || config.legend.orient || 'right';
  var legendType = getLegendType({
    legend: legend,
    channel: channel,
    timeUnit: timeUnit,
    scaleType: scaleType
  });
  var direction = getDirection({
    legend: legend,
    legendType: legendType,
    orient: orient,
    legendConfig: legendConfig
  });
  var ruleParams = {
    legend: legend,
    channel: channel,
    model: model,
    markDef: markDef,
    encoding: encoding,
    fieldOrDatumDef: fieldOrDatumDef,
    legendConfig: legendConfig,
    config: config,
    scaleType: scaleType,
    orient: orient,
    legendType: legendType,
    direction: direction
  };

  var _iterator = legend_parse_createForOfIteratorHelper(LEGEND_COMPONENT_PROPERTIES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;

      if (legendType === 'gradient' && property.startsWith('symbol') || legendType === 'symbol' && property.startsWith('gradient')) {
        continue;
      }

      var _value = property in legendRules ? legendRules[property](ruleParams) : legend[property];

      if (_value !== undefined) {
        var explicit = isExplicit(_value, property, legend, model.fieldDef(channel));

        if (explicit || config.legend[property] === undefined) {
          legendCmpt.set(property, _value, explicit);
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var legendEncoding = (_legend$encoding = (_legend = legend) === null || _legend === void 0 ? void 0 : _legend.encoding) !== null && _legend$encoding !== void 0 ? _legend$encoding : {};
  var selections = legendCmpt.get('selections');
  var legendEncode = {};
  var legendEncodeParams = {
    fieldOrDatumDef: fieldOrDatumDef,
    model: model,
    channel: channel,
    legendCmpt: legendCmpt,
    legendType: legendType
  };

  for (var _i2 = 0, _arr2 = ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']; _i2 < _arr2.length; _i2++) {
    var _legendEncoding$part;

    var part = _arr2[_i2];
    var legendEncodingPart = guideEncodeEntry((_legendEncoding$part = legendEncoding[part]) !== null && _legendEncoding$part !== void 0 ? _legendEncoding$part : {}, model);
    var value = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) // apply rule
    : legendEncodingPart; // no rule -- just default values

    if (value !== undefined && !isEmpty(value)) {
      legendEncode[part] = legend_parse_objectSpread(legend_parse_objectSpread(legend_parse_objectSpread({}, selections !== null && selections !== void 0 && selections.length && isFieldDef(fieldOrDatumDef) ? {
        name: "".concat(varName(fieldOrDatumDef.field), "_legend_").concat(part)
      } : {}), selections !== null && selections !== void 0 && selections.length ? {
        interactive: !!selections
      } : {}), {}, {
        update: value
      });
    }
  }

  if (!isEmpty(legendEncode)) {
    var _legend2;

    legendCmpt.set('encode', legendEncode, !!((_legend2 = legend) !== null && _legend2 !== void 0 && _legend2.encoding));
  }

  return legendCmpt;
}

function parseNonUnitLegend(model) {
  var _model$component = model.component,
      legends = _model$component.legends,
      resolve = _model$component.resolve;

  var _iterator2 = legend_parse_createForOfIteratorHelper(model.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var child = _step2.value;
      parse_parseLegend(child);

      var _iterator4 = legend_parse_createForOfIteratorHelper(util_keys(child.component.legends)),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var channel = _step4.value;
          resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);

          if (resolve.legend[channel] === 'shared') {
            // If the resolve says shared (and has not been overridden)
            // We will try to merge and see if there is a conflict
            legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);

            if (!legends[channel]) {
              // If merge returns nothing, there is a conflict so we cannot make the legend shared.
              // Thus, mark legend as independent and remove the legend component.
              resolve.legend[channel] = 'independent';
              delete legends[channel];
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = legend_parse_createForOfIteratorHelper(util_keys(legends)),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _channel = _step3.value;

      var _iterator5 = legend_parse_createForOfIteratorHelper(model.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _child = _step5.value;

          if (!_child.component.legends[_channel]) {
            // skip if the child does not have a particular legend
            continue;
          }

          if (resolve.legend[_channel] === 'shared') {
            // After merging shared legend, make sure to remove legend from child
            delete _child.component.legends[_channel];
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return legends;
}

function mergeLegendComponent(mergedLegend, childLegend) {
  if (!mergedLegend) {
    return childLegend.clone();
  }

  var mergedOrient = mergedLegend.getWithExplicit('orient');
  var childOrient = childLegend.getWithExplicit('orient');

  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
    // Cannot merge due to inconsistent orient
    return undefined;
  }

  var typeMerged = false; // Otherwise, let's merge

  var _iterator6 = legend_parse_createForOfIteratorHelper(LEGEND_COMPONENT_PROPERTIES),
      _step6;

  try {
    var _loop = function _loop() {
      var prop = _step6.value;
      var mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function
      function (v1, v2) {
        switch (prop) {
          case 'symbolType':
            return mergeSymbolType(v1, v2);

          case 'title':
            return mergeTitleComponent(v1, v2);

          case 'type':
            // There are only two types. If we have different types, then prefer symbol over gradient.
            typeMerged = true;
            return makeImplicit('symbol');
        }

        return defaultTieBreaker(v1, v2, prop, 'legend');
      });
      mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
    };

    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }

  if (typeMerged) {
    var _mergedLegend$implici, _mergedLegend$implici2, _mergedLegend$explici, _mergedLegend$explici2;

    if ((_mergedLegend$implici = mergedLegend.implicit) !== null && _mergedLegend$implici !== void 0 && (_mergedLegend$implici2 = _mergedLegend$implici.encode) !== null && _mergedLegend$implici2 !== void 0 && _mergedLegend$implici2.gradient) {
      deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
    }

    if ((_mergedLegend$explici = mergedLegend.explicit) !== null && _mergedLegend$explici !== void 0 && (_mergedLegend$explici2 = _mergedLegend$explici.encode) !== null && _mergedLegend$explici2 !== void 0 && _mergedLegend$explici2.gradient) {
      deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
    }
  }

  return mergedLegend;
}

function mergeSymbolType(st1, st2) {
  if (st2.value === 'circle') {
    // prefer "circle" over "stroke"
    return st2;
  }

  return st1;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/legend/assemble.js

var legend_assemble_excluded = ["disable", "labelExpr", "selections"];


function legend_assemble_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = legend_assemble_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function legend_assemble_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return legend_assemble_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return legend_assemble_arrayLikeToArray(o, minLen); }

function legend_assemble_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function setLegendEncode(legend, part, vgProp, vgRef) {
  var _legend$encode, _a$part, _b$update;

  var _a, _b;

  (_legend$encode = legend.encode) !== null && _legend$encode !== void 0 ? _legend$encode : legend.encode = {};
  (_a$part = (_a = legend.encode)[part]) !== null && _a$part !== void 0 ? _a$part : _a[part] = {};
  (_b$update = (_b = legend.encode[part]).update) !== null && _b$update !== void 0 ? _b$update : _b.update = {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291

  legend.encode[part].update[vgProp] = vgRef;
}

function assemble_assembleLegends(model) {
  var legendComponentIndex = model.component.legends;
  var legendByDomain = {};

  var _iterator = legend_assemble_createForOfIteratorHelper(util_keys(legendComponentIndex)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var scaleComponent = model.getScaleComponent(channel);
      var domainHash = stringify(scaleComponent.get('domains'));

      if (legendByDomain[domainHash]) {
        var _iterator2 = legend_assemble_createForOfIteratorHelper(legendByDomain[domainHash]),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var mergedLegendComponent = _step2.value;
            var merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);

            if (!merged) {
              // If cannot merge, need to add this legend separately
              legendByDomain[domainHash].push(legendComponentIndex[channel]);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var legends = vals(legendByDomain).flat().map(function (l) {
    return assembleLegend(l, model.config);
  }).filter(function (l) {
    return l !== undefined;
  });
  return legends;
}
function assembleLegend(legendCmpt, config) {
  var _legend$encode2;

  var _legendCmpt$combine = legendCmpt.combine(),
      disable = _legendCmpt$combine.disable,
      labelExpr = _legendCmpt$combine.labelExpr,
      selections = _legendCmpt$combine.selections,
      legend = (0,objectWithoutProperties/* default */.Z)(_legendCmpt$combine, legend_assemble_excluded);

  if (disable) {
    return undefined;
  }

  if (config.aria === false && legend.aria == undefined) {
    legend.aria = false;
  }

  if ((_legend$encode2 = legend.encode) !== null && _legend$encode2 !== void 0 && _legend$encode2.symbols) {
    var out = legend.encode.symbols.update;

    if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {
      // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
      out.stroke = {
        value: 'transparent'
      };
    } // Remove properties that the legend is encoding.


    var _iterator3 = legend_assemble_createForOfIteratorHelper(LEGEND_SCALE_CHANNELS),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var property = _step3.value;

        if (legend[property]) {
          delete out[property];
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  if (!legend.title) {
    // title schema doesn't include null, ''
    delete legend.title;
  }

  if (labelExpr !== undefined) {
    var _legend$encode3, _legend$encode3$label;

    var expr = labelExpr;

    if ((_legend$encode3 = legend.encode) !== null && _legend$encode3 !== void 0 && (_legend$encode3$label = _legend$encode3.labels) !== null && _legend$encode3$label !== void 0 && _legend$encode3$label.update && isSignalRef(legend.encode.labels.update.text)) {
      expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);
    }

    setLegendEncode(legend, 'labels', 'text', {
      signal: expr
    });
  }

  return legend;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/projection/assemble.js


function projection_assemble_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function projection_assemble_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { projection_assemble_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { projection_assemble_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




function assemble_assembleProjections(model) {
  if (isLayerModel(model) || isConcatModel(model)) {
    return assembleProjectionsForModelAndChildren(model);
  } else {
    return assembleProjectionForModel(model);
  }
}
function assembleProjectionsForModelAndChildren(model) {
  return model.children.reduce(function (projections, child) {
    return projections.concat(child.assembleProjections());
  }, assembleProjectionForModel(model));
}
function assembleProjectionForModel(model) {
  var component = model.component.projection;

  if (!component || component.merged) {
    return [];
  }

  var projection = component.combine();
  var name = projection.name; // we need to extract name so that it is always present in the output and pass TS type validation

  if (!component.data) {
    // generate custom projection, no automatic fitting
    return [projection_assemble_objectSpread(projection_assemble_objectSpread({
      name: name
    }, {
      translate: {
        signal: '[width / 2, height / 2]'
      }
    }), projection)];
  } else {
    // generate projection that uses extent fitting
    var size = {
      signal: "[".concat(component.size.map(function (ref) {
        return ref.signal;
      }).join(', '), "]")
    };
    var fits = component.data.reduce(function (sources, data) {
      var source = isSignalRef(data) ? data.signal : "data('".concat(model.lookupDataSource(data), "')");

      if (!util_contains(sources, source)) {
        // build a unique list of sources
        sources.push(source);
      }

      return sources;
    }, []);

    if (fits.length <= 0) {
      throw new Error("Projection's fit didn't find any data sources");
    }

    return [projection_assemble_objectSpread({
      name: name,
      size: size,
      fit: {
        signal: fits.length > 1 ? "[".concat(fits.join(', '), "]") : fits[0]
      }
    }, projection)];
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/projection.js
var PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/projection/component.js







function projection_component_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function projection_component_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { projection_component_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { projection_component_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function projection_component_createSuper(Derived) { var hasNativeReflectConstruct = projection_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function projection_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var ProjectionComponent = /*#__PURE__*/function (_Split) {
  (0,inherits/* default */.Z)(ProjectionComponent, _Split);

  var _super = projection_component_createSuper(ProjectionComponent);

  function ProjectionComponent(name, specifiedProjection, size, data) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, ProjectionComponent);

    _this = _super.call(this, projection_component_objectSpread({}, specifiedProjection), // all explicit properties of projection
    {
      name: name
    } // name as initial implicit property
    );
    _this.specifiedProjection = specifiedProjection;
    _this.size = size;
    _this.data = data;
    _this.merged = false;
    return _this;
  }
  /**
   * Whether the projection parameters should fit provided data.
   */


  (0,createClass/* default */.Z)(ProjectionComponent, [{
    key: "isFit",
    get: function get() {
      return !!this.data;
    }
  }]);

  return ProjectionComponent;
}(Split);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/projection/parse.js



function projection_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = projection_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function projection_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return projection_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return projection_parse_arrayLikeToArray(o, minLen); }

function projection_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function projection_parse_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function projection_parse_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { projection_parse_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { projection_parse_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }











function parse_parseProjection(model) {
  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
}

function parseUnitProjection(model) {
  if (model.hasProjection) {
    var _replaceExprRef;

    var proj = replaceExprRef(model.specifiedProjection);
    var fit = !(proj && (proj.scale != null || proj.translate != null));
    var size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;
    var data = fit ? gatherFitData(model) : undefined;
    var projComp = new ProjectionComponent(model.projectionName(true), projection_parse_objectSpread(projection_parse_objectSpread({}, (_replaceExprRef = replaceExprRef(model.config.projection)) !== null && _replaceExprRef !== void 0 ? _replaceExprRef : {}), proj !== null && proj !== void 0 ? proj : {}), size, data);

    if (!projComp.get('type')) {
      projComp.set('type', 'equalEarth', false);
    }

    return projComp;
  }

  return undefined;
}

function gatherFitData(model) {
  var data = [];
  var encoding = model.encoding;

  for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
    var posssiblePair = _arr[_i];

    if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {
      data.push({
        signal: model.getName("geojson_".concat(data.length))
      });
    }
  }

  if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {
    data.push({
      signal: model.getName("geojson_".concat(data.length))
    });
  }

  if (data.length === 0) {
    // main source is geojson, so we can just use that
    data.push(model.requestDataName(DataSourceType.Main));
  }

  return data;
}

function mergeIfNoConflict(first, second) {
  var allPropertiesShared = every(PROJECTION_PROPERTIES, function (prop) {
    // neither has the property
    if (!_has(first.explicit, prop) && !_has(second.explicit, prop)) {
      return true;
    } // both have property and an equal value for property


    if (_has(first.explicit, prop) && _has(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison
    deepEqual(first.get(prop), second.get(prop))) {
      return true;
    }

    return false;
  });
  var size = deepEqual(first.size, second.size);

  if (size) {
    if (allPropertiesShared) {
      return first;
    } else if (deepEqual(first.explicit, {})) {
      return second;
    } else if (deepEqual(second.explicit, {})) {
      return first;
    }
  } // if all properties don't match, let each unit spec have its own projection


  return null;
}

function parseNonUnitProjections(model) {
  if (model.children.length === 0) {
    return undefined;
  }

  var nonUnitProjection; // parse all children first

  var _iterator = projection_parse_createForOfIteratorHelper(model.children),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _child = _step.value;
      parse_parseProjection(_child);
    } // analyze parsed projections, attempt to merge

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var mergable = every(model.children, function (child) {
    var projection = child.component.projection;

    if (!projection) {
      // child layer does not use a projection
      return true;
    } else if (!nonUnitProjection) {
      // cached 'projection' is null, cache this one
      nonUnitProjection = projection;
      return true;
    } else {
      var merge = mergeIfNoConflict(nonUnitProjection, projection);

      if (merge) {
        nonUnitProjection = merge;
      }

      return !!merge;
    }
  }); // if cached one and all other children share the same projection,

  if (nonUnitProjection && mergable) {
    // so we can elevate it to the layer level
    var name = model.projectionName(true);
    var modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data)); // rename and assign all others as merged

    var _iterator2 = projection_parse_createForOfIteratorHelper(model.children),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var child = _step2.value;
        var projection = child.component.projection;

        if (projection) {
          if (projection.isFit) {
            var _modelProjection$data;

            (_modelProjection$data = modelProjection.data).push.apply(_modelProjection$data, (0,toConsumableArray/* default */.Z)(child.component.projection.data));
          }

          child.renameProjection(projection.get('name'), name);
          projection.merged = true;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return modelProjection;
  }

  return undefined;
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js
var toArray = __webpack_require__(99809);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/bin.js









var bin_excluded = ["extent"];




function bin_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = bin_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function bin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bin_arrayLikeToArray(o, minLen); }

function bin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function bin_createSuper(Derived) { var hasNativeReflectConstruct = bin_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function bin_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function bin_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function bin_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bin_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bin_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










function rangeFormula(model, fieldDef, channel, config) {
  if (binRequiresRange(fieldDef, channel)) {
    var _ref, _model$axis;

    // read format from axis or legend, if there is no format then use config.numberFormat
    var guide = isUnitModel(model) ? (_ref = (_model$axis = model.axis(channel)) !== null && _model$axis !== void 0 ? _model$axis : model.legend(channel)) !== null && _ref !== void 0 ? _ref : {} : {};
    var startField = channeldef_vgField(fieldDef, {
      expr: 'datum'
    });
    var endField = channeldef_vgField(fieldDef, {
      expr: 'datum',
      binSuffix: 'end'
    });
    return {
      formulaAs: channeldef_vgField(fieldDef, {
        binSuffix: 'range',
        forAs: true
      }),
      formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)
    };
  }

  return {};
}

function binKey(bin, field) {
  return "".concat(binToString(bin), "_").concat(field);
}

function getSignalsFromModel(model, key) {
  return {
    signal: model.getName("".concat(key, "_bins")),
    extentSignal: model.getName("".concat(key, "_extent"))
  };
}

function getBinSignalName(model, field, bin) {
  var _normalizeBin;

  var normalizedBin = (_normalizeBin = normalizeBin(bin, undefined)) !== null && _normalizeBin !== void 0 ? _normalizeBin : {};
  var key = binKey(normalizedBin, field);
  return model.getName("".concat(key, "_bins"));
}

function isBinTransform(t) {
  return 'as' in t;
}

function createBinComponent(t, bin, model) {
  var as;
  var span;

  if (isBinTransform(t)) {
    as = isString(t.as) ? [t.as, "".concat(t.as, "_end")] : [t.as[0], t.as[1]];
  } else {
    as = [channeldef_vgField(t, {
      forAs: true
    }), channeldef_vgField(t, {
      binSuffix: 'end',
      forAs: true
    })];
  }

  var normalizedBin = bin_objectSpread({}, normalizeBin(bin, undefined));

  var key = binKey(normalizedBin, t.field);

  var _getSignalsFromModel = getSignalsFromModel(model, key),
      signal = _getSignalsFromModel.signal,
      extentSignal = _getSignalsFromModel.extentSignal;

  if (isParameterExtent(normalizedBin.extent)) {
    var ext = normalizedBin.extent;
    span = parseSelectionExtent(model, ext.param, ext);
    delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.
  }

  var binComponent = bin_objectSpread(bin_objectSpread(bin_objectSpread({
    bin: normalizedBin,
    field: t.field,
    as: [as]
  }, signal ? {
    signal: signal
  } : {}), extentSignal ? {
    extentSignal: extentSignal
  } : {}), span ? {
    span: span
  } : {});

  return {
    key: key,
    binComponent: binComponent
  };
}

var BinNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(BinNode, _DataFlowNode);

  var _super = bin_createSuper(BinNode);

  function BinNode(parent, bins) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, BinNode);

    _this = _super.call(this, parent);
    _this.bins = bins;
    return _this;
  }

  (0,createClass/* default */.Z)(BinNode, [{
    key: "clone",
    value: function clone() {
      return new BinNode(null, duplicate(this.bins));
    }
  }, {
    key: "merge",
    value:
    /**
     * Merge bin nodes. This method either integrates the bin config from the other node
     * or if this node already has a bin config, renames the corresponding signal in the model.
     */
    function merge(other, renameSignal) {
      var _iterator = bin_createForOfIteratorHelper(util_keys(other.bins)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;

          if (key in this.bins) {
            renameSignal(other.bins[key].signal, this.bins[key].signal); // Ensure that we don't have duplicate names for signal pairs

            this.bins[key].as = unique([].concat((0,toConsumableArray/* default */.Z)(this.bins[key].as), (0,toConsumableArray/* default */.Z)(other.bins[key].as)), util_hash);
          } else {
            this.bins[key] = other.bins[key];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = bin_createForOfIteratorHelper(other.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          other.removeChild(child);
          child.parent = this;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      other.remove();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(vals(this.bins).map(function (c) {
        return c.as;
      }).flat(2));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(vals(this.bins).map(function (c) {
        return c.field;
      }));
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Bin ".concat(util_hash(this.bins));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return vals(this.bins).flatMap(function (bin) {
        var transform = [];

        var _bin$as = (0,toArray/* default */.Z)(bin.as),
            binAs = _bin$as[0],
            remainingAs = _bin$as.slice(1);

        var _bin$bin = bin.bin,
            extent = _bin$bin.extent,
            params = (0,objectWithoutProperties/* default */.Z)(_bin$bin, bin_excluded);

        var binTrans = bin_objectSpread(bin_objectSpread(bin_objectSpread({
          type: 'bin',
          field: replacePathInField(bin.field),
          as: binAs,
          signal: bin.signal
        }, !isParameterExtent(extent) ? {
          extent: extent
        } : {
          extent: null
        }), bin.span ? {
          span: {
            signal: "span(".concat(bin.span, ")")
          }
        } : {}), params);

        if (!extent && bin.extentSignal) {
          transform.push({
            type: 'extent',
            field: replacePathInField(bin.field),
            signal: bin.extentSignal
          });
          binTrans.extent = {
            signal: bin.extentSignal
          };
        }

        transform.push(binTrans);

        var _iterator3 = bin_createForOfIteratorHelper(remainingAs),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var as = _step3.value;

            for (var i = 0; i < 2; i++) {
              transform.push({
                type: 'formula',
                expr: channeldef_vgField({
                  field: binAs[i]
                }, {
                  expr: 'datum'
                }),
                as: as[i]
              });
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (bin.formula) {
          transform.push({
            type: 'formula',
            expr: bin.formula,
            as: bin.formulaAs
          });
        }

        return transform;
      });
    }
  }], [{
    key: "makeFromEncoding",
    value: function makeFromEncoding(parent, model) {
      var bins = model.reduceFieldDef(function (binComponentIndex, fieldDef, channel) {
        if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
          var _createBinComponent = createBinComponent(fieldDef, fieldDef.bin, model),
              key = _createBinComponent.key,
              binComponent = _createBinComponent.binComponent;

          binComponentIndex[key] = bin_objectSpread(bin_objectSpread(bin_objectSpread({}, binComponent), binComponentIndex[key]), rangeFormula(model, fieldDef, channel, model.config));
        }

        return binComponentIndex;
      }, {});

      if (isEmpty(bins)) {
        return null;
      }

      return new BinNode(parent, bins);
    }
    /**
     * Creates a bin node from BinTransform.
     * The optional parameter should provide
     */

  }, {
    key: "makeFromTransform",
    value: function makeFromTransform(parent, t, model) {
      var _createBinComponent2 = createBinComponent(t, t.bin, model),
          key = _createBinComponent2.key,
          binComponent = _createBinComponent2.binComponent;

      return new BinNode(parent, (0,defineProperty/* default */.Z)({}, key, binComponent));
    }
  }]);

  return BinNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/aggregate.js








function aggregate_createSuper(Derived) { var hasNativeReflectConstruct = aggregate_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function aggregate_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function aggregate_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = aggregate_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function aggregate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return aggregate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return aggregate_arrayLikeToArray(o, minLen); }

function aggregate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function addDimension(dims, channel, fieldDef, model) {
  var channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;

  if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBandEnd(fieldDef, channelDef2, model.markDef, model.config)) {
    dims.add(channeldef_vgField(fieldDef, {}));
    dims.add(channeldef_vgField(fieldDef, {
      suffix: 'end'
    }));

    if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {
      dims.add(channeldef_vgField(fieldDef, {
        binSuffix: 'range'
      }));
    }
  } else if (isGeoPositionChannel(channel)) {
    var posChannel = getPositionChannelFromLatLong(channel);
    dims.add(model.getName(posChannel));
  } else {
    dims.add(channeldef_vgField(fieldDef));
  }

  return dims;
}

function mergeMeasures(parentMeasures, childMeasures) {
  var _iterator = aggregate_createForOfIteratorHelper(util_keys(childMeasures)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      // when we merge a measure, we either have to add an aggregation operator or even a new field
      var ops = childMeasures[field];

      var _iterator2 = aggregate_createForOfIteratorHelper(util_keys(ops)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var op = _step2.value;

          if (field in parentMeasures) {
            var _parentMeasures$field;

            // add operator to existing measure field
            parentMeasures[field][op] = new Set([].concat((0,toConsumableArray/* default */.Z)((_parentMeasures$field = parentMeasures[field][op]) !== null && _parentMeasures$field !== void 0 ? _parentMeasures$field : []), (0,toConsumableArray/* default */.Z)(ops[op])));
          } else {
            parentMeasures[field] = (0,defineProperty/* default */.Z)({}, op, ops[op]);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

var AggregateNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(AggregateNode, _DataFlowNode);

  var _super = aggregate_createSuper(AggregateNode);

  /**
   * @param dimensions string set for dimensions
   * @param measures dictionary mapping field name => dict of aggregation functions and names to use
   */
  function AggregateNode(parent, dimensions, measures) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, AggregateNode);

    _this = _super.call(this, parent);
    _this.dimensions = dimensions;
    _this.measures = measures;
    return _this;
  }

  (0,createClass/* default */.Z)(AggregateNode, [{
    key: "clone",
    value: function clone() {
      return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
    }
  }, {
    key: "groupBy",
    get: function get() {
      return this.dimensions;
    }
  }, {
    key: "merge",
    value: function merge(other) {
      if (setEqual(this.dimensions, other.dimensions)) {
        mergeMeasures(this.measures, other.measures);
        return true;
      } else {
        log_debug('different dimensions, cannot merge');
        return false;
      }
    }
  }, {
    key: "addDimensions",
    value: function addDimensions(fields) {
      fields.forEach(this.dimensions.add, this.dimensions);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set([].concat((0,toConsumableArray/* default */.Z)(this.dimensions), (0,toConsumableArray/* default */.Z)(util_keys(this.measures))));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      var out = new Set();

      var _iterator3 = aggregate_createForOfIteratorHelper(util_keys(this.measures)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var field = _step3.value;

          var _iterator4 = aggregate_createForOfIteratorHelper(util_keys(this.measures[field])),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var op = _step4.value;
              var m = this.measures[field][op];

              if (m.size === 0) {
                out.add("".concat(op, "_").concat(field));
              } else {
                m.forEach(out.add, out);
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return out;
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Aggregate ".concat(util_hash({
        dimensions: this.dimensions,
        measures: this.measures
      }));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var ops = [];
      var fields = [];
      var as = [];

      var _iterator5 = aggregate_createForOfIteratorHelper(util_keys(this.measures)),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var field = _step5.value;

          var _iterator6 = aggregate_createForOfIteratorHelper(util_keys(this.measures[field])),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var op = _step6.value;

              var _iterator7 = aggregate_createForOfIteratorHelper(this.measures[field][op]),
                  _step7;

              try {
                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                  var alias = _step7.value;
                  as.push(alias);
                  ops.push(op);
                  fields.push(field === '*' ? null : replacePathInField(field));
                }
              } catch (err) {
                _iterator7.e(err);
              } finally {
                _iterator7.f();
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var result = {
        type: 'aggregate',
        groupby: (0,toConsumableArray/* default */.Z)(this.dimensions).map(replacePathInField),
        ops: ops,
        fields: fields,
        as: as
      };
      return result;
    }
  }], [{
    key: "makeFromEncoding",
    value: function makeFromEncoding(parent, model) {
      var isAggregate = false;
      model.forEachFieldDef(function (fd) {
        if (fd.aggregate) {
          isAggregate = true;
        }
      });
      var meas = {};
      var dims = new Set();

      if (!isAggregate) {
        // no need to create this node if the model has no aggregation
        return null;
      }

      model.forEachFieldDef(function (fieldDef, channel) {
        var aggregate = fieldDef.aggregate,
            field = fieldDef.field;

        if (aggregate) {
          if (aggregate === 'count') {
            var _meas$;

            (_meas$ = meas['*']) !== null && _meas$ !== void 0 ? _meas$ : meas['*'] = {};
            meas['*']['count'] = new Set([channeldef_vgField(fieldDef, {
              forAs: true
            })]);
          } else {
            if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
              var _meas$argField;

              var op = isArgminDef(aggregate) ? 'argmin' : 'argmax';
              var argField = aggregate[op];
              (_meas$argField = meas[argField]) !== null && _meas$argField !== void 0 ? _meas$argField : meas[argField] = {};
              meas[argField][op] = new Set([channeldef_vgField({
                op: op,
                field: argField
              }, {
                forAs: true
              })]);
            } else {
              var _meas$field;

              (_meas$field = meas[field]) !== null && _meas$field !== void 0 ? _meas$field : meas[field] = {};
              meas[field][aggregate] = new Set([channeldef_vgField(fieldDef, {
                forAs: true
              })]);
            } // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain


            if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {
              var _meas$field2;

              (_meas$field2 = meas[field]) !== null && _meas$field2 !== void 0 ? _meas$field2 : meas[field] = {};
              meas[field]['min'] = new Set([channeldef_vgField({
                field: field,
                aggregate: 'min'
              }, {
                forAs: true
              })]);
              meas[field]['max'] = new Set([channeldef_vgField({
                field: field,
                aggregate: 'max'
              }, {
                forAs: true
              })]);
            }
          }
        } else {
          addDimension(dims, channel, fieldDef, model);
        }
      });

      if (dims.size + util_keys(meas).length === 0) {
        return null;
      }

      return new AggregateNode(parent, dims, meas);
    }
  }, {
    key: "makeFromTransform",
    value: function makeFromTransform(parent, t) {
      var _t$groupby;

      var dims = new Set();
      var meas = {};

      var _iterator8 = aggregate_createForOfIteratorHelper(t.aggregate),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var s = _step8.value;
          var op = s.op,
              field = s.field,
              as = s.as;

          if (op) {
            if (op === 'count') {
              var _meas$2;

              (_meas$2 = meas['*']) !== null && _meas$2 !== void 0 ? _meas$2 : meas['*'] = {};
              meas['*']['count'] = new Set([as ? as : channeldef_vgField(s, {
                forAs: true
              })]);
            } else {
              var _meas$field3;

              (_meas$field3 = meas[field]) !== null && _meas$field3 !== void 0 ? _meas$field3 : meas[field] = {};
              meas[field][op] = new Set([as ? as : channeldef_vgField(s, {
                forAs: true
              })]);
            }
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      var _iterator9 = aggregate_createForOfIteratorHelper((_t$groupby = t.groupby) !== null && _t$groupby !== void 0 ? _t$groupby : []),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _s = _step9.value;
          dims.add(_s);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      if (dims.size + util_keys(meas).length === 0) {
        return null;
      }

      return new AggregateNode(parent, dims, meas);
    }
  }]);

  return AggregateNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/facet.js








function facet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function facet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { facet_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { facet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function facet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = facet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function facet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return facet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return facet_arrayLikeToArray(o, minLen); }

function facet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function facet_createSuper(Derived) { var hasNativeReflectConstruct = facet_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function facet_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }














/**
 * A node that helps us track what fields we are faceting by.
 */

var FacetNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(FacetNode, _DataFlowNode);

  var _super = facet_createSuper(FacetNode);

  /**
   * @param model The facet model.
   * @param name The name that this facet source will have.
   * @param data The source data for this facet data.
   */
  function FacetNode(parent, model, name, data) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, FacetNode);

    _this = _super.call(this, parent);
    _this.model = model;
    _this.name = name;
    _this.data = data;

    var _iterator = facet_createForOfIteratorHelper(FACET_CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var fieldDef = model.facet[channel];

        if (fieldDef) {
          var bin = fieldDef.bin,
              sort = fieldDef.sort;
          _this[channel] = facet_objectSpread({
            name: model.getName("".concat(channel, "_domain")),
            fields: [channeldef_vgField(fieldDef)].concat((0,toConsumableArray/* default */.Z)(isBinning(bin) ? [channeldef_vgField(fieldDef, {
              binSuffix: 'end'
            })] : []))
          }, isSortField(sort) ? {
            sortField: sort
          } : isArray(sort) ? {
            sortIndexField: sortArrayIndexField(fieldDef, channel)
          } : {});
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    _this.childModel = model.child;
    return _this;
  }

  (0,createClass/* default */.Z)(FacetNode, [{
    key: "hash",
    value: function hash() {
      var out = "Facet";

      var _iterator2 = facet_createForOfIteratorHelper(FACET_CHANNELS),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channel = _step2.value;

          if (this[channel]) {
            out += " ".concat(channel.charAt(0), ":").concat(util_hash(this[channel]));
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return out;
    }
  }, {
    key: "fields",
    get: function get() {
      var f = [];

      var _iterator3 = facet_createForOfIteratorHelper(FACET_CHANNELS),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _this$channel;

          var channel = _step3.value;

          if ((_this$channel = this[channel]) !== null && _this$channel !== void 0 && _this$channel.fields) {
            f.push.apply(f, (0,toConsumableArray/* default */.Z)(this[channel].fields));
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return f;
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var depFields = new Set(this.fields);

      var _iterator4 = facet_createForOfIteratorHelper(FACET_CHANNELS),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var channel = _step4.value;

          if (this[channel]) {
            if (this[channel].sortField) {
              depFields.add(this[channel].sortField.field);
            }

            if (this[channel].sortIndexField) {
              depFields.add(this[channel].sortIndexField);
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return depFields;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(); // facet does not produce any new fields
    }
    /**
     * The name to reference this source is its name.
     */

  }, {
    key: "getSource",
    value: function getSource() {
      return this.name;
    }
  }, {
    key: "getChildIndependentFieldsWithStep",
    value: function getChildIndependentFieldsWithStep() {
      var childIndependentFieldsWithStep = {};

      var _iterator5 = facet_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var channel = _step5.value;
          var childScaleComponent = this.childModel.component.scales[channel];

          if (childScaleComponent && !childScaleComponent.merged) {
            // independent scale
            var type = childScaleComponent.get('type');
            var range = childScaleComponent.get('range');

            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
              var domain = assembleDomain(this.childModel, channel);
              var field = getFieldFromDomain(domain);

              if (field) {
                childIndependentFieldsWithStep[channel] = field;
              } else {
                log_warn(unknownField(channel));
              }
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return childIndependentFieldsWithStep;
    }
  }, {
    key: "assembleRowColumnHeaderData",
    value: function assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
      var childChannel = {
        row: 'y',
        column: 'x',
        facet: undefined
      }[channel];
      var fields = [];
      var ops = [];
      var as = [];

      if (childChannel && childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
        if (crossedDataName) {
          // If there is a crossed data, calculate max
          fields.push("distinct_".concat(childIndependentFieldsWithStep[childChannel]));
          ops.push('max');
        } else {
          // If there is no crossed data, just calculate distinct
          fields.push(childIndependentFieldsWithStep[childChannel]);
          ops.push('distinct');
        } // Although it is technically a max, just name it distinct so it's easier to refer to it


        as.push("distinct_".concat(childIndependentFieldsWithStep[childChannel]));
      }

      var _this$channel2 = this[channel],
          sortField = _this$channel2.sortField,
          sortIndexField = _this$channel2.sortIndexField;

      if (sortField) {
        var _sortField$op = sortField.op,
            op = _sortField$op === void 0 ? DEFAULT_SORT_OP : _sortField$op,
            field = sortField.field;
        fields.push(field);
        ops.push(op);
        as.push(channeldef_vgField(sortField, {
          forAs: true
        }));
      } else if (sortIndexField) {
        fields.push(sortIndexField);
        ops.push('max');
        as.push(sortIndexField);
      }

      return {
        name: this[channel].name,
        // Use data from the crossed one if it exist
        source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,
        transform: [facet_objectSpread({
          type: 'aggregate',
          groupby: this[channel].fields
        }, fields.length ? {
          fields: fields,
          ops: ops,
          as: as
        } : {})]
      };
    }
  }, {
    key: "assembleFacetHeaderData",
    value: function assembleFacetHeaderData(childIndependentFieldsWithStep) {
      var columns = this.model.layout.columns;
      var layoutHeaders = this.model.component.layoutHeaders;
      var data = [];
      var hasSharedAxis = {};

      var _iterator6 = facet_createForOfIteratorHelper(HEADER_CHANNELS),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var headerChannel = _step6.value;

          var _iterator7 = facet_createForOfIteratorHelper(HEADER_TYPES),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _ref;

              var headerType = _step7.value;
              var headers = (_ref = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) !== null && _ref !== void 0 ? _ref : [];

              var _iterator8 = facet_createForOfIteratorHelper(headers),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var _header$axes;

                  var header = _step8.value;

                  if (((_header$axes = header.axes) === null || _header$axes === void 0 ? void 0 : _header$axes.length) > 0) {
                    hasSharedAxis[headerChannel] = true;
                    break;
                  }
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          if (hasSharedAxis[headerChannel]) {
            var cardinality = "length(data(\"".concat(this.facet.name, "\"))");
            var stop = headerChannel === 'row' ? columns ? {
              signal: "ceil(".concat(cardinality, " / ").concat(columns, ")")
            } : 1 : columns ? {
              signal: "min(".concat(cardinality, ", ").concat(columns, ")")
            } : {
              signal: cardinality
            };
            data.push({
              name: "".concat(this.facet.name, "_").concat(headerChannel),
              transform: [{
                type: 'sequence',
                start: 0,
                stop: stop
              }]
            });
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var row = hasSharedAxis.row,
          column = hasSharedAxis.column;

      if (row || column) {
        data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));
      }

      return data;
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var data = [];
      var crossedDataName = null;
      var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
      var column = this.column,
          row = this.row,
          facet = this.facet;

      if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
        var _childIndependentFiel, _childIndependentFiel2;

        // Need to create a cross dataset to correctly calculate cardinality
        crossedDataName = "cross_".concat(this.column.name, "_").concat(this.row.name);
        var fields = [].concat((_childIndependentFiel = childIndependentFieldsWithStep.x) !== null && _childIndependentFiel !== void 0 ? _childIndependentFiel : [], (_childIndependentFiel2 = childIndependentFieldsWithStep.y) !== null && _childIndependentFiel2 !== void 0 ? _childIndependentFiel2 : []);
        var ops = fields.map(function () {
          return 'distinct';
        });
        data.push({
          name: crossedDataName,
          source: this.data,
          transform: [{
            type: 'aggregate',
            groupby: this.fields,
            fields: fields,
            ops: ops
          }]
        });
      }

      for (var _i = 0, _arr = [COLUMN, ROW]; _i < _arr.length; _i++) {
        var channel = _arr[_i];

        if (this[channel]) {
          data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
        }
      }

      if (facet) {
        var facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);

        if (facetData) {
          data.push.apply(data, (0,toConsumableArray/* default */.Z)(facetData));
        }
      }

      return data;
    }
  }]);

  return FacetNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/formatparse.js







function formatparse_createSuper(Derived) { var hasNativeReflectConstruct = formatparse_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function formatparse_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function formatparse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = formatparse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function formatparse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return formatparse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return formatparse_arrayLikeToArray(o, minLen); }

function formatparse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function formatparse_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function formatparse_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { formatparse_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { formatparse_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

















/**
 * Remove quotes from a string.
 */

function unquote(pattern) {
  if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
    return pattern.slice(1, -1);
  }

  return pattern;
}
/**
 * @param field The field.
 * @param parse What to parse the field as.
 */


function formatparse_parseExpression(field, parse) {
  var f = accessPathWithDatum(field);

  if (parse === 'number') {
    return "toNumber(".concat(f, ")");
  } else if (parse === 'boolean') {
    return "toBoolean(".concat(f, ")");
  } else if (parse === 'string') {
    return "toString(".concat(f, ")");
  } else if (parse === 'date') {
    return "toDate(".concat(f, ")");
  } else if (parse === 'flatten') {
    return f;
  } else if (parse.startsWith('date:')) {
    var specifier = unquote(parse.slice(5, parse.length));
    return "timeParse(".concat(f, ",'").concat(specifier, "')");
  } else if (parse.startsWith('utc:')) {
    var _specifier = unquote(parse.slice(4, parse.length));

    return "utcParse(".concat(f, ",'").concat(_specifier, "')");
  } else {
    log_warn(unrecognizedParse(parse));
    return null;
  }
}

function getImplicitFromFilterTransform(transform) {
  var implicit = {};
  forEachLeaf(transform.filter, function (filter) {
    if (isFieldPredicate(filter)) {
      // Automatically add a parse node for filters with filter objects
      var val = null; // For EqualFilter, just use the equal property.
      // For RangeFilter and OneOfFilter, all array members should have
      // the same type, so we only use the first one.

      if (isFieldEqualPredicate(filter)) {
        val = signalRefOrValue(filter.equal);
      } else if (isFieldLTEPredicate(filter)) {
        val = signalRefOrValue(filter.lte);
      } else if (isFieldLTPredicate(filter)) {
        val = signalRefOrValue(filter.lt);
      } else if (isFieldGTPredicate(filter)) {
        val = signalRefOrValue(filter.gt);
      } else if (isFieldGTEPredicate(filter)) {
        val = signalRefOrValue(filter.gte);
      } else if (isFieldRangePredicate(filter)) {
        val = filter.range[0];
      } else if (isFieldOneOfPredicate(filter)) {
        var _filter$oneOf;

        val = ((_filter$oneOf = filter.oneOf) !== null && _filter$oneOf !== void 0 ? _filter$oneOf : filter['in'])[0];
      } // else -- for filter expression, we can't infer anything


      if (val) {
        if (isDateTime(val)) {
          implicit[filter.field] = 'date';
        } else if (isNumber(val)) {
          implicit[filter.field] = 'number';
        } else if (isString(val)) {
          implicit[filter.field] = 'string';
        }
      }

      if (filter.timeUnit) {
        implicit[filter.field] = 'date';
      }
    }
  });
  return implicit;
}
/**
 * Creates a parse node for implicit parsing from a model and updates ancestorParse.
 */

function getImplicitFromEncoding(model) {
  var implicit = {};

  function add(fieldDef) {
    if (isFieldOrDatumDefForTimeFormat(fieldDef)) {
      implicit[fieldDef.field] = 'date';
    } else if (fieldDef.type === 'quantitative' && isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max
    ) {
        implicit[fieldDef.field] = 'number';
      } else if (accessPathDepth(fieldDef.field) > 1) {
      // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
      // (Parsing numbers / dates already flattens numeric and temporal fields.)
      if (!(fieldDef.field in implicit)) {
        implicit[fieldDef.field] = 'flatten';
      }
    } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
      // Flatten fields that we sort by but that are not otherwise flattened.
      if (!(fieldDef.sort.field in implicit)) {
        implicit[fieldDef.sort.field] = 'flatten';
      }
    }
  }

  if (isUnitModel(model) || isFacetModel(model)) {
    // Parse encoded fields
    model.forEachFieldDef(function (fieldDef, channel) {
      if (isTypedFieldDef(fieldDef)) {
        add(fieldDef);
      } else {
        var mainChannel = getMainRangeChannel(channel);
        var mainFieldDef = model.fieldDef(mainChannel);
        add(formatparse_objectSpread(formatparse_objectSpread({}, fieldDef), {}, {
          type: mainFieldDef.type
        }));
      }
    });
  } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.


  if (isUnitModel(model)) {
    var mark = model.mark,
        markDef = model.markDef,
        encoding = model.encoding;

    if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)
    !model.encoding.order) {
      var dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
      var dimensionChannelDef = encoding[dimensionChannel];

      if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {
        implicit[dimensionChannelDef.field] = 'number';
      }
    }
  }

  return implicit;
}
/**
 * Creates a parse node for implicit parsing from a model and updates ancestorParse.
 */

function getImplicitFromSelection(model) {
  var implicit = {};

  if (isUnitModel(model) && model.component.selection) {
    var _iterator = formatparse_createForOfIteratorHelper(util_keys(model.component.selection)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;
        var selCmpt = model.component.selection[name];

        var _iterator2 = formatparse_createForOfIteratorHelper(selCmpt.project.items),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var proj = _step2.value;

            if (!proj.channel && accessPathDepth(proj.field) > 1) {
              implicit[proj.field] = 'flatten';
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return implicit;
}
var ParseNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(ParseNode, _DataFlowNode);

  var _super = formatparse_createSuper(ParseNode);

  function ParseNode(parent, parse) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, ParseNode);

    _this = _super.call(this, parent);
    _this._parse = parse;
    return _this;
  }

  (0,createClass/* default */.Z)(ParseNode, [{
    key: "clone",
    value: function clone() {
      return new ParseNode(null, duplicate(this._parse));
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Parse ".concat(util_hash(this._parse));
    }
    /**
     * Creates a parse node from a data.format.parse and updates ancestorParse.
     */

  }, {
    key: "parse",
    get: function get() {
      return this._parse;
    }
  }, {
    key: "merge",
    value: function merge(other) {
      this._parse = formatparse_objectSpread(formatparse_objectSpread({}, this._parse), other.parse);
      other.remove();
    }
    /**
     * Assemble an object for Vega's format.parse property.
     */

  }, {
    key: "assembleFormatParse",
    value: function assembleFormatParse() {
      var formatParse = {};

      var _iterator3 = formatparse_createForOfIteratorHelper(util_keys(this._parse)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var field = _step3.value;
          var p = this._parse[field];

          if (accessPathDepth(field) === 1) {
            formatParse[field] = p;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return formatParse;
    } // format parse depends and produces all fields in its parse

  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(util_keys(this._parse));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(util_keys(this._parse));
    }
  }, {
    key: "assembleTransforms",
    value: function assembleTransforms() {
      var _this2 = this;

      var onlyNested = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return util_keys(this._parse).filter(function (field) {
        return onlyNested ? accessPathDepth(field) > 1 : true;
      }).map(function (field) {
        var expr = formatparse_parseExpression(field, _this2._parse[field]);

        if (!expr) {
          return null;
        }

        var formula = {
          type: 'formula',
          expr: expr,
          as: removePathFromField(field) // Vega output is always flattened

        };
        return formula;
      }).filter(function (t) {
        return t !== null;
      });
    }
  }], [{
    key: "makeExplicit",
    value: function makeExplicit(parent, model, ancestorParse) {
      // Custom parse
      var explicit = {};
      var data = model.data;

      if (!isGenerator(data) && data && data.format && data.format.parse) {
        explicit = data.format.parse;
      }

      return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
    }
    /**
     * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
     */

  }, {
    key: "makeWithAncestors",
    value: function makeWithAncestors(parent, explicit, implicit, ancestorParse) {
      // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
      var _iterator4 = formatparse_createForOfIteratorHelper(util_keys(implicit)),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var field = _step4.value;
          var parsedAs = ancestorParse.getWithExplicit(field);

          if (parsedAs.value !== undefined) {
            // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
            if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {
              delete implicit[field];
            } else {
              log_warn(differentParse(field, implicit[field], parsedAs.value));
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = formatparse_createForOfIteratorHelper(util_keys(explicit)),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _field = _step5.value;

          var _parsedAs = ancestorParse.get(_field);

          if (_parsedAs !== undefined) {
            // Don't parse a field again if it has been parsed with the same type already.
            if (_parsedAs === explicit[_field]) {
              delete explicit[_field];
            } else {
              log_warn(differentParse(_field, explicit[_field], _parsedAs));
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var parse = new Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again

      ancestorParse.copyAll(parse); // copy only non-null parses

      var p = {};

      var _iterator6 = formatparse_createForOfIteratorHelper(util_keys(parse.combine())),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var key = _step6.value;
          var val = parse.get(key);

          if (val !== null) {
            p[key] = val;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      if (util_keys(p).length === 0 || ancestorParse.parseNothing) {
        return null;
      }

      return new ParseNode(parent, p);
    }
  }]);

  return ParseNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/identifier.js






function identifier_createSuper(Derived) { var hasNativeReflectConstruct = identifier_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function identifier_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var IdentifierNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(IdentifierNode, _DataFlowNode);

  var _super = identifier_createSuper(IdentifierNode);

  function IdentifierNode(parent) {
    (0,classCallCheck/* default */.Z)(this, IdentifierNode);

    return _super.call(this, parent);
  }

  (0,createClass/* default */.Z)(IdentifierNode, [{
    key: "clone",
    value: function clone() {
      return new IdentifierNode(null);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set([selection_SELECTION_ID]);
    }
  }, {
    key: "hash",
    value: function hash() {
      return 'Identifier';
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return {
        type: 'identifier',
        as: selection_SELECTION_ID
      };
    }
  }]);

  return IdentifierNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/graticule.js







function graticule_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function graticule_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { graticule_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { graticule_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function graticule_createSuper(Derived) { var hasNativeReflectConstruct = graticule_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function graticule_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var GraticuleNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(GraticuleNode, _DataFlowNode);

  var _super = graticule_createSuper(GraticuleNode);

  function GraticuleNode(parent, params) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, GraticuleNode);

    _this = _super.call(this, parent);
    _this.params = params;
    return _this;
  }

  (0,createClass/* default */.Z)(GraticuleNode, [{
    key: "clone",
    value: function clone() {
      return new GraticuleNode(null, this.params);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return undefined; // there should never be a node before graticule
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Graticule ".concat(util_hash(this.params));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return graticule_objectSpread({
        type: 'graticule'
      }, this.params === true ? {} : this.params);
    }
  }]);

  return GraticuleNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/sequence.js







function sequence_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function sequence_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { sequence_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { sequence_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function sequence_createSuper(Derived) { var hasNativeReflectConstruct = sequence_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function sequence_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SequenceNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(SequenceNode, _DataFlowNode);

  var _super = sequence_createSuper(SequenceNode);

  function SequenceNode(parent, params) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, SequenceNode);

    _this = _super.call(this, parent);
    _this.params = params;
    return _this;
  }

  (0,createClass/* default */.Z)(SequenceNode, [{
    key: "clone",
    value: function clone() {
      return new SequenceNode(null, this.params);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      var _this$params$as;

      return new Set([(_this$params$as = this.params.as) !== null && _this$params$as !== void 0 ? _this$params$as : 'data']);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Hash ".concat(util_hash(this.params));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return sequence_objectSpread({
        type: 'sequence'
      }, this.params);
    }
  }]);

  return SequenceNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/source.js







function source_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function source_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { source_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { source_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function source_createSuper(Derived) { var hasNativeReflectConstruct = source_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function source_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SourceNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(SourceNode, _DataFlowNode);

  var _super = source_createSuper(SourceNode);

  function SourceNode(data) {
    var _data;

    var _this;

    (0,classCallCheck/* default */.Z)(this, SourceNode);

    _this = _super.call(this, null); // source cannot have parent

    (_data = data) !== null && _data !== void 0 ? _data : data = {
      name: 'source'
    };
    var format;

    if (!isGenerator(data)) {
      format = data.format ? source_objectSpread({}, omit(data.format, ['parse'])) : {};
    }

    if (isInlineData(data)) {
      _this._data = {
        values: data.values
      };
    } else if (isUrlData(data)) {
      _this._data = {
        url: data.url
      };

      if (!format.type) {
        // Extract extension from URL using snippet from
        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
        var defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];

        if (!util_contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {
          defaultExtension = 'json';
        } // defaultExtension has type string but we ensure that it is DataFormatType above


        format.type = defaultExtension;
      }
    } else if (isSphereGenerator(data)) {
      // hardwire GeoJSON sphere data into output specification
      _this._data = {
        values: [{
          type: 'Sphere'
        }]
      };
    } else if (isNamedData(data) || isGenerator(data)) {
      _this._data = {};
    } // set flag to check if generator


    _this._generator = isGenerator(data); // any dataset can be named

    if (data.name) {
      _this._name = data.name;
    }

    if (format && !isEmpty(format)) {
      _this._data.format = format;
    }

    return _this;
  }

  (0,createClass/* default */.Z)(SourceNode, [{
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return undefined; // we don't know what this source produces
    }
  }, {
    key: "data",
    get: function get() {
      return this._data;
    }
  }, {
    key: "hasName",
    value: function hasName() {
      return !!this._name;
    }
  }, {
    key: "isGenerator",
    get: function get() {
      return this._generator;
    }
  }, {
    key: "dataName",
    get: function get() {
      return this._name;
    },
    set: function set(name) {
      this._name = name;
    }
  }, {
    key: "parent",
    set: function set(parent) {
      throw new Error('Source nodes have to be roots.');
    }
  }, {
    key: "remove",
    value: function remove() {
      throw new Error('Source nodes are roots and cannot be removed.');
    }
  }, {
    key: "hash",
    value: function hash() {
      throw new Error('Cannot hash sources');
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return source_objectSpread(source_objectSpread({
        name: this._name
      }, this._data), {}, {
        transform: []
      });
    }
  }]);

  return SourceNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/optimizer.js







function optimizer_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = optimizer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function optimizer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return optimizer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return optimizer_arrayLikeToArray(o, minLen); }

function optimizer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function optimizer_createSuper(Derived) { var hasNativeReflectConstruct = optimizer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function optimizer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var optimizer_classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
};

var optimizer_classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
};

var _modified;




/**
 * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.
 */

function isDataSourceNode(node) {
  return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;
}
/**
 * Abstract base class for Dataflow optimizers.
 * Contains only mutation handling logic. Subclasses need to implement iteration logic.
 */

var Optimizer = /*#__PURE__*/function () {
  function Optimizer() {
    (0,classCallCheck/* default */.Z)(this, Optimizer);

    _modified.set(this, void 0);

    optimizer_classPrivateFieldSet(this, _modified, false);
  } // Once true, #modified is never set to false


  (0,createClass/* default */.Z)(Optimizer, [{
    key: "setModified",
    value: function setModified() {
      optimizer_classPrivateFieldSet(this, _modified, true);
    }
  }, {
    key: "modifiedFlag",
    get: function get() {
      return optimizer_classPrivateFieldGet(this, _modified);
    }
  }]);

  return Optimizer;
}();
_modified = new WeakMap();
/**
 * Starts from a node and runs the optimization function (the "run" method) upwards to the root,
 * depending on the continue and modified flag values returned by the optimization function.
 */

var BottomUpOptimizer = /*#__PURE__*/function (_Optimizer) {
  (0,inherits/* default */.Z)(BottomUpOptimizer, _Optimizer);

  var _super = optimizer_createSuper(BottomUpOptimizer);

  function BottomUpOptimizer() {
    (0,classCallCheck/* default */.Z)(this, BottomUpOptimizer);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(BottomUpOptimizer, [{
    key: "getNodeDepths",
    value:
    /**
     * Compute a map of node depths that we can use to determine a topological sort order.
     */
    function getNodeDepths(node, depth, depths) {
      depths.set(node, depth);

      var _iterator = optimizer_createForOfIteratorHelper(node.children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          this.getNodeDepths(child, depth + 1, depths);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return depths;
    }
    /**
     * Run the optimizer on all nodes starting from the leaves.
     */

  }, {
    key: "optimize",
    value: function optimize(node) {
      var depths = this.getNodeDepths(node, 0, new Map());

      var topologicalSort = (0,toConsumableArray/* default */.Z)(depths.entries()).sort(function (a, b) {
        return b[1] - a[1];
      });

      var _iterator2 = optimizer_createForOfIteratorHelper(topologicalSort),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var tuple = _step2.value;
          this.run(tuple[0]);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return this.modifiedFlag;
    }
  }]);

  return BottomUpOptimizer;
}(Optimizer);
/**
 * The optimizer function (the "run" method), is invoked on the given node and then continues recursively.
 */

var TopDownOptimizer = /*#__PURE__*/function (_Optimizer2) {
  (0,inherits/* default */.Z)(TopDownOptimizer, _Optimizer2);

  var _super2 = optimizer_createSuper(TopDownOptimizer);

  function TopDownOptimizer() {
    (0,classCallCheck/* default */.Z)(this, TopDownOptimizer);

    return _super2.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(TopDownOptimizer, [{
    key: "optimize",
    value:
    /**
     * Run the optimizer depth first on all nodes starting from the roots.
     */
    function optimize(node) {
      this.run(node);

      var _iterator3 = optimizer_createForOfIteratorHelper(node.children),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          this.optimize(child);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return this.modifiedFlag;
    }
  }]);

  return TopDownOptimizer;
}(Optimizer);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/optimizers.js








function optimizers_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = optimizers_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function optimizers_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return optimizers_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return optimizers_arrayLikeToArray(o, minLen); }

function optimizers_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function optimizers_createSuper(Derived) { var hasNativeReflectConstruct = optimizers_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function optimizers_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













/**
 * Merge identical nodes at forks by comparing hashes.
 *
 * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.
 */

var MergeIdenticalNodes = /*#__PURE__*/function (_TopDownOptimizer) {
  (0,inherits/* default */.Z)(MergeIdenticalNodes, _TopDownOptimizer);

  var _super = optimizers_createSuper(MergeIdenticalNodes);

  function MergeIdenticalNodes() {
    (0,classCallCheck/* default */.Z)(this, MergeIdenticalNodes);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MergeIdenticalNodes, [{
    key: "mergeNodes",
    value: function mergeNodes(parent, nodes) {
      var mergedNode = nodes.shift();

      var _iterator = optimizers_createForOfIteratorHelper(nodes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;
          parent.removeChild(node);
          node.parent = mergedNode;
          node.remove();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "run",
    value: function run(node) {
      var hashes = node.children.map(function (x) {
        return x.hash();
      });
      var buckets = {};

      for (var i = 0; i < hashes.length; i++) {
        if (buckets[hashes[i]] === undefined) {
          buckets[hashes[i]] = [node.children[i]];
        } else {
          buckets[hashes[i]].push(node.children[i]);
        }
      }

      var _iterator2 = optimizers_createForOfIteratorHelper(util_keys(buckets)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var k = _step2.value;

          if (buckets[k].length > 1) {
            this.setModified();
            this.mergeNodes(node, buckets[k]);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }]);

  return MergeIdenticalNodes;
}(TopDownOptimizer);
/**
 * Optimizer that removes identifier nodes that are not needed for selections.
 */

var RemoveUnnecessaryIdentifierNodes = /*#__PURE__*/function (_TopDownOptimizer2) {
  (0,inherits/* default */.Z)(RemoveUnnecessaryIdentifierNodes, _TopDownOptimizer2);

  var _super2 = optimizers_createSuper(RemoveUnnecessaryIdentifierNodes);

  function RemoveUnnecessaryIdentifierNodes(model) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, RemoveUnnecessaryIdentifierNodes);

    _this = _super2.call(this);
    _this.requiresSelectionId = model && requiresSelectionId(model);
    return _this;
  }

  (0,createClass/* default */.Z)(RemoveUnnecessaryIdentifierNodes, [{
    key: "run",
    value: function run(node) {
      if (node instanceof IdentifierNode) {
        // Only preserve IdentifierNodes if we have default discrete selections
        // in our model tree, and if the nodes come after tuple producing nodes.
        if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {
          this.setModified();
          node.remove();
        }
      }
    }
  }]);

  return RemoveUnnecessaryIdentifierNodes;
}(TopDownOptimizer);
/**
 * Removes duplicate time unit nodes (as determined by the name of the output field) that may be generated due to
 * selections projected over time units. Only keeps the first time unit in any branch.
 *
 * This optimizer is a custom top down optimizer that keep track of produced fields in a branch.
 */

var RemoveDuplicateTimeUnits = /*#__PURE__*/function (_Optimizer) {
  (0,inherits/* default */.Z)(RemoveDuplicateTimeUnits, _Optimizer);

  var _super3 = optimizers_createSuper(RemoveDuplicateTimeUnits);

  function RemoveDuplicateTimeUnits() {
    (0,classCallCheck/* default */.Z)(this, RemoveDuplicateTimeUnits);

    return _super3.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(RemoveDuplicateTimeUnits, [{
    key: "optimize",
    value: function optimize(node) {
      this.run(node, new Set());
      return this.modifiedFlag;
    }
  }, {
    key: "run",
    value: function run(node, timeUnitFields) {
      var producedFields = new Set();

      if (node instanceof TimeUnitNode) {
        producedFields = node.producedFields();

        if (hasIntersection(producedFields, timeUnitFields)) {
          this.setModified();
          node.removeFormulas(timeUnitFields);

          if (node.producedFields.length === 0) {
            node.remove();
          }
        }
      }

      var _iterator3 = optimizers_createForOfIteratorHelper(node.children),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          this.run(child, new Set([].concat((0,toConsumableArray/* default */.Z)(timeUnitFields), (0,toConsumableArray/* default */.Z)(producedFields))));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }]);

  return RemoveDuplicateTimeUnits;
}(Optimizer);
/**
 * Remove output nodes that are not required.
 */

var RemoveUnnecessaryOutputNodes = /*#__PURE__*/function (_TopDownOptimizer3) {
  (0,inherits/* default */.Z)(RemoveUnnecessaryOutputNodes, _TopDownOptimizer3);

  var _super4 = optimizers_createSuper(RemoveUnnecessaryOutputNodes);

  function RemoveUnnecessaryOutputNodes() {
    (0,classCallCheck/* default */.Z)(this, RemoveUnnecessaryOutputNodes);

    return _super4.call(this);
  }

  (0,createClass/* default */.Z)(RemoveUnnecessaryOutputNodes, [{
    key: "run",
    value: function run(node) {
      if (node instanceof OutputNode && !node.isRequired()) {
        this.setModified();
        node.remove();
      }
    }
  }]);

  return RemoveUnnecessaryOutputNodes;
}(TopDownOptimizer);
/**
 * Move parse nodes up to forks and merges them if possible.
 */

var MoveParseUp = /*#__PURE__*/function (_BottomUpOptimizer) {
  (0,inherits/* default */.Z)(MoveParseUp, _BottomUpOptimizer);

  var _super5 = optimizers_createSuper(MoveParseUp);

  function MoveParseUp() {
    (0,classCallCheck/* default */.Z)(this, MoveParseUp);

    return _super5.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MoveParseUp, [{
    key: "run",
    value: function run(node) {
      if (isDataSourceNode(node)) {
        return;
      }

      if (node.numChildren() > 1) {
        // Don't move parse further up but continue with parent.
        return;
      }

      var _iterator4 = optimizers_createForOfIteratorHelper(node.children),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;

          if (child instanceof ParseNode) {
            if (node instanceof ParseNode) {
              this.setModified();
              node.merge(child);
            } else {
              // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).
              if (fieldIntersection(node.producedFields(), child.dependentFields())) {
                continue;
              }

              this.setModified();
              child.swapWithParent();
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return;
    }
  }]);

  return MoveParseUp;
}(BottomUpOptimizer);
/**
 * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.
 *
 * We assume that dependent paths that do not have a parse node can be just merged.
 */

var MergeParse = /*#__PURE__*/function (_BottomUpOptimizer2) {
  (0,inherits/* default */.Z)(MergeParse, _BottomUpOptimizer2);

  var _super6 = optimizers_createSuper(MergeParse);

  function MergeParse() {
    (0,classCallCheck/* default */.Z)(this, MergeParse);

    return _super6.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MergeParse, [{
    key: "run",
    value: function run(node) {
      var originalChildren = (0,toConsumableArray/* default */.Z)(node.children);

      var parseChildren = node.children.filter(function (child) {
        return child instanceof ParseNode;
      });

      if (node.numChildren() > 1 && parseChildren.length >= 1) {
        var commonParse = {};
        var conflictingParse = new Set();

        var _iterator5 = optimizers_createForOfIteratorHelper(parseChildren),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var parseNode = _step5.value;
            var parse = parseNode.parse;

            var _iterator9 = optimizers_createForOfIteratorHelper(util_keys(parse)),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var k = _step9.value;

                if (!(k in commonParse)) {
                  commonParse[k] = parse[k];
                } else if (commonParse[k] !== parse[k]) {
                  conflictingParse.add(k);
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var _iterator6 = optimizers_createForOfIteratorHelper(conflictingParse),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var field = _step6.value;
            delete commonParse[field];
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        if (!isEmpty(commonParse)) {
          this.setModified();
          var mergedParseNode = new ParseNode(node, commonParse);

          var _iterator7 = optimizers_createForOfIteratorHelper(originalChildren),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var childNode = _step7.value;

              if (childNode instanceof ParseNode) {
                var _iterator8 = optimizers_createForOfIteratorHelper(util_keys(commonParse)),
                    _step8;

                try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                    var key = _step8.value;
                    delete childNode.parse[key];
                  }
                } catch (err) {
                  _iterator8.e(err);
                } finally {
                  _iterator8.f();
                }
              }

              node.removeChild(childNode);
              childNode.parent = mergedParseNode; // remove empty parse nodes

              if (childNode instanceof ParseNode && util_keys(childNode.parse).length === 0) {
                childNode.remove();
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        }
      }
    }
  }]);

  return MergeParse;
}(BottomUpOptimizer);
/**
 * Repeatedly remove leaf nodes that are not output or facet nodes.
 * The reason is that we don't need subtrees that don't have any output nodes.
 * Facet nodes are needed for the row or column domains.
 */

var RemoveUnusedSubtrees = /*#__PURE__*/function (_BottomUpOptimizer3) {
  (0,inherits/* default */.Z)(RemoveUnusedSubtrees, _BottomUpOptimizer3);

  var _super7 = optimizers_createSuper(RemoveUnusedSubtrees);

  function RemoveUnusedSubtrees() {
    (0,classCallCheck/* default */.Z)(this, RemoveUnusedSubtrees);

    return _super7.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(RemoveUnusedSubtrees, [{
    key: "run",
    value: function run(node) {
      if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {// no need to continue with parent because it is output node or will have children (there was a fork)
      } else if (node instanceof SourceNode) {// ignore empty unused sources as they will be removed in optimizationDataflowHelper
      } else {
        this.setModified();
        node.remove();
      }
    }
  }]);

  return RemoveUnusedSubtrees;
}(BottomUpOptimizer);
/**
 * Merge adjacent time unit nodes.
 */

var MergeTimeUnits = /*#__PURE__*/function (_BottomUpOptimizer4) {
  (0,inherits/* default */.Z)(MergeTimeUnits, _BottomUpOptimizer4);

  var _super8 = optimizers_createSuper(MergeTimeUnits);

  function MergeTimeUnits() {
    (0,classCallCheck/* default */.Z)(this, MergeTimeUnits);

    return _super8.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MergeTimeUnits, [{
    key: "run",
    value: function run(node) {
      var timeUnitChildren = node.children.filter(function (x) {
        return x instanceof TimeUnitNode;
      });
      var combination = timeUnitChildren.pop();

      var _iterator10 = optimizers_createForOfIteratorHelper(timeUnitChildren),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var timeUnit = _step10.value;
          this.setModified();
          combination.merge(timeUnit);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    }
  }]);

  return MergeTimeUnits;
}(BottomUpOptimizer);
var MergeAggregates = /*#__PURE__*/function (_BottomUpOptimizer5) {
  (0,inherits/* default */.Z)(MergeAggregates, _BottomUpOptimizer5);

  var _super9 = optimizers_createSuper(MergeAggregates);

  function MergeAggregates() {
    (0,classCallCheck/* default */.Z)(this, MergeAggregates);

    return _super9.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MergeAggregates, [{
    key: "run",
    value: function run(node) {
      var aggChildren = node.children.filter(function (child) {
        return child instanceof AggregateNode;
      }); // Object which we'll use to map the fields which an aggregate is grouped by to
      // the set of aggregates with that grouping. This is useful as only aggregates
      // with the same group by can be merged

      var groupedAggregates = {}; // Build groupedAggregates

      var _iterator11 = optimizers_createForOfIteratorHelper(aggChildren),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var agg = _step11.value;
          var groupBys = util_hash(agg.groupBy);

          if (!(groupBys in groupedAggregates)) {
            groupedAggregates[groupBys] = [];
          }

          groupedAggregates[groupBys].push(agg);
        } // Merge aggregateNodes with same key in groupedAggregates

      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      var _iterator12 = optimizers_createForOfIteratorHelper(util_keys(groupedAggregates)),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var group = _step12.value;
          var mergeableAggs = groupedAggregates[group];

          if (mergeableAggs.length > 1) {
            var mergedAggs = mergeableAggs.pop();

            var _iterator13 = optimizers_createForOfIteratorHelper(mergeableAggs),
                _step13;

            try {
              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                var _agg = _step13.value;

                if (mergedAggs.merge(_agg)) {
                  node.removeChild(_agg);
                  _agg.parent = mergedAggs;

                  _agg.remove();

                  this.setModified();
                }
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
    }
  }]);

  return MergeAggregates;
}(BottomUpOptimizer);
/**
 * Merge bin nodes and move them up through forks. Stop at filters, parse, identifier as we want them to stay before the bin node.
 */

var MergeBins = /*#__PURE__*/function (_BottomUpOptimizer6) {
  (0,inherits/* default */.Z)(MergeBins, _BottomUpOptimizer6);

  var _super10 = optimizers_createSuper(MergeBins);

  function MergeBins(model) {
    var _this2;

    (0,classCallCheck/* default */.Z)(this, MergeBins);

    _this2 = _super10.call(this);
    _this2.model = model;
    return _this2;
  }

  (0,createClass/* default */.Z)(MergeBins, [{
    key: "run",
    value: function run(node) {
      var moveBinsUp = !(isDataSourceNode(node) || node instanceof FilterNode || node instanceof ParseNode || node instanceof IdentifierNode);
      var promotableBins = [];
      var remainingBins = [];

      var _iterator14 = optimizers_createForOfIteratorHelper(node.children),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var child = _step14.value;

          if (child instanceof BinNode) {
            if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {
              promotableBins.push(child);
            } else {
              remainingBins.push(child);
            }
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }

      if (promotableBins.length > 0) {
        var promotedBin = promotableBins.pop();

        var _iterator15 = optimizers_createForOfIteratorHelper(promotableBins),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var bin = _step15.value;
            promotedBin.merge(bin, this.model.renameSignal.bind(this.model));
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        this.setModified();

        if (node instanceof BinNode) {
          node.merge(promotedBin, this.model.renameSignal.bind(this.model));
        } else {
          promotedBin.swapWithParent();
        }
      }

      if (remainingBins.length > 1) {
        var remainingBin = remainingBins.pop();

        var _iterator16 = optimizers_createForOfIteratorHelper(remainingBins),
            _step16;

        try {
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            var _bin = _step16.value;
            remainingBin.merge(_bin, this.model.renameSignal.bind(this.model));
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }

        this.setModified();
      }
    }
  }]);

  return MergeBins;
}(BottomUpOptimizer);
/**
 * This optimizer takes output nodes that are at a fork and moves them before the fork.
 *
 * The algorithm iterates over the children and tries to find the last output node in a chain of output nodes.
 * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)
 * are inserted after the main output node.
 */

var MergeOutputs = /*#__PURE__*/function (_BottomUpOptimizer7) {
  (0,inherits/* default */.Z)(MergeOutputs, _BottomUpOptimizer7);

  var _super11 = optimizers_createSuper(MergeOutputs);

  function MergeOutputs() {
    (0,classCallCheck/* default */.Z)(this, MergeOutputs);

    return _super11.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(MergeOutputs, [{
    key: "run",
    value: function run(node) {
      var children = (0,toConsumableArray/* default */.Z)(node.children);

      var hasOutputChild = some(children, function (child) {
        return child instanceof OutputNode;
      });

      if (!hasOutputChild || node.numChildren() <= 1) {
        return;
      }

      var otherChildren = []; // The output node we will connect all other nodes to.
      // Output nodes will be added before the new node, other nodes after.

      var mainOutput;

      var _iterator17 = optimizers_createForOfIteratorHelper(children),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var _child = _step17.value;

          if (_child instanceof OutputNode) {
            var lastOutput = _child;

            while (lastOutput.numChildren() === 1) {
              var _lastOutput$children = (0,slicedToArray/* default */.Z)(lastOutput.children, 1),
                  theChild = _lastOutput$children[0];

              if (theChild instanceof OutputNode) {
                lastOutput = theChild;
              } else {
                break;
              }
            }

            otherChildren.push.apply(otherChildren, (0,toConsumableArray/* default */.Z)(lastOutput.children));

            if (mainOutput) {
              // Move the output nodes before the mainOutput. We do this by setting
              // the parent of the first not to the parent of the main output and
              // the main output's parent to the last output.
              // note: the child is the first output
              node.removeChild(_child);
              _child.parent = mainOutput.parent;
              mainOutput.parent.removeChild(mainOutput);
              mainOutput.parent = lastOutput;
              this.setModified();
            } else {
              mainOutput = lastOutput;
            }
          } else {
            otherChildren.push(_child);
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }

      if (otherChildren.length) {
        this.setModified();

        var _iterator18 = optimizers_createForOfIteratorHelper(otherChildren),
            _step18;

        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var child = _step18.value;
            child.parent.removeChild(child);
            child.parent = mainOutput;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
      }
    }
  }]);

  return MergeOutputs;
}(BottomUpOptimizer);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/joinaggregate.js







function joinaggregate_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function joinaggregate_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { joinaggregate_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { joinaggregate_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function joinaggregate_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = joinaggregate_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function joinaggregate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return joinaggregate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return joinaggregate_arrayLikeToArray(o, minLen); }

function joinaggregate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function joinaggregate_createSuper(Derived) { var hasNativeReflectConstruct = joinaggregate_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function joinaggregate_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





/**
 * A class for the join aggregate transform nodes.
 */

var JoinAggregateTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(JoinAggregateTransformNode, _DataFlowNode);

  var _super = joinaggregate_createSuper(JoinAggregateTransformNode);

  function JoinAggregateTransformNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, JoinAggregateTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    return _this;
  }

  (0,createClass/* default */.Z)(JoinAggregateTransformNode, [{
    key: "clone",
    value: function clone() {
      return new JoinAggregateTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "addDimensions",
    value: function addDimensions(fields) {
      this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {
        return d;
      });
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var out = new Set();

      if (this.transform.groupby) {
        this.transform.groupby.forEach(out.add, out);
      }

      this.transform.joinaggregate.map(function (w) {
        return w.field;
      }).filter(function (f) {
        return f !== undefined;
      }).forEach(out.add, out);
      return out;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.joinaggregate.map(this.getDefaultName));
    }
  }, {
    key: "getDefaultName",
    value: function getDefaultName(joinAggregateFieldDef) {
      var _joinAggregateFieldDe;

      return (_joinAggregateFieldDe = joinAggregateFieldDef.as) !== null && _joinAggregateFieldDe !== void 0 ? _joinAggregateFieldDe : channeldef_vgField(joinAggregateFieldDef);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "JoinAggregateTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var fields = [];
      var ops = [];
      var as = [];

      var _iterator = joinaggregate_createForOfIteratorHelper(this.transform.joinaggregate),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var joinaggregate = _step.value;
          ops.push(joinaggregate.op);
          as.push(this.getDefaultName(joinaggregate));
          fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var groupby = this.transform.groupby;
      return joinaggregate_objectSpread({
        type: 'joinaggregate',
        as: as,
        ops: ops,
        fields: fields
      }, groupby !== undefined ? {
        groupby: groupby
      } : {});
    }
  }]);

  return JoinAggregateTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/stack.js







function data_stack_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = data_stack_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function data_stack_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return data_stack_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return data_stack_arrayLikeToArray(o, minLen); }

function data_stack_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function stack_createSuper(Derived) { var hasNativeReflectConstruct = stack_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function stack_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







function getStackByFields(model) {
  return model.stack.stackBy.reduce(function (fields, by) {
    var fieldDef = by.fieldDef;

    var _field = channeldef_vgField(fieldDef);

    if (_field) {
      fields.push(_field);
    }

    return fields;
  }, []);
}

function isValidAsArray(as) {
  return isArray(as) && as.every(function (s) {
    return isString(s);
  }) && as.length > 1;
}

var StackNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(StackNode, _DataFlowNode);

  var _super = stack_createSuper(StackNode);

  function StackNode(parent, stack) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, StackNode);

    _this = _super.call(this, parent);
    _this._stack = stack;
    return _this;
  }

  (0,createClass/* default */.Z)(StackNode, [{
    key: "clone",
    value: function clone() {
      return new StackNode(null, duplicate(this._stack));
    }
  }, {
    key: "stack",
    get: function get() {
      return this._stack;
    }
  }, {
    key: "addDimensions",
    value: function addDimensions(fields) {
      var _this$_stack$facetby;

      (_this$_stack$facetby = this._stack.facetby).push.apply(_this$_stack$facetby, (0,toConsumableArray/* default */.Z)(fields));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var out = new Set();
      out.add(this._stack.stackField);
      this.getGroupbyFields().forEach(out.add, out);

      this._stack.facetby.forEach(out.add, out);

      this._stack.sort.field.forEach(out.add, out);

      return out;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this._stack.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Stack ".concat(util_hash(this._stack));
    }
  }, {
    key: "getGroupbyFields",
    value: function getGroupbyFields() {
      var _this$_stack = this._stack,
          dimensionFieldDef = _this$_stack.dimensionFieldDef,
          impute = _this$_stack.impute,
          groupby = _this$_stack.groupby;

      if (dimensionFieldDef) {
        if (dimensionFieldDef.bin) {
          if (impute) {
            // For binned group by field with impute, we calculate bin_mid
            // as we cannot impute two fields simultaneously
            return [channeldef_vgField(dimensionFieldDef, {
              binSuffix: 'mid'
            })];
          }

          return [// For binned group by field without impute, we need both bin (start) and bin_end
          channeldef_vgField(dimensionFieldDef, {}), channeldef_vgField(dimensionFieldDef, {
            binSuffix: 'end'
          })];
        }

        return [channeldef_vgField(dimensionFieldDef)];
      }

      return groupby !== null && groupby !== void 0 ? groupby : [];
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var transform = [];
      var _this$_stack2 = this._stack,
          facetby = _this$_stack2.facetby,
          dimensionFieldDef = _this$_stack2.dimensionFieldDef,
          field = _this$_stack2.stackField,
          stackby = _this$_stack2.stackby,
          sort = _this$_stack2.sort,
          offset = _this$_stack2.offset,
          impute = _this$_stack2.impute,
          as = _this$_stack2.as; // Impute

      if (impute && dimensionFieldDef) {
        var _dimensionFieldDef$ba = dimensionFieldDef.bandPosition,
            bandPosition = _dimensionFieldDef$ba === void 0 ? 0.5 : _dimensionFieldDef$ba,
            bin = dimensionFieldDef.bin;

        if (bin) {
          // As we can only impute one field at a time, we need to calculate
          // mid point for a binned field
          transform.push({
            type: 'formula',
            expr: "".concat(bandPosition, "*") + channeldef_vgField(dimensionFieldDef, {
              expr: 'datum'
            }) + "+".concat(1 - bandPosition, "*") + channeldef_vgField(dimensionFieldDef, {
              expr: 'datum',
              binSuffix: 'end'
            }),
            as: channeldef_vgField(dimensionFieldDef, {
              binSuffix: 'mid',
              forAs: true
            })
          });
        }

        transform.push({
          type: 'impute',
          field: field,
          groupby: [].concat((0,toConsumableArray/* default */.Z)(stackby), (0,toConsumableArray/* default */.Z)(facetby)),
          key: channeldef_vgField(dimensionFieldDef, {
            binSuffix: 'mid'
          }),
          method: 'value',
          value: 0
        });
      } // Stack


      transform.push({
        type: 'stack',
        groupby: [].concat((0,toConsumableArray/* default */.Z)(this.getGroupbyFields()), (0,toConsumableArray/* default */.Z)(facetby)),
        field: field,
        sort: sort,
        as: as,
        offset: offset
      });
      return transform;
    }
  }], [{
    key: "makeFromTransform",
    value: function makeFromTransform(parent, stackTransform) {
      var stack = stackTransform.stack,
          groupby = stackTransform.groupby,
          as = stackTransform.as,
          _stackTransform$offse = stackTransform.offset,
          offset = _stackTransform$offse === void 0 ? 'zero' : _stackTransform$offse;
      var sortFields = [];
      var sortOrder = [];

      if (stackTransform.sort !== undefined) {
        var _iterator = data_stack_createForOfIteratorHelper(stackTransform.sort),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var sortField = _step.value;
            sortFields.push(sortField.field);
            sortOrder.push(getFirstDefined(sortField.order, 'ascending'));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var sort = {
        field: sortFields,
        order: sortOrder
      };
      var normalizedAs;

      if (isValidAsArray(as)) {
        normalizedAs = as;
      } else if (isString(as)) {
        normalizedAs = [as, "".concat(as, "_end")];
      } else {
        normalizedAs = ["".concat(stackTransform.stack, "_start"), "".concat(stackTransform.stack, "_end")];
      }

      return new StackNode(parent, {
        stackField: stack,
        groupby: groupby,
        offset: offset,
        sort: sort,
        facetby: [],
        as: normalizedAs
      });
    }
  }, {
    key: "makeFromEncoding",
    value: function makeFromEncoding(parent, model) {
      var stackProperties = model.stack;
      var encoding = model.encoding;

      if (!stackProperties) {
        return null;
      }

      var groupbyChannel = stackProperties.groupbyChannel,
          fieldChannel = stackProperties.fieldChannel,
          offset = stackProperties.offset,
          impute = stackProperties.impute;
      var dimensionFieldDef;

      if (groupbyChannel) {
        var cDef = encoding[groupbyChannel];
        dimensionFieldDef = getFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y
      }

      var stackby = getStackByFields(model);
      var orderDef = model.encoding.order;
      var sort;

      if (isArray(orderDef) || isFieldDef(orderDef)) {
        sort = sortParams(orderDef);
      } else {
        // default = descending by stackFields
        // FIXME is the default here correct for binned fields?
        sort = stackby.reduce(function (s, field) {
          s.field.push(field);
          s.order.push(fieldChannel === 'y' ? 'descending' : 'ascending');
          return s;
        }, {
          field: [],
          order: []
        });
      }

      return new StackNode(parent, {
        dimensionFieldDef: dimensionFieldDef,
        stackField: model.vgField(fieldChannel),
        facetby: [],
        stackby: stackby,
        sort: sort,
        offset: offset,
        impute: impute,
        as: [model.vgField(fieldChannel, {
          suffix: 'start',
          forAs: true
        }), model.vgField(fieldChannel, {
          suffix: 'end',
          forAs: true
        })]
      });
    }
  }]);

  return StackNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/window.js







function window_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function window_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { window_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { window_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function window_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = window_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function window_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return window_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return window_arrayLikeToArray(o, minLen); }

function window_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function window_createSuper(Derived) { var hasNativeReflectConstruct = window_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function window_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






/**
 * A class for the window transform nodes
 */

var WindowTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(WindowTransformNode, _DataFlowNode);

  var _super = window_createSuper(WindowTransformNode);

  function WindowTransformNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, WindowTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    return _this;
  }

  (0,createClass/* default */.Z)(WindowTransformNode, [{
    key: "clone",
    value: function clone() {
      return new WindowTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "addDimensions",
    value: function addDimensions(fields) {
      this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {
        return d;
      });
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group, _this$transform$sort;

      var out = new Set();
      ((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).forEach(out.add, out);
      ((_this$transform$sort = this.transform.sort) !== null && _this$transform$sort !== void 0 ? _this$transform$sort : []).forEach(function (m) {
        return out.add(m.field);
      });
      this.transform.window.map(function (w) {
        return w.field;
      }).filter(function (f) {
        return f !== undefined;
      }).forEach(out.add, out);
      return out;
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.window.map(this.getDefaultName));
    }
  }, {
    key: "getDefaultName",
    value: function getDefaultName(windowFieldDef) {
      var _windowFieldDef$as;

      return (_windowFieldDef$as = windowFieldDef.as) !== null && _windowFieldDef$as !== void 0 ? _windowFieldDef$as : channeldef_vgField(windowFieldDef);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "WindowTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var fields = [];
      var ops = [];
      var as = [];
      var params = [];

      var _iterator = window_createForOfIteratorHelper(this.transform.window),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var window = _step.value;
          ops.push(window.op);
          as.push(this.getDefaultName(window));
          params.push(window.param === undefined ? null : window.param);
          fields.push(window.field === undefined ? null : window.field);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var frame = this.transform.frame;
      var groupby = this.transform.groupby;

      if (frame && frame[0] === null && frame[1] === null && ops.every(function (o) {
        return isAggregateOp(o);
      })) {
        // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
        return window_objectSpread({
          type: 'joinaggregate',
          as: as,
          ops: ops,
          fields: fields
        }, groupby !== undefined ? {
          groupby: groupby
        } : {});
      }

      var sortFields = [];
      var sortOrder = [];

      if (this.transform.sort !== undefined) {
        var _iterator2 = window_createForOfIteratorHelper(this.transform.sort),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _sortField$order;

            var sortField = _step2.value;
            sortFields.push(sortField.field);
            sortOrder.push((_sortField$order = sortField.order) !== null && _sortField$order !== void 0 ? _sortField$order : 'ascending');
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      var sort = {
        field: sortFields,
        order: sortOrder
      };
      var ignorePeers = this.transform.ignorePeers;
      return window_objectSpread(window_objectSpread(window_objectSpread({
        type: 'window',
        params: params,
        as: as,
        ops: ops,
        fields: fields,
        sort: sort
      }, ignorePeers !== undefined ? {
        ignorePeers: ignorePeers
      } : {}), groupby !== undefined ? {
        groupby: groupby
      } : {}), frame !== undefined ? {
        frame: frame
      } : {});
    }
  }]);

  return WindowTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/subtree.js




function subtree_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = subtree_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function subtree_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return subtree_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return subtree_arrayLikeToArray(o, minLen); }

function subtree_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









/**
 * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
 */

function cloneSubtree(facet) {
  function clone(node) {
    if (!(node instanceof FacetNode)) {
      var copy = node.clone();

      if (copy instanceof OutputNode) {
        var newName = FACET_SCALE_PREFIX + copy.getSource();
        copy.setSource(newName);
        facet.model.component.data.outputNodes[newName] = copy;
      } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {
        copy.addDimensions(facet.fields);
      }

      var _iterator = subtree_createForOfIteratorHelper(node.children.flatMap(clone)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var n = _step.value;
          n.parent = copy;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return [copy];
    }

    return node.children.flatMap(clone);
  }

  return clone;
}
/**
 * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
 * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
 */


function moveFacetDown(node) {
  if (node instanceof FacetNode) {
    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
      // move down until we hit a fork or output node
      var child = node.children[0];

      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {
        child.addDimensions(node.fields);
      }

      child.swapWithParent();
      moveFacetDown(node);
    } else {
      // move main to facet
      var facetMain = node.model.component.data.main;
      moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node

      var cloner = cloneSubtree(node);
      var copy = node.children.map(cloner).flat();

      var _iterator2 = subtree_createForOfIteratorHelper(copy),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var c = _step2.value;
          c.parent = facetMain;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } else {
    node.children.map(moveFacetDown);
  }
}

function moveMainDownToFacet(node) {
  if (node instanceof OutputNode && node.type === DataSourceType.Main) {
    if (node.numChildren() === 1) {
      var child = node.children[0];

      if (!(child instanceof FacetNode)) {
        child.swapWithParent();
        moveMainDownToFacet(node);
      }
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/optimize.js
function optimize_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = optimize_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function optimize_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return optimize_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return optimize_arrayLikeToArray(o, minLen); }

function optimize_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var FACET_SCALE_PREFIX = 'scale_';
var MAX_OPTIMIZATION_RUNS = 5;
/**
 * Iterates over a dataflow graph and checks whether all links are consistent.
 */

function checkLinks(nodes) {
  var _iterator = optimize_createForOfIteratorHelper(nodes),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;

      var _iterator2 = optimize_createForOfIteratorHelper(node.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;

          if (child.parent !== node) {
            // log.error('Dataflow graph is inconsistent.', node, child);
            return false;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (!checkLinks(node.children)) {
        return false;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return true;
}
/**
 * Run the specified optimizer on the provided nodes.
 *
 * @param optimizer The optimizer instance to run.
 * @param nodes A set of nodes to optimize.
 */

function runOptimizer(optimizer, nodes) {
  var modified = false;

  var _iterator3 = optimize_createForOfIteratorHelper(nodes),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var node = _step3.value;
      modified = optimizer.optimize(node) || modified;
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return modified;
}

function optimizationDataflowHelper(dataComponent, model, firstPass) {
  var roots = dataComponent.sources;
  var modified = false;
  modified = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified;
  modified = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified; // remove source nodes that don't have any children because they also don't have output nodes

  roots = roots.filter(function (r) {
    return r.numChildren() > 0;
  });
  modified = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified;
  roots = roots.filter(function (r) {
    return r.numChildren() > 0;
  });

  if (!firstPass) {
    // Only run these optimizations after the optimizer has moved down the facet node.
    // With this change, we can be more aggressive in the optimizations.
    modified = runOptimizer(new MoveParseUp(), roots) || modified;
    modified = runOptimizer(new MergeBins(model), roots) || modified;
    modified = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified;
    modified = runOptimizer(new MergeParse(), roots) || modified;
    modified = runOptimizer(new MergeAggregates(), roots) || modified;
    modified = runOptimizer(new MergeTimeUnits(), roots) || modified;
    modified = runOptimizer(new MergeIdenticalNodes(), roots) || modified;
    modified = runOptimizer(new MergeOutputs(), roots) || modified;
  }

  dataComponent.sources = roots;
  return modified;
}
/**
 * Optimizes the dataflow of the passed in data component.
 */


function optimizeDataflow(data, model) {
  // check before optimizations
  checkLinks(data.sources);
  var firstPassCounter = 0;
  var secondPassCounter = 0;

  for (var i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
    if (!optimizationDataflowHelper(data, model, true)) {
      break;
    }

    firstPassCounter++;
  } // move facets down and make a copy of the subtree so that we can have scales at the top level


  data.sources.map(moveFacetDown);

  for (var _i = 0; _i < MAX_OPTIMIZATION_RUNS; _i++) {
    if (!optimizationDataflowHelper(data, model, false)) {
      break;
    }

    secondPassCounter++;
  } // check after optimizations


  checkLinks(data.sources);

  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
    log_warn("Maximum optimization runs(".concat(MAX_OPTIMIZATION_RUNS, ") reached."));
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/signal.js



/**
 * A class that behaves like a SignalRef but lazily generates the signal.
 * The provided generator function should use `Model.getSignalName` to use the correct signal name.
 */
var SignalRefWrapper = /*#__PURE__*/function () {
  function SignalRefWrapper(exprGenerator) {
    (0,classCallCheck/* default */.Z)(this, SignalRefWrapper);

    Object.defineProperty(this, 'signal', {
      enumerable: true,
      get: exprGenerator
    });
  }

  (0,createClass/* default */.Z)(SignalRefWrapper, null, [{
    key: "fromName",
    value: function fromName(rename, signalName) {
      return new SignalRefWrapper(function () {
        return rename(signalName);
      });
    }
  }]);

  return SignalRefWrapper;
}();
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/domain.js



var domain_excluded = ["sort"];

function domain_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function domain_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { domain_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { domain_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function domain_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = domain_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function domain_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return domain_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return domain_arrayLikeToArray(o, minLen); }

function domain_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



















function domain_parseScaleDomain(model) {
  if (isUnitModel(model)) {
    parseUnitScaleDomain(model);
  } else {
    parseNonUnitScaleDomain(model);
  }
}

function parseUnitScaleDomain(model) {
  var localScaleComponents = model.component.scales;

  var _iterator = domain_createForOfIteratorHelper(util_keys(localScaleComponents)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var domains = parseDomainForChannel(model, channel);
      var localScaleCmpt = localScaleComponents[channel];
      localScaleCmpt.setWithExplicit('domains', domains);
      parseSelectionDomain(model, channel);

      if (model.component.data.isFaceted) {
        // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
        var facetParent = model;

        while (!isFacetModel(facetParent) && facetParent.parent) {
          facetParent = facetParent.parent;
        }

        var resolve = facetParent.component.resolve.scale[channel];

        if (resolve === 'shared') {
          var _iterator2 = domain_createForOfIteratorHelper(domains.value),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var domain = _step2.value;

              // Replace the scale domain with data output from a cloned subtree after the facet.
              if (isDataRefDomain(domain)) {
                // use data from cloned subtree (which is the same as data but with a prefix added once)
                domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function parseNonUnitScaleDomain(model) {
  var _iterator3 = domain_createForOfIteratorHelper(model.children),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var child = _step3.value;
      domain_parseScaleDomain(child);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var localScaleComponents = model.component.scales;

  var _iterator4 = domain_createForOfIteratorHelper(util_keys(localScaleComponents)),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var channel = _step4.value;
      var domains = void 0;
      var selectionExtent = null;

      var _iterator5 = domain_createForOfIteratorHelper(model.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _child = _step5.value;
          var childComponent = _child.component.scales[channel];

          if (childComponent) {
            if (domains === undefined) {
              domains = childComponent.getWithExplicit('domains');
            } else {
              domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);
            }

            var se = childComponent.get('selectionExtent');

            if (selectionExtent && se && selectionExtent.param !== se.param) {
              log_warn(NEEDS_SAME_SELECTION);
            }

            selectionExtent = se;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      localScaleComponents[channel].setWithExplicit('domains', domains);

      if (selectionExtent) {
        localScaleComponents[channel].set('selectionExtent', selectionExtent, true);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}
/**
 * Remove unaggregated domain if it is not applicable
 * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
 */


function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
  if (domain === 'unaggregated') {
    var _canUseUnaggregatedDo = canUseUnaggregatedDomain(fieldDef, scaleType),
        valid = _canUseUnaggregatedDo.valid,
        reason = _canUseUnaggregatedDo.reason;

    if (!valid) {
      log_warn(reason);
      return undefined;
    }
  } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
    // Apply config if domain is not specified.
    var _canUseUnaggregatedDo2 = canUseUnaggregatedDomain(fieldDef, scaleType),
        _valid = _canUseUnaggregatedDo2.valid;

    if (_valid) {
      return 'unaggregated';
    }
  }

  return domain;
}

function parseDomainForChannel(model, channel) {
  var scaleType = model.getScaleComponent(channel).get('type');
  var encoding = model.encoding;
  var domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);

  if (domain !== model.scaleDomain(channel)) {
    model.specifiedScales[channel] = domain_objectSpread(domain_objectSpread({}, model.specifiedScales[channel]), {}, {
      domain: domain
    });
  } // If channel is either X or Y then union them with X2 & Y2 if they exist


  if (channel === 'x' && getFieldOrDatumDef(encoding.x2)) {
    if (getFieldOrDatumDef(encoding.x)) {
      return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType, domain, model, 'x2');
    }
  } else if (channel === 'y' && getFieldOrDatumDef(encoding.y2)) {
    if (getFieldOrDatumDef(encoding.y)) {
      return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType, domain, model, 'y2');
    }
  }

  return parseSingleChannelDomain(scaleType, domain, model, channel);
}

function mapDomainToDataSignal(domain, type, timeUnit) {
  return domain.map(function (v) {
    var data = valueExpr(v, {
      timeUnit: timeUnit,
      type: type
    });
    return {
      signal: "{data: ".concat(data, "}")
    };
  });
}

function convertDomainIfItIsDateTime(domain, type, timeUnit) {
  var _normalizeTimeUnit;

  // explicit value
  var normalizedTimeUnit = (_normalizeTimeUnit = normalizeTimeUnit(timeUnit)) === null || _normalizeTimeUnit === void 0 ? void 0 : _normalizeTimeUnit.unit;

  if (type === 'temporal' || normalizedTimeUnit) {
    return mapDomainToDataSignal(domain, type, normalizedTimeUnit);
  }

  return [domain]; // Date time won't make sense
}

function parseSingleChannelDomain(scaleType, domain, model, channel) {
  var encoding = model.encoding;
  var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
  var type = fieldOrDatumDef.type;
  var timeUnit = fieldOrDatumDef['timeUnit'];

  if (isDomainUnionWith(domain)) {
    var defaultDomain = parseSingleChannelDomain(scaleType, undefined, model, channel);
    var unionWith = convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);
    return makeExplicit([].concat((0,toConsumableArray/* default */.Z)(defaultDomain.value), (0,toConsumableArray/* default */.Z)(unionWith)));
  } else if (isSignalRef(domain)) {
    return makeExplicit([domain]);
  } else if (domain && domain !== 'unaggregated' && !isParameterDomain(domain)) {
    return makeExplicit(convertDomainIfItIsDateTime(domain, type, timeUnit));
  }

  var stack = model.stack;

  if (stack && channel === stack.fieldChannel) {
    if (stack.offset === 'normalize') {
      return makeImplicit([[0, 1]]);
    }

    var data = model.requestDataName(DataSourceType.Main);
    return makeImplicit([{
      data: data,
      field: model.vgField(channel, {
        suffix: 'start'
      })
    }, {
      data: data,
      field: model.vgField(channel, {
        suffix: 'end'
      })
    }]);
  }

  var sort = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType) : undefined;

  if (isDatumDef(fieldOrDatumDef)) {
    var d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type, timeUnit);
    return makeImplicit(d);
  }

  var fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef

  if (domain === 'unaggregated') {
    var _data = model.requestDataName(DataSourceType.Main);

    var field = fieldOrDatumDef.field;
    return makeImplicit([{
      data: _data,
      field: channeldef_vgField({
        field: field,
        aggregate: 'min'
      })
    }, {
      data: _data,
      field: channeldef_vgField({
        field: field,
        aggregate: 'max'
      })
    }]);
  } else if (isBinning(fieldDef.bin)) {
    if (hasDiscreteDomain(scaleType)) {
      if (scaleType === 'bin-ordinal') {
        // we can omit the domain as it is inferred from the `bins` property
        return makeImplicit([]);
      } // ordinal bin scale takes domain from bin_range, ordered by bin start
      // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).


      return makeImplicit([{
        // If sort by aggregation of a specified sort field, we need to use RAW table,
        // so we can aggregate values for the scale independently from the main aggregation.
        data: util_isBoolean(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),
        // Use range if we added it and the scale does not support computing a range as a signal.
        field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? {
          binSuffix: 'range'
        } : {}),
        // we have to use a sort object if sort = true to make the sort correct by bin start
        sort: sort === true || !isObject(sort) ? {
          field: model.vgField(channel, {}),
          op: 'min' // min or max doesn't matter since we sort by the start of the bin range

        } : sort
      }]);
    } else {
      // continuous scales
      var bin = fieldDef.bin;

      if (isBinning(bin)) {
        var binSignal = getBinSignalName(model, fieldDef.field, bin);
        return makeImplicit([new SignalRefWrapper(function () {
          var signal = model.getSignalName(binSignal);
          return "[".concat(signal, ".start, ").concat(signal, ".stop]");
        })]);
      } else {
        return makeImplicit([{
          data: model.requestDataName(DataSourceType.Main),
          field: model.vgField(channel, {})
        }]);
      }
    }
  } else if (fieldDef.timeUnit && util_contains(['time', 'utc'], scaleType) && hasBandEnd(fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.markDef, model.config)) {
    var _data2 = model.requestDataName(DataSourceType.Main);

    return makeImplicit([{
      data: _data2,
      field: model.vgField(channel)
    }, {
      data: _data2,
      field: model.vgField(channel, {
        suffix: 'end'
      })
    }]);
  } else if (sort) {
    return makeImplicit([{
      // If sort by aggregation of a specified sort field, we need to use RAW table,
      // so we can aggregate values for the scale independently from the main aggregation.
      data: util_isBoolean(sort) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),
      field: model.vgField(channel),
      sort: sort
    }]);
  } else {
    return makeImplicit([{
      data: model.requestDataName(DataSourceType.Main),
      field: model.vgField(channel)
    }]);
  }
}

function normalizeSortField(sort, isStackedMeasure) {
  var op = sort.op,
      field = sort.field,
      order = sort.order;
  return domain_objectSpread(domain_objectSpread({
    // Apply default op
    op: op !== null && op !== void 0 ? op : isStackedMeasure ? 'sum' : DEFAULT_SORT_OP
  }, field ? {
    field: replacePathInField(field)
  } : {}), order ? {
    order: order
  } : {});
}

function parseSelectionDomain(model, channel) {
  var _model$fieldDef;

  var scale = model.component.scales[channel];
  var spec = model.specifiedScales[channel].domain;
  var bin = (_model$fieldDef = model.fieldDef(channel)) === null || _model$fieldDef === void 0 ? void 0 : _model$fieldDef.bin;
  var domain = isParameterDomain(spec) && spec;
  var extent = isBinParams(bin) && isParameterExtent(bin.extent) && bin.extent;

  if (domain || extent) {
    // As scale parsing occurs before selection parsing, we cannot set
    // domainRaw directly. So instead, we store the selectionExtent on
    // the scale component, and then add domainRaw during scale assembly.
    scale.set('selectionExtent', domain !== null && domain !== void 0 ? domain : extent, true);
  }
}

function domainSort(model, channel, scaleType) {
  if (!hasDiscreteDomain(scaleType)) {
    return undefined;
  } // save to cast as the only exception is the geojson type for shape, which would not generate a scale


  var fieldDef = model.fieldDef(channel);
  var sort = fieldDef.sort; // if the sort is specified with array, use the derived sort index field

  if (isSortArray(sort)) {
    return {
      op: 'min',
      field: sortArrayIndexField(fieldDef, channel),
      order: 'ascending'
    };
  }

  var stack = model.stack;
  var stackDimensions = stack ? [].concat((0,toConsumableArray/* default */.Z)(stack.groupbyField ? [stack.groupbyField] : []), (0,toConsumableArray/* default */.Z)(stack.stackBy.map(function (s) {
    return s.fieldDef.field;
  }))) : undefined; // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)

  if (isSortField(sort)) {
    var isStackedMeasure = stack && !util_contains(stackDimensions, sort.field);
    return normalizeSortField(sort, isStackedMeasure);
  } else if (isSortByEncoding(sort)) {
    var encoding = sort.encoding,
        order = sort.order;
    var fieldDefToSortBy = model.fieldDef(encoding);
    var aggregate = fieldDefToSortBy.aggregate,
        field = fieldDefToSortBy.field;

    var _isStackedMeasure = stack && !util_contains(stackDimensions, field);

    if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
      return normalizeSortField({
        field: channeldef_vgField(fieldDefToSortBy),
        order: order
      }, _isStackedMeasure);
    } else if (isAggregateOp(aggregate) || !aggregate) {
      return normalizeSortField({
        op: aggregate,
        field: field,
        order: order
      }, _isStackedMeasure);
    }
  } else if (sort === 'descending') {
    return {
      op: 'min',
      field: model.vgField(channel),
      order: 'descending'
    };
  } else if (util_contains(['ascending', undefined
  /* default =ascending*/
  ], sort)) {
    return true;
  } // sort == null


  return undefined;
}
/**
 * Determine if a scale can use unaggregated domain.
 * @return {Boolean} Returns true if all of the following conditions apply:
 * 1. `scale.domain` is `unaggregated`
 * 2. Aggregation function is not `count` or `sum`
 * 3. The scale is quantitative or time scale.
 */

function canUseUnaggregatedDomain(fieldDef, scaleType) {
  var aggregate = fieldDef.aggregate,
      type = fieldDef.type;

  if (!aggregate) {
    return {
      valid: false,
      reason: unaggregateDomainHasNoEffectForRawField(fieldDef)
    };
  }

  if (isString(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {
    return {
      valid: false,
      reason: unaggregateDomainWithNonSharedDomainOp(aggregate)
    };
  }

  if (type === 'quantitative') {
    if (scaleType === 'log') {
      return {
        valid: false,
        reason: unaggregatedDomainWithLogScale(fieldDef)
      };
    }
  }

  return {
    valid: true
  };
}
/**
 * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.
 */

function domainsTieBreaker(v1, v2, property, propertyOf) {
  if (v1.explicit && v2.explicit) {
    log_warn(mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));
  } // If equal score, concat the domains so that we union them later.


  return {
    explicit: v1.explicit,
    value: [].concat((0,toConsumableArray/* default */.Z)(v1.value), (0,toConsumableArray/* default */.Z)(v2.value))
  };
}
/**
 * Converts an array of domains to a single Vega scale domain.
 */


function mergeDomains(domains) {
  var uniqueDomains = unique(domains.map(function (domain) {
    // ignore sort property when computing the unique domains
    if (isDataRefDomain(domain)) {
      var _s = domain.sort,
          domainWithoutSort = (0,objectWithoutProperties/* default */.Z)(domain, domain_excluded);

      return domainWithoutSort;
    }

    return domain;
  }), util_hash);
  var sorts = unique(domains.map(function (d) {
    if (isDataRefDomain(d)) {
      var s = d.sort;

      if (s !== undefined && !util_isBoolean(s)) {
        if ('op' in s && s.op === 'count') {
          // let's make sure that if op is count, we don't use a field
          delete s.field;
        }

        if (s.order === 'ascending') {
          // drop order: ascending as it is the default
          delete s.order;
        }
      }

      return s;
    }

    return undefined;
  }).filter(function (s) {
    return s !== undefined;
  }), util_hash);

  if (uniqueDomains.length === 0) {
    return undefined;
  } else if (uniqueDomains.length === 1) {
    var domain = domains[0];

    if (isDataRefDomain(domain) && sorts.length > 0) {
      var _sort = sorts[0];

      if (sorts.length > 1) {
        log_warn(MORE_THAN_ONE_SORT);
        _sort = true;
      } else {
        // Simplify domain sort by removing field and op when the field is the same as the domain field.
        if (isObject(_sort) && 'field' in _sort) {
          var sortField = _sort.field;

          if (domain.field === sortField) {
            _sort = _sort.order ? {
              order: _sort.order
            } : true;
          }
        }
      }

      return domain_objectSpread(domain_objectSpread({}, domain), {}, {
        sort: _sort
      });
    }

    return domain;
  } // only keep sort properties that work with unioned domains


  var unionDomainSorts = unique(sorts.map(function (s) {
    if (util_isBoolean(s) || !('op' in s) || isString(s.op) && s.op in MULTIDOMAIN_SORT_OP_INDEX) {
      return s;
    }

    log_warn(domainSortDropped(s));
    return true;
  }), util_hash);
  var sort;

  if (unionDomainSorts.length === 1) {
    sort = unionDomainSorts[0];
  } else if (unionDomainSorts.length > 1) {
    log_warn(MORE_THAN_ONE_SORT);
    sort = true;
  }

  var allData = unique(domains.map(function (d) {
    if (isDataRefDomain(d)) {
      return d.data;
    }

    return null;
  }), function (x) {
    return x;
  });

  if (allData.length === 1 && allData[0] !== null) {
    // create a union domain of different fields with a single data source
    var _domain = domain_objectSpread({
      data: allData[0],
      fields: uniqueDomains.map(function (d) {
        return d.field;
      })
    }, sort ? {
      sort: sort
    } : {});

    return _domain;
  }

  return domain_objectSpread({
    fields: uniqueDomains
  }, sort ? {
    sort: sort
  } : {});
}
/**
 * Return a field if a scale uses a single field.
 * Return `undefined` otherwise.
 */

function getFieldFromDomain(domain) {
  if (isDataRefDomain(domain) && isString(domain.field)) {
    return domain.field;
  } else if (isDataRefUnionedDomain(domain)) {
    var field;

    var _iterator6 = domain_createForOfIteratorHelper(domain.fields),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var nonUnionDomain = _step6.value;

        if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {
          if (!field) {
            field = nonUnionDomain.field;
          } else if (field !== nonUnionDomain.field) {
            log_warn(FACETED_INDEPENDENT_DIFFERENT_SOURCES);
            return field;
          }
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    log_warn(FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);
    return field;
  } else if (isFieldRefUnionDomain(domain)) {
    log_warn(FACETED_INDEPENDENT_SAME_SOURCE);
    var _field = domain.fields[0];
    return isString(_field) ? _field : undefined;
  }

  return undefined;
}
function assembleDomain(model, channel) {
  var scaleComponent = model.component.scales[channel];
  var domains = scaleComponent.get('domains').map(function (domain) {
    // Correct references to data as the original domain's data was determined
    // in parseScale, which happens before parseData. Thus the original data
    // reference can be incorrect.
    if (isDataRefDomain(domain)) {
      domain.data = model.lookupDataSource(domain.data);
    }

    return domain;
  }); // domains is an array that has to be merged into a single vega domain

  return mergeDomains(domains);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/assemble.js


var scale_assemble_excluded = ["name", "type", "selectionExtent", "domains", "range", "reverse"];

function scale_assemble_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function scale_assemble_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { scale_assemble_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { scale_assemble_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }








function assembleScales(model) {
  if (isLayerModel(model) || isConcatModel(model)) {
    // For concat and layer, include scales of children too
    return model.children.reduce(function (scales, child) {
      return scales.concat(assembleScales(child));
    }, assembleScalesForModel(model));
  } else {
    // For facet, child scales would not be included in the parent's scope.
    // For unit, there is no child.
    return assembleScalesForModel(model);
  }
}
function assembleScalesForModel(model) {
  return util_keys(model.component.scales).reduce(function (scales, channel) {
    var scaleComponent = model.component.scales[channel];

    if (scaleComponent.merged) {
      // Skipped merged scales
      return scales;
    }

    var scale = scaleComponent.combine();

    var name = scale.name,
        type = scale.type,
        selectionExtent = scale.selectionExtent,
        _d = scale.domains,
        _r = scale.range,
        reverse = scale.reverse,
        otherScaleProps = (0,objectWithoutProperties/* default */.Z)(scale, scale_assemble_excluded);

    var range = assembleScaleRange(scale.range, name, channel, model);
    var domain = assembleDomain(model, channel);
    var domainRaw = selectionExtent ? assembleSelectionScaleDomain(model, selectionExtent, scaleComponent, domain) : null;
    scales.push(scale_assemble_objectSpread(scale_assemble_objectSpread(scale_assemble_objectSpread(scale_assemble_objectSpread({
      name: name,
      type: type
    }, domain ? {
      domain: domain
    } : {}), domainRaw ? {
      domainRaw: domainRaw
    } : {}), {}, {
      range: range
    }, reverse !== undefined ? {
      reverse: reverse
    } : {}), otherScaleProps));
    return scales;
  }, []);
}
function assembleScaleRange(scaleRange, scaleName, channel, model) {
  // add signals to x/y range
  if (isXorY(channel)) {
    if (isVgRangeStep(scaleRange)) {
      // For width/height step, use a signal created in layout assemble instead of a constant step.
      return {
        step: {
          signal: "".concat(scaleName, "_step")
        }
      };
    }
  } else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {
    return scale_assemble_objectSpread(scale_assemble_objectSpread({}, scaleRange), {}, {
      data: model.lookupDataSource(scaleRange.data)
    });
  }

  return scaleRange;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/component.js






function scale_component_createSuper(Derived) { var hasNativeReflectConstruct = scale_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function scale_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ScaleComponent = /*#__PURE__*/function (_Split) {
  (0,inherits/* default */.Z)(ScaleComponent, _Split);

  var _super = scale_component_createSuper(ScaleComponent);

  function ScaleComponent(name, typeWithExplicit) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, ScaleComponent);

    _this = _super.call(this, {}, // no initial explicit property
    {
      name: name
    } // name as initial implicit property
    );
    _this.merged = false;

    _this.setWithExplicit('type', typeWithExplicit);

    return _this;
  }
  /**
   * Whether the scale definitely includes zero in the domain
   */


  (0,createClass/* default */.Z)(ScaleComponent, [{
    key: "domainDefinitelyIncludesZero",
    value: function domainDefinitelyIncludesZero() {
      if (this.get('zero') !== false) {
        return true;
      }

      return some(this.get('domains'), function (d) {
        return isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0;
      });
    }
  }]);

  return ScaleComponent;
}(Split);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/range.js


function range_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function range_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { range_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { range_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function range_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = range_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function range_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return range_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return range_arrayLikeToArray(o, minLen); }

function range_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
















var RANGE_PROPERTIES = ['range', 'scheme'];

function range_getSizeChannel(channel) {
  return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
}

function parseUnitScaleRange(model) {
  var localScaleComponents = model.component.scales; // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!

  var _iterator = range_createForOfIteratorHelper(SCALE_CHANNELS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var localScaleCmpt = localScaleComponents[channel];

      if (!localScaleCmpt) {
        continue;
      }

      var rangeWithExplicit = parseRangeForChannel(channel, model);
      localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function getBinStepSignal(model, channel) {
  var fieldDef = model.fieldDef(channel);

  if (fieldDef !== null && fieldDef !== void 0 && fieldDef.bin) {
    var bin = fieldDef.bin,
        field = fieldDef.field;
    var sizeType = range_getSizeChannel(channel);
    var sizeSignal = model.getName(sizeType);

    if (isObject(bin) && bin.binned && bin.step !== undefined) {
      return new SignalRefWrapper(function () {
        var scaleName = model.scaleName(channel);
        var binCount = "(domain(\"".concat(scaleName, "\")[1] - domain(\"").concat(scaleName, "\")[0]) / ").concat(bin.step);
        return "".concat(model.getSignalName(sizeSignal), " / (").concat(binCount, ")");
      });
    } else if (isBinning(bin)) {
      var binSignal = getBinSignalName(model, field, bin); // TODO: extract this to be range step signal

      return new SignalRefWrapper(function () {
        var updatedName = model.getSignalName(binSignal);
        var binCount = "(".concat(updatedName, ".stop - ").concat(updatedName, ".start) / ").concat(updatedName, ".step");
        return "".concat(model.getSignalName(sizeSignal), " / (").concat(binCount, ")");
      });
    }
  }

  return undefined;
}
/**
 * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).
 */


function parseRangeForChannel(channel, model) {
  var specifiedScale = model.specifiedScales[channel];
  var size = model.size;
  var mergedScaleCmpt = model.getScaleComponent(channel);
  var scaleType = mergedScaleCmpt.get('type'); // Check if any of the range properties is specified.
  // If so, check if it is compatible and make sure that we only output one of the properties

  var _iterator2 = range_createForOfIteratorHelper(RANGE_PROPERTIES),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var property = _step2.value;

      if (specifiedScale[property] !== undefined) {
        var supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
        var channelIncompatability = channelScalePropertyIncompatability(channel, property);

        if (!supportedByScaleType) {
          log_warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));
        } else if (channelIncompatability) {
          // channel
          log_warn(channelIncompatability);
        } else {
          switch (property) {
            case 'range':
              {
                var range = specifiedScale.range;

                if (isArray(range)) {
                  if (isXorY(channel)) {
                    return makeExplicit(range.map(function (v) {
                      if (v === 'width' || v === 'height') {
                        // get signal for width/height
                        // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.
                        var sizeSignal = model.getName(v);
                        var getSignalName = model.getSignalName.bind(model);
                        return SignalRefWrapper.fromName(getSignalName, sizeSignal);
                      }

                      return v;
                    }));
                  }
                } else if (isObject(range)) {
                  return makeExplicit({
                    data: model.requestDataName(DataSourceType.Main),
                    field: range.field,
                    sort: {
                      op: 'min',
                      field: model.vgField(channel)
                    }
                  });
                }

                return makeExplicit(range);
              }

            case 'scheme':
              return makeExplicit(parseScheme(specifiedScale[property]));
          }
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  if (channel === channel_X || channel === channel_Y) {
    var sizeChannel = channel === channel_X ? 'width' : 'height';
    var sizeValue = size[sizeChannel];

    if (isStep(sizeValue)) {
      if (hasDiscreteDomain(scaleType)) {
        return makeExplicit({
          step: sizeValue.step
        });
      } else {
        log_warn(stepDropped(sizeChannel));
      }
    }
  }

  var rangeMin = specifiedScale.rangeMin,
      rangeMax = specifiedScale.rangeMax;
  var d = defaultRange(channel, model);

  if ((rangeMin !== undefined || rangeMax !== undefined) && // it's ok to check just rangeMin's compatibility since rangeMin/rangeMax are the same
  scaleTypeSupportProperty(scaleType, 'rangeMin') && isArray(d) && d.length === 2) {
    return makeExplicit([rangeMin !== null && rangeMin !== void 0 ? rangeMin : d[0], rangeMax !== null && rangeMax !== void 0 ? rangeMax : d[1]]);
  }

  return makeImplicit(d);
}

function parseScheme(scheme) {
  if (isExtendedScheme(scheme)) {
    return range_objectSpread({
      scheme: scheme.name
    }, omit(scheme, ['name']));
  }

  return {
    scheme: scheme
  };
}

function defaultRange(channel, model) {
  var size = model.size,
      config = model.config,
      mark = model.mark,
      encoding = model.encoding;
  var getSignalName = model.getSignalName.bind(model);

  var _getFieldOrDatumDef = getFieldOrDatumDef(encoding[channel]),
      type = _getFieldOrDatumDef.type;

  var mergedScaleCmpt = model.getScaleComponent(channel);
  var scaleType = mergedScaleCmpt.get('type');
  var _model$specifiedScale = model.specifiedScales[channel],
      domain = _model$specifiedScale.domain,
      domainMid = _model$specifiedScale.domainMid;

  switch (channel) {
    case channel_X:
    case channel_Y:
      {
        // If there is no explicit width/height for discrete x/y scales
        if (util_contains(['point', 'band'], scaleType)) {
          if (channel === channel_X && !size.width) {
            var w = getViewConfigDiscreteSize(config.view, 'width');

            if (isStep(w)) {
              return w;
            }
          } else if (channel === channel_Y && !size.height) {
            var h = getViewConfigDiscreteSize(config.view, 'height');

            if (isStep(h)) {
              return h;
            }
          }
        } // If step is null, use zero to width or height.
        // Note that we use SignalRefWrapper to account for potential merges and renames.


        var sizeType = range_getSizeChannel(channel);
        var sizeSignal = model.getName(sizeType);

        if (channel === channel_Y && hasContinuousDomain(scaleType)) {
          // For y continuous scale, we have to start from the height as the bottom part has the max value.
          return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
        } else {
          return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
        }
      }

    case channel_SIZE:
      {
        // TODO: support custom rangeMin, rangeMax
        var zero = model.component.scales[channel].get('zero');
        var rangeMin = sizeRangeMin(mark, zero, config);
        var rangeMax = sizeRangeMax(mark, size, model, config);

        if (isContinuousToDiscrete(scaleType)) {
          return range_interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));
        } else {
          return [rangeMin, rangeMax];
        }
      }

    case THETA:
      return [0, Math.PI * 2];

    case ANGLE:
      // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.
      // (It's weird to add just config.scale.min/maxAngleDegree for now)
      return [0, 360];

    case RADIUS:
      {
        // max radius = half od min(width,height)
        return [0, new SignalRefWrapper(function () {
          var w = model.getSignalName('width');
          var h = model.getSignalName('height');
          return "min(".concat(w, ",").concat(h, ")/2");
        })];
      }

    case STROKEWIDTH:
      // TODO: support custom rangeMin, rangeMax
      return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];

    case STROKEDASH:
      return [// TODO: add this to Vega's config.range?
      [1, 0], [4, 2], [2, 1], [1, 1], [1, 2, 4, 2]];

    case SHAPE:
      return 'symbol';

    case COLOR:
    case FILL:
    case STROKE:
      if (scaleType === 'ordinal') {
        // Only nominal data uses ordinal scale by default
        return type === 'nominal' ? 'category' : 'ordinal';
      } else {
        if (domainMid !== undefined) {
          return 'diverging';
        } else {
          return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
        }
      }

    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
      // TODO: support custom rangeMin, rangeMax
      return [config.scale.minOpacity, config.scale.maxOpacity];
  }
  /* istanbul ignore next: should never reach here */


  throw new Error("Scale range undefined for channel ".concat(channel));
}

function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {
  switch (scaleType) {
    case 'quantile':
      return config.scale.quantileCount;

    case 'quantize':
      return config.scale.quantizeCount;

    case 'threshold':
      if (domain !== undefined && isArray(domain)) {
        return domain.length + 1;
      } else {
        log_warn(domainRequiredForThresholdScale(channel)); // default threshold boundaries for threshold scale since domain has cardinality of 2

        return 3;
      }

  }
}
/**
 * Returns the linear interpolation of the range according to the cardinality
 *
 * @param rangeMin start of the range
 * @param rangeMax end of the range
 * @param cardinality number of values in the output range
 */

function range_interpolateRange(rangeMin, rangeMax, cardinality) {
  // always return a signal since it's better to compute the sequence in Vega later
  var f = function f() {
    var rMax = signalOrStringValue(rangeMax);
    var rMin = signalOrStringValue(rangeMin);
    var step = "(".concat(rMax, " - ").concat(rMin, ") / (").concat(cardinality, " - 1)");
    return "sequence(".concat(rMin, ", ").concat(rMax, " + ").concat(step, ", ").concat(step, ")");
  };

  if (isSignalRef(rangeMax)) {
    return new SignalRefWrapper(f);
  } else {
    return {
      signal: f()
    };
  }
}

function sizeRangeMin(mark, zero, config) {
  if (zero) {
    if (isSignalRef(zero)) {
      return {
        signal: "".concat(zero.signal, " ? 0 : ").concat(sizeRangeMin(mark, false, config))
      };
    } else {
      return 0;
    }
  }

  switch (mark) {
    case 'bar':
    case 'tick':
      return config.scale.minBandSize;

    case 'line':
    case 'trail':
    case 'rule':
      return config.scale.minStrokeWidth;

    case 'text':
      return config.scale.minFontSize;

    case 'point':
    case 'square':
    case 'circle':
      return config.scale.minSize;
  }
  /* istanbul ignore next: should never reach here */
  // sizeRangeMin not implemented for the mark


  throw new Error(incompatibleChannel('size', mark));
}

var MAX_SIZE_RANGE_STEP_RATIO = 0.95;

function sizeRangeMax(mark, size, model, config) {
  var xyStepSignals = {
    x: getBinStepSignal(model, 'x'),
    y: getBinStepSignal(model, 'y')
  };

  switch (mark) {
    case 'bar':
    case 'tick':
      {
        if (config.scale.maxBandSize !== undefined) {
          return config.scale.maxBandSize;
        }

        var min = minXYStep(size, xyStepSignals, config.view);

        if (isNumber(min)) {
          return min - 1;
        } else {
          return new SignalRefWrapper(function () {
            return "".concat(min.signal, " - 1");
          });
        }
      }

    case 'line':
    case 'trail':
    case 'rule':
      return config.scale.maxStrokeWidth;

    case 'text':
      return config.scale.maxFontSize;

    case 'point':
    case 'square':
    case 'circle':
      {
        if (config.scale.maxSize) {
          return config.scale.maxSize;
        }

        var pointStep = minXYStep(size, xyStepSignals, config.view);

        if (isNumber(pointStep)) {
          return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
        } else {
          return new SignalRefWrapper(function () {
            return "pow(".concat(MAX_SIZE_RANGE_STEP_RATIO, " * ").concat(pointStep.signal, ", 2)");
          });
        }
      }
  }
  /* istanbul ignore next: should never reach here */
  // sizeRangeMax not implemented for the mark


  throw new Error(incompatibleChannel('size', mark));
}
/**
 * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
 */


function minXYStep(size, xyStepSignals, viewConfig) {
  var widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');
  var heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');

  if (xyStepSignals.x || xyStepSignals.y) {
    return new SignalRefWrapper(function () {
      var exprs = [xyStepSignals.x ? xyStepSignals.x.signal : widthStep, xyStepSignals.y ? xyStepSignals.y.signal : heightStep];
      return "min(".concat(exprs.join(', '), ")");
    });
  }

  return Math.min(widthStep, heightStep);
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/properties.js


function properties_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = properties_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function properties_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return properties_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return properties_arrayLikeToArray(o, minLen); }

function properties_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
















function parseScaleProperty(model, property) {
  if (isUnitModel(model)) {
    parseUnitScaleProperty(model, property);
  } else {
    parseNonUnitScaleProperty(model, property);
  }
}

function parseUnitScaleProperty(model, property) {
  var localScaleComponents = model.component.scales;
  var config = model.config,
      encoding = model.encoding,
      markDef = model.markDef,
      specifiedScales = model.specifiedScales;

  var _iterator = properties_createForOfIteratorHelper(util_keys(localScaleComponents)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var specifiedScale = specifiedScales[channel];
      var localScaleCmpt = localScaleComponents[channel];
      var mergedScaleCmpt = model.getScaleComponent(channel);
      var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      var specifiedValue = specifiedScale[property];
      var scaleType = mergedScaleCmpt.get('type');
      var scalePadding = mergedScaleCmpt.get('padding');
      var scalePaddingInner = mergedScaleCmpt.get('paddingInner');
      var supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
      var channelIncompatability = channelScalePropertyIncompatability(channel, property);

      if (specifiedValue !== undefined) {
        // If there is a specified value, check if it is compatible with scale type and channel
        if (!supportedByScaleType) {
          log_warn(scalePropertyNotWorkWithScaleType(scaleType, property, channel));
        } else if (channelIncompatability) {
          // channel
          log_warn(channelIncompatability);
        }
      }

      if (supportedByScaleType && channelIncompatability === undefined) {
        if (specifiedValue !== undefined) {
          var timeUnit = fieldOrDatumDef['timeUnit'];
          var type = fieldOrDatumDef.type;

          switch (property) {
            // domainMax/Min to signal if the value is a datetime object
            case 'domainMax':
            case 'domainMin':
              if (isDateTime(specifiedScale[property]) || type === 'temporal' || timeUnit) {
                localScaleCmpt.set(property, {
                  signal: valueExpr(specifiedScale[property], {
                    type: type,
                    timeUnit: timeUnit
                  })
                }, true);
              } else {
                localScaleCmpt.set(property, specifiedScale[property], true);
              }

              break;

            default:
              localScaleCmpt.copyKeyFromObject(property, specifiedScale);
          }
        } else {
          var value = property in scaleRules ? scaleRules[property]({
            model: model,
            channel: channel,
            fieldOrDatumDef: fieldOrDatumDef,
            scaleType: scaleType,
            scalePadding: scalePadding,
            scalePaddingInner: scalePaddingInner,
            domain: specifiedScale.domain,
            markDef: markDef,
            config: config
          }) : config.scale[property];

          if (value !== undefined) {
            localScaleCmpt.set(property, value, false);
          }
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

var scaleRules = {
  bins: function bins(_ref) {
    var model = _ref.model,
        fieldOrDatumDef = _ref.fieldOrDatumDef;
    return isFieldDef(fieldOrDatumDef) ? _bins(model, fieldOrDatumDef) : undefined;
  },
  interpolate: function interpolate(_ref2) {
    var channel = _ref2.channel,
        fieldOrDatumDef = _ref2.fieldOrDatumDef;
    return _interpolate(channel, fieldOrDatumDef.type);
  },
  nice: function nice(_ref3) {
    var scaleType = _ref3.scaleType,
        channel = _ref3.channel,
        domain = _ref3.domain,
        fieldOrDatumDef = _ref3.fieldOrDatumDef;
    return _nice(scaleType, channel, domain, fieldOrDatumDef);
  },
  padding: function padding(_ref4) {
    var channel = _ref4.channel,
        scaleType = _ref4.scaleType,
        fieldOrDatumDef = _ref4.fieldOrDatumDef,
        markDef = _ref4.markDef,
        config = _ref4.config;
    return properties_padding(channel, scaleType, config.scale, fieldOrDatumDef, markDef, config.bar);
  },
  paddingInner: function paddingInner(_ref5) {
    var scalePadding = _ref5.scalePadding,
        channel = _ref5.channel,
        markDef = _ref5.markDef,
        config = _ref5.config;
    return _paddingInner(scalePadding, channel, markDef.type, config.scale);
  },
  paddingOuter: function paddingOuter(_ref6) {
    var scalePadding = _ref6.scalePadding,
        channel = _ref6.channel,
        scaleType = _ref6.scaleType,
        markDef = _ref6.markDef,
        scalePaddingInner = _ref6.scalePaddingInner,
        config = _ref6.config;
    return _paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, config.scale);
  },
  reverse: function reverse(_ref7) {
    var fieldOrDatumDef = _ref7.fieldOrDatumDef,
        scaleType = _ref7.scaleType,
        channel = _ref7.channel,
        config = _ref7.config;
    var sort = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;
    return _reverse(scaleType, sort, channel, config.scale);
  },
  zero: function zero(_ref8) {
    var channel = _ref8.channel,
        fieldOrDatumDef = _ref8.fieldOrDatumDef,
        domain = _ref8.domain,
        markDef = _ref8.markDef,
        scaleType = _ref8.scaleType;
    return _zero(channel, fieldOrDatumDef, domain, markDef, scaleType);
  }
}; // This method is here rather than in range.ts to avoid circular dependency.

function properties_parseScaleRange(model) {
  if (isUnitModel(model)) {
    parseUnitScaleRange(model);
  } else {
    parseNonUnitScaleProperty(model, 'range');
  }
}
function parseNonUnitScaleProperty(model, property) {
  var localScaleComponents = model.component.scales;

  var _iterator2 = properties_createForOfIteratorHelper(model.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var child = _step2.value;

      if (property === 'range') {
        properties_parseScaleRange(child);
      } else {
        parseScaleProperty(child, property);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = properties_createForOfIteratorHelper(util_keys(localScaleComponents)),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var channel = _step3.value;
      var valueWithExplicit = void 0;

      var _iterator4 = properties_createForOfIteratorHelper(model.children),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _child = _step4.value;
          var childComponent = _child.component.scales[channel];

          if (childComponent) {
            var childValueWithExplicit = childComponent.getWithExplicit(property);
            valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing(function (v1, v2) {
              switch (property) {
                case 'range':
                  // For step, prefer larger step
                  if (v1.step && v2.step) {
                    return v1.step - v2.step;
                  }

                  return 0;
                // TODO: precedence rule for other properties
              }

              return 0;
            }));
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}

function _bins(model, fieldDef) {
  var bin = fieldDef.bin;

  if (isBinning(bin)) {
    var binSignal = getBinSignalName(model, fieldDef.field, bin);
    return new SignalRefWrapper(function () {
      return model.getSignalName(binSignal);
    });
  } else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {
    // start and stop will be determined from the scale domain
    return {
      step: bin.step
    };
  }

  return undefined;
}



function _interpolate(channel, type) {
  if (util_contains([COLOR, FILL, STROKE], channel) && type !== 'nominal') {
    return 'hcl';
  }

  return undefined;
}



function _nice(scaleType, channel, specifiedDomain, fieldOrDatumDef) {
  var _getFieldDef;

  if ((_getFieldDef = getFieldDef(fieldOrDatumDef)) !== null && _getFieldDef !== void 0 && _getFieldDef.bin || isArray(specifiedDomain) || util_contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {
    return undefined;
  }

  return channel in POSITION_SCALE_CHANNEL_INDEX ? true : undefined;
}



function properties_padding(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
  if (channel in POSITION_SCALE_CHANNEL_INDEX) {
    if (isContinuousToContinuous(scaleType)) {
      if (scaleConfig.continuousPadding !== undefined) {
        return scaleConfig.continuousPadding;
      }

      var type = markDef.type,
          orient = markDef.orient;

      if (type === 'bar' && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
        if (orient === 'vertical' && channel === 'x' || orient === 'horizontal' && channel === 'y') {
          return barConfig.continuousBandSize;
        }
      }
    }

    if (scaleType === ScaleType.POINT) {
      return scaleConfig.pointPadding;
    }
  }

  return undefined;
}



function _paddingInner(paddingValue, channel, mark, scaleConfig) {
  if (paddingValue !== undefined) {
    // If user has already manually specified "padding", no need to add default paddingInner.
    return undefined;
  }

  if (channel in POSITION_SCALE_CHANNEL_INDEX) {
    // Padding is only set for X and Y by default.
    // Basically it doesn't make sense to add padding for color and size.
    // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
    var bandPaddingInner = scaleConfig.bandPaddingInner,
        barBandPaddingInner = scaleConfig.barBandPaddingInner,
        rectBandPaddingInner = scaleConfig.rectBandPaddingInner;
    return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);
  }

  return undefined;
}



function _paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
  if (paddingValue !== undefined) {
    // If user has already manually specified "padding", no need to add default paddingOuter.
    return undefined;
  }

  if (channel in POSITION_SCALE_CHANNEL_INDEX) {
    // Padding is only set for X and Y by default.
    // Basically it doesn't make sense to add padding for color and size.
    if (scaleType === ScaleType.BAND) {
      var bandPaddingOuter = scaleConfig.bandPaddingOuter;
      return getFirstDefined(bandPaddingOuter,
      /* By default, paddingOuter is paddingInner / 2. The reason is that
        size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
        and we want the width/height to be integer by default.
        Note that step (by default) and cardinality are integers.) */
      isSignalRef(paddingInnerValue) ? {
        signal: "".concat(paddingInnerValue.signal, "/2")
      } : paddingInnerValue / 2);
    }
  }

  return undefined;
}



function _reverse(scaleType, sort, channel, scaleConfig) {
  if (channel === 'x' && scaleConfig.xReverse !== undefined) {
    if (hasContinuousDomain(scaleType) && sort === 'descending') {
      if (isSignalRef(scaleConfig.xReverse)) {
        return {
          signal: "!".concat(scaleConfig.xReverse.signal)
        };
      } else {
        return !scaleConfig.xReverse;
      }
    }

    return scaleConfig.xReverse;
  }

  if (hasContinuousDomain(scaleType) && sort === 'descending') {
    // For continuous domain scales, Vega does not support domain sort.
    // Thus, we reverse range instead if sort is descending
    return true;
  }

  return undefined;
}



function _zero(channel, fieldDef, specifiedDomain, markDef, scaleType) {
  // If users explicitly provide a domain, we should not augment zero as that will be unexpected.
  var hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';

  if (hasCustomDomain) {
    if (hasContinuousDomain(scaleType)) {
      if (isArray(specifiedDomain)) {
        var first = specifiedDomain[0];
        var last = specifiedDomain[specifiedDomain.length - 1];

        if (first <= 0 && last >= 0) {
          // if the domain includes zero, make zero remains true
          return true;
        }
      }

      return false;
    }
  } // If there is no custom domain, return true only for the following cases:
  // 1) using quantitative field with size
  // While this can be either ratio or interval fields, our assumption is that
  // ratio are more common. However, if the scaleType is discretizing scale, we want to return
  // false so that range doesn't start at zero


  if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {
    return true;
  } // 2) non-binned, quantitative x-scale or y-scale
  // (For binning, we should not include zero by default because binning are calculated without zero.)


  if (!(isFieldDef(fieldDef) && fieldDef.bin) && util_contains([].concat((0,toConsumableArray/* default */.Z)(POSITION_SCALE_CHANNELS), (0,toConsumableArray/* default */.Z)(POLAR_POSITION_SCALE_CHANNELS)), channel)) {
    var orient = markDef.orient,
        type = markDef.type;

    if (util_contains(['bar', 'area', 'line', 'trail'], type)) {
      if (orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x') {
        return false;
      }
    }

    return true;
  }

  return false;
}


;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/type.js









/**
 * Determine if there is a specified scale type and if it is appropriate,
 * or determine default type if type is unspecified or inappropriate.
 */
// NOTE: CompassQL uses this method.

function scaleType(specifiedScale, channel, fieldDef, mark) {
  var defaultScaleType = type_defaultType(channel, fieldDef, mark);
  var type = specifiedScale.type;

  if (!isScaleChannel(channel)) {
    // There is no scale for these channels
    return null;
  }

  if (type !== undefined) {
    // Check if explicitly specified scale type is supported by the channel
    if (!channelSupportScaleType(channel, type)) {
      log_warn(scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
      return defaultScaleType;
    } // Check if explicitly specified scale type is supported by the data type


    if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type, fieldDef.type)) {
      log_warn(scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
      return defaultScaleType;
    }

    return type;
  }

  return defaultScaleType;
}
/**
 * Determine appropriate default scale type.
 */
// NOTE: Voyager uses this method.

function type_defaultType(channel, fieldDef, mark) {
  switch (fieldDef.type) {
    case 'nominal':
    case 'ordinal':
      {
        var _fieldDef$axis;

        if (isColorChannel(channel) || rangeType(channel) === 'discrete') {
          if (channel === 'shape' && fieldDef.type === 'ordinal') {
            log_warn(discreteChannelCannotEncode(channel, 'ordinal'));
          }

          return 'ordinal';
        }

        if (channel in POSITION_SCALE_CHANNEL_INDEX) {
          if (util_contains(['rect', 'bar', 'image', 'rule'], mark.type)) {
            // The rect/bar mark should fit into a band.
            // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
            return 'band';
          }
        } else if (mark.type === 'arc' && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {
          return 'band';
        }

        var dimensionSize = mark[getSizeChannel(channel)];

        if (isRelativeBandSize(dimensionSize)) {
          return 'band';
        }

        if (isPositionFieldOrDatumDef(fieldDef) && (_fieldDef$axis = fieldDef.axis) !== null && _fieldDef$axis !== void 0 && _fieldDef$axis.tickBand) {
          return 'band';
        } // Otherwise, use ordinal point scale so we can easily get center positions of the marks.


        return 'point';
      }

    case 'temporal':
      if (isColorChannel(channel)) {
        return 'time';
      } else if (rangeType(channel) === 'discrete') {
        log_warn(discreteChannelCannotEncode(channel, 'temporal')); // TODO: consider using quantize (equivalent to binning) once we have it

        return 'ordinal';
      } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {
        return 'utc';
      }

      return 'time';

    case 'quantitative':
      if (isColorChannel(channel)) {
        if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
          return 'bin-ordinal';
        }

        return 'linear';
      } else if (rangeType(channel) === 'discrete') {
        log_warn(discreteChannelCannotEncode(channel, 'quantitative')); // TODO: consider using quantize (equivalent to binning) once we have it

        return 'ordinal';
      }

      return 'linear';

    case 'geojson':
      return undefined;
  }
  /* istanbul ignore next: should never reach this */


  throw new Error(invalidFieldType(fieldDef.type));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/scale/parse.js
function scale_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = scale_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function scale_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scale_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scale_parse_arrayLikeToArray(o, minLen); }

function scale_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }














function parseScales(model) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      ignoreRange = _ref.ignoreRange;

  parseScaleCore(model);
  domain_parseScaleDomain(model);

  var _iterator = scale_parse_createForOfIteratorHelper(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var prop = _step.value;
      parseScaleProperty(model, prop);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (!ignoreRange) {
    // range depends on zero
    properties_parseScaleRange(model);
  }
}
function parseScaleCore(model) {
  if (isUnitModel(model)) {
    model.component.scales = parseUnitScaleCore(model);
  } else {
    model.component.scales = parseNonUnitScaleCore(model);
  }
}
/**
 * Parse scales for all channels of a model.
 */

function parseUnitScaleCore(model) {
  var encoding = model.encoding,
      mark = model.mark,
      markDef = model.markDef;
  return SCALE_CHANNELS.reduce(function (scaleComponents, channel) {
    var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]); // must be typed def to have scale
    // Don't generate scale for shape of geoshape

    if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {
      return scaleComponents;
    }

    var specifiedScale = fieldOrDatumDef && fieldOrDatumDef['scale'];

    if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
      var _specifiedScale;

      (_specifiedScale = specifiedScale) !== null && _specifiedScale !== void 0 ? _specifiedScale : specifiedScale = {};
      var sType = scaleType(specifiedScale, channel, fieldOrDatumDef, markDef);
      scaleComponents[channel] = new ScaleComponent(model.scaleName("".concat(channel), true), {
        value: sType,
        explicit: specifiedScale.type === sType
      });
    }

    return scaleComponents;
  }, {});
}

var scaleTypeTieBreaker = tieBreakByComparing(function (st1, st2) {
  return scaleTypePrecedence(st1) - scaleTypePrecedence(st2);
});

function parseNonUnitScaleCore(model) {
  var _a;

  var scaleComponents = model.component.scales = {};
  var scaleTypeWithExplicitIndex = {};
  var resolve = model.component.resolve; // Parse each child scale and determine if a particular channel can be merged.

  var _iterator2 = scale_parse_createForOfIteratorHelper(model.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var child = _step2.value;
      parseScaleCore(child); // Instead of always merging right away -- check if it is compatible to merge first!

      var _iterator4 = scale_parse_createForOfIteratorHelper(util_keys(child.component.scales)),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _a$channel;

          var channel = _step4.value;
          // if resolve is undefined, set default first
          (_a$channel = (_a = resolve.scale)[channel]) !== null && _a$channel !== void 0 ? _a$channel : _a[channel] = defaultScaleResolve(channel, model);

          if (resolve.scale[channel] === 'shared') {
            var explicitScaleType = scaleTypeWithExplicitIndex[channel];
            var childScaleType = child.component.scales[channel].getWithExplicit('type');

            if (explicitScaleType) {
              if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
                // merge scale component if type are compatible
                scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
              } else {
                // Otherwise, update conflicting channel to be independent
                resolve.scale[channel] = 'independent'; // Remove from the index so they don't get merged

                delete scaleTypeWithExplicitIndex[channel];
              }
            } else {
              scaleTypeWithExplicitIndex[channel] = childScaleType;
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    } // Merge each channel listed in the index

  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _iterator3 = scale_parse_createForOfIteratorHelper(util_keys(scaleTypeWithExplicitIndex)),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _channel = _step3.value;
      // Create new merged scale component
      var name = model.scaleName(_channel, true);
      var typeWithExplicit = scaleTypeWithExplicitIndex[_channel];
      scaleComponents[_channel] = new ScaleComponent(name, typeWithExplicit); // rename each child and mark them as merged

      var _iterator5 = scale_parse_createForOfIteratorHelper(model.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _child = _step5.value;
          var childScale = _child.component.scales[_channel];

          if (childScale) {
            _child.renameScale(childScale.get('name'), name);

            childScale.merged = true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return scaleComponents;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/model.js







var model_excluded = ["style"],
    model_excluded2 = ["spacing"],
    model_excluded3 = ["encoding"];

function model_createSuper(Derived) { var hasNativeReflectConstruct = model_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function model_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function model_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = model_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function model_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return model_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return model_arrayLikeToArray(o, minLen); }

function model_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function model_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function model_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { model_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { model_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




























var NameMap = /*#__PURE__*/function () {
  function NameMap() {
    (0,classCallCheck/* default */.Z)(this, NameMap);

    this.nameMap = {};
  }

  (0,createClass/* default */.Z)(NameMap, [{
    key: "rename",
    value: function rename(oldName, newName) {
      this.nameMap[oldName] = newName;
    }
  }, {
    key: "has",
    value: function has(name) {
      return this.nameMap[name] !== undefined;
    }
  }, {
    key: "get",
    value: function get(name) {
      // If the name appears in the _nameMap, we need to read its new name.
      // We have to loop over the dict just in case the new name also gets renamed.
      while (this.nameMap[name] && name !== this.nameMap[name]) {
        name = this.nameMap[name];
      }

      return name;
    }
  }]);

  return NameMap;
}();
/*
  We use type guards instead of `instanceof` as `instanceof` makes
  different parts of the compiler depend on the actual implementation of
  the model classes, which in turn depend on different parts of the compiler.
  Thus, `instanceof` leads to circular dependency problems.

  On the other hand, type guards only make different parts of the compiler
  depend on the type of the model classes, but not the actual implementation.
*/

function isUnitModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === 'unit';
}
function isFacetModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === 'facet';
}
function isConcatModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === 'concat';
}
function isLayerModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === 'layer';
}
var Model = /*#__PURE__*/function () {
  function Model(spec, type, parent, parentGivenName, config, resolve, view) {
    var _this = this,
        _spec$name,
        _spec$transform;

    (0,classCallCheck/* default */.Z)(this, Model);

    this.type = type;
    this.parent = parent;
    this.config = config;
    /**
     * Corrects the data references in marks after assemble.
     */

    this.correctDataNames = function (mark) {
      // TODO: make this correct
      // for normal data references
      if (mark.from && mark.from.data) {
        mark.from.data = _this.lookupDataSource(mark.from.data);
      } // for access to facet data


      if (mark.from && mark.from.facet && mark.from.facet.data) {
        mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);
      }

      return mark;
    };

    this.parent = parent;
    this.config = config;
    this.view = replaceExprRef(view); // If name is not provided, always use parent's givenName to avoid name conflicts.

    this.name = (_spec$name = spec.name) !== null && _spec$name !== void 0 ? _spec$name : parentGivenName;
    this.title = isText(spec.title) ? {
      text: spec.title
    } : spec.title ? replaceExprRef(spec.title) : undefined; // Shared name maps

    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
    this.data = spec.data;
    this.description = spec.description;
    this.transforms = normalizeTransform((_spec$transform = spec.transform) !== null && _spec$transform !== void 0 ? _spec$transform : []);
    this.layout = type === 'layer' || type === 'unit' ? {} : extractCompositionLayout(spec, type, config);
    this.component = {
      data: {
        sources: parent ? parent.component.data.sources : [],
        outputNodes: parent ? parent.component.data.outputNodes : {},
        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
        // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
        isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined
      },
      layoutSize: new Split(),
      layoutHeaders: {
        row: {},
        column: {},
        facet: {}
      },
      mark: null,
      resolve: model_objectSpread({
        scale: {},
        axis: {},
        legend: {}
      }, resolve ? duplicate(resolve) : {}),
      selection: null,
      scales: null,
      projection: null,
      axes: {},
      legends: {}
    };
  }

  (0,createClass/* default */.Z)(Model, [{
    key: "width",
    get: function get() {
      return this.getSizeSignalRef('width');
    }
  }, {
    key: "height",
    get: function get() {
      return this.getSizeSignalRef('height');
    }
  }, {
    key: "parse",
    value: function parse() {
      this.parseScale();
      this.parseLayoutSize(); // depends on scale

      this.renameTopLevelLayoutSizeSignal();
      this.parseSelections();
      this.parseProjection();
      this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.

      this.parseAxesAndHeaders(); // depends on scale and layout size

      this.parseLegends(); // depends on scale, markDef

      this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
    }
  }, {
    key: "parseScale",
    value: function parseScale() {
      parseScales(this);
    }
  }, {
    key: "parseProjection",
    value: function parseProjection() {
      parse_parseProjection(this);
    }
    /**
     * Rename top-level spec's size to be just width / height, ignoring model name.
     * This essentially merges the top-level spec's width/height signals with the width/height signals
     * to help us reduce redundant signals declaration.
     */

  }, {
    key: "renameTopLevelLayoutSizeSignal",
    value: function renameTopLevelLayoutSizeSignal() {
      if (this.getName('width') !== 'width') {
        this.renameSignal(this.getName('width'), 'width');
      }

      if (this.getName('height') !== 'height') {
        this.renameSignal(this.getName('height'), 'height');
      }
    }
  }, {
    key: "parseLegends",
    value: function parseLegends() {
      parse_parseLegend(this);
    }
  }, {
    key: "assembleGroupStyle",
    value: function assembleGroupStyle() {
      if (this.type === 'unit' || this.type === 'layer') {
        var _this$view$style, _this$view;

        return (_this$view$style = (_this$view = this.view) === null || _this$view === void 0 ? void 0 : _this$view.style) !== null && _this$view$style !== void 0 ? _this$view$style : 'cell';
      }

      return undefined;
    }
  }, {
    key: "assembleEncodeFromView",
    value: function assembleEncodeFromView(view) {
      // Exclude "style"
      var _ = view.style,
          baseView = (0,objectWithoutProperties/* default */.Z)(view, model_excluded);

      var e = {};

      var _iterator = model_createForOfIteratorHelper(util_keys(baseView)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          var value = baseView[property];

          if (value !== undefined) {
            e[property] = signalOrValueRef(value);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return e;
    }
  }, {
    key: "assembleGroupEncodeEntry",
    value: function assembleGroupEncodeEntry(isTopLevel) {
      var encodeEntry = {};

      if (this.view) {
        encodeEntry = this.assembleEncodeFromView(this.view);
      }

      if (!isTopLevel) {
        // Descriptions are already added to the top-level description so we only need to add them to the inner views.
        if (this.description) {
          encodeEntry['description'] = signalOrValueRef(this.description);
        } // For top-level spec, we can set the global width and height signal to adjust the group size.
        // For other child specs, we have to manually set width and height in the encode entry.


        if (this.type === 'unit' || this.type === 'layer') {
          var _encodeEntry;

          return model_objectSpread({
            width: this.getSizeSignalRef('width'),
            height: this.getSizeSignalRef('height')
          }, (_encodeEntry = encodeEntry) !== null && _encodeEntry !== void 0 ? _encodeEntry : {});
        }
      }

      return isEmpty(encodeEntry) ? undefined : encodeEntry;
    }
  }, {
    key: "assembleLayout",
    value: function assembleLayout() {
      if (!this.layout) {
        return undefined;
      }

      var _this$layout = this.layout,
          spacing = _this$layout.spacing,
          layout = (0,objectWithoutProperties/* default */.Z)(_this$layout, model_excluded2);

      var component = this.component,
          config = this.config;
      var titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);
      return model_objectSpread(model_objectSpread(model_objectSpread({
        padding: spacing
      }, this.assembleDefaultLayout()), layout), titleBand ? {
        titleBand: titleBand
      } : {});
    }
  }, {
    key: "assembleDefaultLayout",
    value: function assembleDefaultLayout() {
      return {};
    }
  }, {
    key: "assembleHeaderMarks",
    value: function assembleHeaderMarks() {
      var layoutHeaders = this.component.layoutHeaders;
      var headerMarks = [];

      var _iterator2 = model_createForOfIteratorHelper(FACET_CHANNELS),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channel = _step2.value;

          if (layoutHeaders[channel].title) {
            headerMarks.push(assembleTitleGroup(this, channel));
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = model_createForOfIteratorHelper(HEADER_CHANNELS),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _channel = _step3.value;
          headerMarks = headerMarks.concat(assembleHeaderGroups(this, _channel));
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return headerMarks;
    }
  }, {
    key: "assembleAxes",
    value: function assembleAxes() {
      return assemble_assembleAxes(this.component.axes, this.config);
    }
  }, {
    key: "assembleLegends",
    value: function assembleLegends() {
      return assemble_assembleLegends(this);
    }
  }, {
    key: "assembleProjections",
    value: function assembleProjections() {
      return assemble_assembleProjections(this);
    }
  }, {
    key: "assembleTitle",
    value: function assembleTitle() {
      var _this$title;

      var _ref = (_this$title = this.title) !== null && _this$title !== void 0 ? _this$title : {},
          encoding = _ref.encoding,
          titleNoEncoding = (0,objectWithoutProperties/* default */.Z)(_ref, model_excluded3);

      var title = model_objectSpread(model_objectSpread(model_objectSpread({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), encoding ? {
        encode: {
          update: encoding
        }
      } : {});

      if (title.text) {
        if (util_contains(['unit', 'layer'], this.type)) {
          // Unit/Layer
          if (util_contains(['middle', undefined], title.anchor)) {
            var _title$frame;

            (_title$frame = title.frame) !== null && _title$frame !== void 0 ? _title$frame : title.frame = 'group';
          }
        } else {
          var _title$anchor;

          // composition with Vega layout
          // Set title = "start" by default for composition as "middle" does not look nice
          // https://github.com/vega/vega/issues/960#issuecomment-471360328
          (_title$anchor = title.anchor) !== null && _title$anchor !== void 0 ? _title$anchor : title.anchor = 'start';
        }

        return isEmpty(title) ? undefined : title;
      }

      return undefined;
    }
    /**
     * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
     */

  }, {
    key: "assembleGroup",
    value: function assembleGroup() {
      var signals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var group = {};
      signals = signals.concat(this.assembleSignals());

      if (signals.length > 0) {
        group.signals = signals;
      }

      var layout = this.assembleLayout();

      if (layout) {
        group.layout = layout;
      }

      group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.
      // (Otherwise, it will be merged with upper-level's scope.)

      var scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];

      if (scales.length > 0) {
        group.scales = scales;
      }

      var axes = this.assembleAxes();

      if (axes.length > 0) {
        group.axes = axes;
      }

      var legends = this.assembleLegends();

      if (legends.length > 0) {
        group.legends = legends;
      }

      return group;
    }
  }, {
    key: "getName",
    value: function getName(text) {
      return varName((this.name ? "".concat(this.name, "_") : '') + text);
    }
  }, {
    key: "getDataName",
    value: function getDataName(type) {
      return this.getName(DataSourceType[type].toLowerCase());
    }
    /**
     * Request a data source name for the given data source type and mark that data source as required.
     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
     * You can lookup the correct dataset name in assemble with `lookupDataSource`.
     */

  }, {
    key: "requestDataName",
    value: function requestDataName(name) {
      var fullName = this.getDataName(name); // Increase ref count. This is critical because otherwise we won't create a data source.
      // We also increase the ref counts on OutputNode.getSource() calls.

      var refCounts = this.component.data.outputNodeRefCounts;
      refCounts[fullName] = (refCounts[fullName] || 0) + 1;
      return fullName;
    }
  }, {
    key: "getSizeSignalRef",
    value: function getSizeSignalRef(layoutSizeType) {
      if (isFacetModel(this.parent)) {
        var sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
        var channel = getPositionScaleChannel(sizeType);
        var scaleComponent = this.component.scales[channel];

        if (scaleComponent && !scaleComponent.merged) {
          // independent scale
          var type = scaleComponent.get('type');
          var range = scaleComponent.get('range');

          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
            var scaleName = scaleComponent.get('name');
            var domain = assembleDomain(this, channel);
            var field = getFieldFromDomain(domain);

            if (field) {
              var fieldRef = channeldef_vgField({
                aggregate: 'distinct',
                field: field
              }, {
                expr: 'datum'
              });

              return {
                signal: sizeExpr(scaleName, scaleComponent, fieldRef)
              };
            } else {
              log_warn(unknownField(channel));
              return null;
            }
          }
        }
      }

      return {
        signal: this.signalNameMap.get(this.getName(layoutSizeType))
      };
    }
    /**
     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
     */

  }, {
    key: "lookupDataSource",
    value: function lookupDataSource(name) {
      var node = this.component.data.outputNodes[name];

      if (!node) {
        // Name not found in map so let's just return what we got.
        // This can happen if we already have the correct name.
        return name;
      }

      return node.getSource();
    }
  }, {
    key: "getSignalName",
    value: function getSignalName(oldSignalName) {
      return this.signalNameMap.get(oldSignalName);
    }
  }, {
    key: "renameSignal",
    value: function renameSignal(oldName, newName) {
      this.signalNameMap.rename(oldName, newName);
    }
  }, {
    key: "renameScale",
    value: function renameScale(oldName, newName) {
      this.scaleNameMap.rename(oldName, newName);
    }
  }, {
    key: "renameProjection",
    value: function renameProjection(oldName, newName) {
      this.projectionNameMap.rename(oldName, newName);
    }
    /**
     * @return scale name for a given channel after the scale has been parsed and named.
     */

  }, {
    key: "scaleName",
    value: function scaleName(originalScaleName, parse) {
      if (parse) {
        // During the parse phase always return a value
        // No need to refer to rename map because a scale can't be renamed
        // before it has the original name.
        return this.getName(originalScaleName);
      } // If there is a scale for the channel, it should either
      // be in the scale component or exist in the name map


      if ( // If there is a scale for the channel, there should be a local scale component for it
      isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)
      this.scaleNameMap.has(this.getName(originalScaleName))) {
        return this.scaleNameMap.get(this.getName(originalScaleName));
      }

      return undefined;
    }
    /**
     * @return projection name after the projection has been parsed and named.
     */

  }, {
    key: "projectionName",
    value: function projectionName(parse) {
      if (parse) {
        // During the parse phase always return a value
        // No need to refer to rename map because a projection can't be renamed
        // before it has the original name.
        return this.getName('projection');
      }

      if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {
        return this.projectionNameMap.get(this.getName('projection'));
      }

      return undefined;
    }
    /**
     * Traverse a model's hierarchy to get the scale component for a particular channel.
     */

  }, {
    key: "getScaleComponent",
    value: function getScaleComponent(channel) {
      /* istanbul ignore next: This is warning for debugging test */
      if (!this.component.scales) {
        throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');
      }

      var localScaleComponent = this.component.scales[channel];

      if (localScaleComponent && !localScaleComponent.merged) {
        return localScaleComponent;
      }

      return this.parent ? this.parent.getScaleComponent(channel) : undefined;
    }
    /**
     * Traverse a model's hierarchy to get a particular selection component.
     */

  }, {
    key: "getSelectionComponent",
    value: function getSelectionComponent(variableName, origName) {
      var sel = this.component.selection[variableName];

      if (!sel && this.parent) {
        sel = this.parent.getSelectionComponent(variableName, origName);
      }

      if (!sel) {
        throw new Error(selectionNotFound(origName));
      }

      return sel;
    }
    /**
     * Returns true if the model has a signalRef for an axis orient.
     */

  }, {
    key: "hasAxisOrientSignalRef",
    value: function hasAxisOrientSignalRef() {
      var _this$component$axes$, _this$component$axes$2;

      return ((_this$component$axes$ = this.component.axes.x) === null || _this$component$axes$ === void 0 ? void 0 : _this$component$axes$.some(function (a) {
        return a.hasOrientSignalRef();
      })) || ((_this$component$axes$2 = this.component.axes.y) === null || _this$component$axes$2 === void 0 ? void 0 : _this$component$axes$2.some(function (a) {
        return a.hasOrientSignalRef();
      }));
    }
  }]);

  return Model;
}();
/** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */

var ModelWithField = /*#__PURE__*/function (_Model) {
  (0,inherits/* default */.Z)(ModelWithField, _Model);

  var _super = model_createSuper(ModelWithField);

  function ModelWithField() {
    (0,classCallCheck/* default */.Z)(this, ModelWithField);

    return _super.apply(this, arguments);
  }

  (0,createClass/* default */.Z)(ModelWithField, [{
    key: "vgField",
    value:
    /** Get "field" reference for Vega */
    function vgField(channel) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var fieldDef = this.fieldDef(channel);

      if (!fieldDef) {
        return undefined;
      }

      return channeldef_vgField(fieldDef, opt);
    }
  }, {
    key: "reduceFieldDef",
    value: function reduceFieldDef(f, init) {
      return reduce(this.getMapping(), function (acc, cd, c) {
        var fieldDef = getFieldDef(cd);

        if (fieldDef) {
          return f(acc, fieldDef, c);
        }

        return acc;
      }, init);
    }
  }, {
    key: "forEachFieldDef",
    value: function forEachFieldDef(f, t) {
      forEach(this.getMapping(), function (cd, c) {
        var fieldDef = getFieldDef(cd);

        if (fieldDef) {
          f(fieldDef, c);
        }
      }, t);
    }
  }]);

  return ModelWithField;
}(Model);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/density.js








var density_excluded = ["density"];

function density_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function density_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { density_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { density_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function density_createSuper(Derived) { var hasNativeReflectConstruct = density_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function density_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for density transform nodes
 */

var DensityTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(DensityTransformNode, _DataFlowNode);

  var _super = density_createSuper(DensityTransformNode);

  function DensityTransformNode(parent, transform) {
    var _this$transform$as, _specifiedAs$, _specifiedAs$2;

    var _this;

    (0,classCallCheck/* default */.Z)(this, DensityTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var specifiedAs = (_this$transform$as = _this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];
    _this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'value', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'density'];
    return _this;
  }

  (0,createClass/* default */.Z)(DensityTransformNode, [{
    key: "clone",
    value: function clone() {
      return new DensityTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group;

      return new Set([this.transform.density].concat((0,toConsumableArray/* default */.Z)((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "DensityTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          density = _this$transform.density,
          rest = (0,objectWithoutProperties/* default */.Z)(_this$transform, density_excluded);

      var result = density_objectSpread({
        type: 'kde',
        field: density
      }, rest);

      return result;
    }
  }]);

  return DensityTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/filterinvalid.js







function filterinvalid_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function filterinvalid_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { filterinvalid_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { filterinvalid_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function filterinvalid_createSuper(Derived) { var hasNativeReflectConstruct = filterinvalid_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function filterinvalid_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var FilterInvalidNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(FilterInvalidNode, _DataFlowNode);

  var _super = filterinvalid_createSuper(FilterInvalidNode);

  function FilterInvalidNode(parent, filter) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, FilterInvalidNode);

    _this = _super.call(this, parent);
    _this.filter = filter;
    return _this;
  }

  (0,createClass/* default */.Z)(FilterInvalidNode, [{
    key: "clone",
    value: function clone() {
      return new FilterInvalidNode(null, filterinvalid_objectSpread({}, this.filter));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(util_keys(this.filter));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(); // filter does not produce any new fields
    }
  }, {
    key: "hash",
    value: function hash() {
      return "FilterInvalid ".concat(util_hash(this.filter));
    }
    /**
     * Create the VgTransforms for each of the filtered fields.
     */

  }, {
    key: "assemble",
    value: function assemble() {
      var _this2 = this;

      var filters = util_keys(this.filter).reduce(function (vegaFilters, field) {
        var fieldDef = _this2.filter[field];
        var ref = channeldef_vgField(fieldDef, {
          expr: 'datum'
        });

        if (fieldDef !== null) {
          if (fieldDef.type === 'temporal') {
            vegaFilters.push("(isDate(".concat(ref, ") || (isValid(").concat(ref, ") && isFinite(+").concat(ref, ")))"));
          } else if (fieldDef.type === 'quantitative') {
            vegaFilters.push("isValid(".concat(ref, ")"));
            vegaFilters.push("isFinite(+".concat(ref, ")"));
          } else {// should never get here
          }
        }

        return vegaFilters;
      }, []);
      return filters.length > 0 ? {
        type: 'filter',
        expr: filters.join(' && ')
      } : null;
    }
  }], [{
    key: "make",
    value: function make(parent, model) {
      var config = model.config,
          mark = model.mark,
          markDef = model.markDef;
      var invalid = getMarkPropOrConfig('invalid', markDef, config);

      if (invalid !== 'filter') {
        return null;
      }

      var filter = model.reduceFieldDef(function (aggregator, fieldDef, channel) {
        var scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);

        if (scaleComponent) {
          var scaleType = scaleComponent.get('type'); // While discrete domain scales can handle invalid values, continuous scales can't.
          // Thus, for non-path marks, we have to filter null for scales with continuous domains.
          // (For path marks, we will use "defined" property and skip these values instead.)

          if (hasContinuousDomain(scaleType) && fieldDef.aggregate !== 'count' && !isPathMark(mark)) {
            aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def
          }
        }

        return aggregator;
      }, {});

      if (!util_keys(filter).length) {
        return null;
      }

      return new FilterInvalidNode(parent, filter);
    }
  }]);

  return FilterInvalidNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/flatten.js






function flatten_createSuper(Derived) { var hasNativeReflectConstruct = flatten_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function flatten_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for flatten transform nodes
 */

var FlattenTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(FlattenTransformNode, _DataFlowNode);

  var _super = flatten_createSuper(FlattenTransformNode);

  function FlattenTransformNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, FlattenTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var _this$transform = _this.transform,
        flatten = _this$transform.flatten,
        _this$transform$as = _this$transform.as,
        as = _this$transform$as === void 0 ? [] : _this$transform$as;
    _this.transform.as = flatten.map(function (f, i) {
      var _as$i;

      return (_as$i = as[i]) !== null && _as$i !== void 0 ? _as$i : f;
    });
    return _this;
  }

  (0,createClass/* default */.Z)(FlattenTransformNode, [{
    key: "clone",
    value: function clone() {
      return new FlattenTransformNode(this.parent, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(this.transform.flatten);
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "FlattenTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform2 = this.transform,
          fields = _this$transform2.flatten,
          as = _this$transform2.as;
      var result = {
        type: 'flatten',
        fields: fields,
        as: as
      };
      return result;
    }
  }]);

  return FlattenTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/fold.js






function fold_createSuper(Derived) { var hasNativeReflectConstruct = fold_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function fold_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for flatten transform nodes
 */

var FoldTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(FoldTransformNode, _DataFlowNode);

  var _super = fold_createSuper(FoldTransformNode);

  function FoldTransformNode(parent, transform) {
    var _this$transform$as, _specifiedAs$, _specifiedAs$2;

    var _this;

    (0,classCallCheck/* default */.Z)(this, FoldTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var specifiedAs = (_this$transform$as = _this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];
    _this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'key', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];
    return _this;
  }

  (0,createClass/* default */.Z)(FoldTransformNode, [{
    key: "clone",
    value: function clone() {
      return new FoldTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(this.transform.fold);
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "FoldTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          fold = _this$transform.fold,
          as = _this$transform.as;
      var result = {
        type: 'fold',
        fields: fold,
        as: as
      };
      return result;
    }
  }]);

  return FoldTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/geojson.js








function geojson_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function geojson_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { geojson_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { geojson_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function geojson_createSuper(Derived) { var hasNativeReflectConstruct = geojson_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function geojson_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var GeoJSONNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(GeoJSONNode, _DataFlowNode);

  var _super = geojson_createSuper(GeoJSONNode);

  function GeoJSONNode(parent, fields, geojson, signal) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, GeoJSONNode);

    _this = _super.call(this, parent);
    _this.fields = fields;
    _this.geojson = geojson;
    _this.signal = signal;
    return _this;
  }

  (0,createClass/* default */.Z)(GeoJSONNode, [{
    key: "clone",
    value: function clone() {
      return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$fields;

      var fields = ((_this$fields = this.fields) !== null && _this$fields !== void 0 ? _this$fields : []).filter(isString);
      return new Set([].concat((0,toConsumableArray/* default */.Z)(this.geojson ? [this.geojson] : []), (0,toConsumableArray/* default */.Z)(fields)));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set();
    }
  }, {
    key: "hash",
    value: function hash() {
      return "GeoJSON ".concat(this.geojson, " ").concat(this.signal, " ").concat(util_hash(this.fields));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return [].concat((0,toConsumableArray/* default */.Z)(this.geojson ? [{
        type: 'filter',
        expr: "isValid(datum[\"".concat(this.geojson, "\"])")
      }] : []), [geojson_objectSpread(geojson_objectSpread(geojson_objectSpread({
        type: 'geojson'
      }, this.fields ? {
        fields: this.fields
      } : {}), this.geojson ? {
        geojson: this.geojson
      } : {}), {}, {
        signal: this.signal
      })]);
    }
  }], [{
    key: "parseAll",
    value: function parseAll(parent, model) {
      if (model.component.projection && !model.component.projection.isFit) {
        return parent;
      }

      var geoJsonCounter = 0;

      for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
        var coordinates = _arr[_i];
        var pair = coordinates.map(function (channel) {
          var def = getFieldOrDatumDef(model.encoding[channel]);
          return isFieldDef(def) ? def.field : isDatumDef(def) ? {
            expr: "".concat(def.datum)
          } : isValueDef(def) ? {
            expr: "".concat(def['value'])
          } : undefined;
        });

        if (pair[0] || pair[1]) {
          parent = new GeoJSONNode(parent, pair, null, model.getName("geojson_".concat(geoJsonCounter++)));
        }
      }

      if (model.channelHasField(SHAPE)) {
        var fieldDef = model.typedFieldDef(SHAPE);

        if (fieldDef.type === GEOJSON) {
          parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName("geojson_".concat(geoJsonCounter++)));
        }
      }

      return parent;
    }
  }]);

  return GeoJSONNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/geopoint.js






function geopoint_createSuper(Derived) { var hasNativeReflectConstruct = geopoint_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function geopoint_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var GeoPointNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(GeoPointNode, _DataFlowNode);

  var _super = geopoint_createSuper(GeoPointNode);

  function GeoPointNode(parent, projection, fields, as) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, GeoPointNode);

    _this = _super.call(this, parent);
    _this.projection = projection;
    _this.fields = fields;
    _this.as = as;
    return _this;
  }

  (0,createClass/* default */.Z)(GeoPointNode, [{
    key: "clone",
    value: function clone() {
      return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set(this.fields.filter(isString));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Geopoint ".concat(this.projection, " ").concat(util_hash(this.fields), " ").concat(util_hash(this.as));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return {
        type: 'geopoint',
        projection: this.projection,
        fields: this.fields,
        as: this.as
      };
    }
  }], [{
    key: "parseAll",
    value: function parseAll(parent, model) {
      if (!model.projectionName()) {
        return parent;
      }

      for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
        var coordinates = _arr[_i];
        var pair = coordinates.map(function (channel) {
          var def = getFieldOrDatumDef(model.encoding[channel]);
          return isFieldDef(def) ? def.field : isDatumDef(def) ? {
            expr: "".concat(def.datum)
          } : isValueDef(def) ? {
            expr: "".concat(def['value'])
          } : undefined;
        });
        var suffix = coordinates[0] === LONGITUDE2 ? '2' : '';

        if (pair[0] || pair[1]) {
          parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName("x".concat(suffix)), model.getName("y".concat(suffix))]);
        }
      }

      return parent;
    }
  }]);

  return GeoPointNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/impute.js








function impute_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function impute_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { impute_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { impute_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function impute_createSuper(Derived) { var hasNativeReflectConstruct = impute_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function impute_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ImputeNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(ImputeNode, _DataFlowNode);

  var _super = impute_createSuper(ImputeNode);

  function ImputeNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, ImputeNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    return _this;
  }

  (0,createClass/* default */.Z)(ImputeNode, [{
    key: "clone",
    value: function clone() {
      return new ImputeNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group;

      return new Set([this.transform.impute, this.transform.key].concat((0,toConsumableArray/* default */.Z)((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set([this.transform.impute]);
    }
  }, {
    key: "processSequence",
    value: function processSequence(keyvals) {
      var _keyvals$start = keyvals.start,
          start = _keyvals$start === void 0 ? 0 : _keyvals$start,
          stop = keyvals.stop,
          step = keyvals.step;
      var result = [start, stop].concat((0,toConsumableArray/* default */.Z)(step ? [step] : [])).join(',');
      return {
        signal: "sequence(".concat(result, ")")
      };
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Impute ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          impute = _this$transform.impute,
          key = _this$transform.key,
          keyvals = _this$transform.keyvals,
          method = _this$transform.method,
          groupby = _this$transform.groupby,
          value = _this$transform.value,
          _this$transform$frame = _this$transform.frame,
          frame = _this$transform$frame === void 0 ? [null, null] : _this$transform$frame;

      var imputeTransform = impute_objectSpread(impute_objectSpread(impute_objectSpread({
        type: 'impute',
        field: impute,
        key: key
      }, keyvals ? {
        keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals
      } : {}), {}, {
        method: 'value'
      }, groupby ? {
        groupby: groupby
      } : {}), {}, {
        value: !method || method === 'value' ? value : null
      });

      if (method && method !== 'value') {
        var deriveNewField = impute_objectSpread({
          type: 'window',
          as: ["imputed_".concat(impute, "_value")],
          ops: [method],
          fields: [impute],
          frame: frame,
          ignorePeers: false
        }, groupby ? {
          groupby: groupby
        } : {});

        var replaceOriginal = {
          type: 'formula',
          expr: "datum.".concat(impute, " === null ? datum.imputed_").concat(impute, "_value : datum.").concat(impute),
          as: impute
        };
        return [imputeTransform, deriveNewField, replaceOriginal];
      } else {
        return [imputeTransform];
      }
    }
  }], [{
    key: "makeFromTransform",
    value: function makeFromTransform(parent, imputeTransform) {
      return new ImputeNode(parent, imputeTransform);
    }
  }, {
    key: "makeFromEncoding",
    value: function makeFromEncoding(parent, model) {
      var encoding = model.encoding;
      var xDef = encoding.x;
      var yDef = encoding.y;

      if (isFieldDef(xDef) && isFieldDef(yDef)) {
        var imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;

        if (imputedChannel === undefined) {
          return undefined;
        }

        var keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
        var _imputedChannel$imput = imputedChannel.impute,
            method = _imputedChannel$imput.method,
            value = _imputedChannel$imput.value,
            frame = _imputedChannel$imput.frame,
            keyvals = _imputedChannel$imput.keyvals;
        var groupbyFields = pathGroupingFields(model.mark, encoding);
        return new ImputeNode(parent, impute_objectSpread(impute_objectSpread(impute_objectSpread(impute_objectSpread(impute_objectSpread({
          impute: imputedChannel.field,
          key: keyChannel.field
        }, method ? {
          method: method
        } : {}), value !== undefined ? {
          value: value
        } : {}), frame ? {
          frame: frame
        } : {}), keyvals !== undefined ? {
          keyvals: keyvals
        } : {}), groupbyFields.length ? {
          groupby: groupbyFields
        } : {}));
      }

      return null;
    }
  }]);

  return ImputeNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/loess.js








var loess_excluded = ["loess", "on"];

function loess_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function loess_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { loess_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { loess_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function loess_createSuper(Derived) { var hasNativeReflectConstruct = loess_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function loess_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for loess transform nodes
 */

var LoessTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(LoessTransformNode, _DataFlowNode);

  var _super = loess_createSuper(LoessTransformNode);

  function LoessTransformNode(parent, transform) {
    var _this$transform$as, _specifiedAs$, _specifiedAs$2;

    var _this;

    (0,classCallCheck/* default */.Z)(this, LoessTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var specifiedAs = (_this$transform$as = _this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];
    _this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.loess];
    return _this;
  }

  (0,createClass/* default */.Z)(LoessTransformNode, [{
    key: "clone",
    value: function clone() {
      return new LoessTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group;

      return new Set([this.transform.loess, this.transform.on].concat((0,toConsumableArray/* default */.Z)((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "LoessTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          loess = _this$transform.loess,
          on = _this$transform.on,
          rest = (0,objectWithoutProperties/* default */.Z)(_this$transform, loess_excluded);

      var result = loess_objectSpread({
        type: 'loess',
        x: on,
        y: loess
      }, rest);

      return result;
    }
  }]);

  return LoessTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/lookup.js







function lookup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function lookup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { lookup_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { lookup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function lookup_createSuper(Derived) { var hasNativeReflectConstruct = lookup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function lookup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var LookupNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(LookupNode, _DataFlowNode);

  var _super = lookup_createSuper(LookupNode);

  function LookupNode(parent, transform, secondary) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, LookupNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.secondary = secondary;
    return _this;
  }

  (0,createClass/* default */.Z)(LookupNode, [{
    key: "clone",
    value: function clone() {
      return new LookupNode(null, duplicate(this.transform), this.secondary);
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set([this.transform.lookup]);
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "Lookup ".concat(util_hash({
        transform: this.transform,
        secondary: this.secondary
      }));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var foreign;

      if (this.transform.from.fields) {
        // lookup a few fields and add create a flat output
        foreign = lookup_objectSpread({
          values: this.transform.from.fields
        }, this.transform.as ? {
          as: array(this.transform.as)
        } : {});
      } else {
        // lookup full record and nest it
        var asName = this.transform.as;

        if (!isString(asName)) {
          log_warn(NO_FIELDS_NEEDS_AS);
          asName = '_lookup';
        }

        foreign = {
          as: [asName]
        };
      }

      return lookup_objectSpread(lookup_objectSpread({
        type: 'lookup',
        from: this.secondary,
        key: this.transform.from.key,
        fields: [this.transform.lookup]
      }, foreign), this.transform.default ? {
        default: this.transform.default
      } : {});
    }
  }], [{
    key: "make",
    value: function make(parent, model, transform, counter) {
      var sources = model.component.data.sources;
      var _transform = transform,
          from = _transform.from;
      var fromOutputNode = null;

      if (isLookupData(from)) {
        var fromSource = findSource(from.data, sources);

        if (!fromSource) {
          fromSource = new SourceNode(from.data);
          sources.push(fromSource);
        }

        var fromOutputName = model.getName("lookup_".concat(counter));
        fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
        model.component.data.outputNodes[fromOutputName] = fromOutputNode;
      } else if (isLookupSelection(from)) {
        var selName = from.param;
        transform = lookup_objectSpread({
          as: selName
        }, transform);
        var selCmpt;

        try {
          selCmpt = model.getSelectionComponent(varName(selName), selName);
        } catch (e) {
          throw new Error(cannotLookupVariableParameter(selName));
        }

        fromOutputNode = selCmpt.materialized;

        if (!fromOutputNode) {
          throw new Error(noSameUnitLookup(selName));
        }
      }

      return new LookupNode(parent, transform, fromOutputNode.getSource());
    }
  }]);

  return LookupNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/quantile.js








var quantile_excluded = ["quantile"];

function quantile_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function quantile_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { quantile_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { quantile_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function quantile_createSuper(Derived) { var hasNativeReflectConstruct = quantile_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function quantile_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for quantile transform nodes
 */

var QuantileTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(QuantileTransformNode, _DataFlowNode);

  var _super = quantile_createSuper(QuantileTransformNode);

  function QuantileTransformNode(parent, transform) {
    var _this$transform$as, _specifiedAs$, _specifiedAs$2;

    var _this;

    (0,classCallCheck/* default */.Z)(this, QuantileTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var specifiedAs = (_this$transform$as = _this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];
    _this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : 'prob', (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : 'value'];
    return _this;
  }

  (0,createClass/* default */.Z)(QuantileTransformNode, [{
    key: "clone",
    value: function clone() {
      return new QuantileTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group;

      return new Set([this.transform.quantile].concat((0,toConsumableArray/* default */.Z)((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "QuantileTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          quantile = _this$transform.quantile,
          rest = (0,objectWithoutProperties/* default */.Z)(_this$transform, quantile_excluded);

      var result = quantile_objectSpread({
        type: 'quantile',
        field: quantile
      }, rest);

      return result;
    }
  }]);

  return QuantileTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/regression.js








var regression_excluded = ["regression", "on"];

function regression_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function regression_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { regression_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { regression_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function regression_createSuper(Derived) { var hasNativeReflectConstruct = regression_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function regression_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for regression transform nodes
 */

var RegressionTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(RegressionTransformNode, _DataFlowNode);

  var _super = regression_createSuper(RegressionTransformNode);

  function RegressionTransformNode(parent, transform) {
    var _this$transform$as, _specifiedAs$, _specifiedAs$2;

    var _this;

    (0,classCallCheck/* default */.Z)(this, RegressionTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    _this.transform = duplicate(transform); // duplicate to prevent side effects

    var specifiedAs = (_this$transform$as = _this.transform.as) !== null && _this$transform$as !== void 0 ? _this$transform$as : [undefined, undefined];
    _this.transform.as = [(_specifiedAs$ = specifiedAs[0]) !== null && _specifiedAs$ !== void 0 ? _specifiedAs$ : transform.on, (_specifiedAs$2 = specifiedAs[1]) !== null && _specifiedAs$2 !== void 0 ? _specifiedAs$2 : transform.regression];
    return _this;
  }

  (0,createClass/* default */.Z)(RegressionTransformNode, [{
    key: "clone",
    value: function clone() {
      return new RegressionTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group;

      return new Set([this.transform.regression, this.transform.on].concat((0,toConsumableArray/* default */.Z)((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : [])));
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set(this.transform.as);
    }
  }, {
    key: "hash",
    value: function hash() {
      return "RegressionTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          regression = _this$transform.regression,
          on = _this$transform.on,
          rest = (0,objectWithoutProperties/* default */.Z)(_this$transform, regression_excluded);

      var result = regression_objectSpread({
        type: 'regression',
        x: on,
        y: regression
      }, rest);

      return result;
    }
  }]);

  return RegressionTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/pivot.js








function pivot_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function pivot_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { pivot_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { pivot_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function pivot_createSuper(Derived) { var hasNativeReflectConstruct = pivot_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function pivot_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for pivot transform nodes.
 */

var PivotTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(PivotTransformNode, _DataFlowNode);

  var _super = pivot_createSuper(PivotTransformNode);

  function PivotTransformNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, PivotTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    return _this;
  }

  (0,createClass/* default */.Z)(PivotTransformNode, [{
    key: "clone",
    value: function clone() {
      return new PivotTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "addDimensions",
    value: function addDimensions(fields) {
      var _this$transform$group;

      this.transform.groupby = unique(((_this$transform$group = this.transform.groupby) !== null && _this$transform$group !== void 0 ? _this$transform$group : []).concat(fields), function (d) {
        return d;
      });
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return undefined; // return undefined so that potentially everything can depend on the pivot
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      var _this$transform$group2;

      return new Set([this.transform.pivot, this.transform.value].concat((0,toConsumableArray/* default */.Z)((_this$transform$group2 = this.transform.groupby) !== null && _this$transform$group2 !== void 0 ? _this$transform$group2 : [])));
    }
  }, {
    key: "hash",
    value: function hash() {
      return "PivotTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      var _this$transform = this.transform,
          pivot = _this$transform.pivot,
          value = _this$transform.value,
          groupby = _this$transform.groupby,
          limit = _this$transform.limit,
          op = _this$transform.op;
      return pivot_objectSpread(pivot_objectSpread(pivot_objectSpread({
        type: 'pivot',
        field: pivot,
        value: value
      }, limit !== undefined ? {
        limit: limit
      } : {}), op !== undefined ? {
        op: op
      } : {}), groupby !== undefined ? {
        groupby: groupby
      } : {});
    }
  }]);

  return PivotTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/sample.js






function sample_createSuper(Derived) { var hasNativeReflectConstruct = sample_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function sample_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



/**
 * A class for the sample transform nodes
 */

var SampleTransformNode = /*#__PURE__*/function (_DataFlowNode) {
  (0,inherits/* default */.Z)(SampleTransformNode, _DataFlowNode);

  var _super = sample_createSuper(SampleTransformNode);

  function SampleTransformNode(parent, transform) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, SampleTransformNode);

    _this = _super.call(this, parent);
    _this.transform = transform;
    return _this;
  }

  (0,createClass/* default */.Z)(SampleTransformNode, [{
    key: "clone",
    value: function clone() {
      return new SampleTransformNode(null, duplicate(this.transform));
    }
  }, {
    key: "dependentFields",
    value: function dependentFields() {
      return new Set();
    }
  }, {
    key: "producedFields",
    value: function producedFields() {
      return new Set();
    }
  }, {
    key: "hash",
    value: function hash() {
      return "SampleTransform ".concat(util_hash(this.transform));
    }
  }, {
    key: "assemble",
    value: function assemble() {
      return {
        type: 'sample',
        size: this.transform.sample
      };
    }
  }]);

  return SampleTransformNode;
}(DataFlowNode);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/assemble.js




function data_assemble_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = data_assemble_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function data_assemble_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return data_assemble_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return data_assemble_arrayLikeToArray(o, minLen); }

function data_assemble_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function data_assemble_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function data_assemble_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { data_assemble_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { data_assemble_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }































function makeWalkTree(data) {
  // to name datasources
  var datasetIndex = 0;
  /**
   * Recursively walk down the tree.
   */

  function walkTree(node, dataSource) {
    if (node instanceof SourceNode) {
      // If the source is a named data source or a data source with values, we need
      // to put it in a different data source. Otherwise, Vega may override the data.
      if (!node.isGenerator && !isUrlData(node.data)) {
        data.push(dataSource);
        var newData = {
          name: null,
          source: dataSource.name,
          transform: []
        };
        dataSource = newData;
      }
    }

    if (node instanceof ParseNode) {
      if (node.parent instanceof SourceNode && !dataSource.source) {
        var _dataSource$format, _dataSource$transform;

        // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
        dataSource.format = data_assemble_objectSpread(data_assemble_objectSpread({}, (_dataSource$format = dataSource.format) !== null && _dataSource$format !== void 0 ? _dataSource$format : {}), {}, {
          parse: node.assembleFormatParse()
        }); // add calculates for all nested fields

        (_dataSource$transform = dataSource.transform).push.apply(_dataSource$transform, (0,toConsumableArray/* default */.Z)(node.assembleTransforms(true)));
      } else {
        var _dataSource$transform2;

        // Otherwise use Vega expression to parse
        (_dataSource$transform2 = dataSource.transform).push.apply(_dataSource$transform2, (0,toConsumableArray/* default */.Z)(node.assembleTransforms()));
      }
    }

    if (node instanceof FacetNode) {
      if (!dataSource.name) {
        dataSource.name = "data_".concat(datasetIndex++);
      }

      if (!dataSource.source || dataSource.transform.length > 0) {
        data.push(dataSource);
        node.data = dataSource.name;
      } else {
        node.data = dataSource.source;
      }

      data.push.apply(data, (0,toConsumableArray/* default */.Z)(node.assemble())); // break here because the rest of the tree has to be taken care of by the facet.

      return;
    }

    if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {
      dataSource.transform.push(node.assemble());
    }

    if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode || node instanceof GeoJSONNode) {
      var _dataSource$transform3;

      (_dataSource$transform3 = dataSource.transform).push.apply(_dataSource$transform3, (0,toConsumableArray/* default */.Z)(node.assemble()));
    }

    if (node instanceof OutputNode) {
      if (dataSource.source && dataSource.transform.length === 0) {
        node.setSource(dataSource.source);
      } else if (node.parent instanceof OutputNode) {
        // Note that an output node may be required but we still do not assemble a
        // separate data source for it.
        node.setSource(dataSource.name);
      } else {
        if (!dataSource.name) {
          dataSource.name = "data_".concat(datasetIndex++);
        } // Here we set the name of the datasource we generated. From now on
        // other assemblers can use it.


        node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically

        if (node.numChildren() === 1) {
          data.push(dataSource);
          var _newData = {
            name: null,
            source: dataSource.name,
            transform: []
          };
          dataSource = _newData;
        }
      }
    }

    switch (node.numChildren()) {
      case 0:
        // done
        if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
          // do not push empty datasources that are simply references
          data.push(dataSource);
        }

        break;

      case 1:
        walkTree(node.children[0], dataSource);
        break;

      default:
        {
          if (!dataSource.name) {
            dataSource.name = "data_".concat(datasetIndex++);
          }

          var source = dataSource.name;

          if (!dataSource.source || dataSource.transform.length > 0) {
            data.push(dataSource);
          } else {
            source = dataSource.source;
          }

          var _iterator = data_assemble_createForOfIteratorHelper(node.children),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var child = _step.value;
              var _newData2 = {
                name: null,
                source: source,
                transform: []
              };
              walkTree(child, _newData2);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          break;
        }
    }
  }

  return walkTree;
}
/**
 * Assemble data sources that are derived from faceted data.
 */


function assembleFacetData(root) {
  var data = [];
  var walkTree = makeWalkTree(data);

  var _iterator2 = data_assemble_createForOfIteratorHelper(root.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var child = _step2.value;
      walkTree(child, {
        source: root.name,
        name: null,
        transform: []
      });
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return data;
}
/**
 * Create Vega data array from a given compiled model and append all of them to the given array
 *
 * @param  model
 * @param  data array
 * @return modified data array
 */

function assembleRootData(dataComponent, datasets) {
  var data = []; // dataComponent.sources.forEach(debug);
  // draw(dataComponent.sources);

  var walkTree = makeWalkTree(data);
  var sourceIndex = 0;

  var _iterator3 = data_assemble_createForOfIteratorHelper(dataComponent.sources),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var root = _step3.value;

      // assign a name if the source does not have a name yet
      if (!root.hasName()) {
        root.dataName = "source_".concat(sourceIndex++);
      }

      var newData = root.assemble();
      walkTree(root, newData);
    } // remove empty transform arrays for cleaner output

  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  for (var _i = 0, _data = data; _i < _data.length; _i++) {
    var d = _data[_i];

    if (d.transform.length === 0) {
      delete d.transform;
    }
  } // move sources without transforms (the ones that are potentially used in lookups) to the beginning


  var whereTo = 0;

  var _iterator4 = data_assemble_createForOfIteratorHelper(data.entries()),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _d3$transform;

      var _step4$value = (0,slicedToArray/* default */.Z)(_step4.value, 2),
          i = _step4$value[0],
          _d3 = _step4$value[1];

      if (((_d3$transform = _d3.transform) !== null && _d3$transform !== void 0 ? _d3$transform : []).length === 0 && !_d3.source) {
        data.splice(whereTo++, 0, data.splice(i, 1)[0]);
      }
    } // now fix the from references in lookup transforms

  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  for (var _i2 = 0, _data2 = data; _i2 < _data2.length; _i2++) {
    var _d$transform;

    var _d = _data2[_i2];

    var _iterator5 = data_assemble_createForOfIteratorHelper((_d$transform = _d.transform) !== null && _d$transform !== void 0 ? _d$transform : []),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var t = _step5.value;

        if (t.type === 'lookup') {
          t.from = dataComponent.outputNodes[t.from].getSource();
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  } // inline values for datasets that are in the datastore


  for (var _i3 = 0, _data3 = data; _i3 < _data3.length; _i3++) {
    var _d2 = _data3[_i3];

    if (_d2.name in datasets) {
      _d2.values = datasets[_d2.name];
    }
  }

  return data;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/header/parse.js


function header_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = header_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function header_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return header_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return header_parse_arrayLikeToArray(o, minLen); }

function header_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function getHeaderType(orient) {
  if (orient === 'top' || orient === 'left' || isSignalRef(orient)) {
    // we always use header for orient signal since we can't dynamically make header becomes footer
    return 'header';
  }

  return 'footer';
}
function parseFacetHeaders(model) {
  var _iterator = header_parse_createForOfIteratorHelper(FACET_CHANNELS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      parseFacetHeader(model, channel);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  mergeChildAxis(model, 'x');
  mergeChildAxis(model, 'y');
}

function parseFacetHeader(model, channel) {
  var facet = model.facet,
      config = model.config,
      child = model.child,
      component = model.component;

  if (model.channelHasField(channel)) {
    var _fieldDef$header;

    var fieldDef = facet[channel];
    var titleConfig = getHeaderProperty('title', null, config, channel);
    var title = channeldef_title(fieldDef, config, {
      allowDisabling: true,
      includeDefault: titleConfig === undefined || !!titleConfig
    });

    if (child.component.layoutHeaders[channel].title) {
      // TODO: better handle multiline titles
      title = isArray(title) ? title.join(', ') : title; // merge title with child to produce "Title / Subtitle / Sub-subtitle"

      title += " / ".concat(child.component.layoutHeaders[channel].title);
      child.component.layoutHeaders[channel].title = null;
    }

    var labelOrient = getHeaderProperty('labelOrient', fieldDef.header, config, channel);
    var labels = fieldDef.header !== null ? getFirstDefined((_fieldDef$header = fieldDef.header) === null || _fieldDef$header === void 0 ? void 0 : _fieldDef$header.labels, config.header.labels, true) : false;
    var headerType = util_contains(['bottom', 'right'], labelOrient) ? 'footer' : 'header';
    component.layoutHeaders[channel] = (0,defineProperty/* default */.Z)({
      title: fieldDef.header !== null ? title : null,
      facetFieldDef: fieldDef
    }, headerType, channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]);
  }
}

function makeHeaderComponent(model, channel, labels) {
  var sizeType = channel === 'row' ? 'height' : 'width';
  return {
    labels: labels,
    sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
    axes: []
  };
}

function mergeChildAxis(model, channel) {
  var child = model.child;

  if (child.component.axes[channel]) {
    var _model$component = model.component,
        layoutHeaders = _model$component.layoutHeaders,
        resolve = _model$component.resolve;
    resolve.axis[channel] = parseGuideResolve(resolve, channel);

    if (resolve.axis[channel] === 'shared') {
      // For shared axis, move the axes to facet's header or footer
      var headerChannel = channel === 'x' ? 'column' : 'row';
      var layoutHeader = layoutHeaders[headerChannel];

      var _iterator2 = header_parse_createForOfIteratorHelper(child.component.axes[channel]),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _layoutHeader$headerT;

          var axisComponent = _step2.value;
          var headerType = getHeaderType(axisComponent.get('orient'));
          (_layoutHeader$headerT = layoutHeader[headerType]) !== null && _layoutHeader$headerT !== void 0 ? _layoutHeader$headerT : layoutHeader[headerType] = [makeHeaderComponent(model, headerChannel, false)]; // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes

          var mainAxis = assembleAxis(axisComponent, 'main', model.config, {
            header: true
          });

          if (mainAxis) {
            // LayoutHeader no longer keep track of property precedence, thus let's combine.
            layoutHeader[headerType][0].axes.push(mainAxis);
          }

          axisComponent.mainExtracted = true;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {// Otherwise do nothing for independent axes
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/layoutsize/parse.js
function layoutsize_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = layoutsize_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function layoutsize_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return layoutsize_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return layoutsize_parse_arrayLikeToArray(o, minLen); }

function layoutsize_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function parseLayerLayoutSize(model) {
  parseChildrenLayoutSize(model);
  parseNonUnitLayoutSizeForChannel(model, 'width');
  parseNonUnitLayoutSizeForChannel(model, 'height');
}
function parseConcatLayoutSize(model) {
  parseChildrenLayoutSize(model); // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.

  var widthType = model.layout.columns === 1 ? 'width' : 'childWidth'; // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.

  var heightType = model.layout.columns === undefined ? 'height' : 'childHeight';
  parseNonUnitLayoutSizeForChannel(model, widthType);
  parseNonUnitLayoutSizeForChannel(model, heightType);
}
function parseChildrenLayoutSize(model) {
  var _iterator = layoutsize_parse_createForOfIteratorHelper(model.children),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var child = _step.value;
      child.parseLayoutSize();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
/**
 * Merge child layout size (width or height).
 */

function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
  /*
   * For concat, the parent width or height might not be the same as the children's shared height.
   * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.
   *
   * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)
   * while the sizeType represents the properties of the child.
   */
  var sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
  var channel = getPositionScaleChannel(sizeType);
  var resolve = model.component.resolve;
  var layoutSizeCmpt = model.component.layoutSize;
  var mergedSize; // Try to merge layout size

  var _iterator2 = layoutsize_parse_createForOfIteratorHelper(model.children),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _resolve$scale$channe;

      var _child = _step2.value;

      var childSize = _child.component.layoutSize.getWithExplicit(sizeType);

      var scaleResolve = (_resolve$scale$channe = resolve.scale[channel]) !== null && _resolve$scale$channe !== void 0 ? _resolve$scale$channe : defaultScaleResolve(channel, model);

      if (scaleResolve === 'independent' && childSize.value === 'step') {
        // Do not merge independent scales with range-step as their size depends
        // on the scale domains, which can be different between scales.
        mergedSize = undefined;
        break;
      }

      if (mergedSize) {
        if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
          // For independent scale, only merge if all the sizes are the same.
          // If the values are different, abandon the merge!
          mergedSize = undefined;
          break;
        }

        mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');
      } else {
        mergedSize = childSize;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  if (mergedSize) {
    // If merged, rename size and set size of all children.
    var _iterator3 = layoutsize_parse_createForOfIteratorHelper(model.children),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
        child.component.layoutSize.set(sizeType, 'merged', false);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
  } else {
    layoutSizeCmpt.setWithExplicit(layoutSizeType, {
      explicit: false,
      value: undefined
    });
  }
}

function parseUnitLayoutSize(model) {
  var size = model.size,
      component = model.component;

  var _iterator4 = layoutsize_parse_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var channel = _step4.value;
      var sizeType = getSizeChannel(channel);

      if (size[sizeType]) {
        var specifiedSize = size[sizeType];
        component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);
      } else {
        var defaultSize = defaultUnitSize(model, sizeType);
        component.layoutSize.set(sizeType, defaultSize, false);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}

function defaultUnitSize(model, sizeType) {
  var channel = sizeType === 'width' ? 'x' : 'y';
  var config = model.config;
  var scaleComponent = model.getScaleComponent(channel);

  if (scaleComponent) {
    var scaleType = scaleComponent.get('type');
    var range = scaleComponent.get('range');

    if (hasDiscreteDomain(scaleType)) {
      var size = getViewConfigDiscreteSize(config.view, sizeType);

      if (isVgRangeStep(range) || isStep(size)) {
        // For discrete domain with range.step, use dynamic width/height
        return 'step';
      } else {
        return size;
      }
    } else {
      return getViewConfigContinuousSize(config.view, sizeType);
    }
  } else if (model.hasProjection || model.mark === 'arc') {
    // arc should use continuous size by default otherwise the pie is extremely small
    return getViewConfigContinuousSize(config.view, sizeType);
  } else {
    var _size = getViewConfigDiscreteSize(config.view, sizeType);

    return isStep(_size) ? _size.step : _size;
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/facet.js










function compile_facet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = compile_facet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function compile_facet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return compile_facet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return compile_facet_arrayLikeToArray(o, minLen); }

function compile_facet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function compile_facet_createSuper(Derived) { var hasNativeReflectConstruct = compile_facet_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function compile_facet_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function compile_facet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function compile_facet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { compile_facet_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { compile_facet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
























function facetSortFieldName(fieldDef, sort, opt) {
  return channeldef_vgField(sort, compile_facet_objectSpread({
    suffix: "by_".concat(channeldef_vgField(fieldDef))
  }, opt !== null && opt !== void 0 ? opt : {}));
}
var FacetModel = /*#__PURE__*/function (_ModelWithField) {
  (0,inherits/* default */.Z)(FacetModel, _ModelWithField);

  var _super = compile_facet_createSuper(FacetModel);

  function FacetModel(spec, parent, parentGivenName, config) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, FacetModel);

    _this = _super.call(this, spec, 'facet', parent, parentGivenName, config, spec.resolve);
    _this.child = buildModel(spec.spec, (0,assertThisInitialized/* default */.Z)(_this), _this.getName('child'), undefined, config);
    _this.children = [_this.child];
    _this.facet = _this.initFacet(spec.facet);
    return _this;
  }

  (0,createClass/* default */.Z)(FacetModel, [{
    key: "initFacet",
    value: function initFacet(facet) {
      // clone to prevent side effect to the original spec
      if (!isFacetMapping(facet)) {
        return {
          facet: this.initFacetFieldDef(facet, 'facet')
        };
      }

      var channels = util_keys(facet);
      var normalizedFacet = {};

      var _iterator = compile_facet_createForOfIteratorHelper(channels),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var channel = _step.value;

          if (![ROW, COLUMN].includes(channel)) {
            // Drop unsupported channel
            log_warn(incompatibleChannel(channel, 'facet'));
            break;
          }

          var fieldDef = facet[channel];

          if (fieldDef.field === undefined) {
            log_warn(emptyFieldDef(fieldDef, channel));
            break;
          }

          normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return normalizedFacet;
    }
  }, {
    key: "initFacetFieldDef",
    value: function initFacetFieldDef(fieldDef, channel) {
      // Cast because we call initFieldDef, which assumes general FieldDef.
      // However, FacetFieldDef is a bit more constrained than the general FieldDef
      var facetFieldDef = initFieldDef(fieldDef, channel);

      if (facetFieldDef.header) {
        facetFieldDef.header = replaceExprRef(facetFieldDef.header);
      } else if (facetFieldDef.header === null) {
        facetFieldDef.header = null;
      }

      return facetFieldDef;
    }
  }, {
    key: "channelHasField",
    value: function channelHasField(channel) {
      return !!this.facet[channel];
    }
  }, {
    key: "fieldDef",
    value: function fieldDef(channel) {
      return this.facet[channel];
    }
  }, {
    key: "parseData",
    value: function parseData() {
      this.component.data = parse_parseData(this);
      this.child.parseData();
    }
  }, {
    key: "parseLayoutSize",
    value: function parseLayoutSize() {
      parseChildrenLayoutSize(this);
    }
  }, {
    key: "parseSelections",
    value: function parseSelections() {
      // As a facet has a single child, the selection components are the same.
      // The child maintains its selections to assemble signals, which remain
      // within its unit.
      this.child.parseSelections();
      this.component.selection = this.child.component.selection;
    }
  }, {
    key: "parseMarkGroup",
    value: function parseMarkGroup() {
      this.child.parseMarkGroup();
    }
  }, {
    key: "parseAxesAndHeaders",
    value: function parseAxesAndHeaders() {
      this.child.parseAxesAndHeaders();
      parseFacetHeaders(this);
    }
  }, {
    key: "assembleSelectionTopLevelSignals",
    value: function assembleSelectionTopLevelSignals(signals) {
      return this.child.assembleSelectionTopLevelSignals(signals);
    }
  }, {
    key: "assembleSignals",
    value: function assembleSignals() {
      this.child.assembleSignals();
      return [];
    }
  }, {
    key: "assembleSelectionData",
    value: function assembleSelectionData(data) {
      return this.child.assembleSelectionData(data);
    }
  }, {
    key: "getHeaderLayoutMixins",
    value: function getHeaderLayoutMixins() {
      var layoutMixins = {};

      var _iterator2 = compile_facet_createForOfIteratorHelper(FACET_CHANNELS),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channel = _step2.value;

          var _iterator3 = compile_facet_createForOfIteratorHelper(HEADER_TYPES),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var headerType = _step3.value;
              var layoutHeaderComponent = this.component.layoutHeaders[channel];
              var headerComponent = layoutHeaderComponent[headerType];
              var facetFieldDef = layoutHeaderComponent.facetFieldDef;

              if (facetFieldDef) {
                var titleOrient = getHeaderProperty('titleOrient', facetFieldDef.header, this.config, channel);

                if (['right', 'bottom'].includes(titleOrient)) {
                  var _layoutMixins$titleAn;

                  var headerChannel = getHeaderChannel(channel, titleOrient);
                  (_layoutMixins$titleAn = layoutMixins.titleAnchor) !== null && _layoutMixins$titleAn !== void 0 ? _layoutMixins$titleAn : layoutMixins.titleAnchor = {};
                  layoutMixins.titleAnchor[headerChannel] = 'end';
                }
              }

              if (headerComponent !== null && headerComponent !== void 0 && headerComponent[0]) {
                // set header/footerBand
                var sizeType = channel === 'row' ? 'height' : 'width';
                var bandType = headerType === 'header' ? 'headerBand' : 'footerBand';

                if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {
                  var _layoutMixins$bandTyp;

                  // If facet child does not have size signal, then apply headerBand
                  (_layoutMixins$bandTyp = layoutMixins[bandType]) !== null && _layoutMixins$bandTyp !== void 0 ? _layoutMixins$bandTyp : layoutMixins[bandType] = {};
                  layoutMixins[bandType][channel] = 0.5;
                }

                if (layoutHeaderComponent.title) {
                  var _layoutMixins$offset;

                  (_layoutMixins$offset = layoutMixins.offset) !== null && _layoutMixins$offset !== void 0 ? _layoutMixins$offset : layoutMixins.offset = {};
                  layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;
                }
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return layoutMixins;
    }
  }, {
    key: "assembleDefaultLayout",
    value: function assembleDefaultLayout() {
      var _this$facet = this.facet,
          column = _this$facet.column,
          row = _this$facet.row;
      var columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
      var align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.
      // We always align when we facet into both row and column.

      if (!row && this.component.resolve.scale.x === 'independent') {
        align = 'none';
      } else if (!column && this.component.resolve.scale.y === 'independent') {
        align = 'none';
      }

      return compile_facet_objectSpread(compile_facet_objectSpread(compile_facet_objectSpread({}, this.getHeaderLayoutMixins()), columns ? {
        columns: columns
      } : {}), {}, {
        bounds: 'full',
        align: align
      });
    }
  }, {
    key: "assembleLayoutSignals",
    value: function assembleLayoutSignals() {
      // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
      return this.child.assembleLayoutSignals();
    }
  }, {
    key: "columnDistinctSignal",
    value: function columnDistinctSignal() {
      if (this.parent && this.parent instanceof FacetModel) {
        // For nested facet, we will add columns to group mark instead
        // See discussion in https://github.com/vega/vega/issues/952
        // and https://github.com/vega/vega-view/releases/tag/v1.2.6
        return undefined;
      } else {
        // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
        var facetLayoutDataName = this.getName('column_domain');
        return {
          signal: "length(data('".concat(facetLayoutDataName, "'))")
        };
      }
    }
  }, {
    key: "assembleGroup",
    value: function assembleGroup(signals) {
      if (this.parent && this.parent instanceof FacetModel) {
        // Provide number of columns for layout.
        // See discussion in https://github.com/vega/vega/issues/952
        // and https://github.com/vega/vega-view/releases/tag/v1.2.6
        return compile_facet_objectSpread(compile_facet_objectSpread({}, this.channelHasField('column') ? {
          encode: {
            update: {
              // TODO(https://github.com/vega/vega-lite/issues/2759):
              // Correct the signal for facet of concat of facet_column
              columns: {
                field: channeldef_vgField(this.facet.column, {
                  prefix: 'distinct'
                })
              }
            }
          }
        } : {}), (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(FacetModel.prototype), "assembleGroup", this).call(this, signals));
      }

      return (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(FacetModel.prototype), "assembleGroup", this).call(this, signals);
    }
    /**
     * Aggregate cardinality for calculating size
     */

  }, {
    key: "getCardinalityAggregateForChild",
    value: function getCardinalityAggregateForChild() {
      var fields = [];
      var ops = [];
      var as = [];

      if (this.child instanceof FacetModel) {
        if (this.child.channelHasField('column')) {
          var field = channeldef_vgField(this.child.facet.column);
          fields.push(field);
          ops.push('distinct');
          as.push("distinct_".concat(field));
        }
      } else {
        var _iterator4 = compile_facet_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var channel = _step4.value;
            var childScaleComponent = this.child.component.scales[channel];

            if (childScaleComponent && !childScaleComponent.merged) {
              var type = childScaleComponent.get('type');
              var range = childScaleComponent.get('range');

              if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                var domain = assembleDomain(this.child, channel);

                var _field = getFieldFromDomain(domain);

                if (_field) {
                  fields.push(_field);
                  ops.push('distinct');
                  as.push("distinct_".concat(_field));
                } else {
                  log_warn(unknownField(channel));
                }
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }

      return {
        fields: fields,
        ops: ops,
        as: as
      };
    }
  }, {
    key: "assembleFacet",
    value: function assembleFacet() {
      var _this$component$data$ = this.component.data.facetRoot,
          name = _this$component$data$.name,
          data = _this$component$data$.data;
      var _this$facet2 = this.facet,
          row = _this$facet2.row,
          column = _this$facet2.column;

      var _this$getCardinalityA = this.getCardinalityAggregateForChild(),
          fields = _this$getCardinalityA.fields,
          ops = _this$getCardinalityA.ops,
          as = _this$getCardinalityA.as;

      var groupby = [];

      var _iterator5 = compile_facet_createForOfIteratorHelper(FACET_CHANNELS),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var channel = _step5.value;
          var fieldDef = this.facet[channel];

          if (fieldDef) {
            groupby.push(channeldef_vgField(fieldDef));
            var bin = fieldDef.bin,
                sort = fieldDef.sort;

            if (isBinning(bin)) {
              groupby.push(channeldef_vgField(fieldDef, {
                binSuffix: 'end'
              }));
            }

            if (isSortField(sort)) {
              var field = sort.field,
                  _sort$op = sort.op,
                  op = _sort$op === void 0 ? DEFAULT_SORT_OP : _sort$op;
              var outputName = facetSortFieldName(fieldDef, sort);

              if (row && column) {
                // For crossed facet, use pre-calculate field as it requires a different groupby
                // For each calculated field, apply max and assign them to the same name as
                // all values of the same group should be the same anyway.
                fields.push(outputName);
                ops.push('max');
                as.push(outputName);
              } else {
                fields.push(field);
                ops.push(op);
                as.push(outputName);
              }
            } else if (isArray(sort)) {
              var _outputName = sortArrayIndexField(fieldDef, channel);

              fields.push(_outputName);
              ops.push('max');
              as.push(_outputName);
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var cross = !!row && !!column;
      return compile_facet_objectSpread({
        name: name,
        data: data,
        groupby: groupby
      }, cross || fields.length > 0 ? {
        aggregate: compile_facet_objectSpread(compile_facet_objectSpread({}, cross ? {
          cross: cross
        } : {}), fields.length ? {
          fields: fields,
          ops: ops,
          as: as
        } : {})
      } : {});
    }
  }, {
    key: "facetSortFields",
    value: function facetSortFields(channel) {
      var facet = this.facet;
      var fieldDef = facet[channel];

      if (fieldDef) {
        if (isSortField(fieldDef.sort)) {
          return [facetSortFieldName(fieldDef, fieldDef.sort, {
            expr: 'datum'
          })];
        } else if (isArray(fieldDef.sort)) {
          return [sortArrayIndexField(fieldDef, channel, {
            expr: 'datum'
          })];
        }

        return [channeldef_vgField(fieldDef, {
          expr: 'datum'
        })];
      }

      return [];
    }
  }, {
    key: "facetSortOrder",
    value: function facetSortOrder(channel) {
      var facet = this.facet;
      var fieldDef = facet[channel];

      if (fieldDef) {
        var sort = fieldDef.sort;
        var order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';
        return [order];
      }

      return [];
    }
  }, {
    key: "assembleLabelTitle",
    value: function assembleLabelTitle() {
      var facet = this.facet,
          config = this.config;

      if (facet.facet) {
        // Facet always uses title to display labels
        return assemble_assembleLabelTitle(facet.facet, 'facet', config);
      }

      var ORTHOGONAL_ORIENT = {
        row: ['top', 'bottom'],
        column: ['left', 'right']
      };

      var _iterator6 = compile_facet_createForOfIteratorHelper(HEADER_CHANNELS),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var channel = _step6.value;

          if (facet[channel]) {
            var _facet$channel;

            var labelOrient = getHeaderProperty('labelOrient', (_facet$channel = facet[channel]) === null || _facet$channel === void 0 ? void 0 : _facet$channel.header, config, channel);

            if (ORTHOGONAL_ORIENT[channel].includes(labelOrient)) {
              // Row/Column with orthogonal labelOrient must use title to display labels
              return assemble_assembleLabelTitle(facet[channel], channel, config);
            }
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return undefined;
    }
  }, {
    key: "assembleMarks",
    value: function assembleMarks() {
      var _this2 = this;

      var child = this.child; // If we facet by two dimensions, we need to add a cross operator to the aggregation
      // so that we create all groups

      var facetRoot = this.component.data.facetRoot;
      var data = assembleFacetData(facetRoot);
      var encodeEntry = child.assembleGroupEncodeEntry(false);
      var title = this.assembleLabelTitle() || child.assembleTitle();
      var style = child.assembleGroupStyle();

      var markGroup = compile_facet_objectSpread(compile_facet_objectSpread(compile_facet_objectSpread(compile_facet_objectSpread(compile_facet_objectSpread({
        name: this.getName('cell'),
        type: 'group'
      }, title ? {
        title: title
      } : {}), style ? {
        style: style
      } : {}), {}, {
        from: {
          facet: this.assembleFacet()
        },
        // TODO: move this to after data
        sort: {
          field: FACET_CHANNELS.map(function (c) {
            return _this2.facetSortFields(c);
          }).flat(),
          order: FACET_CHANNELS.map(function (c) {
            return _this2.facetSortOrder(c);
          }).flat()
        }
      }, data.length > 0 ? {
        data: data
      } : {}), encodeEntry ? {
        encode: {
          update: encodeEntry
        }
      } : {}), child.assembleGroup(assembleFacetSignals(this, [])));

      return [markGroup];
    }
  }, {
    key: "getMapping",
    value: function getMapping() {
      return this.facet;
    }
  }]);

  return FacetModel;
}(ModelWithField);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js




function makeJoinAggregateFromFacet(parent, facet) {
  var row = facet.row,
      column = facet.column;

  if (row && column) {
    var newParent = null; // only need to make one for crossed facet

    for (var _i = 0, _arr = [row, column]; _i < _arr.length; _i++) {
      var fieldDef = _arr[_i];

      if (isSortField(fieldDef.sort)) {
        var _fieldDef$sort = fieldDef.sort,
            field = _fieldDef$sort.field,
            _fieldDef$sort$op = _fieldDef$sort.op,
            op = _fieldDef$sort$op === void 0 ? DEFAULT_SORT_OP : _fieldDef$sort$op;
        parent = newParent = new JoinAggregateTransformNode(parent, {
          joinaggregate: [{
            op: op,
            field: field,
            as: facetSortFieldName(fieldDef, fieldDef.sort, {
              forAs: true
            })
          }],
          groupby: [channeldef_vgField(fieldDef)]
        });
      }
    }

    return newParent;
  }

  return null;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/data/parse.js


function data_parse_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function data_parse_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { data_parse_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { data_parse_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function data_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = data_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function data_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return data_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return data_parse_arrayLikeToArray(o, minLen); }

function data_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






































function findSource(data, sources) {
  var _iterator = data_parse_createForOfIteratorHelper(sources),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _data$format, _otherData$format, _data$format2, _otherData$format2;

      var other = _step.value;
      var otherData = other.data; // if both datasets have a name defined, we cannot merge

      if (data.name && other.hasName() && data.name !== other.dataName) {
        continue;
      }

      var formatMesh = (_data$format = data['format']) === null || _data$format === void 0 ? void 0 : _data$format.mesh;
      var otherFeature = (_otherData$format = otherData.format) === null || _otherData$format === void 0 ? void 0 : _otherData$format.feature; // feature and mesh are mutually exclusive

      if (formatMesh && otherFeature) {
        continue;
      } // we have to extract the same feature or mesh


      var formatFeature = (_data$format2 = data['format']) === null || _data$format2 === void 0 ? void 0 : _data$format2.feature;

      if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {
        continue;
      }

      var otherMesh = (_otherData$format2 = otherData.format) === null || _otherData$format2 === void 0 ? void 0 : _otherData$format2.mesh;

      if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {
        continue;
      }

      if (isInlineData(data) && isInlineData(otherData)) {
        if (deepEqual(data.values, otherData.values)) {
          return other;
        }
      } else if (isUrlData(data) && isUrlData(otherData)) {
        if (data.url === otherData.url) {
          return other;
        }
      } else if (isNamedData(data)) {
        if (data.name === other.dataName) {
          return other;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
}

function parseRoot(model, sources) {
  if (model.data || !model.parent) {
    // if the model defines a data source or is the root, create a source node
    if (model.data === null) {
      // data: null means we should ignore the parent's data so we just create a new data source
      var source = new SourceNode({
        values: []
      });
      sources.push(source);
      return source;
    }

    var existingSource = findSource(model.data, sources);

    if (existingSource) {
      if (!isGenerator(model.data)) {
        existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);
      } // if the new source has a name but the existing one does not, we can set it


      if (!existingSource.hasName() && model.data.name) {
        existingSource.dataName = model.data.name;
      }

      return existingSource;
    } else {
      var _source = new SourceNode(model.data);

      sources.push(_source);
      return _source;
    }
  } else {
    // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
    return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
  }
}
/**
 * Parses a transform array into a chain of connected dataflow nodes.
 */


function parseTransformArray(head, model, ancestorParse) {
  var lookupCounter = 0;

  var _iterator2 = data_parse_createForOfIteratorHelper(model.transforms),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var t = _step2.value;
      var derivedType = undefined;
      var transformNode = void 0;

      if (isCalculate(t)) {
        transformNode = head = new CalculateNode(head, t);
        derivedType = 'derived';
      } else if (isFilter(t)) {
        var _ParseNode$makeWithAn;

        var implicit = getImplicitFromFilterTransform(t);
        transformNode = head = (_ParseNode$makeWithAn = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _ParseNode$makeWithAn !== void 0 ? _ParseNode$makeWithAn : head;
        head = new FilterNode(head, model, t.filter);
      } else if (isBin(t)) {
        transformNode = head = BinNode.makeFromTransform(head, t, model);
        derivedType = 'number';
      } else if (isTimeUnit(t)) {
        derivedType = 'date';
        var parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.

        if (parsedAs.value === undefined) {
          head = new ParseNode(head, (0,defineProperty/* default */.Z)({}, t.field, derivedType));
          ancestorParse.set(t.field, derivedType, false);
        }

        transformNode = head = TimeUnitNode.makeFromTransform(head, t);
      } else if (transform_isAggregate(t)) {
        transformNode = head = AggregateNode.makeFromTransform(head, t);
        derivedType = 'number';

        if (requiresSelectionId(model)) {
          head = new IdentifierNode(head);
        }
      } else if (isLookup(t)) {
        transformNode = head = LookupNode.make(head, model, t, lookupCounter++);
        derivedType = 'derived';
      } else if (isWindow(t)) {
        transformNode = head = new WindowTransformNode(head, t);
        derivedType = 'number';
      } else if (isJoinAggregate(t)) {
        transformNode = head = new JoinAggregateTransformNode(head, t);
        derivedType = 'number';
      } else if (isStack(t)) {
        transformNode = head = StackNode.makeFromTransform(head, t);
        derivedType = 'derived';
      } else if (isFold(t)) {
        transformNode = head = new FoldTransformNode(head, t);
        derivedType = 'derived';
      } else if (isFlatten(t)) {
        transformNode = head = new FlattenTransformNode(head, t);
        derivedType = 'derived';
      } else if (isPivot(t)) {
        transformNode = head = new PivotTransformNode(head, t);
        derivedType = 'derived';
      } else if (isSample(t)) {
        head = new SampleTransformNode(head, t);
      } else if (isImpute(t)) {
        transformNode = head = ImputeNode.makeFromTransform(head, t);
        derivedType = 'derived';
      } else if (isDensity(t)) {
        transformNode = head = new DensityTransformNode(head, t);
        derivedType = 'derived';
      } else if (transform_isQuantile(t)) {
        transformNode = head = new QuantileTransformNode(head, t);
        derivedType = 'derived';
      } else if (isRegression(t)) {
        transformNode = head = new RegressionTransformNode(head, t);
        derivedType = 'derived';
      } else if (isLoess(t)) {
        transformNode = head = new LoessTransformNode(head, t);
        derivedType = 'derived';
      } else {
        log_warn(invalidTransformIgnored(t));
        continue;
      }

      if (transformNode && derivedType !== undefined) {
        var _transformNode$produc;

        var _iterator3 = data_parse_createForOfIteratorHelper((_transformNode$produc = transformNode.producedFields()) !== null && _transformNode$produc !== void 0 ? _transformNode$produc : []),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var field = _step3.value;
            ancestorParse.set(field, derivedType, false);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return head;
}
/*
Description of the dataflow (http://asciiflow.com/):
     +--------+
     | Source |
     +---+----+
         |
         v
     FormatParse
     (explicit)
         |
         v
     Transforms
(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)
         |
         v
     FormatParse
     (implicit)
         |
         v
 Binning (in `encoding`)
         |
         v
 Timeunit (in `encoding`)
         |
         v
Formula From Sort Array
         |
         v
      +--+--+
      | Raw |
      +-----+
         |
         v
  Aggregate (in `encoding`)
         |
         v
  Stack (in `encoding`)
         |
         v
  Invalid Filter
         |
         v
   +----------+
   |   Main   |
   +----------+
         |
         v
     +-------+
     | Facet |----> "column", "column-layout", and "row"
     +-------+
         |
         v
  ...Child data...
*/

function parse_parseData(model) {
  var _data$format3, _ParseNode$makeExplic, _ParseNode$makeWithAn2;

  var head = parseRoot(model, model.component.data.sources);
  var _model$component$data = model.component.data,
      outputNodes = _model$component$data.outputNodes,
      outputNodeRefCounts = _model$component$data.outputNodeRefCounts;
  var ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
  var data = model.data;

  if (isGenerator(data)) {
    // insert generator transform
    if (isSequenceGenerator(data)) {
      head = new SequenceNode(head, data.sequence);
    } else if (isGraticuleGenerator(data)) {
      head = new GraticuleNode(head, data.graticule);
    } // no parsing necessary for generator


    ancestorParse.parseNothing = true;
  } else if ((data === null || data === void 0 ? void 0 : (_data$format3 = data.format) === null || _data$format3 === void 0 ? void 0 : _data$format3.parse) === null) {
    // format.parse: null means disable parsing
    ancestorParse.parseNothing = true;
  }

  head = (_ParseNode$makeExplic = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _ParseNode$makeExplic !== void 0 ? _ParseNode$makeExplic : head; // Default discrete selections require an identifer transform to
  // uniquely identify data points. Add this transform at the head of
  // the pipeline such that the identifier field is available for all
  // subsequent datasets. During optimization, we will remove this
  // transform if it proves to be unnecessary. Additional identifier
  // transforms will be necessary when new tuples are constructed
  // (e.g., post-aggregation).

  head = new IdentifierNode(head); // HACK: This is equivalent for merging bin extent for union scale.
  // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale

  var parentIsLayer = model.parent && isLayerModel(model.parent);

  if (isUnitModel(model) || isFacetModel(model)) {
    if (parentIsLayer) {
      var _BinNode$makeFromEnco;

      head = (_BinNode$makeFromEnco = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco !== void 0 ? _BinNode$makeFromEnco : head;
    }
  }

  if (model.transforms.length > 0) {
    head = parseTransformArray(head, model, ancestorParse);
  } // create parse nodes for fields that need to be parsed (or flattened) implicitly


  var implicitSelection = getImplicitFromSelection(model);
  var implicitEncoding = getImplicitFromEncoding(model);
  head = (_ParseNode$makeWithAn2 = ParseNode.makeWithAncestors(head, {}, data_parse_objectSpread(data_parse_objectSpread({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _ParseNode$makeWithAn2 !== void 0 ? _ParseNode$makeWithAn2 : head;

  if (isUnitModel(model)) {
    head = GeoJSONNode.parseAll(head, model);
    head = GeoPointNode.parseAll(head, model);
  }

  if (isUnitModel(model) || isFacetModel(model)) {
    var _TimeUnitNode$makeFro;

    if (!parentIsLayer) {
      var _BinNode$makeFromEnco2;

      head = (_BinNode$makeFromEnco2 = BinNode.makeFromEncoding(head, model)) !== null && _BinNode$makeFromEnco2 !== void 0 ? _BinNode$makeFromEnco2 : head;
    }

    head = (_TimeUnitNode$makeFro = TimeUnitNode.makeFromEncoding(head, model)) !== null && _TimeUnitNode$makeFro !== void 0 ? _TimeUnitNode$makeFro : head;
    head = CalculateNode.parseAllForSortIndex(head, model);
  } // add an output node pre aggregation


  var rawName = model.getDataName(DataSourceType.Raw);
  var raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);
  outputNodes[rawName] = raw;
  head = raw;

  if (isUnitModel(model)) {
    var _ImputeNode$makeFromE, _StackNode$makeFromEn;

    var agg = AggregateNode.makeFromEncoding(head, model);

    if (agg) {
      head = agg;

      if (requiresSelectionId(model)) {
        head = new IdentifierNode(head);
      }
    }

    head = (_ImputeNode$makeFromE = ImputeNode.makeFromEncoding(head, model)) !== null && _ImputeNode$makeFromE !== void 0 ? _ImputeNode$makeFromE : head;
    head = (_StackNode$makeFromEn = StackNode.makeFromEncoding(head, model)) !== null && _StackNode$makeFromEn !== void 0 ? _StackNode$makeFromEn : head;
  }

  if (isUnitModel(model)) {
    var _FilterInvalidNode$ma;

    head = (_FilterInvalidNode$ma = FilterInvalidNode.make(head, model)) !== null && _FilterInvalidNode$ma !== void 0 ? _FilterInvalidNode$ma : head;
  } // output node for marks


  var mainName = model.getDataName(DataSourceType.Main);
  var main = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);
  outputNodes[mainName] = main;
  head = main;

  if (isUnitModel(model)) {
    materializeSelections(model, main);
  } // add facet marker


  var facetRoot = null;

  if (isFacetModel(model)) {
    var _makeJoinAggregateFro;

    var facetName = model.getName('facet'); // Derive new aggregate for facet's sort field
    // augment data source with new fields for crossed facet

    head = (_makeJoinAggregateFro = makeJoinAggregateFromFacet(head, model.facet)) !== null && _makeJoinAggregateFro !== void 0 ? _makeJoinAggregateFro : head;
    facetRoot = new FacetNode(head, model, facetName, main.getSource());
    outputNodes[facetName] = facetRoot;
  }

  return data_parse_objectSpread(data_parse_objectSpread({}, model.component.data), {}, {
    outputNodes: outputNodes,
    outputNodeRefCounts: outputNodeRefCounts,
    raw: raw,
    main: main,
    facetRoot: facetRoot,
    ancestorParse: ancestorParse
  });
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/concat.js









function concat_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function concat_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { concat_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { concat_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function concat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = concat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function concat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return concat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return concat_arrayLikeToArray(o, minLen); }

function concat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function concat_createSuper(Derived) { var hasNativeReflectConstruct = concat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function concat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var ConcatModel = /*#__PURE__*/function (_Model) {
  (0,inherits/* default */.Z)(ConcatModel, _Model);

  var _super = concat_createSuper(ConcatModel);

  function ConcatModel(spec, parent, parentGivenName, config) {
    var _spec$resolve, _spec$resolve$axis, _spec$resolve2, _spec$resolve2$axis;

    var _this;

    (0,classCallCheck/* default */.Z)(this, ConcatModel);

    _this = _super.call(this, spec, 'concat', parent, parentGivenName, config, spec.resolve);

    if (((_spec$resolve = spec.resolve) === null || _spec$resolve === void 0 ? void 0 : (_spec$resolve$axis = _spec$resolve.axis) === null || _spec$resolve$axis === void 0 ? void 0 : _spec$resolve$axis.x) === 'shared' || ((_spec$resolve2 = spec.resolve) === null || _spec$resolve2 === void 0 ? void 0 : (_spec$resolve2$axis = _spec$resolve2.axis) === null || _spec$resolve2$axis === void 0 ? void 0 : _spec$resolve2$axis.y) === 'shared') {
      log_warn(CONCAT_CANNOT_SHARE_AXIS);
    }

    _this.children = _this.getChildren(spec).map(function (child, i) {
      return buildModel(child, (0,assertThisInitialized/* default */.Z)(_this), _this.getName("concat_".concat(i)), undefined, config);
    });
    return _this;
  }

  (0,createClass/* default */.Z)(ConcatModel, [{
    key: "parseData",
    value: function parseData() {
      this.component.data = parse_parseData(this);

      var _iterator = concat_createForOfIteratorHelper(this.children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          child.parseData();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "parseSelections",
    value: function parseSelections() {
      // Merge selections up the hierarchy so that they may be referenced
      // across unit specs. Persist their definitions within each child
      // to assemble signals which remain within output Vega unit groups.
      this.component.selection = {};

      var _iterator2 = concat_createForOfIteratorHelper(this.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          child.parseSelections();

          var _iterator3 = concat_createForOfIteratorHelper(util_keys(child.component.selection)),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var key = _step3.value;
              this.component.selection[key] = child.component.selection[key];
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "parseMarkGroup",
    value: function parseMarkGroup() {
      var _iterator4 = concat_createForOfIteratorHelper(this.children),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;
          child.parseMarkGroup();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "parseAxesAndHeaders",
    value: function parseAxesAndHeaders() {
      var _iterator5 = concat_createForOfIteratorHelper(this.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var child = _step5.value;
          child.parseAxesAndHeaders();
        } // TODO(#2415): support shared axes

      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "getChildren",
    value: function getChildren(spec) {
      if (isVConcatSpec(spec)) {
        return spec.vconcat;
      } else if (isHConcatSpec(spec)) {
        return spec.hconcat;
      }

      return spec.concat;
    }
  }, {
    key: "parseLayoutSize",
    value: function parseLayoutSize() {
      parseConcatLayoutSize(this);
    }
  }, {
    key: "parseAxisGroup",
    value: function parseAxisGroup() {
      return null;
    }
  }, {
    key: "assembleSelectionTopLevelSignals",
    value: function assembleSelectionTopLevelSignals(signals) {
      return this.children.reduce(function (sg, child) {
        return child.assembleSelectionTopLevelSignals(sg);
      }, signals);
    }
  }, {
    key: "assembleSignals",
    value: function assembleSignals() {
      this.children.forEach(function (child) {
        return child.assembleSignals();
      });
      return [];
    }
  }, {
    key: "assembleLayoutSignals",
    value: function assembleLayoutSignals() {
      var layoutSignals = assemble_assembleLayoutSignals(this);

      var _iterator6 = concat_createForOfIteratorHelper(this.children),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var child = _step6.value;
          layoutSignals.push.apply(layoutSignals, (0,toConsumableArray/* default */.Z)(child.assembleLayoutSignals()));
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return layoutSignals;
    }
  }, {
    key: "assembleSelectionData",
    value: function assembleSelectionData(data) {
      return this.children.reduce(function (db, child) {
        return child.assembleSelectionData(db);
      }, data);
    }
  }, {
    key: "assembleMarks",
    value: function assembleMarks() {
      // only children have marks
      return this.children.map(function (child) {
        var title = child.assembleTitle();
        var style = child.assembleGroupStyle();
        var encodeEntry = child.assembleGroupEncodeEntry(false);
        return concat_objectSpread(concat_objectSpread(concat_objectSpread(concat_objectSpread({
          type: 'group',
          name: child.getName('group')
        }, title ? {
          title: title
        } : {}), style ? {
          style: style
        } : {}), encodeEntry ? {
          encode: {
            update: encodeEntry
          }
        } : {}), child.assembleGroup());
      });
    }
  }, {
    key: "assembleDefaultLayout",
    value: function assembleDefaultLayout() {
      var columns = this.layout.columns;
      return concat_objectSpread(concat_objectSpread({}, columns != null ? {
        columns: columns
      } : {}), {}, {
        bounds: 'full',
        // Use align each so it can work with multiple plots with different size
        align: 'each'
      });
    }
  }]);

  return ConcatModel;
}(Model);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/component.js







function axis_component_createSuper(Derived) { var hasNativeReflectConstruct = axis_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function axis_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function axis_component_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function axis_component_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { axis_component_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { axis_component_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






function isFalseOrNull(v) {
  return v === false || v === null;
}

var AXIS_COMPONENT_PROPERTIES_INDEX = axis_component_objectSpread(axis_component_objectSpread({
  disable: 1,
  gridScale: 1,
  scale: 1
}, COMMON_AXIS_PROPERTIES_INDEX), {}, {
  labelExpr: 1,
  encode: 1
});

var AXIS_COMPONENT_PROPERTIES = util_keys(AXIS_COMPONENT_PROPERTIES_INDEX);
var AxisComponent = /*#__PURE__*/function (_Split) {
  (0,inherits/* default */.Z)(AxisComponent, _Split);

  var _super = axis_component_createSuper(AxisComponent);

  function AxisComponent() {
    var _this;

    var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mainExtracted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    (0,classCallCheck/* default */.Z)(this, AxisComponent);

    _this = _super.call(this);
    _this.explicit = explicit;
    _this.implicit = implicit;
    _this.mainExtracted = mainExtracted;
    return _this;
  }

  (0,createClass/* default */.Z)(AxisComponent, [{
    key: "clone",
    value: function clone() {
      return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
    }
  }, {
    key: "hasAxisPart",
    value: function hasAxisPart(part) {
      // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
      if (part === 'axis') {
        // always has the axis container part
        return true;
      }

      if (part === 'grid' || part === 'title') {
        return !!this.get(part);
      } // Other parts are enabled by default, so they should not be false or null.


      return !isFalseOrNull(this.get(part));
    }
  }, {
    key: "hasOrientSignalRef",
    value: function hasOrientSignalRef() {
      return isSignalRef(this.explicit.orient);
    }
  }]);

  return AxisComponent;
}(Split);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/encode.js


function axis_encode_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function axis_encode_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { axis_encode_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { axis_encode_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




function encode_labels(model, channel, specifiedLabelsSpec) {
  var _getFieldOrDatumDef;

  var encoding = model.encoding,
      config = model.config;
  var fieldOrDatumDef = (_getFieldOrDatumDef = getFieldOrDatumDef(encoding[channel])) !== null && _getFieldOrDatumDef !== void 0 ? _getFieldOrDatumDef : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
  var axis = model.axis(channel) || {};
  var format = axis.format,
      formatType = axis.formatType;

  if (isCustomFormatType(formatType)) {
    return axis_encode_objectSpread({
      text: formatCustomType({
        fieldOrDatumDef: fieldOrDatumDef,
        field: 'datum.value',
        format: format,
        formatType: formatType,
        config: config
      })
    }, specifiedLabelsSpec);
  }

  return specifiedLabelsSpec;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/axis/parse.js
function axis_parse_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = axis_parse_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function axis_parse_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return axis_parse_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return axis_parse_arrayLikeToArray(o, minLen); }

function axis_parse_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }














function parseUnitAxes(model) {
  return POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {
    if (model.component.scales[channel]) {
      axis[channel] = [parse_parseAxis(channel, model)];
    }

    return axis;
  }, {});
}
var OPPOSITE_ORIENT = {
  bottom: 'top',
  top: 'bottom',
  left: 'right',
  right: 'left'
};
function parseLayerAxes(model) {
  var _model$component = model.component,
      axes = _model$component.axes,
      resolve = _model$component.resolve;
  var axisCount = {
    top: 0,
    bottom: 0,
    right: 0,
    left: 0
  };

  var _iterator = axis_parse_createForOfIteratorHelper(model.children),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var child = _step.value;
      child.parseAxesAndHeaders();

      var _iterator3 = axis_parse_createForOfIteratorHelper(util_keys(child.component.axes)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var channel = _step3.value;
          resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);

          if (resolve.axis[channel] === 'shared') {
            // If the resolve says shared (and has not been overridden)
            // We will try to merge and see if there is a conflict
            axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);

            if (!axes[channel]) {
              // If merge returns nothing, there is a conflict so we cannot make the axis shared.
              // Thus, mark axis as independent and remove the axis component.
              resolve.axis[channel] = 'independent';
              delete axes[channel];
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    } // Move axes to layer's axis component and merge shared axes

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = axis_parse_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _channel = _step2.value;

      var _iterator4 = axis_parse_createForOfIteratorHelper(model.children),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _child = _step4.value;

          if (!_child.component.axes[_channel]) {
            // skip if the child does not have a particular axis
            continue;
          }

          if (resolve.axis[_channel] === 'independent') {
            var _axes$_channel;

            // If axes are independent, concat the axisComponent array.
            axes[_channel] = ((_axes$_channel = axes[_channel]) !== null && _axes$_channel !== void 0 ? _axes$_channel : []).concat(_child.component.axes[_channel]); // Automatically adjust orient

            var _iterator6 = axis_parse_createForOfIteratorHelper(_child.component.axes[_channel]),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var axisComponent = _step6.value;

                var _axisComponent$getWit = axisComponent.getWithExplicit('orient'),
                    orient = _axisComponent$getWit.value,
                    explicit = _axisComponent$getWit.explicit;

                if (isSignalRef(orient)) {
                  continue;
                }

                if (axisCount[orient] > 0 && !explicit) {
                  // Change axis orient if the number do not match
                  var oppositeOrient = OPPOSITE_ORIENT[orient];

                  if (axisCount[orient] > axisCount[oppositeOrient]) {
                    axisComponent.set('orient', oppositeOrient, false);
                  }
                }

                axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          } // After merging, make sure to remove axes from child


          delete _child.component.axes[_channel];
        } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)

      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (resolve.axis[_channel] === 'independent' && axes[_channel] && axes[_channel].length > 1) {
        var _iterator5 = axis_parse_createForOfIteratorHelper(axes[_channel]),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var axisCmpt = _step5.value;

            if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {
              axisCmpt.implicit.grid = false;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
  if (mergedAxisCmpts) {
    // FIXME: this is a bit wrong once we support multiple axes
    if (mergedAxisCmpts.length !== childAxisCmpts.length) {
      return undefined; // Cannot merge axis component with different number of axes.
    }

    var length = mergedAxisCmpts.length;

    for (var i = 0; i < length; i++) {
      var merged = mergedAxisCmpts[i];
      var child = childAxisCmpts[i];

      if (!!merged !== !!child) {
        return undefined;
      } else if (merged && child) {
        var mergedOrient = merged.getWithExplicit('orient');
        var childOrient = child.getWithExplicit('orient');

        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
          // Cannot merge due to inconsistent orient
          return undefined;
        } else {
          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
        }
      }
    }
  } else {
    // For first one, return a copy of the child
    return childAxisCmpts.map(function (axisComponent) {
      return axisComponent.clone();
    });
  }

  return mergedAxisCmpts;
}

function mergeAxisComponent(merged, child) {
  var _iterator7 = axis_parse_createForOfIteratorHelper(AXIS_COMPONENT_PROPERTIES),
      _step7;

  try {
    var _loop = function _loop() {
      var prop = _step7.value;
      var mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function
      function (v1, v2) {
        switch (prop) {
          case 'title':
            return mergeTitleComponent(v1, v2);

          case 'gridScale':
            return {
              explicit: v1.explicit,
              value: getFirstDefined(v1.value, v2.value)
            };
        }

        return defaultTieBreaker(v1, v2, prop, 'axis');
      });
      merged.setWithExplicit(prop, mergedValueWithExplicit);
    };

    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }

  return merged;
} // eslint-disable-next-line @typescript-eslint/ban-types


function parse_isExplicit(value, property, axis, model, channel) {
  if (property === 'disable') {
    return axis !== undefined; // if axis is specified or null/false, then its enable/disable state is explicit
  }

  axis = axis || {};

  switch (property) {
    case 'titleAngle':
    case 'labelAngle':
      return value === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));

    case 'values':
      return !!axis.values;
    // specified axis.values is already respected, but may get transformed.

    case 'encode':
      // both VL axis.encoding and axis.labelAngle affect VG axis.encode
      return !!axis.encoding || !!axis.labelAngle;

    case 'title':
      // title can be explicit if fieldDef.title is set
      if (value === getFieldDefTitle(model, channel)) {
        return true;
      }

  } // Otherwise, things are explicit if the returned value matches the specified property


  return value === axis[property];
}
/**
 * Properties to always include values from config
 */


var propsToAlwaysIncludeConfig = new Set(['grid', 'translate', // the rest are not axis configs in Vega, but are in VL, so we need to set too.
'format', 'formatType', 'orient', 'labelExpr', 'tickCount', 'position', 'tickMinStep']);

function parse_parseAxis(channel, model) {
  var _axis, _config, _config$axis, _axis2, _axis$encoding;

  var axis = model.axis(channel);
  var axisComponent = new AxisComponent();
  var fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
  var mark = model.mark,
      config = model.config;
  var orient = ((_axis = axis) === null || _axis === void 0 ? void 0 : _axis.orient) || ((_config = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _config === void 0 ? void 0 : _config.orient) || ((_config$axis = config.axis) === null || _config$axis === void 0 ? void 0 : _config$axis.orient) || defaultOrient(channel);
  var scaleType = model.getScaleComponent(channel).get('type');
  var axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);
  var disable = axis !== undefined ? !axis : getAxisConfig('disable', config.style, (_axis2 = axis) === null || _axis2 === void 0 ? void 0 : _axis2.style, axisConfigs).configValue;
  axisComponent.set('disable', disable, axis !== undefined);

  if (disable) {
    return axisComponent;
  }

  axis = axis || {};
  var labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);
  var ruleParams = {
    fieldOrDatumDef: fieldOrDatumDef,
    axis: axis,
    channel: channel,
    model: model,
    scaleType: scaleType,
    orient: orient,
    labelAngle: labelAngle,
    mark: mark,
    config: config
  }; // 1.2. Add properties

  var _iterator8 = axis_parse_createForOfIteratorHelper(AXIS_COMPONENT_PROPERTIES),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var property = _step8.value;
      var value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;
      var hasValue = value !== undefined;
      var explicit = parse_isExplicit(value, property, axis, model, channel);

      if (hasValue && explicit) {
        axisComponent.set(property, value, explicit);
      } else {
        var _ref = isAxisProperty(property) && property !== 'values' ? getAxisConfig(property, config.style, axis.style, axisConfigs) : {},
            _ref$configValue = _ref.configValue,
            configValue = _ref$configValue === void 0 ? undefined : _ref$configValue,
            _ref$configFrom = _ref.configFrom,
            configFrom = _ref$configFrom === void 0 ? undefined : _ref$configFrom;

        var hasConfigValue = configValue !== undefined;

        if (hasValue && !hasConfigValue) {
          // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)
          axisComponent.set(property, value, explicit);
        } else if ( // Cases need implicit values
        // 1. Axis config that aren't available in Vega
        !(configFrom === 'vgAxisConfig') || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)
        propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals
        isConditionalAxisValue(configValue) || isSignalRef(configValue)) {
          // If a config is specified and is conditional, copy conditional value from axis config
          axisComponent.set(property, configValue, false);
        }
      }
    } // 2) Add guide encode definition groups

  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }

  var axisEncoding = (_axis$encoding = axis.encoding) !== null && _axis$encoding !== void 0 ? _axis$encoding : {};
  var axisEncode = AXIS_PARTS.reduce(function (e, part) {
    var _axisEncoding$part;

    if (!axisComponent.hasAxisPart(part)) {
      // No need to create encode for a disabled part.
      return e;
    }

    var axisEncodingPart = guideEncodeEntry((_axisEncoding$part = axisEncoding[part]) !== null && _axisEncoding$part !== void 0 ? _axisEncoding$part : {}, model);
    var value = part === 'labels' ? encode_labels(model, channel, axisEncodingPart) : axisEncodingPart;

    if (value !== undefined && !isEmpty(value)) {
      e[part] = {
        update: value
      };
    }

    return e;
  }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.

  if (!isEmpty(axisEncode)) {
    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
  }

  return axisComponent;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/layoutsize/init.js
function init_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = init_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function init_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return init_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return init_arrayLikeToArray(o, minLen); }

function init_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





function initLayoutSize(_ref) {
  var encoding = _ref.encoding,
      size = _ref.size;

  var _iterator = init_createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var channel = _step.value;
      var sizeType = getSizeChannel(channel);

      if (isStep(size[sizeType])) {
        if (isContinuousFieldOrDatumDef(encoding[channel])) {
          delete size[sizeType];
          log_warn(stepDropped(sizeType));
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return size;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/init.js
function mark_init_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mark_init_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function mark_init_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mark_init_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mark_init_arrayLikeToArray(o, minLen); }

function mark_init_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }










function initMarkdef(originalMarkDef, encoding, config) {
  // FIXME: markDef expects that exprRefs are replaced recursively but replaceExprRef only replaces the top level
  var markDef = replaceExprRef(originalMarkDef); // set orient, which can be overridden by rules as sometimes the specified orient is invalid.

  var specifiedOrient = getMarkPropOrConfig('orient', markDef, config);
  markDef.orient = init_orient(markDef.type, encoding, specifiedOrient);

  if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
    log_warn(orientOverridden(markDef.orient, specifiedOrient));
  }

  if (markDef.type === 'bar' && markDef.orient) {
    var cornerRadiusEnd = getMarkPropOrConfig('cornerRadiusEnd', markDef, config);

    if (cornerRadiusEnd !== undefined) {
      var newProps = markDef.orient === 'horizontal' && encoding.x2 || markDef.orient === 'vertical' && encoding.y2 ? ['cornerRadius'] : BAR_CORNER_RADIUS_INDEX[markDef.orient];

      var _iterator = mark_init_createForOfIteratorHelper(newProps),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var newProp = _step.value;
          markDef[newProp] = cornerRadiusEnd;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (markDef.cornerRadiusEnd !== undefined) {
        delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius
      }
    }
  } // set opacity and filled if not specified in mark config


  var specifiedOpacity = getMarkPropOrConfig('opacity', markDef, config);

  if (specifiedOpacity === undefined) {
    markDef.opacity = opacity(markDef.type, encoding);
  } // set cursor, which should be pointer if href channel is present unless otherwise specified


  var specifiedCursor = getMarkPropOrConfig('cursor', markDef, config);

  if (specifiedCursor === undefined) {
    markDef.cursor = init_cursor(markDef, encoding, config);
  }

  return markDef;
}

function init_cursor(markDef, encoding, config) {
  if (encoding.href || markDef.href || getMarkPropOrConfig('href', markDef, config)) {
    return 'pointer';
  }

  return markDef.cursor;
}

function opacity(mark, encoding) {
  if (util_contains([POINT, TICK, CIRCLE, SQUARE], mark)) {
    // point-based marks
    if (!isAggregate(encoding)) {
      return 0.7;
    }
  }

  return undefined;
}

function defaultFilled(markDef, config, _ref) {
  var graticule = _ref.graticule;

  if (graticule) {
    return false;
  }

  var filledConfig = getMarkConfig('filled', markDef, config);
  var mark = markDef.type;
  return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);
}

function init_orient(mark, encoding, specifiedOrient) {
  switch (mark) {
    case POINT:
    case CIRCLE:
    case SQUARE:
    case mark_TEXT:
    case RECT:
    case IMAGE:
      // orient is meaningless for these marks.
      return undefined;
  }

  var x = encoding.x,
      y = encoding.y,
      x2 = encoding.x2,
      y2 = encoding.y2;

  switch (mark) {
    case BAR:
      if (isFieldDef(x) && (isBinned(x.bin) || isFieldDef(y) && y.aggregate && !x.aggregate)) {
        return 'vertical';
      }

      if (isFieldDef(y) && (isBinned(y.bin) || isFieldDef(x) && x.aggregate && !y.aggregate)) {
        return 'horizontal';
      }

      if (y2 || x2) {
        // Ranged bar does not always have clear orientation, so we allow overriding
        if (specifiedOrient) {
          return specifiedOrient;
        } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field


        if (!x2) {
          if (isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin) || isNumericDataDef(x)) {
            return 'horizontal';
          }
        } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field


        if (!y2) {
          if (isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin) || isNumericDataDef(y)) {
            return 'vertical';
          }
        }
      }

    // falls through

    case RULE:
      // return undefined for line segment rule and bar with both axis ranged
      // we have to ignore the case that the data are already binned
      if (x2 && !(isFieldDef(x) && isBinned(x.bin)) && y2 && !(isFieldDef(y) && isBinned(y.bin))) {
        return undefined;
      }

    // falls through

    case AREA:
      // If there are range for both x and y, y (vertical) has higher precedence.
      if (y2) {
        if (isFieldDef(y) && isBinned(y.bin)) {
          return 'horizontal';
        } else {
          return 'vertical';
        }
      } else if (x2) {
        if (isFieldDef(x) && isBinned(x.bin)) {
          return 'vertical';
        } else {
          return 'horizontal';
        }
      } else if (mark === RULE) {
        if (x && !y) {
          return 'vertical';
        } else if (y && !x) {
          return 'horizontal';
        }
      }

    // falls through

    case LINE:
    case TICK:
      {
        // Tick is opposite to bar, line, area and never have ranged mark.
        var xIsContinuous = isContinuousFieldOrDatumDef(x);
        var yIsContinuous = isContinuousFieldOrDatumDef(y);

        if (specifiedOrient) {
          return specifiedOrient;
        } else if (xIsContinuous && !yIsContinuous) {
          return mark !== 'tick' ? 'horizontal' : 'vertical';
        } else if (!xIsContinuous && yIsContinuous) {
          return mark !== 'tick' ? 'vertical' : 'horizontal';
        } else if (xIsContinuous && yIsContinuous) {
          var xDef = x; // we can cast here since they are surely fieldDef

          var yDef = y;
          var xIsTemporal = xDef.type === TEMPORAL;
          var yIsTemporal = yDef.type === TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension

          if (xIsTemporal && !yIsTemporal) {
            return mark !== 'tick' ? 'vertical' : 'horizontal';
          } else if (!xIsTemporal && yIsTemporal) {
            return mark !== 'tick' ? 'horizontal' : 'vertical';
          }

          if (!xDef.aggregate && yDef.aggregate) {
            return mark !== 'tick' ? 'vertical' : 'horizontal';
          } else if (xDef.aggregate && !yDef.aggregate) {
            return mark !== 'tick' ? 'horizontal' : 'vertical';
          }

          return 'vertical';
        } else {
          return undefined;
        }
      }
  }

  return 'vertical';
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/arc.js


function arc_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function arc_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { arc_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { arc_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var arc_arc = {
  vgMark: 'arc',
  encodeEntry: function encodeEntry(model) {
    return arc_objectSpread(arc_objectSpread(arc_objectSpread(arc_objectSpread(arc_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      size: 'ignore',
      orient: 'ignore',
      theta: 'ignore'
    })), pointPosition('x', model, {
      defaultPos: 'mid'
    })), pointPosition('y', model, {
      defaultPos: 'mid'
    })), rectPosition(model, 'radius', 'arc')), rectPosition(model, 'theta', 'arc'));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/area.js


function area_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function area_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { area_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { area_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var area_area = {
  vgMark: 'area',
  encodeEntry: function encodeEntry(model) {
    return area_objectSpread(area_objectSpread(area_objectSpread(area_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      orient: 'include',
      size: 'ignore',
      theta: 'ignore'
    })), pointOrRangePosition('x', model, {
      defaultPos: 'zeroOrMin',
      defaultPos2: 'zeroOrMin',
      range: model.markDef.orient === 'horizontal'
    })), pointOrRangePosition('y', model, {
      defaultPos: 'zeroOrMin',
      defaultPos2: 'zeroOrMin',
      range: model.markDef.orient === 'vertical'
    })), defined(model));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/bar.js


function bar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function bar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bar_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var bar = {
  vgMark: 'rect',
  encodeEntry: function encodeEntry(model) {
    return bar_objectSpread(bar_objectSpread(bar_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      orient: 'ignore',
      size: 'ignore',
      theta: 'ignore'
    })), rectPosition(model, 'x', 'bar')), rectPosition(model, 'y', 'bar'));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/geoshape.js


function geoshape_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function geoshape_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { geoshape_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { geoshape_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




var geoshape = {
  vgMark: 'shape',
  encodeEntry: function encodeEntry(model) {
    return geoshape_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      size: 'ignore',
      orient: 'ignore',
      theta: 'ignore'
    }));
  },
  postEncodingTransform: function postEncodingTransform(model) {
    var encoding = model.encoding;
    var shapeDef = encoding.shape;

    var transform = geoshape_objectSpread({
      type: 'geoshape',
      projection: model.projectionName()
    }, shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {
      field: channeldef_vgField(shapeDef, {
        expr: 'datum'
      })
    } : {});

    return [transform];
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/image.js


function image_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function image_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { image_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { image_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var image_image = {
  vgMark: 'image',
  encodeEntry: function encodeEntry(model) {
    return image_objectSpread(image_objectSpread(image_objectSpread(image_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'ignore',
      orient: 'ignore',
      size: 'ignore',
      theta: 'ignore'
    })), rectPosition(model, 'x', 'image')), rectPosition(model, 'y', 'image')), text_text(model, 'url'));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/line.js


function line_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function line_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { line_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { line_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var line_line = {
  vgMark: 'line',
  encodeEntry: function encodeEntry(model) {
    return line_objectSpread(line_objectSpread(line_objectSpread(line_objectSpread(line_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      size: 'ignore',
      orient: 'ignore',
      theta: 'ignore'
    })), pointPosition('x', model, {
      defaultPos: 'mid'
    })), pointPosition('y', model, {
      defaultPos: 'mid'
    })), nonPosition('size', model, {
      vgChannel: 'strokeWidth' // VL's line size is strokeWidth

    })), defined(model));
  }
};
var line_trail = {
  vgMark: 'trail',
  encodeEntry: function encodeEntry(model) {
    return line_objectSpread(line_objectSpread(line_objectSpread(line_objectSpread(line_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      size: 'include',
      orient: 'ignore',
      theta: 'ignore'
    })), pointPosition('x', model, {
      defaultPos: 'mid'
    })), pointPosition('y', model, {
      defaultPos: 'mid'
    })), nonPosition('size', model)), defined(model));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/point.js


function point_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function point_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { point_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { point_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



function _encodeEntry(model, fixedShape) {
  var config = model.config;
  return point_objectSpread(point_objectSpread(point_objectSpread(point_objectSpread(point_objectSpread(point_objectSpread({}, baseEncodeEntry(model, {
    align: 'ignore',
    baseline: 'ignore',
    color: 'include',
    size: 'include',
    orient: 'ignore',
    theta: 'ignore'
  })), pointPosition('x', model, {
    defaultPos: 'mid'
  })), pointPosition('y', model, {
    defaultPos: 'mid'
  })), nonPosition('size', model)), nonPosition('angle', model)), shapeMixins(model, config, fixedShape));
}

function shapeMixins(model, config, fixedShape) {
  if (fixedShape) {
    return {
      shape: {
        value: fixedShape
      }
    };
  }

  return nonPosition('shape', model);
}
var mark_point_point = {
  vgMark: 'symbol',
  encodeEntry: function encodeEntry(model) {
    return _encodeEntry(model);
  }
};
var point_circle = {
  vgMark: 'symbol',
  encodeEntry: function encodeEntry(model) {
    return _encodeEntry(model, 'circle');
  }
};
var point_square = {
  vgMark: 'symbol',
  encodeEntry: function encodeEntry(model) {
    return _encodeEntry(model, 'square');
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/rect.js


function rect_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function rect_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { rect_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { rect_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var rect_rect = {
  vgMark: 'rect',
  encodeEntry: function encodeEntry(model) {
    return rect_objectSpread(rect_objectSpread(rect_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      orient: 'ignore',
      size: 'ignore',
      theta: 'ignore'
    })), rectPosition(model, 'x', 'rect')), rectPosition(model, 'y', 'rect'));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/rule.js


function rule_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function rule_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { rule_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { rule_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


var rule_rule = {
  vgMark: 'rule',
  encodeEntry: function encodeEntry(model) {
    var markDef = model.markDef;
    var orient = markDef.orient;

    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
      // Show nothing if we have none of x, y, lat, and long.
      return {};
    }

    return rule_objectSpread(rule_objectSpread(rule_objectSpread(rule_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      orient: 'ignore',
      size: 'ignore',
      theta: 'ignore'
    })), pointOrRangePosition('x', model, {
      defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',
      defaultPos2: 'zeroOrMin',
      range: orient !== 'vertical' // include x2 for horizontal or line segment rule

    })), pointOrRangePosition('y', model, {
      defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',
      defaultPos2: 'zeroOrMin',
      range: orient !== 'horizontal' // include y2 for vertical or line segment rule

    })), nonPosition('size', model, {
      vgChannel: 'strokeWidth' // VL's rule size is strokeWidth

    }));
  }
};
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/text.js


function text_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function text_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { text_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { text_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var mark_text_text = {
  vgMark: 'text',
  encodeEntry: function encodeEntry(model) {
    var config = model.config,
        encoding = model.encoding;
    return text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread(text_objectSpread({}, baseEncodeEntry(model, {
      align: 'include',
      baseline: 'include',
      color: 'include',
      size: 'ignore',
      orient: 'ignore',
      theta: 'include'
    })), pointPosition('x', model, {
      defaultPos: 'mid'
    })), pointPosition('y', model, {
      defaultPos: 'mid'
    })), text_text(model)), nonPosition('size', model, {
      vgChannel: 'fontSize' // VL's text size is fontSize

    })), nonPosition('angle', model)), valueIfDefined('align', align(model.markDef, encoding, config))), valueIfDefined('baseline', text_baseline(model.markDef, encoding, config))), pointPosition('radius', model, {
      defaultPos: null
    })), pointPosition('theta', model, {
      defaultPos: null
    }));
  }
};

function align(markDef, encoding, config) {
  var a = getMarkPropOrConfig('align', markDef, config);

  if (a === undefined) {
    return 'center';
  } // If there is a config, Vega-parser will process this already.


  return undefined;
}

function text_baseline(markDef, encoding, config) {
  var b = getMarkPropOrConfig('baseline', markDef, config);

  if (b === undefined) {
    return 'middle';
  } // If there is a config, Vega-parser will process this already.


  return undefined;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/tick.js


function tick_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function tick_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tick_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tick_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






var tick = {
  vgMark: 'rect',
  encodeEntry: function encodeEntry(model) {
    var config = model.config,
        markDef = model.markDef;
    var orient = markDef.orient;
    var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
    var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
    return tick_objectSpread(tick_objectSpread(tick_objectSpread(tick_objectSpread(tick_objectSpread({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      orient: 'ignore',
      size: 'ignore',
      theta: 'ignore'
    })), pointPosition('x', model, {
      defaultPos: 'mid',
      vgChannel: 'xc'
    })), pointPosition('y', model, {
      defaultPos: 'mid',
      vgChannel: 'yc'
    })), nonPosition('size', model, {
      defaultValue: defaultSize(model),
      vgChannel: vgSizeChannel
    })), {}, (0,defineProperty/* default */.Z)({}, vgThicknessChannel, signalOrValueRef(getMarkPropOrConfig('thickness', markDef, config))));
  }
};

function defaultSize(model) {
  var _getMarkPropOrConfig;

  var config = model.config,
      markDef = model.markDef;
  var orient = markDef.orient;
  var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
  var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
  var markPropOrConfig = (_getMarkPropOrConfig = getMarkPropOrConfig('size', markDef, config, {
    vgChannel: vgSizeChannel
  })) !== null && _getMarkPropOrConfig !== void 0 ? _getMarkPropOrConfig : config.tick.bandSize;

  if (markPropOrConfig !== undefined) {
    return markPropOrConfig;
  } else {
    var scaleRange = scale ? scale.get('range') : undefined;

    if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
      return scaleRange.step * 3 / 4;
    }

    var defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);
    return defaultViewStep * 3 / 4;
  }
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/mark/mark.js




function mark_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mark_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function mark_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mark_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mark_arrayLikeToArray(o, minLen); }

function mark_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function mark_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function mark_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { mark_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { mark_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





















var markCompiler = {
  arc: arc_arc,
  area: area_area,
  bar: bar,
  circle: point_circle,
  geoshape: geoshape,
  image: image_image,
  line: line_line,
  point: mark_point_point,
  rect: rect_rect,
  rule: rule_rule,
  square: point_square,
  text: mark_text_text,
  tick: tick,
  trail: line_trail
};
function parseMarkGroups(model) {
  if (util_contains([LINE, AREA, TRAIL], model.mark)) {
    var details = pathGroupingFields(model.mark, model.encoding);

    if (details.length > 0) {
      return getPathGroups(model, details);
    } // otherwise use standard mark groups

  } else if (model.mark === BAR) {
    var hasCornerRadius = VG_CORNERRADIUS_CHANNELS.some(function (prop) {
      return getMarkPropOrConfig(prop, model.markDef, model.config);
    });

    if (model.stack && !model.fieldDef('size') && hasCornerRadius) {
      return getGroupsForStackedBarWithCornerRadius(model);
    }
  }

  return getMarkGroup(model);
}
var FACETED_PATH_PREFIX = 'faceted_path_';

function getPathGroups(model, details) {
  // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
  return [{
    name: model.getName('pathgroup'),
    type: 'group',
    from: {
      facet: {
        name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),
        data: model.requestDataName(DataSourceType.Main),
        groupby: details
      }
    },
    encode: {
      update: {
        width: {
          field: {
            group: 'width'
          }
        },
        height: {
          field: {
            group: 'height'
          }
        }
      }
    },
    // With subfacet for line/area group, need to use faceted data from above.
    marks: getMarkGroup(model, {
      fromPrefix: FACETED_PATH_PREFIX
    })
  }];
}

var STACK_GROUP_PREFIX = 'stack_group_';
/**
 * We need to put stacked bars into groups in order to enable cornerRadius for stacks.
 * If stack is used and the model doesn't have size encoding, we put the mark into groups,
 * and apply cornerRadius properties at the group.
 */

function getGroupsForStackedBarWithCornerRadius(model) {
  // Generate the mark
  var _getMarkGroup = getMarkGroup(model, {
    fromPrefix: STACK_GROUP_PREFIX
  }),
      _getMarkGroup2 = (0,slicedToArray/* default */.Z)(_getMarkGroup, 1),
      mark = _getMarkGroup2[0]; // Get the scale for the stacked field


  var fieldScale = model.scaleName(model.stack.fieldChannel);

  var stackField = function stackField() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return model.vgField(model.stack.fieldChannel, opt);
  }; // Find the min/max of the pixel value on the stacked direction


  var stackFieldGroup = function stackFieldGroup(func, expr) {
    var vgFieldMinMax = [stackField({
      prefix: 'min',
      suffix: 'start',
      expr: expr
    }), stackField({
      prefix: 'max',
      suffix: 'start',
      expr: expr
    }), stackField({
      prefix: 'min',
      suffix: 'end',
      expr: expr
    }), stackField({
      prefix: 'max',
      suffix: 'end',
      expr: expr
    })];
    return "".concat(func, "(").concat(vgFieldMinMax.map(function (field) {
      return "scale('".concat(fieldScale, "',").concat(field, ")");
    }).join(','), ")");
  };

  var groupUpdate;
  var innerGroupUpdate; // Build the encoding for group and an inner group

  if (model.stack.fieldChannel === 'x') {
    // Move cornerRadius, y/yc/y2/height properties to group
    // Group x/x2 should be the min/max of the marks within
    groupUpdate = mark_objectSpread(mark_objectSpread({}, util_pick(mark.encode.update, ['y', 'yc', 'y2', 'height'].concat((0,toConsumableArray/* default */.Z)(VG_CORNERRADIUS_CHANNELS)))), {}, {
      x: {
        signal: stackFieldGroup('min', 'datum')
      },
      x2: {
        signal: stackFieldGroup('max', 'datum')
      },
      clip: {
        value: true
      }
    }); // Inner group should revert the x translation, and pass height through

    innerGroupUpdate = {
      x: {
        field: {
          group: 'x'
        },
        mult: -1
      },
      height: {
        field: {
          group: 'height'
        }
      }
    }; // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)
    // This is why size encoding is not supported yet

    mark.encode.update = mark_objectSpread(mark_objectSpread({}, omit(mark.encode.update, ['y', 'yc', 'y2'])), {}, {
      height: {
        field: {
          group: 'height'
        }
      }
    });
  } else {
    groupUpdate = mark_objectSpread(mark_objectSpread({}, util_pick(mark.encode.update, ['x', 'xc', 'x2', 'width'])), {}, {
      y: {
        signal: stackFieldGroup('min', 'datum')
      },
      y2: {
        signal: stackFieldGroup('max', 'datum')
      },
      clip: {
        value: true
      }
    });
    innerGroupUpdate = {
      y: {
        field: {
          group: 'y'
        },
        mult: -1
      },
      width: {
        field: {
          group: 'width'
        }
      }
    };
    mark.encode.update = mark_objectSpread(mark_objectSpread({}, omit(mark.encode.update, ['x', 'xc', 'x2'])), {}, {
      width: {
        field: {
          group: 'width'
        }
      }
    });
  } // Deal with cornerRadius properties


  var _iterator = mark_createForOfIteratorHelper(VG_CORNERRADIUS_CHANNELS),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      var configValue = getMarkConfig(key, model.markDef, model.config); // Move from mark to group

      if (mark.encode.update[key]) {
        groupUpdate[key] = mark.encode.update[key];
        delete mark.encode.update[key];
      } else if (configValue) {
        groupUpdate[key] = signalOrValueRef(configValue);
      } // Overwrite any cornerRadius on mark set by config --- they are already moved to the group


      if (configValue) {
        mark.encode.update[key] = {
          value: 0
        };
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var groupby = [];

  if (model.stack.groupbyChannel) {
    // For bin and time unit, we have to add bin/timeunit -end channels.
    var groupByField = model.fieldDef(model.stack.groupbyChannel);
    var field = channeldef_vgField(groupByField);

    if (field) {
      groupby.push(field);
    }

    if (groupByField !== null && groupByField !== void 0 && groupByField.bin || groupByField !== null && groupByField !== void 0 && groupByField.timeUnit) {
      groupby.push(channeldef_vgField(groupByField, {
        binSuffix: 'end'
      }));
    }
  }

  var strokeProperties = ['stroke', 'strokeWidth', 'strokeJoin', 'strokeCap', 'strokeDash', 'strokeDashOffset', 'strokeMiterLimit', 'strokeOpacity']; // Generate stroke properties for the group

  groupUpdate = strokeProperties.reduce(function (encode, prop) {
    if (mark.encode.update[prop]) {
      return mark_objectSpread(mark_objectSpread({}, encode), {}, (0,defineProperty/* default */.Z)({}, prop, mark.encode.update[prop]));
    } else {
      var configValue = getMarkConfig(prop, model.markDef, model.config);

      if (configValue !== undefined) {
        return mark_objectSpread(mark_objectSpread({}, encode), {}, (0,defineProperty/* default */.Z)({}, prop, signalOrValueRef(configValue)));
      } else {
        return encode;
      }
    }
  }, groupUpdate); // Apply strokeForeground and strokeOffset if stroke is used

  if (groupUpdate.stroke) {
    groupUpdate.strokeForeground = {
      value: true
    };
    groupUpdate.strokeOffset = {
      value: 0
    };
  }

  return [{
    type: 'group',
    from: {
      facet: {
        data: model.requestDataName(DataSourceType.Main),
        name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),
        groupby: groupby,
        aggregate: {
          fields: [stackField({
            suffix: 'start'
          }), stackField({
            suffix: 'start'
          }), stackField({
            suffix: 'end'
          }), stackField({
            suffix: 'end'
          })],
          ops: ['min', 'max', 'min', 'max']
        }
      }
    },
    encode: {
      update: groupUpdate
    },
    marks: [{
      type: 'group',
      encode: {
        update: innerGroupUpdate
      },
      marks: [mark]
    }]
  }];
}

function mark_getSort(model) {
  var encoding = model.encoding,
      stack = model.stack,
      mark = model.mark,
      markDef = model.markDef,
      config = model.config;
  var order = encoding.order;

  if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig('order', markDef, config))) {
    return undefined;
  } else if ((isArray(order) || isFieldDef(order)) && !stack) {
    // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
    return sortParams(order, {
      expr: 'datum'
    });
  } else if (isPathMark(mark)) {
    // For both line and area, we sort values based on dimension by default
    var dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
    var dimensionChannelDef = encoding[dimensionChannel];

    if (isFieldDef(dimensionChannelDef)) {
      var s = dimensionChannelDef.sort;

      if (isArray(s)) {
        return {
          field: channeldef_vgField(dimensionChannelDef, {
            prefix: dimensionChannel,
            suffix: 'sort_index',
            expr: 'datum'
          })
        };
      } else if (isSortField(s)) {
        return {
          field: channeldef_vgField({
            // FIXME: this op might not already exist?
            // FIXME: what if dimensionChannel (x or y) contains custom domain?
            aggregate: isAggregate(model.encoding) ? s.op : undefined,
            field: s.field
          }, {
            expr: 'datum'
          })
        };
      } else if (isSortByEncoding(s)) {
        var fieldDefToSort = model.fieldDef(s.encoding);
        return {
          field: channeldef_vgField(fieldDefToSort, {
            expr: 'datum'
          }),
          order: s.order
        };
      } else if (s === null) {
        return undefined;
      } else {
        return {
          field: channeldef_vgField(dimensionChannelDef, {
            // For stack with imputation, we only have bin_mid
            binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
            expr: 'datum'
          })
        };
      }
    }

    return undefined;
  }

  return undefined;
}

function getMarkGroup(model) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    fromPrefix: ''
  };
  var mark = model.mark,
      markDef = model.markDef,
      encoding = model.encoding,
      config = model.config;
  var clip = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));
  var style = getStyles(markDef);
  var key = encoding.key;
  var sort = mark_getSort(model);
  var interactive = interactiveFlag(model);
  var aria = getMarkPropOrConfig('aria', markDef, config);
  var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
  return [mark_objectSpread(mark_objectSpread(mark_objectSpread(mark_objectSpread(mark_objectSpread(mark_objectSpread(mark_objectSpread({
    name: model.getName('marks'),
    type: markCompiler[mark].vgMark
  }, clip ? {
    clip: true
  } : {}), style ? {
    style: style
  } : {}), key ? {
    key: key.field
  } : {}), sort ? {
    sort: sort
  } : {}), interactive ? interactive : {}), aria === false ? {
    aria: aria
  } : {}), {}, {
    from: {
      data: opt.fromPrefix + model.requestDataName(DataSourceType.Main)
    },
    encode: {
      update: markCompiler[mark].encodeEntry(model)
    }
  }, postEncodingTransform ? {
    transform: postEncodingTransform
  } : {})];
}
/**
 * If scales are bound to interval selections, we want to automatically clip
 * marks to account for panning/zooming interactions. We identify bound scales
 * by the selectionExtent property, which gets added during scale parsing.
 */


function scaleClip(model) {
  var xScale = model.getScaleComponent('x');
  var yScale = model.getScaleComponent('y');
  return xScale && xScale.get('selectionExtent') || yScale && yScale.get('selectionExtent') ? true : undefined;
}
/**
 * If we use a custom projection with auto-fitting to the geodata extent,
 * we need to clip to ensure the chart size doesn't explode.
 */


function projectionClip(model) {
  var projection = model.component.projection;
  return projection && !projection.isFit ? true : undefined;
}
/**
 * Only output interactive flags if we have selections defined somewhere in our model hierarchy.
 */


function interactiveFlag(model) {
  if (!model.component.selection) return null;
  var unitCount = util_keys(model.component.selection).length;
  var parentCount = unitCount;
  var parent = model.parent;

  while (parent && parentCount === 0) {
    parentCount = util_keys(parent.component.selection).length;
    parent = parent.parent;
  }

  return parentCount ? {
    interactive: unitCount > 0 || !!model.encoding.tooltip
  } : null;
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/unit.js








function unit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = unit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function unit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return unit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return unit_arrayLikeToArray(o, minLen); }

function unit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function unit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function unit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { unit_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { unit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function unit_createSuper(Derived) { var hasNativeReflectConstruct = unit_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function unit_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


























/**
 * Internal model of Vega-Lite specification for the compiler.
 */

var UnitModel = /*#__PURE__*/function (_ModelWithField) {
  (0,inherits/* default */.Z)(UnitModel, _ModelWithField);

  var _super = unit_createSuper(UnitModel);

  function UnitModel(spec, parent, parentGivenName) {
    var _spec$params;

    var _this;

    var parentGivenSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var config = arguments.length > 4 ? arguments[4] : undefined;

    (0,classCallCheck/* default */.Z)(this, UnitModel);

    _this = _super.call(this, spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);
    _this.specifiedScales = {};
    _this.specifiedAxes = {};
    _this.specifiedLegends = {};
    _this.specifiedProjection = {};
    _this.selection = [];
    _this.children = [];
    var markDef = isMarkDef(spec.mark) ? unit_objectSpread({}, spec.mark) : {
      type: spec.mark
    };
    var mark = markDef.type; // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding

    if (markDef.filled === undefined) {
      markDef.filled = defaultFilled(markDef, config, {
        graticule: spec.data && isGraticuleGenerator(spec.data)
      });
    }

    var encoding = _this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config);
    _this.markDef = initMarkdef(markDef, encoding, config);
    _this.size = initLayoutSize({
      encoding: encoding,
      size: isFrameMixins(spec) ? unit_objectSpread(unit_objectSpread(unit_objectSpread({}, parentGivenSize), spec.width ? {
        width: spec.width
      } : {}), spec.height ? {
        height: spec.height
      } : {}) : parentGivenSize
    }); // calculate stack properties

    _this.stack = stack(mark, encoding);
    _this.specifiedScales = _this.initScales(mark, encoding);
    _this.specifiedAxes = _this.initAxes(encoding);
    _this.specifiedLegends = _this.initLegends(encoding);
    _this.specifiedProjection = spec.projection; // Selections will be initialized upon parse.

    _this.selection = ((_spec$params = spec.params) !== null && _spec$params !== void 0 ? _spec$params : []).filter(function (p) {
      return isSelectionParameter(p);
    });
    return _this;
  }

  (0,createClass/* default */.Z)(UnitModel, [{
    key: "hasProjection",
    get: function get() {
      var encoding = this.encoding;
      var isGeoShapeMark = this.mark === GEOSHAPE;
      var hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(function (channel) {
        return isFieldOrDatumDef(encoding[channel]);
      });
      return isGeoShapeMark || hasGeoPosition;
    }
    /**
     * Return specified Vega-Lite scale domain for a particular channel
     * @param channel
     */

  }, {
    key: "scaleDomain",
    value: function scaleDomain(channel) {
      var scale = this.specifiedScales[channel];
      return scale ? scale.domain : undefined;
    }
  }, {
    key: "axis",
    value: function axis(channel) {
      return this.specifiedAxes[channel];
    }
  }, {
    key: "legend",
    value: function legend(channel) {
      return this.specifiedLegends[channel];
    }
  }, {
    key: "initScales",
    value: function initScales(mark, encoding) {
      var _this2 = this;

      return SCALE_CHANNELS.reduce(function (scales, channel) {
        var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);

        if (fieldOrDatumDef) {
          var _fieldOrDatumDef$scal;

          scales[channel] = _this2.initScale((_fieldOrDatumDef$scal = fieldOrDatumDef.scale) !== null && _fieldOrDatumDef$scal !== void 0 ? _fieldOrDatumDef$scal : {});
        }

        return scales;
      }, {});
    }
  }, {
    key: "initScale",
    value: function initScale(scale) {
      var domain = scale.domain,
          range = scale.range; // TODO: we could simplify this function if we had a recursive replace function

      var scaleInternal = replaceExprRef(scale);

      if (isArray(domain)) {
        scaleInternal.domain = domain.map(signalRefOrValue);
      }

      if (isArray(range)) {
        scaleInternal.range = range.map(signalRefOrValue);
      }

      return scaleInternal;
    }
  }, {
    key: "initAxes",
    value: function initAxes(encoding) {
      var _this3 = this;

      return POSITION_SCALE_CHANNELS.reduce(function (_axis, channel) {
        // Position Axis
        // TODO: handle ConditionFieldDef
        var channelDef = encoding[channel];

        if (isFieldOrDatumDef(channelDef) || channel === channel_X && isFieldOrDatumDef(encoding.x2) || channel === channel_Y && isFieldOrDatumDef(encoding.y2)) {
          var axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;
          _axis[channel] = axisSpec ? _this3.initAxis(unit_objectSpread({}, axisSpec)) // convert truthy value to object
          : axisSpec;
        }

        return _axis;
      }, {});
    }
  }, {
    key: "initAxis",
    value: function initAxis(axis) {
      var props = util_keys(axis);
      var axisInternal = {};

      var _iterator = unit_createForOfIteratorHelper(props),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var prop = _step.value;
          var val = axis[prop];
          axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return axisInternal;
    }
  }, {
    key: "initLegends",
    value: function initLegends(encoding) {
      return NONPOSITION_SCALE_CHANNELS.reduce(function (_legend, channel) {
        var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);

        if (fieldOrDatumDef && supportLegend(channel)) {
          var legend = fieldOrDatumDef.legend;
          _legend[channel] = legend ? replaceExprRef(legend) // convert truthy value to object
          : legend;
        }

        return _legend;
      }, {});
    }
  }, {
    key: "parseData",
    value: function parseData() {
      this.component.data = parse_parseData(this);
    }
  }, {
    key: "parseLayoutSize",
    value: function parseLayoutSize() {
      parseUnitLayoutSize(this);
    }
  }, {
    key: "parseSelections",
    value: function parseSelections() {
      this.component.selection = parseUnitSelection(this, this.selection);
    }
  }, {
    key: "parseMarkGroup",
    value: function parseMarkGroup() {
      this.component.mark = parseMarkGroups(this);
    }
  }, {
    key: "parseAxesAndHeaders",
    value: function parseAxesAndHeaders() {
      this.component.axes = parseUnitAxes(this);
    }
  }, {
    key: "assembleSelectionTopLevelSignals",
    value: function assembleSelectionTopLevelSignals(signals) {
      return assembleTopLevelSignals(this, signals);
    }
  }, {
    key: "assembleSignals",
    value: function assembleSignals() {
      return [].concat((0,toConsumableArray/* default */.Z)(assembleAxisSignals(this)), (0,toConsumableArray/* default */.Z)(assembleUnitSelectionSignals(this, [])));
    }
  }, {
    key: "assembleSelectionData",
    value: function assembleSelectionData(data) {
      return assembleUnitSelectionData(this, data);
    }
  }, {
    key: "assembleLayout",
    value: function assembleLayout() {
      return null;
    }
  }, {
    key: "assembleLayoutSignals",
    value: function assembleLayoutSignals() {
      return assemble_assembleLayoutSignals(this);
    }
  }, {
    key: "assembleMarks",
    value: function assembleMarks() {
      var _this$component$mark;

      var marks = (_this$component$mark = this.component.mark) !== null && _this$component$mark !== void 0 ? _this$component$mark : []; // If this unit is part of a layer, selections should augment
      // all in concert rather than each unit individually. This
      // ensures correct interleaving of clipping and brushed marks.

      if (!this.parent || !isLayerModel(this.parent)) {
        marks = assembleUnitSelectionMarks(this, marks);
      }

      return marks.map(this.correctDataNames);
    }
  }, {
    key: "getMapping",
    value: function getMapping() {
      return this.encoding;
    }
  }, {
    key: "mark",
    get: function get() {
      return this.markDef.type;
    }
  }, {
    key: "channelHasField",
    value: function channelHasField(channel) {
      return encoding_channelHasField(this.encoding, channel);
    }
  }, {
    key: "fieldDef",
    value: function fieldDef(channel) {
      var channelDef = this.encoding[channel];
      return getFieldDef(channelDef);
    }
  }, {
    key: "typedFieldDef",
    value: function typedFieldDef(channel) {
      var fieldDef = this.fieldDef(channel);

      if (isTypedFieldDef(fieldDef)) {
        return fieldDef;
      }

      return null;
    }
  }]);

  return UnitModel;
}(ModelWithField);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/layer.js











function layer_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = layer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function layer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return layer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return layer_arrayLikeToArray(o, minLen); }

function layer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function layer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function layer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { layer_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { layer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function layer_createSuper(Derived) { var hasNativeReflectConstruct = layer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function layer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













var LayerModel = /*#__PURE__*/function (_Model) {
  (0,inherits/* default */.Z)(LayerModel, _Model);

  var _super = layer_createSuper(LayerModel);

  function LayerModel(spec, parent, parentGivenName, parentGivenSize, config) {
    var _this;

    (0,classCallCheck/* default */.Z)(this, LayerModel);

    _this = _super.call(this, spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);

    var layoutSize = layer_objectSpread(layer_objectSpread(layer_objectSpread({}, parentGivenSize), spec.width ? {
      width: spec.width
    } : {}), spec.height ? {
      height: spec.height
    } : {});

    _this.children = spec.layer.map(function (layer, i) {
      if (isLayerSpec(layer)) {
        return new LayerModel(layer, (0,assertThisInitialized/* default */.Z)(_this), _this.getName("layer_".concat(i)), layoutSize, config);
      } else if (isUnitSpec(layer)) {
        return new UnitModel(layer, (0,assertThisInitialized/* default */.Z)(_this), _this.getName("layer_".concat(i)), layoutSize, config);
      }

      throw new Error(invalidSpec(layer));
    });
    return _this;
  }

  (0,createClass/* default */.Z)(LayerModel, [{
    key: "parseData",
    value: function parseData() {
      this.component.data = parse_parseData(this);

      var _iterator = layer_createForOfIteratorHelper(this.children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          child.parseData();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "parseLayoutSize",
    value: function parseLayoutSize() {
      parseLayerLayoutSize(this);
    }
  }, {
    key: "parseSelections",
    value: function parseSelections() {
      // Merge selections up the hierarchy so that they may be referenced
      // across unit specs. Persist their definitions within each child
      // to assemble signals which remain within output Vega unit groups.
      this.component.selection = {};

      var _iterator2 = layer_createForOfIteratorHelper(this.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          child.parseSelections();

          var _iterator3 = layer_createForOfIteratorHelper(util_keys(child.component.selection)),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var key = _step3.value;
              this.component.selection[key] = child.component.selection[key];
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "parseMarkGroup",
    value: function parseMarkGroup() {
      var _iterator4 = layer_createForOfIteratorHelper(this.children),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;
          child.parseMarkGroup();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "parseAxesAndHeaders",
    value: function parseAxesAndHeaders() {
      parseLayerAxes(this);
    }
  }, {
    key: "assembleSelectionTopLevelSignals",
    value: function assembleSelectionTopLevelSignals(signals) {
      return this.children.reduce(function (sg, child) {
        return child.assembleSelectionTopLevelSignals(sg);
      }, signals);
    } // TODO: Support same named selections across children.

  }, {
    key: "assembleSignals",
    value: function assembleSignals() {
      return this.children.reduce(function (signals, child) {
        return signals.concat(child.assembleSignals());
      }, assembleAxisSignals(this));
    }
  }, {
    key: "assembleLayoutSignals",
    value: function assembleLayoutSignals() {
      return this.children.reduce(function (signals, child) {
        return signals.concat(child.assembleLayoutSignals());
      }, assemble_assembleLayoutSignals(this));
    }
  }, {
    key: "assembleSelectionData",
    value: function assembleSelectionData(data) {
      return this.children.reduce(function (db, child) {
        return child.assembleSelectionData(db);
      }, data);
    }
  }, {
    key: "assembleTitle",
    value: function assembleTitle() {
      var title = (0,esm_get/* default */.Z)((0,getPrototypeOf/* default */.Z)(LayerModel.prototype), "assembleTitle", this).call(this);

      if (title) {
        return title;
      } // If title does not provide layer, look into children


      var _iterator5 = layer_createForOfIteratorHelper(this.children),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var child = _step5.value;
          title = child.assembleTitle();

          if (title) {
            return title;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return undefined;
    }
  }, {
    key: "assembleLayout",
    value: function assembleLayout() {
      return null;
    }
  }, {
    key: "assembleMarks",
    value: function assembleMarks() {
      return assembleLayerSelectionMarks(this, this.children.flatMap(function (child) {
        return child.assembleMarks();
      }));
    }
  }, {
    key: "assembleLegends",
    value: function assembleLegends() {
      return this.children.reduce(function (legends, child) {
        return legends.concat(child.assembleLegends());
      }, assemble_assembleLegends(this));
    }
  }]);

  return LayerModel;
}(Model);
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/buildmodel.js






function buildModel(spec, parent, parentGivenName, unitSize, config) {
  if (isFacetSpec(spec)) {
    return new FacetModel(spec, parent, parentGivenName, config);
  } else if (isLayerSpec(spec)) {
    return new LayerModel(spec, parent, parentGivenName, unitSize, config);
  } else if (isUnitSpec(spec)) {
    return new UnitModel(spec, parent, parentGivenName, unitSize, config);
  } else if (isAnyConcatSpec(spec)) {
    return new ConcatModel(spec, parent, parentGivenName, config);
  }

  throw new Error(invalidSpec(spec));
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/compile/compile.js



var compile_excluded = ["params"];

function compile_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function compile_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { compile_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { compile_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }













/**
 * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.
 *
 * At a high-level, we make the following transformations in different phases:
 *
 * Input spec
 *     |
 *     |  (Normalization)
 *     v
 * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)
 *     |
 *     |  (Build Model)
 *     v
 * A model tree of the spec
 *     |
 *     |  (Parse)
 *     v
 * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
 *     |
 *     | (Optimize)
 *     v
 * A model tree with parsed components with the data component optimized
 *     |
 *     | (Assemble)
 *     v
 * Vega spec
 *
 * @param inputSpec The Vega-Lite specification.
 * @param opt       Optional arguments passed to the Vega-Lite compiler.
 * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.
 */

function compile(inputSpec) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // 0. Augment opt with default opts
  if (opt.logger) {
    // set the singleton logger to the provided logger
    log_set(opt.logger);
  }

  if (opt.fieldTitle) {
    // set the singleton field title formatter
    setTitleFormatter(opt.fieldTitle);
  }

  try {
    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
    var config = initConfig(mergeConfig(opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec
    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
    // - Normalize autosize and width or height spec

    var spec = normalize_normalize(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)
    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.

    var model = buildModel(spec, null, '', undefined, config); // 4 Parse: Model --> Model with components
    // Note that components = intermediate representations that are equivalent to Vega specs.
    // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
    // We will later convert these components into actual Vega specs in the assemble phase.
    // In this phase, we do a bottom-up traversal over the whole tree to
    // parse for each type of components once (e.g., data, layout, mark, scale).
    // By doing bottom-up traversal, we start parsing components of unit specs and
    // then merge child components of parent composite specs.
    //
    // Please see inside model.parse() for order of different components parsed.

    model.parse(); // drawDataflow(model.component.data.sources);
    // 5. Optimize the dataflow. This will modify the data component of the model.

    optimizeDataflow(model.component.data, model); // drawDataflow(model.component.data.sources);
    // 6. Assemble: convert model components --> Vega Spec.

    var vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
    return {
      spec: vgSpec,
      normalized: spec
    };
  } finally {
    // Reset the singleton logger if a logger is provided
    if (opt.logger) {
      log_reset();
    } // Reset the singleton field title formatter if provided


    if (opt.fieldTitle) {
      resetTitleFormatter();
    }
  }
}

function getTopLevelProperties(inputSpec, autosize, config, model) {
  var width = model.component.layoutSize.get('width');
  var height = model.component.layoutSize.get('height');

  if (autosize === undefined) {
    autosize = {
      type: 'pad'
    };

    if (model.hasAxisOrientSignalRef()) {
      autosize.resize = true;
    }
  } else if (isString(autosize)) {
    autosize = {
      type: autosize
    };
  }

  if (width && height && isFitType(autosize.type)) {
    if (width === 'step' && height === 'step') {
      log_warn(droppingFit());
      autosize.type = 'pad';
    } else if (width === 'step' || height === 'step') {
      // effectively XOR, because else if
      // get step dimension
      var sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel

      log_warn(droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)

      var inverseSizeType = sizeType === 'width' ? 'height' : 'width';
      autosize.type = getFitType(inverseSizeType);
    }
  }

  return compile_objectSpread(compile_objectSpread(compile_objectSpread({}, util_keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {
    autosize: autosize.type
  } : {
    autosize: autosize
  }), extractTopLevelProperties(config, false)), extractTopLevelProperties(inputSpec, true));
}
/*
 * Assemble the top-level model to a Vega spec.
 *
 * Note: this couldn't be `model.assemble()` since the top-level model
 * needs some special treatment to generate top-level properties.
 */


function assembleTopLevelModel(model, topLevelProperties) {
  var datasets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var usermeta = arguments.length > 3 ? arguments[3] : undefined;
  // Config with Vega-Lite only config removed.
  var vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;
  var data = [].concat(model.assembleSelectionData([]), // only assemble data in the root
  assembleRootData(model.component.data, datasets));
  var projections = model.assembleProjections();
  var title = model.assembleTitle();
  var style = model.assembleGroupStyle();
  var encodeEntry = model.assembleGroupEncodeEntry(true);
  var layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level

  layoutSignals = layoutSignals.filter(function (signal) {
    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
      topLevelProperties[signal.name] = +signal.value;
      return false;
    }

    return true;
  });

  var params = topLevelProperties.params,
      otherTopLevelProps = (0,objectWithoutProperties/* default */.Z)(topLevelProperties, compile_excluded);

  return compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread(compile_objectSpread({
    $schema: 'https://vega.github.io/schema/vega/v5.json'
  }, model.description ? {
    description: model.description
  } : {}), otherTopLevelProps), title ? {
    title: title
  } : {}), style ? {
    style: style
  } : {}), encodeEntry ? {
    encode: {
      update: encodeEntry
    }
  } : {}), {}, {
    data: data
  }, projections.length > 0 ? {
    projections: projections
  } : {}), model.assembleGroup([].concat((0,toConsumableArray/* default */.Z)(layoutSignals), (0,toConsumableArray/* default */.Z)(model.assembleSelectionTopLevelSignals([])), (0,toConsumableArray/* default */.Z)(assembleParameterSignals(params))))), vgConfig ? {
    config: vgConfig
  } : {}), usermeta ? {
    usermeta: usermeta
  } : {});
}
;// CONCATENATED MODULE: ./node_modules/vega-lite/build/src/index.js

var src_version = package_namespaceObject.i8;



;// CONCATENATED MODULE: ./node_modules/vega-schema-url-parser/dist/parser.module.js


function e(e) {
  var _$exec$slice = /schema\/([\w-]+)\/([\w\.\-]+)\.json$/g.exec(e).slice(1, 3),
      _$exec$slice2 = (0,slicedToArray/* default */.Z)(_$exec$slice, 2),
      n = _$exec$slice2[0],
      r = _$exec$slice2[1];

  return {
    library: n,
    version: r
  };
}

/* harmony default export */ var parser_module = (e);
;// CONCATENATED MODULE: ./node_modules/vega-themes/build/vega-themes.module.js
var vega_themes_module_name = "vega-themes";
var vega_themes_module_version = "2.10.0";
var vega_themes_module_description = "Themes for stylized Vega and Vega-Lite visualizations.";
var vega_themes_module_keywords = ["vega", "vega-lite", "themes", "style"];
var vega_themes_module_license = "BSD-3-Clause";
var vega_themes_module_author = {
  name: "UW Interactive Data Lab",
  url: "https://idl.cs.washington.edu"
};
var contributors = [{
  name: "Emily Gu",
  url: "https://github.com/emilygu"
}, {
  name: "Arvind Satyanarayan",
  url: "http://arvindsatya.com"
}, {
  name: "Jeffrey Heer",
  url: "https://idl.cs.washington.edu"
}, {
  name: "Dominik Moritz",
  url: "https://www.domoritz.de"
}];
var vega_themes_module_main = "build/vega-themes.js";
var vega_themes_module_module = "build/vega-themes.module.js";
var vega_themes_module_unpkg = "build/vega-themes.min.js";
var vega_themes_module_jsdelivr = "build/vega-themes.min.js";
var vega_themes_module_types = "build/vega-themes.module.d.ts";
var vega_themes_module_repository = {
  type: "git",
  url: "https://github.com/vega/vega-themes.git"
};
var files = ["src", "build"];
var vega_themes_module_scripts = {
  prebuild: "yarn clean",
  build: "rollup -c",
  clean: "rimraf build && rimraf examples/build",
  "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
  "copy:build": "rsync -r build/* examples/build",
  "deploy:gh": "yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",
  prepublishOnly: "yarn clean && yarn build",
  preversion: "yarn lint",
  serve: "browser-sync start -s -f build examples --serveStatic examples",
  start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
  prepare: "beemo create-config",
  eslintbase: "beemo eslint .",
  format: "yarn eslintbase --fix",
  lint: "yarn eslintbase"
};
var vega_themes_module_devDependencies = {
  "@rollup/plugin-json": "^4.1.0",
  "@rollup/plugin-node-resolve": "^11.2.0",
  "@wessberg/rollup-plugin-ts": "^1.3.8",
  "browser-sync": "^2.26.14",
  concurrently: "^6.0.0",
  "gh-pages": "^3.1.0",
  rollup: "^2.39.1",
  "rollup-plugin-bundle-size": "^1.0.3",
  "rollup-plugin-terser": "^7.0.2",
  typescript: "^4.2.2",
  vega: "^5.19.1",
  "vega-lite": "^5.0.0",
  "vega-lite-dev-config": "^0.16.1"
};
var peerDependencies = {
  vega: "*",
  "vega-lite": "*"
};
var vega_themes_module_pkg = {
  name: vega_themes_module_name,
  version: vega_themes_module_version,
  description: vega_themes_module_description,
  keywords: vega_themes_module_keywords,
  license: vega_themes_module_license,
  author: vega_themes_module_author,
  contributors: contributors,
  main: vega_themes_module_main,
  module: vega_themes_module_module,
  unpkg: vega_themes_module_unpkg,
  jsdelivr: vega_themes_module_jsdelivr,
  types: vega_themes_module_types,
  repository: vega_themes_module_repository,
  files: files,
  scripts: vega_themes_module_scripts,
  devDependencies: vega_themes_module_devDependencies,
  peerDependencies: peerDependencies
};
var lightColor = '#fff';
var medColor = '#888';
var darkTheme = {
  background: '#333',
  title: {
    color: lightColor,
    subtitleColor: lightColor
  },
  style: {
    'guide-label': {
      fill: lightColor
    },
    'guide-title': {
      fill: lightColor
    }
  },
  axis: {
    domainColor: lightColor,
    gridColor: medColor,
    tickColor: lightColor
  }
};
var markColor = '#4572a7';
var excelTheme = {
  background: '#fff',
  arc: {
    fill: markColor
  },
  area: {
    fill: markColor
  },
  line: {
    stroke: markColor,
    strokeWidth: 2
  },
  path: {
    stroke: markColor
  },
  rect: {
    fill: markColor
  },
  shape: {
    stroke: markColor
  },
  symbol: {
    fill: markColor,
    strokeWidth: 1.5,
    size: 50
  },
  axis: {
    bandPosition: 0.5,
    grid: true,
    gridColor: '#000000',
    gridOpacity: 1,
    gridWidth: 0.5,
    labelPadding: 10,
    tickSize: 5,
    tickWidth: 0.5
  },
  axisBand: {
    grid: false,
    tickExtra: true
  },
  legend: {
    labelBaseline: 'middle',
    labelFontSize: 11,
    symbolSize: 50,
    symbolType: 'square'
  },
  range: {
    category: ['#4572a7', '#aa4643', '#8aa453', '#71598e', '#4598ae', '#d98445', '#94aace', '#d09393', '#b9cc98', '#a99cbc']
  }
};
var markColor$1 = '#30a2da';
var axisColor = '#cbcbcb';
var guideLabelColor = '#999';
var guideTitleColor = '#333';
var backgroundColor = '#f0f0f0';
var blackTitle = '#333';
var fiveThirtyEightTheme = {
  arc: {
    fill: markColor$1
  },
  area: {
    fill: markColor$1
  },
  axis: {
    domainColor: axisColor,
    grid: true,
    gridColor: axisColor,
    gridWidth: 1,
    labelColor: guideLabelColor,
    labelFontSize: 10,
    titleColor: guideTitleColor,
    tickColor: axisColor,
    tickSize: 10,
    titleFontSize: 14,
    titlePadding: 10,
    labelPadding: 4
  },
  axisBand: {
    grid: false
  },
  background: backgroundColor,
  group: {
    fill: backgroundColor
  },
  legend: {
    labelColor: blackTitle,
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: 'square',
    titleColor: blackTitle,
    titleFontSize: 14,
    titlePadding: 10
  },
  line: {
    stroke: markColor$1,
    strokeWidth: 2
  },
  path: {
    stroke: markColor$1,
    strokeWidth: 0.5
  },
  rect: {
    fill: markColor$1
  },
  range: {
    category: ['#30a2da', '#fc4f30', '#e5ae38', '#6d904f', '#8b8b8b', '#b96db8', '#ff9e27', '#56cc60', '#52d2ca', '#52689e', '#545454', '#9fe4f8'],
    diverging: ['#cc0020', '#e77866', '#f6e7e1', '#d6e8ed', '#91bfd9', '#1d78b5'],
    heatmap: ['#d6e8ed', '#cee0e5', '#91bfd9', '#549cc6', '#1d78b5']
  },
  point: {
    filled: true,
    shape: 'circle'
  },
  shape: {
    stroke: markColor$1
  },
  bar: {
    binSpacing: 2,
    fill: markColor$1,
    stroke: null
  },
  title: {
    anchor: 'start',
    fontSize: 24,
    fontWeight: 600,
    offset: 20
  }
};
var markColor$2 = '#000';
var ggplot2Theme = {
  group: {
    fill: '#e5e5e5'
  },
  arc: {
    fill: markColor$2
  },
  area: {
    fill: markColor$2
  },
  line: {
    stroke: markColor$2
  },
  path: {
    stroke: markColor$2
  },
  rect: {
    fill: markColor$2
  },
  shape: {
    stroke: markColor$2
  },
  symbol: {
    fill: markColor$2,
    size: 40
  },
  axis: {
    domain: false,
    grid: true,
    gridColor: '#FFFFFF',
    gridOpacity: 1,
    labelColor: '#7F7F7F',
    labelPadding: 4,
    tickColor: '#7F7F7F',
    tickSize: 5.67,
    titleFontSize: 16,
    titleFontWeight: 'normal'
  },
  legend: {
    labelBaseline: 'middle',
    labelFontSize: 11,
    symbolSize: 40
  },
  range: {
    category: ['#000000', '#7F7F7F', '#1A1A1A', '#999999', '#333333', '#B0B0B0', '#4D4D4D', '#C9C9C9', '#666666', '#DCDCDC']
  }
};
var headlineFontSize = 22;
var headlineFontWeight = 'normal';
var labelFont = 'Benton Gothic, sans-serif';
var labelFontSize = 11.5;
var labelFontWeight = 'normal';
var markColor$3 = '#82c6df'; // const markHighlight = '#006d8f';
// const markDemocrat = '#5789b8';
// const markRepublican = '#d94f54';

var titleFont = 'Benton Gothic Bold, sans-serif';
var titleFontWeight = 'normal';
var titleFontSize = 13;
var colorSchemes = {
  'category-6': ['#ec8431', '#829eb1', '#c89d29', '#3580b1', '#adc839', '#ab7fb4'],
  'fire-7': ['#fbf2c7', '#f9e39c', '#f8d36e', '#f4bb6a', '#e68a4f', '#d15a40', '#ab4232'],
  'fireandice-6': ['#e68a4f', '#f4bb6a', '#f9e39c', '#dadfe2', '#a6b7c6', '#849eae'],
  'ice-7': ['#edefee', '#dadfe2', '#c4ccd2', '#a6b7c6', '#849eae', '#607785', '#47525d']
};
var latimesTheme = {
  background: '#ffffff',
  title: {
    anchor: 'start',
    color: '#000000',
    font: titleFont,
    fontSize: headlineFontSize,
    fontWeight: headlineFontWeight
  },
  arc: {
    fill: markColor$3
  },
  area: {
    fill: markColor$3
  },
  line: {
    stroke: markColor$3,
    strokeWidth: 2
  },
  path: {
    stroke: markColor$3
  },
  rect: {
    fill: markColor$3
  },
  shape: {
    stroke: markColor$3
  },
  symbol: {
    fill: markColor$3,
    size: 30
  },
  axis: {
    labelFont: labelFont,
    labelFontSize: labelFontSize,
    labelFontWeight: labelFontWeight,
    titleFont: titleFont,
    titleFontSize: titleFontSize,
    titleFontWeight: titleFontWeight
  },
  axisX: {
    labelAngle: 0,
    labelPadding: 4,
    tickSize: 3
  },
  axisY: {
    labelBaseline: 'middle',
    maxExtent: 45,
    minExtent: 45,
    tickSize: 2,
    titleAlign: 'left',
    titleAngle: 0,
    titleX: -45,
    titleY: -11
  },
  legend: {
    labelFont: labelFont,
    labelFontSize: labelFontSize,
    symbolType: 'square',
    titleFont: titleFont,
    titleFontSize: titleFontSize,
    titleFontWeight: titleFontWeight
  },
  range: {
    category: colorSchemes['category-6'],
    diverging: colorSchemes['fireandice-6'],
    heatmap: colorSchemes['fire-7'],
    ordinal: colorSchemes['fire-7'],
    ramp: colorSchemes['fire-7']
  }
};
var markColor$4 = '#ab5787';
var axisColor$1 = '#979797';
var quartzTheme = {
  background: '#f9f9f9',
  arc: {
    fill: markColor$4
  },
  area: {
    fill: markColor$4
  },
  line: {
    stroke: markColor$4
  },
  path: {
    stroke: markColor$4
  },
  rect: {
    fill: markColor$4
  },
  shape: {
    stroke: markColor$4
  },
  symbol: {
    fill: markColor$4,
    size: 30
  },
  axis: {
    domainColor: axisColor$1,
    domainWidth: 0.5,
    gridWidth: 0.2,
    labelColor: axisColor$1,
    tickColor: axisColor$1,
    tickWidth: 0.2,
    titleColor: axisColor$1
  },
  axisBand: {
    grid: false
  },
  axisX: {
    grid: true,
    tickSize: 10
  },
  axisY: {
    domain: false,
    grid: true,
    tickSize: 0
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: 'square'
  },
  range: {
    category: ['#ab5787', '#51b2e5', '#703c5c', '#168dd9', '#d190b6', '#00609f', '#d365ba', '#154866', '#666666', '#c4c4c4']
  }
};
var markColor$5 = '#3e5c69';
var voxTheme = {
  background: '#fff',
  arc: {
    fill: markColor$5
  },
  area: {
    fill: markColor$5
  },
  line: {
    stroke: markColor$5
  },
  path: {
    stroke: markColor$5
  },
  rect: {
    fill: markColor$5
  },
  shape: {
    stroke: markColor$5
  },
  symbol: {
    fill: markColor$5
  },
  axis: {
    domainWidth: 0.5,
    grid: true,
    labelPadding: 2,
    tickSize: 5,
    tickWidth: 0.5,
    titleFontWeight: 'normal'
  },
  axisBand: {
    grid: false
  },
  axisX: {
    gridWidth: 0.2
  },
  axisY: {
    gridDash: [3],
    gridWidth: 0.4
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolType: 'square'
  },
  range: {
    category: ['#3e5c69', '#6793a6', '#182429', '#0570b0', '#3690c0', '#74a9cf', '#a6bddb', '#e2ddf2']
  }
};
var markColor$6 = '#1696d2';
var axisColor$2 = '#000000';
var backgroundColor$1 = '#FFFFFF';
var vega_themes_module_font = 'Lato';
var labelFont$1 = 'Lato';
var sourceFont = 'Lato';
var gridColor = '#DEDDDD';
var titleFontSize$1 = 18;
var colorSchemes$1 = {
  'main-colors': ['#1696d2', '#d2d2d2', '#000000', '#fdbf11', '#ec008b', '#55b748', '#5c5859', '#db2b27'],
  'shades-blue': ['#CFE8F3', '#A2D4EC', '#73BFE2', '#46ABDB', '#1696D2', '#12719E', '#0A4C6A', '#062635'],
  'shades-gray': ['#F5F5F5', '#ECECEC', '#E3E3E3', '#DCDBDB', '#D2D2D2', '#9D9D9D', '#696969', '#353535'],
  'shades-yellow': ['#FFF2CF', '#FCE39E', '#FDD870', '#FCCB41', '#FDBF11', '#E88E2D', '#CA5800', '#843215'],
  'shades-magenta': ['#F5CBDF', '#EB99C2', '#E46AA7', '#E54096', '#EC008B', '#AF1F6B', '#761548', '#351123'],
  'shades-green': ['#DCEDD9', '#BCDEB4', '#98CF90', '#78C26D', '#55B748', '#408941', '#2C5C2D', '#1A2E19'],
  'shades-black': ['#D5D5D4', '#ADABAC', '#848081', '#5C5859', '#332D2F', '#262223', '#1A1717', '#0E0C0D'],
  'shades-red': ['#F8D5D4', '#F1AAA9', '#E9807D', '#E25552', '#DB2B27', '#A4201D', '#6E1614', '#370B0A'],
  'one-group': ['#1696d2', '#000000'],
  'two-groups-cat-1': ['#1696d2', '#000000'],
  'two-groups-cat-2': ['#1696d2', '#fdbf11'],
  'two-groups-cat-3': ['#1696d2', '#db2b27'],
  'two-groups-seq': ['#a2d4ec', '#1696d2'],
  'three-groups-cat': ['#1696d2', '#fdbf11', '#000000'],
  'three-groups-seq': ['#a2d4ec', '#1696d2', '#0a4c6a'],
  'four-groups-cat-1': ['#000000', '#d2d2d2', '#fdbf11', '#1696d2'],
  'four-groups-cat-2': ['#1696d2', '#ec0008b', '#fdbf11', '#5c5859'],
  'four-groups-seq': ['#cfe8f3', '#73bf42', '#1696d2', '#0a4c6a'],
  'five-groups-cat-1': ['#1696d2', '#fdbf11', '#d2d2d2', '#ec008b', '#000000'],
  'five-groups-cat-2': ['#1696d2', '#0a4c6a', '#d2d2d2', '#fdbf11', '#332d2f'],
  'five-groups-seq': ['#cfe8f3', '#73bf42', '#1696d2', '#0a4c6a', '#000000'],
  'six-groups-cat-1': ['#1696d2', '#ec008b', '#fdbf11', '#000000', '#d2d2d2', '#55b748'],
  'six-groups-cat-2': ['#1696d2', '#d2d2d2', '#ec008b', '#fdbf11', '#332d2f', '#0a4c6a'],
  'six-groups-seq': ['#cfe8f3', '#a2d4ec', '#73bfe2', '#46abdb', '#1696d2', '#12719e'],
  'diverging-colors': ['#ca5800', '#fdbf11', '#fdd870', '#fff2cf', '#cfe8f3', '#73bfe2', '#1696d2', '#0a4c6a']
};
var urbanInstituteTheme = {
  background: backgroundColor$1,
  title: {
    anchor: 'start',
    fontSize: titleFontSize$1,
    font: vega_themes_module_font
  },
  axisX: {
    domain: true,
    domainColor: axisColor$2,
    domainWidth: 1,
    grid: false,
    labelFontSize: 12,
    labelFont: labelFont$1,
    labelAngle: 0,
    tickColor: axisColor$2,
    tickSize: 5,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: vega_themes_module_font
  },
  axisY: {
    domain: false,
    domainWidth: 1,
    grid: true,
    gridColor: gridColor,
    gridWidth: 1,
    labelFontSize: 12,
    labelFont: labelFont$1,
    labelPadding: 8,
    ticks: false,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: vega_themes_module_font,
    titleAngle: 0,
    titleY: -10,
    titleX: 18
  },
  legend: {
    labelFontSize: 12,
    labelFont: labelFont$1,
    symbolSize: 100,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: vega_themes_module_font,
    orient: 'right',
    offset: 10
  },
  view: {
    stroke: 'transparent'
  },
  range: {
    category: colorSchemes$1['six-groups-cat-1'],
    diverging: colorSchemes$1['diverging-colors'],
    heatmap: colorSchemes$1['diverging-colors'],
    ordinal: colorSchemes$1['six-groups-seq'],
    ramp: colorSchemes$1['shades-blue']
  },
  area: {
    fill: markColor$6
  },
  rect: {
    fill: markColor$6
  },
  line: {
    color: markColor$6,
    stroke: markColor$6,
    strokeWidth: 5
  },
  trail: {
    color: markColor$6,
    stroke: markColor$6,
    strokeWidth: 0,
    size: 1
  },
  path: {
    stroke: markColor$6,
    strokeWidth: 0.5
  },
  point: {
    filled: true
  },
  text: {
    font: sourceFont,
    color: markColor$6,
    fontSize: 11,
    align: 'center',
    fontWeight: 400,
    size: 11
  },
  style: {
    bar: {
      fill: markColor$6,
      stroke: null
    }
  },
  arc: {
    fill: markColor$6
  },
  shape: {
    stroke: markColor$6
  },
  symbol: {
    fill: markColor$6,
    size: 30
  }
};
/**
 * Copyright 2020 Google LLC.
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

var markColor$7 = '#3366CC';
var gridColor$1 = '#ccc';
var defaultFont = 'Arial, sans-serif';
var googlechartsTheme = {
  arc: {
    fill: markColor$7
  },
  area: {
    fill: markColor$7
  },
  path: {
    stroke: markColor$7
  },
  rect: {
    fill: markColor$7
  },
  shape: {
    stroke: markColor$7
  },
  symbol: {
    stroke: markColor$7
  },
  circle: {
    fill: markColor$7
  },
  background: '#fff',
  padding: {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
  },
  style: {
    'guide-label': {
      font: defaultFont,
      fontSize: 12
    },
    'guide-title': {
      font: defaultFont,
      fontSize: 12
    },
    'group-title': {
      font: defaultFont,
      fontSize: 12
    }
  },
  title: {
    font: defaultFont,
    fontSize: 14,
    fontWeight: 'bold',
    dy: -3,
    anchor: 'start'
  },
  axis: {
    gridColor: gridColor$1,
    tickColor: gridColor$1,
    domain: false,
    grid: true
  },
  range: {
    category: ['#4285F4', '#DB4437', '#F4B400', '#0F9D58', '#AB47BC', '#00ACC1', '#FF7043', '#9E9D24', '#5C6BC0', '#F06292', '#00796B', '#C2185B'],
    heatmap: ['#c6dafc', '#5e97f6', '#2a56c6']
  }
};
var vega_themes_module_version$1 = vega_themes_module_pkg.version;

;// CONCATENATED MODULE: ./node_modules/vega-tooltip/build/vega-tooltip.module.js



function vega_tooltip_module_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = vega_tooltip_module_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function vega_tooltip_module_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return vega_tooltip_module_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vega_tooltip_module_arrayLikeToArray(o, minLen); }

function vega_tooltip_module_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var vega_tooltip_module_name = "vega-tooltip";
var vega_tooltip_module_version = "0.25.1";
var vega_tooltip_module_description = "A tooltip plugin for Vega-Lite and Vega visualizations.";
var vega_tooltip_module_keywords = ["vega-lite", "vega", "tooltip"];
var vega_tooltip_module_repository = {
  type: "git",
  url: "https://github.com/vega/vega-tooltip.git"
};
var vega_tooltip_module_author = {
  name: "UW Interactive Data Lab",
  url: "https://idl.cs.washington.edu"
};
var collaborators = ["Dominik Moritz", "Sira Horradarn", "Zening Qu", "Kanit Wongsuphasawat", "Yuri Astrakhan", "Jeffrey Heer"];
var vega_tooltip_module_license = "BSD-3-Clause";
var bugs = {
  url: "https://github.com/vega/vega-tooltip/issues"
};
var homepage = "https://github.com/vega/vega-tooltip#readme";
var vega_tooltip_module_main = "build/vega-tooltip.js";
var vega_tooltip_module_module = "build/vega-tooltip.module.js";
var vega_tooltip_module_unpkg = "build/vega-tooltip.min.js";
var vega_tooltip_module_jsdelivr = "build/vega-tooltip.min.js";
var vega_tooltip_module_types = "build/vega-tooltip.module.d.ts";
var vega_tooltip_module_files = ["src", "build", "types"];
var vega_tooltip_module_scripts = {
  prebuild: "yarn clean && yarn build:style",
  build: "rollup -c",
  "build:style": "./build-style.sh",
  clean: "rimraf build && rimraf src/style.ts",
  "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
  "copy:build": "rsync -r build/* examples/build",
  "deploy:gh": "yarn build && yarn copy:build && gh-pages -d examples && yarn clean",
  prepublishOnly: "yarn clean && yarn build",
  preversion: "yarn lint && yarn test",
  serve: "browser-sync start -s -f build examples --serveStatic examples",
  start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
  pretest: "yarn build:style",
  test: "beemo jest",
  "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
  prepare: "beemo create-config && yarn copy:data",
  prettierbase: "beemo prettier '*.{css,scss,html}'",
  eslintbase: "beemo eslint .",
  format: "yarn eslintbase --fix && yarn prettierbase --write",
  lint: "yarn eslintbase && yarn prettierbase --check"
};
var vega_tooltip_module_devDependencies = {
  "@rollup/plugin-json": "^4.1.0",
  "@rollup/plugin-node-resolve": "^11.2.0",
  "@wessberg/rollup-plugin-ts": "^1.3.8",
  "browser-sync": "^2.26.14",
  concurrently: "^6.0.0",
  "gh-pages": "^3.1.0",
  "node-sass": "^5.0.0",
  path: "^0.12.7",
  rollup: "^2.39.1",
  "rollup-plugin-bundle-size": "^1.0.3",
  "rollup-plugin-terser": "^7.0.2",
  typescript: "~4.2.2",
  "vega-datasets": "^2.2.0",
  "vega-lite-dev-config": "^0.16.1",
  "vega-typings": "^0.19.2"
};
var vega_tooltip_module_dependencies = {
  "vega-util": "^1.16.0"
};
var vega_tooltip_module_pkg = {
  name: vega_tooltip_module_name,
  version: vega_tooltip_module_version,
  description: vega_tooltip_module_description,
  keywords: vega_tooltip_module_keywords,
  repository: vega_tooltip_module_repository,
  author: vega_tooltip_module_author,
  collaborators: collaborators,
  license: vega_tooltip_module_license,
  bugs: bugs,
  homepage: homepage,
  main: vega_tooltip_module_main,
  module: vega_tooltip_module_module,
  unpkg: vega_tooltip_module_unpkg,
  jsdelivr: vega_tooltip_module_jsdelivr,
  types: vega_tooltip_module_types,
  files: vega_tooltip_module_files,
  scripts: vega_tooltip_module_scripts,
  devDependencies: vega_tooltip_module_devDependencies,
  dependencies: vega_tooltip_module_dependencies
}; // generated with build-style.sh

var defaultStyle = "#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black; }\n  #vg-tooltip-element.visible {\n    visibility: visible; }\n  #vg-tooltip-element h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 13px; }\n  #vg-tooltip-element img {\n    max-width: 200px;\n    max-height: 200px; }\n  #vg-tooltip-element table {\n    border-spacing: 0; }\n    #vg-tooltip-element table tr {\n      border: none; }\n      #vg-tooltip-element table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-top: 2px;\n        padding-bottom: 2px; }\n        #vg-tooltip-element table tr td.key {\n          color: #808080;\n          max-width: 150px;\n          text-align: right;\n          padding-right: 4px; }\n        #vg-tooltip-element table tr td.value {\n          display: block;\n          max-width: 300px;\n          max-height: 7em;\n          text-align: left; }\n  #vg-tooltip-element.dark-theme {\n    background-color: rgba(32, 32, 32, 0.9);\n    border: 1px solid #f5f5f5;\n    color: white; }\n    #vg-tooltip-element.dark-theme td.key {\n      color: #bfbfbf; }\n";
var EL_ID = 'vg-tooltip-element';
var DEFAULT_OPTIONS = {
  /**
   * X offset.
   */
  offsetX: 10,

  /**
   * Y offset.
   */
  offsetY: 10,

  /**
   * ID of the tooltip element.
   */
  id: EL_ID,

  /**
   * ID of the tooltip CSS style.
   */
  styleId: 'vega-tooltip-style',

  /**
   * The name of the theme. You can use the CSS class called [THEME]-theme to style the tooltips.
   *
   * There are two predefined themes: "light" (default) and "dark".
   */
  theme: 'light',

  /**
   * Do not use the default styles provided by Vega Tooltip. If you enable this option, you need to use your own styles. It is not necessary to disable the default style when using a custom theme.
   */
  disableDefaultStyle: false,

  /**
   * HTML sanitizer function that removes dangerous HTML to prevent XSS.
   *
   * This should be a function from string to string. You may replace it with a formatter such as a markdown formatter.
   */
  sanitize: escapeHTML,

  /**
   * The maximum recursion depth when printing objects in the tooltip.
   */
  maxDepth: 2
};
/**
 * Escape special HTML characters.
 *
 * @param value A value to convert to string and HTML-escape.
 */

function escapeHTML(value) {
  return String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;');
}

function createDefaultStyle(id) {
  // Just in case this id comes from a user, ensure these is no security issues
  if (!/^[A-Za-z]+[-:.\w]*$/.test(id)) {
    throw new Error('Invalid HTML ID');
  }

  return defaultStyle.toString().replace(EL_ID, id);
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */


function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
/**
 * Format the value to be shown in the tooltip.
 *
 * @param value The value to show in the tooltip.
 * @param valueToHtml Function to convert a single cell value to an HTML string
 */


function vega_tooltip_module_formatValue(value, valueToHtml, maxDepth) {
  if (isArray(value)) {
    return "[".concat(value.map(function (v) {
      return valueToHtml(isString(v) ? v : vega_tooltip_module_stringify(v, maxDepth));
    }).join(', '), "]");
  }

  if (isObject(value)) {
    var content = '';

    var _a = value,
        title = _a.title,
        image = _a.image,
        rest = __rest(_a, ["title", "image"]);

    if (title) {
      content += "<h2>".concat(valueToHtml(title), "</h2>");
    }

    if (image) {
      content += "<img src=\"".concat(valueToHtml(image), "\">");
    }

    var keys = Object.keys(rest);

    if (keys.length > 0) {
      content += '<table>';

      var _iterator = vega_tooltip_module_createForOfIteratorHelper(keys),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;
          var val = rest[key]; // ignore undefined properties

          if (val === undefined) {
            continue;
          }

          if (isObject(val)) {
            val = vega_tooltip_module_stringify(val, maxDepth);
          }

          content += "<tr><td class=\"key\">".concat(valueToHtml(key), ":</td><td class=\"value\">").concat(valueToHtml(val), "</td></tr>");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      content += "</table>";
    }

    return content || '{}'; // show empty object if there are no properties
  }

  return valueToHtml(value);
}

function replacer(maxDepth) {
  var stack = [];
  return function (key, value) {
    if (typeof value !== 'object' || value === null) {
      return value;
    }

    var pos = stack.indexOf(this) + 1;
    stack.length = pos;

    if (stack.length > maxDepth) {
      return '[Object]';
    }

    if (stack.indexOf(value) >= 0) {
      return '[Circular]';
    }

    stack.push(value);
    return value;
  };
}
/**
 * Stringify any JS object to valid JSON
 */


function vega_tooltip_module_stringify(obj, maxDepth) {
  return JSON.stringify(obj, replacer(maxDepth));
}
/**
 * Position the tooltip
 *
 * @param event The mouse event.
 * @param tooltipBox
 * @param offsetX Horizontal offset.
 * @param offsetY Vertical offset.
 */


function calculatePosition(event, tooltipBox, offsetX, offsetY) {
  var x = event.clientX + offsetX;

  if (x + tooltipBox.width > window.innerWidth) {
    x = +event.clientX - offsetX - tooltipBox.width;
  }

  var y = event.clientY + offsetY;

  if (y + tooltipBox.height > window.innerHeight) {
    y = +event.clientY - offsetY - tooltipBox.height;
  }

  return {
    x: x,
    y: y
  };
}
/**
 * The tooltip handler class.
 */


var vega_tooltip_module_Handler = /*#__PURE__*/function () {
  /**
   * Create the tooltip handler and initialize the element and style.
   *
   * @param options Tooltip Options
   */
  function Handler(options) {
    (0,classCallCheck/* default */.Z)(this, Handler);

    this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    var elementId = this.options.id;
    this.el = null; // bind this to call

    this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head

    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
      var style = document.createElement('style');
      style.setAttribute('id', this.options.styleId);
      style.innerHTML = createDefaultStyle(elementId);
      var head = document.head;

      if (head.childNodes.length > 0) {
        head.insertBefore(style, head.childNodes[0]);
      } else {
        head.appendChild(style);
      }
    }
  }
  /**
   * The tooltip handler function.
   */


  (0,createClass/* default */.Z)(Handler, [{
    key: "tooltipHandler",
    value: function tooltipHandler(handler, event, item, value) {
      // console.log(handler, event, item, value);
      // append a div element that we use as a tooltip unless it already exists
      this.el = document.getElementById(this.options.id);

      if (!this.el) {
        this.el = document.createElement('div');
        this.el.setAttribute('id', this.options.id);
        this.el.classList.add('vg-tooltip');
        document.body.appendChild(this.el);
      }

      var tooltipContainer = document.fullscreenElement != null ? document.fullscreenElement : document.body;
      tooltipContainer.appendChild(this.el); // hide tooltip for null, undefined, or empty string values

      if (value == null || value === '') {
        this.el.classList.remove('visible', "".concat(this.options.theme, "-theme"));
        return;
      } // set the tooltip content


      this.el.innerHTML = vega_tooltip_module_formatValue(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible

      this.el.classList.add('visible', "".concat(this.options.theme, "-theme"));

      var _calculatePosition = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY),
          x = _calculatePosition.x,
          y = _calculatePosition.y;

      this.el.setAttribute('style', "top: ".concat(y, "px; left: ").concat(x, "px"));
    }
  }]);

  return Handler;
}();

var vega_tooltip_module_version$1 = vega_tooltip_module_pkg.version;
/**
 * Create a tooltip handler and register it with the provided view.
 *
 * @param view The Vega view.
 * @param opt Tooltip options.
 */

function vega_tooltip_module_index(view, opt) {
  var handler = new vega_tooltip_module_Handler(opt);
  view.tooltip(handler.call).run();
  return handler;
}

/* harmony default export */ var vega_tooltip_module = ((/* unused pure expression or super */ null && (vega_tooltip_module_index)));

;// CONCATENATED MODULE: ./node_modules/vega-embed/build/vega-embed.module.js










function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var Op = Object.prototype;
var hasOwn = Op.hasOwnProperty;
var undefined$1; // More compressible than void 0.

var $Symbol = typeof Symbol === "function" ? Symbol : {};
var iteratorSymbol = $Symbol.iterator || "@@iterator";
var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

function vega_embed_module_wrap(innerFn, outerFn, self, tryLocsList) {
  // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
  var generator = Object.create(protoGenerator.prototype);
  var context = new vega_embed_module_Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
  // .throw, and .return methods.

  generator._invoke = makeInvokeMethod(innerFn, self, context);
  return generator;
} // Try/catch helper to minimize deoptimizations. Returns a completion
// record like context.tryEntries[i].completion. This interface could
// have been (and was previously) designed to take a closure to be
// invoked without arguments, but in all the cases we care about we
// already have an existing method we want to call, so there's no need
// to create a new function object. We can even get away with assuming
// the method takes exactly one argument, since that happens to be true
// in every case, so we don't have to touch the arguments object. The
// only additional allocation required is the completion record, which
// has a stable shape and so hopefully should be cheap to allocate.


function tryCatch(fn, obj, arg) {
  try {
    return {
      type: "normal",
      arg: fn.call(obj, arg)
    };
  } catch (err) {
    return {
      type: "throw",
      arg: err
    };
  }
}

var GenStateSuspendedStart = "suspendedStart";
var GenStateSuspendedYield = "suspendedYield";
var GenStateExecuting = "executing";
var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
// breaking out of the dispatch switch statement.

var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
// .constructor.prototype properties for functions that return Generator
// objects. For full spec compliance, you may wish to configure your
// minifier not to mangle the names of these two functions.

function Generator() {}

function GeneratorFunction() {}

function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
// don't natively support it.


var IteratorPrototype = {};

IteratorPrototype[iteratorSymbol] = function () {
  return this;
};

var getProto = Object.getPrototypeOf;
var NativeIteratorPrototype = getProto && getProto(getProto(vega_embed_module_values([])));

if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
  // This environment has a native %IteratorPrototype%; use it instead
  // of the polyfill.
  IteratorPrototype = NativeIteratorPrototype;
}

var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
GeneratorFunctionPrototype.constructor = GeneratorFunction;
GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
// Iterator interface in terms of a single ._invoke method.

function defineIteratorMethods(prototype) {
  ["next", "throw", "return"].forEach(function (method) {
    prototype[method] = function (arg) {
      return this._invoke(method, arg);
    };
  });
}

function isGeneratorFunction(genFun) {
  var ctor = typeof genFun === "function" && genFun.constructor;
  return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
  // do is to check its .name property.
  (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
}

function mark(genFun) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
  } else {
    genFun.__proto__ = GeneratorFunctionPrototype;

    if (!(toStringTagSymbol in genFun)) {
      genFun[toStringTagSymbol] = "GeneratorFunction";
    }
  }

  genFun.prototype = Object.create(Gp);
  return genFun;
} // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
// `hasOwn.call(value, "__await")` to determine if the yielded value is
// meant to be awaited.


function awrap(arg) {
  return {
    __await: arg
  };
}

function AsyncIterator(generator, PromiseImpl) {
  function invoke(method, arg, resolve, reject) {
    var record = tryCatch(generator[method], generator, arg);

    if (record.type === "throw") {
      reject(record.arg);
    } else {
      var result = record.arg;
      var value = result.value;

      if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
        return PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        });
      }

      return PromiseImpl.resolve(value).then(function (unwrapped) {
        // When a yielded Promise is resolved, its final value becomes
        // the .value of the Promise<{value,done}> result for the
        // current iteration.
        result.value = unwrapped;
        resolve(result);
      }, function (error) {
        // If a rejected Promise was yielded, throw the rejection back
        // into the async generator function so it can be handled there.
        return invoke("throw", error, resolve, reject);
      });
    }
  }

  var previousPromise;

  function enqueue(method, arg) {
    function callInvokeWithMethodAndArg() {
      return new PromiseImpl(function (resolve, reject) {
        invoke(method, arg, resolve, reject);
      });
    }

    return previousPromise = // If enqueue has been called before, then we want to wait until
    // all previous Promises have been resolved before calling invoke,
    // so that results are always delivered in the correct order. If
    // enqueue has not been called before, then it is important to
    // call invoke immediately, without waiting on a callback to fire,
    // so that the async generator function has the opportunity to do
    // any necessary setup in a predictable way. This predictability
    // is why the Promise constructor synchronously invokes its
    // executor callback, and why async functions synchronously
    // execute code before the first await. Since we implement simple
    // async functions in terms of async generators, it is especially
    // important to get this right, even though it requires care.
    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
    // invocations of the iterator.
    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
  } // Define the unified helper method that is used to implement .next,
  // .throw, and .return (see defineIteratorMethods).


  this._invoke = enqueue;
}

defineIteratorMethods(AsyncIterator.prototype);

AsyncIterator.prototype[asyncIteratorSymbol] = function () {
  return this;
}; // Note that simple async functions are implemented on top of
// AsyncIterator objects; they just return a Promise for the value of
// the final result produced by the iterator.


function vega_embed_module_async(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
  if (PromiseImpl === void 0) PromiseImpl = Promise;
  var iter = new AsyncIterator(vega_embed_module_wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
  return isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
  : iter.next().then(function (result) {
    return result.done ? result.value : iter.next();
  });
}

function makeInvokeMethod(innerFn, self, context) {
  var state = GenStateSuspendedStart;
  return function invoke(method, arg) {
    if (state === GenStateExecuting) {
      throw new Error("Generator is already running");
    }

    if (state === GenStateCompleted) {
      if (method === "throw") {
        throw arg;
      } // Be forgiving, per 25.3.3.3.3 of the spec:
      // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


      return doneResult();
    }

    context.method = method;
    context.arg = arg;

    while (true) {
      var delegate = context.delegate;

      if (delegate) {
        var delegateResult = maybeInvokeDelegate(delegate, context);

        if (delegateResult) {
          if (delegateResult === ContinueSentinel) continue;
          return delegateResult;
        }
      }

      if (context.method === "next") {
        // Setting context._sent for legacy support of Babel's
        // function.sent implementation.
        context.sent = context._sent = context.arg;
      } else if (context.method === "throw") {
        if (state === GenStateSuspendedStart) {
          state = GenStateCompleted;
          throw context.arg;
        }

        context.dispatchException(context.arg);
      } else if (context.method === "return") {
        context.abrupt("return", context.arg);
      }

      state = GenStateExecuting;
      var record = tryCatch(innerFn, self, context);

      if (record.type === "normal") {
        // If an exception is thrown from innerFn, we leave state ===
        // GenStateExecuting and loop back for another invocation.
        state = context.done ? GenStateCompleted : GenStateSuspendedYield;

        if (record.arg === ContinueSentinel) {
          continue;
        }

        return {
          value: record.arg,
          done: context.done
        };
      } else if (record.type === "throw") {
        state = GenStateCompleted; // Dispatch the exception by looping back around to the
        // context.dispatchException(context.arg) call above.

        context.method = "throw";
        context.arg = record.arg;
      }
    }
  };
} // Call delegate.iterator[context.method](context.arg) and handle the
// result, either by returning a { value, done } result from the
// delegate iterator, or by modifying context.method and context.arg,
// setting context.delegate to null, and returning the ContinueSentinel.


function maybeInvokeDelegate(delegate, context) {
  var method = delegate.iterator[context.method];

  if (method === undefined$1) {
    // A .throw or .return when the delegate iterator has no .throw
    // method always terminates the yield* loop.
    context.delegate = null;

    if (context.method === "throw") {
      // Note: ["return"] must be used for ES3 parsing compatibility.
      if (delegate.iterator["return"]) {
        // If the delegate iterator has a return method, give it a
        // chance to clean up.
        context.method = "return";
        context.arg = undefined$1;
        maybeInvokeDelegate(delegate, context);

        if (context.method === "throw") {
          // If maybeInvokeDelegate(context) changed context.method from
          // "return" to "throw", let that override the TypeError below.
          return ContinueSentinel;
        }
      }

      context.method = "throw";
      context.arg = new TypeError("The iterator does not provide a 'throw' method");
    }

    return ContinueSentinel;
  }

  var record = tryCatch(method, delegate.iterator, context.arg);

  if (record.type === "throw") {
    context.method = "throw";
    context.arg = record.arg;
    context.delegate = null;
    return ContinueSentinel;
  }

  var info = record.arg;

  if (!info) {
    context.method = "throw";
    context.arg = new TypeError("iterator result is not an object");
    context.delegate = null;
    return ContinueSentinel;
  }

  if (info.done) {
    // Assign the result of the finished delegate to the temporary
    // variable specified by delegate.resultName (see delegateYield).
    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
    // exception, let the outer generator proceed normally. If
    // context.method was "next", forget context.arg since it has been
    // "consumed" by the delegate iterator. If context.method was
    // "return", allow the original .return call to continue in the
    // outer generator.

    if (context.method !== "return") {
      context.method = "next";
      context.arg = undefined$1;
    }
  } else {
    // Re-yield the result returned by the delegate method.
    return info;
  } // The delegate iterator is finished, so forget it and continue with
  // the outer generator.


  context.delegate = null;
  return ContinueSentinel;
} // Define Generator.prototype.{next,throw,return} in terms of the
// unified ._invoke helper method.


defineIteratorMethods(Gp);
Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
// @@iterator function is called on it. Some browsers' implementations of the
// iterator prototype chain incorrectly implement this, causing the Generator
// object to not be returned from this call. This ensures that doesn't happen.
// See https://github.com/facebook/regenerator/issues/274 for more details.

Gp[iteratorSymbol] = function () {
  return this;
};

Gp.toString = function () {
  return "[object Generator]";
};

function pushTryEntry(locs) {
  var entry = {
    tryLoc: locs[0]
  };

  if (1 in locs) {
    entry.catchLoc = locs[1];
  }

  if (2 in locs) {
    entry.finallyLoc = locs[2];
    entry.afterLoc = locs[3];
  }

  this.tryEntries.push(entry);
}

function resetTryEntry(entry) {
  var record = entry.completion || {};
  record.type = "normal";
  delete record.arg;
  entry.completion = record;
}

function vega_embed_module_Context(tryLocsList) {
  // The root entry object (effectively a try statement without a catch
  // or a finally block) gives us a place to store values thrown from
  // locations where there is no enclosing try statement.
  this.tryEntries = [{
    tryLoc: "root"
  }];
  tryLocsList.forEach(pushTryEntry, this);
  this.reset(true);
}

function vega_embed_module_keys(object) {
  var keys = [];

  for (var key in object) {
    keys.push(key);
  }

  keys.reverse(); // Rather than returning an object with a next method, we keep
  // things simple and return the next function itself.

  return function next() {
    while (keys.length) {
      var key = keys.pop();

      if (key in object) {
        next.value = key;
        next.done = false;
        return next;
      }
    } // To avoid creating an additional object, we just hang the .value
    // and .done properties off the next function object itself. This
    // also ensures that the minifier will not anonymize the function.


    next.done = true;
    return next;
  };
}

function vega_embed_module_values(iterable) {
  if (iterable) {
    var iteratorMethod = iterable[iteratorSymbol];

    if (iteratorMethod) {
      return iteratorMethod.call(iterable);
    }

    if (typeof iterable.next === "function") {
      return iterable;
    }

    if (!isNaN(iterable.length)) {
      var i = -1,
          next = function next() {
        while (++i < iterable.length) {
          if (hasOwn.call(iterable, i)) {
            next.value = iterable[i];
            next.done = false;
            return next;
          }
        }

        next.value = undefined$1;
        next.done = true;
        return next;
      };

      return next.next = next;
    }
  } // Return an iterator with no values.


  return {
    next: doneResult
  };
}

function doneResult() {
  return {
    value: undefined$1,
    done: true
  };
}

vega_embed_module_Context.prototype = {
  constructor: vega_embed_module_Context,
  reset: function reset(skipTempReset) {
    this.prev = 0;
    this.next = 0; // Resetting context._sent for legacy support of Babel's
    // function.sent implementation.

    this.sent = this._sent = undefined$1;
    this.done = false;
    this.delegate = null;
    this.method = "next";
    this.arg = undefined$1;
    this.tryEntries.forEach(resetTryEntry);

    if (!skipTempReset) {
      for (var name in this) {
        // Not sure about the optimal order of these conditions:
        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
          this[name] = undefined$1;
        }
      }
    }
  },
  stop: function stop() {
    this.done = true;
    var rootEntry = this.tryEntries[0];
    var rootRecord = rootEntry.completion;

    if (rootRecord.type === "throw") {
      throw rootRecord.arg;
    }

    return this.rval;
  },
  dispatchException: function dispatchException(exception) {
    if (this.done) {
      throw exception;
    }

    var context = this;

    function handle(loc, caught) {
      record.type = "throw";
      record.arg = exception;
      context.next = loc;

      if (caught) {
        // If the dispatched exception was caught by a catch block,
        // then let that catch block handle the exception normally.
        context.method = "next";
        context.arg = undefined$1;
      }

      return !!caught;
    }

    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry = this.tryEntries[i];
      var record = entry.completion;

      if (entry.tryLoc === "root") {
        // Exception thrown outside of any try block that could handle
        // it, so set the completion value of the entire function to
        // throw the exception.
        return handle("end");
      }

      if (entry.tryLoc <= this.prev) {
        var hasCatch = hasOwn.call(entry, "catchLoc");
        var hasFinally = hasOwn.call(entry, "finallyLoc");

        if (hasCatch && hasFinally) {
          if (this.prev < entry.catchLoc) {
            return handle(entry.catchLoc, true);
          } else if (this.prev < entry.finallyLoc) {
            return handle(entry.finallyLoc);
          }
        } else if (hasCatch) {
          if (this.prev < entry.catchLoc) {
            return handle(entry.catchLoc, true);
          }
        } else if (hasFinally) {
          if (this.prev < entry.finallyLoc) {
            return handle(entry.finallyLoc);
          }
        } else {
          throw new Error("try statement without catch or finally");
        }
      }
    }
  },
  abrupt: function abrupt(type, arg) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry = this.tryEntries[i];

      if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
        var finallyEntry = entry;
        break;
      }
    }

    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
      // Ignore the finally entry if control is not jumping to a
      // location outside the try/catch block.
      finallyEntry = null;
    }

    var record = finallyEntry ? finallyEntry.completion : {};
    record.type = type;
    record.arg = arg;

    if (finallyEntry) {
      this.method = "next";
      this.next = finallyEntry.finallyLoc;
      return ContinueSentinel;
    }

    return this.complete(record);
  },
  complete: function complete(record, afterLoc) {
    if (record.type === "throw") {
      throw record.arg;
    }

    if (record.type === "break" || record.type === "continue") {
      this.next = record.arg;
    } else if (record.type === "return") {
      this.rval = this.arg = record.arg;
      this.method = "return";
      this.next = "end";
    } else if (record.type === "normal" && afterLoc) {
      this.next = afterLoc;
    }

    return ContinueSentinel;
  },
  finish: function finish(finallyLoc) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry = this.tryEntries[i];

      if (entry.finallyLoc === finallyLoc) {
        this.complete(entry.completion, entry.afterLoc);
        resetTryEntry(entry);
        return ContinueSentinel;
      }
    }
  },
  "catch": function _catch(tryLoc) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry = this.tryEntries[i];

      if (entry.tryLoc === tryLoc) {
        var record = entry.completion;

        if (record.type === "throw") {
          var thrown = record.arg;
          resetTryEntry(entry);
        }

        return thrown;
      }
    } // The context.catch method must only be called with a location
    // argument that corresponds to a known catch block.


    throw new Error("illegal catch attempt");
  },
  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
    this.delegate = {
      iterator: vega_embed_module_values(iterable),
      resultName: resultName,
      nextLoc: nextLoc
    };

    if (this.method === "next") {
      // Deliberately forget the last sent value so that we don't
      // accidentally pass it on to the delegate.
      this.arg = undefined$1;
    }

    return ContinueSentinel;
  }
}; // Export a default namespace that plays well with Rollup

var _regeneratorRuntime = {
  wrap: vega_embed_module_wrap,
  isGeneratorFunction: isGeneratorFunction,
  AsyncIterator: AsyncIterator,
  mark: mark,
  awrap: awrap,
  async: vega_embed_module_async,
  keys: vega_embed_module_keys,
  values: vega_embed_module_values
};
/**
 * Open editor url in a new window, and pass a message.
 */

function post(window, url, data) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var editor = window.open(url);
  var wait = 10000;
  var step = 250;

  var _URL = new URL(url),
      origin = _URL.origin; // eslint-disable-next-line no-bitwise


  var count = ~~(wait / step);

  function listen(evt) {
    if (evt.source === editor) {
      count = 0;
      window.removeEventListener('message', listen, false);
    }
  }

  window.addEventListener('message', listen, false); // send message
  // periodically resend until ack received or timeout

  function send() {
    if (count <= 0) {
      return;
    }

    editor.postMessage(data, origin);
    setTimeout(send, step);
    count -= 1;
  }

  setTimeout(send, step);
} // generated with build-style.sh


var embedStyle = ".vega-embed {\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box; }\n  .vega-embed.has-actions {\n    padding-right: 38px; }\n  .vega-embed details:not([open]) > :not(summary) {\n    display: none !important; }\n  .vega-embed summary {\n    list-style: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 6px;\n    z-index: 1000;\n    background: white;\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\n    color: #1b1e23;\n    border: 1px solid #aaa;\n    border-radius: 999px;\n    opacity: 0.2;\n    transition: opacity 0.4s ease-in;\n    outline: none;\n    cursor: pointer;\n    line-height: 0px; }\n    .vega-embed summary::-webkit-details-marker {\n      display: none; }\n    .vega-embed summary:active {\n      box-shadow: #aaa 0px 0px 0px 1px inset; }\n    .vega-embed summary svg {\n      width: 14px;\n      height: 14px; }\n  .vega-embed details[open] summary {\n    opacity: 0.7; }\n  .vega-embed:hover summary,\n  .vega-embed:focus summary {\n    opacity: 1 !important;\n    transition: opacity 0.2s ease; }\n  .vega-embed .vega-actions {\n    position: absolute;\n    z-index: 1001;\n    top: 35px;\n    right: -9px;\n    display: flex;\n    flex-direction: column;\n    padding-bottom: 8px;\n    padding-top: 8px;\n    border-radius: 4px;\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 1px solid #d9d9d9;\n    background: white;\n    animation-duration: 0.15s;\n    animation-name: scale-in;\n    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\n    text-align: left; }\n    .vega-embed .vega-actions a {\n      padding: 8px 16px;\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: 600;\n      white-space: nowrap;\n      color: #434a56;\n      text-decoration: none; }\n      .vega-embed .vega-actions a:hover {\n        background-color: #f7f7f9;\n        color: black; }\n    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\n      content: \"\";\n      display: inline-block;\n      position: absolute; }\n    .vega-embed .vega-actions::before {\n      left: auto;\n      right: 14px;\n      top: -16px;\n      border: 8px solid #0000;\n      border-bottom-color: #d9d9d9; }\n    .vega-embed .vega-actions::after {\n      left: auto;\n      right: 15px;\n      top: -14px;\n      border: 7px solid #0000;\n      border-bottom-color: #fff; }\n  .vega-embed .chart-wrapper.fit-x {\n    width: 100%; }\n  .vega-embed .chart-wrapper.fit-y {\n    height: 100%; }\n\n.vega-embed-wrapper {\n  max-width: 100%;\n  overflow: auto;\n  padding-right: 14px; }\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.6); }\n  to {\n    opacity: 1;\n    transform: scale(1); } }\n";

if (!String.prototype.startsWith) {
  // eslint-disable-next-line no-extend-native,func-names
  String.prototype.startsWith = function (search, pos) {
    return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  };
}

function vega_embed_module_mergeDeep(dest) {
  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    src[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _src = src; _i < _src.length; _i++) {
    var s = _src[_i];
    vega_embed_module_deepMerge_(dest, s);
  }

  return dest;
}

function vega_embed_module_deepMerge_(dest, src) {
  for (var _i2 = 0, _Object$keys = Object.keys(src); _i2 < _Object$keys.length; _i2++) {
    var property = _Object$keys[_i2];
    writeConfig(dest, property, src[property], true);
  }
}

var _w$vl;

function vega_embed_module_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function vega_embed_module_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      vega_embed_module_ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      vega_embed_module_ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var vega = vega_module_namespaceObject;
var _vegaLite = build_src_namespaceObject; // For backwards compatibility with Vega-Lite before v4.

var vega_embed_module_w = typeof window !== 'undefined' ? window : undefined;

if (_vegaLite === undefined && vega_embed_module_w !== null && vega_embed_module_w !== void 0 && (_w$vl = vega_embed_module_w['vl']) !== null && _w$vl !== void 0 && _w$vl.compile) {
  _vegaLite = vega_embed_module_w['vl'];
}

var DEFAULT_ACTIONS = {
  export: {
    svg: true,
    png: true
  },
  source: true,
  compiled: true,
  editor: true
};
var I18N = {
  CLICK_TO_VIEW_ACTIONS: 'Click to view actions',
  COMPILED_ACTION: 'View Compiled Vega',
  EDITOR_ACTION: 'Open in Vega Editor',
  PNG_ACTION: 'Save as PNG',
  SOURCE_ACTION: 'View Source',
  SVG_ACTION: 'Save as SVG'
};
var NAMES = {
  vega: 'Vega',
  'vega-lite': 'Vega-Lite'
};
var VERSION = {
  vega: vega.version,
  'vega-lite': _vegaLite ? _vegaLite.version : 'not available'
};
var PREPROCESSOR = {
  vega: function vega(vgSpec) {
    return vgSpec;
  },
  'vega-lite': function vegaLite(vlSpec, config) {
    return _vegaLite.compile(vlSpec, {
      config: config
    }).spec;
  }
};
var SVG_CIRCLES = "\n<svg viewBox=\"0 0 16 16\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <circle r=\"2\" cy=\"8\" cx=\"2\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"8\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"14\"></circle>\n</svg>";
var CHART_WRAPPER_CLASS = 'chart-wrapper';

function isTooltipHandler(h) {
  return typeof h === 'function';
}

function viewSource(source, sourceHeader, sourceFooter, mode) {
  var header = "<html><head>".concat(sourceHeader, "</head><body><pre><code class=\"json\">");
  var footer = "</code></pre>".concat(sourceFooter, "</body></html>"); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  var win = window.open('');
  win.document.write(header + source + footer);
  win.document.title = "".concat(NAMES[mode], " JSON Source");
}
/**
 * Try to guess the type of spec.
 *
 * @param spec Vega or Vega-Lite spec.
 */


function guessMode(spec, providedMode) {
  // Decide mode
  if (spec.$schema) {
    var parsed = parser_module(spec.$schema);

    if (providedMode && providedMode !== parsed.library) {
      var _NAMES$providedMode;

      console.warn("The given visualization spec is written in ".concat(NAMES[parsed.library], ", but mode argument sets ").concat((_NAMES$providedMode = NAMES[providedMode]) !== null && _NAMES$providedMode !== void 0 ? _NAMES$providedMode : providedMode, "."));
    }

    var mode = parsed.library;

    if (!(0,semver.satisfies)(VERSION[mode], "^".concat(parsed.version.slice(1)))) {
      console.warn("The input spec uses ".concat(NAMES[mode], " ").concat(parsed.version, ", but the current version of ").concat(NAMES[mode], " is v").concat(VERSION[mode], "."));
    }

    return mode;
  } // try to guess from the provided spec


  if ('mark' in spec || 'encoding' in spec || 'layer' in spec || 'hconcat' in spec || 'vconcat' in spec || 'facet' in spec || 'repeat' in spec) {
    return 'vega-lite';
  }

  if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {
    return 'vega';
  }

  return providedMode !== null && providedMode !== void 0 ? providedMode : 'vega';
}

function isLoader(o) {
  return !!(o && 'load' in o);
}

function createLoader(opts) {
  return isLoader(opts) ? opts : vega.loader(opts);
}

function embedOptionsFromUsermeta(parsedSpec) {
  var _ref;

  return (_ref = parsedSpec.usermeta && parsedSpec.usermeta['embedOptions']) !== null && _ref !== void 0 ? _ref : {};
}
/**
 * Embed a Vega visualization component in a web page. This function returns a promise.
 *
 * @param el        DOM element in which to place component (DOM node or CSS selector).
 * @param spec      String : A URL string from which to load the Vega specification.
 *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.
 * @param opts       A JavaScript object containing options for embedding.
 */


function vega_embed_module_embed(_x, _x2) {
  return _embed2.apply(this, arguments);
}

function _embed2() {
  _embed2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(el, spec) {
    var _parsedOpts$config, _usermetaOpts$config;

    var opts,
        parsedSpec,
        loader,
        usermetaLoader,
        _opts$loader,
        usermetaOpts,
        parsedOpts,
        mergedOpts,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};

            if (!isString(spec)) {
              _context.next = 10;
              break;
            }

            loader = createLoader(opts.loader);
            _context.t0 = JSON;
            _context.next = 6;
            return loader.load(spec);

          case 6:
            _context.t1 = _context.sent;
            parsedSpec = _context.t0.parse.call(_context.t0, _context.t1);
            _context.next = 11;
            break;

          case 10:
            parsedSpec = spec;

          case 11:
            usermetaLoader = embedOptionsFromUsermeta(parsedSpec).loader; // either create the loader for the first time or create a new loader if the spec has new loader options

            if (!loader || usermetaLoader) {
              loader = createLoader((_opts$loader = opts.loader) !== null && _opts$loader !== void 0 ? _opts$loader : usermetaLoader);
            }

            _context.next = 15;
            return loadOpts(embedOptionsFromUsermeta(parsedSpec), loader);

          case 15:
            usermetaOpts = _context.sent;
            _context.next = 18;
            return loadOpts(opts, loader);

          case 18:
            parsedOpts = _context.sent;
            mergedOpts = vega_embed_module_objectSpread(vega_embed_module_objectSpread({}, vega_embed_module_mergeDeep(parsedOpts, usermetaOpts)), {}, {
              config: mergeConfig((_parsedOpts$config = parsedOpts.config) !== null && _parsedOpts$config !== void 0 ? _parsedOpts$config : {}, (_usermetaOpts$config = usermetaOpts.config) !== null && _usermetaOpts$config !== void 0 ? _usermetaOpts$config : {})
            });
            _context.next = 22;
            return _embed(el, parsedSpec, mergedOpts, loader);

          case 22:
            return _context.abrupt("return", _context.sent);

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _embed2.apply(this, arguments);
}

function loadOpts(_x3, _x4) {
  return _loadOpts.apply(this, arguments);
}

function _loadOpts() {
  _loadOpts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opt, loader) {
    var _opt$config;

    var config, patch;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!isString(opt.config)) {
              _context2.next = 8;
              break;
            }

            _context2.t1 = JSON;
            _context2.next = 4;
            return loader.load(opt.config);

          case 4:
            _context2.t2 = _context2.sent;
            _context2.t0 = _context2.t1.parse.call(_context2.t1, _context2.t2);
            _context2.next = 9;
            break;

          case 8:
            _context2.t0 = (_opt$config = opt.config) !== null && _opt$config !== void 0 ? _opt$config : {};

          case 9:
            config = _context2.t0;

            if (!isString(opt.patch)) {
              _context2.next = 18;
              break;
            }

            _context2.t4 = JSON;
            _context2.next = 14;
            return loader.load(opt.patch);

          case 14:
            _context2.t5 = _context2.sent;
            _context2.t3 = _context2.t4.parse.call(_context2.t4, _context2.t5);
            _context2.next = 19;
            break;

          case 18:
            _context2.t3 = opt.patch;

          case 19:
            patch = _context2.t3;
            return _context2.abrupt("return", vega_embed_module_objectSpread(vega_embed_module_objectSpread(vega_embed_module_objectSpread({}, opt), patch ? {
              patch: patch
            } : {}), config ? {
              config: config
            } : {}));

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadOpts.apply(this, arguments);
}

function getRoot(el) {
  var possibleRoot = el.getRootNode ? el.getRootNode() : document;

  if (possibleRoot instanceof ShadowRoot) {
    return {
      root: possibleRoot,
      rootContainer: possibleRoot
    };
  } else {
    var _document$head;

    return {
      root: document,
      rootContainer: (_document$head = document.head) !== null && _document$head !== void 0 ? _document$head : document.body
    };
  }
}

function _embed(_x5, _x6) {
  return _embed3.apply(this, arguments);
}

function _embed3() {
  _embed3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(el, spec) {
    var _opts$config, _opts$actions, _opts$renderer, _opts$logLevel, _opts$downloadFileNam;

    var opts,
        loader,
        config,
        actions,
        i18n,
        renderer,
        logLevel,
        downloadFileName,
        element,
        ID,
        _getRoot,
        root,
        rootContainer,
        style,
        mode,
        vgSpec,
        parsed,
        container,
        chartWrapper,
        patch,
        ast,
        runtime,
        view,
        handler,
        hover,
        _ref2,
        hoverSet,
        updateSet,
        documentClickHandler,
        wrapper,
        details,
        summary,
        ctrl,
        _loop,
        _i,
        _arr,
        viewSourceLink,
        compileLink,
        _opts$editorUrl,
        editorUrl,
        editorLink,
        finalize,
        _args4 = arguments;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            finalize = function _finalize() {
              if (documentClickHandler) {
                document.removeEventListener('click', documentClickHandler);
              }

              view.finalize();
            };

            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            loader = _args4.length > 3 ? _args4[3] : undefined;
            config = opts.theme ? mergeConfig(vega_themes_module_namespaceObject[opts.theme], (_opts$config = opts.config) !== null && _opts$config !== void 0 ? _opts$config : {}) : opts.config;
            actions = isBoolean(opts.actions) ? opts.actions : vega_embed_module_mergeDeep({}, DEFAULT_ACTIONS, (_opts$actions = opts.actions) !== null && _opts$actions !== void 0 ? _opts$actions : {});
            i18n = vega_embed_module_objectSpread(vega_embed_module_objectSpread({}, I18N), opts.i18n);
            renderer = (_opts$renderer = opts.renderer) !== null && _opts$renderer !== void 0 ? _opts$renderer : 'canvas';
            logLevel = (_opts$logLevel = opts.logLevel) !== null && _opts$logLevel !== void 0 ? _opts$logLevel : vega.Warn;
            downloadFileName = (_opts$downloadFileNam = opts.downloadFileName) !== null && _opts$downloadFileNam !== void 0 ? _opts$downloadFileNam : 'visualization';
            element = typeof el === 'string' ? document.querySelector(el) : el;

            if (element) {
              _context4.next = 12;
              break;
            }

            throw new Error("".concat(el, " does not exist"));

          case 12:
            if (opts.defaultStyle !== false) {
              // Add a default stylesheet to the head of the document.
              ID = 'vega-embed-style';
              _getRoot = getRoot(element), root = _getRoot.root, rootContainer = _getRoot.rootContainer;

              if (!root.getElementById(ID)) {
                style = document.createElement('style');
                style.id = ID;
                style.innerText = opts.defaultStyle === undefined || opts.defaultStyle === true ? embedStyle.toString() : opts.defaultStyle;
                rootContainer.appendChild(style);
              }
            }

            mode = guessMode(spec, opts.mode);
            vgSpec = PREPROCESSOR[mode](spec, config);

            if (mode === 'vega-lite') {
              if (vgSpec.$schema) {
                parsed = parser_module(vgSpec.$schema);

                if (!(0,semver.satisfies)(VERSION.vega, "^".concat(parsed.version.slice(1)))) {
                  console.warn("The compiled spec uses Vega ".concat(parsed.version, ", but current version is v").concat(VERSION.vega, "."));
                }
              }
            }

            element.classList.add('vega-embed');

            if (actions) {
              element.classList.add('has-actions');
            }

            element.innerHTML = ''; // clear container

            container = element;

            if (actions) {
              chartWrapper = document.createElement('div');
              chartWrapper.classList.add(CHART_WRAPPER_CLASS);
              element.appendChild(chartWrapper);
              container = chartWrapper;
            }

            patch = opts.patch;

            if (patch) {
              if (patch instanceof Function) {
                vgSpec = patch(vgSpec);
              } else {
                vgSpec = applyPatch(vgSpec, patch, true, false).newDocument;
              }
            } // Set locale. Note that this is a global setting.


            if (opts.formatLocale) {
              vega.formatLocale(opts.formatLocale);
            }

            if (opts.timeFormatLocale) {
              vega.timeFormatLocale(opts.timeFormatLocale);
            }

            ast = opts.ast; // Do not apply the config to Vega when we have already applied it to Vega-Lite.
            // This call may throw an Error if parsing fails.

            runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config, {
              ast: ast
            });
            view = new (opts.viewClass || vega.View)(runtime, vega_embed_module_objectSpread({
              loader: loader,
              logLevel: logLevel,
              renderer: renderer
            }, ast ? {
              expr: vega.expressionInterpreter
            } : {}));
            view.addSignalListener('autosize', function (_, autosize) {
              var type = autosize.type;

              if (type == 'fit-x') {
                container.classList.add('fit-x');
                container.classList.remove('fit-y');
              } else if (type == 'fit-y') {
                container.classList.remove('fit-x');
                container.classList.add('fit-y');
              } else if (type == 'fit') {
                container.classList.add('fit-x', 'fit-y');
              } else {
                container.classList.remove('fit-x', 'fit-y');
              }
            });

            if (opts.tooltip !== false) {
              if (isTooltipHandler(opts.tooltip)) {
                handler = opts.tooltip;
              } else {
                // user provided boolean true or tooltip options
                handler = new vega_tooltip_module_Handler(opts.tooltip === true ? {} : opts.tooltip).call;
              }

              view.tooltip(handler);
            }

            hover = opts.hover;

            if (hover === undefined) {
              hover = mode === 'vega';
            }

            if (hover) {
              _ref2 = typeof hover === 'boolean' ? {} : hover, hoverSet = _ref2.hoverSet, updateSet = _ref2.updateSet;
              view.hover(hoverSet, updateSet);
            }

            if (opts) {
              if (opts.width != null) {
                view.width(opts.width);
              }

              if (opts.height != null) {
                view.height(opts.height);
              }

              if (opts.padding != null) {
                view.padding(opts.padding);
              }
            }

            _context4.next = 36;
            return view.initialize(container, opts.bind).runAsync();

          case 36:
            if (actions !== false) {
              wrapper = element;

              if (opts.defaultStyle !== false) {
                details = document.createElement('details');
                details.title = i18n.CLICK_TO_VIEW_ACTIONS;
                element.append(details);
                wrapper = details;
                summary = document.createElement('summary');
                summary.innerHTML = SVG_CIRCLES;
                details.append(summary);

                documentClickHandler = function documentClickHandler(ev) {
                  if (!details.contains(ev.target)) {
                    details.removeAttribute('open');
                  }
                };

                document.addEventListener('click', documentClickHandler);
              }

              ctrl = document.createElement('div');
              wrapper.append(ctrl);
              ctrl.classList.add('vega-actions'); // add 'Export' action

              if (actions === true || actions.export !== false) {
                _loop = function _loop() {
                  var ext = _arr[_i];

                  if (actions === true || actions.export === true || actions.export[ext]) {
                    var i18nExportAction = i18n["".concat(ext.toUpperCase(), "_ACTION")];
                    var exportLink = document.createElement('a');
                    exportLink.text = i18nExportAction;
                    exportLink.href = '#';
                    exportLink.target = '_blank';
                    exportLink.download = "".concat(downloadFileName, ".").concat(ext); // add link on mousedown so that it's correct when the click happens

                    exportLink.addEventListener('mousedown', /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e) {
                        var url;
                        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                e.preventDefault();
                                _context3.next = 3;
                                return view.toImageURL(ext, opts.scaleFactor);

                              case 3:
                                url = _context3.sent;
                                this.href = url;

                              case 5:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3, this);
                      }));

                      return function (_x7) {
                        return _ref3.apply(this, arguments);
                      };
                    }());
                    ctrl.append(exportLink);
                  }
                };

                for (_i = 0, _arr = ['svg', 'png']; _i < _arr.length; _i++) {
                  _loop();
                }
              } // add 'View Source' action


              if (actions === true || actions.source !== false) {
                viewSourceLink = document.createElement('a');
                viewSourceLink.text = i18n.SOURCE_ACTION;
                viewSourceLink.href = '#';
                viewSourceLink.addEventListener('click', function (e) {
                  var _opts$sourceHeader, _opts$sourceFooter;

                  viewSource(json_stringify_pretty_compact_default()(spec), (_opts$sourceHeader = opts.sourceHeader) !== null && _opts$sourceHeader !== void 0 ? _opts$sourceHeader : '', (_opts$sourceFooter = opts.sourceFooter) !== null && _opts$sourceFooter !== void 0 ? _opts$sourceFooter : '', mode);
                  e.preventDefault();
                });
                ctrl.append(viewSourceLink);
              } // add 'View Compiled' action


              if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {
                compileLink = document.createElement('a');
                compileLink.text = i18n.COMPILED_ACTION;
                compileLink.href = '#';
                compileLink.addEventListener('click', function (e) {
                  var _opts$sourceHeader2, _opts$sourceFooter2;

                  viewSource(json_stringify_pretty_compact_default()(vgSpec), (_opts$sourceHeader2 = opts.sourceHeader) !== null && _opts$sourceHeader2 !== void 0 ? _opts$sourceHeader2 : '', (_opts$sourceFooter2 = opts.sourceFooter) !== null && _opts$sourceFooter2 !== void 0 ? _opts$sourceFooter2 : '', 'vega');
                  e.preventDefault();
                });
                ctrl.append(compileLink);
              } // add 'Open in Vega Editor' action


              if (actions === true || actions.editor !== false) {
                editorUrl = (_opts$editorUrl = opts.editorUrl) !== null && _opts$editorUrl !== void 0 ? _opts$editorUrl : 'https://vega.github.io/editor/';
                editorLink = document.createElement('a');
                editorLink.text = i18n.EDITOR_ACTION;
                editorLink.href = '#';
                editorLink.addEventListener('click', function (e) {
                  post(window, editorUrl, {
                    config: config,
                    mode: mode,
                    renderer: renderer,
                    spec: json_stringify_pretty_compact_default()(spec)
                  });
                  e.preventDefault();
                });
                ctrl.append(editorLink);
              }
            }

            return _context4.abrupt("return", {
              view: view,
              spec: spec,
              vgSpec: vgSpec,
              finalize: finalize
            });

          case 38:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _embed3.apply(this, arguments);
}

/* harmony default export */ var vega_embed_module = (vega_embed_module_embed);

;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/isFunction.js
function isFunction_isFunction(functionToCheck) {
  var getType = {};
  return !!functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/updateSingleDatasetInView.js


function updateSingleDatasetInView(view, name, value) {
  if (value) {
    if (isFunction_isFunction(value)) {
      value(view.data(name));
    } else {
      view.change(name, vega.changeset().remove(function () {
        return true;
      }).insert(value));
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/updateMultipleDatasetsInView.js

function updateMultipleDatasetsInView(view, data) {
  Object.keys(data).forEach(function (name) {
    updateSingleDatasetInView(view, name, data[name]);
  });
}
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(45697);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/getUniqueFieldNames.js
function getUniqueFieldNames(objects) {
  var fields = new Set();
  objects.forEach(function (o) {
    Object.keys(o).forEach(function (field) {
      fields.add(field);
    });
  });
  return fields;
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/constants.js
// eslint-disable-next-line import/prefer-default-export
var NOOP = function NOOP() {};
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/addSignalListenersToView.js
function addSignalListenersToView(view, signalListeners) {
  var signalNames = Object.keys(signalListeners);
  signalNames.forEach(function (signalName) {
    try {
      view.addSignalListener(signalName, signalListeners[signalName]);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.warn('Cannot add invalid signal listener.', error);
    }
  });
  return signalNames.length > 0;
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/computeSpecChanges.js



function computeSpecChanges(newSpec, oldSpec) {
  if (newSpec === oldSpec) return false;
  var changes = {
    width: false,
    height: false,
    isExpensive: false
  };
  var fieldNames = getUniqueFieldNames([newSpec, oldSpec]);

  if (fieldNames.has('width') && (!('width' in newSpec) || !('width' in oldSpec) || newSpec.width !== oldSpec.width)) {
    if ('width' in newSpec && typeof newSpec.width === 'number') {
      changes.width = newSpec.width;
    } else {
      changes.isExpensive = true;
    }
  }

  if (fieldNames.has('height') && (!('height' in newSpec) || !('height' in oldSpec) || newSpec.height !== oldSpec.height)) {
    if ('height' in newSpec && typeof newSpec.height === 'number') {
      changes.height = newSpec.height;
    } else {
      changes.isExpensive = true;
    }
  } // Delete cheap fields


  fieldNames.delete('width');
  fieldNames.delete('height');

  if ((0,toConsumableArray/* default */.Z)(fieldNames).some(function (field) {
    return !(field in newSpec) || !(field in oldSpec) || !fast_deep_equal_default()(newSpec[field], oldSpec[field]);
  })) {
    changes.isExpensive = true;
  }

  return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/removeSignalListenersFromView.js
function removeSignalListenersFromView(view, signalListeners) {
  var signalNames = Object.keys(signalListeners);
  signalNames.forEach(function (signalName) {
    try {
      view.removeSignalListener(signalName, signalListeners[signalName]);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.warn('Cannot remove invalid signal listener.', error);
    }
  });
  return signalNames.length > 0;
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/utils/combineSpecWithDimension.js


function combineSpecWithDimension_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function combineSpecWithDimension_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { combineSpecWithDimension_ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { combineSpecWithDimension_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function combineSpecWithDimension(props) {
  var spec = props.spec,
      width = props.width,
      height = props.height;

  if (typeof width !== 'undefined' && typeof height !== 'undefined') {
    return combineSpecWithDimension_objectSpread(combineSpecWithDimension_objectSpread({}, spec), {}, {
      width: width,
      height: height
    });
  }

  if (typeof width !== 'undefined') {
    return combineSpecWithDimension_objectSpread(combineSpecWithDimension_objectSpread({}, spec), {}, {
      width: width
    });
  }

  if (typeof height !== 'undefined') {
    return combineSpecWithDimension_objectSpread(combineSpecWithDimension_objectSpread({}, spec), {}, {
      height: height
    });
  }

  return spec;
}
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/VegaEmbed.js







var VegaEmbed_excluded = ["spec", "onNewView", "signalListeners", "width", "height"];

function VegaEmbed_createSuper(Derived) { var hasNativeReflectConstruct = VegaEmbed_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function VegaEmbed_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



function VegaEmbed_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}











var VegaEmbed = /*#__PURE__*/function (_React$PureComponent) {
  (0,inherits/* default */.Z)(VegaEmbed, _React$PureComponent);

  var _super = VegaEmbed_createSuper(VegaEmbed);

  function VegaEmbed() {
    var _this;

    (0,classCallCheck/* default */.Z)(this, VegaEmbed);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    VegaEmbed_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "containerRef", /*#__PURE__*/react.createRef());

    VegaEmbed_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "viewPromise", void 0);

    VegaEmbed_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "handleError", function (error) {
      var _this$props$onError = _this.props.onError,
          onError = _this$props$onError === void 0 ? NOOP : _this$props$onError;
      onError(error); // eslint-disable-next-line no-console

      console.warn(error);
      return undefined;
    });

    VegaEmbed_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "modifyView", function (action) {
      if (_this.viewPromise) {
        _this.viewPromise.then(function (view) {
          if (view) {
            action(view);
          }

          return true;
        }).catch(_this.handleError);
      }
    });

    return _this;
  }

  (0,createClass/* default */.Z)(VegaEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.createView();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var fieldSet = getUniqueFieldNames([this.props, prevProps]);
      fieldSet.delete('className');
      fieldSet.delete('signalListeners');
      fieldSet.delete('spec');
      fieldSet.delete('style');
      fieldSet.delete('width');
      fieldSet.delete('height'); // Only create a new view if necessary

      if (Array.from(fieldSet).some(function (f) {
        return _this2.props[f] !== prevProps[f];
      })) {
        this.clearView();
        this.createView();
      } else {
        var specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));
        var newSignalListeners = this.props.signalListeners;
        var oldSignalListeners = prevProps.signalListeners;

        if (specChanges) {
          if (specChanges.isExpensive) {
            this.clearView();
            this.createView();
          } else {
            var areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);
            this.modifyView(function (view) {
              if (specChanges.width !== false) {
                view.width(specChanges.width);
              }

              if (specChanges.height !== false) {
                view.height(specChanges.height);
              }

              if (areSignalListenersChanged) {
                if (oldSignalListeners) {
                  removeSignalListenersFromView(view, oldSignalListeners);
                }

                if (newSignalListeners) {
                  addSignalListenersToView(view, newSignalListeners);
                }
              }

              view.run();
            });
          }
        } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {
          this.modifyView(function (view) {
            if (oldSignalListeners) {
              removeSignalListenersFromView(view, oldSignalListeners);
            }

            if (newSignalListeners) {
              addSignalListenersToView(view, newSignalListeners);
            }

            view.run();
          });
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearView();
    }
  }, {
    key: "createView",
    value: function createView() {
      var _this$props = this.props,
          spec = _this$props.spec,
          onNewView = _this$props.onNewView,
          _this$props$signalLis = _this$props.signalListeners,
          signalListeners = _this$props$signalLis === void 0 ? {} : _this$props$signalLis,
          width = _this$props.width,
          height = _this$props.height,
          options = (0,objectWithoutProperties/* default */.Z)(_this$props, VegaEmbed_excluded);

      if (this.containerRef.current) {
        var finalSpec = combineSpecWithDimension(this.props);
        this.viewPromise = vega_embed_module(this.containerRef.current, finalSpec, options).then(function (_ref) {
          var view = _ref.view;

          if (addSignalListenersToView(view, signalListeners)) {
            view.run();
          }

          return view;
        }).catch(this.handleError);

        if (onNewView) {
          this.modifyView(onNewView);
        }
      }
    }
  }, {
    key: "clearView",
    value: function clearView() {
      this.modifyView(function (view) {
        view.finalize();
      });
      this.viewPromise = undefined;
      return this;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          style = _this$props2.style; // Create the container Vega draws inside

      return /*#__PURE__*/react.createElement("div", {
        ref: this.containerRef,
        className: className,
        style: style
      });
    }
  }]);

  return VegaEmbed;
}(react.PureComponent);



VegaEmbed_defineProperty(VegaEmbed, "propTypes", {
  className: (prop_types_default()).string,
  onError: (prop_types_default()).func
});
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/Vega.js







var Vega_excluded = ["data"];

function Vega_createSuper(Derived) { var hasNativeReflectConstruct = Vega_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }

function Vega_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function Vega_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}






var Vega_EMPTY = {};

var Vega = /*#__PURE__*/function (_React$PureComponent) {
  (0,inherits/* default */.Z)(Vega, _React$PureComponent);

  var _super = Vega_createSuper(Vega);

  function Vega() {
    var _this;

    (0,classCallCheck/* default */.Z)(this, Vega);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    Vega_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "vegaEmbed", /*#__PURE__*/react.createRef());

    Vega_defineProperty((0,assertThisInitialized/* default */.Z)(_this), "handleNewView", function (view) {
      _this.update();

      var _this$props$onNewView = _this.props.onNewView,
          onNewView = _this$props$onNewView === void 0 ? NOOP : _this$props$onNewView;
      onNewView(view);
    });

    return _this;
  }

  (0,createClass/* default */.Z)(Vega, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.update();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!shallowEqual(this.props.data, prevProps.data)) {
        this.update();
      }
    }
  }, {
    key: "update",
    value: function update() {
      var data = this.props.data;

      if (this.vegaEmbed.current && data && Object.keys(data).length > 0) {
        this.vegaEmbed.current.modifyView(function (view) {
          updateMultipleDatasetsInView(view, data);
          view.resize().run();
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          data = _this$props.data,
          restProps = (0,objectWithoutProperties/* default */.Z)(_this$props, Vega_excluded);

      return /*#__PURE__*/react.createElement(VegaEmbed, _extends({
        ref: this.vegaEmbed
      }, restProps, {
        onNewView: this.handleNewView
      }));
    }
  }]);

  return Vega;
}(react.PureComponent);



Vega_defineProperty(Vega, "defaultProps", {
  data: Vega_EMPTY
});
;// CONCATENATED MODULE: ./node_modules/react-vega/esm/VegaLite.js
function VegaLite_extends() {
  VegaLite_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return VegaLite_extends.apply(this, arguments);
}



/**
 * Syntactic sugar for using vega-lite with Vega
 * @param props
 */

function VegaLite(props) {
  return /*#__PURE__*/react.createElement(Vega, VegaLite_extends({}, props, {
    mode: "vega-lite"
  }));
}
;// CONCATENATED MODULE: ./src/components/blockly/fields/VegaLite.tsx

/* harmony default export */ var fields_VegaLite = (VegaLite);

/***/ })

}]);