{"version":3,"sources":["webpack://jacdac-docs/./src/components/dialogs/StartSimulatorDialog.tsx","webpack://jacdac-docs/./src/components/ui/SelectWithLabel.tsx"],"names":["StartSimulatorDialog","props","open","onClose","useContext","JacdacContext","bus","deviceHostDialogId","useId","deviceHostLabelId","useState","selected","setSelected","useSnackbar","enqueueSnackbar","providerDefinitions","useMemo","servers","useMediaQueries","mobile","handleChange","ev","target","value","handleCancel","handleStart","provider","find","h","name","addServiceProvider","handleAddAll","allProviderDefinitions","uniqueMap","filter","hd","serviceClasses","length","toString","variant","key","delay","map","host","VIRTUAL_DEVICE_NODE_NAME","Flags","SelectWithLabel","label","fullWidth","required","disabled","error","placeholder","onChange","children","helperText","type","none","labelId","descrId","hasDescr","undefined"],"mappings":"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","file":"4610-396b0f8bc0811bd25746.js","sourcesContent":["import {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    MenuItem,\n} from \"@material-ui/core\"\nimport { useSnackbar } from \"notistack\"\nimport React, { useContext, useMemo, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport servers, {\n    addServiceProvider,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport { VIRTUAL_DEVICE_NODE_NAME } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { delay, uniqueMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport KindIcon from \"../KindIcon\"\nimport SelectWithLabel from \"../ui/SelectWithLabel\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\n\nexport default function StartSimulatorDialog(props: {\n    open: boolean\n    onClose: () => void\n}) {\n    const { open, onClose } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const deviceHostDialogId = useId()\n    const deviceHostLabelId = useId()\n\n    const [selected, setSelected] = useState(\"button\")\n    const { enqueueSnackbar } = useSnackbar()\n    const providerDefinitions = useMemo(() => servers(), [])\n    const { mobile } = useMediaQueries()\n\n    const handleChange = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        setSelected(ev.target.value as string)\n    }\n    const handleCancel = () => {\n        onClose()\n    }\n    const handleStart = () => {\n        const provider = providerDefinitions.find(h => h.name === selected)\n        addServiceProvider(bus, provider)\n        onClose()\n    }\n    const handleAddAll = async () => {\n        const allProviderDefinitions = uniqueMap(\n            providerDefinitions.filter(hd => hd.serviceClasses.length === 1),\n            hd => hd.serviceClasses[0].toString(),\n            h => h\n        )\n        enqueueSnackbar(\n            `starting ${allProviderDefinitions.length} simulators...`,\n            {\n                variant: \"info\",\n                key: \"startdevicehosts\",\n            }\n        )\n        onClose()\n        for (const provider of allProviderDefinitions) {\n            await delay(100)\n            addServiceProvider(bus, provider)\n        }\n    }\n\n    return (\n        <Dialog\n            id={deviceHostDialogId}\n            aria-labelledby={deviceHostLabelId}\n            open={open}\n            onClose={onClose}\n            fullScreen={mobile}\n        >\n            <DialogTitle id={deviceHostLabelId}>Start a simulator</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <SelectWithLabel\n                            fullWidth={true}\n                            helperText={\n                                \"Select the service that will run on the simulator\"\n                            }\n                            label={\"Simulator\"}\n                            value={selected}\n                            onChange={handleChange}\n                        >\n                            {providerDefinitions.map(host => (\n                                <MenuItem key={host.name} value={host.name}>\n                                    {host.name}\n                                </MenuItem>\n                            ))}\n                        </SelectWithLabel>\n                    </Grid>\n                    <Grid item>\n                        <Grid container spacing={1}>\n                            {mobile && (\n                                <Grid item>\n                                    <Button\n                                        aria-label={`cancel`}\n                                        variant=\"contained\"\n                                        title=\"Cancel\"\n                                        onClick={handleCancel}\n                                    >\n                                        cancel\n                                    </Button>\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <Button\n                                    aria-label={`start ${selected}`}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    title=\"Start new simulator\"\n                                    onClick={handleStart}\n                                    startIcon={\n                                        <KindIcon\n                                            kind={VIRTUAL_DEVICE_NODE_NAME}\n                                        />\n                                    }\n                                >\n                                    start\n                                </Button>\n                            </Grid>\n                            {Flags.diagnostics && (\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={handleAddAll}\n                                    >\n                                        start all simulators\n                                    </Button>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n","import {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, ReactNode } from \"react\"\nimport { useId } from \"react-use-id-hook\"\n\nexport default function SelectWithLabel(props: {\n    required?: boolean\n    label?: string\n    disabled?: boolean\n    error?: string\n    value?: string\n    placeholder?: string\n    type?: string\n    fullWidth?: boolean\n    onChange?: (ev: ChangeEvent<{ name?: string; value: unknown }>) => void\n    onClose?: (ev: ChangeEvent<unknown>) => void\n    helperText?: string\n    children?: ReactNode\n    none?: ReactNode\n}) {\n    const {\n        label,\n        fullWidth,\n        required,\n        disabled,\n        value,\n        error,\n        placeholder,\n        onChange,\n        onClose,\n        children,\n        helperText,\n        type,\n        none,\n    } = props\n    const labelId = useId()\n    const descrId = useId()\n    const hasDescr = !!helperText || !!error\n\n    return (\n        <FormControl fullWidth={fullWidth} variant=\"outlined\">\n            <InputLabel id={labelId} key=\"label\">\n                {required ? `${label} *` : label}\n            </InputLabel>\n            <Select\n                disabled={disabled}\n                label={label}\n                value={value}\n                error={!!error}\n                fullWidth={true}\n                placeholder={placeholder}\n                type={type}\n                labelId={labelId}\n                aria-describedby={hasDescr ? descrId : undefined}\n                onChange={onChange}\n                onClose={onClose}\n            >\n                {none && (\n                    <MenuItem key={\"none\"} value={\"\"}>\n                        {none}\n                    </MenuItem>\n                )}\n                {children}\n            </Select>\n            {hasDescr && (\n                <FormHelperText id={descrId}>\n                    {error || helperText}\n                </FormHelperText>\n            )}\n        </FormControl>\n    )\n}\n"],"sourceRoot":""}