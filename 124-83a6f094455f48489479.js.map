{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardWindDirection.tsx"],"names":["DashboardWindDirection","props","service","directionRegister","register","WindDirectionReg","WindDirection","useRegisterUnpackedValue","direction","host","useServiceHost","color","useWidgetTheme","background","controlBackground","active","arrowHeadId","useId","a","useThrottledValue","undefined","w","h","mw","mh","r","sw","cx","cy","cy2","handleChange","ev","newValue","reading","setValues","refresh"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEe,SAASA,sBAAT,CAAgCC,KAAhC,EAA8D;AAAA,MACjEC,OADiE,GACrDD,KADqD,CACjEC,OADiE;AAGzE,MAAMC,iBAAiB,GAAGD,OAAO,CAACE,QAAR,CAAiBC,uFAAgB,CAACC,aAAlC,CAA1B;;AAHyE,8BAIrDC,iGAAwB,CACxCJ,iBADwC,EAExCF,KAFwC,CAJ6B;AAAA,MAIlEO,SAJkE;;AASzE,MAAMC,IAAI,GAAGC,6EAAc,CAA8BR,OAA9B,CAA3B;AACA,MAAMS,KAAK,GAAGF,IAAI,GAAG,WAAH,GAAiB,SAAnC;;AAVyE,wBAWvBG,+EAAc,CAACD,KAAD,CAXS;AAAA,MAWjEE,UAXiE,mBAWjEA,UAXiE;AAAA,MAWrDC,iBAXqD,mBAWrDA,iBAXqD;AAAA,MAWlCC,MAXkC,mBAWlCA,MAXkC;;AAYzE,MAAMC,WAAW,GAAGC,uEAAK,EAAzB;AAEA,MAAMC,CAAC,GAAGC,gFAAiB,CAACX,SAAD,EAAY,GAAZ,CAA3B;AAEA,MAAIA,SAAS,KAAKY,SAAlB,EAA6B,oBAAO,2DAAC,oEAAD,OAAP;AAE7B,MAAMC,CAAC,GAAG,EAAV;AACA,MAAMC,CAAC,GAAG,EAAV;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,GAAX;AACA,MAAMC,CAAC,GAAG,CAACJ,CAAC,IAAI,CAAN,IAAW,CAArB;AACA,MAAMK,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAGN,CAAC,IAAI,CAAhB;AACA,MAAMO,EAAE,GAAIN,CAAC,GAAG,CAAL,GAAU,CAArB;AACA,MAAMO,GAAG,GAAIP,CAAC,GAAG,CAAL,GAAU,CAAtB;;AAEA,MAAMQ,YAAY;AAAA,wMAAG,iBAAOC,EAAP,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACXvB,IADW,aACXA,IADW,uBACXA,IAAI,CAAEwB,OAAN,CAAcC,SAAd,CAAwB,CAACF,QAAD,CAAxB,CADW;;AAAA;AAEjB7B,+BAAiB,CAACgC,OAAlB;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZL,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAKA,sBACI,2DAAC,kEAAD;AAAM,aAAS,MAAf;AAAgB,aAAS,EAAC;AAA1B,kBACI,2DAAC,kEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,2DAAC,kEAAD;AAAW,SAAK,EAAET,CAAlB;AAAqB,UAAM,EAAEC;AAA7B,kBACI,sFACI;AACI,MAAE,EAAEN,WADR;AAEI,eAAW,EAAEO,EAFjB;AAGI,gBAAY,EAAEC,EAHlB;AAII,QAAI,EAAE,CAJV;AAKI,QAAI,EAAEA,EAAE,GAAG,CALf;AAMI,UAAM,EAAC;AANX,kBAQI;AACI,QAAI,EAAET,MADV;AAEI,UAAM,YAAUQ,EAAV,SAAgBC,EAAE,GAAG,CAArB,YAA6BA;AAFvC,IARJ,CADJ,CADJ,eAgBI;AAAG,aAAS,cAAYN,CAAZ,WAAkBG,CAAC,IAAI,CAAvB,YAA6BC,CAAC,IAAI,CAAlC;AAAZ,kBACI;AACI,MAAE,EAAED,CAAC,IAAI,CADb;AAEI,MAAE,EAAEC,CAAC,IAAI,CAFb;AAGI,KAAC,EAAEG,CAHP;AAII,QAAI,EAAEX,iBAJV;AAKI,UAAM,EAAED,UALZ;AAMI,eAAW,EAAEa;AANjB,IADJ,eASI;AACI,MAAE,EAAEC,EADR;AAEI,MAAE,EAAEC,EAFR;AAGI,MAAE,EAAED,EAHR;AAII,MAAE,EAAEE,GAJR;AAKI,UAAM,EAAEd,MALZ;AAMI,eAAW,EAAEW,EANjB;AAOI,aAAS,YAAUV,WAAV,MAPb;AAQI,sCAA8BR,SAA9B;AARJ,IATJ,CAhBJ,CADJ,CADJ,EAwCKC,IAAI,iBACD,2DAAC,kEAAD;AAAM,QAAI;AAAV,kBACI,2DAAC,kEAAD;AACI,SAAK,EAAEE,KADX;AAEI,qBAAiB,EAAC,MAFtB;AAGI,OAAG,EAAE,CAHT;AAII,OAAG,EAAE,GAJT;AAKI,QAAI,EAAE,CALV;AAMI,SAAK,EAAEH,SANX;AAOI,YAAQ,EAAEsB;AAPd,IADJ,CAzCR,CADJ;AAwDH,C","file":"124-83a6f094455f48489479.js","sourcesContent":["import React from \"react\"\nimport { WindDirectionReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceHost from \"../hooks/useServiceHost\"\nimport { useId } from \"react-use-id-hook\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport { Grid, Slider } from \"@material-ui/core\"\nimport SensorServiceHost from \"../../../jacdac-ts/src/hosts/sensorservicehost\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nexport default function DashboardWindDirection(props: DashboardServiceProps) {\n    const { service } = props\n\n    const directionRegister = service.register(WindDirectionReg.WindDirection)\n    const [direction] = useRegisterUnpackedValue<[number]>(\n        directionRegister,\n        props\n    )\n\n    const host = useServiceHost<SensorServiceHost<[number]>>(service)\n    const color = host ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const arrowHeadId = useId()\n\n    const a = useThrottledValue(direction, 360)\n\n    if (direction === undefined) return <LoadingProgress />\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const mh = 4.5\n    const r = (w >> 1) - 4\n    const sw = 3\n    const cx = w >> 1\n    const cy = (h * 4) / 5\n    const cy2 = (h * 2) / 5\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await host?.reading.setValues([newValue as number])\n        directionRegister.refresh()\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    <defs>\n                        <marker\n                            id={arrowHeadId}\n                            markerWidth={mw}\n                            markerHeight={mh}\n                            refX={0}\n                            refY={mh / 2}\n                            orient=\"auto\"\n                        >\n                            <polygon\n                                fill={active}\n                                points={`0 0, ${mw} ${mh / 2}, 0 ${mh}`}\n                            />\n                        </marker>\n                    </defs>\n                    <g transform={`rotate(${a}, ${w >> 1}, ${h >> 1})`}>\n                        <circle\n                            cx={w >> 1}\n                            cy={h >> 1}\n                            r={r}\n                            fill={controlBackground}\n                            stroke={background}\n                            strokeWidth={sw}\n                        />\n                        <line\n                            x1={cx}\n                            y1={cy}\n                            x2={cx}\n                            y2={cy2}\n                            stroke={active}\n                            strokeWidth={sw}\n                            markerEnd={`url(#${arrowHeadId})`}\n                            aria-label={`arrow point at ${direction}Â°`}\n                        />\n                    </g>\n                </SvgWidget>\n            </Grid>\n            {host && (\n                <Grid item>\n                    <Slider\n                        color={color}\n                        valueLabelDisplay=\"auto\"\n                        min={0}\n                        max={360}\n                        step={5}\n                        value={direction}\n                        onChange={handleChange}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}