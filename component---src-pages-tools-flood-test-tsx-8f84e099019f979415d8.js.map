{"version":3,"sources":["webpack:///./src/components/alert/ConnectAlert.tsx","webpack:///./src/components/ui/GridHeader.tsx","webpack:///./node_modules/@material-ui/core/esm/TextField/TextField.js","webpack:///./src/pages/tools/flood-test.tsx"],"names":["useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","props","classes","serviceClass","useContext","JacdacContext","bus","transports","devices","useChange","b","ignoreSelf","spec","serviceSpecificationFromClassIdentifier","length","name","map","transport","type","ConnectAlert","hr","background","palette","text","disabled","marginBottom","start","width","GridHeader","title","count","variant","action","clsx","undefined","FloodCard","device","numResponses","startCounter","size","handleClick","service","data","jdpack","sendCmdAsync","ControlCmd","FloodPing","Page","useDevices","useState","setNumResponses","setStartCounter","setSize","handleChangeNumberResponses","ev","i","parseInt","target","value","isNaN","handleChangeStartCounter","Math","max","handleChangeSize","id"],"mappings":"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,MAAtB;AAA6B,WAAO,EAAED,OAAO,IAAI;AAAjD,KAA+DF,KAA/D,CAFJ,EAGKC,KAAK,KAAKI,SAAV,iBAAuB,2DAAC,iEAAD;AAAK,aAAS,EAAC,MAAf;AAAsB,MAAE,EAAE;AAA1B,kBAA+B,2DAAC,iEAAD;AAAM,SAAK,EAAEJ;AAAb,IAA/B,CAH5B,CAJJ,eASI,2DAAC,iEAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI;AAAI,aAAS,EAAE5B,OAAO,CAACkB;AAAvB,IADJ,CATJ,CADG,CAAP;AAeH,C;;;;;;;;ACrCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACgC;AAC3D;AACP;AACqB;AAChB;AACY;AACI;AACN;AACE;AACM;AAChB;AACe;AAC9C;AACA,YAAY,sDAAK;AACjB,UAAU,4DAAW;AACrB,YAAY,8DAAa;AACzB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,gDAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0GAAwB;;AAEtC,MAAM,KAAqC,EAAE,EAI1C;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC,mDAAmB,CAAC,8CAAc;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,mDAAmB,iBAAiB,0FAAQ;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"component---src-pages-tools-flood-test-tsx-8f84e099019f979415d8.js","sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport ConnectButton from \"../../jacdac/ConnectButton\"\nimport { NoSsr } from \"@material-ui/core\"\nimport useChange from \"../../jacdac/useChange\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        button: {\n            marginLeft: theme.spacing(2),\n        },\n    })\n)\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useChange(bus, b => b.devices({ serviceClass, ignoreSelf: true }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                {transports.map(transport => (\n                    <ConnectButton\n                        key={transport.type}\n                        transport={transport}\n                        className={classes.button}\n                        full={true}\n                        transparent={true}\n                    />\n                ))}\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import { Box, Chip, createStyles, Grid, makeStyles, Typography, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => createStyles({\n    hr: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\"\n    },\n    start: {\n        width: theme.spacing(2)\n    },\n}));\n\nexport default function GridHeader(props: {\n    title?: string,\n    count?: number,\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\",\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props;\n    const classes = useStyles();\n    return <Grid item xs={12}>\n        <Grid container direction=\"row\" spacing={1} justify=\"center\" alignItems=\"center\">\n            <Grid item>\n                <hr className={clsx(classes.hr, classes.start)} />\n            </Grid>\n            <Grid item>\n                {action && <Box component=\"span\" mr={1}>{action}</Box>}\n                <Typography component=\"span\" variant={variant || \"subtitle1\"}>{title}</Typography>\n                {count !== undefined && <Box component=\"span\" ml={0.5}><Chip label={count} /></Box>}\n            </Grid>\n            <Grid item xs>\n                <hr className={classes.hr} />\n            </Grid>\n        </Grid>\n    </Grid>\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    if (label) {\n      var _InputLabelProps$requ;\n\n      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;\n      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && \"\\xA0*\");\n    }\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && /*#__PURE__*/React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);","import {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\"\nimport CmdButton from \"../../components/CmdButton\"\nimport { ControlCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectButtons from \"../../jacdac/ConnectButtons\"\n\nfunction FloodCard(props: {\n    device: JDDevice\n    numResponses: number\n    startCounter: number\n    size: number\n}) {\n    const { device, numResponses, startCounter, size } = props\n    const handleClick = async () => {\n        const service = device.service(0)\n        const data = jdpack<[number, number, number]>(\"u32 u32 u8\", [\n            numResponses,\n            startCounter,\n            size,\n        ])\n        await service.sendCmdAsync(ControlCmd.FloodPing, data)\n    }\n    return (\n        <Card>\n            <DeviceCardHeader device={device} />\n            <CardActions>\n                <CmdButton onClick={handleClick}>Flood</CmdButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({})\n    const [numResponses, setNumResponses] = useState(100)\n    const [startCounter, setStartCounter] = useState(0)\n    const [size, setSize] = useState(32)\n\n    const handleChangeNumberResponses = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setNumResponses(i)\n    }\n    const handleChangeStartCounter = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setStartCounter(Math.max(0, i))\n    }\n    const handleChangeSize = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setSize(Math.max(1, i))\n    }\n\n    return (\n        <>\n            <h1>Flood Test</h1>\n            <Card>\n                <CardHeader title=\"Configuration\" />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <TextField\n                                label=\"number of responses\"\n                                value={numResponses}\n                                onChange={handleChangeNumberResponses}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"start counter\"\n                                value={startCounter}\n                                onChange={handleChangeStartCounter}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"size\"\n                                value={size}\n                                onChange={handleChangeSize}\n                                type=\"number\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Grid container spacing={1}>\n                <GridHeader\n                    action={<ConnectButtons full={false} transparent={true} />}\n                    title={\"Devices\"}\n                />\n                {devices.map(device => (\n                    <Grid key={device.id} item>\n                        <FloodCard\n                            device={device}\n                            numResponses={numResponses}\n                            startCounter={startCounter}\n                            size={size}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <ConnectAlert />\n        </>\n    )\n}\n"],"sourceRoot":""}