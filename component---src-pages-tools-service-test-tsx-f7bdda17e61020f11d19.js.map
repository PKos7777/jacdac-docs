{"version":3,"file":"component---src-pages-tools-service-test-tsx-f7bdda17e61020f11d19.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/pages/tools/service-test.tsx"],"sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport ConnectButton from \"../buttons/ConnectButton\"\nimport { NoSsr } from \"@material-ui/core\"\nimport useChange from \"../../jacdac/useChange\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        button: {\n            marginLeft: theme.spacing(2),\n        },\n    })\n)\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const classes = useStyles()\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useChange(bus, b =>\n        b.devices({ serviceClass, ignoreSelf: true })\n    )\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                {transports.map(transport => (\n                    <ConnectButton\n                        key={transport.type}\n                        transport={transport}\n                        className={classes.button}\n                        full={true}\n                        transparent={true}\n                    />\n                ))}\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import React, { useState } from \"react\"\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    Grid,\n    Typography,\n} from \"@material-ui/core\"\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport useChange from \"../../jacdac/useChange\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport ServiceTestRunner from \"../../components/test/ServiceTestRunner\"\n\nfunction DeviceItem(props: {\n    device: JDDevice\n    serviceUnderTest: JDService\n    onServiceUnderTestSelected: (service: JDService) => void\n}) {\n    const { device, serviceUnderTest, onServiceUnderTestSelected } = props\n    const services = useChange(device, d => d.services({ specification: true }))\n    const gridBreakpoints = useGridBreakpoints()\n    const handleServiceSelected = (service: JDService) => () =>\n        onServiceUnderTestSelected(service)\n    return (\n        <Grid item {...gridBreakpoints}>\n            <Card>\n                <DeviceCardHeader device={device} showAvatar={true} showReset={true} />\n                <CardContent>\n                    <Typography variant=\"caption\">\n                        Select a service to test.\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Grid container spacing={1}>\n                        {services?.map(service => (\n                            <Grid item key={service.id}>\n                                <Button\n                                    variant={\n                                        serviceUnderTest === service\n                                            ? \"contained\"\n                                            : \"outlined\"\n                                    }\n                                    color={\n                                        serviceUnderTest === service\n                                            ? \"primary\"\n                                            : undefined\n                                    }\n                                    onClick={handleServiceSelected(service)}\n                                >\n                                    {service.name}\n                                </Button>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </CardActions>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({ announced: true })\n    const [serviceUnderTest, setServiceUnderTest] = useState<JDService>(\n        undefined\n    )\n    return (\n        <>\n            <h1>Service Tests</h1>\n            <p>Connect devices to test its services.</p>\n            <ConnectAlert />\n            <Grid container spacing={2}>\n                {devices?.map(device => (\n                    <DeviceItem\n                        key={device.id}\n                        device={device}\n                        serviceUnderTest={serviceUnderTest}\n                        onServiceUnderTestSelected={setServiceUnderTest}\n                    />\n                ))}\n            </Grid>\n            {serviceUnderTest && <Grid item xs={12}>\n                <ServiceTestRunner service={serviceUnderTest} />\n            </Grid>}\n        </>\n    )\n}\n"],"names":["Box","createStyles","makeStyles","Alert","React","useContext","serviceSpecificationFromClassIdentifier","JacdacContext","ConnectButton","NoSsr","useChange","useStyles","theme","button","marginLeft","spacing","NoSsrConnectAlert","props","classes","serviceClass","closeable","bus","transports","devices","b","ignoreSelf","spec","length","name","map","transport","type","ConnectAlert","useState","Button","Card","CardActions","CardContent","Grid","Typography","useGridBreakpoints","useDevices","DeviceCardHeader","ServiceTestRunner","DeviceItem","device","serviceUnderTest","onServiceUnderTestSelected","services","d","specification","gridBreakpoints","handleServiceSelected","service","id","undefined","Page","announced","setServiceUnderTest"],"sourceRoot":""}