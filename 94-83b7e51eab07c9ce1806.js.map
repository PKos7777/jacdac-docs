{"version":3,"sources":["webpack:///./src/components/tools/LedAnimationFrameDesigner.tsx"],"names":["LedAnimationFrameDesigner","props","frame","setFrame","onRemove","onClone","useState","h","s","v","hsv","setHsv","durationId","useId","handleValue","i","ev","parseInt","target","value","isNaN","newFrame","slice","handleColorChangeComplete","c","type","min"],"mappings":"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","file":"94-83b7e51eab07c9ce1806.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\"\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@material-ui/core\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport AddIcon from \"@material-ui/icons/Add\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { SliderPicker } from \"react-color\"\nimport {\n    LedAnimationFrame,\n} from \"../../../jacdac-ts/src/hosts/ledservicehost\"\nimport { useId } from \"react-use-id-hook\"\n\nexport default function LedAnimationFrameDesigner(props: {\n    frame: LedAnimationFrame\n    setFrame: (frame: LedAnimationFrame) => void\n    onRemove: () => void\n    onClone: () => void\n}) {\n    const { frame, setFrame, onRemove, onClone } = props\n    const [hsv, setHsv] = useState({\n        h: (frame[0] * 360) / 0xff,\n        s: frame[1] / 0xff,\n        v: frame[2] / 0xff,\n    })\n    const durationId = useId()\n    const handleValue = (i: number) => (ev: ChangeEvent<HTMLInputElement>) => {\n        const v = parseInt(ev.target.value)\n        if (!isNaN(v)) {\n            const newFrame = frame.slice(0)\n            newFrame[i] = v >> 3 // 8ms units\n            setFrame(newFrame as LedAnimationFrame)\n        }\n    }\n    const handleColorChangeComplete = (c: {\n        hsv: { h: number; s: number; v: number }\n    }) => {\n        const newFrame = frame.slice(0) as LedAnimationFrame\n        const { hsv } = c\n        const { h, s, v } = hsv\n        newFrame[0] = ((h / 360) * 0xff) & 0xff\n        newFrame[1] = (s * 0xff) & 0xff\n        newFrame[2] = (v * 0xff) & 0xff\n        setFrame(newFrame)\n        setHsv(hsv)\n    }\n\n    return (\n        <Card>\n            <CardHeader\n                action={\n                    <>\n                        <IconButtonWithTooltip\n                            title=\"remove animation frame\"\n                            disabled={!onRemove}\n                            onClick={onRemove}\n                        >\n                            <DeleteIcon />\n                        </IconButtonWithTooltip>\n                        <IconButtonWithTooltip\n                            title=\"clone animation frame\"\n                            disabled={!onClone}\n                            onClick={onClone}\n                        >\n                            <AddIcon />\n                        </IconButtonWithTooltip>\n                    </>\n                }\n            />\n            <CardContent>\n                <Grid container direction=\"column\" spacing={1}>\n                    <Grid item>\n                        <SliderPicker\n                            triangle=\"hide\"\n                            color={hsv}\n                            onChangeComplete={handleColorChangeComplete}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            id={durationId}\n                            label=\"duration\"\n                            helperText=\"ms\"\n                            inputProps={{\n                                type: \"number\",\n                                min: 0,\n                            }}\n                            value={frame[3] << 3}\n                            onChange={handleValue(3)}\n                        />\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n    )\n}\n"],"sourceRoot":""}