{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardReflectedLight.tsx"],"names":["DashboardReflectedLight","props","service","services","variant","brighessRegister","register","ReflectedLightReg","Brightness","useRegisterUnpackedValue","brightness","Variant","sensorVariant","host","useServiceHost","color","useWidgetTheme","background","controlBackground","widgetSize","useWidgetSize","length","maxValue","handleDown","reading","setValues","refresh","buttonProps","useSvgButtonProps","actualBrightness","useThrottledValue","w","h","m","sw","ReflectedLightVariant","InfraredAnalog","dx","x","sh","dark","bright","userSelect","pointerEvents"],"mappings":"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","file":"121-3fdc6fbb935ed36fc02d.js","sourcesContent":["\nimport React, { } from \"react\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport useThrottledValue from \"../hooks/useThrottledValue\";\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\";\nimport ReflectedLightServiceHost from \"../../../jacdac-ts/src/hosts/reflectedlightservicehost\";\nimport { ReflectedLightReg, ReflectedLightVariant } from \"../../../jacdac-ts/src/jdom/constants\";\n\nexport default function DashboardReflectedLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const brighessRegister = service.register(ReflectedLightReg.Brightness);\n    const [brightness] = useRegisterUnpackedValue<[number]>(brighessRegister);\n    const [sensorVariant] = useRegisterUnpackedValue<[ReflectedLightVariant]>(service.register(ReflectedLightReg.Variant));\n\n    const host = useServiceHost<ReflectedLightServiceHost>(service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    const maxValue = 1.0;\n    const handleDown = () => {\n        host.reading.setValues([brightness > 0 ? 0 : 1.0]);\n        brighessRegister.refresh();\n    }\n    const buttonProps = useSvgButtonProps<SVGRectElement>(\"line detector\", host && handleDown)\n\n    const actualBrightness = useThrottledValue(brightness || 0, maxValue << 2)\n\n    const w = 64\n    const h = 64\n    const m = 4\n    const sw = sensorVariant === ReflectedLightVariant.InfraredAnalog ? 32 : 16;\n    const dx = w >> 1\n    const x = (w - sw - dx) / 2 + (actualBrightness / maxValue) * dx;\n    const sh = 32;\n    const dark = \"#000\";\n    const bright = \"#ddd\";\n\n    return <SvgWidget width={w} height={h} size={widgetSize}>\n        <rect x={0} y={0} width={w >> 1} height={h} fill={dark} aria-label=\"dark area\" />\n        <rect x={w >> 1} y={0} width={w >> 1} height={h} fill={bright} aria-label=\"bright area\" />\n        <g transform={`translate(${x}, ${h - m - sh})`}>\n            <rect x={0} y={0} width={sw} height={sh} fill={background} {...buttonProps} />\n            <circle cx={sw >> 1} cy={sh / 3} r={sw / 2 - 4} fill={dark} stroke={controlBackground} strokeWidth={2} style={{ userSelect: \"none\", pointerEvents: \"none\" }} />\n            <circle cx={sw >> 1} cy={sh * 2 / 3} r={sw / 2 - 4} fill={bright} stroke={controlBackground} strokeWidth={2} style={{ userSelect: \"none\", pointerEvents: \"none\" }} />\n        </g>\n    </SvgWidget>\n}"],"sourceRoot":""}