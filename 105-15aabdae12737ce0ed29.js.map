{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardMatrixKeypad.tsx","webpack:///./src/components/hooks/useArrowKeys.ts","webpack:///./src/components/hooks/useKeyboardNavigation.ts","webpack:///./src/components/hooks/useKeyboardNavigationProps.ts"],"names":["DashboardMatrixKeypad","props","service","services","variant","widgetRef","useRef","pressedRegister","register","MatrixKeypadReg","Pressed","useRegisterUnpackedValue","pressed","Labels","labels","Rows","rows","Columns","columns","host","useServiceHost","color","useWidgetTheme","background","controlBackground","active","textProps","widgetSize","useWidgetSize","length","undefined","clickeable","pw","ph","ps","pr","m","w","h","handleButtonUp","index","up","refresh","handleButtonDown","down","render","ledEls","ledProps","className","role","tabIndex","y","row","x","col","on","findIndex","p","label","handleUp","handleDown","fireUp","useFireKey","fireDown","push","navProps","useKeyboardNavigationProps","current","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","onDown","symmetric","handlers","e","charCode","keyCodeFromEvent","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","f","document","activeElement","next","focus","vertical","onKeyDown"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEe,SAASA,qBAAT,CAA+BC,KAA/B,EAA6D;AAAA,MAChEC,OADgE,GACjCD,KADiC,CAChEC,OADgE;AAAA,MACvDC,QADuD,GACjCF,KADiC,CACvDE,QADuD;AAAA,MAC7CC,OAD6C,GACjCH,KADiC,CAC7CG,OAD6C;AAGxE,MAAMC,SAAS,GAAGC,oDAAM,EAAxB;AACA,MAAMC,eAAe,GAAGL,OAAO,CAACM,QAAR,CAAiBC,sFAAe,CAACC,OAAjC,CAAxB;;AAJwE,8BAKtDC,iGAAwB,CAAiBJ,eAAjB,CAL8B;AAAA,MAKjEK,OALiE;;AAAA,+BAMvDD,iGAAwB,CAAiBT,OAAO,CAACM,QAAR,CAAiBC,sFAAe,CAACI,MAAjC,CAAjB,CAN+B;AAAA,MAMjEC,MANiE;;AAAA,+BAOzDH,iGAAwB,CAAWT,OAAO,CAACM,QAAR,CAAiBC,sFAAe,CAACM,IAAjC,CAAX,CAPiC;AAAA,MAOjEC,IAPiE;;AAAA,+BAQtDL,iGAAwB,CAAWT,OAAO,CAACM,QAAR,CAAiBC,sFAAe,CAACQ,OAAjC,CAAX,CAR8B;AAAA,MAQjEC,OARiE;;AASxE,MAAMC,IAAI,GAAGC,6EAAc,CAA0BlB,OAA1B,CAA3B;AACA,MAAMmB,KAAK,GAAGF,IAAI,GAAG,WAAH,GAAiB,SAAnC;;AAVwE,wBAWXG,+EAAc,CAACD,KAAD,CAXH;AAAA,MAWhEE,UAXgE,mBAWhEA,UAXgE;AAAA,MAWpDC,iBAXoD,mBAWpDA,iBAXoD;AAAA,MAWjCC,MAXiC,mBAWjCA,MAXiC;AAAA,MAWzBC,SAXyB,mBAWzBA,SAXyB;;AAYxE,MAAMC,UAAU,GAAGC,8EAAa,CAACxB,OAAD,EAAUD,QAAQ,CAAC0B,MAAnB,CAAhC,CAZwE,CAcxE;;AACA,MAAIb,IAAI,KAAKc,SAAT,IAAsBZ,OAAO,KAAKY,SAAtC,EACI,oBAAO,2DAAC,mEAAD,OAAP;AAEJ,MAAMC,UAAU,GAAG,CAAC,CAACZ,IAArB,CAlBwE,CAmBxE;;AACA,MAAMa,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,GAAX;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,CAAC,GAAG,CAAV;AACA,MAAMC,CAAC,GAAGnB,OAAO,GAAGc,EAAV,GAAe,CAACd,OAAO,GAAG,CAAX,IAAgBkB,CAAzC;AACA,MAAME,CAAC,GAAGtB,IAAI,GAAGiB,EAAP,GAAY,CAACjB,IAAI,GAAG,CAAR,IAAaoB,CAAnC;;AAEA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,WAAmB,YAAM;AAC5CrB,UAAI,CAACsB,EAAL,CAAQD,KAAR;AACAjC,qBAAe,CAACmC,OAAhB;AACH,KAHsB;AAAA,GAAvB;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACH,KAAD;AAAA,WAAmB,YAAM;AAC9CrB,UAAI,CAACyB,IAAL,CAAUJ,KAAV;AACAjC,qBAAe,CAACmC,OAAhB;AACH,KAHwB;AAAA,GAAzB,CAhCwE,CAqCxE;;;AACA,MAAMG,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,QAAMC,MAAqB,GAAG,EAA9B;AACA,QAAMC,QAAkC,GAAG;AACvCC,eAAS,EAAEjB,UAAU,GAAG,YAAH,GAAkBD,SADA;AAEvCmB,UAAI,EAAElB,UAAU,GAAG,QAAH,GAAc,EAFS;AAGvCmB,cAAQ,EAAEnB,UAAU,GAAG,CAAH,GAAOD;AAHY,KAA3C;AAMA,QAAIqB,CAAC,GAAGf,CAAR;;AACA,SAAK,IAAIgB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpC,IAAxB,EAA8BoC,GAAG,EAAjC,EAAqC;AACjC,UAAIC,CAAC,GAAGjB,CAAR;;AADiC,iCAExBkB,GAFwB;AAAA;;AAG7B,YAAMd,KAAK,GAAGY,GAAG,GAAGlC,OAAN,GAAgBoC,GAA9B;AACA,YAAMC,EAAE,GAAG,CAAA3C,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAE4C,SAAT,CAAmB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAC,CAAD,CAAD,KAASjB,KAAb;AAAA,SAApB,KAA0C,CAAC,CAAtD;AACA,YAAMkB,KAAK,GAAG5C,MAAH,aAAGA,MAAH,wCAAGA,MAAM,CAAG0B,KAAH,CAAT,kDAAG,cAAkB,CAAlB,CAAd;AAEA,YAAMmB,QAAQ,GAAG5B,UAAU,GAAGQ,cAAc,CAACC,KAAD,CAAjB,GAA2BV,SAAtD;AACA,YAAM8B,UAAU,GAAG7B,UAAU,GAAGY,gBAAgB,CAACH,KAAD,CAAnB,GAA6BV,SAA1D;AACA,YAAM+B,MAAM,GAAGC,yEAAU,CAACH,QAAD,CAAzB;AACA,YAAMI,QAAQ,GAAGD,yEAAU,CAACF,UAAD,CAA3B;AAEAd,cAAM,CAACkB,IAAP,eAAY;AAAM,aAAG,QAAMZ,GAAN,SAAaE,GAAtB;AAA6B,WAAC,EAAED,CAAhC;AAAmC,WAAC,EAAEF,CAAtC;AAAyC,eAAK,EAAEnB,EAAhD;AAAoD,gBAAM,EAAEC,EAA5D;AAAgE,YAAE,EAAEE,EAApE;AAAwE,YAAE,EAAEA,EAA5E;AACR,cAAI,EAAEoB,EAAE,GAAG9B,MAAH,GAAYD,iBADZ;AAER,gBAAM,EAAE,MAFA;AAGR,qBAAW,EAAEU;AAHL,WAIJa,QAJI;AAKR,wBAAYW,KAAK,aAAWN,GAAX,SAAkBE,GAL3B;AAMR,mBAAS,EAAES,QANH;AAOR,iBAAO,EAAEF,MAPD;AAQR,uBAAa,EAAED,UARP;AASR,qBAAW,EAAED;AATL,WAAZ;;AAWA,YAAID,KAAJ,EAAW;AACPZ,gBAAM,CAACkB,IAAP,eAAY;AAAM,eAAG,QAAMZ,GAAN,SAAaE,GAAtB;AAA6B,oBAAQ,EAAErB,EAAE,GAAG,CAAL,GAAS;AAAhD,aAAuDP,SAAvD;AAAkE,aAAC,EAAE2B,CAAC,GAAGrB,EAAE,GAAG,CAA9E;AAAiF,aAAC,EAAEmB,CAAC,GAAGlB,EAAE,GAAG;AAA7F,cAAiGyB,KAAjG,CAAZ;AACH;;AACDL,SAAC,IAAIrB,EAAE,GAAGI,CAAV;AA1B6B;;AAEjC,WAAK,IAAIkB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpC,OAAxB,EAAiCoC,GAAG,EAApC,EAAwC;AAAA,cAA/BA,GAA+B;AAyBvC;;AACDH,OAAC,IAAIlB,EAAE,GAAGG,CAAV;AACH;;AACD,WAAO;AAAEU,YAAM,EAANA;AAAF,KAAP;AACH,GAxCD;;AAtCwE,gBAgFrDD,MAAM,EAhF+C;AAAA,MAgFhEC,MAhFgE,WAgFhEA,MAhFgE;;AAiFxE,MAAMmB,QAAQ,GAAGC,yFAA0B,CAAC7D,SAAS,CAAC8D,OAAX,CAA3C;AACA,sBAAO,2DAAC,kEAAD;AAAW,SAAK,EAAE9B,CAAlB;AAAqB,UAAM,EAAEC,CAA7B;AAAgC,QAAI,EAAEX;AAAtC,kBACH;AAAM,KAAC,EAAE,CAAT;AAAY,KAAC,EAAE,CAAf;AAAkB,SAAK,EAAEU,CAAzB;AAA4B,UAAM,EAAEC,CAApC;AAAuC,MAAE,EAAEH,EAA3C;AAA+C,MAAE,EAAEA,EAAnD;AAAuD,QAAI,EAAEZ;AAA7D,IADG,eAEH;AAAG,OAAG,EAAElB;AAAR,KAAuB4D,QAAvB,GACKnB,MADL,CAFG,CAAP;AAMH,C;;;;;;;;;;;;;;;;ACpGD;AAEA,IAAMsB,QAAQ,GAAG,EAAjB;AACA,IAAMC,MAAM,GAAG,EAAf;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,QAAQ,GAAG,EAAjB;AAEe,SAASC,YAAT,CAAsBC,OAAtB,EAMZ;AAAA;;AAAA,MACSC,MADT,GACsDD,OADtD,CACSC,MADT;AAAA,MACiBC,IADjB,GACsDF,OADtD,CACiBE,IADjB;AAAA,MACuBC,OADvB,GACsDH,OADtD,CACuBG,OADvB;AAAA,MACgCC,MADhC,GACsDJ,OADtD,CACgCI,MADhC;AAAA,MACwCC,SADxC,GACsDL,OADtD,CACwCK,SADxC;AAGC,MAAI,CAACJ,MAAD,IAAW,CAACC,IAAZ,IAAoB,CAACC,OAArB,IAAgC,CAACC,MAArC,EACI,OAAO/C,SAAP;AAEJ,MAAMiD,QAAQ,8BACTX,QADS,IACEM,MADF,YAETJ,SAFS,IAEGM,OAFH,YAGTP,MAHS,IAGAM,IAAI,IAAKG,SAAS,IAAIF,OAHtB,YAITL,QAJS,IAIEM,MAAM,IAAKC,SAAS,IAAIJ,MAJ1B,YAAd;AAOA,SAAO,UAACM,CAAD,EAA+B;AAClC,QAAMC,QAAQ,GAAGC,8CAAgB,CAACF,CAAD,CAAjC;AACA,QAAMG,OAAO,GAAGJ,QAAQ,CAACE,QAAD,CAAxB;;AACA,QAAIE,OAAJ,EAAa;AACTH,OAAC,CAACI,cAAF;AACAD,aAAO;AACV;AACJ,GAPD;AAQH,C;;ACjCc,SAASE,qBAAT,CAA+BC,SAA/B,EAAmD;AAC9D,MAAMC,KAAK,GAAG,gBAAd;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD;AAAA,WAAoB,YAAM;AACrCC,aAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B;AAAEF,cAAM,EAANA;AAAF,OAA7B;AACA,UAAMG,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAuB,CAAAR,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAES,gBAAX,CAA4BR,KAA5B,MAAsC,EAA7D,CAAlB;;AACA,UAAIK,SAAS,CAAC/D,MAAd,EAAsB;AAClB,YAAMmE,EAAE,GAAGJ,SAAS,CAACpC,SAAV,CAAoB,UAAAyC,CAAC;AAAA,iBAAIA,CAAC,KAAKC,QAAQ,CAACC,aAAnB;AAAA,SAArB,CAAX;AACA,YAAMC,IAAI,GAAG,CAAEJ,EAAE,GAAGP,MAAN,GAAgBG,SAAS,CAAC/D,MAA3B,IAAqC+D,SAAS,CAAC/D,MAA5D;AACA+D,iBAAS,CAACQ,IAAD,CAAT,CAAgBC,KAAhB;AACH;AACJ,KARc;AAAA,GAAf;;AASA,SAAOb,MAAP;AACH,C;;ACdD;AACA;AAEe,SAAStB,0BAAT,CAAoCoB,SAApC,EAAwDgB,QAAxD,EAA4E;AACvF,MAAMd,MAAM,GAAGH,qBAAqB,CAACC,SAAD,CAApC;AAEA,MAAMiB,SAAS,GAAG/B,YAAY,CAAC;AAC3BE,UAAM,EAAE,CAAC4B,QAAD,IAAad,MAAM,CAAC,CAAC,CAAF,CADA;AAE3BZ,WAAO,EAAE,CAAC0B,QAAD,IAAad,MAAM,CAAC,CAAD,CAFD;AAG3BX,UAAM,EAAEyB,QAAQ,IAAId,MAAM,CAAC,CAAD,CAHC;AAI3Bb,QAAI,EAAE2B,QAAQ,IAAId,MAAM,CAAC,CAAC,CAAF;AAJG,GAAD,CAA9B;AAOA,SAAO;AACHe,aAAS,EAAEjB,SAAS,IAAIiB;AADrB,GAAP;AAGH,C","file":"105-15aabdae12737ce0ed29.js","sourcesContent":["import React, { SVGProps, useRef } from \"react\";\nimport { MatrixKeypadReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport useFireKey from \"../hooks/useFireKey\";\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\";\nimport MatrixKeypadServiceHost from \"../../../jacdac-ts/src/hosts/matrixkeypadservicehost\";\nimport LoadingProgress from \"../ui/LoadingProgress\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\n\nexport default function DashboardMatrixKeypad(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const widgetRef = useRef<SVGGElement>();\n    const pressedRegister = service.register(MatrixKeypadReg.Pressed);\n    const [pressed] = useRegisterUnpackedValue<[([number])[]]>(pressedRegister);\n    const [labels] = useRegisterUnpackedValue<[([string])[]]>(service.register(MatrixKeypadReg.Labels));\n    const [rows] = useRegisterUnpackedValue<[number]>(service.register(MatrixKeypadReg.Rows));\n    const [columns] = useRegisterUnpackedValue<[number]>(service.register(MatrixKeypadReg.Columns));\n    const host = useServiceHost<MatrixKeypadServiceHost>(service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { background, controlBackground, active, textProps } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined)\n        return <LoadingProgress />;\n\n    const clickeable = !!host;\n    // compute size\n    const pw = 8;\n    const ph = 8;\n    const ps = 0.5;\n    const pr = 1;\n    const m = 2;\n    const w = columns * pw + (columns + 1) * m;\n    const h = rows * ph + (rows + 1) * m;\n\n    const handleButtonUp = (index: number) => () => {\n        host.up(index);\n        pressedRegister.refresh();\n    }\n    const handleButtonDown = (index: number) => () => {\n        host.down(index);\n        pressedRegister.refresh();\n    }\n\n    // add leds\n    const render = () => {\n        const ledEls: JSX.Element[] = [];\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: clickeable ? \"clickeable\" : undefined,\n            role: clickeable ? \"button\" : \"\",\n            tabIndex: clickeable ? 0 : undefined\n        }\n\n        let y = m;\n        for (let row = 0; row < rows; row++) {\n            let x = m;\n            for (let col = 0; col < columns; col++) {\n                const index = row * columns + col;\n                const on = pressed?.findIndex(p => p[0] === index) > -1;\n                const label = labels?.[index]?.[0]\n\n                const handleUp = clickeable ? handleButtonUp(index) : undefined\n                const handleDown = clickeable ? handleButtonDown(index) : undefined\n                const fireUp = useFireKey(handleUp);\n                const fireDown = useFireKey(handleDown);\n\n                ledEls.push(<rect key={`l${row}-${col}`} x={x} y={y} width={pw} height={ph} rx={pr} ry={pr}\n                    fill={on ? active : controlBackground}\n                    stroke={\"none\"}\n                    strokeWidth={ps}\n                    {...ledProps}\n                    aria-label={label || `key ${row},${col}`}\n                    onKeyDown={fireDown}\n                    onKeyUp={fireUp}\n                    onPointerDown={handleDown}\n                    onPointerUp={handleUp}\n                />);\n                if (label) {\n                    ledEls.push(<text key={`t${row}-${col}`} fontSize={ph * 2 / 3} {...textProps} x={x + pw / 2} y={y + ph / 2}>{label}</text>)\n                }\n                x += pw + m;\n            }\n            y += ph + m;\n        }\n        return { ledEls }\n    }\n\n    const { ledEls } = render();\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return <SvgWidget width={w} height={h} size={widgetSize}>\n        <rect x={0} y={0} width={w} height={h} rx={pr} ry={pr} fill={background} />\n        <g ref={widgetRef} {...navProps}>\n            {ledEls}\n        </g>\n    </SvgWidget>\n}","import React, { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\";\n\nconst LEFT_KEY = 37;\nconst UP_KEY = 38;\nconst RIGHT_KEY = 39;\nconst DOWN_KEY = 40;\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void,\n    onRight?: () => void,\n    onUp?: () => void,\n    onDown?: () => void,\n    symmetric?: boolean;\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options;\n\n    if (!onLeft && !onUp && !onRight && !onDown)\n        return undefined;\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft)\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e);\n        const handler = handlers[charCode];\n        if (handler) {\n            e.preventDefault();\n            handler();\n        }\n    }\n}\n","import React from \"react\"\n\nexport default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]';\n    const onMove = (offset: number) => () => {\n        console.log('keyboard move', { offset })\n        const focusable = Array.from<SVGElement>(parentRef?.querySelectorAll(query) || []);\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement);\n            const next = ((me + offset) + focusable.length) % focusable.length;\n            focusable[next].focus();\n        }\n    }\n    return onMove;\n}","import useArrowKeys from \"./useArrowKeys\";\nimport useKeyboardNavigation from \"./useKeyboardNavigation\";\n\nexport default function useKeyboardNavigationProps(parentRef: Element, vertical?: boolean) {\n    const onMove = useKeyboardNavigation(parentRef);\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    });\n\n    return {\n        onKeyDown: parentRef && onKeyDown\n    }\n}"],"sourceRoot":""}