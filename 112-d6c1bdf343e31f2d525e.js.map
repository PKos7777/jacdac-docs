{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardPower.tsx"],"names":["DashboardPower","props","service","enabledRegister","register","PowerReg","Enabled","useRegisterUnpackedValue","enabled","Overload","overload","BatteryCharge","batteryCharge","host","useServiceHost","color","useWidgetTheme","background","active","textProps","w","h","r","ro","ri","label","mw","bw","hw","rw","toggleEnabled","sendSetBoolAsync","refresh","undefined","Math","floor"],"mappings":"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","file":"112-d6c1bdf343e31f2d525e.js","sourcesContent":["import React from \"react\"\nimport { PowerReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useServiceHost from \"../hooks/useServiceHost\"\nimport ReflectedLightServiceHost from \"../../../jacdac-ts/src/hosts/reflectedlightservicehost\"\nimport PowerButton from \"../widgets/PowerButton\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\n\nexport default function DashboardPower(props: DashboardServiceProps) {\n    const { service } = props\n\n    const enabledRegister = service.register(PowerReg.Enabled)\n    const [enabled] = useRegisterUnpackedValue<[boolean]>(enabledRegister, props)\n    const [overload] = useRegisterUnpackedValue<[boolean]>(\n        service.register(PowerReg.Overload),\n        props\n    )\n    const [batteryCharge] = useRegisterUnpackedValue<[number]>(\n        service.register(PowerReg.BatteryCharge),\n        props\n    )\n\n    const host = useServiceHost<ReflectedLightServiceHost>(service)\n    const color = host ? \"secondary\" : \"primary\"\n    const { background, active, textProps } = useWidgetTheme(\n        color\n    )\n\n    const w = 64\n    const h = w\n    const r = (h - 4) >> 1\n    const ro = r - 4\n    const ri = ro - 8\n    const label = overload ? \"overload\" : enabled ? \"on\" : \"off\"\n\n    const mw = 2\n    const bw = 12\n    const hw = 4\n    const rw = mw / 2\n\n    const toggleEnabled = async () => {\n        await enabledRegister.sendSetBoolAsync(!enabled)\n        enabledRegister.refresh()\n    }\n\n    return (\n        <SvgWidget width={w} height={h}>\n            <g>\n                <PowerButton\n                    cx={w / 2}\n                    cy={h / 2}\n                    r={ro}\n                    ri={ri}\n                    off={!enabled}\n                    color={color}\n                    aria-label={label}\n                    borderStroke={!!overload && \"red\"}\n                    onClick={toggleEnabled}\n                />\n                {batteryCharge !== undefined && (\n                    <g>\n                        <title>{`battery charge ${Math.floor(\n                            batteryCharge * 100\n                        )}%`}</title>\n                        <rect\n                            x={w - bw - mw}\n                            y={mw}\n                            width={bw * batteryCharge}\n                            height={hw}\n                            rx={rw}\n                            ry={rw}\n                            fill={active}\n                        />\n                        <rect\n                            x={w - bw - mw}\n                            y={mw}\n                            width={bw}\n                            height={hw}\n                            rx={rw}\n                            ry={rw}\n                            fill={\"none\"}\n                            stroke={background}\n                            strokeWidth={1}\n                        />\n                        <text\n                            x={w - 2 * mw}\n                            y={mw + hw / 2}\n                            {...textProps}\n                            textAnchor=\"end\"\n                            fontSize={hw * 0.6}\n                        >\n                            {Math.floor(batteryCharge * 100)}%\n                        </text>\n                    </g>\n                )}\n            </g>\n        </SvgWidget>\n    )\n}\n"],"sourceRoot":""}