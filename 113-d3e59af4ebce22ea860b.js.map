{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardSevenSegmentDisplay.tsx"],"names":["DashboardSevenSegmentDisplay","props","service","services","variant","useRegisterUnpackedValue","register","SevenSegmentDisplayReg","Digits","Uint8Array","digits","brightnessRegister","Brightness","brightness","DigitCount","digitCount","DecimalPoint","decimalPoint","host","useServiceHost","color","useWidgetTheme","active","background","undefined","md","rs","hs","ws","wd","hd","w","h","opacity","VerticalSegment","bit","digit","mask","mx","my","HorizontalSegment","DotSegment","Digit","dprops","x","y","Array","fill","map","_","i"],"mappings":"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","file":"113-d3e59af4ebce22ea860b.js","sourcesContent":["import React, { } from \"react\";\nimport { SevenSegmentDisplayReg } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\";\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\";\nimport useWidgetSize from \"../widgets/useWidgetSize\";\nimport useServiceHost from \"../hooks/useServiceHost\";\nimport SvgWidget from \"../widgets/SvgWidget\";\nimport useWidgetTheme from \"../widgets/useWidgetTheme\";\nimport { Grid } from \"@material-ui/core\";\nimport RegisterInput from \"../RegisterInput\";\nimport LoadingProgress from \"../ui/LoadingProgress\";\n\n\nexport default function DashboardSevenSegmentDisplay(props: DashboardServiceProps) {\n    const { service, services, variant } = props;\n\n    const [digits] = useRegisterUnpackedValue<[Uint8Array]>(service.register(SevenSegmentDisplayReg.Digits))\n        || [new Uint8Array(0)]\n    const brightnessRegister = service.register(SevenSegmentDisplayReg.Brightness);\n    const [brightness] = useRegisterUnpackedValue<[number]>(brightnessRegister);\n    const [digitCount] = useRegisterUnpackedValue<[number]>(service.register(SevenSegmentDisplayReg.DigitCount));\n    const [decimalPoint] = useRegisterUnpackedValue<[boolean]>(service.register(SevenSegmentDisplayReg.DecimalPoint))\n\n    const host = useServiceHost(service);\n    const color = host ? \"secondary\" : \"primary\";\n    const { active, background } = useWidgetTheme(color);\n\n    if (digitCount === undefined)\n        return <LoadingProgress />;\n\n    const md = 4;\n    const rs = 4;\n    const hs = 32;\n    const ws = 28;\n    const wd = ws + 2 * rs;\n    const hd = 2 * rs;\n\n    const w = digitCount * (wd + 4 * md) + md;\n    const h = 2 * md + 3 * hd + 2 * hs\n    const opacity = (brightness || 0);\n\n    /*\n    GFEDCBA DP\n    - A -\n    |   |\n    G   B\n    |   |\n    - F -\n    |   |   -\n    E   C  |DP|\n    - D -   -\n    */\n\n    const VerticalSegment = (props: { digit: number, mask: number, mx: number, my: number }) => {\n        const bit = (props.digit & props.mask) == props.mask;\n        return <>\n            <path fill={background} stroke=\"none\"\n                d={`M ${props.mx} ${props.my} l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`} />\n            {bit && <path opacity={opacity} fill={active} stroke=\"none\"\n                d={`M ${props.mx} ${props.my} l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`} />}\n        </>\n    }\n    const HorizontalSegment = (props: { digit: number, mask: number, mx: number, my: number }) => {\n        const bit = (props.digit & props.mask) == props.mask;\n        return <>\n            <path fill={background} stroke=\"none\"\n                d={`M ${props.mx} ${props.my} l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`} />\n            {bit && <path opacity={opacity} fill={active} stroke=\"none\"\n                d={`M ${props.mx} ${props.my} l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`} />}\n        </>;\n    }\n\n    const DotSegment = (props: { digit: number }) => {\n        const bit = (props.digit & 0x80) == 0x80;\n        const mx = rs + wd + 2 * rs\n        const my = rs + 2 * hd + 2 * hs\n        return <>\n            <circle fill={background} stroke=\"none\" r={rs} cx={mx} cy={my} />\n            {bit && <circle opacity={opacity} fill={active} stroke=\"none\" r={rs} cx={mx} cy={my} />}\n        </>;\n    }\n\n    const Digit = (dprops: { x: number, y: number, digit: number }) => {\n        const { x, y, digit } = dprops;\n        return <g transform={`translate(${x}, ${y})`}>\n            <VerticalSegment key=\"G\" mx={rs} my={rs} digit={digit} mask={0x01} />\n\n            <HorizontalSegment key=\"F\" mx={rs} my={rs + hs + hd} digit={digit} mask={0x02} />\n\n            <VerticalSegment key=\"E\" mx={rs} my={rs + hd + hs} digit={digit} mask={0x04} />\n\n            <HorizontalSegment key=\"D\" mx={rs} my={rs + 2 * hd + 2 * hs} digit={digit} mask={0x08} />\n\n            <VerticalSegment key=\"C\" mx={rs + wd} my={rs + hd + hs} digit={digit} mask={0x10} />\n            <VerticalSegment key=\"B\" mx={rs + wd} my={rs} digit={digit} mask={0x20} />\n\n            <HorizontalSegment key=\"A\" mx={rs} my={rs} digit={digit} mask={0x40} />\n\n            {decimalPoint && <DotSegment digit={digit} />}\n        </g>\n    }\n\n    return <Grid container direction=\"column\">\n        <Grid item xs={12}>\n            <SvgWidget width={w} height={h}>\n                {Array(digitCount).fill(0).map((_, i) => <Digit\n                    key={i}\n                    x={md + (wd + 4 * md) * i}\n                    y={md}\n                    digit={digits?.[i] || 0}\n                />)}\n            </SvgWidget>\n        </Grid>\n        <Grid item>\n            <RegisterInput register={brightnessRegister} />\n        </Grid>\n    </Grid>\n}"],"sourceRoot":""}