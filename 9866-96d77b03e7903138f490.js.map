{"version":3,"file":"9866-96d77b03e7903138f490.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/model-editor/components/DataSetPlot.tsx"],"sourcesContent":["import React, { lazy, useMemo, useState } from \"react\"\nimport { Box, Grid, MenuItem, Select } from \"@material-ui/core\"\nimport FieldDataSet from \"../../FieldDataSet\"\nimport Suspense from \"../../ui/Suspense\"\nimport MBDataSet from \"../MBDataSet\"\nimport { useId } from \"react-use-id-hook\"\n\nconst VegaLite = lazy(() => import(\"../../blockly/fields/chart/VegaLite\"))\n\nexport default function DataSetPlot(props: {\n    chartProps: any\n    reactStyle: any\n    dataset: MBDataSet\n    predictedLabels: number[]\n    timestamp: number\n}) {\n    const { dataset, predictedLabels, timestamp } = props\n    const classes = props.reactStyle\n    const chartProps = props.chartProps\n\n    const calculateRecordingFeatures = (\n        recording: FieldDataSet,\n        label: string,\n        predictedLabel: string\n    ) => {\n        const features = {\n            name: recording.name,\n            class: label,\n            \"predicted class\": predictedLabel,\n            correct: label == predictedLabel || predictedLabel == \"\",\n        }\n        const headerNames = []\n        for (let idx = 0; idx < recording.width; idx++) {\n            // differentiate input types with the same name (e.g. two buttons)\n            let headerName = recording.headers[idx]\n            headerNames.push(headerName)\n            const headerNameCount = headerNames.filter(\n                name => name == headerName\n            ).length\n            if (headerNameCount > 1) headerName += headerNameCount\n\n            // calculate features and add them to the dataset\n            features[\"rms-\" + headerName] = recording.rms[idx]\n            features[\"sd-\" + headerName] = recording.sd[idx]\n            features[\"max-\" + headerName] = recording.maxs[idx]\n        }\n        return features\n    }\n    const dataSetPoints = useMemo(() => {\n        const setPoints = []\n\n        if (dataset && dataset.totalRecordings) {\n            const labels = dataset.labels\n\n            for (const label of labels) {\n                dataset.getRecordingsWithLabel(label).forEach(recording => {\n                    // add info about whether point was correctly labelled\n                    let predictedLabel = \"\"\n                    if (predictedLabels && predictedLabels.length) {\n                        // grab the predicted label associated with this data point\n                        const prediction = predictedLabels[setPoints.length]\n                        predictedLabel = labels[prediction]\n                    }\n\n                    // add data point to chart\n                    const recordingFeatures = calculateRecordingFeatures(\n                        recording,\n                        label,\n                        predictedLabel\n                    )\n                    setPoints.push(recordingFeatures)\n                })\n            }\n        }\n        return setPoints\n    }, [dataset, predictedLabels, timestamp])\n    const features = useMemo(() => {\n        const feats = []\n        const inputNames = []\n        if (dataset) {\n            dataset.inputTypes.forEach(inputName => {\n                // differentiate input types with the same name (e.g. two buttons)\n                inputNames.push(inputName)\n                const inputNameCount = inputNames.filter(\n                    name => name == inputName\n                ).length\n                if (inputNameCount > 1) inputName += inputNameCount\n\n                feats.push(\"rms-\" + inputName)\n                feats.push(\"sd-\" + inputName)\n                feats.push(\"max-\" + inputName)\n            })\n        }\n        return feats.sort()\n    }, [dataset])\n\n    const [xAxis, setXAxis] = useState(features[0] || \"\")\n    const [yAxis, setYAxis] = useState(features[1] || \"\")\n    const handleChangedX = event => setXAxis(event.target.value)\n    const handleChangedY = event => setYAxis(event.target.value)\n\n    const configTooltip = () => {\n        const spec = [\n            {\n                field: \"name\",\n                type: \"nominal\",\n            },\n            {\n                field: \"class\",\n                type: \"nominal\",\n            },\n            {\n                field: xAxis,\n                type: \"quantitative\",\n                format: chartProps.TOOLTIP_NUM_FORMAT,\n            },\n            {\n                field: yAxis,\n                type: \"quantitative\",\n                format: chartProps.TOOLTIP_NUM_FORMAT,\n            },\n        ]\n\n        if (predictedLabels && predictedLabels.length) {\n            spec.splice(1, 0, {\n                field: \"predicted class\",\n                type: \"nominal\",\n            })\n        }\n        return spec\n    }\n    const tooltipSpec = configTooltip()\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            <Grid item xs={12}>\n                <Box color=\"text.secondary\">\n                    x&ensp;\n                    <Select\n                        className={classes.field}\n                        id={useId() + \"xAxis\"}\n                        variant=\"outlined\"\n                        value={xAxis}\n                        onChange={handleChangedX}\n                    >\n                        {features.map(ft => (\n                            <MenuItem key={useId()} value={ft}>\n                                {ft}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                    &emsp;y&ensp;\n                    <Select\n                        className={classes.field}\n                        id={useId() + \"yAxis\"}\n                        variant=\"outlined\"\n                        value={yAxis}\n                        onChange={handleChangedY}\n                    >\n                        {features.map(ft => (\n                            <MenuItem key={useId()} value={ft}>\n                                {ft}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense>\n                    <VegaLite\n                        actions={false}\n                        spec={{\n                            title: { timestamp },\n                            width: chartProps.CHART_WIDTH,\n                            height: chartProps.CHART_HEIGHT,\n                            data: { values: dataSetPoints },\n                            mark: {\n                                type: \"point\",\n                                size: chartProps.MARK_SIZE,\n                                filled: true,\n                                angle: 45,\n                            },\n                            encoding: {\n                                x: {\n                                    field: xAxis,\n                                    type: \"quantitative\",\n                                },\n                                y: {\n                                    field: yAxis,\n                                    type: \"quantitative\",\n                                },\n                                color: {\n                                    field: \"class\",\n                                    type: \"nominal\",\n                                    scale: {\n                                        range: chartProps.PALETTE,\n                                    },\n                                },\n                                shape: {\n                                    field: \"correct\",\n                                    type: \"nominal\",\n                                    scale: {\n                                        domain: [\"true\", \"false\"],\n                                        range: [\"circle\", \"cross\"],\n                                    },\n                                    legend: null,\n                                },\n                                tooltip: tooltipSpec,\n                            },\n                        }}\n                    />\n                </Suspense>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["React","lazy","useMemo","useState","Box","Grid","MenuItem","Select","Suspense","useId","VegaLite","DataSetPlot","props","dataset","predictedLabels","timestamp","classes","reactStyle","chartProps","calculateRecordingFeatures","recording","label","predictedLabel","features","name","class","correct","headerNames","idx","headerName","headers","push","headerNameCount","filter","length","rms","sd","maxs","width","dataSetPoints","setPoints","totalRecordings","labels","getRecordingsWithLabel","forEach","prediction","recordingFeatures","feats","inputNames","inputTypes","inputName","inputNameCount","sort","xAxis","setXAxis","yAxis","setYAxis","handleChangedX","event","target","value","handleChangedY","configTooltip","spec","field","type","format","TOOLTIP_NUM_FORMAT","splice","tooltipSpec","map","ft","title","CHART_WIDTH","height","CHART_HEIGHT","data","values","mark","size","MARK_SIZE","filled","angle","encoding","x","y","color","scale","range","PALETTE","shape","domain","legend","tooltip"],"sourceRoot":""}