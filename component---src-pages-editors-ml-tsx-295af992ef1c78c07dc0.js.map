{"version":3,"file":"component---src-pages-editors-ml-tsx-295af992ef1c78c07dc0.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/model-editor/ModelBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/ml.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useState, lazy } from \"react\"\nimport { NoSsr } from \"@material-ui/core\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport modelBlockDsl, { MODEL_BLOCKS } from \"./modelblockdsl\"\nimport { addNewDataSet, addNewClassifier } from \"./ModelBlockModals\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport { visitWorkspace } from \"../../../jacdac-ts/src/dsl/workspacevisitor\"\n\nimport Suspense from \"../ui/Suspense\"\nimport { visitToolbox } from \"../blockly/toolbox\"\nimport FieldDataSet from \"../FieldDataSet\"\n\nconst RecordDataDialog = lazy(() => import(\"../dialogs/RecordDataDialog\"))\n\nconst MB_EDITOR_ID = \"mb\"\nconst MB_SOURCE_STORAGE_KEY = \"model-block-blockly-xml\"\nconst MB_DATA_STORAGE_KEY = \"model-block-data-json\"\n\nfunction getRecordingsFromLocalStorage() {\n    const dataObj = localStorage.getItem(MB_DATA_STORAGE_KEY)\n    if (dataObj == null || dataObj == undefined) return {}\n    const modelEditorData = JSON.parse(dataObj)\n\n    // construct new recordings object\n    const allRecordings = {}\n    for (const id in modelEditorData[\"recordings\"]) {\n        const recordings = modelEditorData[\"recordings\"][id]\n        allRecordings[id] = recordings.map(recording => {\n            return FieldDataSet.createFromFile(recording)\n        })\n    }\n    return allRecordings\n}\n\nfunction getDataSetsFromLocalStorage() {\n    return {}\n    /*const dataObj = localStorage.getItem(MB_DATA_STORAGE_KEY)\n    if (dataObj == null || dataObj == undefined) return {}\n    const modelEditorData = JSON.parse(dataObj)\n    return MBModel.createFromFile(modelEditorData[\"datasets\"])*/\n}\n\nfunction getModelsFromLocalStorage() {\n    return {}\n    /*const dataObj = localStorage.getItem(MB_DATA_STORAGE_KEY)\n    if (dataObj == null || dataObj == undefined) return {}\n    const modelEditorData = JSON.parse(dataObj)\n    return MBModel.createFromFile(modelEditorData[\"model\"])*/\n}\n\nfunction ModelBlockEditorWithContext() {\n    // store recordings, datasets, and models\n    const [allRecordings, setAllRecordings] = useState(\n        getRecordingsFromLocalStorage() // Randi replace with useMemo(() => ..., [])\n    ) // dictionary of recording block ids and FieldDataSet arrays\n    const [allDataSets, setAllDataSets] = useState(getDataSetsFromLocalStorage) // dictionary of dataset vars and ModelDataSet objs\n    const [allModels, setAllModels] = useState(getModelsFromLocalStorage) // dictionary of model vars and MBModel objs\n\n    // block context handles hosting blockly\n    const { workspace, workspaceJSON, toolboxConfiguration } =\n        useContext(BlockContext)\n\n    const [recordDataDialogVisible, setRecordDataDialogVisible] =\n        useState<boolean>(false)\n    const toggleRecordDataDialog = () => {\n        // update visibility of recording dialog\n        const b = !recordDataDialogVisible\n        setRecordDataDialogVisible(b)\n    }\n    const updateAllRecordings = (\n        recording: FieldDataSet[],\n        blockId: string\n    ) => {\n        // Add recording data to list of recordings\n        allRecordings[blockId] = recording\n        updateLocalStorage(allRecordings, null, null)\n    }\n\n    const updateLocalStorage = (newRecordings, newDataSets, newModels) => {\n        const recordings = newRecordings || allRecordings\n        const datasets = newDataSets || allDataSets\n        const models = newModels || allModels\n\n        // convert dataset object to JSON string\n        const modelBlocksDataJSON = JSON.stringify({\n            recordings: recordings,\n            datasets: datasets,\n            models: models, // Randi TODO make sure you stringify this correctly\n        })\n        // save JSON string in local storage\n        localStorage.setItem(MB_DATA_STORAGE_KEY, modelBlocksDataJSON)\n        console.log(\"Randi updating saved data for blocks: \", {\n            recordings,\n            datasets,\n            models,\n        })\n    }\n\n    // run this when workspaceJSON changes\n    useEffect(() => {\n        visitWorkspace(workspaceJSON, {\n            visitBlock: block => {\n                // Collect data for dataset blocks\n                // Randi TODO remove from allRecordings anything that is no longer present on the workspace\n                if (block.type == MODEL_BLOCKS + \"dataset\") {\n                    console.log(`Randi dataset block: `, {\n                        name: block.inputs[0].fields[\"dataset_name\"],\n                        id: block.id,\n                        block: block,\n                    })\n                    // get all nested recordings\n                    const recordingBlock = block.inputs.filter(\n                        input => input.name == \"DATASET_RECORDINGS\"\n                    )[0].child\n                    if (recordingBlock) {\n                        console.log(`Randi recording data: `, {\n                            recording: allRecordings[recordingBlock.id],\n                            block: recordingBlock,\n                        })\n                        recordingBlock.children?.forEach(childBlock =>\n                            console.log(`Randi recording data: `, {\n                                recording: allRecordings[childBlock.id],\n                                block: childBlock,\n                            })\n                        )\n                    }\n                }\n                // Collect layers for neural network blocks\n                else if (block.type == MODEL_BLOCKS + \"nn\") {\n                    // Randi TODO delete recordings that are no longer present on the workspace\n                    console.log(`Randi neural network block: `, {\n                        name: block.inputs[0].fields[\"classifier_name\"],\n                        id: block.id,\n                        block: block,\n                    })\n                    // get all nested layers\n                    const layerBlock = block?.inputs.filter(\n                        input => input.name == \"NN_LAYERS\"\n                    )[0].child\n                    if (layerBlock) {\n                        console.log(`Randi layer data: `, { block: layerBlock })\n                        layerBlock.children?.forEach(childBlock =>\n                            console.log(`Randi layer data: `, {\n                                block: childBlock,\n                            })\n                        )\n                    }\n                } else {\n                    console.log(`block ${block.type}`, { block })\n                }\n            },\n        })\n    }, [workspaceJSON])\n\n    const buttonsWithDialogs = {\n        createNewDataSetButton: addNewDataSet,\n        createNewRecordingButton: toggleRecordDataDialog,\n        createNewClassifierButton: addNewClassifier,\n    }\n    // set button callbacks\n    useEffect(() => {\n        // register callbacks buttons with custom dialogs\n        visitToolbox(toolboxConfiguration, {\n            visitButton: btn => {\n                if (btn.callbackKey in buttonsWithDialogs) {\n                    btn.callback = workspace => {\n                        buttonsWithDialogs[btn.callbackKey](workspace)\n                    }\n                }\n            },\n        })\n    }, [toolboxConfiguration])\n\n    return (\n        <>\n            <BlockEditor editorId={MB_EDITOR_ID} />\n            {Flags.diagnostics && <BlockDiagnostics />}\n            {recordDataDialogVisible && (\n                <Suspense>\n                    <RecordDataDialog\n                        open={recordDataDialogVisible}\n                        onDone={updateAllRecordings}\n                        onClose={toggleRecordDataDialog}\n                        recordingCount={Object.keys(allRecordings).length}\n                        workspace={workspace}\n                    />\n                </Suspense>\n            )}\n        </>\n    )\n}\n\nexport default function ModelBlockEditor() {\n    const dsls = useMemo(() => {\n        return [modelBlockDsl, shadowDsl, fieldsDsl, variablesDsl]\n    }, [])\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={MB_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <ModelBlockEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport ModelBlockEditor from \"../../components/model-editor/ModelBlockEditor\"\n\nexport default function Page() {\n    return <ModelBlockEditor />\n}\n"],"names":["React","useContext","useEffect","useMemo","useState","lazy","NoSsr","BlockContext","BlockProvider","BlockEditor","variablesDsl","shadowDsl","modelBlockDsl","MODEL_BLOCKS","addNewDataSet","addNewClassifier","fieldsDsl","Flags","BlockDiagnostics","visitWorkspace","Suspense","visitToolbox","FieldDataSet","RecordDataDialog","MB_EDITOR_ID","MB_SOURCE_STORAGE_KEY","MB_DATA_STORAGE_KEY","getRecordingsFromLocalStorage","dataObj","localStorage","getItem","undefined","modelEditorData","JSON","parse","allRecordings","id","recordings","map","recording","createFromFile","getDataSetsFromLocalStorage","getModelsFromLocalStorage","ModelBlockEditorWithContext","setAllRecordings","allDataSets","setAllDataSets","allModels","setAllModels","workspace","workspaceJSON","toolboxConfiguration","recordDataDialogVisible","setRecordDataDialogVisible","toggleRecordDataDialog","b","updateAllRecordings","blockId","updateLocalStorage","newRecordings","newDataSets","newModels","datasets","models","modelBlocksDataJSON","stringify","setItem","console","log","visitBlock","block","type","name","inputs","fields","recordingBlock","filter","input","child","children","forEach","childBlock","layerBlock","buttonsWithDialogs","createNewDataSetButton","createNewRecordingButton","createNewClassifierButton","visitButton","btn","callbackKey","callback","diagnostics","Object","keys","length","ModelBlockEditor","dsls","Page"],"sourceRoot":""}