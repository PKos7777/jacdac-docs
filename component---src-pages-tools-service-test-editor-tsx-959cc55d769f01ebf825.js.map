{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/Info.js","webpack://jacdac-docs/./src/components/ServiceSpecificationSelect.tsx","webpack://jacdac-docs/./src/components/semver.ts","webpack://jacdac-docs/./src/components/useFetch.ts","webpack://jacdac-docs/./src/components/github.ts","webpack://jacdac-docs/./src/components/SelectService.tsx","webpack://jacdac-docs/./src/components/test/ServiceTest.tsx","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtest.ts","webpack://jacdac-docs/./src/components/tools/ServiceTestEditor.tsx","webpack://jacdac-docs/./src/pages/tools/service-test-editor.tsx"],"names":["useStyles","makeStyles","createStyles","root","minWidth","ServiceSpecificationSelect","props","label","serviceClass","setServiceClass","variant","fullWidth","error","useState","Math","random","labelId","classes","specs","serviceSpecifications","filter","spec","test","shortId","handleChange","event","parseInt","target","value","map","classIdentifier","name","cmp","a","b","d","major","minor","patch","pre","length","i","aa","bb","strcmp","tryParse","v","Number","MAX_SAFE_INTEGER","build","slice","m","exec","split","semverCmp","useFetch","url","options","undefined","response","setResponse","setError","status","setStatus","loading","setLoading","useEffectAsync","mounted","fetch","res","json","ROOT","GITHUB_API_KEY","contentToFirmwareRelease","content","version","type","sha","size","html_url","download_url","contentsToFirmwareReleases","contents","r","sort","l","normalizeSlug","slug","replace","parseRepoUrl","owner","fetchLatestRelease","uri","resp","releases","ignoreThrottled","Error","fetchReleaseBinary","downloadUrl","headers","Accept","req","blob","firmware","fetchText","tag","path","mimeType","text","src","useFetchApi","console","log","useRepository","useLatestRelease","useLatestReleases","SelectService","useContext","JacdacContext","bus","onSelect","services","useChange","n","gridBreakpoints","useGridBreakpoints","handleSelect","service","id","device","Diagnostics","hostDefinition","serviceProviderDefinitionFromServiceClass","handleStartSimulator","addServiceProvider","ServiceTestRunnerSelect","ServiceTest","serviceSpec","showStartSimulator","serviceTest","serviceTestFromServiceClass","setService","useEffect","subscribe","DISCONNECT","Flags","supportedExpressions","parseSpecificationTestMarkdownToJSON","filecontent","filename","info","description","serviceClassIdentifier","tests","backticksType","errors","lineNo","currentTest","testHeading","testPrompt","line","processLine","e","message","finishTest","trim","interpret","hd","cont","expanded","processCommand","argsRequiredOptional","args","optional","prompt","registers","events","testCommands","call","callee","testCommandFunctions","getTestCommandFunctions","cmdIndex","findIndex","jsep","arguments","exprVisitor","p","c","indexOf","command","minArgs","maxArgs","newExpressions","def","lit","raw","toString","push","concat","processArguments","processCalls","eventSymTable","forEach","arg","argType","pkt","lookupEvent","lookupRegister","elements","lookupReplace","member","object","property","computed","testExpressionFunctions","getTestExpressionFunctions","parent","callExpr","tef","find","context","ce","expected","packets","kind","fld","reg","getRegister","isBoolOrNumericFormat","packFormat","child","Array","isArray","lookup","Object","keys","k","toName","val","parseIntFloat","fields","f","msg","some","file","SERVICE_TEST_SERVICE_STORAGE_KEY","SERVICE_TEST_SOURCE_STORAGE_KEY","SERVICE_MARKDOWN_SOURCE_STORAGE_KEY","ServiceTestEditor","AppContext","useLocalStorage","SRV_BUTTON","source","setSource","markdownSource","setMarkdownSource","useMemo","serviceSpecificationFromClassIdentifier","servicePath","camelName","toLowerCase","handleLoadFromGithub","ghSource","Page"],"mappings":"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","file":"component---src-pages-tools-service-test-editor-tsx-959cc55d769f01ebf825.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","import { createStyles, makeStyles, MenuItem, TextField, Theme } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { serviceSpecifications } from \"../../jacdac-ts/src/jdom/spec\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            minWidth: \"18rem\",\n        }\n    }),\n);\n\nexport default function ServiceSpecificationSelect(props: {\n    label: string,\n    serviceClass: number;\n    setServiceClass: (serviceClass: number) => void;\n    variant?: \"outlined\" | \"filled\" | \"standard\";\n    fullWidth?: boolean;\n    error?: string;\n}) {\n    const { label, serviceClass, setServiceClass, variant, fullWidth, error } = props;\n    const [labelId] = useState('select-' + Math.random());\n    const classes = useStyles();\n    const specs = serviceSpecifications().filter(spec => !/^_/.test(spec.shortId))\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) =>\n        setServiceClass(parseInt(event.target.value));\n\n    return <TextField\n        id={labelId}\n        className={classes.root}\n        label={label}\n        error={!!error}\n        helperText={error}\n        value={serviceClass}\n        select\n        variant={variant}\n        fullWidth={fullWidth}\n        onChange={handleChange}>\n        <MenuItem key=\"none\" value=\"NaN\">No service selected</MenuItem>\n        {specs.map(spec => <MenuItem\n            key={spec.classIdentifier}\n            value={spec.classIdentifier}>{spec.name}</MenuItem>)}\n    </TextField>\n}","interface Version {\n    major: number\n    minor: number\n    patch: number\n    pre: string[]\n    build: string[]\n}\n\nfunction cmp(a: Version, b: Version) {\n    if (!a)\n        if (!b) return 0\n        else return 1\n    else if (!b) return -1\n    else {\n        let d = a.major - b.major || a.minor - b.minor || a.patch - b.patch\n        if (d) return d\n        if (a.pre.length == 0 && b.pre.length > 0) return 1\n        if (a.pre.length > 0 && b.pre.length == 0) return -1\n        for (let i = 0; i < a.pre.length + 1; ++i) {\n            const aa = a.pre[i]\n            const bb = b.pre[i]\n            if (!aa)\n                if (!bb) return 0\n                else return -1\n            else if (!bb) return 1\n            else if (/^\\d+$/.test(aa))\n                if (/^\\d+$/.test(bb)) {\n                    d = parseInt(aa) - parseInt(bb)\n                    if (d) return d\n                } else return -1\n            else if (/^\\d+$/.test(bb)) return 1\n            else {\n                d = strcmp(aa, bb)\n                if (d) return d\n            }\n        }\n        return 0\n    }\n}\n\nfunction tryParse(v: string): Version {\n    if (!v) return null\n    if (\"*\" === v) {\n        return {\n            major: Number.MAX_SAFE_INTEGER,\n            minor: Number.MAX_SAFE_INTEGER,\n            patch: Number.MAX_SAFE_INTEGER,\n            pre: [],\n            build: [],\n        }\n    }\n    if (/^v\\d/i.test(v)) v = v.slice(1)\n    const m = /^(\\d+)\\.(\\d+)\\.(\\d+)(-([0-9a-zA-Z\\-\\.]+))?(\\+([0-9a-zA-Z\\-\\.]+))?$/.exec(\n        v\n    )\n    if (m)\n        return {\n            major: parseInt(m[1]),\n            minor: parseInt(m[2]),\n            patch: parseInt(m[3]),\n            pre: m[5] ? m[5].split(\".\") : [],\n            build: m[7] ? m[7].split(\".\") : [],\n        }\n    return null\n}\n\nfunction strcmp(a: string, b: string) {\n    if (a === b) return 0\n    if (a < b) return -1\n    else return 1\n}\n\nexport function semverCmp(a: string, b: string) {\n    const aa = tryParse(a)\n    const bb = tryParse(b)\n    if (!aa && !bb) return strcmp(a, b)\n    else return cmp(aa, bb)\n}\n","import { useState } from \"react\"\nimport useEffectAsync from \"./useEffectAsync\"\n\nexport default function useFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const [response, setResponse] = useState<T>(undefined)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [error, setError] = useState<any>(undefined)\n    const [status, setStatus] = useState<number>(undefined)\n    const [loading, setLoading] = useState(true) // start in loading mode\n\n    useEffectAsync(\n        async mounted => {\n            setLoading(true)\n            try {\n                const res = await fetch(url, options)\n                if (!mounted()) return\n                const status = res.status\n                setStatus(status)\n                if (status >= 200 && status <= 204) {\n                    const json = await res.json()\n                    if (!mounted()) return\n                    setResponse(json)\n                }\n            } catch (error) {\n                if (!mounted()) return\n                setError(error)\n            } finally {\n                if (mounted()) setLoading(false)\n            }\n        },\n        [url]\n    )\n\n    return {\n        response,\n        error,\n        status,\n        loading,\n    }\n}\n","import { useMemo } from \"react\"\nimport { semverCmp } from \"./semver\"\nimport useFetch from \"./useFetch\"\n\nconst ROOT = \"https://api.github.com/\"\nexport const GITHUB_API_KEY = \"githubtoken\"\n\ninterface GithubContent {\n    name: string\n    sha: string\n    size: number\n    html_url: string\n    download_url: string\n    type: \"file\" | \"dir\" | \"symlink\"\n}\n\nexport interface GithubFirmwareRelease {\n    version: string\n    sha: string\n    size: number\n    html_url: string\n    download_url: string\n}\n\nexport interface GithubUser {\n    login: string\n    avatar_url: string\n    html_url: string\n}\n\nexport interface GithubRepository {\n    name: string\n    full_name: string\n    private: boolean\n    owner: GithubUser\n    description: string\n    fork: boolean\n    homepage: string\n    default_branch: string\n    organization: GithubUser\n    html_url: string\n}\n\nfunction contentToFirmwareRelease(\n    content: GithubContent\n): GithubFirmwareRelease {\n    // filter out non-file, non-uf2\n    const version =\n        content?.type === \"file\" &&\n        /^fw-(\\d+\\.\\d+.\\d+)\\.uf2$/.exec(content.name)?.[1]\n    if (!version) return undefined\n\n    return {\n        version,\n        sha: content.sha,\n        size: content.size,\n        html_url: content.html_url,\n        download_url: content.download_url,\n    }\n}\n\nfunction contentsToFirmwareReleases(contents: GithubContent[]) {\n    return contents\n        ?.map(contentToFirmwareRelease)\n        .filter(r => !!r)\n        .sort((l, r) => -semverCmp(l.version, r.version))\n}\n\nexport function normalizeSlug(slug: string): string {\n    return slug.replace(/^https:\\/\\/github.com\\//, \"\")\n}\n\nexport interface GitHubApiOptions {\n    ignoreThrottled?: boolean\n}\n\nexport function parseRepoUrl(url: string): { owner: string; name: string } {\n    const m = /^https:\\/\\/github\\.com\\/([^/ \\t]+)\\/([^/ \\t]+)\\/?$/.exec(\n        url || \"\"\n    )\n    if (m) return { owner: m[1], name: m[2] }\n    return undefined\n}\n\nexport async function fetchLatestRelease(\n    slug: string,\n    options?: GitHubApiOptions\n): Promise<GithubFirmwareRelease> {\n    // https://api.github.com/repos/microsoft/jacdac-msr-modules/contents/dist\n    const uri = `${ROOT}repos/${normalizeSlug(slug)}/contents/dist`\n    const resp = await fetch(uri)\n    //    console.log(resp)\n    switch (resp.status) {\n        case 200:\n        case 204: {\n            const contents: GithubContent[] = await resp.json()\n            const releases = contentsToFirmwareReleases(contents)\n            return releases[0]\n        }\n        case 404:\n            // unknow repo or no access\n            return undefined\n        case 403:\n            // throttled\n            if (options?.ignoreThrottled) return undefined\n            throw new Error(\"Too many calls to GitHub, try again later\")\n    }\n    throw new Error(`unknown status code ${resp.status}`)\n}\n\nexport async function fetchReleaseBinary(\n    slug: string,\n    version: string\n): Promise<Blob> {\n    // we are not using the release api because of CORS.\n    const downloadUrl = `https://raw.githubusercontent.com/${normalizeSlug(\n        slug\n    )}/main/dist/fw-${version}.uf2`\n    const req = await fetch(downloadUrl, {\n        headers: { Accept: \"application/octet-stream\" },\n    })\n    if (req.status == 200) {\n        const firmware = await req.blob()\n        return firmware\n    }\n    return undefined\n}\n\nexport async function fetchText(\n    slug: string,\n    tag: string,\n    path: string,\n    mimeType: string\n) {\n    const downloadUrl = `https://raw.githubusercontent.com/${normalizeSlug(\n        slug\n    )}/${tag}/${path}`\n    const req = await fetch(downloadUrl, {\n        headers: { Accept: mimeType },\n    })\n    if (req.status == 200) {\n        const src = await req.text()\n        return src\n    }\n    return undefined\n}\n\nfunction useFetchApi<T>(path: string, options?: GitHubApiOptions) {\n    const res = useFetch<T>(`${ROOT}${path}`)\n    if (res.status !== undefined)\n        switch (res.status) {\n            case 200:\n            case 201:\n            case 202:\n            case 203:\n            case 204:\n                break\n            case 404:\n                // unknow repo or no access\n                res.response = undefined\n                break\n            case 403:\n                // throttled\n                if (options?.ignoreThrottled) {\n                    res.response = undefined\n                    return res\n                } else\n                    throw new Error(\"Too many calls to GitHub, try again later\")\n\n            default:\n                console.log(`unknown status`, res)\n                throw new Error(`Unknown response from GitHub ${res.status}`)\n        }\n    return res\n}\n\nexport function useRepository(slug: string) {\n    const path = `repos/${normalizeSlug(slug)}`\n    const res = useFetchApi<GithubRepository>(path, { ignoreThrottled: true })\n    return res\n}\n\nexport function useLatestRelease(slug: string, options?: GitHubApiOptions) {\n    const resp = useLatestReleases(slug, options)\n    return {\n        ...resp,\n        response: resp.response?.[0],\n    }\n}\n\nexport function useLatestReleases(slug: string, options?: GitHubApiOptions) {\n    if (!slug)\n        return {\n            response: undefined,\n            loading: false,\n            error: undefined,\n            status: undefined,\n        }\n    const uri = `repos/${normalizeSlug(slug)}/contents/dist`\n    const res = useFetchApi<GithubContent[]>(uri, {\n        ...(options || {}),\n        ignoreThrottled: true,\n    })\n    return {\n        ...res,\n        response: contentsToFirmwareReleases(res.response),\n    }\n}\n","import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useChange from \"../jacdac/useChange\"\nimport { Grid, Card, CardActions, Button } from \"@material-ui/core\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport Alert from \"./ui/Alert\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectService(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, onSelect } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={service.device}\n                                    showAvatar={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                    >\n                                        Select\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\nimport SelectService from \"../SelectService\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\nimport { DISCONNECT } from \"../../../jacdac-ts/src/jdom/constants\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = serviceProviderDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addServiceProvider(bus, hostDefinition)\n\n    if (!hostDefinition) return null\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { serviceClass, onSelect } = props\n    return (\n        <>\n            <h3>Select a device to test</h3>\n            <SelectService serviceClass={serviceClass} onSelect={onSelect} />\n        </>\n    )\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec\n    serviceTest?: jdtest.ServiceTestSpec\n    showStartSimulator?: boolean\n}) {\n    const {\n        serviceSpec,\n        showStartSimulator,\n        serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier),\n    } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    // clear selected service when json changes\n    useEffect(() => {\n        setService(undefined)\n    }, [serviceTest])\n    // clear service if device disconnects\n    useEffect(() => service?.device?.subscribe(DISCONNECT, () => {\n        setService(undefined)\n    }), [service])\n\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip\n                    title=\"go to specification\"\n                    to={`/services/${serviceSpec.shortId}/`}\n                >\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && (\n                <Diagnostics serviceClass={serviceClass} />\n            )}\n            {!service && (\n                <ServiceTestRunnerSelect\n                    serviceClass={serviceClass}\n                    onSelect={handleSelect}\n                />\n            )}\n            {service && (\n                <ServiceTestRunner\n                    service={service}\n                    serviceTest={serviceTest}\n                />\n            )}\n        </>\n    )\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdspec.d.ts\" />\n/// <reference path=\"jdtest.d.ts\" />\n\nimport { \n    parseIntFloat, \n    getRegister, \n    exprVisitor,\n    isBoolOrNumericFormat\n} from \"./jdutils\"\nimport { getTestCommandFunctions, getTestExpressionFunctions } from \"./jdtestfuns\"\nimport jsep from \"jsep\"\n\nconst supportedExpressions: jsep.ExpressionType[] = [\n    \"MemberExpression\",\n    \"ArrayExpression\",\n    \"BinaryExpression\",\n    \"CallExpression\",\n    \"Identifier\",\n    \"Literal\",\n    \"UnaryExpression\",\n    \"LogicalExpression\",\n]\n\n// we parse a test with respect to an existing ServiceSpec\nexport function parseSpecificationTestMarkdownToJSON(\n    filecontent: string,\n    spec: jdspec.ServiceSpec,\n    filename = \"\"\n): jdtest.ServiceTestSpec {\n    if (!spec)\n        return undefined;\n\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdtest.ServiceTestSpec = {\n        description: \"\",\n        serviceClassIdentifier: spec.classIdentifier,\n        tests: [],\n    }\n\n    let backticksType = \"\"\n    const errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let currentTest: jdtest.TestSpec = null\n    let testHeading = \"\"\n    let testPrompt = \"\"\n\n    try {\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (currentTest) finishTest()\n\n    if (errors.length) info.errors = errors\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || \n            line.slice(0, 4) == \"    \" ||\n            /^\\t/.exec(line)\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                testHeading = \"\"\n                testPrompt = \"\"\n                const [, hd, cont] = m\n                if (hd == \"#\") {\n                    if (!info.description)\n                        info.description = cont.trim()\n                    else \n                        error(\"use ## to start a test, not #\")\n                } else if (hd == \"##\") {\n                    if (currentTest) finishTest()\n                    testHeading = cont.trim()\n                }\n            } else {\n                testPrompt += line\n            }\n        } else {\n            const expanded = line.replace(/\\/\\/.*/, \"\").trim()\n            if (!expanded) return\n            processCommand(expanded)\n        }\n    }\n\n    function argsRequiredOptional(args: any[], optional: boolean = false) {\n        return args.filter(a => !optional && typeof(a) === \"string\" || optional && typeof(a) === \"object\")\n    }\n\n    function processCommand(expanded: string) {\n        // TODO: if there is a prompt, the test has no commands, and\n        // TODO: the first command is not ask/say\n        // TODO: then add a say command\n\n        if (!currentTest) {\n            if (!testHeading)\n                error(`every test must have a description (via ##)`)\n            currentTest = {\n                description: testHeading,\n                prompt: testPrompt,\n                registers: [],\n                events: [],\n                testCommands: [],\n            }\n            testHeading = \"\"\n            testPrompt = \"\"\n        }\n        const call = /^([a-zA-Z]\\w*)\\(.*\\)$/.exec(expanded)\n        if (!call) {\n            error(\n                `a command must be a call to a registered test function (JavaScript syntax)`\n            )\n            return\n        }\n        const [, callee] = call\n        const testCommandFunctions = getTestCommandFunctions();\n        const cmdIndex = testCommandFunctions.findIndex(r => callee == r.id)\n        if (cmdIndex < 0) {\n            error(`${callee} is not a registered test command function.`)\n            return\n        }\n        const root: jsep.CallExpression = <jsep.CallExpression>jsep(expanded)\n        if (\n            !root ||\n            !root.type ||\n            root.type != \"CallExpression\" ||\n            !root.callee ||\n            !root.arguments\n        ) {\n            error(`a command must be a call expression in JavaScript syntax`)\n        } else {\n            // check for unsupported expression types\n            exprVisitor(null, root, (p, c) => {\n                if (supportedExpressions.indexOf(c.type) < 0)\n                    error(`Expression of type ${c.type} not currently supported`)\n            })\n            // check arguments\n            const command = testCommandFunctions[cmdIndex]\n            const minArgs = argsRequiredOptional(command.args).length\n            const maxArgs = command.args.length\n            if (root.arguments.length < minArgs)\n                error(\n                    `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n                )\n            else if (root.arguments.length > maxArgs) {\n                error(\n                    `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n                )\n            }\n            else {\n                // deal with optional arguments\n                let newExpressions: jsep.Expression[] = []\n                for(let i = root.arguments.length; i<command.args.length;i++) {\n                    let [name, def] = command.args[i] as [string, any] \n                    const lit: jsep.Literal = {\n                        type: \"Literal\",\n                        value: def,\n                        raw: def.toString(),\n                    }\n                    newExpressions.push(lit)\n                }\n                root.arguments = root.arguments.concat(newExpressions)\n                // type checking of arguments.\n                processArguments(command, root.arguments);\n                // check all calls in subexpressions\n                processCalls(command, root.arguments)\n            }\n            currentTest.testCommands.push({ prompt: testPrompt, call: root })\n            testPrompt = \"\"\n        }\n\n        function processArguments(command: jdtest.TestFunctionDescription, args: jsep.Expression[]) {\n            let eventSymTable: jdspec.PacketInfo[] = []\n            args.forEach((arg, a) => {\n                let argType = command.args[a]\n                if (typeof(argType) === \"object\")\n                    argType = command.args[a][0]\n                if (argType === \"register\" || argType === \"event\") {\n                   if (arg.type !== \"Identifier\")\n                        error(\n                            `${callee} expects a ${argType} in argument position ${a + 1}`\n                        )\n                   else if (argType === \"event\" && a === 0) { \n                        let pkt = lookupEvent(arg)\n                        if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                   } else if (argType === \"register\") {\n                        try {\n                            lookupRegister((arg as jsep.Identifier).name, \"\")\n                        } catch (e) {\n                            error(e.message)\n                        }\n                   }\n                } else if (argType === \"events\") {\n                    if (arg.type != 'ArrayExpression')\n                        error(`events function expects a list of service events`)\n                    else {\n                        (arg as jsep.ArrayExpression).elements.forEach(lookupEvent)\n                    }\n                } else if (argType === \"number\" || argType === \"boolean\") {\n                    exprVisitor(root, arg, (p, c) => {\n                        if (p.type !== 'MemberExpression' && c.type === 'Identifier') {\n                            lookupReplace(eventSymTable, p, c as jsep.Identifier)\n                        } else if (c.type === 'ArrayExpression') {\n                            error(\n                                `array expression not allowed in this context`\n                            )\n                        } else if (c.type === 'MemberExpression') {\n                            const member = c as jsep.MemberExpression;\n                            // A member expression must be of form id1.id2\n                            if (member.object.type !== 'Identifier' || member.property.type !== 'Identifier' || member.computed) {\n                                error('property access must be of form id.property')\n                            } else {\n                                lookupReplace(eventSymTable, p, c as jsep.MemberExpression)\n                            }\n                        }\n                    })\n                } else {\n                    error(`unexpected argument type (${argType}) in jdtestfuns.ts`)\n                }\n            })\n        }\n\n        function processCalls(command: jdtest.TestFunctionDescription, args: jsep.Expression[]) {\n            const testExpressionFunctions = getTestExpressionFunctions()\n            args.forEach((arg, a) => {\n                const argType = command.args[a]\n                exprVisitor(root, arg, (parent, callExpr: jsep.CallExpression) => {\n                    if (callExpr.type !== 'CallExpression')\n                        return;\n                    if (callExpr.callee.type !== \"Identifier\")\n                        error(`all calls must be direct calls`)\n                    const id = (<jsep.Identifier>callExpr.callee).name\n                    const tef = testExpressionFunctions.find(r => id == r.id)\n                    if (!tef)\n                        error(\n                            `${id} is not a registered test expression function.`\n                        )\n                    if (tef.context === \"expression\" || tef.context === \"either\") {\n                        if (argType != \"boolean\")\n                            error(`${id} expression function can only be used inside a boolean expression`)\n                        // no nested calls\n                        if (command.context === \"expression\" || command.context === \"either\") \n                            error(`cannot nest ${tef.id} underneath ${command.id}`)\n                        // look under tef\n                        exprVisitor(null, callExpr, (parent, ce: jsep.CallExpression) => {\n                            if (ce.type !== 'CallExpression')\n                                return;\n                            if (ce.callee.type === \"Identifier\" && (<jsep.Identifier>ce.callee).name)\n                                error(`cannot nest ${(<jsep.Identifier>ce.callee).name} underneath ${id}`)\n                        })\n                    }\n                    const expected = tef.args.length\n                    if (expected !== callExpr.arguments.length)\n                        error(\n                            `${callee} expects ${expected} arguments; got ${callExpr.arguments.length}`\n                        )\n                })\n            })\n        }\n\n        function lookupEvent(e: jsep.Expression) {\n            const events = spec.packets?.filter(pkt => pkt.kind == \"event\")\n            if (e.type !== 'Identifier') {\n                error(`event identifier expected`)\n            } else {\n                const id = (e as jsep.Identifier).name\n                const pkt = events.find(p => p.name === id)\n                if (!pkt) {\n                    error(`no event ${id} in specification`)\n                } else {\n                    if (currentTest.events.indexOf(id) < 0)\n                        currentTest.events.push(id)\n                    return pkt;\n                }\n            }\n            return null;\n        }\n    }\n\n    function lookupRegister(root:string, fld:string)  {\n        let reg = getRegister(spec, root, fld)\n        if (reg.pkt && (!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat) ||\n                        reg.fld && reg.fld.type && !isBoolOrNumericFormat(reg.fld.type)))\n            error(\"only bool/numeric registers allowed in tests\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n        if (currentTest.registers.indexOf(root) < 0)\n            currentTest.registers.push(root)\n    }\n\n    function lookupReplace(events: jdspec.PacketInfo[], parent: jsep.Expression, child: jsep.Identifier | jsep.MemberExpression) {\n        if (Array.isArray(parent)) {\n            let replace = lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child)\n                    parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (parent?.type === \"CallExpression\" && child === (<jsep.CallExpression>parent).callee)\n                return;\n            let replace = lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n\n        function lookup(events: jdspec.PacketInfo[], parent: jsep.Expression, child: jsep.Identifier | jsep.MemberExpression) {\n            try {\n                try {\n                    let [root,fld] = toName()\n                    const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                    const lit: jsep.Literal = {\n                        type: \"Literal\",\n                        value: val,\n                        raw: val.toString(),\n                    }\n                    return lit\n                } catch (e) {\n                    let [root,fld] = toName()\n                    lookupRegister(root, fld)\n                }\n            } catch (e) {\n                if (events.length > 0) {\n                    let [root,fld] = toName()\n                    let pkt = events.find(pkt => pkt.name === root)\n                    if (!pkt)\n                        error(`event ${root} not bound correctly`)\n                    else if (!fld && pkt.fields.length > 0)\n                        error(`event ${root} has fields, but no field specified`)\n                    else if (fld && !pkt.fields.find(f => f.name === fld))\n                        error(`Field ${fld} of event ${root} not found in specification`)\n                } else {\n                    error(e.message)\n                }\n            }\n            return undefined\n            function toName() {\n                if (child.type !== 'MemberExpression')\n                    return [child.name, \"\"];\n                else {\n                    return [(child.object as jsep.Identifier).name,\n                            (child.property as jsep.Identifier).name]\n                }\n            }\n        }\n    }\n\n    function finishTest() {\n        info.tests.push(currentTest)\n        currentTest = null\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n}\n","import React, { useContext, useEffect, useMemo } from \"react\"\nimport { Button, Grid } from \"@material-ui/core\"\nimport { parseSpecificationTestMarkdownToJSON } from \"../../../jacdac-ts/jacdac-spec/spectool/jdtest\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport ServiceSpecificationSelect from \"../ServiceSpecificationSelect\"\nimport { SRV_BUTTON } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ServiceTest from \"../test/ServiceTest\"\nimport { fetchText } from \"../github\"\nimport AppContext from \"../AppContext\"\nimport Markdown from \"../ui/Markdown\"\nimport GridHeader from \"../ui/GridHeader\"\n\nconst SERVICE_TEST_SERVICE_STORAGE_KEY = \"jacdac:servicetesteditor:service\"\nconst SERVICE_TEST_SOURCE_STORAGE_KEY = \"jacdac:servicetesteditorsource\"\nconst SERVICE_MARKDOWN_SOURCE_STORAGE_KEY =\n    \"jacdac:servicetesteditorsource:markdown\"\n\nexport default function ServiceTestEditor() {\n    const { setError } = useContext(AppContext)\n    const [serviceClass, setServiceClass] = useLocalStorage<number>(\n        SERVICE_TEST_SERVICE_STORAGE_KEY,\n        SRV_BUTTON\n    )\n    const [source, setSource] = useLocalStorage(\n        SERVICE_TEST_SOURCE_STORAGE_KEY,\n        \"\"\n    )\n    const [markdownSource, setMarkdownSource] = useLocalStorage(\n        SERVICE_MARKDOWN_SOURCE_STORAGE_KEY,\n        \"\"\n    )\n    const serviceSpec = useMemo(\n        () => serviceSpecificationFromClassIdentifier(serviceClass),\n        [serviceClass]\n    )\n    const json = useMemo(\n        () => parseSpecificationTestMarkdownToJSON(source, serviceSpec),\n        [source, serviceSpec]\n    )\n    const servicePath =\n        json &&\n        `services/tests/${(\n            serviceSpec.camelName ||\n            serviceSpec.shortId ||\n            `0x${serviceSpec.classIdentifier.toString(16)}`\n        ).toLowerCase()}`\n    const handleLoadFromGithub = async () => {\n        try {\n            const ghSource = await fetchText(\n                \"microsoft/jacdac\",\n                \"main\",\n                `services/tests/${serviceSpec.shortId}.md`,\n                \"text/plain\"\n            )\n            setSource(ghSource || \"\")\n        } catch (e) {\n            setError(e)\n        }\n        try {\n            const ghSource = await fetchText(\n                \"microsoft/jacdac\",\n                \"main\",\n                `services/${serviceSpec.shortId}.md`,\n                \"text/plain\"\n            )\n            if (ghSource) setMarkdownSource(ghSource)\n            else setError(\"Specification source not found\")\n        } catch (e) {\n            setError(e)\n        }\n    }\n    return (\n        <Grid spacing={2} container>\n            <Grid item xs={12}>\n                <Grid container spacing={2} direction=\"row\">\n                    <Grid item>\n                        <ServiceSpecificationSelect\n                            label={\"Select a service to test\"}\n                            serviceClass={serviceClass}\n                            setServiceClass={setServiceClass}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant=\"outlined\"\n                            disabled={!serviceSpec}\n                            onClick={handleLoadFromGithub}\n                        >\n                            Load from GitHub\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid spacing={2} container>\n                <Grid item xs={12} sm={7}>\n                    <HighlightTextField\n                        code={source}\n                        language={\"markdown\"}\n                        onChange={setSource}\n                        annotations={json?.errors}\n                        pullRequestTitle={\n                            json && `Service test: ${serviceSpec.name}`\n                        }\n                        pullRequestPath={servicePath}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Markdown source={markdownSource} />\n                </Grid>\n            </Grid>\n            <GridHeader title=\"Preview\" />\n            {json && (\n                <Grid item xs={12} xl={7}>\n                    <ServiceTest\n                        showStartSimulator={true}\n                        serviceSpec={serviceSpec}\n                        serviceTest={json}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceTestEditor from \"../../components/tools/ServiceTestEditor\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>Service Test Editor</h1>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/reference/service-tests\">\n                    service test\n                </Link>{\" \"}\n                documentation.\n            </p>\n            <ServiceTestEditor />\n        </>\n    )\n}\n"],"sourceRoot":""}