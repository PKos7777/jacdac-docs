{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardMatrixKeypad.tsx"],"names":["DashboardMatrixKeypad","props","service","services","variant","widgetRef","useRef","pressedRegister","register","MatrixKeypadReg","useRegisterUnpackedValue","pressed","labels","rows","columns","server","useServiceServer","color","useWidgetTheme","background","controlBackground","active","textProps","widgetSize","useWidgetSize","length","undefined","clickeable","pw","ph","ps","pr","m","w","h","handleButtonUp","index","up","refresh","handleButtonDown","down","render","ledEls","ledProps","className","role","tabIndex","y","row","x","col","on","findIndex","p","label","handleUp","handleDown","fireUp","useFireKey","fireDown","push","navProps","useKeyboardNavigationProps","current"],"mappings":"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","file":"7859-95cac4d9a8d475dba65e.js","sourcesContent":["import React, { SVGProps, useRef } from \"react\"\nimport { MatrixKeypadReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useFireKey from \"../hooks/useFireKey\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport MatrixKeypadServer from \"../../../jacdac-ts/src/servers/matrixkeypadserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\n\nexport default function DashboardMatrixKeypad(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const widgetRef = useRef<SVGGElement>()\n    const pressedRegister = service.register(MatrixKeypadReg.Pressed)\n    const [pressed] = useRegisterUnpackedValue<[[number][]]>(\n        pressedRegister,\n        props\n    )\n    const [labels] = useRegisterUnpackedValue<[[string][]]>(\n        service.register(MatrixKeypadReg.Labels),\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(\n        service.register(MatrixKeypadReg.Rows),\n        props\n    )\n    const [columns] = useRegisterUnpackedValue<[number]>(\n        service.register(MatrixKeypadReg.Columns),\n        props\n    )\n    const server = useServiceServer<MatrixKeypadServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } = useWidgetTheme(\n        color\n    )\n    const widgetSize = useWidgetSize(variant, services.length)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined) return <LoadingProgress />\n\n    const clickeable = !!server\n    // compute size\n    const pw = 8\n    const ph = 8\n    const ps = 0.5\n    const pr = 1\n    const m = 2\n    const w = columns * pw + (columns + 1) * m\n    const h = rows * ph + (rows + 1) * m\n\n    const handleButtonUp = (index: number) => () => {\n        server.up(index)\n        pressedRegister.refresh()\n    }\n    const handleButtonDown = (index: number) => () => {\n        server.down(index)\n        pressedRegister.refresh()\n    }\n\n    // add leds\n    const render = () => {\n        const ledEls: JSX.Element[] = []\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: clickeable ? \"clickeable\" : undefined,\n            role: clickeable ? \"button\" : \"\",\n            tabIndex: clickeable ? 0 : undefined,\n        }\n\n        let y = m\n        for (let row = 0; row < rows; row++) {\n            let x = m\n            for (let col = 0; col < columns; col++) {\n                const index = row * columns + col\n                const on = pressed?.findIndex(p => p[0] === index) > -1\n                const label = labels?.[index]?.[0]\n\n                const handleUp = clickeable ? handleButtonUp(index) : undefined\n                const handleDown = clickeable\n                    ? handleButtonDown(index)\n                    : undefined\n                const fireUp = useFireKey(handleUp)\n                const fireDown = useFireKey(handleDown)\n\n                ledEls.push(\n                    <rect\n                        key={`l${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={on ? active : controlBackground}\n                        stroke={\"none\"}\n                        strokeWidth={ps}\n                        {...ledProps}\n                        aria-label={label || `key ${row},${col}`}\n                        onKeyDown={fireDown}\n                        onKeyUp={fireUp}\n                        onPointerDown={handleDown}\n                        onPointerUp={handleUp}\n                    />\n                )\n                if (label) {\n                    ledEls.push(\n                        <text\n                            key={`t${row}-${col}`}\n                            fontSize={(ph * 2) / 3}\n                            {...textProps}\n                            x={x + pw / 2}\n                            y={y + ph / 2}\n                        >\n                            {label}\n                        </text>\n                    )\n                }\n                x += pw + m\n            }\n            y += ph + m\n        }\n        return { ledEls }\n    }\n\n    const { ledEls } = render()\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w}\n                height={h}\n                rx={pr}\n                ry={pr}\n                fill={background}\n            />\n            <g ref={widgetRef} {...navProps}>\n                {ledEls}\n            </g>\n        </SvgWidget>\n    )\n}\n"],"sourceRoot":""}