{"version":3,"sources":["webpack:///./src/pages/tools/azure-device-twin-designer.tsx"],"names":["ComponentRow","props","component","onUpdate","twin","name","service","useMemo","validateTwinComponent","nameError","serviceError","nameId","useId","handleComponentNameChange","ev","escapeName","target","value","handleSetService","serviceClass","serviceSpecificationFromClassIdentifier","handleComponentDelete","components","splice","indexOf","classIdentifier","undefined","count","filter","c","length","AzureDeviceTwinDesigner","variant","useLocalStorage","displayName","setTwin","dtdl","contents","map","serviceSpecificationToComponent","DTDL_CONTEXT","dtdlSource","JSON","stringify","update","clone","handleDisplayNameChange","handleAddService","names","push","uniqueName","shortId","i"],"mappings":"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","file":"component---src-pages-tools-azure-device-twin-designer-tsx-9a2ff88eccadc599a747.js","sourcesContent":["import { Grid, TextField } from \"@material-ui/core\"\nimport React, { ChangeEvent, useMemo } from \"react\"\nimport { clone, uniqueName } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useLocalStorage from \"../../components/useLocalStorage\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\"\nimport ServiceSpecificationSelect from \"../../components/ServiceSpecificationSelect\"\nimport {\n    DTDL_CONTEXT,\n    escapeName,\n    serviceSpecificationToComponent,\n} from \"../../../jacdac-ts/src/azure-iot/dtdl\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport Snippet from \"../../components/ui/Snippet\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport { useId } from \"react-use-id-hook\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\ninterface DigitalTwinComponent {\n    name: string\n    service: jdspec.ServiceSpec\n}\n\ninterface DigitalTwinSpec {\n    displayName: string\n    components: DigitalTwinComponent[]\n}\n\nfunction ComponentRow(props: {\n    twin: DigitalTwinSpec\n    component: DigitalTwinComponent\n    onUpdate: () => void\n}) {\n    const { component, onUpdate, twin } = props\n    const { name, service } = component\n    const { nameError, serviceError } = useMemo(\n        () => validateTwinComponent(twin, component),\n        [twin, component]\n    )\n    const nameId = useId()\n    const handleComponentNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        component.name = escapeName(ev.target.value)\n        onUpdate()\n    }\n    const handleSetService = (serviceClass: number) => {\n        component.service = serviceSpecificationFromClassIdentifier(\n            serviceClass\n        )\n        onUpdate()\n    }\n    const handleComponentDelete = () => {\n        twin.components.splice(twin.components.indexOf(component), 1)\n        onUpdate()\n    }\n    return <>\n        <h1>Azure Device Twin Designer</h1>\n        <p>\n\n            An <Link href=\"https://github.com/Azure/opendigitaltwins-dtdl/\">device twin</Link> is to be used in IoT solutions such as with Azure IoT Hubs,\n            Azure IoT Plug And Play.\n            The repository of <Link to=\"/dtmi/\">Azure IoT Plug And Play models</Link> for services can be used to resolve models.\n        </p>\n        <Grid item xs={12}>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <TextField\n                        id={nameId}\n                        fullWidth={true}\n                        error={!!nameError}\n                        variant=\"outlined\"\n                        label=\"name\"\n                        helperText={nameError}\n                        value={name}\n                        onChange={handleComponentNameChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <ServiceSpecificationSelect\n                        variant=\"outlined\"\n                        label=\"service\"\n                        serviceClass={service.classIdentifier}\n                        setServiceClass={handleSetService}\n                        error={serviceError}\n                    />\n                </Grid>\n                <Grid item>\n                    <IconButtonWithTooltip\n                        title=\"Remove service\"\n                        onClick={handleComponentDelete}\n                    >\n                        <DeleteIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n        </Grid>\n    </>\n}\n\nfunction validateTwinComponent(\n    twin: DigitalTwinSpec,\n    component: DigitalTwinComponent\n) {\n    let serviceError: string = undefined\n    const nameError: string = undefined\n    const count = twin.components.filter(\n        c => c.service.classIdentifier === component.service.classIdentifier\n    ).length\n    if (count > 1) serviceError = `Multiple same service not supported.`\n    return { serviceError, nameError }\n}\n\nexport default function AzureDeviceTwinDesigner() {\n    const variant = \"outlined\"\n    const [twin, setTwin] = useLocalStorage<DigitalTwinSpec>(\n        \"jacdac:digitaltwin;1\",\n        {\n            displayName: \"mydesigner\",\n            components: [],\n        } as DigitalTwinSpec\n    )\n\n    const dtdl = {\n        \"@type\": \"Interface\",\n        \"@id\": `dtmi:jacdac:devices:${escapeName(twin.displayName)},1`,\n        displayName: twin.displayName,\n        contents: twin.components.map(c =>\n            serviceSpecificationToComponent(c.service, c.name)\n        ),\n        \"@context\": DTDL_CONTEXT,\n    }\n    const dtdlSource = JSON.stringify(dtdl, null, 2)\n\n    const update = () => {\n        setTwin(clone(twin))\n    }\n    const handleDisplayNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        twin.displayName = ev.target.value\n        update()\n    }\n    const handleAddService = (service: jdspec.ServiceSpec) => {\n        const names = twin.components.map(c => c.name)\n        twin.components.push({\n            name: uniqueName(names, service.shortId),\n            service,\n        })\n        update()\n    }\n\n    return (\n        <Grid container direction=\"row\" spacing={2}>\n            <Grid item xs={12}>\n                <TextField\n                    required\n                    fullWidth={true}\n                    label=\"Display name\"\n                    placeholder=\"My device\"\n                    value={twin.displayName || \"\"}\n                    onChange={handleDisplayNameChange}\n                    variant={variant}\n                />\n            </Grid>\n            {twin.components.map((c, i) => (\n                <ComponentRow\n                    key={i}\n                    twin={twin}\n                    component={c}\n                    onUpdate={update}\n                />\n            ))}\n            <Grid item xs={12}>\n                <AddServiceIconButton onAdd={handleAddService} />\n            </Grid>\n            <Grid item xs={12}>\n                <PaperBox>\n                    <Snippet value={dtdlSource} mode=\"json\" download=\"model\" />\n                </PaperBox>\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}