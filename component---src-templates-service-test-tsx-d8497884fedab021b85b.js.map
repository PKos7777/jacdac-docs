{"version":3,"sources":["webpack://jacdac-docs/./src/components/select/SelectServiceGrid.tsx","webpack://jacdac-docs/./src/components/test/ServiceTest.tsx","webpack://jacdac-docs/./src/templates/service-test.tsx"],"names":["SelectServiceGrid","props","useContext","JacdacContext","bus","serviceClass","buttonText","onSelect","disabled","services","useChange","n","gridBreakpoints","useGridBreakpoints","handleSelect","service","length","map","id","device","Diagnostics","hostDefinition","serviceProviderDefinitionFromServiceClass","handleStartSimulator","addServiceProvider","ServiceTestRunnerSelect","ServiceTest","serviceSpec","showStartSimulator","serviceTest","serviceTestFromServiceClass","classIdentifier","useState","undefined","setService","useEffect","subscribe","DISCONNECT","name","shortId","Flags","Page","spec","serviceSpecificationFromClassIdentifier","pageContext","node"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGe,SAASA,iBAAT,CAA2BC,KAA3B,EAKZ;AACC,oBAAgBC,oBAAU,CAAqBC,sBAArB,CAA1B;AAAA,MAAQC,GAAR,eAAQA,GAAR;;AACA,MAAQC,YAAR,GAAyDJ,KAAzD,CAAQI,YAAR;AAAA,MAAsBC,UAAtB,GAAyDL,KAAzD,CAAsBK,UAAtB;AAAA,MAAkCC,QAAlC,GAAyDN,KAAzD,CAAkCM,QAAlC;AAAA,MAA4CC,QAA5C,GAAyDP,KAAzD,CAA4CO,QAA5C;AACA,MAAMC,QAAQ,GAAGC,4BAAS,CAACN,GAAD,EAAM,UAAAO,CAAC;AAAA,WAAIA,CAAC,CAACF,QAAF,CAAW;AAAEJ,kBAAY,EAAZA;AAAF,KAAX,CAAJ;AAAA,GAAP,EAAyC,EAAzC,CAA1B;AACA,MAAMO,eAAe,GAAGC,qCAAkB,EAA1C;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,WAAwB;AAAA,aAAMR,QAAQ,CAACQ,OAAD,CAAd;AAAA,KAAxB;AAAA,GAArB;;AAEA,sBACI,0CACK,CAAC,CAACN,QAAQ,CAACO,MAAX,iBACG,oBAAC,mBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,KACKP,QAAQ,CAACQ,GAAT,CAAa,UAAAF,OAAO;AAAA,wBACjB,oBAAC,mBAAD;AAAM,SAAG,EAAEA,OAAO,CAACG,EAAnB;AAAuB,UAAI;AAA3B,OAAgCN,eAAhC,gBACI,oBAAC,mBAAD,qBACI,oBAAC,+BAAD;AACI,YAAM,EAAEG,OAAO,CAACI,MADpB;AAEI,gBAAU,EAAE;AAFhB,MADJ,eAKI,oBAAC,0BAAD,qBACI,oBAAC,qBAAD;AACI,aAAO,EAAC,WADZ;AAEI,WAAK,EAAC,SAFV;AAGI,aAAO,EAAEL,YAAY,CAACC,OAAD,CAHzB;AAII,cAAQ,EAAEP;AAJd,OAMKF,UAAU,IAAI,QANnB,CADJ,CALJ,CADJ,CADiB;AAAA,GAApB,CADL,CAFR,EAyBK,EAACG,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEO,MAAX,kBACG,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,wEAEI,6CACI,sEADJ,eAEI,yDACY,qDADZ,mCAFJ,eAMI,yFANJ,CAFJ,CA1BR,CADJ;AA4CH,C;;;;;;AClED;AACA;CAEA;;CAEA;;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;;AAEA,SAASI,WAAT,CAAqBnB,KAArB,EAAsD;AAClD,MAAQI,YAAR,GAAyBJ,KAAzB,CAAQI,YAAR;;AACA,oBAAgBH,oBAAU,CAAqBC,sBAArB,CAA1B;AAAA,MAAQC,GAAR,eAAQA,GAAR;;AAEA,MAAMiB,cAAc,GAAGC,6DAAyC,CAACjB,YAAD,CAAhE;;AACA,MAAMkB,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,WAAMC,sCAAkB,CAACpB,GAAD,EAAMiB,cAAN,CAAxB;AAAA,GAA7B;;AAEA,MAAI,CAACA,cAAL,EAAqB,OAAO,IAAP;AAErB,sBACI,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,kBACI,oBAAC,yBAAD,yBADJ,eAEI,oBAAC,qBAAD;AAAQ,WAAO,EAAC,UAAhB;AAA2B,WAAO,EAAEE;AAApC,uBAFJ,CADJ;AAQH;;AAED,SAASE,uBAAT,CAAiCxB,KAAjC,EAGG;AACC,MAAQI,YAAR,GAAmCJ,KAAnC,CAAQI,YAAR;AAAA,MAAsBE,QAAtB,GAAmCN,KAAnC,CAAsBM,QAAtB;AACA,sBACI,uDACI,0DADJ,eAEI,oBAAC,iBAAD;AAAmB,gBAAY,EAAEF,YAAjC;AAA+C,YAAQ,EAAEE;AAAzD,IAFJ,CADJ;AAMH;;AAEc,SAASmB,WAAT,CAAqBzB,KAArB,EAIZ;AACC,MACI0B,WADJ,GAII1B,KAJJ,CACI0B,WADJ;AAAA,MAEIC,kBAFJ,GAII3B,KAJJ,CAEI2B,kBAFJ;AAAA,2BAII3B,KAJJ,CAGI4B,WAHJ;AAAA,MAGIA,WAHJ,mCAGkBC,+CAA2B,CAACH,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEI,eAAd,CAH7C;AAKA,MAAyB1B,YAAzB,GAA0CsB,WAA1C,CAAQI,eAAR;;AACA,kBAA8BC,kBAAQ,CAAYC,SAAZ,CAAtC;AAAA,MAAOlB,OAAP;AAAA,MAAgBmB,UAAhB;;AACA,MAAMpB,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,WAAwBmB,UAAU,CAACnB,OAAD,CAAlC;AAAA,GAArB,CARD,CASC;;;AACAoB,qBAAS,CAAC,YAAM;AACZD,cAAU,CAACD,SAAD,CAAV;AACH,GAFQ,EAEN,CAACJ,WAAD,CAFM,CAAT,CAVD,CAaC;;AACAM,qBAAS,CAAC;AAAA;;AAAA,WAAMpB,OAAN,aAAMA,OAAN,0CAAMA,OAAO,CAAEI,MAAf,oDAAM,gBAAiBiB,SAAjB,CAA2BC,6BAA3B,EAAuC,YAAM;AACzDH,gBAAU,CAACD,SAAD,CAAV;AACH,KAFe,CAAN;AAAA,GAAD,EAEL,CAAClB,OAAD,CAFK,CAAT;AAIA,sBACI,uDACI,gCACQY,WAAW,CAACW,IADpB,0BAEI,oBAAC,oCAAD;AACI,SAAK,EAAC,qBADV;AAEI,MAAE,iBAAeX,WAAW,CAACY,OAA3B;AAFN,kBAII,oBAAC,mBAAD,OAJJ,CAFJ,CADJ,EAUK,CAACC,4CAAA,IAAqBZ,kBAAtB,kBACG,oBAAC,WAAD;AAAa,gBAAY,EAAEvB;AAA3B,IAXR,EAaK,CAACU,OAAD,iBACG,oBAAC,uBAAD;AACI,gBAAY,EAAEV,YADlB;AAEI,YAAQ,EAAES;AAFd,IAdR,EAmBKC,OAAO,iBACJ,oBAAC,gCAAD;AACI,WAAO,EAAEA,OADb;AAEI,eAAW,EAAEc;AAFjB,IApBR,CADJ;AA4BH,C;;;;;;;;;;;;;;;;ACtGD;AACA;AACA;AACA;AAEe,SAASY,IAAT,CAAcxC,KAAd,EAA6E;AACxF,MAAMyC,IAAI,GAAGC,2GAAuC,CAAC1C,KAAK,CAAC2C,WAAN,CAAkBC,IAAlB,CAAuBd,eAAxB,CAApD;AACA,sBAAO,iHACH,iDAAC,0EAAD;AAAa,eAAW,EAAEW;AAA1B,IADG,eAEH,wEAFG,eAGH,0EACI,0EAAI;AAAG,QAAI,8DAA4DzC,KAAK,CAAC2C,WAAN,CAAkBC,IAAlB,CAAuBN,OAAnF;AAAP,iCAAJ,MADJ,eAEI,mFAAS,iDAAC,0DAAD;AAAM,MAAE,EAAC;AAAT,sCAAT,eAFJ,eAGI,2HAAiD,iDAAC,0DAAD;AAAM,MAAE,EAAC;AAAT,sBAAjD,CAHJ,eAII,oHAA0C,iDAAC,0DAAD;AAAM,MAAE;AAAR,kCAA1C,CAJJ,CAHG,CAAP;AAUH,C","file":"component---src-templates-service-test-tsx-d8497884fedab021b85b.js","sourcesContent":["import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Grid, Card, CardActions, Button } from \"@material-ui/core\"\nimport DeviceCardHeader from \"../DeviceCardHeader\"\nimport Alert from \"../ui/Alert\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectServiceGrid(props: {\n    serviceClass: number\n    buttonText?: string\n    disabled?: boolean\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, buttonText, onSelect, disabled } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={service.device}\n                                    showAvatar={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                        disabled={disabled}\n                                    >\n                                        {buttonText || \"Select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\nimport SelectServiceGrid from \"../select/SelectServiceGrid\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\nimport { DISCONNECT } from \"../../../jacdac-ts/src/jdom/constants\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = serviceProviderDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addServiceProvider(bus, hostDefinition)\n\n    if (!hostDefinition) return null\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { serviceClass, onSelect } = props\n    return (\n        <>\n            <h3>Select a device to test</h3>\n            <SelectServiceGrid serviceClass={serviceClass} onSelect={onSelect} />\n        </>\n    )\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec\n    serviceTest?: jdtest.ServiceTestSpec\n    showStartSimulator?: boolean\n}) {\n    const {\n        serviceSpec,\n        showStartSimulator,\n        serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier),\n    } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    // clear selected service when json changes\n    useEffect(() => {\n        setService(undefined)\n    }, [serviceTest])\n    // clear service if device disconnects\n    useEffect(() => service?.device?.subscribe(DISCONNECT, () => {\n        setService(undefined)\n    }), [service])\n\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip\n                    title=\"go to specification\"\n                    to={`/services/${serviceSpec.shortId}/`}\n                >\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && (\n                <Diagnostics serviceClass={serviceClass} />\n            )}\n            {!service && (\n                <ServiceTestRunnerSelect\n                    serviceClass={serviceClass}\n                    onSelect={handleSelect}\n                />\n            )}\n            {service && (\n                <ServiceTestRunner\n                    service={service}\n                    serviceTest={serviceTest}\n                />\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport ServiceTest from \"../components/test/ServiceTest\"\n\nexport default function Page(props: { pageContext: { node: { classIdentifier: number } } }) {\n    const spec = serviceSpecificationFromClassIdentifier(props.pageContext.node.classIdentifier);\n    return <>\n        <ServiceTest serviceSpec={spec} />\n        <h2>See Also</h2>\n        < ul >\n            <li><a href={`https://github.com/microsoft/jacdac/tree/main/services/${props.pageContext.node.shortId}.md`}>Edit specification source</a>.</li>\n            <li>Read <Link to=\"/reference/service-specification/\">Service Specification Language</Link> reference</li>\n            <li>Create a new service specification using the <Link to=\"/tools/service-editor/\">Service Editor</Link></li>\n            <li>Using services in JavaScript with the <Link to={`/clients/javascript/jdom`}>Jacdac Object Model (JDOM)</Link></li>\n        </ul>\n    </>\n}\n\n"],"sourceRoot":""}