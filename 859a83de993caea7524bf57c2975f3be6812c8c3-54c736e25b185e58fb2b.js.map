{"version":3,"file":"859a83de993caea7524bf57c2975f3be6812c8c3-54c736e25b185e58fb2b.js","mappings":";;;;;;;;;;;;;AAA0D;AACgC;AAC3D;AACP;AACsB;AACA;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,6CAAgB;AAChD;AACA;AACA,cAAc,oGAAwB;;AAEtC,gBAAgB,6CAAgB,CAAC,+DAAW;AAC5C,sBAAsB,gDAAmB,QAAQ,oFAAQ;AACzD,eAAe,sDAAI;AACnB;AACA,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C,yDAAe,oEAAU;AACzB;AACA,CAAC,eAAe;;;;;;;;;;;;;;;ACxC0C;AACgC;AAC3D;AACP;AACsB;AACP;AACO;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,WAAW;;AAEX,mDAAmD,KAAK;AACxD;AACA;AACA,GAAG;;AAEH;AACA,aAAa;;AAEb;AACA;AACA;AACA,gCAAgC,6CAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oGAAwB;;AAEtC,0BAA0B,6CAAgB,CAAC,+DAAW;AACtD;;AAEA;;AAEA,0CAA0C,yDAAU;AACpD,2BAA2B,gDAAmB,CAAC,yDAAU,EAAE,oFAAQ;AACnE;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA,8CAA8C,yDAAU;AACxD,6BAA6B,gDAAmB,CAAC,yDAAU,EAAE,oFAAQ;AACrE;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,sBAAsB,gDAAmB,QAAQ,oFAAQ;AACzD,eAAe,sDAAI;AACnB;AACA,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C,yDAAe,oEAAU;AACzB;AACA,CAAC,eAAe;;;;;;;;;;;;;;ACnF0C;AACgC;AAC3D;AACP;AACsB;AACD;AACtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,2EAA2E,MAAM;AACjF;AACA;AACA;AACA,KAAK;;AAEL,qDAAqD,KAAK;AAC1D;AACA;AACA,KAAK;;AAEL,6DAA6D,MAAM;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oGAAwB;;AAEtC,sBAAsB,gDAAmB,YAAY,oFAAQ;AAC7D,eAAe,sDAAI,wEAAwE,mEAAU;AACrG;AACA,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C,yDAAe,oEAAU;AACzB;AACA,CAAC,gBAAgB;;;;;;;;ACxEJ;;AAEb,6BAA6B,mBAAO,CAAC,IAA8C;;AAEnF,8BAA8B,mBAAO,CAAC,IAA+C;;AAErF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,oCAAoC,mBAAO,CAAC,KAAO;;AAEnD,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;ACnBF;;AAEb,6BAA6B,mBAAO,CAAC,IAA8C;;AAEnF,8BAA8B,mBAAO,CAAC,IAA+C;;AAErF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,oCAAoC,mBAAO,CAAC,KAAO;;AAEnD,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;;;;ACnBf;AACA;AAkBO,SAASA,uBAAT,GAAmC;AACtC,SAAOC,aAAa,CAACC,MAAd,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAc,SAAd,IAA2BD,CAAC,CAACC,OAAF,KAAc,QAAnE,CAAP;AACH;AAEM,SAASC,0BAAT,GAAsC;AACzC,SAAOJ,aAAa,CAACC,MAAd,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAc,YAAd,IAA8BD,CAAC,CAACC,OAAF,KAAc,QAAtE,CAAP;AACH;AAED,IAAMH,aAA+C,GAAG,CACpD;AACIK,EAAAA,EAAE,EAAE,SADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,CAFV;AAGIC,EAAAA,MAAM,0BAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CADoD,EAOpD;AACIE,EAAAA,EAAE,EAAE,KADR;AAEIC,EAAAA,IAAI,EAAE,EAFV;AAGIC,EAAAA,MAAM,EAAEC,SAHZ;AAIIL,EAAAA,OAAO,EAAE;AAJb,CAPoD,EAapD;AACIE,EAAAA,EAAE,EAAE,QADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,QAAD,CAFV;AAGIC,EAAAA,MAAM,sCAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAboD,EAmBpD;AACIE,EAAAA,EAAE,EAAE,YADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,SAAD,EAAY,IAAZ,CAAV,CAFV;AAGIC,EAAAA,MAAM,gEAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAnBoD,EAyBpD;AACIE,EAAAA,EAAE,EAAE,WADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,CAAC,SAAD,EAAY,IAAZ,CAAV,CAFV;AAGIC,EAAAA,MAAM,0CAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAzBoD,EA+BpD;AACIE,EAAAA,EAAE,EAAE,QADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,QAAb,CAFV;AAGIC,EAAAA,MAAM,8BAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CA/BoD,EAqCpD;AACIE,EAAAA,EAAE,EAAE,OADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,SAAD,CAFV;AAGIC,EAAAA,MAAM,kBAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CArCoD,EA2CpD;AACIE,EAAAA,EAAE,EAAE,WADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,CAFV;AAGIC,EAAAA,MAAM,4BAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CA3CoD,EAiDpD;AACIE,EAAAA,EAAE,EAAE,WADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,CAFV;AAGIC,EAAAA,MAAM,4BAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAjDoD,EAuDpD;AACIE,EAAAA,EAAE,EAAE,aADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,QAAb,CAFV;AAGIC,EAAAA,MAAM,4DAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAvDoD,EA6DpD;AACIE,EAAAA,EAAE,EAAE,aADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,QAAb,CAFV;AAGIC,EAAAA,MAAM,2DAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CA7DoD,EAmEpD;AACIE,EAAAA,EAAE,EAAE,WADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,QAAb,CAFV;AAGIC,EAAAA,MAAM,wDAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAnEoD,EAyEpD;AACIE,EAAAA,EAAE,EAAE,aADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,QAAb,CAFV;AAGIC,EAAAA,MAAM,0DAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CAzEoD,EA+EpD;AACIE,EAAAA,EAAE,EAAE,OADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,KAAD,CAFV;AAGIC,EAAAA,MAAM,EAAEC,SAHZ;AAIIL,EAAAA,OAAO,EAAE;AAJb,CA/EoD,EAqFpD;AACIE,EAAAA,EAAE,EAAE,SADR;AAEIC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CAFV;AAGIC,EAAAA,MAAM,wEAHV;AAIIJ,EAAAA,OAAO,EAAE;AAJb,CArFoD,CAAxD;;;;;;;;;;;;;;;;;;AC3BA;AACA;AAIA;AAEA;AAGO,IAAMgB,eAAb;AAAA;;AAKI,2BAAYC,OAAZ,EAAgC;AAAA;;AAC5B,wCAAMA,OAAN;AAD4B,UAJxBC,UAIwB,GAJO,EAIP;AAAA,UAHxBC,aAGwB,GAHO,EAGP;AAAA,UAFxBC,OAEwB,GAFC,EAED;AAAA;AAE/B;;AAPL;;AAAA,SASWC,gBATX,GASI,0BAAwBC,OAAxB,EAAyCC,OAAzC,EAA8D;AAC1D,QAAI,CAAC,KAAKL,UAAL,CAAgBI,OAAhB,CAAL,EAA+B;AAC3B,UAAME,GAAG,GAAG,KAAKP,OAAL,CAAaQ,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACRH,GAAG,IAAIjB,gEAAU,CAACiB,GAAD,CAAV,IAAmBA,GAAG,CAACI,IAAJ,KAAaN,OAD/B,CAAZ;;AAGA,UAAIE,GAAJ,EAAS;AACL,YAAMK,QAAQ,GAAG,KAAKZ,OAAL,CAAaY,QAAb,CAAsBL,GAAG,CAACM,UAA1B,CAAjB;AACA,aAAKZ,UAAL,CAAgBI,OAAhB,IAA2BO,QAA3B;AACA,aAAKE,KAAL,CAAWF,QAAQ,CAACG,SAAT,CAAmBrB,8DAAnB,EAA2BY,OAA3B,CAAX;AACH;AACJ;AACJ,GApBL;;AAAA,SAsBWU,aAtBX,GAsBI,uBAAqBC,SAArB,EAAwCX,OAAxC,EAA6D;AACzD,QAAI,CAAC,KAAKH,OAAL,CAAac,SAAb,CAAL,EAA8B;AAC1B,UAAMV,GAAG,GAAG,KAAKP,OAAL,CAAaQ,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACRH,GAAG,IAAIlB,6DAAO,CAACkB,GAAD,CAAP,IAAgBA,GAAG,CAACI,IAAJ,KAAaM,SAD5B,CAAZ;;AAGA,UAAIV,GAAJ,EAAS;AACL,YAAMW,KAAK,GAAG,KAAKlB,OAAL,CAAakB,KAAb,CAAmBX,GAAG,CAACM,UAAvB,CAAd;AACA,aAAKV,OAAL,CAAac,SAAb,IAA0BC,KAA1B;AACA,aAAKJ,KAAL,CAAWI,KAAK,CAACH,SAAN,CAAgBpB,6DAAhB,EAAuBW,OAAvB,CAAX;AACH;AACJ;AACJ,GAjCL;;AAAA,SAmCiBa,gBAnCjB;AAAA,0HAmCI,WAA8BC,WAA9B,EAAmDC,MAAnD,EAAyE;AACrE,UAAMd,GAAG,GAAG,KAAKP,OAAL,CAAaQ,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CACRY,CAAC,IAAI/B,+DAAS,CAAC+B,CAAD,CAAT,IAAgBA,CAAC,CAACX,IAAF,KAAWS,WADxB,CAAZ;;AAGA,UAAIb,GAAJ,EAAS;AACL,cAAM,KAAKP,OAAL,CAAauB,YAAb,CACFhB,GAAG,CAACM,UADF,EAEFf,4DAAM,CAACS,GAAG,CAACiB,UAAL,EAAiBH,MAAjB,CAFJ,EAGF,IAHE,CAAN;AAKH;AACJ,KA9CL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgDiBI,kBAhDjB;AAAA,4HAgDI,WAAgCpB,OAAhC,EAAiDgB,MAAjD,EAAmE;AAC/D,UAAMT,QAAQ,GAAG,KAAKX,UAAL,CAAgBI,OAAhB,CAAjB;AACA,UAAIO,QAAQ,CAACc,IAAT,KAAkB7B,6EAAtB,EAAuC,MAAM,KAAK+B,UAAL,EAAN;AACvC,YAAM,KAAKC,aAAL,CAAmB,KAAK5B,UAAL,CAAgBI,OAAhB,CAAnB,EAA6CgB,MAA7C,CAAN;AACH,KApDL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsDkBQ,aAtDlB;AAAA,uHAsDI,WAA4BC,KAA5B,EAA+CT,MAA/C,EAAiE;AAAA;;AAC7D,YAAMS,KAAN,aAAMA,KAAN,uBAAMA,KAAK,CAAEC,kBAAP,yBACFD,KAAK,CAACtB,aADJ,yDACF,qBAAqBgB,UADnB,EAEFH,MAFE,EAGF,IAHE,CAAN;AAKH,KA5DL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8DkBO,UA9DlB;AAAA,oHA8DI,aAA2B;AACvB,UAAMrB,GAAG,GAAG,KAAKP,OAAL,CAAaQ,aAAb,CAA2BC,OAA3B,CAAmCC,IAAnC,CAAwClB,6DAAxC,CAAZ;;AACA,UAAIe,GAAG,IAAIA,GAAG,CAACyB,MAAJ,CAAW,CAAX,EAAcC,IAAd,KAAuB,MAAlC,EAA0C;AACtC,YAAMH,KAAK,GAAG,KAAK9B,OAAL,CAAaY,QAAb,CAAsBf,qFAAtB,CAAd;AACA,cAAM,KAAKgC,aAAL,CAAmBC,KAAnB,EAA0B,CAAC,IAAD,CAA1B,CAAN;AACH;AACJ,KApEL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsEiBK,mBAtEjB;AAAA,6HAsEI,WACIC,IADJ,EAEIC,GAFJ,EAGIC,YAHJ,EAIE;AAAA,UADEA,YACF;AADEA,QAAAA,YACF,GADiB,KACjB;AAAA;;AACE,UAAIF,IAAI,IAAI,KAAKnC,UAAjB,EAA6B;AAAA;;AACzB,YAAMW,QAAQ,GAAG,KAAKX,UAAL,CAAgBmC,IAAhB,CAAjB;;AACA,YAAIE,YAAY,IAAI,CAAC,KAAKpC,aAAL,CAAmBkC,IAAnB,CAArB,EAA+C;AAC3C,eAAKlC,aAAL,CAAmBkC,IAAnB,IAA2B,IAA3B;AACA,eAAKtB,KAAL,CAAWF,QAAQ,CAACG,SAAT,CAAmBnB,qEAAnB,EAAkC,MAAM,CAAE,CAA1C,CAAX;AACH;;AACD,cAAMgB,QAAQ,CAAC2B,OAAT,EAAN;AACA,YAAI,CAACF,GAAL,EAAU,gCAAOzB,QAAQ,CAAC4B,aAAhB,0DAAO,sBAAyB,CAAzB,CAAP,CAAV,KACK;AACD,cAAMC,KAAK,GAAG7B,QAAQ,CAACoB,MAAT,CAAgBtB,IAAhB,CAAqB5B,CAAC,IAAIA,CAAC,CAAC6B,IAAF,KAAW0B,GAArC,CAAd;AACA,iBAAOI,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEC,KAAd;AACH;AACJ,OAZD,MAYO,IAAIN,IAAI,IAAI,KAAKjC,OAAjB,EAA0B;AAAA;;AAC7B,YAAMsC,MAAK,4BAAG,KAAKtC,OAAL,CAAaiC,IAAb,EAAmBJ,MAAtB,0DAAG,sBAA2BtB,IAA3B,CAAgC5B,CAAC,IAAIA,CAAC,CAAC6B,IAAF,KAAW0B,GAAhD,CAAd;;AACA,eAAOI,MAAP,aAAOA,MAAP,uBAAOA,MAAK,CAAEC,KAAd;AACH;;AACD,aAAOtD,SAAP;AACH,KA5FL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAqCK,yEAArC;;;;;;;;;;;;;ACLA;AAQO,SAASkD,OAAT,CAAiBC,CAAjB,EAA6C;AAChD,UAAQA,CAAC,CAACX,IAAV;AACI,SAAK,iBAAL;AAAwB;AACpB,YAAMY,EAAE,GAAGD,CAAX;AACA,qBAAWC,EAAE,CAACC,QAAH,CAAYC,GAAZ,CAAgBJ,OAAhB,EAAyBK,IAAzB,CAA8B,IAA9B,CAAX;AACH;;AACD,SAAK,gBAAL;AAAuB;AACnB,YAAMC,MAAM,GAAGL,CAAf;AACA,eAAUD,OAAO,CAACM,MAAM,CAACC,MAAR,CAAjB,SAAoCD,MAAM,CAACE,SAAP,CAC/BJ,GAD+B,CAC3BJ,OAD2B,EAE/BK,IAF+B,CAE1B,IAF0B,CAApC;AAGH;;AACD,SAAK,kBAAL;AAAyB;AACrB,YAAMZ,IAAI,GAAGQ,CAAb;AACA,eAAOR,IAAI,CAACgB,QAAL,GACET,OAAO,CAACP,IAAI,CAACiB,MAAN,CADT,SAC0BV,OAAO,CAACP,IAAI,CAACkB,QAAN,CADjC,SAEEX,OAAO,CAACP,IAAI,CAACiB,MAAN,CAFT,SAE0BV,OAAO,CAACP,IAAI,CAACkB,QAAN,CAFxC;AAGH;;AACD,SAAK,kBAAL;AACA,SAAK,mBAAL;AAA0B;AACtB,YAAMC,EAAE,GAAGX,CAAX;AACA,qBAAWD,OAAO,CAACY,EAAE,CAACC,IAAJ,CAAlB,SAA+BD,EAAE,CAACE,QAAlC,SAA8Cd,OAAO,CAACY,EAAE,CAACG,KAAJ,CAArD;AACH;;AACD,SAAK,iBAAL;AAAwB;AACpB,YAAMC,EAAE,GAAGf,CAAX;AACA,oBAAUe,EAAE,CAACF,QAAb,GAAwBd,OAAO,CAACgB,EAAE,CAACC,QAAJ,CAA/B;AACH;;AACD,SAAK,YAAL;AAAmB;AACf,eAAQhB,CAAD,CAAuBjC,IAA9B;AACH;;AACD,SAAK,SAAL;AAAgB;AACZ,eAAQiC,CAAD,CAAoBiB,GAA3B;AACH;;AACD;AACI,aAAO,MAAP;AAjCR;AAmCH;AAEM,IAAMC,eAAb;AACI;AAIA;AACA,2BAAoBC,GAApB,EAA2CC,QAA3C,EAAoE;AAAA,SAJ5DC,SAI4D,GAJzC,EAIyC;AAAA,SAH5D3B,YAG4D,GAH7C,KAG6C;AAAA,SAAhDyB,GAAgD,GAAhDA,GAAgD;AAAA,SAAzBC,QAAyB,GAAzBA,QAAyB;AAAE;;AAN1E;;AAAA,SAQWE,GARX,GAQI,eAAa;AACT,WAAO,KAAKD,SAAL,CAAe,KAAKA,SAAL,CAAeE,MAAf,GAAwB,CAAvC,CAAP;AACH,GAVL;;AAAA,SAYWC,GAZX,GAYI,eAAa;AACT,WAAO,KAAKH,SAAL,CAAeG,GAAf,EAAP;AACH,GAdL;;AAAA,SAgBiBC,SAhBjB;AAAA,mHAgBI,WAAuBzB,CAAvB,EAA2CN,YAA3C,EAAiE;AAAA,UAAtBA,YAAsB;AAAtBA,QAAAA,YAAsB,GAAP,KAAO;AAAA;;AAC7D,WAAK2B,SAAL,GAAiB,EAAjB;AACA,WAAK3B,YAAL,GAAoBA,YAApB;AACA,YAAM,KAAKgC,oBAAL,CAA0B1B,CAA1B,CAAN;AACA,aAAO,KAAKqB,SAAL,CAAeG,GAAf,EAAP;AACH,KArBL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuBiBE,oBAvBjB;AAAA,8HAuBI,WAAkC1B,CAAlC,EAAsD;AAClD,cAAQA,CAAC,CAACX,IAAV;AACI,aAAK,iBAAL;AAAwB;AACpB;AACA;AACH;;AAED,aAAK,gBAAL;AAAuB;AACnB,gBAAI,KAAK+B,QAAT,EAAmB;AACf,kBAAMO,GAAG,GAAG,KAAKP,QAAL,CAAmCpB,CAAnC,EAAsC,IAAtC,CAAZ;AACA,mBAAKqB,SAAL,CAAeO,IAAf,CAAoBD,GAApB;AACH,aAHD,MAGO,KAAKN,SAAL,CAAeO,IAAf,CAAoBpF,SAApB;;AACP;AACH;;AAED,aAAK,kBAAL;AAAyB;AACrB,gBAAMmE,EAAE,GAA0BX,CAAlC;AACA,kBAAM,KAAK0B,oBAAL,CAA0Bf,EAAE,CAACC,IAA7B,CAAN;AACA,kBAAM,KAAKc,oBAAL,CAA0Bf,EAAE,CAACG,KAA7B,CAAN;AACA,gBAAMA,KAAK,GAAG,KAAKO,SAAL,CAAeG,GAAf,EAAd;AACA,gBAAMZ,IAAI,GAAG,KAAKS,SAAL,CAAeG,GAAf,EAAb;;AACA,oBAAQb,EAAE,CAACE,QAAX;AACI,mBAAK,GAAL;AACI,qBAAKQ,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;;AACJ,mBAAK,KAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;;AACJ,mBAAK,KAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AACA;;AACJ,mBAAK,KAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,KAAKE,KAA7B;AACA;;AAEJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,GAAGE,KAA3B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;;AACJ,mBAAK,IAAL;AACI,qBAAKO,SAAL,CAAeO,IAAf,CAAoBhB,IAAI,IAAIE,KAA5B;AACA;AA1DR;;AA4DA;AACH;;AAED,aAAK,iBAAL;AAAwB;AACpB,gBAAMC,EAAE,GAAyBf,CAAjC;AACA,kBAAM,KAAK0B,oBAAL,CAA0BX,EAAE,CAACC,QAA7B,CAAN;AACA,gBAAMa,GAAG,GAAG,KAAKR,SAAL,CAAeG,GAAf,EAAZ;;AACA,oBAAQT,EAAE,CAACF,QAAX;AACI,mBAAK,KAAL;AACI,qBAAKQ,SAAL,CAAeO,IAAf,CAAoBE,IAAI,CAACC,GAAL,CAASF,GAAT,CAApB;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AACA;;AACJ,mBAAK,GAAL;AACI,qBAAKR,SAAL,CAAeO,IAAf,CAAoB,CAACC,GAArB;AACA;AAfR;;AAiBA;AACH;;AAED,aAAK,mBAAL;AAA0B;AACtB,gBAAMG,EAAE,GAA2BhC,CAAnC;AACA,kBAAM,KAAK0B,oBAAL,CAA0BM,EAAE,CAACpB,IAA7B,CAAN;;AACA,oBAAQoB,EAAE,CAACnB,QAAX;AACI,mBAAK,IAAL;AACI,oBAAI,KAAKS,GAAL,EAAJ,EAAgB,OAAhB,KACK,MAAM,KAAKI,oBAAL,CAA0BM,EAAE,CAAClB,KAA7B,CAAN;AACL;;AACJ,mBAAK,IAAL;AACI,oBAAI,CAAC,KAAKQ,GAAL,EAAL,EAAiB,OAAjB,KACK,MAAM,KAAKI,oBAAL,CAA0BM,EAAE,CAAClB,KAA7B,CAAN;AACL;;AACJ;AATJ;;AAWA;AACH;;AACD,aAAK,kBAAL;AAAyB;AACrB;AACA;AACA,gBAAMmB,GAAG,SAAS,KAAKd,GAAL,CACdnB,CADc,EAEd,KAAKN,YAFS,CAAlB,CAHqB,CAOrB;AACA;AACA;;AACA,iBAAK2B,SAAL,CAAeO,IAAf,CAAoBK,GAApB;AACA;AACH;;AACD,aAAK,YAAL;AAAmB;AACf,gBAAM5F,EAAE,GAAoB2D,CAA5B;;AACA,gBAAMiC,IAAG,SAAS,KAAKd,GAAL,CAAS9E,EAAE,CAAC0B,IAAZ,EAAkB,KAAK2B,YAAvB,CAAlB,CAFe,CAGf;AACA;;;AACA,iBAAK2B,SAAL,CAAeO,IAAf,CAAoBK,IAApB;AACA;AACH;;AACD,aAAK,SAAL;AAAgB;AACZ,gBAAMC,GAAG,GAAiBlC,CAA1B;AACA,iBAAKqB,SAAL,CAAeO,IAAf,CAAoBM,GAAG,CAACpC,KAAxB;AACA;AACH;;AACD;AArJJ;AAuJH,KA/KL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnD0D;AACgC;AAC3D;AACP;AACsB;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,gBAAgB;AAC3D;AACA;AACA,cAAc,0CAAwB;;AAEtC,sBAAsB,mBAAmB,QAAQ,8BAAQ;AACzD,eAAe,yBAAI;AACnB;AACA,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C;AACA,oFAAe,6BAAU;AACzB;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChC3B;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEO,IAAKwC,YAAZ;;WAAYA;AAAAA,EAAAA,aAAAA;AAAAA,EAAAA,aAAAA;AAAAA,EAAAA,aAAAA;AAAAA,EAAAA,aAAAA;GAAAA,iBAAAA;;AAOL,IAAKC,mBAAZ;;WAAYA;AAAAA,EAAAA,oBAAAA;AAAAA,EAAAA,oBAAAA;AAAAA,EAAAA,oBAAAA;AAAAA,EAAAA,oBAAAA;AAAAA,EAAAA,oBAAAA;GAAAA,wBAAAA;;AAQZ,SAASC,yBAAT,CAAmCC,MAAnC,EAAgE;AAC5D,UAAQA,MAAR;AACI,SAAKF,mBAAmB,CAACG,MAAzB;AACI,aAAOJ,YAAY,CAACI,MAApB;;AACJ,SAAKH,mBAAmB,CAACI,MAAzB;AACI,aAAOL,YAAY,CAACK,MAApB;;AACJ,SAAKJ,mBAAmB,CAACK,MAAzB;AACI,aAAON,YAAY,CAACM,MAApB;;AACJ,SAAKL,mBAAmB,CAACM,QAAzB;AACI,aAAOP,YAAY,CAACO,QAApB;;AACJ,SAAKN,mBAAmB,CAACO,iBAAzB;AACI,aAAOR,YAAY,CAACI,MAApB;AAVR;AAYH;;AAED,SAASK,iBAAT,CAA2BC,GAA3B,EAAwD;AACpD,MAAM3G,EAAE,GAAqB2G,GAAG,CAACC,IAAJ,CAAS3C,MAA3B,CAAmCvC,IAA9C;AACA,SAAOhC,6CAAuB,GAAG+B,IAA1B,CAA+BoF,CAAC,IAAIA,CAAC,CAAC7G,EAAF,IAAQA,EAA5C,CAAP;AACH;;IAEK8G;AAQF,8BACqBC,UADrB,EAEqBC,OAFrB,EAGE;AAAA,SAVMC,OAUN,GAVgB,EAUhB;AAAA,SATMC,SASN,GATkB,EASlB;AAAA,SARMC,OAQN,GARgBjB,mBAAmB,CAACG,MAQpC;AAAA,SAPMe,iBAON,GAPoC,EAOpC;AAAA,SANMC,cAMN,GAN+BlH,SAM/B;AAAA,SALMmH,eAKN,GALkCnH,SAKlC;AAAA,SAFmB4G,UAEnB,GAFmBA,UAEnB;AAAA,SADmBC,OACnB,GADmBA,OACnB;AAAE;;;;SAkBIjC,WAAR,kBAAiBwC,KAAjB,EAAiD;AAC7C,WAAO,CAACvD,MAAD,EAA8BwD,EAA9B,KAAsD;AACzD,eAASC,WAAT,CAAqB9D,CAArB,EAAyC;AACrC,eAAO4D,KAAK,CAAC9F,IAAN,CAAWiG,CAAC,IAAIA,CAAC,CAAC/D,CAAF,KAAQA,CAAxB,EAA2BgE,CAAlC;AACH;;AACD,UAAM1D,MAAM,GAAoBD,MAAM,CAACC,MAAvC;;AACA,cAAQA,MAAM,CAACvC,IAAf;AACI,aAAK,OAAL;AACI,iBAAO+F,WAAW,CAACzD,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAD,CAAlB;;AACJ,aAAK,SAAL;AAAgB;AACZ,gBAAMjE,IAAI,GAAG+D,MAAM,CAACE,SAApB;AACA,gBAAM0D,IAAI,GAAGH,WAAW,CAACxH,IAAI,CAAC,CAAD,CAAL,CAAxB;AACA,gBAAM4H,KAAK,GAAGJ,WAAW,CAACxH,IAAI,CAAC,CAAD,CAAL,CAAzB;AACAuH,YAAAA,EAAE,CAACnC,oBAAH,CAAwBpF,IAAI,CAAC,CAAD,CAA5B;AACA,gBAAM6H,EAAE,GAAGN,EAAE,CAACrC,GAAH,EAAX;AACA,mBAAO2C,EAAE,IAAIF,IAAI,GAAGC,KAAb,IAAsBC,EAAE,IAAIF,IAAI,GAAGC,KAA1C;AACH;;AACD,gBAXJ,CAWa;;AAXb;;AAaA,aAAO,IAAP;AACH,KAnBD;AAoBH,IAED;AACA;;;SACON,QAAP,iBAAe;AACX,SAAKH,iBAAL,GAAyB,EAAzB;AACA,QAAMW,OAAO,GAAGrB,iBAAiB,CAAC,KAAKM,OAAN,CAAjC;AACA,QAAM/G,IAAI,GAAG,KAAK+G,OAAL,CAAaJ,IAAb,CAAkB1C,SAA/B;AACA,QAAM8D,UAA6B,GAAG,EAAtC;;AACA,YAAQD,OAAO,CAAC/H,EAAhB;AACI,WAAK,OAAL;AACA,WAAK,YAAL;AACA,WAAK,WAAL;AAAkB;AACd8F,UAAAA,+BAAW,CAAC,IAAD,EAAO7F,IAAP,EAAa,CAACoC,CAAD,EAAI4F,EAAJ,KAAgC;AACpD,gBAAIA,EAAE,CAACjF,IAAH,KAAY,gBAAhB,EAAkC;AAClC,gBAAsBiF,EAAE,CAAChE,MAArB,CAA6BvC,IAA7B,KAAsC,OAA1C,EACIsG,UAAU,CAACzC,IAAX,CAAgB0C,EAAE,CAAC/D,SAAH,CAAa,CAAb,CAAhB,EADJ,KAEK,IAAsB+D,EAAE,CAAChE,MAArB,CAA6BvC,IAA7B,KAAsC,SAA1C,EAAqD;AACtDsG,cAAAA,UAAU,CAACzC,IAAX,CAAgB0C,EAAE,CAAC/D,SAAH,CAAa,CAAb,CAAhB;AACA8D,cAAAA,UAAU,CAACzC,IAAX,CAAgB0C,EAAE,CAAC/D,SAAH,CAAa,CAAb,CAAhB;AACH;AACJ,WARU,CAAX;AASA;AACH;;AACD,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,WAAL;AAAkB;AACd8D,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA;AACH;;AACD,WAAK,aAAL;AACA,WAAK,aAAL;AACA,WAAK,WAAL;AACA,WAAK,aAAL;AAAoB;AAChB+H,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA+H,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA;AACH;;AACD,WAAK,SAAL;AAAgB;AACZ+H,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA+H,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA;AACH;;AACD,WAAK,QAAL;AAAe;AACX+H,UAAAA,UAAU,CAACzC,IAAX,CAAgBtF,IAAI,CAAC,CAAD,CAApB;AACA;AACH;;AACD,WAAK,QAAL;AAAe;AACX,cAAMiI,SAAS,GAAG,KAAKlB,OAAL,CAAaJ,IAAb,CACb1C,SADa,CACH,CADG,CAAlB;AAEA,eAAKoD,eAAL,GACIY,SAAS,CAACrE,QADS,CAErBC,GAFqB,CAEjB9D,EAAE,IAAIA,EAAE,CAAC0B,IAFQ,CAAvB;AAGA;AACH;AA7CL,KALW,CAoDX;;;AACAsG,IAAAA,UAAU,CAACG,OAAX,CAAmBC,KAAK,IAAI;AACxB,UAAI,KAAKhB,iBAAL,CAAuBiB,SAAvB,CAAiCX,CAAC,IAAIA,CAAC,CAAC/D,CAAF,KAAQyE,KAA9C,IAAuD,CAA3D,EAA8D;AAC1D,YAAME,QAAQ,GAAG,IAAIzD,8BAAJ,CACb,KAAKC,GADQ,EAEb,KAAKC,QAAL,CAAc,EAAd,CAFa,CAAjB;;AAIA,aAAKqC,iBAAL,CAAuB7B,IAAvB,CAA4B;AACxB5B,UAAAA,CAAC,EAAEyE,KADqB;AAExBT,UAAAA,CAAC,EAAEW,QAAQ,CAAClD,SAAT,CAAmBgD,KAAnB;AAFqB,SAA5B;AAIH;AACJ,KAXD;AAYA,SAAKG,YAAL;AACH;;SAEOA,eAAR,wBAAuB;AACnB,QAAMR,OAAO,GAAGrB,iBAAiB,CAAC,KAAKM,OAAN,CAAjC;AACA,QAAMwB,SAAS,GAAG,KAAKxB,OAAL,CAAaJ,IAAb,CAAkB1C,SAAlB,CAA4BJ,GAA5B,CAAgC,CAAC2E,CAAD,EAAIC,CAAJ,KAAU;AACxD,aAAO,QAAKA,CAAC,GAAG,CAAT,SAAehF,0BAAO,CAAC+E,CAAD,CAAtB,CAAP;AACH,KAFiB,CAAlB;AAGA,QAAME,UAAU,GAAG,KAAK3B,OAAL,CAAaJ,IAAb,CAAkB1C,SAAlB,CAA4BJ,GAA5B,CAAgC,CAAC2E,CAAD,EAAIC,CAAJ,KAAU;AACzD,UAAME,MAAM,GAAG,KAAKxB,iBAAL,CAAuB3F,IAAvB,CAA4BiG,CAAC,IAAIA,CAAC,CAAC/D,CAAF,KAAQ8E,CAAzC,CAAf;;AACA,aAAO,QACCC,CAAC,GAAG,CADL,aAEHE,MAAM,IAAIA,MAAM,CAACjB,CAAjB,GACM3B,oCAAkB,CAAC4C,MAAM,CAACjB,CAAR,EAAW,CAAX,CAAlB,CAAgCkB,QAAhC,EADN,GAEMnF,0BAAO,CAAC+E,CAAD,CAJV,CAAP;AAMH,KARkB,CAAnB;AASA,SAAKxB,OAAL,GACIc,OAAO,CAAC/H,EAAR,KAAe,KAAf,IAAwB+H,OAAO,CAAC/H,EAAR,KAAe,KAAvC,GACM,KAAKgH,OAAL,CAAa9G,MAAb,CAAoB4I,KAApB,CAA0B,CAA1B,CADN,GAEMf,OAAO,CAAC7H,MAAR,CAAe4I,KAAf,CAAqB,CAArB,CAHV;AAIAN,IAAAA,SAAS,CAACL,OAAV,CACI9F,CAAC,IAAK,KAAK4E,OAAL,GAAe,KAAKA,OAAL,CAAa8B,OAAb,CAAqB1G,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B,CADzB;AAGAsG,IAAAA,UAAU,CAACR,OAAX,CACI9F,CAAC,IAAK,KAAK4E,OAAL,GAAe,KAAKA,OAAL,CAAa8B,OAAb,CAAqB1G,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B,CADzB;AAGH;;SAEM2G,WAAP,kBAAgBlB,EAAhB,EAA4B,CAAE;;SAEtBmB,kBAAR,yBAAwBtF,CAAxB,EAA4C;AACxC,QAAMuF,IAAI,GAAG,IAAIrE,8BAAJ,CACT,KAAKC,GADI,EAET,KAAKC,QAAL,CAAc,KAAKqC,iBAAnB,CAFS,CAAb;AAIA,WAAO8B,IAAI,CAAC9D,SAAL,CAAezB,CAAf,IACDuC,mBAAmB,CAACI,MADnB,GAEDJ,mBAAmB,CAACG,MAF1B;AAGH;;SAEO8C,WAAR,kBAAiBxF,CAAjB,EAAqC;AACjC,WAAO,KAAKyD,iBAAL,CAAuB3F,IAAvB,CAA4BiG,CAAC,IAAIA,CAAC,CAAC/D,CAAF,KAAQA,CAAzC,CAAP;AACH;;SAEYyF;6DAAb,aAA6B;AACzB,UAAMrB,OAAO,GAAGrB,iBAAiB,CAAC,KAAKM,OAAN,CAAjC;AACA,UAAM/G,IAAI,GAAG,KAAK+G,OAAL,CAAaJ,IAAb,CAAkB1C,SAA/B;AACA,WAAKiD,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;AACA,WAAKa,SAAL,GAAiB,EAAjB;;AACA,cAAQa,OAAO,CAAC/H,EAAhB;AACI,aAAK,KAAL;AAAY;AACR,iBAAKmH,OAAL,GAAejB,mBAAmB,CAACO,iBAAnC;AACA;AACH;;AACD,aAAK,OAAL;AAAc;AACV,iBAAKU,OAAL,GAAe,KAAK8B,eAAL,CAAqBhJ,IAAI,CAAC,CAAD,CAAzB,CAAf;AACA;AACH;;AACD,aAAK,SAAL;AAAgB;AACZ,gBAAM2H,IAAI,GAAG,KAAKuB,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAb;AACA,gBAAM4H,KAAK,GAAG,KAAKsB,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAd;AACA,gBAAMiJ,IAAI,GAAG,IAAIrE,8BAAJ,CACT,KAAKC,GADI,EAET,KAAKC,QAAL,CAAc,KAAKqC,iBAAnB,CAFS,CAAb;AAIA,gBAAMU,EAAE,SAAUoB,IAAI,CAAC9D,SAAL,CAAenF,IAAI,CAAC,CAAD,CAAnB,CAAlB;AACA,gBAAIwF,IAAI,CAACC,GAAL,CAASoC,EAAE,GAAGF,IAAI,CAACD,CAAnB,KAAyBE,KAAK,CAACF,CAAnC,EACI,KAAKR,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACJ,iBAAKY,SAAL,iBAA6BmC,OAAO,CAACvB,EAAD,CAApC,gBAAmDuB,OAAO,CACtDzB,IAAI,CAACD,CADiD,CAA1D,iBAEa0B,OAAO,CAACxB,KAAK,CAACF,CAAP,CAFpB;AAGA;AACH;;AACD,aAAK,SAAL;AACA,aAAK,WAAL;AACA,aAAK,WAAL;AAAkB;AACd,gBAAM2B,QAAQ,GAAG,KAAKlC,iBAAL,CAAuB3F,IAAvB,CACbiG,CAAC,IAAIA,CAAC,CAAC/D,CAAF,KAAQ1D,IAAI,CAAC,CAAD,CADJ,CAAjB;;AAGA,gBAAMsJ,QAAQ,GAAG,KAAKzE,GAAL,CAASpB,0BAAO,CAACzD,IAAI,CAAC,CAAD,CAAL,CAAhB,CAAjB;AACA,gBAAMmG,MAAM,GACRmD,QAAQ,IACRD,QAAQ,CAAC3B,CADT,KAEEI,OAAO,CAAC/H,EAAR,KAAe,SAAf,IAA4BuJ,QAAQ,KAAKD,QAAQ,CAAC3B,CAAnD,IACII,OAAO,CAAC/H,EAAR,KAAe,WAAf,IAA8BuJ,QAAQ,GAAGD,QAAQ,CAAC3B,CADtD,IAEII,OAAO,CAAC/H,EAAR,KAAe,WAAf,IAA8BuJ,QAAQ,GAAGD,QAAQ,CAAC3B,CAJvD,IAKMzB,mBAAmB,CAACI,MAL1B,GAMMJ,mBAAmB,CAACG,MAP9B;AAQA,iBAAKc,OAAL,GAAef,MAAf;AACAkD,YAAAA,QAAQ,CAAC3B,CAAT,GAAa4B,QAAb;AACA;AACH;;AACD,aAAK,aAAL;AACA,aAAK,aAAL;AAAoB;AAChB,gBAAMD,SAAQ,GAAG,KAAKH,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AACA,gBAAMuJ,QAAQ,GAAG,KAAKL,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AACA,gBAAMsJ,SAAQ,GAAG,KAAKzE,GAAL,CAASpB,0BAAO,CAACzD,IAAI,CAAC,CAAD,CAAL,CAAhB,CAAjB;;AACA,gBAAI8H,OAAO,CAAC/H,EAAR,KAAe,aAAnB,EAAkC;AAC9B,kBAAIuJ,SAAQ,IAAID,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAAtC,EAAyC;AACrC,qBAAKR,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACH,eAFD,MAEO,IACHiD,SAAQ,IAAID,SAAQ,CAAC3B,CAArB,IACA4B,SAAQ,GAAGD,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAF9B,EAGL;AACE,qBAAKR,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;AACA,qBAAKa,SAAL,iBAA6BmC,OAAO,CAChCE,SADgC,CAApC,gBAEYF,OAAO,CAACC,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAAvB,CAFnB;AAGH,eARM,MAQA;AACH,qBAAKR,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;AACH;AACJ,aAdD,MAcO;AACH,kBAAIkD,SAAQ,IAAID,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAAtC,EAAyC;AACrC,qBAAKR,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACA,qBAAKY,SAAL,GAAiB,WAAjB;AACH,eAHD,MAGO,IACHqC,SAAQ,IAAID,SAAQ,CAAC3B,CAArB,IACA4B,SAAQ,GAAGD,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAF9B,EAGL;AACE,qBAAKR,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;AACA,qBAAKa,SAAL,iBAA6BmC,OAAO,CAChCE,SADgC,CAApC,eAEWF,OAAO,CAACC,SAAQ,CAAC3B,CAAT,GAAa6B,QAAQ,CAAC7B,CAAvB,CAFlB;AAGH,eARM,MAQA;AACH,qBAAKR,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;AACH;AACJ;;AACD;AACH;;AACD,aAAK,WAAL;AACA,aAAK,aAAL;AAAoB;AAChB,iBAAKc,OAAL,GAAejB,mBAAmB,CAACG,MAAnC;;AACA,gBAAMkD,UAAQ,GAAG,KAAKzE,GAAL,CAASpB,0BAAO,CAACzD,IAAI,CAAC,CAAD,CAAL,CAAhB,CAAjB;;AACA,gBAAMwJ,UAAU,GAAG,KAAKN,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAnB;AACA,gBAAMyJ,QAAQ,GAAG,KAAKP,QAAL,CAAclJ,IAAI,CAAC,CAAD,CAAlB,CAAjB;;AACA,gBAAI,KAAKoH,cAAL,KAAwBlH,SAA5B,EAAuC;AACnC,mBAAKkH,cAAL,GAAsBkC,UAAtB;AACH,aAFD,MAEO;AACH,kBACIA,UAAQ,KACR,KAAKlC,cAAL,IACKU,OAAO,CAAC/H,EAAR,IAAc,WAAd,GAA4B,CAA5B,GAAgC,CAAC,CADtC,CAFJ,EAKI,KAAKqH,cAAL,GAAsBkC,UAAtB;;AACJ,kBAAI,KAAKlC,cAAL,KAAwBqC,QAAQ,CAAC/B,CAArC,EAAwC;AACpC,qBAAKR,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACH;AACJ;;AACD,gBAAI,KAAKe,cAAL,IAAuBlH,SAA3B,EAAsC;AAClC,mBAAK+G,SAAL,GACIa,OAAO,CAAC/H,EAAR,IAAc,WAAd,aACcqJ,OAAO,CAACI,UAAU,CAAC9B,CAAZ,CADrB,eAC6C0B,OAAO,CAC1C,KAAKhC,cADqC,CADpD,aAIcgC,OAAO,CAACI,UAAU,CAAC9B,CAAZ,CAJrB,iBAI+C0B,OAAO,CAC5C,KAAKhC,cADuC,CAL1D;AAQH;;AACD;AACH;;AACD,aAAK,QAAL;AAAe;AACX,gBAAI,KAAKN,UAAL,CAAgB4C,QAApB,EAA8B;AAC1B,kBAAM7B,GAAE,GAAG,KAAKf,UAAL,CAAgB6C,YAAhB,EAAX;;AACA,kBAAI9B,GAAE,KAAK,KAAKR,eAAL,CAAqB,CAArB,CAAX,EAAoC;AAChC,qBAAKA,eAAL,CAAqBuC,KAArB;;AACA,oBAAI,KAAKvC,eAAL,CAAqBpC,MAArB,KAAgC,CAApC,EACI,KAAKiC,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACP,eAJD,MAIO;AACH,qBAAKa,OAAL,GAAejB,mBAAmB,CAACK,MAAnC;AACH;;AACD,mBAAKW,SAAL,kBAA8BY,GAA9B,uBAAkD,KAAKR,eAAvD;AACH,aAVD,MAUO;AACH,mBAAKJ,SAAL,yCAAqD,KAAKI,eAA1D;AACH;;AACD;AACH;;AACD,aAAK,YAAL;AACA,aAAK,WAAL;AAAkB;AACd,gBAAMrF,KAAK,GAAGhC,IAAI,CAAC,CAAD,CAAlB;AACA,iBAAKiH,SAAL,0BAAsCjF,KAAK,CAACP,IAA5C;;AACA,gBAAI,KAAKqF,UAAL,CAAgB4C,QAApB,EAA8B;AAC1B,kBAAM7B,IAAE,GAAG,KAAKf,UAAL,CAAgB6C,YAAhB,EAAX;;AACA,kBAAI9B,IAAE,KAAK7F,KAAK,CAACP,IAAjB,EAAuB;AACnB,oBAAIqG,OAAO,CAAC/H,EAAR,KAAe,WAAnB,EACI,KAAKmH,OAAL,GAAejB,mBAAmB,CAACK,MAAnC;AACP,eAHD,MAGO;AACH;AACA,qBAAKY,OAAL,GAAe,KAAK8B,eAAL,CACX,KAAKjC,OAAL,CAAaJ,IAAb,CAAkB1C,SAAlB,CAA4B,CAA5B,CADW,CAAf;AAGH;AACJ,aAXD,MAWO;AACH,mBAAKgD,SAAL,4BAAwC,KAAKA,SAA7C;AACH;;AACD;AACH;;AACD,aAAK,QAAL;AAAe;AACX,gBAAMgC,KAAI,GAAG,IAAIrE,8BAAJ,CACT,KAAKC,GADI,EAET,KAAKC,QAAL,CAAc,KAAKqC,iBAAnB,CAFS,CAAb;;AAIA,gBAAMU,IAAE,GAAGoB,KAAI,CAAC9D,SAAL,CAAenF,IAAI,CAAC,CAAD,CAAnB,CAAX;;AACA,gBAAM6J,GAAG,GAAG7J,IAAI,CAAC,CAAD,CAAhB;AACA,kBAAM,KAAK8G,UAAL,CAAgBgD,iBAAhB,CAAkCvH,kBAAlC,CACFsH,GAAG,CAACpI,IADF,EAEFoG,IAFE,CAAN;AAIA,iBAAKX,OAAL,GAAejB,mBAAmB,CAACI,MAAnC;AACA,iBAAKY,SAAL,cAA0BY,IAA1B,qBAA4CgC,GAAG,CAACpI,IAAhD;AACH;AAhKL;;AAmKA,eAAS2H,OAAT,CAAiB1B,CAAjB,EAA4B;AACxB,eAAO3B,oCAAkB,CAAC2B,CAAD,EAAI,CAAJ,CAAzB;AACH;AACJ;;;;;;;;;;;SAlUD,eAAoB;AAChB,aAAO,KAAKV,OAAZ;AACH;;;SACD,eAAoB;AAChB,aAAO,KAAKE,OAAZ;AACH;;;SACD,eAAsB;AAClB,aAAO,KAAKD,SAAZ;AACH;;;SAED,eAAkB;AACd,aAAQvD,CAAD,IAAuC;AAC1C,eAAO,KAAKoD,UAAL,CAAgBgD,iBAAhB,CAAkCC,MAAlC,CAAyCrG,CAAzC,CAAP;AACH,OAFD;AAGH;;;;;;AA4TE,IAAMsG,mBAAb;AAAA;;AAKI,+BACqBlD,UADrB,EAEqBC,OAFrB,EAGE;AAAA;;AACE;AADF,UAPMG,OAON,GAPgBjB,mBAAmB,CAACM,QAOpC;AAAA,UANM0D,OAMN,GANiC;AAAEC,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,QAAQ,EAAE;AAAzB,KAMjC;AAAA,UALMC,iBAKN,GAL8C,IAK9C;AAAA,UAFmBtD,UAEnB,GAFmBA,UAEnB;AAAA,UADmBC,OACnB,GADmBA,OACnB;AAAA;AAED;;AAVL;;AAAA,UAoDIsD,KApDJ,GAoDI,iBAAQ;AACJ,SAAKlE,MAAL,GAAcF,mBAAmB,CAACM,QAAlC;AACA,SAAK+D,MAAL,GAAc;AAAEJ,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,QAAQ,EAAE;AAAzB,KAAd;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACH,GAxDL;;AAAA,UA0DUG,UA1DV;AAAA,0DA0DI,aAAmB;AACf,WAAKpE,MAAL,GAAcF,mBAAmB,CAACG,MAAlC;AACA,WAAKgE,iBAAL,GAAyBlK,SAAzB;AACA,YAAM,KAAKsK,cAAL,EAAN;AACH,KA9DL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAgEUA,cAhEV;AAAA,8DAgEI,aAAuB;AACnB,UAAI,KAAKC,QAAT,EAAmB;AACf,YAAI,CAAC,KAAKL,iBAAV,EAA6B;AACzB,eAAKA,iBAAL,GAAyB,IAAIvD,kBAAJ,CACrB,KAAKC,UADgB,EAErB,KAAKC,OAFgB,CAAzB;;AAIA,cAAI;AACA,iBAAKqD,iBAAL,CAAuB9C,KAAvB;AACH,WAFD,CAEE,OAAO5D,CAAP,EAAU;AACR;AACA,iBAAK0G,iBAAL,GAAyBlK,SAAzB;AACH;AACJ;;AACD,YAAI,KAAKkK,iBAAT,EAA4B;AACxB,cAAI;AACA,kBAAM,KAAKA,iBAAL,CAAuBjB,aAAvB,EAAN;AACA,gBAAMuB,SAA0B,GAAG;AAC/BR,cAAAA,OAAO,EAAE,KAAKE,iBAAL,CAAuBnK,MADD;AAE/BkK,cAAAA,QAAQ,EAAE,KAAKC,iBAAL,CAAuBD;AAFF,aAAnC;AAIA,iBAAKG,MAAL,GAAcI,SAAd;AACA,gBACI,KAAKN,iBAAL,CAAuBjE,MAAvB,KACAF,mBAAmB,CAACO,iBAFxB,EAII,KAAKL,MAAL,GAAcF,mBAAmB,CAACO,iBAAlC,CAJJ,KAKK,MAAM,KAAKmE,WAAL,CAAiB,KAAKP,iBAAL,CAAuBjE,MAAxC,CAAN;AACR,WAbD,CAaE,OAAOzC,CAAP,EAAU,CACR;AACH;AACJ;AACJ;AACJ,KAjGL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAmGUkH,WAnGV;AAAA,2DAmGI,aAAoB;AAChB,YAAM,KAAKD,WAAL,CAAiB1E,mBAAmB,CAACK,MAArC,CAAN;AACH,KArGL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAuGUqE,WAvGV;AAAA,2DAuGI,WAAkBE,CAAlB,EAA0C;AACtC,UACI,KAAKJ,QAAL,KACCI,CAAC,KAAK5E,mBAAmB,CAACK,MAA1B,IACGuE,CAAC,KAAK5E,mBAAmB,CAACI,MAF9B,CADJ,EAIE;AACE,aAAKF,MAAL,GAAc0E,CAAd;AACA,cAAM,KAAK/D,UAAL,CAAgBgE,kBAAhB,EAAN;AACH;AACJ,KAhHL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,SAYI,eAAa;AACT,aAAO,KAAK5D,OAAZ;AACH,KAdL;AAAA,SAgBI,aAAW2D,CAAX,EAAmC;AAC/B,UAAIA,CAAC,IAAI,KAAK3D,OAAd,EAAuB;AACnB,aAAKA,OAAL,GAAe2D,CAAf;AACA,aAAKE,IAAL,CAAUvK,yBAAV;AACH;AACJ;AArBL;AAAA;AAAA,SAuBI,eAA6B;AACzB,aACI,KAAK2F,MAAL,KAAgBF,mBAAmB,CAACK,MAApC,IACA,KAAKH,MAAL,KAAgBF,mBAAmB,CAACI,MAFxC;AAIH;AA5BL;AAAA;AAAA,SA8BI,eAAwB;AACpB,aACI,KAAKF,MAAL,KAAgBF,mBAAmB,CAACG,MAApC,IACA,KAAKD,MAAL,KAAgBF,mBAAmB,CAACO,iBAFxC;AAIH;AAnCL;AAAA;AAAA,SAqCI,eAAa;AACT,aAAO,KAAKyD,OAAZ;AACH,KAvCL;AAAA,SAyCI,aAAWzG,KAAX,EAAmC;AAC/B,UACI,CAAC,KAAKyG,OAAN,IACA,KAAKA,OAAL,CAAaC,OAAb,KAAyB1G,KAAK,CAAC0G,OAD/B,IAEA,KAAKD,OAAL,CAAaE,QAAb,KAA0B3G,KAAK,CAAC2G,QAHpC,EAIE;AACE,aAAKF,OAAL,GAAezG,KAAf;AACA,aAAKuH,IAAL,CAAUvK,yBAAV;AACH;AACJ;AAlDL;;AAAA;AAAA,EAAyCsF,2BAAzC;AAmHO,IAAMkF,YAAb;AAAA;;AAMI,wBACoBlB,iBADpB,EAEqBmB,QAFrB,EAGE;AAAA;;AACE;AADF,WARM/D,OAQN,GARgBlB,YAAY,CAACO,QAQ7B;AAAA,WAFkBuD,iBAElB,GAFkBA,iBAElB;AAAA,WADmBmB,QACnB,GADmBA,QACnB;AAEE,WAAKC,QAAL,GAAgBD,QAAQ,CAACE,YAAT,CAAsBtH,GAAtB,CACZuH,CAAC,IAAI,IAAIpB,mBAAJ,mDAA8BoB,CAA9B,CADO,CAAhB;AAFF;AAKD;;AAdL;;AAAA,UAgBIf,KAhBJ,GAgBI,iBAAQ;AACJ,QAAI,KAAKlE,MAAL,KAAgBH,YAAY,CAACO,QAAjC,EAA2C;AACvC,WAAKW,OAAL,GAAelB,YAAY,CAACO,QAA5B;AACA,WAAK8E,aAAL,GAAqBnL,SAArB;AACA,WAAKoL,aAAL,GAAqBpL,SAArB;AACA,WAAKgL,QAAL,CAAchD,OAAd,CAAsBtB,CAAC,IAAIA,CAAC,CAACyD,KAAF,EAA3B;AACA,WAAKU,IAAL,CAAUvK,yBAAV;AACH;AACJ,GAxBL;;AAAA,UA0BU+J,UA1BV;AAAA,2DA0BI,aAAmB;AACf,WAAKF,KAAL;AACA,WAAKlE,MAAL,GAAcH,YAAY,CAACI,MAA3B;AACA,WAAKiF,aAAL,GAAqB,CAArB;AACH,KA9BL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAgCIE,IAhCJ,GAgCI,gBAAO;AACH,SAAKzB,iBAAL,CAAuByB,IAAvB;AACH,GAlCL;;AAAA,UAoCIC,MApCJ,GAoCI,kBAAS;AACL,SAAKC,MAAL,CAAYzF,YAAY,CAACM,MAAzB;AACH,GAtCL;;AAAA,UAkEImF,MAlEJ,GAkEI,gBAAOC,SAAP,EAAgC;AAC5B,QAAI,KAAKvF,MAAL,KAAgBH,YAAY,CAACI,MAAjC,EAAyC;AACrC,WAAKD,MAAL,GAAcuF,SAAd;AACH;AACJ,GAtEL;;AAAA,UAwEYC,eAxEZ,GAwEI,2BAA0B;AACtB,WAAO,KAAKN,aAAZ;AACH,GA1EL;;AAAA,UA4EkBO,eA5ElB;AAAA,+DA4EI,WAA8BC,KAA9B,EAA6C;AACzC,UAAI,KAAKR,aAAL,KAAuBQ,KAA3B,EAAkC;AAAA;;AAC9B,aAAKR,aAAL,GAAqBQ,KAArB;AACA,sCAAM,KAAKC,cAAX,yDAAM,qBAAqBvB,UAArB,EAAN;AACA,aAAKQ,IAAL,CAAUvK,yBAAV;AACH;AACJ,KAlFL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAoFiBgK,cApFjB;AAAA,+DAoFI,aAA8B;AAC1B,UAAI,KAAKrE,MAAL,KAAgBH,YAAY,CAACI,MAAjC,EAAyC;AAAA;;AACrC,uCAAM,KAAK0F,cAAX,0DAAM,sBAAqBtB,cAArB,EAAN;AACH;AACJ,KAxFL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UA0FiBuB,gBA1FjB;AAAA,gEA0FI,WAA8B/J,KAA9B,EAA6C;AACzC,UAAI,KAAKmE,MAAL,KAAgBH,YAAY,CAACI,MAAjC,EAAyC;AACrC,aAAKkF,aAAL,GAAqBtJ,KAArB;AACA,cAAM,KAAKwI,cAAL,EAAN;AACH;AACJ,KA/FL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAqGWb,YArGX,GAqGI,wBAAsB;AAClB,QAAMtE,GAAG,GAAG,KAAKiG,aAAjB;AACA,SAAKA,aAAL,GAAqBpL,SAArB;AACA,WAAOmF,GAAP;AACH,GAzGL;;AAAA,UA2GiByF,kBA3GjB;AAAA,kEA2GI,aAAkC;AAC9B,UAAI,KAAKa,eAAL,OAA2B,KAAKT,QAAL,CAAcjG,MAAd,GAAuB,CAAtD,EACI,KAAKwG,MAAL,CAAYvF,yBAAyB,CAAC,KAAK4F,cAAL,CAAoB3F,MAArB,CAArC,EADJ,KAEK,MAAM,KAAKyF,eAAL,CAAqB,KAAKD,eAAL,KAAyB,CAA9C,CAAN;AACR,KA/GL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,SAwCI,eAAa;AACT,aAAO,KAAKzE,OAAZ;AACH,KA1CL;AAAA,SA4CI,aAAW2D,CAAX,EAA4B;AACxB,UAAIA,CAAC,IAAI,KAAK3D,OAAd,EAAuB;AACnB,aAAKA,OAAL,GAAe2D,CAAf;AACA,aAAKE,IAAL,CAAUvK,yBAAV;AACH;AACJ;AAjDL;AAAA;AAAA,SAmDI,eAA6B;AACzB,aACI,KAAK2F,MAAL,KAAgBH,YAAY,CAACM,MAA7B,IACA,KAAKH,MAAL,KAAgBH,YAAY,CAACK,MAFjC;AAIH;AAxDL;AAAA;AAAA,SA0DI,eAAkB;AACd,aAAO,KAAK4E,QAAL,CAAce,WAArB;AACH;AA5DL;AAAA;AAAA,SA8DI,eAAa;AACT,aAAO,KAAKf,QAAL,CAAchL,MAArB;AACH;AAhEL;AAAA;AAAA,SAiGI,eAAsB;AAClB,aAAO,KAAKqL,aAAL,IAAsBpL,SAA7B;AACH;AAnGL;AAAA;AAAA,SAiHI,eAAqB;AACjB,aAAO,KAAKgL,QAAL,CAAc,KAAKG,aAAnB,CAAP;AACH;AAnHL;;AAAA;AAAA,EAAkCvF,2BAAlC;AAsHO,IAAMmG,mBAAb;AAAA;;AAKI,+BACoBhB,QADpB,EAEInK,OAFJ,EAGE;AAAA;;AACE,yCAAMA,OAAN;AADF,WAPMoL,UAON,GAPmB,CAAC,CAOpB;AAAA,WAFkBjB,QAElB,GAFkBA,QAElB;AAEE,WAAKkB,IAAL,GAAY,IAAItL,6BAAJ,CAAoBC,OAApB,CAAZ;AACA,WAAKsL,KAAL,GAAa,OAAKnB,QAAL,CAAcmB,KAAd,CAAoBvI,GAApB,CAAwB+C,CAAC,IAAI,IAAIoE,YAAJ,mDAAuBpE,CAAvB,CAA7B,CAAb;;AACA,WAAKqE,QAAL,CAAcmB,KAAd,CAAoBlE,OAApB,CAA4BtB,CAAC,IAAI;AAC7BA,MAAAA,CAAC,CAACyF,MAAF,CAASnE,OAAT,CAAiB2C,CAAC,IAAI;AAClB,YAAM9I,SAAS,GAAG8I,CAAC,CAACyB,MAAF,CAASzB,CAAC,CAAC0B,OAAF,CAAU,GAAV,IAAiB,CAA1B,CAAlB;;AACA,eAAKJ,IAAL,CAAUrK,aAAV,CAAwBC,SAAxB,mDAAmC,aAAY;AAC3C,cAAI;AAAA;;AACA,wCAAM,OAAKyK,WAAX,uDAAM,mBAAkBT,gBAAlB,CAAmChK,SAAnC,CAAN;AACH,WAFD,CAEE,OAAO2B,CAAP,EAAU,CACR;AACH;AACJ,SAND;AAOH,OATD;AAUAkD,MAAAA,CAAC,CAAC6F,SAAF,CAAYvE,OAAZ,CAAoB2C,CAAC,IAAI;AACrB,YAAM1J,OAAO,GAAG0J,CAAC,CAACyB,MAAF,CAASzB,CAAC,CAAC0B,OAAF,CAAU,GAAV,IAAiB,CAA1B,CAAhB;;AACA,eAAKJ,IAAL,CAAUjL,gBAAV,CAA2BC,OAA3B,mDAAoC,aAAY;AAC5C,cAAI;AAAA;;AACA,yCAAM,OAAKqL,WAAX,wDAAM,oBAAkBhC,cAAlB,EAAN;AACH,WAFD,CAEE,OAAO9G,CAAP,EAAU,CACR;AACH;AACJ,SAND;AAOH,OATD;AAUH,KArBD;;AAsBA,WAAK4D,KAAL;;AA1BF;AA2BD,GAnCL,CAqCI;;;AArCJ;;AAAA,UAsCWyC,MAtCX,GAsCI,gBAAcrG,CAAd,EAAsD;AAClD;AACA,WAAOxD,SAAP,CAFkD,CAEjC;AACpB,GAzCL,CA2CI;AA3CJ;;AAAA,UA4CiBqC,kBA5CjB;AAAA;AAAA;AAAA,kEA4CI,WAAgCpB,OAAhC,EAAiDwE,GAAjD,EAA2D;AACvD,YAAM,KAAKwG,IAAL,CAAU5J,kBAAV,CAA6BpB,OAA7B,EAAsCwE,GAAtC,CAAN;AACH,KA9CL;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,UAmEW+G,KAnEX,GAmEI,iBAAe;AACX,QAAMjF,CAAC,GAAG;AACNkF,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWnH,MADZ;AAEN2H,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,MAAM,EAAE,CAHF;AAINC,MAAAA,aAAa,EAAE;AAJT,KAAV;;AAMA,SAAK,IAAMC,IAAX,IAAmB,KAAKX,KAAxB,EAA+B;AAC3B,cAAQW,IAAI,CAAC5G,MAAb;AACI,aAAKH,YAAY,CAACM,MAAlB;AACImB,UAAAA,CAAC,CAACoF,MAAF;AACA;;AACJ,aAAK7G,YAAY,CAACK,MAAlB;AACIoB,UAAAA,CAAC,CAACmF,OAAF;AACA;;AACJ;AACInF,UAAAA,CAAC,CAACqF,aAAF;AARR;AAUH;;AACD,WAAOrF,CAAP;AACH,GAvFL;;AAAA,UAyFWH,KAzFX,GAyFI,iBAAe;AACX,SAAK8E,KAAL,CAAWlE,OAAX,CAAmBtB,CAAC,IAAIA,CAAC,CAACyD,KAAF,EAAxB;AACA,SAAK2C,SAAL,GAAiB,CAAjB;AACH,GA5FL;;AAAA,UA8FWzB,IA9FX,GA8FI,gBAAc;AACV,SAAKyB,SAAL;AACH,GAhGL;;AAAA;AAAA;AAAA,SAgDI,eAAwB;AACpB,aAAO,KAAKd,UAAZ;AACH,KAlDL;AAAA,SAoDI,aAAsBL,KAAtB,EAAqC;AACjC,UAAI,KAAKK,UAAL,KAAoBL,KAAxB,EAA+B;AAC3B;AACA,YAAMoB,EAAE,GAAG,KAAKT,WAAhB;;AACA,YAAIS,EAAJ,EAAQ;AACJ,cAAIA,EAAE,CAAC9G,MAAH,KAAcH,YAAY,CAACI,MAA/B,EAAuC;AACnC6G,YAAAA,EAAE,CAACzB,MAAH;AACH;AACJ,SAP0B,CAQ3B;;;AACA,aAAKU,UAAL,GAAkBL,KAAlB;AACA,aAAKd,IAAL,CAAUvK,yBAAV;AACH;AACJ;AAjEL;AAAA;AAAA,SAkGI,eAAkB;AACd,aAAO,KAAK4L,KAAL,CAAW,KAAKF,UAAhB,CAAP;AACH,KApGL;AAAA,SAsGI,aAAgBa,IAAhB,EAAoC;AAChC,UAAMlB,KAAK,GAAG,KAAKO,KAAL,CAAWG,OAAX,CAAmBQ,IAAnB,CAAd;AACA,UAAIlB,KAAK,GAAG,CAAC,CAAb,EAAgB,KAAKmB,SAAL,GAAiBnB,KAAjB;AACnB;AAzGL;;AAAA;AAAA,EAAyCtL,oCAAzC;;;;;;;;;;;;;;;;;;ACjnBA;AACA;CAgBA;;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASqO,cAAT,CAAwBC,KAAxB,EAAuD;AACnD,MAAM;AAAE9B,IAAAA;AAAF,MAAW8B,KAAjB;AACA,MAAM1I,MAAM,GAAGqI,4BAAS,CAACzB,IAAD,EAAOnG,CAAC,IAAIA,CAAC,CAACT,MAAd,CAAxB;;AAEA,UAAQA,MAAR;AACI,SAAKH,mBAAL;AACI,0BAAO,oBAAC,+BAAD;AAAsB,aAAK,EAAC;AAA5B,QAAP;;AACJ,SAAKA,mBAAL;AACI,0BAAO,oBAAC,oBAAD;AAAW,aAAK,EAAC;AAAjB,QAAP;;AACJ,SAAKA,mBAAL;AACI,0BAAO,oBAAC,0BAAD;AAAiB,aAAK,EAAC;AAAvB,QAAP;;AACJ;AACI,0BAAO,oBAAC,6BAAD;AAAoB,aAAK,EAAC;AAA1B,QAAP;AARR;AAUH;;AAED,SAAS8I,YAAT,CAAsBD,KAAtB,EAIG;AACC,MAAM;AAAE9B,IAAAA,IAAF;AAAQP,IAAAA,WAAR;AAAqBuC,IAAAA;AAArB,MAAsCF,KAA5C;AACA,MAAM7C,WAAW,GAAGwC,4BAAS,CAACzB,IAAD,EAAOnG,CAAC,IAAIA,CAAC,CAACoF,WAAd,CAA7B;AACA,MAAMgD,QAAQ,GAAGjC,IAAI,KAAKP,WAA1B;;AACA,MAAMyC,gBAAgB,GAAG,MAAMF,YAAY,CAAChC,IAAD,CAA3C;;AAEA,sBACI,oBAAC,uBAAD;AAAU,YAAQ,EAAEiC,QAApB;AAA8B,UAAM,MAApC;AAAqC,WAAO,EAAEC;AAA9C,kBACI,oBAAC,2BAAD,qBACI,oBAAC,cAAD;AAAgB,QAAI,EAAElC;AAAtB,IADJ,CADJ,eAII,oBAAC,2BAAD;AAAc,WAAO,EAAEf;AAAvB,IAJJ,CADJ;AAQH;;AAED,SAASkD,QAAT,CAAkBL,KAAlB,EAIG;AACC,MAAM;AAAE/H,IAAAA,UAAF;AAAc0F,IAAAA,WAAd;AAA2BuC,IAAAA;AAA3B,MAA4CF,KAAlD;AACA,MAAM;AAAEzC,IAAAA;AAAF,MAAYtF,UAAlB;AACA,MAAM4F,KAAK,GAAG8B,4BAAS,CAAC1H,UAAD,EAAaW,CAAC,IAAIA,CAAC,CAACiF,KAAF,EAAlB,CAAvB;AAEA,sBACI,oBAAC,mBAAD,qBACI,oBAAC,0BAAD,qBACI,oBAAC,mBAAD;AACI,SAAK,EAAE,IADX;AAEI,aAAS,eACL,oBAAC,4BAAD,QACQA,KAAK,CAACC,KADd,gBAC8BD,KAAK,CAACE,OADpC,kBACwDF,KAAK,CAACG,MAD9D;AAHR,KAQKT,KARL,aAQKA,KARL,uBAQKA,KAAK,CAAEvI,GAAP,CAAW,CAACkJ,IAAD,EAAOtE,CAAP,kBACR,oBAAC,YAAD;AACI,OAAG,EAAEA,CADT;AAEI,QAAI,EAAEsE,IAFV;AAGI,eAAW,EAAEP,WAHjB;AAII,gBAAY,EAAEuC;AAJlB,IADH,CARL,CADJ,CADJ,CADJ;AAuBH;;AAED,SAASI,iBAAT,CAA2BN,KAA3B,EAAoE;AAChE,MAAM;AAAE9H,IAAAA;AAAF,MAAc8H,KAApB;AACA,MAAM1I,MAAM,GAAGqI,4BAAS,CAACzH,OAAD,EAAUqE,CAAC,IAAIA,CAAC,CAACjF,MAAjB,CAAxB;;AAEA,UAAQA,MAAR;AACI,SAAKF,0BAAL;AACA,SAAKA,qCAAL;AACI,0BAAO,oBAAC,+BAAD;AAAsB,aAAK,EAAC;AAA5B,QAAP;;AACJ,SAAKA,0BAAL;AACI,0BAAO,oBAAC,oBAAD;AAAW,aAAK,EAAC;AAAjB,QAAP;;AACJ,SAAKA,0BAAL;AACI,0BAAO,oBAAC,0BAAD;AAAiB,aAAK,EAAC;AAAvB,QAAP;;AACJ;AACI,0BAAO,oBAAC,6BAAD;AAAoB,aAAK,EAAC;AAA1B,QAAP;AATR;AAWH;;AAED,SAASmJ,eAAT,CAAyBP,KAAzB,EAAkE;AAC9D,MAAM;AAAE9H,IAAAA;AAAF,MAAc8H,KAApB;AACA,MAAM;AAAE3E,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBqE,4BAAS,CAACzH,OAAD,EAAUqE,CAAC,IAAIA,CAAC,CAACd,MAAjB,CAAvC;AACA,MAAMnE,MAAM,GAAGqI,4BAAS,CAACzH,OAAD,EAAUqE,CAAC,IAAIA,CAAC,CAACjF,MAAjB,CAAxB;;AACA,MAAMkJ,YAAY,GAAIlJ,MAAD,IAAiC,MAClDY,OAAO,CAAC0E,MAAR,CAAetF,MAAf,CADJ;;AAEA,sBACI,uDACI,oBAAC,uBAAD;AAAU,YAAQ,EAAEA,MAAM,KAAKF,0BAA0BG;AAAzD,kBACI,oBAAC,2BAAD,qBACI,oBAAC,iBAAD;AAAmB,WAAO,EAAEW;AAA5B,IADJ,CADJ,eAII,oBAAC,2BAAD;AACI,WAAO,EAAEmD,OADb;AAEI,aAAS,EAAEC;AAFf,IAJJ,CADJ,EAUKhE,MAAM,KAAKF,qCAAX,iBACG,oBAAC,uBAAD,qBAEI,oBAAC,+CAAD,qBACI,oBAAC,mBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,oBAAC,mBAAD;AAAM,QAAI;AAAV,kBAAW,oBAAC,qBAAD;AACP,WAAO,EAAC,UADD;AAEP,WAAO,EAAEoJ,YAAY,CAACpJ,0BAAD;AAFd,WAAX,CADJ,eAQI,oBAAC,mBAAD;AAAM,QAAI;AAAV,kBACI,oBAAC,qBAAD;AACI,WAAO,EAAC,UADZ;AAEI,WAAO,EAAEoJ,YAAY,CAACpJ,0BAAD;AAFzB,UADJ,CARJ,CADJ,CAFJ,CAXR,CADJ;AAsCH;;AAED,SAASqJ,UAAT,CAAoBT,KAApB,EAAmD;AAC/C,MAAM;AAAE9B,IAAAA;AAAF,MAAW8B,KAAjB;AACA,MAAM;AAAE3D,IAAAA;AAAF,MAAe6B,IAArB;AACA,MAAM5G,MAAM,GAAGqI,4BAAS,CAACzB,IAAD,EAAOnG,CAAC,IAAIA,CAAC,CAACT,MAAd,CAAxB;;AACA,MAAMoJ,aAAa,GAAG,MAAMxC,IAAI,CAACzF,KAAL,EAA5B;;AACA,MAAMkI,UAAU,GAAG,MAAMzC,IAAI,CAACxB,IAAL,EAAzB,CAL+C,CAM/C;;;AACA6B,EAAAA,mBAAS,CAAC,MAAML,IAAI,CAACzF,KAAL,EAAP,EAAqB,CAACyF,IAAD,CAArB,CAAT;AAEA,sBACI,oBAAC,mBAAD,qBACI,oBAAC,0BAAD,qBACI,oBAAC,yBAAD;AAAY,WAAO,EAAC;AAApB,UADJ,eAEI,oBAAC,kBAAD;AAAK,KAAC,EAAE;AAAR,kBACI,oBAAC,yBAAD;AAAY,WAAO,EAAC;AAApB,KAA6BA,IAAI,CAAC9M,MAAlC,CADJ,CAFJ,eAKI,oBAAC,yBAAD;AAAY,WAAO,EAAC;AAApB,YALJ,eAMI,oBAAC,mBAAD;AAAM,SAAK,EAAE;AAAb,KACKiL,QAAQ,CAACrH,GAAT,CAAa,CAAC6C,GAAD,EAAM+B,CAAN,kBACV,oBAAC,eAAD;AAAiB,OAAG,EAAEA,CAAtB;AAAyB,WAAO,EAAE/B;AAAlC,IADH,CADL,CANJ,EAWKP,MAAM,KAAKH,mBAAX,iBACG,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,mBAZR,EAcKG,MAAM,KAAKH,mBAAX,iBACG,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,mBAfR,CADJ,eAmBI,oBAAC,0BAAD,qBACI,oBAAC,qBAAD;AACI,WAAO,EACHG,MAAM,KAAKH,mBAAX,GACM,UADN,GAEM,WAJd;AAMI,SAAK,EACDG,MAAM,KAAKH,mBAAX,GAAiC,SAAjC,GAA6C9F,SAPrD;AASI,WAAO,EAAEsP;AATb,YADJ,eAcI,oBAAC,qBAAD;AAAQ,WAAO,EAAC,UAAhB;AAA2B,WAAO,EAAED;AAApC,eAdJ,CAnBJ,CADJ;AAwCH;;AAEc,SAASE,iBAAT,CAA2BZ,KAA3B,EAGZ;AACC,MAAM;AACF/N,IAAAA,OADE;AAEF4O,IAAAA,WAAW,GAAGf,+CAA2B,CAAC7N,OAAO,CAAC6O,YAAT;AAFvC,MAGFd,KAHJ;AAIA,MAAMe,OAAO,GAAGzC,qBAAW,CACvBrM,OAAO,IAAI4O,WAAW,IAAI,IAAIzD,mBAAJ,CAAwByD,WAAxB,EAAqC5O,OAArC,CADH,EAEvB,CAACA,OAAD,EAAU4O,WAAV,CAFuB,CAA3B;AAIA,MAAM5I,UAAU,GAAGuG,mCAAgB,CAACvM,OAAD,EAAU8O,OAAV,CAAnC;AACA,MAAMpD,WAAW,GAAGgC,4BAAS,CAAC1H,UAAD,EAAaF,CAAC,IAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAE4F,WAArB,CAA7B;;AACA,MAAMyC,gBAAgB,GAAIlC,IAAD,IAAwB;AAC7CjG,IAAAA,UAAU,CAAC0F,WAAX,GAAyBO,IAAzB;AACH,GAFD;;AAIA,MAAI,CAAC2C,WAAL,EACI,oBACI,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,wDACoD,GADpD,EAEK5O,OAAO,CAACQ,aAAR,CAAsBG,IAF3B,MADJ;AAOJ,MAAI,CAACqF,UAAL,EAAiB,oBAAO,oBAAC,8BAAD,OAAP;AAEjB,sBACI,oBAAC,mBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,oBAAC,mBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,oBAAC,QAAD;AACI,cAAU,EAAEA,UADhB;AAEI,eAAW,EAAE0F,WAFjB;AAGI,gBAAY,EAAEyC;AAHlB,IADJ,CADJ,eAQI,oBAAC,mBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,KACKzC,WAAW,gBAAG,oBAAC,UAAD;AAAY,QAAI,EAAEA;AAAlB,IAAH,gBAAuC,oBAAC,oBAAD;AAAO,YAAQ,EAAE;AAAjB,qCADvD,CARJ,EAaK1L,OAAO,iBACJ,oBAAC,mBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,oBAAC,8BAAD;AACI,cAAU,EAAE,IADhB;AAEI,cAAU,EAAE,IAFhB;AAGI,UAAM,EAAEA,OAAO,CAAC+O;AAHpB,IADJ,CAdR,CADJ;AAyBH;;;;;;;;;;;;AChRD;AACA;AAUe,SAASI,kBAAT,CAA4BC,SAA5B,EAAiE;AAC5E,MAAM;AAAEC,IAAAA;AAAF,MAAiBL,iDAAU,CAACC,0DAAD,CAAjC;;AAEA,MAAIG,SAAS,KAAKhQ,SAAlB,EAA6B;AACzB,YAAQgQ,SAAR;AACI,WAAK,CAAL;AACA,WAAK,CAAL;AAAQ,eAAO;AAAEE,UAAAA,EAAE,EAAE,EAAN;AAAUC,UAAAA,EAAE,EAAE,CAAd;AAAiBC,UAAAA,EAAE,EAAE,CAArB;AAAwBC,UAAAA,EAAE,EAAE,CAA5B;AAA+BC,UAAAA,EAAE,EAAE;AAAnC,SAAP;;AACR,WAAK,CAAL;AAAQ,eAAO;AAAEJ,UAAAA,EAAE,EAAE,EAAN;AAAUC,UAAAA,EAAE,EAAE,CAAd;AAAiBC,UAAAA,EAAE,EAAE,CAArB;AAAwBC,UAAAA,EAAE,EAAE,CAA5B;AAA+BC,UAAAA,EAAE,EAAE;AAAnC,SAAP;AAHZ;AAKH;;AAED,MAAIL,UAAU,IAAIH,uEAAlB,EACI,OAAO;AAAEI,IAAAA,EAAE,EAAE,EAAN;AAAUE,IAAAA,EAAE,EAAE,CAAd;AAAiBD,IAAAA,EAAE,EAAE,CAArB;AAAwBE,IAAAA,EAAE,EAAE,CAA5B;AAA+BC,IAAAA,EAAE,EAAE;AAAnC,GAAP,CADJ,KAEK,OAAO;AACRJ,IAAAA,EAAE,EAAE,EADI;AAERC,IAAAA,EAAE,EAAE,CAFI;AAGRC,IAAAA,EAAE,EAAE,CAHI;AAIRC,IAAAA,EAAE,EAAE,CAJI;AAKRC,IAAAA,EAAE,EAAE;AALI,GAAP;AAOR;;;;;;;;;;;;;AChCD;AAIe,SAASnD,gBAAT,CACXvM,OADW,EAEX8O,OAFW,EAGXe,IAHW,EAIb;AAAA,MADEA,IACF;AADEA,IAAAA,IACF,GAD+B,EAC/B;AAAA;;AACE,MAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBH,+CAAQ,CAAIxQ,SAAJ,CAApC;AAEAkN,EAAAA,gDAAS,CAAC,MAAM;AACZ,QAAMhC,CAAC,GAAGtK,OAAO,IAAI8O,OAAO,CAAC9O,OAAD,CAA5B;AACA+P,IAAAA,SAAS,CAACzF,CAAD,CAAT;AACA,WAAO,MAAMA,CAAN,aAAMA,CAAN,uBAAMA,CAAC,CAAE0F,OAAH,EAAb;AACH,GAJQ,GAILhQ,OAJK,wGAIO6P,IAJP,GAAT,CAHF,CAOyB;;AAEvB,SAAOC,MAAP;AACH","sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/HourglassEmpty.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayCircleFilled.js","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtestfuns.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/client.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","webpack://jacdac-docs/./jacdac-ts/src/test/testrunner.ts","webpack://jacdac-docs/./src/components/test/ServiceTestRunner.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useServiceClient.ts"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n}), 'HourglassEmpty');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z\"\n}), 'PlayCircleFilled');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdtest.d.ts\" />\n\nexport type JDTestFunctions =\n    | \"changes\"\n    | \"ask\"\n    | \"check\"\n    | \"increases\"\n    | \"decreases\"\n    | \"increasesBy\"\n    | \"decreasesBy\"\n    | \"stepsUpTo\"\n    | \"stepsDownTo\"\n    | \"events\"\n    | \"awaitEvent\"\n    | \"nextEvent\"\n    | \"assign\"\n    | \"closeTo\"\n\nexport function getTestCommandFunctions() {\n    return testFunctions.filter(f => f.context === \"command\" || f.context === \"either\")\n}\n\nexport function getTestExpressionFunctions() {\n    return testFunctions.filter(f => f.context === \"expression\" || f.context === \"either\")\n}\n\nconst testFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"changes\",\n        args: [\"register\"],\n        prompt: `check that {1} changes`,\n        context: \"command\",\n    },\n    {\n        id: \"ask\",\n        args: [],\n        prompt: undefined,\n        context: \"command\",\n    },\n    {\n        id: \"events\",\n        args: [\"events\"],\n        prompt: `check that events {1} are observed`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true] ],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"nextEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `next event must be {1}, then check {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"assign\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"check\",\n        args: [\"boolean\"],\n        prompt: `check that {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"increases\",\n        args: [\"register\"],\n        prompt: `check that {1} increases`,\n        context: \"command\",\n    },\n    {\n        id: \"decreases\",\n        args: [\"register\"],\n        prompt: `check that {1} decreases`,\n        context: \"command\",\n    },\n    {\n        id: \"increasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that  {1} (initially {1:val}) increases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"decreasesBy\",\n        args: [\"register\", \"number\"],\n        prompt: `check that {1} (initially {1:val}) decreases by {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsUpTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step up (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"stepsDownTo\",\n        args: [\"register\", \"number\"],\n        prompt: `{1} should step down (by ones) from {1:val} to {2:val}`,\n        context: \"command\",\n    },\n    {\n        id: \"start\",\n        args: [\"any\"],\n        prompt: undefined,\n        context: \"expression\",\n    },\n    {\n        id: \"closeTo\",\n        args: [\"number\", \"number\", \"number\"],\n        prompt: `evaluate {1} until it is close to {2:val}, as given by error {3:val}`,\n        context: \"either\",\n    },\n]\n","import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport JDService from \"../jdom/service\"\nimport JDRegister from \"../jdom/register\"\nimport JDEvent from \"../jdom/event\"\nimport { CHANGE, EVENT, REPORT_UPDATE, SystemReg } from \"../jdom/constants\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\n\nexport class VMServiceClient extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _reportUpdate: SMap<boolean> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(commandName: string, values: PackedValues) {\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, values: atomic[]) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], values)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, values: atomic[]) {\n        await jdreg?.sendSetPackedAsync(\n            jdreg.specification?.packFormat,\n            values,\n            true\n        )\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, [true])\n        }\n    }\n\n    public async lookupRegisterAsync(\n        root: string,\n        fld: string,\n        reportUpdate = false\n    ) {\n        if (root in this._registers) {\n            const register = this._registers[root]\n            if (reportUpdate && !this._reportUpdate[root]) {\n                this._reportUpdate[root] = true\n                this.mount(register.subscribe(REPORT_UPDATE, () => {}))\n            }\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(f => f.name === fld)\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n","export type GetValue = (\n    e: jsep.MemberExpression | string,\n    reportUpdate: boolean\n) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n    private reportUpdate = false\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression, reportUpdate = false) {\n        this.exprStack = []\n        this.reportUpdate = reportUpdate\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                await this.visitExpressionAsync(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else await this.visitExpressionAsync(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(\n                    e as jsep.MemberExpression,\n                    this.reportUpdate\n                )\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name, this.reportUpdate)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import {\n    getTestCommandFunctions,\n    JDTestFunctions,\n} from \"../../jacdac-spec/spectool/jdtestfuns\"\nimport { exprVisitor } from \"../../jacdac-spec/spectool/jdutils\"\n\nimport { CHANGE } from \"../jdom/constants\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport JDService from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { roundWithPrecision } from \"../jdom/utils\"\nimport { unparse, VMExprEvaluator, CallEvaluator, StartMap } from \"../vm/expr\"\nimport { VMServiceClient } from \"../vm/client\"\n\nexport enum JDTestStatus {\n    NotReady,\n    Active,\n    Passed,\n    Failed,\n}\n\nexport enum JDTestCommandStatus {\n    NotReady,\n    Active,\n    RequiresUserInput,\n    Passed,\n    Failed,\n}\n\nfunction commandStatusToTestStatus(status: JDTestCommandStatus) {\n    switch (status) {\n        case JDTestCommandStatus.Active:\n            return JDTestStatus.Active\n        case JDTestCommandStatus.Passed:\n            return JDTestStatus.Passed\n        case JDTestCommandStatus.Failed:\n            return JDTestStatus.Failed\n        case JDTestCommandStatus.NotReady:\n            return JDTestStatus.NotReady\n        case JDTestCommandStatus.RequiresUserInput:\n            return JDTestStatus.Active\n    }\n}\n\nfunction cmdToTestFunction(cmd: jdtest.TestCommandSpec) {\n    const id = (<jsep.Identifier>cmd.call.callee).name\n    return getTestCommandFunctions().find(t => t.id == id)\n}\n\nclass JDCommandEvaluator {\n    private _prompt = \"\"\n    private _progress = \"\"\n    private _status = JDTestCommandStatus.Active\n    private _startExpressions: StartMap = []\n    private _rangeComplete: number = undefined\n    private _eventsComplete: string[] = undefined\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {}\n\n    public get prompt() {\n        return this._prompt\n    }\n    public get status() {\n        return this._status\n    }\n    public get progress() {\n        return this._progress\n    }\n\n    private get env() {\n        return (e: jsep.MemberExpression | string) => {\n            return this.testRunner.serviceTestRunner.lookup(e)\n        }\n    }\n\n    private callEval(start: StartMap): CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => {\n            function getStartVal(e: jsep.Expression) {\n                return start.find(r => r.e === e).v\n            }\n            const callee = <jsep.Identifier>caller.callee\n            switch (callee.name) {\n                case \"start\":\n                    return getStartVal(caller.arguments[0])\n                case \"closeTo\": {\n                    const args = caller.arguments\n                    const goal = getStartVal(args[1])\n                    const error = getStartVal(args[2])\n                    ee.visitExpressionAsync(args[0])\n                    const ev = ee.pop()\n                    return ev >= goal - error && ev <= goal + error\n                }\n                default: // ERROR\n            }\n            return null\n        }\n    }\n\n    // TODO: define an interface between test runner and command evaluator\n    // TODO: so this all can be done modularly\n    public start() {\n        this._startExpressions = []\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        const startExprs: jsep.Expression[] = []\n        switch (testFun.id as JDTestFunctions) {\n            case \"check\":\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                exprVisitor(null, args, (p, ce: jsep.CallExpression) => {\n                    if (ce.type !== \"CallExpression\") return\n                    if ((<jsep.Identifier>ce.callee).name === \"start\")\n                        startExprs.push(ce.arguments[0])\n                    else if ((<jsep.Identifier>ce.callee).name === \"closeTo\") {\n                        startExprs.push(ce.arguments[1])\n                        startExprs.push(ce.arguments[2])\n                    }\n                })\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                startExprs.push(args[0])\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\":\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                startExprs.push(args[0])\n                startExprs.push(args[1])\n                break\n            }\n            case \"closeTo\": {\n                startExprs.push(args[1])\n                startExprs.push(args[2])\n                break\n            }\n            case \"assign\": {\n                startExprs.push(args[1])\n                break\n            }\n            case \"events\": {\n                const eventList = this.command.call\n                    .arguments[0] as jsep.ArrayExpression\n                this._eventsComplete = (\n                    eventList.elements as jsep.Identifier[]\n                ).map(id => id.name)\n                break\n            }\n        }\n        // evaluate the start expressions and store the results\n        startExprs.forEach(child => {\n            if (this._startExpressions.findIndex(r => r.e === child) < 0) {\n                const exprEval = new VMExprEvaluator(\n                    this.env,\n                    this.callEval([])\n                )\n                this._startExpressions.push({\n                    e: child,\n                    v: exprEval.evalAsync(child),\n                })\n            }\n        })\n        this.createPrompt()\n    }\n\n    private createPrompt() {\n        const testFun = cmdToTestFunction(this.command)\n        const replaceId = this.command.call.arguments.map((a, i) => {\n            return [`{${i + 1}}`, unparse(a)]\n        })\n        const replaceVal = this.command.call.arguments.map((a, i) => {\n            const aStart = this._startExpressions.find(r => r.e === a)\n            return [\n                `{${i + 1}:val}`,\n                aStart && aStart.v\n                    ? roundWithPrecision(aStart.v, 3).toString()\n                    : unparse(a),\n            ]\n        })\n        this._prompt =\n            testFun.id === \"ask\" || testFun.id === \"say\"\n                ? this.command.prompt.slice(0)\n                : testFun.prompt.slice(0)\n        replaceId.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n        replaceVal.forEach(\n            p => (this._prompt = this._prompt.replace(p[0], p[1]))\n        )\n    }\n\n    public setEvent(ev: string) {}\n\n    private checkExpression(e: jsep.Expression) {\n        const expr = new VMExprEvaluator(\n            this.env,\n            this.callEval(this._startExpressions)\n        )\n        return expr.evalAsync(e)\n            ? JDTestCommandStatus.Passed\n            : JDTestCommandStatus.Active\n    }\n\n    private getStart(e: jsep.Expression) {\n        return this._startExpressions.find(r => r.e === e)\n    }\n\n    public async evaluateAsync() {\n        const testFun = cmdToTestFunction(this.command)\n        const args = this.command.call.arguments\n        this._status = JDTestCommandStatus.Active\n        this._progress = \"\"\n        switch (testFun.id as JDTestFunctions) {\n            case \"ask\": {\n                this._status = JDTestCommandStatus.RequiresUserInput\n                break\n            }\n            case \"check\": {\n                this._status = this.checkExpression(args[0])\n                break\n            }\n            case \"closeTo\": {\n                const goal = this.getStart(args[1])\n                const error = this.getStart(args[2])\n                const expr = new VMExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = (await expr.evalAsync(args[0])) as number\n                if (Math.abs(ev - goal.v) <= error.v)\n                    this._status = JDTestCommandStatus.Passed\n                this._progress = `current: ${pretify(ev)}; goal: ${pretify(\n                    goal.v\n                )}; error: ${pretify(error.v)}`\n                break\n            }\n            case \"changes\":\n            case \"increases\":\n            case \"decreases\": {\n                const regSaved = this._startExpressions.find(\n                    r => r.e === args[0]\n                )\n                const regValue = this.env(unparse(args[0]))\n                const status =\n                    regValue &&\n                    regSaved.v &&\n                    ((testFun.id === \"changes\" && regValue !== regSaved.v) ||\n                        (testFun.id === \"increases\" && regValue > regSaved.v) ||\n                        (testFun.id === \"decreases\" && regValue < regSaved.v))\n                        ? JDTestCommandStatus.Passed\n                        : JDTestCommandStatus.Active\n                this._status = status\n                regSaved.v = regValue\n                break\n            }\n            case \"increasesBy\":\n            case \"decreasesBy\": {\n                const regSaved = this.getStart(args[0])\n                const amtSaved = this.getStart(args[1])\n                const regValue = this.env(unparse(args[0]))\n                if (testFun.id === \"increasesBy\") {\n                    if (regValue >= regSaved.v + amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    } else if (\n                        regValue >= regSaved.v &&\n                        regValue < regSaved.v + amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )}, goal: ${pretify(regSaved.v + amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                } else {\n                    if (regValue <= regSaved.v - amtSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                        this._progress = \"completed\"\n                    } else if (\n                        regValue <= regSaved.v &&\n                        regValue > regSaved.v - amtSaved.v\n                    ) {\n                        this._status = JDTestCommandStatus.Active\n                        this._progress = `current: ${pretify(\n                            regValue\n                        )} goal: ${pretify(regSaved.v - amtSaved.v)}`\n                    } else {\n                        this._status = JDTestCommandStatus.Active\n                    }\n                }\n                break\n            }\n            case \"stepsUpTo\":\n            case \"stepsDownTo\": {\n                this._status = JDTestCommandStatus.Active\n                const regValue = this.env(unparse(args[0]))\n                const beginSaved = this.getStart(args[0])\n                const endSaved = this.getStart(args[1])\n                if (this._rangeComplete === undefined) {\n                    this._rangeComplete = regValue\n                } else {\n                    if (\n                        regValue ===\n                        this._rangeComplete +\n                            (testFun.id == \"stepsUpTo\" ? 1 : -1)\n                    )\n                        this._rangeComplete = regValue\n                    if (this._rangeComplete === endSaved.v) {\n                        this._status = JDTestCommandStatus.Passed\n                    }\n                }\n                if (this._rangeComplete != undefined) {\n                    this._progress =\n                        testFun.id == \"stepsUpTo\"\n                            ? `from ${pretify(beginSaved.v)} up to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                            : `from ${pretify(beginSaved.v)} down to ${pretify(\n                                  this._rangeComplete\n                              )}`\n                }\n                break\n            }\n            case \"events\": {\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev === this._eventsComplete[0]) {\n                        this._eventsComplete.shift()\n                        if (this._eventsComplete.length === 0)\n                            this._status = JDTestCommandStatus.Passed\n                    } else {\n                        this._status = JDTestCommandStatus.Failed\n                    }\n                    this._progress = `got event ${ev}; remaining = [${this._eventsComplete}]`\n                } else {\n                    this._progress = `no events received; remaining = [${this._eventsComplete}]`\n                }\n                break\n            }\n            case \"awaitEvent\":\n            case \"nextEvent\": {\n                const event = args[0] as jsep.Identifier\n                this._progress = `waiting for event ${event.name}`\n                if (this.testRunner.hasEvent) {\n                    const ev = this.testRunner.consumeEvent()\n                    if (ev !== event.name) {\n                        if (testFun.id === \"nextEvent\")\n                            this._status = JDTestCommandStatus.Failed\n                    } else {\n                        // this._status = JDTestCommandStatus.Passed\n                        this._status = this.checkExpression(\n                            this.command.call.arguments[1]\n                        )\n                    }\n                } else {\n                    this._progress = `no events received; ${this._progress}`\n                }\n                break\n            }\n            case \"assign\": {\n                const expr = new VMExprEvaluator(\n                    this.env,\n                    this.callEval(this._startExpressions)\n                )\n                const ev = expr.evalAsync(args[1])\n                const reg = args[0] as jsep.Identifier\n                await this.testRunner.serviceTestRunner.writeRegisterAsync(\n                    reg.name,\n                    ev\n                )\n                this._status = JDTestCommandStatus.Passed\n                this._progress = `wrote ${ev} to register ${reg.name}`\n            }\n        }\n\n        function pretify(v: number) {\n            return roundWithPrecision(v, 3)\n        }\n    }\n}\n\nexport interface JDCommandOutput {\n    message: string\n    progress: string\n}\n\nexport class JDTestCommandRunner extends JDEventSource {\n    private _status = JDTestCommandStatus.NotReady\n    private _output: JDCommandOutput = { message: \"\", progress: \"\" }\n    private _commandEvaluator: JDCommandEvaluator = null\n\n    constructor(\n        private readonly testRunner: JDTestRunner,\n        private readonly command: jdtest.TestCommandSpec\n    ) {\n        super()\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestCommandStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestCommandStatus.Failed &&\n            this.status !== JDTestCommandStatus.Passed\n        )\n    }\n\n    get isActive(): boolean {\n        return (\n            this.status === JDTestCommandStatus.Active ||\n            this.status === JDTestCommandStatus.RequiresUserInput\n        )\n    }\n\n    get output() {\n        return this._output\n    }\n\n    set output(value: JDCommandOutput) {\n        if (\n            !this._output ||\n            this._output.message !== value.message ||\n            this._output.progress !== value.progress\n        ) {\n            this._output = value\n            this.emit(CHANGE)\n        }\n    }\n\n    reset() {\n        this.status = JDTestCommandStatus.NotReady\n        this.output = { message: \"\", progress: \"\" }\n        this._commandEvaluator = null\n    }\n\n    async startAsync() {\n        this.status = JDTestCommandStatus.Active\n        this._commandEvaluator = undefined\n        await this.envChangeAsync()\n    }\n\n    async envChangeAsync() {\n        if (this.isActive) {\n            if (!this._commandEvaluator) {\n                this._commandEvaluator = new JDCommandEvaluator(\n                    this.testRunner,\n                    this.command\n                )\n                try {\n                    this._commandEvaluator.start()\n                } catch (e) {\n                    // we will try again on next environment change\n                    this._commandEvaluator = undefined\n                }\n            }\n            if (this._commandEvaluator) {\n                try {\n                    await this._commandEvaluator.evaluateAsync()\n                    const newOutput: JDCommandOutput = {\n                        message: this._commandEvaluator.prompt,\n                        progress: this._commandEvaluator.progress,\n                    }\n                    this.output = newOutput\n                    if (\n                        this._commandEvaluator.status ===\n                        JDTestCommandStatus.RequiresUserInput\n                    )\n                        this.status = JDTestCommandStatus.RequiresUserInput\n                    else await this.finishAsync(this._commandEvaluator.status)\n                } catch (e) {\n                    // show still be in the active state\n                }\n            }\n        }\n    }\n\n    async cancelAsync() {\n        await this.finishAsync(JDTestCommandStatus.Failed)\n    }\n\n    async finishAsync(s: JDTestCommandStatus) {\n        if (\n            this.isActive &&\n            (s === JDTestCommandStatus.Failed ||\n                s === JDTestCommandStatus.Passed)\n        ) {\n            this.status = s\n            await this.testRunner.finishCommandAsync()\n        }\n    }\n}\n\nexport class JDTestRunner extends JDEventSource {\n    private _status = JDTestStatus.NotReady\n    private _commandIndex: number\n    private _currentEvent: string\n    public readonly commands: JDTestCommandRunner[]\n\n    constructor(\n        public readonly serviceTestRunner: JDServiceTestRunner,\n        private readonly testSpec: jdtest.TestSpec\n    ) {\n        super()\n        this.commands = testSpec.testCommands.map(\n            c => new JDTestCommandRunner(this, c)\n        )\n    }\n\n    reset() {\n        if (this.status !== JDTestStatus.NotReady) {\n            this._status = JDTestStatus.NotReady\n            this._commandIndex = undefined\n            this._currentEvent = undefined\n            this.commands.forEach(t => t.reset())\n            this.emit(CHANGE)\n        }\n    }\n\n    async startAsync() {\n        this.reset()\n        this.status = JDTestStatus.Active\n        this._commandIndex = 0\n    }\n\n    next() {\n        this.serviceTestRunner.next()\n    }\n\n    cancel() {\n        this.finish(JDTestStatus.Failed)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: JDTestStatus) {\n        if (s != this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    get indeterminate(): boolean {\n        return (\n            this.status !== JDTestStatus.Failed &&\n            this.status !== JDTestStatus.Passed\n        )\n    }\n\n    get description() {\n        return this.testSpec.description\n    }\n\n    get prompt() {\n        return this.testSpec.prompt\n    }\n\n    finish(newStatus: JDTestStatus) {\n        if (this.status === JDTestStatus.Active) {\n            this.status = newStatus\n        }\n    }\n\n    private getCommandIndex() {\n        return this._commandIndex\n    }\n\n    private async setCommandIndex(index: number) {\n        if (this._commandIndex !== index) {\n            this._commandIndex = index\n            await this.currentCommand?.startAsync()\n            this.emit(CHANGE)\n        }\n    }\n\n    public async envChangeAsync() {\n        if (this.status === JDTestStatus.Active) {\n            await this.currentCommand?.envChangeAsync()\n        }\n    }\n\n    public async eventChangeAsync(event: string) {\n        if (this.status === JDTestStatus.Active) {\n            this._currentEvent = event\n            await this.envChangeAsync()\n        }\n    }\n\n    public get hasEvent() {\n        return this._currentEvent != undefined\n    }\n\n    public consumeEvent() {\n        const ret = this._currentEvent\n        this._currentEvent = undefined\n        return ret\n    }\n\n    public async finishCommandAsync() {\n        if (this.getCommandIndex() === this.commands.length - 1)\n            this.finish(commandStatusToTestStatus(this.currentCommand.status))\n        else await this.setCommandIndex(this.getCommandIndex() + 1)\n    }\n\n    get currentCommand() {\n        return this.commands[this._commandIndex]\n    }\n}\n\nexport class JDServiceTestRunner extends JDServiceClient {\n    private _testIndex = -1\n    private _env: VMServiceClient\n    public readonly tests: JDTestRunner[]\n\n    constructor(\n        public readonly testSpec: jdtest.ServiceTestSpec,\n        service: JDService\n    ) {\n        super(service)\n        this._env = new VMServiceClient(service)\n        this.tests = this.testSpec.tests.map(t => new JDTestRunner(this, t))\n        this.testSpec.tests.forEach(t => {\n            t.events.forEach(s => {\n                const eventName = s.substr(s.indexOf(\".\") + 1)\n                this._env.registerEvent(eventName, async () => {\n                    try {\n                        await this.currentTest?.eventChangeAsync(eventName)\n                    } catch (e) {\n                        //\n                    }\n                })\n            })\n            t.registers.forEach(s => {\n                const regName = s.substr(s.indexOf(\".\") + 1)\n                this._env.registerRegister(regName, async () => {\n                    try {\n                        await this.currentTest?.envChangeAsync()\n                    } catch (e) {\n                        //\n                    }\n                })\n            })\n        })\n        this.start()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public lookup(e: jsep.MemberExpression | string): any {\n        // TODO: fix up test runner\n        return undefined // this._env.lookupRegisterAsync(e)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async writeRegisterAsync(regName: string, val: any) {\n        await this._env.writeRegisterAsync(regName, val)\n    }\n\n    private get testIndex() {\n        return this._testIndex\n    }\n\n    private set testIndex(index: number) {\n        if (this._testIndex !== index) {\n            // stop previous test if needed\n            const ct = this.currentTest\n            if (ct) {\n                if (ct.status === JDTestStatus.Active) {\n                    ct.cancel()\n                }\n            }\n            // update test\n            this._testIndex = index\n            this.emit(CHANGE)\n        }\n    }\n\n    public stats() {\n        const r = {\n            total: this.tests.length,\n            success: 0,\n            failed: 0,\n            indeterminate: 0,\n        }\n        for (const test of this.tests) {\n            switch (test.status) {\n                case JDTestStatus.Failed:\n                    r.failed++\n                    break\n                case JDTestStatus.Passed:\n                    r.success++\n                    break\n                default:\n                    r.indeterminate++\n            }\n        }\n        return r\n    }\n\n    public start() {\n        this.tests.forEach(t => t.reset())\n        this.testIndex = 0\n    }\n\n    public next() {\n        this.testIndex++\n    }\n\n    get currentTest() {\n        return this.tests[this._testIndex]\n    }\n\n    set currentTest(test: JDTestRunner) {\n        const index = this.tests.indexOf(test)\n        if (index > -1) this.testIndex = index\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport useServiceClient from \"../useServiceClient\"\nimport {\n    Grid,\n    Button,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    Typography,\n    Card,\n    CardContent,\n    CardActions,\n    Box,\n    ListSubheader,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    JDServiceTestRunner,\n    JDTestRunner,\n    JDTestStatus,\n    JDTestCommandRunner,\n    JDTestCommandStatus,\n} from \"../../../jacdac-ts/src/test/testrunner\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashboardDevice from \"../dashboard/DashboardDevice\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\n\nfunction TestStatusIcon(props: { test: JDTestRunner }) {\n    const { test } = props\n    const status = useChange(test, t => t.status)\n\n    switch (status) {\n        case JDTestStatus.Active:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction TestListItem(props: {\n    test: JDTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { test, currentTest, onSelectTest } = props\n    const description = useChange(test, t => t.description)\n    const selected = test === currentTest\n    const handleSelectTest = () => onSelectTest(test)\n\n    return (\n        <ListItem selected={selected} button onClick={handleSelectTest}>\n            <ListItemIcon>\n                <TestStatusIcon test={test} />\n            </ListItemIcon>\n            <ListItemText primary={description} />\n        </ListItem>\n    )\n}\n\nfunction TestList(props: {\n    testRunner: JDServiceTestRunner\n    currentTest: JDTestRunner\n    onSelectTest: (test: JDTestRunner) => void\n}) {\n    const { testRunner, currentTest, onSelectTest } = props\n    const { tests } = testRunner\n    const stats = useChange(testRunner, r => r.stats())\n\n    return (\n        <Card>\n            <CardContent>\n                <List\n                    dense={true}\n                    subheader={\n                        <ListSubheader>\n                            {`${stats.total} tests, ${stats.success} success, ${stats.failed} failed`}\n                        </ListSubheader>\n                    }\n                >\n                    {tests?.map((test, i) => (\n                        <TestListItem\n                            key={i}\n                            test={test}\n                            currentTest={currentTest}\n                            onSelectTest={onSelectTest}\n                        />\n                    ))}\n                </List>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction CommandStatusIcon(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const status = useChange(command, c => c.status)\n\n    switch (status) {\n        case JDTestCommandStatus.Active:\n        case JDTestCommandStatus.RequiresUserInput:\n            return <PlayCircleFilledIcon color=\"action\" />\n        case JDTestCommandStatus.Failed:\n            return <ErrorIcon color=\"error\" />\n        case JDTestCommandStatus.Passed:\n            return <CheckCircleIcon color=\"primary\" />\n        default:\n            return <HourglassEmptyIcon color=\"disabled\" />\n    }\n}\n\nfunction CommandListItem(props: { command: JDTestCommandRunner }) {\n    const { command } = props\n    const { message, progress } = useChange(command, c => c.output)\n    const status = useChange(command, c => c.status)\n    const handleAnswer = (status: JDTestCommandStatus) => () =>\n        command.finish(status)\n    return (\n        <>\n            <ListItem selected={status === JDTestCommandStatus.Active}>\n                <ListItemIcon>\n                    <CommandStatusIcon command={command} />\n                </ListItemIcon>\n                <ListItemText\n                    primary={message}\n                    secondary={progress}\n                />\n            </ListItem>\n            {status === JDTestCommandStatus.RequiresUserInput && (\n                <ListItem>\n\n                    <ListItemSecondaryAction>\n                        <Grid container spacing={1}>\n                            <Grid item><Button\n                                variant=\"outlined\"\n                                onClick={handleAnswer(JDTestCommandStatus.Passed)}\n                            >\n                                Yes\n                    </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleAnswer(JDTestCommandStatus.Failed)}\n                                >\n                                    No\n                    </Button>\n                            </Grid>\n                        </Grid>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )}\n\n        </>\n    )\n}\n\nfunction ActiveTest(props: { test: JDTestRunner }) {\n    const { test } = props\n    const { commands } = test\n    const status = useChange(test, t => t.status)\n    const handleRestart = () => test.start()\n    const handleNext = () => test.next()\n    // auto start\n    useEffect(() => test.start(), [test])\n\n    return (\n        <Card>\n            <CardContent>\n                <Typography variant=\"h5\">DO</Typography>\n                <Box m={2}>\n                    <Typography variant=\"body1\">{test.prompt}</Typography>\n                </Box>\n                <Typography variant=\"h5\">TEST</Typography>\n                <List dense={false}>\n                    {commands.map((cmd, i) => (\n                        <CommandListItem key={i} command={cmd} />\n                    ))}\n                </List>\n                {status === JDTestStatus.Passed && (\n                    <Alert severity=\"success\">Test passed</Alert>\n                )}\n                {status === JDTestStatus.Failed && (\n                    <Alert severity=\"error\">Test failed</Alert>\n                )}\n            </CardContent>\n            <CardActions>\n                <Button\n                    variant={\n                        status === JDTestStatus.Active\n                            ? \"outlined\"\n                            : \"contained\"\n                    }\n                    color={\n                        status === JDTestStatus.Passed ? \"primary\" : undefined\n                    }\n                    onClick={handleNext}\n                >\n                    Next\n                </Button>\n                <Button variant=\"outlined\" onClick={handleRestart}>\n                    Restart\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceTestRunner(props: {\n    service: JDService\n    serviceTest?: jdtest.ServiceTestSpec\n}) {\n    const {\n        service,\n        serviceTest = serviceTestFromServiceClass(service.serviceClass),\n    } = props\n    const factory = useCallback(\n        service => serviceTest && new JDServiceTestRunner(serviceTest, service),\n        [service, serviceTest]\n    )\n    const testRunner = useServiceClient(service, factory)\n    const currentTest = useChange(testRunner, t => t?.currentTest)\n    const handleSelectTest = (test: JDTestRunner) => {\n        testRunner.currentTest = test\n    }\n\n    if (!serviceTest)\n        return (\n            <Alert severity=\"warning\">\n                Sorry, there are no tests available for service{\" \"}\n                {service.specification.name}.\n            </Alert>\n        )\n\n    if (!testRunner) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={3}>\n                <TestList\n                    testRunner={testRunner}\n                    currentTest={currentTest}\n                    onSelectTest={handleSelectTest}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                {currentTest ? <ActiveTest test={currentTest} /> : <Alert severity={\"info\"}>\n                    Select a test to get started.\n                </Alert>}\n            </Grid>\n            {service && (\n                <Grid item xs={3}>\n                    <DashboardDevice\n                        showAvatar={true}\n                        showHeader={true}\n                        device={service.device}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import { useEffect, useState } from \"react\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(\n    service: JDService,\n    factory: (service: JDService) => T,\n    deps: React.DependencyList = []\n) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client\n}\n"],"names":["getTestCommandFunctions","testFunctions","filter","f","context","getTestExpressionFunctions","id","args","prompt","undefined","isEvent","isRegister","isCommand","isIntensity","JDServiceClient","CHANGE","EVENT","REPORT_UPDATE","SystemReg","jdpack","VMServiceClient","service","_registers","_reportUpdate","_events","registerRegister","regName","handler","pkt","specification","packets","find","name","register","identifier","mount","subscribe","registerEvent","eventName","event","sendCommandAsync","commandName","values","p","sendCmdAsync","packFormat","writeRegisterAsync","code","Value","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","fields","type","Intensity","lookupRegisterAsync","root","fld","reportUpdate","refresh","unpackedValue","field","value","unparse","e","ae","elements","map","join","caller","callee","arguments","computed","object","property","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","evalAsync","visitExpressionAsync","ret","push","top","Math","abs","le","val","lit","exprVisitor","JDEventSource","roundWithPrecision","JDTestStatus","JDTestCommandStatus","commandStatusToTestStatus","status","Active","Passed","Failed","NotReady","RequiresUserInput","cmdToTestFunction","cmd","call","t","JDCommandEvaluator","testRunner","command","_prompt","_progress","_status","_startExpressions","_rangeComplete","_eventsComplete","start","ee","getStartVal","r","v","goal","error","ev","testFun","startExprs","ce","eventList","forEach","child","findIndex","exprEval","createPrompt","replaceId","a","i","replaceVal","aStart","toString","slice","replace","setEvent","checkExpression","expr","getStart","evaluateAsync","pretify","regSaved","regValue","amtSaved","beginSaved","endSaved","hasEvent","consumeEvent","shift","reg","serviceTestRunner","lookup","JDTestCommandRunner","_output","message","progress","_commandEvaluator","reset","output","startAsync","envChangeAsync","isActive","newOutput","finishAsync","cancelAsync","s","finishCommandAsync","emit","JDTestRunner","testSpec","commands","testCommands","c","_commandIndex","_currentEvent","next","cancel","finish","newStatus","getCommandIndex","setCommandIndex","index","currentCommand","eventChangeAsync","description","JDServiceTestRunner","_testIndex","_env","tests","events","substr","indexOf","currentTest","registers","stats","total","success","failed","indeterminate","test","testIndex","ct","React","useCallback","useEffect","useServiceClient","Grid","Button","List","ListItemText","ListItem","ListItemIcon","ListItemSecondaryAction","Typography","Card","CardContent","CardActions","Box","ListSubheader","Alert","ErrorIcon","CheckCircleIcon","HourglassEmptyIcon","PlayCircleFilledIcon","useChange","DashboardDevice","LoadingProgress","serviceTestFromServiceClass","TestStatusIcon","props","TestListItem","onSelectTest","selected","handleSelectTest","TestList","CommandStatusIcon","CommandListItem","handleAnswer","ActiveTest","handleRestart","handleNext","ServiceTestRunner","serviceTest","serviceClass","factory","device","useContext","AppContext","DrawerType","useGridBreakpoints","itemCount","drawerType","xs","sm","md","lg","xl","None","useState","deps","client","setClient","unmount"],"sourceRoot":""}