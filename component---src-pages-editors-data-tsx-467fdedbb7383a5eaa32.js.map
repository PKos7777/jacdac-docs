{"version":3,"file":"component---src-pages-editors-data-tsx-467fdedbb7383a5eaa32.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/iframedsl.ts","webpack://jacdac-docs/./src/components/data-science/DSBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/data.tsx"],"sourcesContent":["import { Block, Workspace } from \"blockly\"\nimport { CHANGE } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport { inIFrame } from \"../../../../jacdac-ts/src/jdom/iframeclient\"\nimport { randomDeviceId } from \"../../../../jacdac-ts/src/jdom/random\"\nimport { workspaceToJSON } from \"../jsongenerator\"\nimport {\n    BlockDataSet,\n    BlockDataSetTransform,\n    BlockDefinition,\n    ContentDefinition,\n    resolveBlockDefinition,\n} from \"../toolbox\"\nimport { BlockWithServices, setBlockDataWarning } from \"../WorkspaceContext\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { WorkspaceJSON } from \"./workspacejson\"\n\nexport interface DslMessage {\n    type?: \"dsl\"\n    id?: string\n    dslid: string\n    action: \"mount\" | \"unmount\" | \"blocks\" | \"transform\" | \"change\"\n}\n\nexport interface DslBlocksResponse extends DslMessage {\n    action: \"blocks\"\n    blocks: BlockDefinition[]\n    category: ContentDefinition[]\n}\n\nexport interface DslTransformMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    workspace?: WorkspaceJSON\n    dataset?: BlockDataSet\n}\n\nexport interface DslTransformResponse extends DslTransformMessage {\n    warning?: string\n}\n\nclass IFrameDomainSpecificLanguage implements BlockDomainSpecificLanguage {\n    private dslid = randomDeviceId()\n    private blocks: BlockDefinition[] = []\n    private category: ContentDefinition[] = []\n    private pendings: Record<string, (data: DslMessage) => void> = {}\n\n    private _workspace: Workspace\n\n    constructor(readonly id: string, readonly targetOrigin: string) {\n        this.handleMessage = this.handleMessage.bind(this)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private post(action: string, extras?: object) {\n        const payload = {\n            id: Math.random() + \"\",\n            type: \"dsl\",\n            dslid: this.dslid,\n            action,\n            ...(extras || {}),\n        } as DslMessage\n        window.parent.postMessage(payload, this.targetOrigin)\n        return payload\n    }\n\n    mount(workspace: Workspace) {\n        this._workspace = workspace\n        window.addEventListener(\"message\", this.handleMessage)\n        this.post(\"mount\")\n        return () => {\n            this.post(\"unmount\")\n            this._workspace = undefined\n            window.removeEventListener(\"message\", this.handleMessage)\n        }\n    }\n\n    private handleMessage(msg: MessageEvent<DslMessage>) {\n        const { data } = msg\n        if (data.type === \"dsl\" && data.dslid === this.dslid) {\n            const { id, action } = data\n            // check for pending request\n            const pending = id !== undefined && this.pendings[id]\n            if (pending) {\n                delete this.pendings[id]\n                pending(data)\n            }\n            // trigger recomputation\n            if (action === \"change\") {\n                console.log(`iframedsl: change requested`)\n                this._workspace\n                    .getTopBlocks(false)\n                    .filter(\n                        b => resolveBlockDefinition(b.type)?.dsl === this.id\n                    )\n                    .forEach((b: Block) => {\n                        console.log(`change ${b.id}`)\n                        const { jacdacServices } = b as BlockWithServices\n                        jacdacServices.emit(CHANGE)\n                    })\n            }\n        }\n    }\n\n    private createTransformData(): BlockDataSetTransform {\n        return (blockWithServices, dataset) =>\n            new Promise<BlockDataSet>(resolve => {\n                const workspace = workspaceToJSON(\n                    blockWithServices.workspace,\n                    [], // TODO pass dsls\n                    [blockWithServices]\n                )\n                const { id } = this.post(\"transform\", {\n                    blockId: blockWithServices.id,\n                    workspace,\n                    dataset,\n                })\n                setTimeout(() => {\n                    if (this.pendings[id]) {\n                        delete this.pendings[id]\n                        console.warn(`iframedsl: transform timeouted`)\n                        resolve(undefined)\n                    }\n                }, 10000)\n                this.pendings[id] = data => {\n                    const { dataset, warning } = data as DslTransformResponse\n                    if (warning) setBlockDataWarning(blockWithServices, warning)\n                    resolve(dataset)\n                }\n            })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createBlocks(options: CreateBlocksOptions): Promise<BlockDefinition[]> {\n        console.debug(`iframedsl: query blocks`)\n        return new Promise<BlockDefinition[]>(resolve => {\n            const { id } = this.post(\"blocks\")\n            setTimeout(() => {\n                if (this.pendings[id]) {\n                    delete this.pendings[id]\n                    console.warn(`iframedsl: no blocks returned, giving up`)\n                    resolve(this.blocks)\n                }\n            }, 1000)\n            this.pendings[id] = data => {\n                const bdata = data as DslBlocksResponse\n                this.blocks = bdata.blocks\n                this.category = bdata.category\n                const transformData = this.createTransformData()\n                this.blocks.forEach(\n                    block => (block.transformData = transformData)\n                )\n                resolve(this.blocks)\n            }\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createCategory(options: CreateCategoryOptions): ContentDefinition[] {\n        return this.category\n    }\n}\n\n/**\n * Creates an iframe DSL if applicable\n * @param targetOrigin\n * @returns\n */\nexport function createIFrameDSL(\n    id: string,\n    targetOrigin = \"*\"\n): BlockDomainSpecificLanguage {\n    return inIFrame() && new IFrameDomainSpecificLanguage(id, targetOrigin)\n}\n","import { Grid, NoSsr } from \"@material-ui/core\"\nimport React, { useContext, useMemo } from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport { WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { createIFrameDSL } from \"../blockly/dsl/iframedsl\"\n\nconst DS_EDITOR_ID = \"ds\"\nconst DS_SOURCE_STORAGE_KEY = \"tools:dseditor\"\nconst DS_NEW_FILE_CONTENT = JSON.stringify({\n    editor: DS_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction DSEditorWithContext() {\n    const { fileSystem } = useContext(FileSystemContext)\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={DS_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <BlockEditor editorId={DS_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </Grid>\n    )\n}\n\nexport default function DSBlockEditor() {\n    const dsls = useMemo(() => {\n        return [dataDsl, chartDsl, fieldsDsl, createIFrameDSL(\"host\", \"*\")].filter(\n            dsl => !!dsl\n        )\n    }, [])\n\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={DS_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <DSEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n"],"names":["CHANGE","inIFrame","randomDeviceId","workspaceToJSON","resolveBlockDefinition","setBlockDataWarning","IFrameDomainSpecificLanguage","id","targetOrigin","dslid","blocks","category","pendings","handleMessage","bind","post","action","extras","payload","Math","random","type","window","parent","postMessage","mount","workspace","_workspace","addEventListener","undefined","removeEventListener","msg","data","pending","console","log","getTopBlocks","filter","b","dsl","forEach","jacdacServices","emit","createTransformData","blockWithServices","dataset","Promise","resolve","blockId","setTimeout","warn","warning","createBlocks","options","debug","bdata","transformData","block","createCategory","createIFrameDSL","Grid","NoSsr","React","useContext","useMemo","Flags","BlockProvider","BlockDiagnostics","BlockEditor","FileTabs","dataDsl","chartDsl","fieldsDsl","WORKSPACE_FILENAME","FileSystemContext","DS_EDITOR_ID","DS_SOURCE_STORAGE_KEY","DS_NEW_FILE_CONTENT","JSON","stringify","editor","xml","DSEditorWithContext","fileSystem","diagnostics","DSBlockEditor","dsls","Page"],"sourceRoot":""}