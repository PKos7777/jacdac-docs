{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/node_modules/jsep/build/jsep.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Info.js","webpack://jacdac-docs/./node_modules/@material-ui/lab/esm/AlertTitle/AlertTitle.js","webpack://jacdac-docs/./src/components/ServiceSpecificationSelect.tsx","webpack://jacdac-docs/./src/components/SelectService.tsx","webpack://jacdac-docs/./src/components/test/ServiceTest.tsx","webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./node_modules/use-editable/dist/use-editable.es.js","webpack://jacdac-docs/./src/components/ui/HighlightTextField.tsx","webpack://jacdac-docs/./jacdac-ts/jacdac-spec/spectool/jdtest.ts","webpack://jacdac-docs/./src/components/tools/ServiceTestEditor.tsx","webpack://jacdac-docs/./src/pages/tools/service-test-editor.tsx"],"names":["useStyles","makeStyles","createStyles","root","minWidth","ServiceSpecificationSelect","props","label","serviceClass","setServiceClass","variant","fullWidth","error","useState","Math","random","labelId","classes","specs","serviceSpecifications","filter","spec","test","shortId","handleChange","event","parseInt","target","value","map","classIdentifier","name","SelectService","useContext","JacdacContext","bus","onSelect","services","useChange","n","gridBreakpoints","useGridBreakpoints","handleSelect","service","length","id","device","Diagnostics","hostDefinition","serviceProviderDefinitionFromServiceClass","handleStartSimulator","addServiceProvider","ServiceTestRunnerSelect","ServiceTest","serviceSpec","showStartSimulator","serviceTest","serviceTestFromServiceClass","undefined","setService","useEffect","subscribe","DISCONNECT","Flags","theme","hr","background","palette","text","disabled","marginBottom","start","width","spacing","GridHeader","title","count","action","clsx","GithubPullRequestButton","lazy","AnnotationTooltip","withStyles","arrow","color","main","tooltip","backgroundColor","common","white","boxShadow","shadows","fontSize","typography","body2","Tooltip","HighlightTextField","code","onChange","language","annotations","pullRequestTitle","pullRequestPath","pullRequestDescription","DarkModeContext","darkMode","DARK_THEME","LIGHT_THEME","editorRef","useRef","useEditable","indentation","defaultProps","className","style","tokens","getTokenProps","minHeight","whiteSpace","line","i","annotation","find","a","message","el","borderBottom","token","empty","key","supportedExpressions","parseSpecificationTestMarkdownToJSON","filecontent","filename","replace","info","description","serviceClassIdentifier","tests","backticksType","errors","lineNo","currentTest","testHeading","testPrompt","split","processLine","e","finishTest","trim","m","exec","interpret","slice","hd","cont","expanded","processCommand","argsRequiredOptional","args","optional","prompt","registers","events","testCommands","call","callee","testCommandFunctions","getTestCommandFunctions","cmdIndex","findIndex","r","jsep","type","arguments","exprVisitor","p","c","indexOf","command","minArgs","maxArgs","newExpressions","def","lit","raw","toString","push","concat","processArguments","processCalls","eventSymTable","forEach","arg","argType","pkt","lookupEvent","lookupRegister","elements","lookupReplace","member","object","property","computed","testExpressionFunctions","getTestExpressionFunctions","parent","callExpr","tef","context","ce","expected","packets","kind","fld","reg","getRegister","isBoolOrNumericFormat","packFormat","child","Array","isArray","lookup","Object","keys","k","toName","val","parseIntFloat","fields","f","msg","some","file","SERVICE_TEST_SERVICE_STORAGE_KEY","SERVICE_TEST_SOURCE_STORAGE_KEY","SERVICE_MARKDOWN_SOURCE_STORAGE_KEY","ServiceTestEditor","AppContext","setError","useLocalStorage","SRV_BUTTON","source","setSource","markdownSource","setMarkdownSource","useMemo","serviceSpecificationFromClassIdentifier","json","servicePath","camelName","toLowerCase","handleLoadFromGithub","fetchText","ghSource","Page"],"mappings":";;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gCAAgC;AAChC,GAAG;AACH;AACA;AACA;AACA;AACA,wEAAwE;AACxE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,6EAA6E;AAC7E;;AAEA;AACA,8BAA8B;;AAE9B;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC;;AAEvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,uBAAuB;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA;AACA,gBAAgB;AAChB,OAAO;AACP;AACA;AACA,2BAA2B;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,EAAE;AACf;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,IAAI;;;AAGJ,MAAM,KAA8B,EAAE,iBAYnC;AACH;AACA,QAAQ,KAA6B;AACrC;AACA,KAAK;AACL,MAAM,aAAa;AACnB;AACA;AACA,CAAC,Q;;;;;;;;;ACz0BY;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,8BAA8B,mBAAO,CAAC,KAA+C;;AAErF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,oCAAoC,mBAAO,CAAC,KAAO;;AAEnD,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E;AACA;AACA,CAAC;;AAED,SAAe,Y;;;;;;;;;;;;;;;ACnB2C;AACgC;AAC3D;AACuB;AACP;AACvB;AACjB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAgB;AAC9C;AACA;AACA,cAAc,oGAAwB;;AAEtC,sBAAsB,gDAAmB,CAAC,+DAAU,EAAE,oFAAQ;AAC9D;AACA;AACA;AACA,eAAe,sDAAI;AACnB,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C,yDAAe,0EAAU;AACzB;AACA,CAAC,aAAa,E;;;;;;;;;;;;;;;;;AC9Bd;AACA;AACA;AAEA,IAAMA,SAAS,GAAGC,mEAAU,CAAC;AAAA,SACzBC,mEAAY,CAAC;AACTC,QAAI,EAAE;AACFC,cAAQ,EAAE;AADR;AADG,GAAD,CADa;AAAA,CAAD,CAA5B;AAQe,SAASC,0BAAT,CAAoCC,KAApC,EAOZ;AAAA,MACSC,KADT,GAC6ED,KAD7E,CACSC,KADT;AAAA,MACgBC,YADhB,GAC6EF,KAD7E,CACgBE,YADhB;AAAA,MAC8BC,eAD9B,GAC6EH,KAD7E,CAC8BG,eAD9B;AAAA,MAC+CC,OAD/C,GAC6EJ,KAD7E,CAC+CI,OAD/C;AAAA,MACwDC,SADxD,GAC6EL,KAD7E,CACwDK,SADxD;AAAA,MACmEC,KADnE,GAC6EN,KAD7E,CACmEM,KADnE;;AAAA,kBAEmBC,+CAAQ,CAAC,YAAYC,IAAI,CAACC,MAAL,EAAb,CAF3B;AAAA,MAEQC,OAFR;;AAGC,MAAMC,OAAO,GAAGjB,SAAS,EAAzB;AACA,MAAMkB,KAAK,GAAGC,yFAAqB,GAAGC,MAAxB,CAA+B,UAAAC,IAAI;AAAA,WAAI,CAAC,KAAKC,IAAL,CAAUD,IAAI,CAACE,OAAf,CAAL;AAAA,GAAnC,CAAd;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,WACjBhB,eAAe,CAACiB,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAT,CADE;AAAA,GAArB;;AAGA,sBAAO,iDAAC,+DAAD;AACH,MAAE,EAAEZ,OADD;AAEH,aAAS,EAAEC,OAAO,CAACd,IAFhB;AAGH,SAAK,EAAEI,KAHJ;AAIH,SAAK,EAAE,CAAC,CAACK,KAJN;AAKH,cAAU,EAAEA,KALT;AAMH,SAAK,EAAEJ,YANJ;AAOH,UAAM,MAPH;AAQH,WAAO,EAAEE,OARN;AASH,aAAS,EAAEC,SATR;AAUH,YAAQ,EAAEa;AAVP,kBAWH,iDAAC,+DAAD;AAAU,OAAG,EAAC,MAAd;AAAqB,SAAK,EAAC;AAA3B,2BAXG,EAYFN,KAAK,CAACW,GAAN,CAAU,UAAAR,IAAI;AAAA,wBAAI,iDAAC,+DAAD;AACf,SAAG,EAAEA,IAAI,CAACS,eADK;AAEf,WAAK,EAAET,IAAI,CAACS;AAFG,OAEeT,IAAI,CAACU,IAFpB,CAAJ;AAAA,GAAd,CAZE,CAAP;AAgBH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CD;AACA;AACA;AACA;AACA;AACA;AACA;AAGe,SAASC,aAAT,CAAuB1B,KAAvB,EAGZ;AAAA,oBACiB2B,oBAAU,CAAqBC,sBAArB,CAD3B;AAAA,MACSC,GADT,eACSA,GADT;;AAAA,MAES3B,YAFT,GAEoCF,KAFpC,CAESE,YAFT;AAAA,MAEuB4B,QAFvB,GAEoC9B,KAFpC,CAEuB8B,QAFvB;AAGC,MAAMC,QAAQ,GAAGC,4BAAS,CAACH,GAAD,EAAM,UAAAI,CAAC;AAAA,WAAIA,CAAC,CAACF,QAAF,CAAW;AAAE7B,kBAAY,EAAZA;AAAF,KAAX,CAAJ;AAAA,GAAP,EAAyC,EAAzC,CAA1B;AACA,MAAMgC,eAAe,GAAGC,qCAAkB,EAA1C;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,WAAwB;AAAA,aAAMP,QAAQ,CAACO,OAAD,CAAd;AAAA,KAAxB;AAAA,GAArB;;AAEA,sBACI,0CACK,CAAC,CAACN,QAAQ,CAACO,MAAX,iBACG,oBAAC,mBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,KACKP,QAAQ,CAACR,GAAT,CAAa,UAAAc,OAAO;AAAA,wBACjB,oBAAC,mBAAD;AAAM,SAAG,EAAEA,OAAO,CAACE,EAAnB;AAAuB,UAAI;AAA3B,OAAgCL,eAAhC,gBACI,oBAAC,mBAAD,qBACI,oBAAC,+BAAD;AAAkB,YAAM,EAAEG,OAAO,CAACG,MAAlC;AAA0C,gBAAU,EAAE;AAAtD,MADJ,eAEI,oBAAC,0BAAD,qBACI,oBAAC,qBAAD;AACI,aAAO,EAAC,WADZ;AAEI,WAAK,EAAC,SAFV;AAGI,aAAO,EAAEJ,YAAY,CAACC,OAAD;AAHzB,gBADJ,CAFJ,CADJ,CADiB;AAAA,GAApB,CADL,CAFR,EAqBK,EAACN,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEO,MAAX,kBACG,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,wEAEI,6CACI,sEADJ,eAEI,yDACY,qDADZ,mCAFJ,eAMI,yFANJ,CAFJ,CAtBR,CADJ;AAwCH,C;;;;;;AC5DD;AACA;CAEA;;CAEA;;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;;AAEA,SAASG,WAAT,CAAqBzC,KAArB,EAAsD;AAAA,MAC1CE,YAD0C,GACzBF,KADyB,CAC1CE,YAD0C;;AAAA,oBAElCyB,oBAAU,CAAqBC,sBAArB,CAFwB;AAAA,MAE1CC,GAF0C,eAE1CA,GAF0C;;AAIlD,MAAMa,cAAc,GAAGC,6DAAyC,CAACzC,YAAD,CAAhE;;AACA,MAAM0C,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,WAAMC,sCAAkB,CAAChB,GAAD,EAAMa,cAAN,CAAxB;AAAA,GAA7B;;AAEA,MAAI,CAACA,cAAL,EAAqB,OAAO,IAAP;AAErB,sBACI,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,kBACI,oBAAC,yBAAD,yBADJ,eAEI,oBAAC,qBAAD;AAAQ,WAAO,EAAC,UAAhB;AAA2B,WAAO,EAAEE;AAApC,uBAFJ,CADJ;AAQH;;AAED,SAASE,uBAAT,CAAiC9C,KAAjC,EAGG;AAAA,MACSE,YADT,GACoCF,KADpC,CACSE,YADT;AAAA,MACuB4B,QADvB,GACoC9B,KADpC,CACuB8B,QADvB;AAEC,sBACI,uDACI,0DADJ,eAEI,oBAAC,aAAD;AAAe,gBAAY,EAAE5B,YAA7B;AAA2C,YAAQ,EAAE4B;AAArD,IAFJ,CADJ;AAMH;;AAEc,SAASiB,WAAT,CAAqB/C,KAArB,EAIZ;AAAA,MAEKgD,WAFL,GAKKhD,KALL,CAEKgD,WAFL;AAAA,MAGKC,kBAHL,GAKKjD,KALL,CAGKiD,kBAHL;AAAA,2BAKKjD,KALL,CAIKkD,WAJL;AAAA,MAIKA,WAJL,mCAImBC,+CAA2B,CAACH,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAExB,eAAd,CAJ9C;AAAA,MAM0BtB,YAN1B,GAM2C8C,WAN3C,CAMSxB,eANT;;AAAA,kBAO+BjB,kBAAQ,CAAY6C,SAAZ,CAPvC;AAAA,MAOQf,OAPR;AAAA,MAOiBgB,UAPjB;;AAQC,MAAMjB,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,WAAwBgB,UAAU,CAAChB,OAAD,CAAlC;AAAA,GAArB,CARD,CASC;;;AACAiB,qBAAS,CAAC,YAAM;AACZD,cAAU,CAACD,SAAD,CAAV;AACH,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT,CAVD,CAaC;;AACAI,qBAAS,CAAC;AAAA;;AAAA,WAAMjB,OAAN,aAAMA,OAAN,0CAAMA,OAAO,CAAEG,MAAf,oDAAM,gBAAiBe,SAAjB,CAA2BC,6BAA3B,EAAuC,YAAM;AACzDH,gBAAU,CAACD,SAAD,CAAV;AACH,KAFe,CAAN;AAAA,GAAD,EAEL,CAACf,OAAD,CAFK,CAAT;AAIA,sBACI,uDACI,gCACQW,WAAW,CAACvB,IADpB,0BAEI,oBAAC,oCAAD;AACI,SAAK,EAAC,qBADV;AAEI,MAAE,iBAAeuB,WAAW,CAAC/B,OAA3B;AAFN,kBAII,oBAAC,mBAAD,OAJJ,CAFJ,CADJ,EAUK,CAACwC,4CAAA,IAAqBR,kBAAtB,kBACG,oBAAC,WAAD;AAAa,gBAAY,EAAE/C;AAA3B,IAXR,EAaK,CAACmC,OAAD,iBACG,oBAAC,uBAAD;AACI,gBAAY,EAAEnC,YADlB;AAEI,YAAQ,EAAEkC;AAFd,IAdR,EAmBKC,OAAO,iBACJ,oBAAC,gCAAD;AACI,WAAO,EAAEA,OADb;AAEI,eAAW,EAAEa;AAFjB,IApBR,CADJ;AA4BH,C;;;;;;;;;;;;;;;;;;;ACtGD;AACA;AACA;AAEA,IAAMxD,SAAS,GAAGC,mEAAU,CAAC,UAAC+D,KAAD;AAAA,SAAW9D,mEAAY,CAAC;AACjD+D,MAAE,EAAE;AACAC,gBAAU,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmBC,QAD/B;AAEAC,kBAAY,EAAE;AAFd,KAD6C;AAKjDC,SAAK,EAAE;AACHC,WAAK,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd;AADJ;AAL0C,GAAD,CAAvB;AAAA,CAAD,CAA5B;AAUe,SAASC,UAAT,CAAoBpE,KAApB,EAKZ;AAAA,MACSqE,KADT,GAC2CrE,KAD3C,CACSqE,KADT;AAAA,MACgBC,KADhB,GAC2CtE,KAD3C,CACgBsE,KADhB;AAAA,MACuBlE,OADvB,GAC2CJ,KAD3C,CACuBI,OADvB;AAAA,MACgCmE,MADhC,GAC2CvE,KAD3C,CACgCuE,MADhC;AAEC,MAAM5D,OAAO,GAAGjB,SAAS,EAAzB;AACA,sBAAO,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACH,iDAAC,+DAAD;AAAM,aAAS,MAAf;AAAgB,aAAS,EAAC,KAA1B;AAAgC,WAAO,EAAE,CAAzC;AAA4C,WAAO,EAAC,QAApD;AAA6D,cAAU,EAAC;AAAxE,kBACI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI;AAAI,aAAS,EAAE8E,sDAAI,CAAC7D,OAAO,CAACgD,EAAT,EAAahD,OAAO,CAACsD,KAArB;AAAnB,IADJ,CADJ,eAII,iDAAC,+DAAD;AAAM,QAAI;AAAV,KACKM,MAAM,iBAAI,iDAAC,+DAAD;AAAK,aAAS,EAAC,MAAf;AAAsB,MAAE,EAAE;AAA1B,KAA8BA,MAA9B,CADf,eAEI,iDAAC,+DAAD;AAAY,aAAS,EAAC,MAAtB;AAA6B,WAAO,EAAEnE,OAAO,IAAI;AAAjD,KAA+DiE,KAA/D,CAFJ,EAGKC,KAAK,KAAKlB,SAAV,iBAAuB,iDAAC,+DAAD;AAAK,aAAS,EAAC,MAAf;AAAsB,MAAE,EAAE;AAA1B,kBAA+B,iDAAC,+DAAD;AAAM,SAAK,EAAEkB;AAAb,IAA/B,CAH5B,CAJJ,eASI,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI;AAAI,aAAS,EAAE3D,OAAO,CAACgD;AAAvB,IADJ,CATJ,CADG,CAAP;AAeH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrC8D;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,aAAa;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,eAAe;AAC3C;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4FAA4F,aAAa;AACzG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc;AACd,UAAU,kBAAQ;AAClB,UAAU,kBAAQ;AAClB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,UAAU,qBAAW;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,EAAE,yBAAe;AACjB;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE,yBAAe;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,gBAAgB;AACxC;;AAEA,+CAA+C,QAAQ;AACvD;AACA;;AAEA,6CAA6C,QAAQ;AACrD;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,C;;;;;;;;;;;;;;;;;;AC3PA;;AACA;AACA;CAMA;;CAEA;;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","file":"component---src-pages-tools-service-test-editor-tsx-0b1c3e66f4c67c6643a7.js","sourcesContent":["//     JavaScript Expression Parser (JSEP) 0.4.0\n//     JSEP may be freely distributed under the MIT License\n//     https://ericsmekens.github.io/jsep/\n\n/*global module: true, exports: true, console: true */\n(function (root) {\n  'use strict'; // Node Types\n  // ----------\n  // This is the full set of types that any JSEP node can be.\n  // Store them here to save space when minified\n\n  var COMPOUND = 'Compound',\n      IDENTIFIER = 'Identifier',\n      MEMBER_EXP = 'MemberExpression',\n      LITERAL = 'Literal',\n      THIS_EXP = 'ThisExpression',\n      CALL_EXP = 'CallExpression',\n      UNARY_EXP = 'UnaryExpression',\n      BINARY_EXP = 'BinaryExpression',\n      LOGICAL_EXP = 'LogicalExpression',\n      CONDITIONAL_EXP = 'ConditionalExpression',\n      ARRAY_EXP = 'ArrayExpression',\n      PERIOD_CODE = 46,\n      // '.'\n  COMMA_CODE = 44,\n      // ','\n  SQUOTE_CODE = 39,\n      // single quote\n  DQUOTE_CODE = 34,\n      // double quotes\n  OPAREN_CODE = 40,\n      // (\n  CPAREN_CODE = 41,\n      // )\n  OBRACK_CODE = 91,\n      // [\n  CBRACK_CODE = 93,\n      // ]\n  QUMARK_CODE = 63,\n      // ?\n  SEMCOL_CODE = 59,\n      // ;\n  COLON_CODE = 58,\n      // :\n  throwError = function throwError(message, index) {\n    var error = new Error(message + ' at character ' + index);\n    error.index = index;\n    error.description = message;\n    throw error;\n  },\n      // Operations\n  // ----------\n  // Set `t` to `true` to save space (when minified, not gzipped)\n  t = true,\n      // Use a quickly-accessible map to store all of the unary operators\n  // Values are set to `true` (it really doesn't matter)\n  unary_ops = {\n    '-': t,\n    '!': t,\n    '~': t,\n    '+': t\n  },\n      // Also use a map for the binary operations but set their values to their\n  // binary precedence for quick reference:\n  // see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)\n  binary_ops = {\n    '||': 1,\n    '&&': 2,\n    '|': 3,\n    '^': 4,\n    '&': 5,\n    '==': 6,\n    '!=': 6,\n    '===': 6,\n    '!==': 6,\n    '<': 7,\n    '>': 7,\n    '<=': 7,\n    '>=': 7,\n    '<<': 8,\n    '>>': 8,\n    '>>>': 8,\n    '+': 9,\n    '-': 9,\n    '*': 10,\n    '/': 10,\n    '%': 10\n  },\n      // Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)\n  additional_identifier_chars = {\n    '$': t,\n    '_': t\n  },\n      // Get return the longest key length of any object\n  getMaxKeyLen = function getMaxKeyLen(obj) {\n    var max_len = 0,\n        len;\n\n    for (var key in obj) {\n      if ((len = key.length) > max_len && obj.hasOwnProperty(key)) {\n        max_len = len;\n      }\n    }\n\n    return max_len;\n  },\n      max_unop_len = getMaxKeyLen(unary_ops),\n      max_binop_len = getMaxKeyLen(binary_ops),\n      // Literals\n  // ----------\n  // Store the values to return for the various literals we may encounter\n  literals = {\n    'true': true,\n    'false': false,\n    'null': null\n  },\n      // Except for `this`, which is special. This could be changed to something like `'self'` as well\n  this_str = 'this',\n      // Returns the precedence of a binary operator or `0` if it isn't a binary operator\n  binaryPrecedence = function binaryPrecedence(op_val) {\n    return binary_ops[op_val] || 0;\n  },\n      // Utility function (gets called from multiple places)\n  // Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n  createBinaryExpression = function createBinaryExpression(operator, left, right) {\n    var type = operator === '||' || operator === '&&' ? LOGICAL_EXP : BINARY_EXP;\n    return {\n      type: type,\n      operator: operator,\n      left: left,\n      right: right\n    };\n  },\n      // `ch` is a character code in the next three functions\n  isDecimalDigit = function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57; // 0...9\n  },\n      isIdentifierStart = function isIdentifierStart(ch) {\n    return ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // a...z\n    ch >= 128 && !binary_ops[String.fromCharCode(ch)] || // any non-ASCII that is not an operator\n    additional_identifier_chars.hasOwnProperty(String.fromCharCode(ch)); // additional characters\n  },\n      isIdentifierPart = function isIdentifierPart(ch) {\n    return ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // a...z\n    ch >= 48 && ch <= 57 || // 0...9\n    ch >= 128 && !binary_ops[String.fromCharCode(ch)] || // any non-ASCII that is not an operator\n    additional_identifier_chars.hasOwnProperty(String.fromCharCode(ch)); // additional characters\n  },\n      // Parsing\n  // -------\n  // `expr` is a string with the passed in expression\n  jsep = function jsep(expr) {\n    // `index` stores the character number we are currently at while `length` is a constant\n    // All of the gobbles below will modify `index` as we move along\n    var index = 0,\n        charAtFunc = expr.charAt,\n        charCodeAtFunc = expr.charCodeAt,\n        exprI = function exprI(i) {\n      return charAtFunc.call(expr, i);\n    },\n        exprICode = function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    },\n        length = expr.length,\n        // Push `index` up to the next non-space character\n    gobbleSpaces = function gobbleSpaces() {\n      var ch = exprICode(index); // space or tab\n\n      while (ch === 32 || ch === 9 || ch === 10 || ch === 13) {\n        ch = exprICode(++index);\n      }\n    },\n        // The main parsing function. Much of this code is dedicated to ternary expressions\n    gobbleExpression = function gobbleExpression() {\n      var test = gobbleBinaryExpression(),\n          consequent,\n          alternate;\n      gobbleSpaces();\n\n      if (exprICode(index) === QUMARK_CODE) {\n        // Ternary expression: test ? consequent : alternate\n        index++;\n        consequent = gobbleExpression();\n\n        if (!consequent) {\n          throwError('Expected expression', index);\n        }\n\n        gobbleSpaces();\n\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          alternate = gobbleExpression();\n\n          if (!alternate) {\n            throwError('Expected expression', index);\n          }\n\n          return {\n            type: CONDITIONAL_EXP,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n          };\n        } else {\n          throwError('Expected :', index);\n        }\n      } else {\n        return test;\n      }\n    },\n        // Search for the operation portion of the string (e.g. `+`, `===`)\n    // Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n    // and move down from 3 to 2 to 1 character until a matching binary operation is found\n    // then, return that binary operation\n    gobbleBinaryOp = function gobbleBinaryOp() {\n      gobbleSpaces();\n      var biop,\n          to_check = expr.substr(index, max_binop_len),\n          tc_len = to_check.length;\n\n      while (tc_len > 0) {\n        // Don't accept a binary op when it is an identifier.\n        // Binary ops that start with a identifier-valid character must be followed\n        // by a non identifier-part valid character\n        if (binary_ops.hasOwnProperty(to_check) && (!isIdentifierStart(exprICode(index)) || index + to_check.length < expr.length && !isIdentifierPart(exprICode(index + to_check.length)))) {\n          index += tc_len;\n          return to_check;\n        }\n\n        to_check = to_check.substr(0, --tc_len);\n      }\n\n      return false;\n    },\n        // This function is responsible for gobbling an individual expression,\n    // e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n    gobbleBinaryExpression = function gobbleBinaryExpression() {\n      var ch_i, node, biop, prec, stack, biop_info, left, right, i, cur_biop; // First, try to get the leftmost thing\n      // Then, check to see if there's a binary operator operating on that leftmost thing\n\n      left = gobbleToken();\n      biop = gobbleBinaryOp(); // If there wasn't a binary operator, just return the leftmost node\n\n      if (!biop) {\n        return left;\n      } // Otherwise, we need to start a stack to properly place the binary operations in their\n      // precedence structure\n\n\n      biop_info = {\n        value: biop,\n        prec: binaryPrecedence(biop)\n      };\n      right = gobbleToken();\n\n      if (!right) {\n        throwError(\"Expected expression after \" + biop, index);\n      }\n\n      stack = [left, biop_info, right]; // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\n      while (biop = gobbleBinaryOp()) {\n        prec = binaryPrecedence(biop);\n\n        if (prec === 0) {\n          break;\n        }\n\n        biop_info = {\n          value: biop,\n          prec: prec\n        };\n        cur_biop = biop; // Reduce: make a binary expression from the three topmost entries.\n\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(biop, left, right);\n          stack.push(node);\n        }\n\n        node = gobbleToken();\n\n        if (!node) {\n          throwError(\"Expected expression after \" + cur_biop, index);\n        }\n\n        stack.push(biop_info, node);\n      }\n\n      i = stack.length - 1;\n      node = stack[i];\n\n      while (i > 1) {\n        node = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);\n        i -= 2;\n      }\n\n      return node;\n    },\n        // An individual part of a binary expression:\n    // e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n    gobbleToken = function gobbleToken() {\n      var ch, to_check, tc_len, node;\n      gobbleSpaces();\n      ch = exprICode(index);\n\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        // Char code 46 is a dot `.` which can start off a numeric literal\n        return gobbleNumericLiteral();\n      }\n\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        // Single or double quotes\n        node = gobbleStringLiteral();\n      } else if (ch === OBRACK_CODE) {\n        node = gobbleArray();\n      } else {\n        to_check = expr.substr(index, max_unop_len);\n        tc_len = to_check.length;\n\n        while (tc_len > 0) {\n          // Don't accept an unary op when it is an identifier.\n          // Unary ops that start with a identifier-valid character must be followed\n          // by a non identifier-part valid character\n          if (unary_ops.hasOwnProperty(to_check) && (!isIdentifierStart(exprICode(index)) || index + to_check.length < expr.length && !isIdentifierPart(exprICode(index + to_check.length)))) {\n            index += tc_len;\n            return {\n              type: UNARY_EXP,\n              operator: to_check,\n              argument: gobbleToken(),\n              prefix: true\n            };\n          }\n\n          to_check = to_check.substr(0, --tc_len);\n        }\n\n        if (isIdentifierStart(ch)) {\n          node = gobbleIdentifier();\n        } else if (ch === OPAREN_CODE) {\n          // open parenthesis\n          node = gobbleGroup();\n        }\n      }\n\n      if (!node) {\n        return false;\n      }\n\n      gobbleSpaces();\n      ch = exprICode(index); // Gobble properties of of identifiers/strings/arrays/groups.\n      // e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n      // It also gobbles function calls:\n      // e.g. `Math.acos(obj.angle)`\n\n      while (ch === PERIOD_CODE || ch === OBRACK_CODE || ch === OPAREN_CODE) {\n        index++;\n\n        if (ch === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            type: MEMBER_EXP,\n            computed: false,\n            object: node,\n            property: gobbleIdentifier()\n          };\n        } else if (ch === OBRACK_CODE) {\n          node = {\n            type: MEMBER_EXP,\n            computed: true,\n            object: node,\n            property: gobbleExpression()\n          };\n          gobbleSpaces();\n          ch = exprICode(index);\n\n          if (ch !== CBRACK_CODE) {\n            throwError('Unclosed [', index);\n          }\n\n          index++;\n        } else if (ch === OPAREN_CODE) {\n          // A function call is being made; gobble all the arguments\n          node = {\n            type: CALL_EXP,\n            'arguments': gobbleArguments(CPAREN_CODE),\n            callee: node\n          };\n        }\n\n        gobbleSpaces();\n        ch = exprICode(index);\n      }\n\n      return node;\n    },\n        // Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n    // keep track of everything in the numeric literal and then calling `parseFloat` on that string\n    gobbleNumericLiteral = function gobbleNumericLiteral() {\n      var number = '',\n          ch,\n          chCode;\n\n      while (isDecimalDigit(exprICode(index))) {\n        number += exprI(index++);\n      }\n\n      if (exprICode(index) === PERIOD_CODE) {\n        // can start with a decimal marker\n        number += exprI(index++);\n\n        while (isDecimalDigit(exprICode(index))) {\n          number += exprI(index++);\n        }\n      }\n\n      ch = exprI(index);\n\n      if (ch === 'e' || ch === 'E') {\n        // exponent marker\n        number += exprI(index++);\n        ch = exprI(index);\n\n        if (ch === '+' || ch === '-') {\n          // exponent sign\n          number += exprI(index++);\n        }\n\n        while (isDecimalDigit(exprICode(index))) {\n          //exponent itself\n          number += exprI(index++);\n        }\n\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError('Expected exponent (' + number + exprI(index) + ')', index);\n        }\n      }\n\n      chCode = exprICode(index); // Check to make sure this isn't a variable name that start with a number (123abc)\n\n      if (isIdentifierStart(chCode)) {\n        throwError('Variable names cannot start with a number (' + number + exprI(index) + ')', index);\n      } else if (chCode === PERIOD_CODE) {\n        throwError('Unexpected period', index);\n      }\n\n      return {\n        type: LITERAL,\n        value: parseFloat(number),\n        raw: number\n      };\n    },\n        // Parses a string literal, staring with single or double quotes with basic support for escape codes\n    // e.g. `\"hello world\"`, `'this is\\nJSEP'`\n    gobbleStringLiteral = function gobbleStringLiteral() {\n      var str = '',\n          quote = exprI(index++),\n          closed = false,\n          ch;\n\n      while (index < length) {\n        ch = exprI(index++);\n\n        if (ch === quote) {\n          closed = true;\n          break;\n        } else if (ch === '\\\\') {\n          // Check for all of the common escape codes\n          ch = exprI(index++);\n\n          switch (ch) {\n            case 'n':\n              str += '\\n';\n              break;\n\n            case 'r':\n              str += '\\r';\n              break;\n\n            case 't':\n              str += '\\t';\n              break;\n\n            case 'b':\n              str += '\\b';\n              break;\n\n            case 'f':\n              str += '\\f';\n              break;\n\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              str += ch;\n          }\n        } else {\n          str += ch;\n        }\n      }\n\n      if (!closed) {\n        throwError('Unclosed quote after \"' + str + '\"', index);\n      }\n\n      return {\n        type: LITERAL,\n        value: str,\n        raw: quote + str + quote\n      };\n    },\n        // Gobbles only identifiers\n    // e.g.: `foo`, `_value`, `$x1`\n    // Also, this function checks if that identifier is a literal:\n    // (e.g. `true`, `false`, `null`) or `this`\n    gobbleIdentifier = function gobbleIdentifier() {\n      var ch = exprICode(index),\n          start = index,\n          identifier;\n\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError('Unexpected ' + exprI(index), index);\n      }\n\n      while (index < length) {\n        ch = exprICode(index);\n\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n\n      identifier = expr.slice(start, index);\n\n      if (literals.hasOwnProperty(identifier)) {\n        return {\n          type: LITERAL,\n          value: literals[identifier],\n          raw: identifier\n        };\n      } else if (identifier === this_str) {\n        return {\n          type: THIS_EXP\n        };\n      } else {\n        return {\n          type: IDENTIFIER,\n          name: identifier\n        };\n      }\n    },\n        // Gobbles a list of arguments within the context of a function call\n    // or array literal. This function also assumes that the opening character\n    // `(` or `[` has already been gobbled, and gobbles expressions and commas\n    // until the terminator character `)` or `]` is encountered.\n    // e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n    gobbleArguments = function gobbleArguments(termination) {\n      var ch_i,\n          args = [],\n          node,\n          closed = false;\n      var separator_count = 0;\n\n      while (index < length) {\n        gobbleSpaces();\n        ch_i = exprICode(index);\n\n        if (ch_i === termination) {\n          // done parsing\n          closed = true;\n          index++;\n\n          if (termination === CPAREN_CODE && separator_count && separator_count >= args.length) {\n            throwError('Unexpected token ' + String.fromCharCode(termination), index);\n          }\n\n          break;\n        } else if (ch_i === COMMA_CODE) {\n          // between expressions\n          index++;\n          separator_count++;\n\n          if (separator_count !== args.length) {\n            // missing argument\n            if (termination === CPAREN_CODE) {\n              throwError('Unexpected token ,', index);\n            } else if (termination === CBRACK_CODE) {\n              for (var arg = args.length; arg < separator_count; arg++) {\n                args.push(null);\n              }\n            }\n          }\n        } else {\n          node = gobbleExpression();\n\n          if (!node || node.type === COMPOUND) {\n            throwError('Expected comma', index);\n          }\n\n          args.push(node);\n        }\n      }\n\n      if (!closed) {\n        throwError('Expected ' + String.fromCharCode(termination), index);\n      }\n\n      return args;\n    },\n        // Responsible for parsing a group of things within parentheses `()`\n    // This function assumes that it needs to gobble the opening parenthesis\n    // and then tries to gobble everything within that parenthesis, assuming\n    // that the next thing it should see is the close parenthesis. If not,\n    // then the expression probably doesn't have a `)`\n    gobbleGroup = function gobbleGroup() {\n      index++;\n      var node = gobbleExpression();\n      gobbleSpaces();\n\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      } else {\n        throwError('Unclosed (', index);\n      }\n    },\n        // Responsible for parsing Array literals `[1, 2, 3]`\n    // This function assumes that it needs to gobble the opening bracket\n    // and then tries to gobble the expressions as arguments.\n    gobbleArray = function gobbleArray() {\n      index++;\n      return {\n        type: ARRAY_EXP,\n        elements: gobbleArguments(CBRACK_CODE)\n      };\n    },\n        nodes = [],\n        ch_i,\n        node;\n\n    while (index < length) {\n      ch_i = exprICode(index); // Expressions can be separated by semicolons, commas, or just inferred without any\n      // separators\n\n      if (ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {\n        index++; // ignore separators\n      } else {\n        // Try to gobble each expression individually\n        if (node = gobbleExpression()) {\n          nodes.push(node); // If we weren't able to find a binary expression and are out of room, then\n          // the expression passed in probably has too much\n        } else if (index < length) {\n          throwError('Unexpected \"' + exprI(index) + '\"', index);\n        }\n      }\n    } // If there's only one expression just try returning the expression\n\n\n    if (nodes.length === 1) {\n      return nodes[0];\n    } else {\n      return {\n        type: COMPOUND,\n        body: nodes\n      };\n    }\n  }; // To be filled in by the template\n\n\n  jsep.version = '0.4.0';\n\n  jsep.toString = function () {\n    return 'JavaScript Expression Parser (JSEP) v' + jsep.version;\n  };\n  /**\n   * @method jsep.addUnaryOp\n   * @param {string} op_name The name of the unary op to add\n   * @return jsep\n   */\n\n\n  jsep.addUnaryOp = function (op_name) {\n    max_unop_len = Math.max(op_name.length, max_unop_len);\n    unary_ops[op_name] = t;\n    return this;\n  };\n  /**\n   * @method jsep.addBinaryOp\n   * @param {string} op_name The name of the binary op to add\n   * @param {number} precedence The precedence of the binary op (can be a float)\n   * @return jsep\n   */\n\n\n  jsep.addBinaryOp = function (op_name, precedence) {\n    max_binop_len = Math.max(op_name.length, max_binop_len);\n    binary_ops[op_name] = precedence;\n    return this;\n  };\n  /**\n   * @method jsep.addIdentifierChar\n   * @param {string} char The additional character to treat as a valid part of an identifier\n   * @return jsep\n   */\n\n\n  jsep.addIdentifierChar = function (char) {\n    additional_identifier_chars[char] = t;\n    return this;\n  };\n  /**\n   * @method jsep.addLiteral\n   * @param {string} literal_name The name of the literal to add\n   * @param {*} literal_value The value of the literal\n   * @return jsep\n   */\n\n\n  jsep.addLiteral = function (literal_name, literal_value) {\n    literals[literal_name] = literal_value;\n    return this;\n  };\n  /**\n   * @method jsep.removeUnaryOp\n   * @param {string} op_name The name of the unary op to remove\n   * @return jsep\n   */\n\n\n  jsep.removeUnaryOp = function (op_name) {\n    delete unary_ops[op_name];\n\n    if (op_name.length === max_unop_len) {\n      max_unop_len = getMaxKeyLen(unary_ops);\n    }\n\n    return this;\n  };\n  /**\n   * @method jsep.removeAllUnaryOps\n   * @return jsep\n   */\n\n\n  jsep.removeAllUnaryOps = function () {\n    unary_ops = {};\n    max_unop_len = 0;\n    return this;\n  };\n  /**\n   * @method jsep.removeIdentifierChar\n   * @param {string} char The additional character to stop treating as a valid part of an identifier\n   * @return jsep\n   */\n\n\n  jsep.removeIdentifierChar = function (char) {\n    delete additional_identifier_chars[char];\n    return this;\n  };\n  /**\n   * @method jsep.removeBinaryOp\n   * @param {string} op_name The name of the binary op to remove\n   * @return jsep\n   */\n\n\n  jsep.removeBinaryOp = function (op_name) {\n    delete binary_ops[op_name];\n\n    if (op_name.length === max_binop_len) {\n      max_binop_len = getMaxKeyLen(binary_ops);\n    }\n\n    return this;\n  };\n  /**\n   * @method jsep.removeAllBinaryOps\n   * @return jsep\n   */\n\n\n  jsep.removeAllBinaryOps = function () {\n    binary_ops = {};\n    max_binop_len = 0;\n    return this;\n  };\n  /**\n   * @method jsep.removeLiteral\n   * @param {string} literal_name The name of the literal to remove\n   * @return jsep\n   */\n\n\n  jsep.removeLiteral = function (literal_name) {\n    delete literals[literal_name];\n    return this;\n  };\n  /**\n   * @method jsep.removeAllLiterals\n   * @return jsep\n   */\n\n\n  jsep.removeAllLiterals = function () {\n    literals = {};\n    return this;\n  }; // In desktop environments, have a way to restore the old value for `jsep`\n\n\n  if (typeof exports === 'undefined') {\n    var old_jsep = root.jsep; // The star of the show! It's a function!\n\n    root.jsep = jsep; // And a courteous function willing to move out of the way for other similarly-named objects!\n\n    jsep.noConflict = function () {\n      if (root.jsep === jsep) {\n        root.jsep = old_jsep;\n      }\n\n      return jsep;\n    };\n  } else {\n    // In Node.JS environments\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = jsep;\n    } else {\n      exports.parse = jsep;\n    }\n  }\n})(this);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      fontWeight: theme.typography.fontWeightMedium,\n      marginTop: -2\n    }\n  };\n};\nvar AlertTitle = /*#__PURE__*/React.forwardRef(function AlertTitle(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    gutterBottom: true,\n    component: \"div\",\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlertTitle'\n})(AlertTitle);","import { createStyles, makeStyles, MenuItem, TextField, Theme } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { serviceSpecifications } from \"../../jacdac-ts/src/jdom/spec\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            minWidth: \"18rem\",\n        }\n    }),\n);\n\nexport default function ServiceSpecificationSelect(props: {\n    label: string,\n    serviceClass: number;\n    setServiceClass: (serviceClass: number) => void;\n    variant?: \"outlined\" | \"filled\" | \"standard\";\n    fullWidth?: boolean;\n    error?: string;\n}) {\n    const { label, serviceClass, setServiceClass, variant, fullWidth, error } = props;\n    const [labelId] = useState('select-' + Math.random());\n    const classes = useStyles();\n    const specs = serviceSpecifications().filter(spec => !/^_/.test(spec.shortId))\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) =>\n        setServiceClass(parseInt(event.target.value));\n\n    return <TextField\n        id={labelId}\n        className={classes.root}\n        label={label}\n        error={!!error}\n        helperText={error}\n        value={serviceClass}\n        select\n        variant={variant}\n        fullWidth={fullWidth}\n        onChange={handleChange}>\n        <MenuItem key=\"none\" value=\"NaN\">No service selected</MenuItem>\n        {specs.map(spec => <MenuItem\n            key={spec.classIdentifier}\n            value={spec.classIdentifier}>{spec.name}</MenuItem>)}\n    </TextField>\n}","import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useChange from \"../jacdac/useChange\"\nimport { Grid, Card, CardActions, Button } from \"@material-ui/core\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport Alert from \"./ui/Alert\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectService(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, onSelect } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader device={service.device} showAvatar={true} />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                    >\n                                        Select\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { Button } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/test/testspec\"\nimport SelectService from \"../SelectService\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\nimport { DISCONNECT } from \"../../../jacdac-ts/src/jdom/constants\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = serviceProviderDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addServiceProvider(bus, hostDefinition)\n\n    if (!hostDefinition) return null\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { serviceClass, onSelect } = props\n    return (\n        <>\n            <h3>Select a device to test</h3>\n            <SelectService serviceClass={serviceClass} onSelect={onSelect} />\n        </>\n    )\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec\n    serviceTest?: jdtest.ServiceTestSpec\n    showStartSimulator?: boolean\n}) {\n    const {\n        serviceSpec,\n        showStartSimulator,\n        serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier),\n    } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    // clear selected service when json changes\n    useEffect(() => {\n        setService(undefined)\n    }, [serviceTest])\n    // clear service if device disconnects\n    useEffect(() => service?.device?.subscribe(DISCONNECT, () => {\n        setService(undefined)\n    }), [service])\n\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip\n                    title=\"go to specification\"\n                    to={`/services/${serviceSpec.shortId}/`}\n                >\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && (\n                <Diagnostics serviceClass={serviceClass} />\n            )}\n            {!service && (\n                <ServiceTestRunnerSelect\n                    serviceClass={serviceClass}\n                    onSelect={handleSelect}\n                />\n            )}\n            {service && (\n                <ServiceTestRunner\n                    service={service}\n                    serviceTest={serviceTest}\n                />\n            )}\n        </>\n    )\n}\n","import { Box, Chip, createStyles, Grid, makeStyles, Typography, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => createStyles({\n    hr: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\"\n    },\n    start: {\n        width: theme.spacing(2)\n    },\n}));\n\nexport default function GridHeader(props: {\n    title?: string,\n    count?: number,\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\",\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props;\n    const classes = useStyles();\n    return <Grid item xs={12}>\n        <Grid container direction=\"row\" spacing={1} justify=\"center\" alignItems=\"center\">\n            <Grid item>\n                <hr className={clsx(classes.hr, classes.start)} />\n            </Grid>\n            <Grid item>\n                {action && <Box component=\"span\" mr={1}>{action}</Box>}\n                <Typography component=\"span\" variant={variant || \"subtitle1\"}>{title}</Typography>\n                {count !== undefined && <Box component=\"span\" ml={0.5}><Chip label={count} /></Box>}\n            </Grid>\n            <Grid item xs>\n                <hr className={classes.hr} />\n            </Grid>\n        </Grid>\n    </Grid>\n}\n","import { useState, useCallback, useLayoutEffect } from \"react\";\nvar m = {\n  characterData: !0,\n  characterDataOldValue: !0,\n  childList: !0,\n  subtree: !0\n};\n\nfunction p(a) {\n  a = [a.firstChild];\n\n  for (var d, c = \"\"; d = a.pop();) {\n    d.nodeType === Node.TEXT_NODE ? c += d.textContent : d.nodeType === Node.ELEMENT_NODE && \"BR\" === d.nodeName && (c += \"\\n\"), d.nextSibling && a.push(d.nextSibling), d.firstChild && a.push(d.firstChild);\n  }\n\n  \"\\n\" !== c[c.length - 1] && (c += \"\\n\");\n  return c;\n}\n\nfunction r(a) {\n  var c = window.getSelection();\n  a = [a.firstChild];\n  var d = c.focusNode;\n  c = c.focusOffset;\n  d && d.nodeType !== Node.TEXT_NODE && (c <= d.childNodes.length - 1 && (d = d.childNodes[c]), c = 0);\n\n  for (var h, k = 0, l = 0, g = \"\"; h = a.pop();) {\n    if (h.nodeType === Node.TEXT_NODE) {\n      var e = h.textContent;\n      h === d && (e = e.slice(0, c));\n      k += e.length;\n      g += e;\n\n      for (var f, n = /\\n/g; f = n.exec(e);) {\n        g = e.slice(f.index + 1), l++;\n      }\n\n      if (h === d) {\n        break;\n      }\n    } else {\n      h.nodeType === Node.ELEMENT_NODE && \"BR\" === h.nodeName && (g = \"\", l++, k++);\n    }\n\n    h.nextSibling && h !== d && a.push(h.nextSibling);\n    h.firstChild && a.push(h.firstChild);\n  }\n\n  return {\n    position: k,\n    content: g,\n    line: l\n  };\n}\n\nfunction t(a, c) {\n  for (var d = window.getSelection(), k = document.createRange(), l = [a.firstChild], g = 0; a = l.pop();) {\n    if (a.nodeType === Node.TEXT_NODE) {\n      var h = a.textContent.length;\n\n      if (g + h >= c) {\n        (c -= g) === h ? k.setStartAfter(a) : k.setStart(a, c);\n        break;\n      }\n\n      g += a.textContent.length;\n    } else if (a.nodeType === Node.ELEMENT_NODE && \"BR\" === a.nodeName) {\n      if (g + 1 >= c) {\n        k.setStartAfter(a);\n        break;\n      }\n\n      g++;\n    }\n\n    a.nextSibling && l.push(a.nextSibling);\n    a.firstChild && l.push(a.firstChild);\n  }\n\n  d.empty();\n  d.addRange(k);\n}\n\nfunction B(a) {\n  var c = window.getSelection(),\n      d = window.getSelection().getRangeAt(0);\n  a = document.createTextNode(a);\n  c.getRangeAt(0).deleteContents();\n  d.insertNode(a);\n  (d = document.createRange()).setStartAfter(a);\n  c.empty();\n  c.addRange(d);\n}\n\nexport function useEditable(a, c, d) {\n  function k() {\n    e[0].disconnect();\n  }\n\n  function l() {\n    e[0].disconnect();\n    e[1] = !0;\n  }\n\n  function g() {\n    e[6] = -1;\n  }\n\n  d || (d = {});\n  var h = useState([])[1],\n      e = useState(function () {\n    var a = [null, !1, c, [], [], -1, -1];\n    \"undefined\" != typeof MutationObserver && (a[0] = new MutationObserver(function e(e) {\n      var d;\n      (d = a[3]).push.apply(d, e);\n    }));\n    return a;\n  })[0],\n      n = useCallback(function (d) {\n    var f = a.current;\n\n    if (f) {\n      var c = r(f);\n      f = p(f);\n      e[6] = c.position + (d.length - f.length);\n      e[2](d, c);\n    }\n  }, []);\n\n  if (\"object\" != typeof navigator) {\n    return n;\n  }\n\n  useLayoutEffect(function () {\n    e[2] = c;\n\n    if (a.current && !d.disabled) {\n      return e[1] = !1, e[0].observe(a.current, m), 0 <= e[6] && t(a.current, e[6]), k;\n    }\n  });\n  useLayoutEffect(function () {\n    if (!a.current || d.disabled) {\n      e[4].length = 0, e[5] = -1;\n    } else {\n      var f = a.current;\n      -1 < e[6] && (f.focus(), t(f, e[6]));\n      var c = f.style.whiteSpace,\n          k = f.contentEditable,\n          u = !0;\n\n      try {\n        f.contentEditable = \"plaintext-only\";\n      } catch (b) {\n        f.contentEditable = \"true\", u = !1;\n      }\n\n      \"pre\" !== c && (f.style.whiteSpace = \"pre-wrap\");\n      d.indentation && (f.style.tabSize = f.style.MozTabSize = \"\" + d.indentation);\n\n      var v,\n          C = new RegExp(\"^(?:\" + \" \".repeat(d.indentation || 0) + \"|\\\\t)\"),\n          q = function q(b) {\n        if (a.current && -1 !== e[6]) {\n          var d = e[4],\n              c = p(f),\n              h = r(f),\n              g = new Date().valueOf(),\n              k = d[e[5]];\n          !b && 500 > g - v || k && k[1] === c ? v = g : (d[b = ++e[5]] = [h, c], d.splice(b + 1), 500 < b && (e[5]--, d.shift()));\n        }\n      },\n          w = function w() {\n        var b;\n        (b = e[3]).push.apply(b, e[0].takeRecords());\n\n        if (e[3].length) {\n          l();\n          b = p(f);\n          var d = r(f);\n          e[6] = d.position;\n\n          for (var a, c; a = e[3].pop();) {\n            null !== a.oldValue && (a.target.textContent = a.oldValue);\n\n            for (c = a.removedNodes.length - 1; 0 <= c; c--) {\n              a.target.insertBefore(a.removedNodes[c], a.nextSibling);\n            }\n\n            for (c = a.addedNodes.length - 1; 0 <= c; c--) {\n              a.addedNodes[c].parentNode && a.target.removeChild(a.addedNodes[c]);\n            }\n          }\n\n          e[2](b, d);\n        }\n      },\n          x = function x(b) {\n        if (!b.defaultPrevented && b.target === f) {\n          if (e[1]) {\n            return b.preventDefault(), h([]);\n          }\n\n          if ((b.metaKey || b.ctrlKey) && \"KeyZ\" === b.code) {\n            b.preventDefault(), b.shiftKey ? (b = ++e[5], (b = e[4][b]) || (e[5] = e[4].length - 1)) : (b = --e[5], (b = e[4][b]) || (e[5] = 0)), b && (l(), e[6] = b[0].position, e[2](b[1], b[0]));\n          } else if (q(), \"Enter\" === b.key) {\n            b.preventDefault();\n            b = r(f);\n            var a = /\\S/g.exec(b.content);\n            B(b = \"\\n\" + b.content.slice(0, a ? a.index : b.content.length));\n          } else if (!u && \"Backspace\" === b.key) {\n            b.preventDefault(), (b = window.getSelection().getRangeAt(0)).startContainer !== b.endContainer || b.startOffset !== b.endOffset ? b.deleteContents() : (l(), b = r(f), b = Math.max(0, b.position - 1), a = p(f), n(a.slice(0, b) + a.slice(b + 1)));\n          } else if (d.indentation && \"Tab\" === b.key) {\n            b.preventDefault();\n            var c = (a = r(f)).position - a.content.length,\n                g = p(f);\n            b = b.shiftKey ? g.slice(0, c) + a.content.replace(C, \"\") + g.slice(c + a.content.length) : g.slice(0, c) + \"\\t\" + g.slice(c);\n            n(b);\n          }\n        }\n      },\n          y = function y(a) {\n        a.defaultPrevented || a.isComposing || ((a.metaKey || a.ctrlKey) && \"KeyZ\" === a.code || q(), w(), f.focus());\n      },\n          z = function z() {\n        e[6] = r(f).position;\n      },\n          A = function A(a) {\n        a.preventDefault();\n        q(!0);\n        B(a.clipboardData.getData(\"text/plain\"));\n        q(!0);\n        w();\n      };\n\n      window.addEventListener(\"keydown\", x);\n      f.addEventListener(\"focus\", z);\n      f.addEventListener(\"blur\", g);\n      f.addEventListener(\"paste\", A);\n      f.addEventListener(\"keyup\", y);\n      return function () {\n        window.removeEventListener(\"keydown\", x);\n        f.removeEventListener(\"focus\", z);\n        f.removeEventListener(\"blur\", g);\n        f.removeEventListener(\"paste\", A);\n        f.removeEventListener(\"keyup\", y);\n        f.style.whiteSpace = c;\n        f.contentEditable = k;\n      };\n    }\n  }, [a.current, d.disabled, d.indentation]);\n  return n;\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react/jsx-key */\nimport React, { useContext, useRef, lazy } from \"react\"\nimport Highlight, {\n    defaultProps,\n    Language,\n    PrismTheme,\n} from \"prism-react-renderer\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport LIGHT_THEME from \"prism-react-renderer/themes/github\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DARK_THEME from \"prism-react-renderer/themes/vsDark\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useEditable } from \"use-editable\"\nimport { Alert } from \"@material-ui/lab\"\nimport { Grid, Tooltip, withStyles } from \"@material-ui/core\"\nimport Suspense from \"../ui/Suspense\";\nconst GithubPullRequestButton = lazy(() => import('../GithubPullRequestButton'));\n\nconst AnnotationTooltip = withStyles(theme => ({\n    arrow: {\n        color: theme.palette.error.main,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.common.white,\n        boxShadow: theme.shadows[1],\n        fontSize: theme.typography.body2.fontSize,\n    },\n}))(Tooltip)\n\nexport default function HighlightTextField(props: {\n    language: string\n    code: string\n    onChange: (newValue: string) => void\n    annotations?: jdspec.Diagnostic[]\n    pullRequestTitle?: string\n    pullRequestPath?: string\n    pullRequestDescription?: string\n}) {\n    const {\n        code,\n        onChange,\n        language,\n        annotations,\n        pullRequestTitle,\n        pullRequestPath,\n        pullRequestDescription,\n    } = props\n    const { darkMode } = useContext(DarkModeContext)\n    const theme = (darkMode === \"dark\" ? DARK_THEME : LIGHT_THEME) as PrismTheme\n    const editorRef = useRef(null)\n\n    useEditable(editorRef, onChange, {\n        disabled: false,\n        indentation: 4,\n    })\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs={12}>\n                <Highlight\n                    {...defaultProps}\n                    code={code}\n                    language={language as Language}\n                    theme={theme}\n                >\n                    {({ className, style, tokens, getTokenProps }) => (\n                        <pre\n                            ref={editorRef}\n                            className={className}\n                            spellCheck={false}\n                            style={{\n                                ...style,\n                                ...{\n                                    minHeight: \"12rem\",\n                                    whiteSpace: \"pre-wrap\",\n                                },\n                            }}\n                        >\n                            {tokens.map((line, i) => {\n                                const annotation = annotations?.find(\n                                    a => a.line === i + 1\n                                )\n                                const title = annotation?.message\n                                const el = (\n                                    <span\n                                        key={i}\n                                        style={\n                                            annotation && {\n                                                borderBottom: \"dashed 1px red\",\n                                            }\n                                        }\n                                    >\n                                        {line\n                                            .filter(token => !token.empty)\n                                            .map((token, key) => (\n                                                <span\n                                                    {...getTokenProps({\n                                                        token,\n                                                        key,\n                                                    })}\n                                                />\n                                            ))}\n                                        {i < tokens.length - 1 ? \"\\n\" : null}\n                                    </span>\n                                )\n                                return title ? (\n                                    <AnnotationTooltip\n                                        title={title}\n                                        arrow\n                                        key={i}\n                                    >\n                                        {el}\n                                    </AnnotationTooltip>\n                                ) : (\n                                    el\n                                )\n                            })}\n                        </pre>\n                    )}\n                </Highlight>\n            </Grid>\n            {!!annotations?.length && (\n                <Grid item xs={12}>\n                    <Alert severity=\"error\">\n                        <ul>\n                            {annotations.map((a, i) => (\n                                <li key={i}>\n                                    line {a.line}: {a.message}\n                                </li>\n                            ))}\n                        </ul>\n                    </Alert>\n                </Grid>\n            )}\n            {pullRequestTitle && pullRequestPath && (\n                <Grid item>\n                    <Suspense>\n                        <GithubPullRequestButton\n                            title={pullRequestTitle}\n                            head={pullRequestPath}\n                            description={pullRequestDescription}\n                            files={{\n                                [pullRequestPath + \".md\"]: code,\n                            }}\n                        />\n                    </Suspense>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"jdspec.d.ts\" />\n/// <reference path=\"jdtest.d.ts\" />\n\nimport { \n    parseIntFloat, \n    getRegister, \n    exprVisitor,\n    isBoolOrNumericFormat\n} from \"./jdutils\"\nimport { getTestCommandFunctions, getTestExpressionFunctions } from \"./jdtestfuns\"\nimport jsep from \"jsep\"\n\nconst supportedExpressions: jsep.ExpressionType[] = [\n    \"MemberExpression\",\n    \"ArrayExpression\",\n    \"BinaryExpression\",\n    \"CallExpression\",\n    \"Identifier\",\n    \"Literal\",\n    \"UnaryExpression\",\n    \"LogicalExpression\",\n]\n\n// we parse a test with respect to an existing ServiceSpec\nexport function parseSpecificationTestMarkdownToJSON(\n    filecontent: string,\n    spec: jdspec.ServiceSpec,\n    filename = \"\"\n): jdtest.ServiceTestSpec {\n    if (!spec)\n        return undefined;\n\n    filecontent = (filecontent || \"\").replace(/\\r/g, \"\")\n    const info: jdtest.ServiceTestSpec = {\n        description: \"\",\n        serviceClassIdentifier: spec.classIdentifier,\n        tests: [],\n    }\n\n    let backticksType = \"\"\n    const errors: jdspec.Diagnostic[] = []\n    let lineNo = 0\n    let currentTest: jdtest.TestSpec = null\n    let testHeading = \"\"\n    let testPrompt = \"\"\n\n    try {\n        for (const line of filecontent.split(/\\n/)) {\n            lineNo++\n            processLine(line)\n        }\n    } catch (e) {\n        error(\"exception: \" + e.message)\n    }\n\n    if (currentTest) finishTest()\n\n    if (errors.length) info.errors = errors\n\n    return info\n\n    function processLine(line: string) {\n        if (backticksType) {\n            if (line.trim() == \"```\") {\n                backticksType = null\n                if (backticksType == \"default\") return\n            }\n        } else {\n            const m = /^```(.*)/.exec(line)\n            if (m) {\n                backticksType = m[1] || \"default\"\n                if (backticksType == \"default\") return\n            }\n        }\n\n        const interpret =\n            backticksType == \"default\" || \n            line.slice(0, 4) == \"    \" ||\n            /^\\t/.exec(line)\n\n        if (!interpret) {\n            const m = /^(#+)\\s*(.*)/.exec(line)\n            if (m) {\n                testHeading = \"\"\n                testPrompt = \"\"\n                const [, hd, cont] = m\n                if (hd == \"#\") {\n                    if (!info.description)\n                        info.description = cont.trim()\n                    else \n                        error(\"use ## to start a test, not #\")\n                } else if (hd == \"##\") {\n                    if (currentTest) finishTest()\n                    testHeading = cont.trim()\n                }\n            } else {\n                testPrompt += line\n            }\n        } else {\n            const expanded = line.replace(/\\/\\/.*/, \"\").trim()\n            if (!expanded) return\n            processCommand(expanded)\n        }\n    }\n\n    function argsRequiredOptional(args: any[], optional: boolean = false) {\n        return args.filter(a => !optional && typeof(a) === \"string\" || optional && typeof(a) === \"object\")\n    }\n\n    function processCommand(expanded: string) {\n        // TODO: if there is a prompt, the test has no commands, and\n        // TODO: the first command is not ask/say\n        // TODO: then add a say command\n\n        if (!currentTest) {\n            if (!testHeading)\n                error(`every test must have a description (via ##)`)\n            currentTest = {\n                description: testHeading,\n                prompt: testPrompt,\n                registers: [],\n                events: [],\n                testCommands: [],\n            }\n            testHeading = \"\"\n            testPrompt = \"\"\n        }\n        const call = /^([a-zA-Z]\\w*)\\(.*\\)$/.exec(expanded)\n        if (!call) {\n            error(\n                `a command must be a call to a registered test function (JavaScript syntax)`\n            )\n            return\n        }\n        const [, callee] = call\n        const testCommandFunctions = getTestCommandFunctions();\n        const cmdIndex = testCommandFunctions.findIndex(r => callee == r.id)\n        if (cmdIndex < 0) {\n            error(`${callee} is not a registered test command function.`)\n            return\n        }\n        const root: jsep.CallExpression = <jsep.CallExpression>jsep(expanded)\n        if (\n            !root ||\n            !root.type ||\n            root.type != \"CallExpression\" ||\n            !root.callee ||\n            !root.arguments\n        ) {\n            error(`a command must be a call expression in JavaScript syntax`)\n        } else {\n            // check for unsupported expression types\n            exprVisitor(null, root, (p, c) => {\n                if (supportedExpressions.indexOf(c.type) < 0)\n                    error(`Expression of type ${c.type} not currently supported`)\n            })\n            // check arguments\n            const command = testCommandFunctions[cmdIndex]\n            const minArgs = argsRequiredOptional(command.args).length\n            const maxArgs = command.args.length\n            if (root.arguments.length < minArgs)\n                error(\n                    `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n                )\n            else if (root.arguments.length > maxArgs) {\n                error(\n                    `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n                )\n            }\n            else {\n                // deal with optional arguments\n                let newExpressions: jsep.Expression[] = []\n                for(let i = root.arguments.length; i<command.args.length;i++) {\n                    let [name, def] = command.args[i] as [string, any] \n                    const lit: jsep.Literal = {\n                        type: \"Literal\",\n                        value: def,\n                        raw: def.toString(),\n                    }\n                    newExpressions.push(lit)\n                }\n                root.arguments = root.arguments.concat(newExpressions)\n                // type checking of arguments.\n                processArguments(command, root.arguments);\n                // check all calls in subexpressions\n                processCalls(command, root.arguments)\n            }\n            currentTest.testCommands.push({ prompt: testPrompt, call: root })\n            testPrompt = \"\"\n        }\n\n        function processArguments(command: jdtest.TestFunctionDescription, args: jsep.Expression[]) {\n            let eventSymTable: jdspec.PacketInfo[] = []\n            args.forEach((arg, a) => {\n                let argType = command.args[a]\n                if (typeof(argType) === \"object\")\n                    argType = command.args[a][0]\n                if (argType === \"register\" || argType === \"event\") {\n                   if (arg.type !== \"Identifier\")\n                        error(\n                            `${callee} expects a ${argType} in argument position ${a + 1}`\n                        )\n                   else if (argType === \"event\" && a === 0) { \n                        let pkt = lookupEvent(arg)\n                        if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                   } else if (argType === \"register\") {\n                        try {\n                            lookupRegister((arg as jsep.Identifier).name, \"\")\n                        } catch (e) {\n                            error(e.message)\n                        }\n                   }\n                } else if (argType === \"events\") {\n                    if (arg.type != 'ArrayExpression')\n                        error(`events function expects a list of service events`)\n                    else {\n                        (arg as jsep.ArrayExpression).elements.forEach(lookupEvent)\n                    }\n                } else if (argType === \"number\" || argType === \"boolean\") {\n                    exprVisitor(root, arg, (p, c) => {\n                        if (p.type !== 'MemberExpression' && c.type === 'Identifier') {\n                            lookupReplace(eventSymTable, p, c as jsep.Identifier)\n                        } else if (c.type === 'ArrayExpression') {\n                            error(\n                                `array expression not allowed in this context`\n                            )\n                        } else if (c.type === 'MemberExpression') {\n                            const member = c as jsep.MemberExpression;\n                            // A member expression must be of form id1.id2\n                            if (member.object.type !== 'Identifier' || member.property.type !== 'Identifier' || member.computed) {\n                                error('property access must be of form id.property')\n                            } else {\n                                lookupReplace(eventSymTable, p, c as jsep.MemberExpression)\n                            }\n                        }\n                    })\n                } else {\n                    error(`unexpected argument type (${argType}) in jdtestfuns.ts`)\n                }\n            })\n        }\n\n        function processCalls(command: jdtest.TestFunctionDescription, args: jsep.Expression[]) {\n            const testExpressionFunctions = getTestExpressionFunctions()\n            args.forEach((arg, a) => {\n                const argType = command.args[a]\n                exprVisitor(root, arg, (parent, callExpr: jsep.CallExpression) => {\n                    if (callExpr.type !== 'CallExpression')\n                        return;\n                    if (callExpr.callee.type !== \"Identifier\")\n                        error(`all calls must be direct calls`)\n                    const id = (<jsep.Identifier>callExpr.callee).name\n                    const tef = testExpressionFunctions.find(r => id == r.id)\n                    if (!tef)\n                        error(\n                            `${id} is not a registered test expression function.`\n                        )\n                    if (tef.context === \"expression\" || tef.context === \"either\") {\n                        if (argType != \"boolean\")\n                            error(`${id} expression function can only be used inside a boolean expression`)\n                        // no nested calls\n                        if (command.context === \"expression\" || command.context === \"either\") \n                            error(`cannot nest ${tef.id} underneath ${command.id}`)\n                        // look under tef\n                        exprVisitor(null, callExpr, (parent, ce: jsep.CallExpression) => {\n                            if (ce.type !== 'CallExpression')\n                                return;\n                            if (ce.callee.type === \"Identifier\" && (<jsep.Identifier>ce.callee).name)\n                                error(`cannot nest ${(<jsep.Identifier>ce.callee).name} underneath ${id}`)\n                        })\n                    }\n                    const expected = tef.args.length\n                    if (expected !== callExpr.arguments.length)\n                        error(\n                            `${callee} expects ${expected} arguments; got ${callExpr.arguments.length}`\n                        )\n                })\n            })\n        }\n\n        function lookupEvent(e: jsep.Expression) {\n            const events = spec.packets?.filter(pkt => pkt.kind == \"event\")\n            if (e.type !== 'Identifier') {\n                error(`event identifier expected`)\n            } else {\n                const id = (e as jsep.Identifier).name\n                const pkt = events.find(p => p.name === id)\n                if (!pkt) {\n                    error(`no event ${id} in specification`)\n                } else {\n                    if (currentTest.events.indexOf(id) < 0)\n                        currentTest.events.push(id)\n                    return pkt;\n                }\n            }\n            return null;\n        }\n    }\n\n    function lookupRegister(root:string, fld:string)  {\n        let reg = getRegister(spec, root, fld)\n        if (reg.pkt && (!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat) ||\n                        reg.fld && reg.fld.type && !isBoolOrNumericFormat(reg.fld.type)))\n            error(\"only bool/numeric registers allowed in tests\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n        if (currentTest.registers.indexOf(root) < 0)\n            currentTest.registers.push(root)\n    }\n\n    function lookupReplace(events: jdspec.PacketInfo[], parent: jsep.Expression, child: jsep.Identifier | jsep.MemberExpression) {\n        if (Array.isArray(parent)) {\n            let replace = lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child)\n                    parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (parent?.type === \"CallExpression\" && child === (<jsep.CallExpression>parent).callee)\n                return;\n            let replace = lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n\n        function lookup(events: jdspec.PacketInfo[], parent: jsep.Expression, child: jsep.Identifier | jsep.MemberExpression) {\n            try {\n                try {\n                    let [root,fld] = toName()\n                    const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                    const lit: jsep.Literal = {\n                        type: \"Literal\",\n                        value: val,\n                        raw: val.toString(),\n                    }\n                    return lit\n                } catch (e) {\n                    let [root,fld] = toName()\n                    lookupRegister(root, fld)\n                }\n            } catch (e) {\n                if (events.length > 0) {\n                    let [root,fld] = toName()\n                    let pkt = events.find(pkt => pkt.name === root)\n                    if (!pkt)\n                        error(`event ${root} not bound correctly`)\n                    else if (!fld && pkt.fields.length > 0)\n                        error(`event ${root} has fields, but no field specified`)\n                    else if (fld && !pkt.fields.find(f => f.name === fld))\n                        error(`Field ${fld} of event ${root} not found in specification`)\n                } else {\n                    error(e.message)\n                }\n            }\n            return undefined\n            function toName() {\n                if (child.type !== 'MemberExpression')\n                    return [child.name, \"\"];\n                else {\n                    return [(child.object as jsep.Identifier).name,\n                            (child.property as jsep.Identifier).name]\n                }\n            }\n        }\n    }\n\n    function finishTest() {\n        info.tests.push(currentTest)\n        currentTest = null\n    }\n\n    function error(msg: string) {\n        if (!msg) msg = \"syntax error\"\n        if (errors.some(e => e.line == lineNo && e.message == msg)) return\n        errors.push({ file: filename, line: lineNo, message: msg })\n    }\n}\n","import React, { useContext, useEffect, useMemo } from \"react\"\nimport { Button, Grid } from \"@material-ui/core\"\nimport { parseSpecificationTestMarkdownToJSON } from \"../../../jacdac-ts/jacdac-spec/spectool/jdtest\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport useLocalStorage from \"../useLocalStorage\"\nimport HighlightTextField from \"../ui/HighlightTextField\"\nimport ServiceSpecificationSelect from \"../ServiceSpecificationSelect\"\nimport { SRV_BUTTON } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ServiceTest from \"../test/ServiceTest\"\nimport { fetchText } from \"../github\"\nimport AppContext from \"../AppContext\"\nimport Markdown from \"../ui/Markdown\"\nimport GridHeader from \"../ui/GridHeader\"\n\nconst SERVICE_TEST_SERVICE_STORAGE_KEY = \"jacdac:servicetesteditor:service\"\nconst SERVICE_TEST_SOURCE_STORAGE_KEY = \"jacdac:servicetesteditorsource\"\nconst SERVICE_MARKDOWN_SOURCE_STORAGE_KEY =\n    \"jacdac:servicetesteditorsource:markdown\"\n\nexport default function ServiceTestEditor() {\n    const { setError } = useContext(AppContext)\n    const [serviceClass, setServiceClass] = useLocalStorage<number>(\n        SERVICE_TEST_SERVICE_STORAGE_KEY,\n        SRV_BUTTON\n    )\n    const [source, setSource] = useLocalStorage(\n        SERVICE_TEST_SOURCE_STORAGE_KEY,\n        \"\"\n    )\n    const [markdownSource, setMarkdownSource] = useLocalStorage(\n        SERVICE_MARKDOWN_SOURCE_STORAGE_KEY,\n        \"\"\n    )\n    const serviceSpec = useMemo(\n        () => serviceSpecificationFromClassIdentifier(serviceClass),\n        [serviceClass]\n    )\n    const json = useMemo(\n        () => parseSpecificationTestMarkdownToJSON(source, serviceSpec),\n        [source, serviceSpec]\n    )\n    const servicePath =\n        json &&\n        `services/tests/${(\n            serviceSpec.camelName ||\n            serviceSpec.shortId ||\n            `0x${serviceSpec.classIdentifier.toString(16)}`\n        ).toLowerCase()}`\n    const handleLoadFromGithub = async () => {\n        try {\n            const ghSource = await fetchText(\n                \"microsoft/jacdac\",\n                \"main\",\n                `services/tests/${serviceSpec.shortId}.md`,\n                \"text/plain\"\n            )\n            setSource(ghSource || \"\")\n        } catch (e) {\n            setError(e)\n        }\n        try {\n            const ghSource = await fetchText(\n                \"microsoft/jacdac\",\n                \"main\",\n                `services/${serviceSpec.shortId}.md`,\n                \"text/plain\"\n            )\n            if (ghSource) setMarkdownSource(ghSource)\n            else setError(\"Specification source not found\")\n        } catch (e) {\n            setError(e)\n        }\n    }\n    return (\n        <Grid spacing={2} container>\n            <Grid item xs={12}>\n                <Grid container spacing={2} direction=\"row\">\n                    <Grid item>\n                        <ServiceSpecificationSelect\n                            label={\"Select a service to test\"}\n                            serviceClass={serviceClass}\n                            setServiceClass={setServiceClass}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant=\"outlined\"\n                            disabled={!serviceSpec}\n                            onClick={handleLoadFromGithub}\n                        >\n                            Load from GitHub\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid spacing={2} container>\n                <Grid item xs={12} sm={7}>\n                    <HighlightTextField\n                        code={source}\n                        language={\"markdown\"}\n                        onChange={setSource}\n                        annotations={json?.errors}\n                        pullRequestTitle={\n                            json && `Service test: ${serviceSpec.name}`\n                        }\n                        pullRequestPath={servicePath}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Markdown source={markdownSource} />\n                </Grid>\n            </Grid>\n            <GridHeader title=\"Preview\" />\n            {json && (\n                <Grid item xs={12} xl={7}>\n                    <ServiceTest\n                        showStartSimulator={true}\n                        serviceSpec={serviceSpec}\n                        serviceTest={json}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n","import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceTestEditor from \"../../components/tools/ServiceTestEditor\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>Service Test Editor</h1>\n            <p>\n                Read the{\" \"}\n                <Link to=\"/reference/service-tests\">\n                    service test\n                </Link>{\" \"}\n                documentation.\n            </p>\n            <ServiceTestEditor />\n        </>\n    )\n}\n"],"sourceRoot":""}