{"version":3,"sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","webpack://jacdac-docs/./jacdac-ts/src/jdom/sensoraggregatorclient.ts","webpack://jacdac-docs/./src/components/ServiceList.tsx","webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/components/alert/DeviceLostAlert.tsx","webpack://jacdac-docs/./src/components/ui/CircularProgressWithLabel.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useDb.ts","webpack://jacdac-docs/./jacdac-ts/src/jdom/modelrunner.ts","webpack://jacdac-docs/./src/components/SensorAggregatorConfigView.tsx","webpack://jacdac-docs/./src/components/useCall.tsx","webpack://jacdac-docs/./node_modules/@material-ui/icons/esm/Link.js","webpack://jacdac-docs/./src/pages/tools/model-uploader.tsx"],"names":["SensorAggregatorClient","service","registersUseAcks","setInputs","cfg","error","mapType","tp","SensorAggregatorSampleType","msg","Error","inputs","totalSampleSize","map","input","deviceId","serviceIndex","serviceClass","specification","serviceSpecificationFromClassIdentifier","toString","freeze","readingReg","packets","find","isReading","sampleType","undefined","sampleSize","sampleShift","fields","field","Math","abs","storage","shift","bufferConcat","fromHex","Uint8Array","jdpack","JD_SERIAL_MAX_PAYLOAD_SIZE","unshift","samplingInterval","samplesInWindow","register","SensorAggregatorReg","sendSetAsync","bufferConcatMany","collect","numSamples","sendSetPackedAsync","subscribeSample","handler","reg","mount","subscribe","REPORT_RECEIVE","bufferToArray","data","NumberFormat","getReg","id","f","refresh","stats","info","r","intValue","Object","keys","JDServiceClient","ServiceListItem","props","content","checked","checkedDisabled","toggleChecked","actions","device","handleCheck","ServiceList","selected","toggleSelected","alertMissing","useContext","JacdacContext","bus","services","useChange","n","gridBreakpoints","useGridBreakpoints","length","handleSelected","handleChecked","serviceContent","serviceActions","useStyles","makeStyles","theme","createStyles","button","marginLeft","spacing","NoSsrConnectAlert","classes","transports","devices","b","ignoreSelf","spec","name","transport","type","ConnectAlert","DeviceLostAlert","lost","useEventRaised","LOST","FOUND","dev","CircularProgressWithLabel","round","value","itemCount","AppContext","drawerType","xs","sm","md","lg","xl","DrawerType","useDbBlob","DbContext","db","useState","_value","_setValue","values","blobs","useEffect","_mounted","DB_VALUE_CHANGE","changed","get","v","console","log","set","useEffectAsync","mounted","blob","setBlob","useDbUint8Array","blobName","model","setModel","readBlobToUint8Array","buf","useDbString","readBlobToText","t","useDbJSON","JSONTryParse","isMLModelSupported","formatRegValue","U","getMLModelFormatName","SRV_MODEL_RUNNER","enums","members","m0","read32","m1","toHex","slice","ModelRunnerClient","isModelSupported","ModelRunnerReg","subscribeResults","deployModel","onProgress","sendCmdAwaitResponseAsync","Packet","ModelRunnerCmd","resp","jdunpack","pipePort","pipe","OutPipe","chunkSize","i","send","close","autoInvoke","everySamples","modelStats","modelSize","arenaSize","inputShape","outputShape","lastError","SensorAggregatorInputConfigView","serviceName","SensorAggregatorConfigView","config","useCall","setAppError","setError","running","setRunning","progress","setProgress","handleProgress","p","call","e","callAsync","alert","ImportButton","lazy","ModelContent","useRegisterUnpackedValue","prettySize","ModelActions","sensorAggregatorService","sensorInput","modelDisabled","handleDeployModel","aggregator","runner","ModelUploader","importing","setImporting","sensorConfig","setSensorConfig","ServiceManagerContext","modelStore","handleTfmodelFiles","files","file","handleClearModel","handleSensorConfigFiles","handleClearConfiguration","handleLoadModel","loadFile","handleLoadInputConfiguration","models","_","inputConfigurations","byteLength","path","size","iconfig","SRV_SENSOR_AGGREGATOR"],"mappings":"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","file":"a77c613bd0faa103b953c0d40475a17f2d569635-c876b99a204c0973d33c.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","import {\n    SensorAggregatorReg,\n    SensorAggregatorSampleType,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport { bufferToArray, NumberFormat } from \"./buffer\"\nimport { JD_SERIAL_MAX_PAYLOAD_SIZE, REPORT_RECEIVE } from \"./constants\"\nimport { jdpack } from \"./pack\"\nimport { JDRegister } from \"./register\"\nimport { JDService } from \"./service\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { isReading, serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { bufferConcat, bufferConcatMany, fromHex } from \"./utils\"\n\nexport interface SensorAggregatorInputConfig {\n    serviceClass: number\n    // if specified, also specify serviceIndex\n    deviceId?: string\n    serviceIndex?: number\n}\n\nexport interface SensorAggregatorConfig {\n    samplingInterval: number // ms\n    samplesInWindow: number\n    inputs: SensorAggregatorInputConfig[]\n}\n\nexport interface SensorAggregatorStats {\n    numSamples: number\n    sampleSize: number\n}\n\nexport class SensorAggregatorClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        this.service.registersUseAcks = true\n    }\n\n    async setInputs(cfg: SensorAggregatorConfig) {\n        function error(msg: string) {\n            throw new Error(\"Aggregator inputs: \" + msg)\n        }\n        function mapType(tp: number) {\n            switch (tp) {\n                case 1:\n                    return SensorAggregatorSampleType.U8\n                case 2:\n                    return SensorAggregatorSampleType.U16\n                case 4:\n                    return SensorAggregatorSampleType.U32\n                case -1:\n                    return SensorAggregatorSampleType.I8\n                case -2:\n                    return SensorAggregatorSampleType.I16\n                case -4:\n                    return SensorAggregatorSampleType.I32\n                default:\n                    error(\"unknown storage type\")\n            }\n        }\n\n        if (!cfg || !cfg.inputs) error(\"invalid input format\")\n\n        let totalSampleSize = 0\n        const inputs = cfg.inputs?.map(input => {\n            const { deviceId, serviceIndex, serviceClass } = input\n            if (!!deviceId !== !!serviceIndex)\n                error(`deviceId and serviceIndex must be specified together`)\n            const specification = serviceSpecificationFromClassIdentifier(\n                serviceClass\n            )\n            if (!specification)\n                error(\n                    `missing specification from service 0x${serviceClass.toString(\n                        16\n                    )}`\n                )\n            const freeze = !!deviceId\n            const readingReg = specification.packets.find(isReading)\n            if (!readingReg)\n                error(\n                    `service 0x${serviceClass.toString(\n                        16\n                    )} does not have a reading register`\n                )\n            let sampleType: SensorAggregatorSampleType = undefined\n            let sampleSize = 0\n            let sampleShift = 0\n            for (const field of readingReg.fields) {\n                sampleSize += Math.abs(field.storage)\n                if (sampleType === undefined) {\n                    sampleType = mapType(field.storage)\n                    sampleShift = field.shift || 0\n                }\n                if (\n                    sampleType != mapType(field.storage) ||\n                    sampleShift != (field.shift || 0)\n                )\n                    error(\"heterogenous field types\")\n            }\n            totalSampleSize += sampleSize\n            return bufferConcat(\n                freeze ? fromHex(deviceId) : new Uint8Array(8),\n                jdpack(\"u32 u8 u8 u8 i8\", [\n                    serviceClass,\n                    freeze ? serviceIndex : 0,\n                    sampleSize,\n                    sampleType,\n                    sampleShift,\n                ])\n            )\n        })\n\n        if (totalSampleSize > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            error(\"samples won't fit in packet\")\n\n        // u32 is x[4]\n        inputs.unshift(\n            jdpack(\"u16 u16 u32\", [\n                cfg.samplingInterval,\n                cfg.samplesInWindow,\n                0,\n            ])\n        )\n        await this.service\n            .register(SensorAggregatorReg.Inputs)\n            .sendSetAsync(bufferConcatMany(inputs))\n    }\n\n    async collect(numSamples: number) {\n        await this.service\n            .register(SensorAggregatorReg.StreamingSamples)\n            .sendSetPackedAsync(\"u32\", [numSamples])\n    }\n\n    subscribeSample(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(SensorAggregatorReg.CurrentSample)\n        return this.mount(\n            reg.subscribe(REPORT_RECEIVE, () =>\n                handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n            )\n        )\n    }\n\n    private async getReg(id: SensorAggregatorReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async stats(): Promise<SensorAggregatorStats> {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const info: any = {\n            numSamples: this.getReg(\n                SensorAggregatorReg.NumSamples,\n                r => r.intValue\n            ),\n            sampleSize: this.getReg(\n                SensorAggregatorReg.SampleSize,\n                r => r.intValue\n            ),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\n","import React, { useContext } from \"react\"\nimport {\n    Grid,\n    CardContent,\n    Card,\n    CardActions,\n    Switch,\n    Box,\n} from \"@material-ui/core\"\nimport useChange from \"../jacdac/useChange\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\nimport { DeviceLostAlert } from \"./alert/DeviceLostAlert\"\nimport Alert from \"./ui/Alert\"\n\nfunction ServiceListItem(props: {\n    service: JDService\n    content?: JSX.Element | JSX.Element[]\n    checked?: boolean\n    checkedDisabled?: boolean\n    toggleChecked?: () => void\n    actions?: JSX.Element | JSX.Element[]\n}) {\n    const {\n        service,\n        content,\n        checked,\n        checkedDisabled,\n        toggleChecked,\n        actions,\n    } = props\n    const { device } = service\n\n    const handleCheck = () => toggleChecked()\n\n    return (\n        <Card>\n            <DeviceCardHeader device={device} showMedia={true} />\n            <CardContent>\n                <DeviceLostAlert device={device} />\n                {content}\n            </CardContent>\n            <CardActions>\n                {checked !== undefined && (\n                    <Switch\n                        disabled={checkedDisabled}\n                        onChange={handleCheck}\n                        checked={checked}\n                    />\n                )}\n                {actions}\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceList(props: {\n    serviceClass: number\n    selected?: (service: JDService) => boolean\n    toggleSelected?: (service: JDService) => void\n    content?: (service: JDService) => JSX.Element | JSX.Element[]\n    actions?: (service: JDService) => JSX.Element | JSX.Element[]\n    alertMissing?: string\n}) {\n    const {\n        serviceClass,\n        selected,\n        toggleSelected,\n        content,\n        actions,\n        alertMissing,\n    } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, n => n.services({ serviceClass }))\n    const gridBreakpoints = useGridBreakpoints(services?.length)\n\n    const handleSelected = (service: JDService) => selected && selected(service)\n    const handleChecked = (service: JDService) => () =>\n        toggleSelected && toggleSelected(service)\n    const serviceContent = (service: JDService) => content && content(service)\n    const serviceActions = (service: JDService) => actions && actions(service)\n\n    if (alertMissing && !services?.length)\n        return <Alert severity=\"info\">{alertMissing}</Alert>\n\n    return (\n        <Box mb={1}>\n            <Grid container spacing={2}>\n                {services?.map(service => (\n                    <Grid key={service.id} item {...gridBreakpoints}>\n                        <ServiceListItem\n                            service={service}\n                            checked={handleSelected(service)}\n                            toggleChecked={handleChecked(service)}\n                            content={serviceContent(service)}\n                            actions={serviceActions(service)}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n","// tslint:disable-next-line: no-submodule-imports\nimport { Box, createStyles, makeStyles } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport ConnectButton from \"../../jacdac/ConnectButton\"\nimport { NoSsr } from \"@material-ui/core\"\nimport useChange from \"../../jacdac/useChange\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        button: {\n            marginLeft: theme.spacing(2),\n        },\n    })\n)\n\nfunction NoSsrConnectAlert(props: { serviceClass?: number }) {\n    const classes = useStyles()\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useChange(bus, b => b.devices({ serviceClass, ignoreSelf: true }))\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={true}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                {transports.map(transport => (\n                    <ConnectButton\n                        key={transport.type}\n                        transport={transport}\n                        className={classes.button}\n                        full={true}\n                        transparent={true}\n                    />\n                ))}\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: { serviceClass?: number }) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import React from \"react\";\nimport { LOST, FOUND } from \"../../../jacdac-ts/src/jdom/constants\";\nimport { JDDevice } from \"../../../jacdac-ts/src/jdom/device\";\nimport useEventRaised from \"../../jacdac/useEventRaised\";\nimport Alert from \"../ui/Alert\";\n\nexport function DeviceLostAlert(props: { device: JDDevice }) {\n    const { device } = props;\n    const lost = useEventRaised([LOST, FOUND], device, dev => !!dev?.lost)\n    return <>\n        {lost && <Alert severity=\"info\">Device lost...</Alert>}\n    </>\n}","import React from \"react\"\nimport { CircularProgressProps, Box, CircularProgress, Typography } from \"@material-ui/core\";\n\nexport default function CircularProgressWithLabel(props: CircularProgressProps & { value: number }) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}","import { GridSize } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize,\n    md?: GridSize,\n    sm?: GridSize,\n    lg?: GridSize,\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(itemCount?: number): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2: return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3: return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else return {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 4,\n        xl: 3\n    }\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { JSONTryParse, readBlobToText, readBlobToUint8Array } from \"../../jacdac-ts/src/jdom/utils\";\nimport DbContext, { DB_VALUE_CHANGE } from \"./DbContext\";\nimport useEffectAsync from \"./useEffectAsync\";\n\nexport function useDbBlob(id: string) {\n    const { db } = useContext(DbContext)\n    const [_value, _setValue] = useState<Blob>(undefined)\n    const values = db?.blobs\n\n    // listen to change\n    useEffect(() => {\n        let _mounted = true;\n        return values?.subscribe(DB_VALUE_CHANGE, async (changed) => {\n            if (changed === id) {\n                try {\n                    const v = await values.get(id)\n                    if (_mounted) {\n                        _setValue(v);\n                    }\n                }\n                catch (e) {\n                    console.log(e)\n                    await values?.set(id, undefined);\n                }\n            }\n            return () => {\n                _mounted = false;\n            }\n        })\n    }, [values])\n\n    // load intial value\n    useEffectAsync(async (mounted) => {\n        try {\n            const v = await values?.get(id);\n            if (mounted())\n                _setValue(v)\n        } catch (e) {\n            console.log(e)\n            // trash data\n            await values?.set(id, undefined);\n        }\n    }, [values])\n\n    return {\n        blob: _value,\n        setBlob: async (blob: Blob) => {\n            await values?.set(id, blob)\n        }\n    }\n}\n\nexport function useDbUint8Array(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n\n    useEffectAsync(async (mounted) => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const buf = await readBlobToUint8Array(blob);\n            if (mounted())\n                setModel(buf);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbString(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<string>(undefined)\n\n    useEffectAsync(async () => {\n        if (!blob) {\n            setModel(undefined)\n        }\n        else {\n            const t = await readBlobToText(blob);\n            setModel(t);\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob\n    }\n}\n\nexport function useDbJSON<T>(blobName: string) {\n    const { data, setBlob } = useDbString(blobName);\n    const value: T = JSONTryParse(data) as T;\n    return {\n        value,\n        setBlob: async (blob: Blob) => {\n            await setBlob(blob)\n        }\n    }\n}\n","import * as U from \"./utils\"\nimport Packet from \"./packet\"\nimport { REPORT_RECEIVE, SRV_MODEL_RUNNER } from \"./constants\"\nimport { JDService } from \"./service\"\nimport { ModelRunnerCmd, ModelRunnerReg } from \"./constants\"\nimport { bufferToArray, NumberFormat } from \"./buffer\"\nimport { OutPipe } from \"./pipes\"\nimport { JDRegister } from \"./register\"\nimport { JDServiceClient } from \"./serviceclient\"\nimport { serviceSpecificationFromClassIdentifier } from \"./spec\"\nimport { jdunpack } from \"./pack\"\n\n/*\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n*/\n\nexport function isMLModelSupported(model: Uint8Array, formatRegValue: number) {\n    return (\n        U.read32(model, 0) == formatRegValue ||\n        U.read32(model, 4) == formatRegValue\n    )\n}\n\nexport function getMLModelFormatName(model: Uint8Array) {\n    const map = serviceSpecificationFromClassIdentifier(SRV_MODEL_RUNNER).enums[\n        \"ModelFormat\"\n    ].members\n    const m0 = U.read32(model, 0)\n    const m1 = U.read32(model, 4)\n    for (const v of Object.keys(map)) {\n        if (map[v] == m0 || map[v] == m1) return v\n    }\n    return \"0x\" + U.toHex(model.slice(0, 8))\n}\n\nexport class ModelRunnerClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        this.service.registersUseAcks = true\n    }\n\n    // TODO this should use some caching?\n    async isModelSupported(model: Uint8Array) {\n        const reg = this.service.register(ModelRunnerReg.Format)\n        await reg.refresh()\n        return reg.data == null || isMLModelSupported(model, reg.intValue >>> 0)\n    }\n\n    subscribeResults(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(ModelRunnerReg.Outputs)\n        return reg.subscribe(REPORT_RECEIVE, () => {\n            handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n        })\n    }\n\n    async deployModel(model: Uint8Array, onProgress?: (p: number) => void) {\n        onProgress?.(0)\n        const resp = await this.service.sendCmdAwaitResponseAsync(\n            Packet.jdpacked(ModelRunnerCmd.SetModel, \"u32\", [model.length]),\n            3000\n        )\n        onProgress?.(0.05)\n        const [pipePort] = jdunpack<[number]>(resp.data, \"u16\")\n        if (!pipePort) throw new Error(\"wrong port \" + pipePort)\n        const pipe = new OutPipe(this.service.device, pipePort)\n        const chunkSize = 224 // has to be divisible by 8\n        for (let i = 0; i < model.length; i += chunkSize) {\n            await pipe.send(model.slice(i, i + chunkSize))\n            onProgress?.(0.05 + (i / model.length) * 0.9)\n        }\n        try {\n            await pipe.close()\n        } catch {\n            // the device may restart before we manage to close\n        }\n        onProgress?.(1)\n    }\n\n    async autoInvoke(everySamples = 1) {\n        await this.service\n            .register(ModelRunnerReg.AutoInvokeEvery)\n            .sendSetPackedAsync(\"u16\", [everySamples])\n    }\n\n    private async getReg(id: ModelRunnerReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async modelStats(): Promise<TFModelStats> {\n        const info: any = {\n            modelSize: this.getReg(ModelRunnerReg.ModelSize, r => r.intValue),\n            arenaSize: this.getReg(\n                ModelRunnerReg.AllocatedArenaSize,\n                r => r.intValue\n            ),\n            inputShape: this.getReg(ModelRunnerReg.InputShape, r =>\n                bufferToArray(r.data, NumberFormat.UInt16LE)\n            ),\n            outputShape: this.getReg(ModelRunnerReg.OutputShape, r =>\n                bufferToArray(r.data, NumberFormat.UInt16LE)\n            ),\n            lastError: this.getReg(ModelRunnerReg.LastError, r =>\n                U.uint8ArrayToString(r.data)\n            ),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\n\nexport interface TFModelStats {\n    modelSize: number\n    arenaSize: number\n    inputShape: number[]\n    outputShape: number[]\n    lastError: string\n}\n\n/*\nexport async function testAGG(bus: JDBus) {\n    const aggService = bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })[0]\n    if (!aggService) {\n        console.log(\"no agg service\")\n        return\n    }\n    const agg = new SensorAggregatorClient(aggService)\n\n    let acc = bus.services({ serviceClass: SRV_ACCELEROMETER })\n    if (acc.length == 0) {\n        console.log(\"no acc service\")\n        return\n    }\n\n    await agg.setInputs({\n        samplesInWindow: 50,\n        samplingInterval: 20,\n        inputs: acc\n    })\n\n    agg.subscribeSample(sample => {\n        console.log(\"SAMPLE\", sample)\n    })\n\n}\n\nexport async function testTF(bus: JDBus, model: Uint8Array) {\n    const tfService = bus.services({ serviceClass: SRV_MODEL_RUNNER })[0]\n    if (!tfService) {\n        console.log(\"no tflite service\")\n        return\n    }\n    const tf = new TFLiteClient(tfService)\n\n    if (model)\n        await tf.deployModel(model, p => console.log(\"deploy\", p.toFixed(3)))\n\n    const st = await tf.modelStats()\n    console.log(st)\n\n    const classNames = ['noise', 'punch', 'left', 'right'];\n    tf.subscribeResults(outp => {\n        for (let i = 0; i < outp.length; ++i) {\n            if (outp[i] > 0.7) {\n                console.log(outp[i].toFixed(3) + \" \" + classNames[i])\n            }\n        }\n         console.log(\"OUT\", outp)\n    })\n\n    await tf.autoInvoke(8)\n\n    console.log(\"autoinvoked\")\n\n}\n*/\n","import { Paper } from \"@material-ui/core\"\nimport React, { useContext } from \"react\"\nimport { serviceName } from \"../../jacdac-ts/src/jdom/pretty\"\nimport {\n    SensorAggregatorConfig,\n    SensorAggregatorInputConfig,\n} from \"../../jacdac-ts/src/jdom/sensoraggregatorclient\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport DeviceName from \"./devices/DeviceName\"\n\nfunction SensorAggregatorInputConfigView(props: {\n    input: SensorAggregatorInputConfig\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { input } = props\n    const { serviceClass, deviceId, serviceIndex } = input\n\n    const device = deviceId && bus.device(deviceId)\n\n    return (\n        <>\n            {serviceName(serviceClass)}\n            {device && (\n                <DeviceName device={device} serviceIndex={serviceIndex} />\n            )}\n            {!device && deviceId && (\n                <span>\n                    {deviceId}[{serviceIndex}]\n                </span>\n            )}\n            {!deviceId && <span>/ any device</span>}\n        </>\n    )\n}\n\nexport default function SensorAggregatorConfigView(props: {\n    config: SensorAggregatorConfig\n}) {\n    const { config } = props\n\n    if (!config?.inputs) return <></>\n\n    return (\n        <Paper>\n            <ul>\n                <li>\n                    samples interval (ms):{\" \"}\n                    <code>{config.samplingInterval}</code>\n                </li>\n                <li>\n                    samples window (# samples):{\" \"}\n                    <code>{config.samplesInWindow}</code>\n                </li>\n                <li>\n                    inputs ({config.inputs.length})\n                    <ul>\n                        {config.inputs.map((input, i) => (\n                            <li key={\"input\" + i}>\n                                <SensorAggregatorInputConfigView\n                                    input={input}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n                </li>\n            </ul>\n        </Paper>\n    )\n}\n","import React, { useContext, useState } from \"react\";\nimport Alert from \"./ui/Alert\";\nimport AppContext from \"./AppContext\";\n\nexport type ProgressHandler = (p: number) => void\n\nexport default function useCall() {\n    const { setError: setAppError } = useContext(AppContext)\n    const [error, setError] = useState<Error>();\n    const [running, setRunning] = useState(false)\n    const [progress, setProgress] = useState(0);\n\n    const handleProgress = (p: number) => setProgress(p);\n\n    const call = (handler: (onProgress?: ProgressHandler) => void) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const callAsync = async (handler: (onProgress?: (p: number) => void) => Promise<void>) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            await handler(handleProgress);\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        }\n        finally {\n            setRunning(false)\n        }\n    }\n    const alert = error && <Alert severity=\"error\">{error}</Alert>\n\n    return {\n        running,\n        error,\n        progress,\n        alert,\n        call,\n        callAsync\n    }\n} ","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"\n}), 'Link');","import { List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport React, { lazy, useContext, useState } from 'react';\nimport { SRV_SENSOR_AGGREGATOR, SRV_MODEL_RUNNER, ModelRunnerReg } from '../../../jacdac-ts/src/jdom/constants';\nimport { JDService } from '../../../jacdac-ts/src/jdom/service';\nimport ServiceList from '../../components/ServiceList';\nimport ConnectAlert from '../../components/alert/ConnectAlert'\nimport { useDbJSON, useDbUint8Array } from '../../components/useDb'\nimport Alert from \"../../components/ui/Alert\";\nimport { Button } from 'gatsby-theme-material-ui';\nimport { ModelRunnerClient } from '../../../jacdac-ts/src/jdom/modelrunner'\nimport RegisterInput from '../../components/RegisterInput';\nimport CircularProgressWithLabel from '../../components/ui/CircularProgressWithLabel'\nimport { SensorAggregatorClient, SensorAggregatorConfig } from '../../../jacdac-ts/src/jdom/sensoraggregatorclient';\nimport SensorAggregatorConfigView from '../../components/SensorAggregatorConfigView';\nimport ServiceManagerContext from '../../components/ServiceManagerContext'\nimport useChange from '../../jacdac/useChange';\nimport { IFile } from '../../../jacdac-ts/src/embed/protocol';\nimport { prettySize } from '../../../jacdac-ts/src/jdom/pretty';\nimport RegisterTrend from '../../components/RegisterTrend';\nimport { useRegisterUnpackedValue } from '../../jacdac/useRegisterValue';\nimport useCall from '../../components/useCall';\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from '@material-ui/icons';\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n    const [modelSize] = useRegisterUnpackedValue<[number]>(service.register(ModelRunnerReg.ModelSize));\n    const [lastError] = useRegisterUnpackedValue<[number]>(service.register(ModelRunnerReg.LastError));\n\n    return <>\n        {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n        <Typography>model size: {modelSize === undefined ? \"...\" : prettySize(modelSize)}</Typography>\n        <RegisterInput register={service.register(ModelRunnerReg.AutoInvokeEvery)} visible={true} />\n        <RegisterTrend showName register={service.register(ModelRunnerReg.Outputs)} mini={true} />\n    </>\n}\n\nexport function ModelActions(props: {\n    service: JDService,\n    model: Uint8Array,\n    sensorAggregatorService?: JDService,\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall();\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () => await callAsync(async (setProgress) => {\n        if (sensorAggregatorService && sensorInput) {\n            const aggregator = new SensorAggregatorClient(sensorAggregatorService)\n            await aggregator.setInputs(sensorInput)\n        }\n        if (service && model) {\n            const runner = new ModelRunnerClient(service)\n            await runner.deployModel(model, setProgress)\n        }\n    })\n\n    return <>\n        {!running && <Button disabled={modelDisabled} variant=\"contained\" color=\"primary\" onClick={handleDeployModel}>\n            {sensorInput ? \"Deploy model and configuration\" : \"Deploy model\"}\n        </Button>}\n        {running && <CircularProgressWithLabel value={progress * 100} />}\n        {alert}\n    </>\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } = useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setModel(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model);\n            console.log(`loaded content`, blob);\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        }\n        finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models());\n    const inputConfigurations = useChange(modelStore, _ => _?.inputConfigurations())\n\n    return <>\n        <h1>Model uploader</h1>\n        <p>\n            Upload Machine Learning Models (like TensorFlow Lite) into your <Link to=\"/services/model-runner/\">ML module runners</Link>.\n        </p>\n        <h3>Load a machine learning model</h3>\n        <p>Machine learning models are typically stored in a <code>.tflite</code> file.</p>\n        {model && <Alert severity={'success'}>Model loaded ({prettySize(model.byteLength)})</Alert>}\n        {model && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import model\"} onFilesUploaded={handleTfmodelFiles} /></Suspense>\n        <Button aria-label=\"clear model\" disabled={importing} onClick={handleClearModel}>clear model</Button>\n        {models?.length && <List>\n            {models.map(model => <ListItem key={model.path} button onClick={handleLoadModel(model)}>\n                <ListItemText primary={model.name} secondary={`${model.path} ${prettySize(model.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Configure sensors</h3>\n        <p>Sensor configuration files are stored in a <code>.jd.json</code> file.</p>\n        {sensorConfig && <Alert severity={'success'}>Sensor configuration loaded</Alert>}\n        {sensorConfig && <SensorAggregatorConfigView config={sensorConfig} />}\n        {sensorConfig && <p />}\n        <Suspense><ImportButton disabled={importing} text={\"Import configuration\"} onFilesUploaded={handleSensorConfigFiles} /></Suspense>\n        <Button aria-label=\"clear configuration\" disabled={importing} onClick={handleClearConfiguration}>clear configuration</Button>\n        {inputConfigurations?.length && <List>\n            {inputConfigurations.map(iconfig => <ListItem key={iconfig.path} button onClick={handleLoadInputConfiguration(iconfig)}>\n                <ListItemText primary={iconfig.name} secondary={`${iconfig.path} ${prettySize(iconfig.size)}`} />\n            </ListItem>)}\n        </List>}\n        <h3>Deploy model to machine learning services</h3>\n        <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n        <ServiceList\n            serviceClass={SRV_MODEL_RUNNER}\n            content={service => <ModelContent service={service} />}\n            actions={service => <ModelActions\n                service={service}\n                model={model}\n                sensorAggregatorService={service?.device.services({ serviceClass: SRV_SENSOR_AGGREGATOR })?.[0]}\n                sensorInput={sensorConfig}\n            />}\n        />\n    </>\n}"],"sourceRoot":""}