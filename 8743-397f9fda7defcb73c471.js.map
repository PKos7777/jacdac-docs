{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardBitRadio.tsx"],"names":["HORIZON","DashboardBitRadio","props","service","useState","lastEvents","setLastEvents","appendMessage","data","time","deviceSerial","rssi","payload","evs","slice","msg","push","length","shift","useEffect","subscribe","REPORT_RECEIVE","pkt","values","serviceCommand","BitRadioCmd","jdunpack","filter","v","undefined","text","map","ev","join"],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAEA,IAAMA,OAAO,GAAG,EAAhB;AASe,SAASC,iBAAT,CAA2BC,KAA3B,EAAyD;AAAA,MAC5DC,OAD4D,GAChDD,KADgD,CAC5DC,OAD4D;;AAAA,kBAEhCC,+CAAQ,CAAsB,EAAtB,CAFwB;AAAA,MAE7DC,UAF6D;AAAA,MAEjDC,aAFiD;;AAIpE,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAwB;AAC1C,QAAI,CAACA,IAAL,EAAW;AAD+B,QAGnCC,IAHmC,GAGKD,IAHL;AAAA,QAG7BE,YAH6B,GAGKF,IAHL;AAAA,QAGfG,IAHe,GAGKH,IAHL;AAAA,QAGNI,OAHM,GAGKJ,IAHL;AAI1C,QAAMK,GAAG,GAAGR,UAAU,CAACS,KAAX,CAAiB,CAAjB,CAAZ;AACA,QAAMC,GAAG,GAAG;AAAEN,UAAI,EAAJA,IAAF;AAAQC,kBAAY,EAAZA,YAAR;AAAsBC,UAAI,EAAJA,IAAtB;AAA4BC,aAAO,EAAPA;AAA5B,KAAZ;AACAC,OAAG,CAACG,IAAJ,CAASD,GAAT;;AACA,WAAOF,GAAG,CAACI,MAAJ,GAAajB,OAApB;AAA6Ba,SAAG,CAACK,KAAJ;AAA7B;;AACAZ,iBAAa,CAACO,GAAD,CAAb;AACH,GATD;;AAWAM,kDAAS,CACL;AAAA,WACIhB,OAAO,CAACiB,SAAR,CAAkBC,oFAAlB,EAAkC,UAACC,GAAD,EAAiB;AAC/C,UAAIC,MAAJ;AAD+C,UAEvCf,IAFuC,GAEdc,GAFc,CAEvCd,IAFuC;AAAA,UAEjCgB,cAFiC,GAEdF,GAFc,CAEjCE,cAFiC;;AAG/C,cAAQA,cAAR;AACI,aAAKC,2HAAL;AACIF,gBAAM,GAAGG,4EAAQ,CAAClB,IAAD,EAAO,uBAAP,CAAjB;AACA;;AACJ,aAAKiB,2HAAL;AACIF,gBAAM,GAAGG,4EAAQ,CAAClB,IAAD,EAAO,mBAAP,CAAjB;AACA;;AACJ,aAAKiB,2HAAL;AACIF,gBAAM,GAAGG,4EAAQ,CAAClB,IAAD,EAAO,mBAAP,CAAjB;AACA;AATR;;AAWAD,mBAAa,CAACgB,MAAM,CAACI,MAAP,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,EAA7B;AAAA,OAAf,CAAD,CAAb;AACH,KAfD,CADJ;AAAA,GADK,EAkBL,CAACzB,OAAD,EAAUE,UAAV,CAlBK,CAAT;AAqBA,MAAMyB,IAAI,GAAGzB,UAAU,CAClB0B,GADQ,CACJ,UAAAC,EAAE;AAAA,WACHA,EAAE,CAACpB,OAAH,CAAWe,MAAX,CAAkB,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,EAA7B;AAAA,KAAnB,EAAoDK,IAApD,CAAyD,GAAzD,CADG;AAAA,GADE,EAIRA,IAJQ,CAIH,IAJG,CAAb;AAKA,sBAAO,iDAAC,+CAAD,QAAYH,IAAZ,CAAP;AACH,C","file":"8743-397f9fda7defcb73c471.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { BitRadioCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { REPORT_RECEIVE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { jdunpack, PackedValues } from \"../../../jacdac-ts/src/jdom/pack\"\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\"\nimport CodeBlock from \"../CodeBlock\"\n\nconst HORIZON = 10\n\ninterface RadioMessageProps {\n    time: number\n    deviceSerial: number\n    rssi: number\n    payload: PackedValues\n}\n\nexport default function DashboardBitRadio(props: DashboardServiceProps) {\n    const { service } = props\n    const [lastEvents, setLastEvents] = useState<RadioMessageProps[]>([])\n\n    const appendMessage = (data: PackedValues) => {\n        if (!data) return\n\n        const [time, deviceSerial, rssi, ...payload] = data\n        const evs = lastEvents.slice(0)\n        const msg = { time, deviceSerial, rssi, payload }\n        evs.push(msg)\n        while (evs.length > HORIZON) evs.shift()\n        setLastEvents(evs)\n    }\n\n    useEffect(\n        () =>\n            service.subscribe(REPORT_RECEIVE, (pkt: Packet) => {\n                let values: PackedValues\n                const { data, serviceCommand } = pkt\n                switch (serviceCommand) {\n                    case BitRadioCmd.NumberReceived:\n                        values = jdunpack(data, \"u32 u32 i8 x[3] f64 s\")\n                        break\n                    case BitRadioCmd.StringReceived:\n                        values = jdunpack(data, \"u32 u32 i8 x[1] s\")\n                        break\n                    case BitRadioCmd.BufferReceived:\n                        values = jdunpack(data, \"u32 u32 i8 x[1] b\")\n                        break\n                }\n                appendMessage(values.filter(v => v !== undefined && v !== \"\"))\n            }),\n        [service, lastEvents]\n    )\n\n    const text = lastEvents\n        .map(ev =>\n            ev.payload.filter(v => v !== undefined && v !== \"\").join(\",\")\n        )\n        .join(\"\\n\")\n    return <CodeBlock>{text}</CodeBlock>\n}\n"],"sourceRoot":""}