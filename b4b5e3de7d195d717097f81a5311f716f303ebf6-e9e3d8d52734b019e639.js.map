{"version":3,"sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts"],"names":["VMEnvironmentCode","VMEnvironmentException","code","data","Error","VMServiceEnvironment","service","_registers","_events","registerRegister","regName","handler","pkt","specification","packets","find","isRegister","name","register","identifier","mount","subscribe","CHANGE","registerEvent","eventName","isEvent","event","EVENT","sendCommandAsync","command","values","commandName","p","isCommand","sendCmdAsync","jdpack","packFormat","writeRegisterAsync","ev","SystemReg","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","isIntensity","fields","type","lookupRegister","e","root","object","fld","undefined","property","unpackedValue","field","f","value","refreshRegistersAsync","k","refresh","JDServiceClient","VMEnvironment","registers","events","_currentEvent","_envs","_globals","serviceChanged","role","unmount","forEach","r","reg","serviceEnv","getService","emit","getRootName","s","RoleNoService","Object","lookup","roleName","me","local","writeLocal","firstType","TypeMismatch","toString","consumeEvent","hasEvent","unsubscribe","vs","JDEventSource","unparse","ae","elements","map","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","eval","visitExpression","ret","push","top","Math","abs","le","val","id","lit"],"mappings":"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","file":"b4b5e3de7d195d717097f81a5311f716f303ebf6-e9e3d8d52734b019e639.js","sourcesContent":["import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDEvent } from \"../jdom/event\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { JDRegister } from \"../jdom/register\"\nimport { SMap } from \"../jdom/utils\"\nimport { JDService } from \"../jdom/service\"\nimport { JDEventSource } from \"../jdom/eventsource\"\nimport { CHANGE, EVENT, SystemReg } from \"../jdom/constants\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\n\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface, atomic } from \"./runner\"\n\nexport enum VMEnvironmentCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n}\n\nexport class VMEnvironmentException extends Error {\n    constructor(readonly code: VMEnvironmentCode, readonly data: string) {\n        super()\n    }\n}\n\nexport class VMServiceEnvironment extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(\n        command: jsep.Identifier,\n        values: PackedValues\n    ) {\n        const commandName = command?.name\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, ev: atomic) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], ev)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, ev: atomic) {\n        await jdreg?.sendSetPackedAsync(\n            jdreg.specification?.packFormat,\n            [ev],\n            true\n        )\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, true)\n        }\n    }\n\n    public lookupRegister(e: jsep.MemberExpression | jsep.Identifier | string): atomic {\n        const root =\n            typeof e === \"string\"\n                ? e\n                : e.type === \"Identifier\"\n                ? e.name\n                : (e.object as jsep.Identifier).name\n        const fld =\n            typeof e === \"string\"\n                ? undefined\n                : e.type === \"Identifier\"\n                ? undefined\n                : (e.property as jsep.Identifier).name\n        if (root in this._registers) {\n            if (!fld) return this._registers[root].unpackedValue?.[0]\n            else {\n                const field = this._registers[root].fields.find(\n                    f => f.name === fld\n                )\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n\n    public async refreshRegistersAsync() {\n        for (const k in this._registers) {\n            const register = this._registers[k]\n            await register.refresh()\n        }\n    }\n}\n\ninterface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentEvent: string = undefined\n    private _envs: SMap<VMServiceEnvironment> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[]\n    ) {\n        super()\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._envs[role]) {\n            this._envs[role].unmount()\n            this._envs[role] = undefined\n        }\n        if (service) {\n            this._envs[role] = new VMServiceEnvironment(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public registerRegister(role: string, reg: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerRegister(reg, () => {\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    public registerEvent(role: string, ev: string) {\n        try {\n            const serviceEnv = this.getService(role)\n            serviceEnv.registerEvent(ev, () => {\n                this._currentEvent = `${role}.${ev}`\n                this.emit(CHANGE)\n            })\n        } catch (e) {\n            // nothing\n        }\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._envs[root]\n        if (!s) {\n            throw new VMEnvironmentException(\n                VMEnvironmentCode.RoleNoService,\n                root\n            )\n        }\n        return s\n    }\n\n    public async refreshRegistersAsync() {\n        for (const s of Object.values(this._envs)) {\n            await s?.refreshRegistersAsync()\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        // TODO: need to raise alert if service undefined\n        await serviceEnv?.sendCommandAsync(\n            e.property as jsep.Identifier,\n            values\n        )\n    }\n\n    public lookup(\n        e: jsep.MemberExpression | string\n    ): atomic {\n        const roleName = this.getRootName(e)\n        if (roleName === \"$\") {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        return serviceEnv.lookupRegister(\n            me.property as jsep.Identifier | jsep.MemberExpression\n        )\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        ev: number\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            await serviceEnv.writeRegisterAsync(reg, ev)\n        }\n    }\n\n    public writeLocal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || roleName !== \"$\") return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMEnvironmentException(\n                        VMEnvironmentCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                this._globals[local].value = value\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMEnvironmentException(\n                        VMEnvironmentCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n            }\n            return true\n        }\n        return false\n    }\n\n    public consumeEvent() {\n        this._currentEvent = undefined\n    }\n\n    public hasEvent(e: jsep.MemberExpression | string) {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const event = (me.property as jsep.Identifier).name\n            return this._currentEvent === `${roleName}.${event}`\n        }\n        return false\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._envs)) {\n            vs.unmount()\n        }\n    }\n}\n","import { VMCode } from \"./events\"\nimport { VMError } from \"./utils\"\n\nexport type GetValue = (e: jsep.MemberExpression | string) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\":\n        case \"LogicalExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public eval(e: jsep.Expression) {\n        this.exprStack = []\n        this.visitExpression(e)\n        return this.exprStack.pop()\n    }\n\n    public visitExpression(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                this.visitExpression(be.left)\n                this.visitExpression(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                this.visitExpression(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"LogicalExpression\": {\n                const le = <jsep.LogicalExpression>e\n                this.visitExpression(le.left)\n                switch (le.operator) {\n                    case \"||\":\n                        if (this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    case \"&&\":\n                        if (!this.tos()) return\n                        else this.visitExpression(le.right)\n                        return\n                    default:\n                }\n                break\n            }\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = this.env(e as jsep.MemberExpression)\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = this.env(id.name)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n"],"sourceRoot":""}