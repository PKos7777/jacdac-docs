{"version":3,"sources":["webpack://jacdac-docs/webpack/bootstrap","webpack://jacdac-docs/webpack/runtime/make namespace object","webpack://jacdac-docs/./src/workers/vm/dist/node_modules/vm-worker.js"],"names":[],"mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;ACNA;AACA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;AACA,GAAG;AACH;;AAEA,8BAA8B;;AAE9B;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA","file":"src_workers_vm_dist_node_modules_vm-worker_js.render-page.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst _excluded = [\"worker\"];\n\nasync function handleMessage(event) {\n  const message = event.data; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    worker\n  } = message,\n        rest = _objectWithoutPropertiesLoose(message, _excluded);\n\n  if (worker !== \"vm\") return; // do something\n\n  const resp = _extends({\n    worker\n  }, rest);\n\n  self.postMessage(resp);\n}\n\nself.addEventListener(\"message\", handleMessage);\nconsole.debug(`jacdac vm: worker registered`);\n//# sourceMappingURL=vm-worker.js.map\n"],"sourceRoot":""}