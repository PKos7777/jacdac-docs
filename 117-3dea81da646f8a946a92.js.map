{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardRandomNumberGenerator.tsx"],"names":["DashboardRandomNumberGenerator","props","service","randomRegister","register","RngReg","Random","useRegisterUnpackedValue","rnd","textId","useId","handleRefresh","refresh","toHex","slice"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;CAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASA,8BAAT,CACXC,KADW,EAEb;AAAA,MACUC,OADV,GACsBD,KADtB,CACUC,OADV;AAEE,MAAMC,cAAc,GAAGD,OAAO,CAACE,QAAR,CAAiBC,6EAAM,CAACC,MAAxB,CAAvB;;AAFF,8BAGgBC,iGAAwB,CAAeJ,cAAf,EAA+BF,KAA/B,CAHxC;AAAA,MAGSO,GAHT;;AAIE,MAAMC,MAAM,GAAGC,uEAAK,EAApB;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMR,cAAc,CAACS,OAAf,EAAN;AAAA,GAAtB;;AAEA,MAAI,CAACJ,GAAL,EAAU,oBAAO,2DAAC,mEAAD,OAAP;AAEV,sBACI,2DAAC,iEAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE,CAAzB;AAA4B,aAAS,EAAC;AAAtC,kBACI,2DAAC,iEAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI,2DAAC,iEAAD;AACI,MAAE,EAAEC,MADR;AAEI,aAAS,EAAE,IAFf;AAGI,WAAO,EAAE,UAHb;AAII,cAAU,EAAE,yBAJhB;AAKI,SAAK,EAAEI,+EAAK,CAACL,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD;AALhB,IADJ,CADJ,eAUI,2DAAC,iEAAD;AAAM,QAAI;AAAV,kBACI,2DAAC,yEAAD;AACI,SAAK,EAAC,qBADV;AAEI,WAAO,EAAEH;AAFb,kBAII,2DAAC,iEAAD,OAJJ,CADJ,CAVJ,CADJ;AAqBH,C","file":"117-3dea81da646f8a946a92.js","sourcesContent":["import React from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { Grid, TextField } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { toHex } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { RngReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { useId } from \"react-use-id-hook\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nexport default function DashboardRandomNumberGenerator(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const randomRegister = service.register(RngReg.Random)\n    const [rnd] = useRegisterUnpackedValue<[Uint8Array]>(randomRegister, props)\n    const textId = useId()\n\n    const handleRefresh = () => randomRegister.refresh()\n\n    if (!rnd) return <LoadingProgress />\n\n    return (\n        <Grid container spacing={2} direction=\"row\">\n            <Grid item xs>\n                <TextField\n                    id={textId}\n                    fullWidth={true}\n                    variant={\"outlined\"}\n                    helperText={\"generated random number\"}\n                    value={toHex(rnd?.slice(0, 8))}\n                />\n            </Grid>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title=\"generate new number\"\n                    onClick={handleRefresh}\n                >\n                    <RefreshIcon />\n                </IconButtonWithTooltip>\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}