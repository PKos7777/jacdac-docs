{"version":3,"sources":["webpack:///./src/templates/service-test.tsx","webpack:///./node_modules/@material-ui/icons/Info.js","webpack:///./src/components/SelectService.tsx","webpack:///./src/components/test/ServiceTest.tsx"],"names":["Page","props","spec","serviceSpecificationFromClassIdentifier","pageContext","node","classIdentifier","shortId","SelectService","useContext","JacdacContext","bus","serviceClass","onSelect","services","useChange","n","gridBreakpoints","useGridBreakpoints","handleSelect","service","length","map","id","device","Diagnostics","hostDefinition","hostDefinitionFromServiceClass","handleStartSimulator","addHost","ServiceTestRunnerSelect","ServiceTest","serviceSpec","showStartSimulator","serviceTest","serviceTestFromServiceClass","useState","undefined","setService","name","Flags","diagnostics"],"mappings":"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","file":"component---src-templates-service-test-tsx-8d8cb5e79067d2c0274d.js","sourcesContent":["import React from \"react\"\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport ServiceTest from \"../components/test/ServiceTest\"\n\nexport default function Page(props: { pageContext: { node: { classIdentifier: number } } }) {\n    const spec = serviceSpecificationFromClassIdentifier(props.pageContext.node.classIdentifier);\n    return <>\n        <ServiceTest serviceSpec={spec} />\n        <h2>See Also</h2>\n        < ul >\n            <li><a href={`https://github.com/microsoft/jacdac/tree/main/services/${props.pageContext.node.shortId}.md`}>Edit specification source</a>.</li>\n            <li>Read <Link to=\"/reference/service-specification/\">Service Specification Language</Link> reference</li>\n            <li>Create a new service specification using the <Link to=\"/tools/service-editor/\">Service Editor</Link></li>\n            <li>Using services in JavaScript with the <Link to={`/clients/web/jdom`}>Jacdac Object Model (JDOM)</Link></li>\n        </ul>\n    </>\n}\n\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","import React, { useContext } from \"react\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useChange from \"../jacdac/useChange\"\nimport {\n    Grid,\n    Card,\n    CardActions,\n    Button\n} from \"@material-ui/core\"\nimport DeviceCardHeader from \"./DeviceCardHeader\"\nimport Alert from \"./ui/Alert\"\nimport { JDService } from \"../../jacdac-ts/src/jdom/service\"\n\nexport default function SelectService(props: {\n    serviceClass: number\n    onSelect: (service: JDService) => void\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { serviceClass, onSelect } = props\n    const services = useChange(bus, n => n.services({ serviceClass }), [])\n    const gridBreakpoints = useGridBreakpoints()\n\n    const handleSelect = (service: JDService) => () => onSelect(service)\n\n    return (\n        <>\n            {!!services.length && (\n                <Grid container spacing={2}>\n                    {services.map(service => (\n                        <Grid key={service.id} item {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader device={service.device} />\n                                <CardActions>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSelect(service)}\n                                    >\n                                        Select\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Grid>\n            )}\n            {!services?.length && (\n                <Alert severity=\"info\">\n                    Not seeing your device? Try some of the following.\n                    <ul>\n                        <li>Check that your device is connected</li>\n                        <li>\n                            Use the <strong>packet console</strong> to monitor\n                            packets on the bus\n                        </li>\n                        <li>\n                            Check the class identifier in your annoucement\n                            packets\n                        </li>\n                    </ul>\n                </Alert>\n            )}\n        </>\n    )\n}","import React, { useContext, useState } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport {\n    Button,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport { AlertTitle } from \"@material-ui/lab\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport Alert from \"../ui/Alert\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport {\n    addHost,\n    hostDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/hosts/hosts\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { JDService } from \"../../../jacdac-ts/src/jdom/service\"\nimport { serviceTestFromServiceClass } from \"../../../jacdac-ts/src/jdom/test\"\nimport SelectService from \"../SelectService\"\nimport ServiceTestRunner from \"./ServiceTestRunner\"\n\nfunction Diagnostics(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const hostDefinition = hostDefinitionFromServiceClass(serviceClass)\n    const handleStartSimulator = () => addHost(bus, hostDefinition.services())\n\n    if (!hostDefinition)\n        return null;\n\n    return (\n        <Alert severity=\"info\">\n            <AlertTitle>Developer zone</AlertTitle>\n            <Button variant=\"outlined\" onClick={handleStartSimulator}>\n                start simulator\n            </Button>\n        </Alert>\n    )\n}\n\nfunction ServiceTestRunnerSelect(props: { serviceClass: number, onSelect: (service: JDService) => void }) {\n    const { serviceClass, onSelect } = props;\n    return <>\n        <h3>Select a device to test</h3>\n        <SelectService\n            serviceClass={serviceClass}\n            onSelect={onSelect}\n        />\n    </>\n}\n\nexport default function ServiceTest(props: {\n    serviceSpec: jdspec.ServiceSpec,\n    serviceTest?: jdtest.ServiceTestSpec,\n    showStartSimulator?: boolean\n}) {\n    const { serviceSpec, showStartSimulator, serviceTest = serviceTestFromServiceClass(serviceSpec?.classIdentifier) } = props\n    const { classIdentifier: serviceClass } = serviceSpec\n    const [service, setService] = useState<JDService>(undefined)\n    const handleSelect = (service: JDService) => setService(service)\n    return (\n        <>\n            <h1>\n                {`${serviceSpec.name} tests`}\n                <IconButtonWithTooltip title=\"go to specification\" to={`/services/${serviceSpec.shortId}/`}>\n                    <InfoIcon />\n                </IconButtonWithTooltip>\n            </h1>\n            {(Flags.diagnostics || showStartSimulator) && <Diagnostics serviceClass={serviceClass} />}\n            {!service && <ServiceTestRunnerSelect serviceClass={serviceClass} onSelect={handleSelect} />}\n            {service && <ServiceTestRunner service={service} serviceTest={serviceTest} />}\n        </>\n    )\n}\n"],"sourceRoot":""}