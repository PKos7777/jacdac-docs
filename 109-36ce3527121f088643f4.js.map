{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardBitRadio.tsx"],"names":["DashboardBitRadio","props","service","numberReceivedEvent","event","BitRadioEvent","NumberReceived","stringReceivedEvent","StringReceived","bufferReceivedEvent","BufferReceived","useState","lastEvents","setLastEvents","appendMessage","data","time","deviceSerial","rssi","payload","evs","slice","msg","push","length","shift","useEffect","subscribe","EVENT","jdunpack","map","lv","i","filter","v","undefined","join"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEe,SAASA,iBAAT,CAA2BC,KAA3B,EAAyD;AAAA,MAC5DC,OAD4D,GAChDD,KADgD,CAC5DC,OAD4D;AAEpE,MAAMC,mBAAmB,GAAGD,OAAO,CAACE,KAAR,CAAcC,+FAAa,CAACC,cAA5B,CAA5B;AACA,MAAMC,mBAAmB,GAAGL,OAAO,CAACE,KAAR,CAAcC,+FAAa,CAACG,cAA5B,CAA5B;AACA,MAAMC,mBAAmB,GAAGP,OAAO,CAACE,KAAR,CAAcC,+FAAa,CAACK,cAA5B,CAA5B;;AAJoE,kBAKhCC,sDAAQ,CAO1C,EAP0C,CALwB;AAAA,MAK7DC,UAL6D;AAAA,MAKjDC,aALiD;;AAcpE,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAwB;AAAA,QACnCC,IADmC,GACKD,IADL;AAAA,QAC7BE,YAD6B,GACKF,IADL;AAAA,QACfG,IADe,GACKH,IADL;AAAA,QACNI,OADM,GACKJ,IADL;AAE1C,QAAMK,GAAG,GAAGR,UAAU,CAACS,KAAX,CAAiB,CAAjB,CAAZ;AACA,QAAMC,GAAG,GAAG;AAAEN,UAAI,EAAJA,IAAF;AAAQC,kBAAY,EAAZA,YAAR;AAAsBC,UAAI,EAAJA,IAAtB;AAA4BC,aAAO,EAAPA;AAA5B,KAAZ;AACAC,OAAG,CAACG,IAAJ,CAASD,GAAT;;AACA,WAAOF,GAAG,CAACI,MAAJ,GAAa,EAApB;AAAwBJ,SAAG,CAACK,KAAJ;AAAxB;;AACAZ,iBAAa,CAACO,GAAD,CAAb;AACH,GAPD;;AASAM,yDAAS,CACL;AAAA,WACIvB,mBAAmB,CAACwB,SAApB,CAA8BC,4EAA9B,EAAqC;AAAA,aACjCd,aAAa,CACTe,iFAAQ,CAAC1B,mBAAmB,CAACY,IAArB,EAA2B,uBAA3B,CADC,CADoB;AAAA,KAArC,CADJ;AAAA,GADK,EAOL,CAACZ,mBAAD,EAAsBS,UAAtB,CAPK,CAAT;AASAc,yDAAS,CACL;AAAA,WACInB,mBAAmB,CAACoB,SAApB,CAA8BC,4EAA9B,EAAqC;AAAA,aACjCd,aAAa,CACTe,iFAAQ,CAACtB,mBAAmB,CAACQ,IAArB,EAA2B,mBAA3B,CADC,CADoB;AAAA,KAArC,CADJ;AAAA,GADK,EAOL,CAACR,mBAAD,EAAsBK,UAAtB,CAPK,CAAT;AASAc,yDAAS,CACL;AAAA,WACAjB,mBAAmB,CAACkB,SAApB,CAA8BC,4EAA9B,EAAqC;AAAA,aAC7Bd,aAAa,CACTe,iFAAQ,CAACpB,mBAAmB,CAACM,IAArB,EAA2B,mBAA3B,CADC,CADgB;AAAA,KAArC,CADA;AAAA,GADK,EAOL,CAACN,mBAAD,EAAsBG,UAAtB,CAPK,CAAT;AAUA,sBACI,wHACKA,UAAU,CAACkB,GAAX,CAAe,UAACC,EAAD,EAAKC,CAAL;AAAA,wBACZ;AAAK,SAAG,EAAEA;AAAV,OACKD,EAAE,CAACZ,OAAH,CACIc,MADJ,CACW,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,EAA7B;AAAA,KADZ,EAEIE,IAFJ,CAES,IAFT,CADL,CADY;AAAA,GAAf,CADL,CADJ;AAWH,C","file":"109-36ce3527121f088643f4.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { BitRadioEvent } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { jdunpack, PackedValues } from \"../../../jacdac-ts/src/jdom/pack\"\n\nexport default function DashboardBitRadio(props: DashboardServiceProps) {\n    const { service } = props\n    const numberReceivedEvent = service.event(BitRadioEvent.NumberReceived)\n    const stringReceivedEvent = service.event(BitRadioEvent.StringReceived)\n    const bufferReceivedEvent = service.event(BitRadioEvent.BufferReceived)\n    const [lastEvents, setLastEvents] = useState<\n        {\n            time: number\n            deviceSerial: number\n            rssi: number\n            payload: PackedValues\n        }[]\n    >([])\n\n    const appendMessage = (data: PackedValues) => {\n        const [time, deviceSerial, rssi, ...payload] = data\n        const evs = lastEvents.slice(0)\n        const msg = { time, deviceSerial, rssi, payload }\n        evs.push(msg)\n        while (evs.length > 10) evs.shift()\n        setLastEvents(evs)\n    }\n\n    useEffect(\n        () =>\n            numberReceivedEvent.subscribe(EVENT, () =>\n                appendMessage(\n                    jdunpack(numberReceivedEvent.data, \"u32 u32 i8 x[3] f64 s\")\n                )\n            ),\n        [numberReceivedEvent, lastEvents]\n    )\n    useEffect(\n        () =>\n            stringReceivedEvent.subscribe(EVENT, () =>\n                appendMessage(\n                    jdunpack(stringReceivedEvent.data, \"u32 u32 i8 x[1] s\")\n                )\n            ),\n        [stringReceivedEvent, lastEvents]\n    )\n    useEffect(\n        () =>\n        bufferReceivedEvent.subscribe(EVENT, () =>\n                appendMessage(\n                    jdunpack(bufferReceivedEvent.data, \"u32 u32 i8 x[1] b\")\n                )\n            ),\n        [bufferReceivedEvent, lastEvents]\n    )\n\n    return (\n        <>\n            {lastEvents.map((lv, i) => (\n                <div key={i}>\n                    {lv.payload\n                        .filter(v => v !== undefined && v !== \"\")\n                        .join(\", \")}\n                </div>\n            ))}\n        </>\n    )\n}\n"],"sourceRoot":""}