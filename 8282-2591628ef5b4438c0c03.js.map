{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"names":["DashboardLED","props","service","useContext","AppContext","setError","server","useServiceServer","color","waveLengthRegister","useRegister","LedReg","useRegisterUnpackedValue","waveLength","colorRegister","busColor","serverColor","useChange","_","values","r","g","b","rgb","ledCountRegister","ledCount","undefined","handleSetColor","col","sendCmdAsync","LedCmd","jdpack","delay","sendGetAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASA,YAAT,CAAsBC,KAAtB,EAAoD;AAAA,MACvDC,OADuD,GAC3CD,KAD2C,CACvDC,OADuD;;AAAA,oBAE1CC,iDAAU,CAACC,0DAAD,CAFgC;AAAA,MAEvDC,QAFuD,eAEvDA,QAFuD;;AAG/D,MAAMC,MAAM,GAAGC,yEAAgB,CAAYL,OAAZ,CAA/B;AACA,MAAMM,KAAK,GAAGF,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAMG,kBAAkB,GAAGC,qEAAW,CAACR,OAAD,EAAUS,kGAAV,CAAtC;;AAL+D,8BAM1CC,4FAAwB,CACzCH,kBADyC,EAEzCR,KAFyC,CANkB;AAAA,MAMxDY,UANwD;;AAU/D,MAAMC,aAAa,GAAGJ,qEAAW,CAACR,OAAD,EAAUS,wFAAV,CAAjC;AACA,MAAMI,QAAQ,GAAGH,4FAAwB,CACrCE,aADqC,EAErCb,KAFqC,CAAzC;AAIA,MAAMe,WAAW,GAAGC,mEAAS,CAACX,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,KAAT,EAAgB,UAAAU,CAAC;AAAA,WAAIA,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,MAAH,EAAJ;AAAA,GAAjB,CAA7B;;AAf+D,aAgB7CH,WAAW,IAAID,QAhB8B;AAAA,MAgBxDK,CAhBwD;AAAA,MAgBrDC,CAhBqD;AAAA,MAgBlDC,CAhBkD;;AAiB/D,MAAMC,GAAG,GAAIH,CAAC,IAAI,EAAN,GAAaC,CAAC,IAAI,CAAlB,GAAuBC,CAAnC;AAEA,MAAME,gBAAgB,GAAGd,qEAAW,CAACR,OAAD,EAAUS,8FAAV,CAApC;;AAnB+D,+BAoB5CC,4FAAwB,CACvCY,gBADuC,EAEvCvB,KAFuC,CApBoB;AAAA,MAoBxDwB,QApBwD,8BAyB/D;;;AACA,MAAIL,CAAC,KAAKM,SAAV,EAAqB,oBAAO,iDAAC,iEAAD,OAAP,CA1B0C,CA4B/D;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD;AAAA,4MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE1B1B,OAAO,CAAC2B,YAAR,CACFC,4FADE,EAEFC,0EAAM,CAAmC,aAAnC,EAAkD,CACnDH,GAAG,IAAI,EAAR,GAAc,IADsC,EAEnDA,GAAG,IAAI,CAAR,GAAa,IAFuC,EAGpDA,GAAG,GAAG,IAH8C,EAIpD,EAJoD,CAAlD,CAFJ,CAF0B;;AAAA;AAAA;AAAA,qBAW1BI,0EAAK,CAAC,GAAD,CAXqB;;AAAA;AAAA;AAAA,qBAY1BlB,aAAa,CAACmB,YAAd,EAZ0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAchC5B,sBAAQ,aAAR;;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;AAAA,GAAvB;;AAkBA,sBACI,iDAAC,wDAAD;AACI,SAAK,EAAEG,KADX;AAEI,SAAK,EAAEe,GAFX;AAGI,cAAU,EAAEV,UAHhB;AAII,YAAQ,EAAEY,QAJd;AAKI,YAAQ,EAAEE;AALd,IADJ;AASH,C","file":"8282-2591628ef5b4438c0c03.js","sourcesContent":["import React, { useContext } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport LEDServer from \"../../../jacdac-ts/src/servers/ledserver\"\nimport { LedCmd, LedReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport AppContext from \"../AppContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport LEDWidget from \"../widgets/LEDWidget\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service } = props\n    const { setError } = useContext(AppContext)\n    const server = useServiceServer<LEDServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const waveLengthRegister = useRegister(service, LedReg.WaveLength)\n    const [waveLength] = useRegisterUnpackedValue<[number]>(\n        waveLengthRegister,\n        props\n    )\n    const colorRegister = useRegister(service, LedReg.Color)\n    const busColor = useRegisterUnpackedValue<[number, number, number]>(\n        colorRegister,\n        props\n    )\n    const serverColor = useChange(server?.color, _ => _?.values())\n    const [r, g, b] = serverColor || busColor\n    const rgb = (r << 16) | (g << 8) | b\n\n    const ledCountRegister = useRegister(service, LedReg.LedCount)\n    const [ledCount] = useRegisterUnpackedValue<[number]>(\n        ledCountRegister,\n        props\n    )\n\n    // nothing to see\n    if (r === undefined) return <LoadingProgress />\n\n    // send animate command\n    const handleSetColor = (col: number) => async () => {\n        try {\n            await service.sendCmdAsync(\n                LedCmd.Animate,\n                jdpack<[number, number, number, number]>(\"u8 u8 u8 u8\", [\n                    (col >> 16) & 0xff,\n                    (col >> 8) & 0xff,\n                    col & 0xff,\n                    32,\n                ])\n            )\n            await delay(500)\n            await colorRegister.sendGetAsync()\n        } catch (e) {\n            setError(e)\n        }\n    }\n\n    return (\n        <LEDWidget\n            color={color}\n            value={rgb}\n            waveLength={waveLength}\n            ledCount={ledCount}\n            onChange={handleSetColor}\n        />\n    )\n}\n"],"sourceRoot":""}