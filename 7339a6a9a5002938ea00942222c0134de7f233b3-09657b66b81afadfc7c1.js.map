{"version":3,"file":"7339a6a9a5002938ea00942222c0134de7f233b3-09657b66b81afadfc7c1.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./src/components/blockly/dsl/servicesbase.ts","webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts"],"sourcesContent":["export interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n    // this handler support the editing experience but\n    // should not be compiled down or debugged\n    meta?: boolean\n}\n\nexport interface VMRole {\n    role: string\n    serviceClass: number\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    serverRoles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"start\"\n    | \"halt\"\n    | \"nop\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"wait\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"watch\"\n    | \"log\"\n    | \"roleBound\"\n    | \"roleBoundExpression\"\n    | \"onRoleConnected\"\n    | \"onRoleDisconnected\"\n    | \"raiseEvent\"\n\nexport const VMFunctions: jdtest.TestFunctionDescription[] = [\n    {\n        id: \"start\",\n        args: [],\n        prompt: `start block`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"log\",\n        args: [\"number\"],\n        prompt: `not used`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBound\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role {1} {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBoundExpression\",\n        args: [\"Identifier\"],\n        prompt: `is role {1} bound?`,\n        context: \"expression\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import {\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecificationFromName,\n} from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions,\n} from \"./ir\"\nimport {\n    VMChecker,\n    SpecSymbolResolver,\n} from \"../../jacdac-spec/spectool/jdutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram({ roles, serverRoles, handlers }: VMProgram) {\n    const newProgram: VMProgram = { roles, serverRoles, handlers: [] }\n    // process start blocks\n    handlers.forEach(startBlock)\n    // remove if-then-else\n    newProgram.handlers = handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction checkCall(cmd: VMBase, id: string) {\n    if (cmd.type === \"cmd\") {\n        const callee = (cmd as VMCommand).command.callee\n        if (callee.type === \"Identifier\") {\n            const cid = (callee as jsep.Identifier).name\n            return id === cid\n        }\n    }\n    return undefined\n}\n\nfunction startBlock(handler: VMHandler) {\n    if (handler.commands.length && checkCall(handler.commands[0], \"start\")) {\n        handler.commands.shift()\n        handler.commands.push({\n            type: \"cmd\",\n            command: {\n                type: \"CallExpression\",\n                callee: toIdentifier(\"halt\"),\n                arguments: [],\n            },\n        } as VMCommand)\n    }\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    let roleFound = info.roles.find(pair => pair.role === role)\n    let client = true\n    if (!roleFound) {\n        roleFound = info.serverRoles.find(pair => pair.role === role)\n        client = false\n    }\n    if (roleFound) {\n        // must succeed\n        const spec = serviceSpecificationFromClassIdentifier(\n            roleFound.serviceClass\n        )\n        assert(!!spec, `service class ${roleFound.serviceClass} not resolved`)\n        return { spec, client }\n    } else {\n        const spec = serviceSpecificationFromName(role)\n        return { spec, client: true }\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","import { Theme } from \"@material-ui/core\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_JOYSTICK,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isHighLevelEvent,\n    isHighLevelRegister,\n    isCommand,\n    isSensor,\n    serviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    JSON_TYPE,\n    NUMBER_TYPE,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n    STRING_TYPE,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport {\n    CompileCommandToVMOptions,\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { Variables } from \"blockly\"\nimport { paletteColorByIndex } from \"./palette\"\nimport { VariableJSON } from \"../../../../jacdac-ts/src/dsl/workspacejson\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\n\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\n\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return field.encoding === \"JSON\"\n        ? JSON_TYPE\n        : isBooleanField(field)\n        ? BOOLEAN_TYPE\n        : isStringField(field)\n        ? STRING_TYPE\n        : isNumericType(field)\n        ? NUMBER_TYPE\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_BOOTLOADER,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\n// internal helper functions\nconst customShadows = [\n    {\n        serviceClass: SRV_SERVO,\n        kind: \"rw\",\n        identifier: ServoReg.Angle,\n        field: \"_\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: ServoAngleField.SHADOW.type,\n        },\n    },\n    {\n        serviceClass: SRV_BUZZER,\n        kind: \"command\",\n        identifier: BuzzerCmd.PlayNote,\n        field: \"frequency\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: NoteField.SHADOW.type,\n        },\n    },\n]\n\nconst lookupCustomShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customShadows.find(\n        cs =>\n            cs.serviceClass === service.classIdentifier &&\n            cs.kind == info.kind &&\n            cs.identifier === info.identifier &&\n            cs.field == field.name\n    )?.shadow\n\nconst fieldsSupported = (pkt: jdspec.PacketInfo) =>\n    pkt.fields.every(toBlocklyType)\n\nconst fieldName = (reg: jdspec.PacketInfo, field: jdspec.PacketMember) =>\n    field.name === \"_\" ? reg.name : field.name\n\nconst fieldToShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n): BlockReference =>\n    lookupCustomShadow(service, info, field) ||\n    (isBooleanField(field)\n        ? { kind: \"block\", type: \"jacdac_on_off\" }\n        : isStringField(field)\n        ? { kind: \"block\", type: \"text\" }\n        : field.unit === \"°\"\n        ? {\n              kind: \"block\",\n              type: \"jacdac_angle\",\n          }\n        : field.unit === \"/\"\n        ? { kind: \"block\", type: \"jacdac_ratio\" }\n        : /^%/.test(field.unit)\n        ? { kind: \"block\", type: \"jacdac_percent\" }\n        : field.type === \"u8\"\n        ? { kind: \"block\", type: \"jacdac_byte\" }\n        : {\n              kind: \"block\",\n              type: \"math_number\",\n              value: field.defaultValue || 0,\n              min: field.typicalMin || field.absoluteMin,\n              max: field.typicalMax || field.absoluteMax,\n          })\n\nconst variableName = (srv: jdspec.ServiceSpec, client: boolean) =>\n    `${humanify(srv.camelName).toLowerCase()}${client ? \"\" : \" server\"} 1`\n\nconst isEnabledRegister = (info: jdspec.PacketInfo) =>\n    info.fields.length === 1 &&\n    info.fields[0].type === \"bool\" &&\n    info.name === \"enabled\"\n\nconst customMessage = (\n    srv: jdspec.ServiceSpec,\n    reg: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customMessages.find(\n        m =>\n            m.service === srv.classIdentifier &&\n            m.register === reg.identifier &&\n            m.field === field.name\n    )\n\nconst eventFieldGroups = [\n    {\n        output: NUMBER_TYPE,\n        filter: isNumericType,\n    },\n    {\n        output: BOOLEAN_TYPE,\n        filter: isBooleanField,\n    },\n    {\n        output: STRING_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding !== \"JSON\",\n    },\n    {\n        output: JSON_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding === \"JSON\",\n    },\n]\n\ntype ServicePackets = {\n    service: jdspec.ServiceSpec\n    packets: jdspec.PacketInfo[]\n}\n\n// exports\n\nexport function toRoleType(service: jdspec.ServiceSpec, client = true) {\n    return `${service.classIdentifier}:${client ? \"client\" : \"server\"}`\n}\n\nexport function parseRoleType(v: VariableJSON) {\n    const split = v.type.split(\":\")\n    return {\n        role: v.name,\n        serviceClass: parseInt(split[0]),\n        client: split.length === 2 ? split[1] === \"client\" : true,\n    }\n}\n\nexport const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n    info.fields.map(field => ({\n        type: \"input_value\",\n        name: fieldName(info, field),\n        check: toBlocklyType(field),\n    }))\n\nexport const fieldsToValues = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo\n) =>\n    toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n        info.fields,\n        field => fieldName(info, field),\n        field => fieldToShadow(service, info, field)\n    )\n\nexport const fieldsToMessage = (info: jdspec.PacketInfo) =>\n    info.fields.map((field, i) => `${humanify(field.name)} %${2 + i}`).join(\" \")\n\nexport interface ServiceRegister {\n    service: jdspec.ServiceSpec\n    register: jdspec.PacketInfo\n}\n\ninterface ServiceRegisterField extends ServiceRegister {\n    field: jdspec.PacketMember\n    einfo: jdspec.EnumInfo\n}\n\nexport const serviceHelp = (service: jdspec.ServiceSpec) => {\n    return withPrefix(`/services/${service.shortId}`)\n}\n\nconst sensorColor = paletteColorByIndex(1)\nconst otherColor = paletteColorByIndex(3)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const createServiceColor = (theme: Theme) => {\n    const serviceColor = (srv: jdspec.ServiceSpec) =>\n        isSensor(srv) ? sensorColor : otherColor\n    return serviceColor\n}\n\nexport const roleVariable = (\n    service: jdspec.ServiceSpec,\n    client = true\n): VariableInputDefinition => {\n    return {\n        type: \"field_variable\",\n        name: \"role\",\n        variable: variableName(service, client),\n        variableTypes: [toRoleType(service, client)],\n        defaultType: toRoleType(service, client),\n    }\n}\n\nexport const getServiceInfo = () => {\n    const allServices = serviceSpecifications()\n    const supportedServices = allServices\n        .filter(\n            service =>\n                !/^_/.test(service.shortId) && service.status !== \"deprecated\"\n        )\n        .filter(service => ignoredServices.indexOf(service.classIdentifier) < 0)\n    const registers = arrayConcatMany(\n        supportedServices.map(service =>\n            service.packets.filter(isHighLevelRegister).map(register => ({\n                service,\n                register,\n            }))\n        )\n    )\n    const [registerSimples, registerComposites] = splitFilter(\n        registers,\n        reg => reg.register.fields.length == 1\n    )\n    const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n        registerSimples,\n        ({ register }) => !!toBlocklyType(register.fields[0])\n    )\n    const registerSimpleEnumTypes = registerSimpleOthers\n        .filter(\n            ({ service, register }) => !!enumInfo(service, register.fields[0])\n        )\n        .map(({ service, register }) => ({\n            service,\n            register,\n            field: register.fields[0],\n            einfo: enumInfo(service, register.fields[0]),\n        }))\n    const registerCompositeEnumTypes = arrayConcatMany(\n        registerComposites.map(({ service, register }) =>\n            register.fields\n                .map(field => ({\n                    service,\n                    register,\n                    field,\n                    einfo: enumInfo(service, field),\n                }))\n                .filter(({ einfo }) => !!einfo)\n        )\n    )\n\n    return {\n        allServices,\n        supportedServices,\n        registers,\n        registerSimpleTypes,\n        registerComposites,\n        registerSimpleEnumTypes,\n        registerCompositeEnumTypes,\n        events: supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(isHighLevelEvent),\n            }))\n            .filter(kv => !!kv.events.length),\n\n        commands: arrayConcatMany(\n            supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        ),\n    }\n}\n\nexport class ServicesBaseDSL {\n    // only state required across methods of class\n    protected _serviceBlocks: ServiceBlockDefinition[]\n    protected _eventFieldBlocks: EventFieldDefinition[]\n    protected serviceColor: (srv: jdspec.ServiceSpec) => string\n\n    protected makeRegisterSimpleGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_simple_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0:\n                    customMessage(service, register, register.fields[0])?.get ||\n                    `%1 ${humanify(register.name)}`,\n                args0: [roleVariable(service, client)],\n                inputsInline: true,\n                output: toBlocklyType(register.fields[0]),\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field: register.fields[0],\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    protected makeRegisterSetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ register }) => !client || register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n    }\n\n    protected makeRegisterChangeByEventBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ service }) => !service.packets.some(isHighLevelEvent))\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${\n                    register.name\n                }${client ? \"\" : \"_server\"}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: this.serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n    }\n\n    protected makeRegisterNumericsGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    roleVariable(service, client),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n    }\n\n    protected makeRegisterEnumGetBlocks(\n        registers: ServiceRegisterField[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${\n                    field.name\n                }${client ? \"\" : \"_server\"}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    roleVariable(service, client),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    // generate accessor blocks for event/command data with numbers\n    protected makeFieldBlocks(sps: ServicePackets[], client = true) {\n        const worker = (\n            sp: ServicePackets,\n            output: string,\n            filter: (field: jdspec.PacketMember) => boolean\n        ) => {\n            const { service, packets } = sp\n            return packets\n                .filter(pkt => pkt.fields.filter(filter).length > 0)\n                .map(pkt => ({ service, pkt }))\n                .map(\n                    ({ service, pkt }) =>\n                        <EventFieldDefinition>{\n                            kind: \"block\",\n                            type: `jacdac_event_field_${output.toLowerCase()}_${\n                                service.shortId\n                            }_${pkt.name}${client ? \"\" : \"_server\"}`,\n                            message0: `${pkt.name} %1`,\n                            args0: [\n                                <InputDefinition>{\n                                    type: \"field_dropdown\",\n                                    name: \"field\",\n                                    options: pkt.fields.map(field => [\n                                        humanify(field.name),\n                                        field.name,\n                                    ]),\n                                },\n                            ],\n                            colour: this.serviceColor(service),\n                            inputsInline: true,\n                            tooltip: `Data fields of the ${pkt.name} ${\n                                client ? \"event\" : \"command\"\n                            }`,\n                            helpUrl: serviceHelp(service),\n                            service,\n                            event: pkt,\n                            output,\n                            template: \"event_field\",\n                        }\n                )\n        }\n\n        return arrayConcatMany(\n            arrayConcatMany(\n                eventFieldGroups.map(({ output, filter }) =>\n                    sps.map(sp => worker(sp, output, filter))\n                )\n            )\n        )\n    }\n\n    protected createCategoryHelper(options: CreateCategoryOptions) {\n        const { theme, source, liveServices } = options\n        this.serviceColor = createServiceColor(theme)\n\n        const blockServices: { serviceClass: number }[] =\n            source?.variables\n                .map(parseRoleType)\n                .filter(\n                    vt =>\n                        !!serviceSpecificationFromClassIdentifier(\n                            vt.serviceClass\n                        )\n                ) || []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition?.template === \"event\")\n                .map(({ block, definition }) => {\n                    const { events } = definition as EventBlockDefinition\n                    if (events.length === 1) return events[0]\n                    else {\n                        const eventName = block.inputs[0].fields[\"event\"]\n                            .value as string\n                        return events.find(ev => ev.name === eventName)\n                    }\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(pair =>\n                              services.find(\n                                  service =>\n                                      service.classIdentifier ===\n                                      pair.serviceClass\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(s => s.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const getFieldBlocks = (\n            service: jdspec.ServiceSpec,\n            fieldBlocks: EventFieldDefinition[]\n        ) =>\n            fieldBlocks\n                .filter(\n                    ev => ev.service === service && usedEvents.has(ev.event)\n                )\n                .map<BlockReference>(block => ({\n                    kind: \"block\",\n                    type: block.type,\n                    values: block.values,\n                }))\n\n        const makeCategory = (\n            service: jdspec.ServiceSpec,\n            isClient: boolean,\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBLocks: EventFieldDefinition[]\n        ) => {\n            return {\n                kind: \"category\",\n                name: service.name + (isClient ? \"\" : \" Server\"),\n                colour: this.serviceColor(service),\n                contents: [\n                    <ButtonDefinition>{\n                        kind: \"button\",\n                        text: `Add ${service.name} ${\n                            isClient ? \"role\" : \"server\"\n                        }`,\n                        callbackKey: `jacdac_add_role_callback_${toRoleType(\n                            service,\n                            isClient\n                        )}`,\n                        callback: workspace =>\n                            Variables.createVariableButtonHandler(\n                                workspace,\n                                null,\n                                toRoleType(service, isClient)\n                            ),\n                    },\n                    ...serviceBlocks.map<BlockReference>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...getFieldBlocks(service, eventFieldBLocks),\n                ],\n            }\n        }\n\n        return (\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBlocks: EventFieldDefinition[],\n            client = true\n        ) =>\n            toolboxServices\n                .map(serviceClient => ({\n                    serviceClient,\n                    serviceBlocks: serviceBlocks.filter(\n                        block => block.service === serviceClient\n                    ),\n                }))\n                .map<CategoryDefinition>(\n                    sc =>\n                        makeCategory(\n                            sc.serviceClient,\n                            client,\n                            sc.serviceBlocks,\n                            eventFieldBlocks\n                        ) as CategoryDefinition\n                )\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const makeAwaitEvent = (\n            cmd: string,\n            role: string,\n            eventName: string\n        ) => {\n            return <CompileEventToVMResult>{\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments:\n                        cmd == \"awaitEvent\"\n                            ? [\n                                  toMemberExpression(\n                                      role.toString(),\n                                      eventName.toString()\n                                  ),\n                              ]\n                            : [\n                                  toIdentifier(role.toString()),\n                                  toIdentifier(eventName.toString()),\n                              ],\n                    callee: toIdentifier(cmd),\n                },\n                event: {\n                    role: role.toString(),\n                    event: eventName.toString(),\n                },\n            }\n        }\n\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return makeAwaitEvent(\n                    \"awaitEvent\",\n                    role.toString(),\n                    eventName.toString()\n                )\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case ROLE_BOUND_EVENT_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        const { value: eventName } = inputs[0].fields[\"event\"]\n                        return makeAwaitEvent(\n                            \"roleBound\",\n                            role.toString(),\n                            eventName.toString()\n                        )\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                const errors: VMError[] = []\n                switch (type) {\n                    case ROLE_BOUND_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        return {\n                            expr: {\n                                type: \"CallExpression\",\n                                arguments: [toIdentifier(role.toString())],\n                                callee: toMemberExpression(\n                                    \"$fun\",\n                                    \"roleBoundExpression\"\n                                ),\n                            } as jsep.Expression,\n                            errors,\n                        }\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileCommandToVM(options: CompileCommandToVMOptions) {\n        const { event, block, definition, blockToExpression } = options\n        const { template } = definition\n        const { inputs } = block\n        switch (template) {\n            case \"register_set\": {\n                // TODO: need to handle the case of writing a register with fields\n                const { register } = definition as RegisterBlockDefinition\n                const exprsErrors = inputs.map(a => {\n                    return blockToExpression(event, a.child)\n                })\n                const { value: role } = inputs[0].fields.role\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role as string, register.name),\n                            ...exprsErrors.map(p => p.expr),\n                        ],\n                        callee: toIdentifier(\"writeRegister\"),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"raiseNo\":\n            case \"raiseArgs\":\n            case \"command\": {\n                const { command: serviceCommand } =\n                    definition as CommandBlockDefinition\n                const { value: role } = inputs[0].fields.role\n                const eventName =\n                    template === \"raiseNo\"\n                        ? inputs[0].fields[\"event\"].value.toString()\n                        : \"\"\n                const exprsErrors =\n                    template === \"raiseNo\"\n                        ? []\n                        : inputs.map(a => {\n                              return blockToExpression(event, a.child)\n                          })\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: exprsErrors.map(p => p.expr),\n                        callee: toMemberExpression(\n                            role as string,\n                            eventName ? eventName : serviceCommand.name\n                        ),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"server\": {\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"nop\"),\n                    }),\n                    errors: [],\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case SET_STATUS_LIGHT_BLOCK: {\n                        console.log(\"SET_STATUS\")\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n}\n","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import BlockDomainSpecificLanguage from \"./dsl\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { makeVMBase } from \"../../vm/VMgenerator\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    types: [\"variables_get\", \"variables_set\", \"math_change\"],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n    compileExpressionToVM: ({ block /*definition*/ }) => {\n        const { type, inputs } = block\n        if (type === \"variables_get\") {\n            const { value: variable } = inputs[0].fields.var\n            const ret = {\n                expr: toMemberExpression(\"$var\", variable.toString()),\n                errors: [],\n            }\n            return ret\n        }\n        return undefined\n    },\n    compileCommandToVM: ({\n        event,\n        block,\n        /*definition,*/ blockToExpression,\n    }) => {\n        const { type, inputs } = block\n        if (type === \"math_change\" || type === \"variables_set\") {\n            const { expr, errors } = blockToExpression(event, inputs[0].child)\n            const { value: variable } = inputs[0].fields.var\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [\n                        toMemberExpression(\"$var\", variable.toString()),\n                        type === \"variables_set\"\n                            ? expr\n                            : ({\n                                  type: \"BinaryExpression\",\n                                  operator: \"+\",\n                                  left: toMemberExpression(\n                                      \"$var\",\n                                      variable.toString()\n                                  ),\n                                  right: expr,\n                              } as jsep.BinaryExpression),\n                    ],\n                    callee: toIdentifier(\"writeLocal\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n}\nexport default variablesDsl\n","import {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport { toIdentifier, RoleEvent } from \"../../../jacdac-ts/src/vm/compile\"\nimport {\n    BUILTIN_TYPES,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n} from \"../blockly/toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage, { resolveDsl } from \"../blockly/dsl/dsl\"\nimport { parseRoleType } from \"../blockly/dsl/servicesbase\"\nimport { splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockJSON, WorkspaceJSON } from \"../../../jacdac-ts/src/dsl/workspacejson\"\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport interface CmdWithErrors {\n    cmd: VMBase\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    console.debug(`compile vm`, { workspace, dsls })\n\n    if (!workspace) return undefined\n\n    const [roles, serverRoles]: [VMRole[], VMRole[]] = splitFilter(\n        workspace.variables\n            .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n            .map(parseRoleType),\n        r => r.client\n    )\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            const dsl = resolveDsl(dsls, type)\n            if (!dsl) {\n                console.warn(`unknown block ${type}`, {\n                    type,\n                    ev,\n                    block,\n                    d: Blockly.Blocks[type],\n                })\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n            } else {\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const res = dsl.compileExpressionToVM?.({\n                    event: ev,\n                    definition,\n                    block,\n                    blockToExpressionInner,\n                })\n                if (res) {\n                    if (res.errors) res.errors.forEach(e => errors.push(e))\n                    return res.expr\n                }\n\n                const { template } = definition\n                if (template === \"shadow\") {\n                    const field = inputs[0].fields[\"value\"]\n                    const v = field.value\n                    return <jsep.Literal>{\n                        type: \"Literal\",\n                        value: v,\n                        raw: v + \"\",\n                    }\n                }\n\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n                console.warn(`unsupported expression block ${type}`, {\n                    ev,\n                    block,\n                    definition,\n                })\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        console.debug(`block2c`, { event, type, block, inputs })\n        switch (type) {\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n\n                console.log(\"dynamic if\")\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const dsl = resolveDsl(dsls, type)\n                if (dsl) {\n                    const definition =\n                        resolveBlockDefinition<ServiceBlockDefinition>(type)\n                    const template = definition?.template\n                    if (template === \"meta\") return undefined\n                    const dslRes = dsl.compileCommandToVM?.({\n                        event,\n                        block,\n                        definition,\n                        blockToExpression,\n                    })\n                    if (dslRes) {\n                        dslRes.errors = processErrors(block, dslRes.errors)\n                        return dslRes\n                    }\n                }\n                console.warn(`unsupported command block ${type}`, { block })\n                return {\n                    cmd: undefined,\n                    errors: [\n                        {\n                            sourceId: block.id,\n                            message: `unsupported command block ${type}`,\n                        },\n                    ],\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks\n            ?.filter(child => !!child)\n            .forEach(child => {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child) || {}\n                    if (cmd) handler.commands.push(cmd)\n                    errors?.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    } else {\n                        console.debug(e)\n                    }\n                }\n            })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            let topMeta = false\n\n            try {\n                const dsl = resolveDsl(dsls, type)\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const { expression, errors, event, meta } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n                topMeta = meta\n\n                // if dsl didn't compile anything try again\n                const { template } = definition || {}\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            topErrors = [\n                                {\n                                    sourceId: top.id,\n                                    message: `unsupported handler block ${type}`,\n                                },\n                            ]\n                            console.debug(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n                meta: !!topMeta,\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        serverRoles,\n        handlers,\n    }\n}\n"],"names":["VMFunctions","id","args","prompt","context","serviceSpecificationFromClassIdentifier","serviceSpecificationFromName","VMChecker","SpecSymbolResolver","assert","toIdentifier","type","name","toMemberExpression","root","field","object","property","computed","handlerVisitor","handler","visitITE","visitCommand","commands","forEach","visitBase","base","ite","else","then","compileProgram","roles","serverRoles","handlers","newProgram","startBlock","map","h","removeIfThenElse","errors","checkCall","cmd","callee","command","cid","undefined","length","shift","push","arguments","newSequence","labels","labelId","time","end","expr","pop","getServiceFromRole","info","role","roleFound","find","pair","client","spec","serviceClass","checkProgram","prog","allErrors","goodHandlers","errorFun","e","sourceId","message","symbolResolver","checker","_","errorCount","c","checkCommand","registers","s","fld","split","register","events","event","withPrefix","humanify","isNumericType","BuzzerCmd","JoystickReg","ServoReg","SRV_BOOTLOADER","SRV_BUZZER","SRV_CONTROL","SRV_JOYSTICK","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SERVO","SystemReg","Flags","isHighLevelEvent","isHighLevelRegister","isCommand","isSensor","serviceSpecifications","arrayConcatMany","splitFilter","toMap","uniqueMap","NoteField","ServoAngleField","BOOLEAN_TYPE","CODE_STATEMENT_TYPE","JSON_TYPE","NUMBER_TYPE","resolveBlockDefinition","STRING_TYPE","makeVMBase","Variables","paletteColorByIndex","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","isBooleanField","isStringField","toBlocklyType","encoding","enumInfo","srv","enums","ignoredServices","customMessages","service","Direction","get","customShadows","kind","identifier","Angle","shadow","SHADOW","PlayNote","lookupCustomShadow","cs","classIdentifier","fieldsSupported","pkt","fields","every","fieldName","reg","fieldToShadow","unit","test","value","defaultValue","min","typicalMin","absoluteMin","max","typicalMax","absoluteMax","variableName","camelName","toLowerCase","isEnabledRegister","customMessage","m","eventFieldGroups","output","filter","f","toRoleType","parseRoleType","v","parseInt","fieldsToFieldInputs","check","fieldsToValues","fieldsToMessage","i","join","serviceHelp","shortId","sensorColor","otherColor","createServiceColor","theme","serviceColor","roleVariable","variable","variableTypes","defaultType","getServiceInfo","allServices","supportedServices","status","indexOf","packets","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","kv","lowLevel","ServicesBaseDSL","makeRegisterSimpleGetBlocks","message0","args0","inputsInline","colour","tooltip","description","helpUrl","template","makeRegisterSetBlocks","values","previousStatement","nextStatement","makeRegisterChangeByEventBlocks","some","Intensity","makeRegisterNumericsGetBlocks","re","options","makeRegisterEnumGetBlocks","Object","keys","members","member","makeFieldBlocks","sps","worker","sp","createCategoryHelper","source","liveServices","blockServices","variables","vt","usedEvents","Set","blocks","block","definition","eventName","inputs","ev","jdBlocks","_serviceBlocks","services","toolboxServices","diagnostics","specification","sort","l","r","localeCompare","getFieldBlocks","fieldBlocks","has","makeCategory","isClient","serviceBlocks","eventFieldBLocks","contents","text","callbackKey","callback","workspace","createVariableButtonHandler","eventFieldBlocks","serviceClient","sc","compileEventToVM","makeAwaitEvent","expression","toString","blockToExpression","child","compileExpressionToVM","eventInfo","compileCommandToVM","exprsErrors","a","p","flatMap","serviceCommand","console","log","builtins","jacdac_on_off","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","createBlocks","style","precision","colourOptions","columns","blockToValue","variablesDsl","types","createCategory","custom","var","ret","operator","left","right","BUILTIN_TYPES","Blockly","resolveDsl","processErrors","workspaceJSONToVMProgram","dsls","debug","EmptyExpression","Error","blockIn","blockToExpressionInner","raw","dsl","warn","d","Blocks","res","blockToCommand","thenHandler","elseHandler","t","addCommands","children","exprErrors","ifThenElse","concat","dslRes","nop","top","topEvent","topErrors","topMeta","meta"],"sourceRoot":""}