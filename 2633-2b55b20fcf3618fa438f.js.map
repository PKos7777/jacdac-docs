{"version":3,"sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWaterLevel.tsx"],"names":["DashbaordWaterLevel","props","service","services","variant","levelRegister","useRegister","WaterLevelReg","useRegisterUnpackedValue","value","server","useServiceServer","color","useWidgetTheme","background","controlBackground","active","textProps","hasValue","isNaN","widgetSize","useWidgetSize","length","tvalue","Math","round","mx","wx","n","w","mty","mby","hy","h","r","onChange","event","newValue","svalue","reading","setValues","refresh","Array","fill","map","_","i"],"mappings":"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","file":"2633-2b55b20fcf3618fa438f.js","sourcesContent":["import React from \"react\"\nimport { WaterLevelReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, Slider } from \"@material-ui/core\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashbaordWaterLevel(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const levelRegister = useRegister(service, WaterLevelReg.Level)\n    const [value] = useRegisterUnpackedValue<[number]>(levelRegister, props)\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n    const hasValue = !isNaN(value)\n    const widgetSize = useWidgetSize(variant, services?.length)\n    const tvalue = hasValue ? `${Math.round(value * 100)}%` : `--`\n\n    const mx = 5\n    const wx = 6\n    const n = 8\n    const w = (wx + mx) * n + 2 * mx\n    const mty = 42\n    const mby = mx\n    const hy = w * 2\n    const h = hy + mty + mby\n    const r = 1\n\n    const onChange = (event: unknown, newValue: number | number[]): void => {\n        const svalue = newValue as number\n        server?.reading.setValues([svalue])\n        levelRegister.refresh()\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h} size={widgetSize}>\n                    <rect\n                        fill={background}\n                        x={0}\n                        y={0}\n                        width={w}\n                        height={h}\n                        r={r}\n                    />\n                    {Array(n)\n                        .fill(0)\n                        .map((_, i) => (\n                            <path\n                                key={`back${i}`}\n                                stroke={controlBackground}\n                                d={`M ${2 * mx + i * (wx + mx)} ${\n                                    h - mby\n                                } v ${-hy}`}\n                                strokeWidth={wx}\n                                strokeLinecap={i % 2 === 0 ? \"round\" : \"square\"}\n                            />\n                        ))}\n                    {hasValue &&\n                        Array(n)\n                            .fill(0)\n                            .map((_, i) => (\n                                <path\n                                    key={`water${i}`}\n                                    stroke={active}\n                                    d={`M ${2 * mx + i * (wx + mx)} ${\n                                        h - mby - 2\n                                    } v ${-hy * value}`}\n                                    strokeWidth={wx + 2}\n                                    strokeLinecap={\"square\"}\n                                />\n                            ))}\n                    {tvalue && (\n                        <text key=\"text\" x={w >> 1} y={mty >> 1} {...textProps}>\n                            {tvalue}\n                        </text>\n                    )}\n                </SvgWidget>\n            </Grid>\n            {server && hasValue && (\n                <Grid item xs>\n                    <Slider\n                        valueLabelDisplay=\"off\"\n                        min={0}\n                        max={1}\n                        step={0.05}\n                        value={value}\n                        onChange={onChange}\n                        color={color}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"sourceRoot":""}