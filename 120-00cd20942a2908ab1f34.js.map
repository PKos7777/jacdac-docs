{"version":3,"sources":["webpack:///./src/components/dashboard/DashboardSevenSegmentDisplay.tsx"],"names":["DashboardSevenSegmentDisplay","props","service","useRegisterUnpackedValue","register","SevenSegmentDisplayReg","Digits","Uint8Array","digits","brightnessRegister","Brightness","brightness","DigitCount","digitCount","DecimalPoint","decimalPoint","host","useServiceHost","color","useWidgetTheme","active","background","undefined","md","rs","hs","ws","wd","hd","w","h","opacity","VerticalSegment","bit","digit","mask","mx","my","HorizontalSegment","DotSegment","Digit","dprops","x","y","Array","fill","map","_","i"],"mappings":"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","file":"120-00cd20942a2908ab1f34.js","sourcesContent":["import React from \"react\"\nimport { SevenSegmentDisplayReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceHost from \"../hooks/useServiceHost\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { Grid } from \"@material-ui/core\"\nimport RegisterInput from \"../RegisterInput\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\n\nexport default function DashboardSevenSegmentDisplay(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n\n    const [digits] = useRegisterUnpackedValue<[Uint8Array]>(\n        service.register(SevenSegmentDisplayReg.Digits)\n    ) || [new Uint8Array(0)]\n    const brightnessRegister = service.register(\n        SevenSegmentDisplayReg.Brightness\n    )\n    const [brightness] = useRegisterUnpackedValue<[number]>(brightnessRegister, props)\n    const [digitCount] = useRegisterUnpackedValue<[number]>(\n        service.register(SevenSegmentDisplayReg.DigitCount),\n        props\n    )\n    const [decimalPoint] = useRegisterUnpackedValue<[boolean]>(\n        service.register(SevenSegmentDisplayReg.DecimalPoint),\n        props\n    )\n\n    const host = useServiceHost(service)\n    const color = host ? \"secondary\" : \"primary\"\n    const { active, background } = useWidgetTheme(color)\n\n    if (digitCount === undefined) return <LoadingProgress />\n\n    const md = 4\n    const rs = 4\n    const hs = 32\n    const ws = 28\n    const wd = ws + 2 * rs\n    const hd = 2 * rs\n\n    const w = digitCount * (wd + 4 * md) + md\n    const h = 2 * md + 3 * hd + 2 * hs\n    const opacity = brightness || 0\n\n    /*\n    GFEDCBA DP\n    - A -\n    |   |\n    G   B\n    |   |\n    - F -\n    |   |   -\n    E   C  |DP|\n    - D -   -\n    */\n\n    const VerticalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${-rs} ${rs} v ${hs} l ${rs} ${rs} l ${rs} ${-rs} v ${-hs} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n    const HorizontalSegment = (props: {\n        digit: number\n        mask: number\n        mx: number\n        my: number\n    }) => {\n        const bit = (props.digit & props.mask) == props.mask\n        return (\n            <>\n                <path\n                    fill={background}\n                    stroke=\"none\"\n                    d={`M ${props.mx} ${\n                        props.my\n                    } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                />\n                {bit && (\n                    <path\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        d={`M ${props.mx} ${\n                            props.my\n                        } l ${rs} ${-rs} h ${ws} l ${rs} ${rs} l ${-rs} ${rs} h ${-ws} Z`}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const DotSegment = (props: { digit: number }) => {\n        const bit = (props.digit & 0x80) == 0x80\n        const mx = rs + wd + 2 * rs\n        const my = rs + 2 * hd + 2 * hs\n        return (\n            <>\n                <circle\n                    fill={background}\n                    stroke=\"none\"\n                    r={rs}\n                    cx={mx}\n                    cy={my}\n                />\n                {bit && (\n                    <circle\n                        opacity={opacity}\n                        fill={active}\n                        stroke=\"none\"\n                        r={rs}\n                        cx={mx}\n                        cy={my}\n                    />\n                )}\n            </>\n        )\n    }\n\n    const Digit = (dprops: { x: number; y: number; digit: number }) => {\n        const { x, y, digit } = dprops\n        return (\n            <g transform={`translate(${x}, ${y})`}>\n                <VerticalSegment\n                    key=\"G\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0x01}\n                />\n\n                <HorizontalSegment\n                    key=\"F\"\n                    mx={rs}\n                    my={rs + hs + hd}\n                    digit={digit}\n                    mask={0x02}\n                />\n\n                <VerticalSegment\n                    key=\"E\"\n                    mx={rs}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0x04}\n                />\n\n                <HorizontalSegment\n                    key=\"D\"\n                    mx={rs}\n                    my={rs + 2 * hd + 2 * hs}\n                    digit={digit}\n                    mask={0x08}\n                />\n\n                <VerticalSegment\n                    key=\"C\"\n                    mx={rs + wd}\n                    my={rs + hd + hs}\n                    digit={digit}\n                    mask={0x10}\n                />\n                <VerticalSegment\n                    key=\"B\"\n                    mx={rs + wd}\n                    my={rs}\n                    digit={digit}\n                    mask={0x20}\n                />\n\n                <HorizontalSegment\n                    key=\"A\"\n                    mx={rs}\n                    my={rs}\n                    digit={digit}\n                    mask={0x40}\n                />\n\n                {decimalPoint && <DotSegment digit={digit} />}\n            </g>\n        )\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    {Array(digitCount)\n                        .fill(0)\n                        .map((_, i) => (\n                            <Digit\n                                key={i}\n                                x={md + (wd + 4 * md) * i}\n                                y={md}\n                                digit={digits?.[i] || 0}\n                            />\n                        ))}\n                </SvgWidget>\n            </Grid>\n            <Grid item>\n                <RegisterInput register={brightnessRegister} />\n            </Grid>\n        </Grid>\n    )\n}\n"],"sourceRoot":""}