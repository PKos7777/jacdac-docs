{"version":3,"file":"2470-12f48519010dc24b691f.js","mappings":";;;;;;;;;;;;;;AAA0D;AACgC;AAC3D;AACP;AACe;AACO;AACyC;AAChF;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,kCAAkC,6CAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uGAAwB;;AAEtC,uBAAuB,wFAAc;AACrC;;AAEA;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL;;AAEA;AACA;AACA;;AAEA,sBAAsB,gDAAmB,CAAC,kGAA2B;AACrE;AACA,GAAG,eAAe,gDAAmB,YAAY,uFAAQ;AACzD,eAAe,yDAAI;AACnB;AACA,GAAG,4EAA4E,gDAAmB,CAAC,4DAAU;AAC7G;AACA,GAAG;AACH,CAAC;AACD,MAAqC,GAAG,CAAM;AAC9C,yDAAe,uEAAU;AACzB;AACA,CAAC,iBAAiB;;;;;;;;;;;;;;;;;;;;;CCtFlB;;CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASU,iBAAT,GAA6B;AACxC,MAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCX,iDAAU,CAACG,6DAAD,CAAlD;AACA,MAAM;AAAA,OAACS,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,+CAAQ,CAAC,KAAD,CAAtC;AACA,MAAMa,MAAM,GAAGV,kEAAK,EAApB;;AAEA,MAAMW,YAAY,GAAIC,KAAD,IAAgD;AACjEL,IAAAA,cAAc,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACH,GAFD;;AAGA,MAAMC,WAAW,GAAG,MAAMR,cAAc,CAAC,EAAD,CAAxC;;AACA,MAAMS,WAAW,GAAG,MAAMP,UAAU,CAAC,IAAD,CAApC;;AACA,MAAMQ,UAAU;AAAA,gHAAG,aAAY;AAC3B,YAAMb,0EAAK,CAAC,GAAD,CAAX;AACAK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHe;;AAAA,oBAAVQ,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAKA,sBACI,iDAAC,4EAAD;AACI,MAAE,EAAEP,MADR;AAEI,SAAK,EAAC,QAFV;AAGI,UAAM,EAAC,QAHX;AAII,WAAO,EAAC,UAJZ;AAKI,QAAI,EAAC,QALT;AAMI,QAAI,EAAC,OANT;AAOI,kBAAW,sBAPf;AAQI,SAAK,EAAEJ,WARX;AASI,YAAQ,EAAEK,YATd;AAUI,WAAO,EAAEK,WAVb;AAWI,UAAM,EAAEC,UAXZ;AAYI,cAAU,EACNT,OAAO,GACD;AACIU,MAAAA,YAAY,eACR,iDAAC,kEAAD;AAAgB,gBAAQ,EAAC;AAAzB,sBACI,iDAAC,0EAAD;AACI,iBAAS,EAAC,cADd;AAEI,aAAK,EAAC,OAFV;AAGI,YAAI,EAAC,OAHT;AAII,eAAO,EAAEH;AAJb,sBAMI,iDAAC,yEAAD,OANJ,CADJ;AAFR,KADC,GAeDI;AA5Bd,IADJ;AAiCH","sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","webpack://jacdac-docs/./src/components/DrawerSearchInput.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, position === 'end' ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","import React, { useContext, useRef, useState } from \"react\"\n// tslint:disable-next-line: no-submodule-imports\nimport TextField from \"@material-ui/core/TextField\"\n// tslint:disable-next-line: no-submodule-imports\nimport AppContext from \"./AppContext\"\nimport { useId } from \"react-use-id-hook\"\nimport { InputAdornment } from \"@material-ui/core\"\nimport ClearIcon from \"@material-ui/icons/Clear\"\nimport IconButtonWithTooltip from \"./ui/IconButtonWithTooltip\"\nimport { delay } from \"../../jacdac-ts/src/jdom/utils\"\n\nexport default function DrawerSearchInput() {\n    const { searchQuery, setSearchQuery } = useContext(AppContext)\n    const [focused, setFocused] = useState(false)\n    const textId = useId()\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(event.target.value)\n    }\n    const handleClear = () => setSearchQuery(\"\")\n    const handleFocus = () => setFocused(true)\n    const handleBlur = async () => {\n        await delay(200)\n        setFocused(false)\n    }\n\n    return (\n        <TextField\n            id={textId}\n            label=\"Search\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            type=\"search\"\n            size=\"small\"\n            aria-label=\"Search documentation\"\n            value={searchQuery}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            InputProps={\n                focused\n                    ? {\n                          endAdornment: (\n                              <InputAdornment position=\"end\">\n                                  <IconButtonWithTooltip\n                                      trackName=\"search.clear\"\n                                      title=\"clear\"\n                                      size=\"small\"\n                                      onClick={handleClear}\n                                  >\n                                      <ClearIcon />\n                                  </IconButtonWithTooltip>\n                              </InputAdornment>\n                          ),\n                      }\n                    : undefined\n            }\n        />\n    )\n}\n"],"names":["React","useContext","useState","TextField","AppContext","useId","InputAdornment","ClearIcon","IconButtonWithTooltip","delay","DrawerSearchInput","searchQuery","setSearchQuery","focused","setFocused","textId","handleChange","event","target","value","handleClear","handleFocus","handleBlur","endAdornment","undefined"],"sourceRoot":""}